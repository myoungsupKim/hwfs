<?xml version="1.0" encoding="utf-8"?>
<ADL version="1.2">
  <TypeDefinition url="default_typedef.xml"/>
  <GlobalVariables url="globalvars.xml"/>
  <Application id="HWFS" codepage="utf-8" language="Korean" loginformurl="" loginformstyle="" windowopeneffect="" windowcloseeffect="" version="" tracemode="" themeid="Mobile.xtheme" onload="application_onload" enabletouchevent="true" layoutautofittype="width" loadingimage="HWImage::loading.gif" httptimeout="600" httpretry="0">
    <Layout>
      <MainFrame id="mainframe" title="maintitle" defaultfont="" resizable="true" showtitlebar="false" showstatusbar="true" left="0" top="0" width="540" height="923">
        <ChildFrame id="childframe" formurl="frame::CmmnFrameBase.xfdl" showtitlebar="false" showstatusbar="false" openeffect="" closeeffect=""/>
      </MainFrame>
    </Layout>
    <ScreenInfo>
      <Screen name="ScreenPhone" type="phone" width="540" autozoom="true" screenwidth="540" sizeorientation="portrait" themeid="Mobile.xtheme" zoommin="100%" zoommax="100%" systemos="android,ios"/>
      <Screen name="ScreenPad" type="tablet" width="708" autozoom="true" screenwidth="708" sizeorientation="portrait" themeid="Mobile.xtheme" zoommin="100%" zoommax="100%" systemos="android,ios"/>
    </ScreenInfo>
    <Script type="xscript5.0"/>
  </Application>
  <Script type="xscript5.0"><![CDATA[this.application_onload = function(obj:Application, e:nexacro.LoadEventInfo)
{
	// 20150105 	svc 설정	 김광호
	//-----------------------------------------------------------------------
    // adl별로 실행모드 설정
    //-----------------------------------------------------------------------
	var sXadlUrl = application.xadl;
	
	trace("sXadlUrl<>" +sXadlUrl);
	var sUrl;
	    sUrl     = sXadlUrl.substring(0, sXadlUrl.indexOf('/hwfs_mobile')+1);   
    trace("nexacro.OS :: "+nexacro.OS);
	//서버 실행
	if(sXadlUrl.indexOf("http://") != -1)  
	{		
		// globalvars 변경
		application.gv_webRoot = sUrl;
		
		// Service URL 변경
		application.services["svc"].url   		      = sUrl;
		application.services["U_svc"].url 			  = sUrl + "hwfs_svc/";
		application.gv_chartPath                      = sUrl + "fusionchart/";
		application.gv_namoInitUrl                    = sUrl + "namo/namowec.js";
		 
		 
		 trace("sUrl :: "+sUrl);
		 
		// 개발서버일 경우
		if ( sUrl.indexOf("172.16.1.121:8091") > -1 )  
		{
			application.gv_runMode = "D";
		} 	
		// 운영서버일 경우
		else if ( sUrl.indexOf("m.hanwhafoodist.co.kr") > -1 )  
		{ 
			application.gv_runMode = "S";
		} 
		// localhost일 경우
		else if ( sUrl.indexOf("localhost") > -1 )
		{
			trace("로컬호스트 모드");
			application.gv_runMode = "L";
		}
	}
	else if (nexacro.OS == "Android" || nexacro.OS == "iOS")	// 모바일앱일 경우
	{
		// 개발서버일 경우
		if(application.key.indexOf("TEST") > -1 )
		{
			application.services["svc"].url   = "http://172.16.1.121:8091/";	// 개발서버
			application.services["U_svc"].url = "http://172.16.1.121:8091/hwfs_svc/";
			application.gv_runMode2 = "D";
		}
		// 운영서버일 경우	
		else
		{
			application.services["svc"].url   = "https://m.hanwhafoodist.co.kr/";	// 운영서버
			application.services["U_svc"].url = "https://m.hanwhafoodist.co.kr/hwfs_svc/";
			application.gv_runMode2 = "S";
		}	
		
		application.gv_runMode = "Hybrid";	 		
			
	}
	// 실행모드가 UX Studio 일때
	else {
		trace("Runtime으로 실행됨");
		application.gv_runMode = "Runtime";		
		application.services["svc"].url   = "http://localhost:8080/";	// 로컬서버
		application.services["U_svc"].url = "http://localhost:8080/hwfs_svc/";
		
		//application.services["svc"].url   = "http://m.hanwhafoodist.co.kr/";	 // 운영서버
		//application.services["U_svc"].url = "http://m.hanwhafoodist.co.kr/hwfs_svc/";
	}
}

this.gfn_IsNull = function (sValue)
{
	if (sValue == null) 
	{
		return true;
	}
	if (""+sValue == "null") //ios 로컬에서 null 체크 추가
	{
		return true;
	}
	if (sValue == undefined) 
	{
		return true;
	}
	if (("x" + sValue == "xNaN") && (sValue == undefined)) 
	{
		return true;
	}
	if (sValue.length == 0) 
	{
		return true;
	}
	sValue = ""+sValue;
	if (sValue.trim() == "") 
	{
		return true;
	}
	return false;
}

this.gfn_IsEmpty = function (sValue)
{
	return this.gfn_IsNull(sValue);
}

this.gfn_setWaitCursor = function (flag, obj, msg)
{
	if (this.gvWaitCount <= 0 && flag == false) 
	{
		return;
	}

	if (this.gvWaitCount > 0 && flag == true) 
	{
		return;
	}
	/* coolmind 2012.08.02 - Hybrid는 WaitMessage지원 안함		
	 if (flag == true)
	 {
	 if(!gfn_IsNull(msg)) obj.setWaitMessage(msg);
	 else obj.setWaitMessage("처리중입니다...");
	 }
	 */
	obj.setWaitCursor(flag);
	if (flag == true) 
	{ 
		this.gvWaitCount++;
	}
	else 
	{
		this.gvWaitCount--;
	}

	trace("***************** gvWaitCount count : " + this.gvWaitCount);
}

/*********************************************************************************************
 * @type   : function
 * @access : public
 * @desc   : 현재 전체 경로를 가지고온다.
 * @param  : obj 현재 obj
 * @return :
 *********************************************************************************************/
this.gfn_getObjPath = function (obj)
{
	var arrPath = new Array();
	var tmpObj = obj;
	var cnt = 1;

	arrPath[0] = tmpObj.name;
	while (true) 
	{
		if (tmpObj.parent == "[object ChildFrame]") 
		{
			arrPath[cnt-1] = "application.mainframe.childframe.form";
			break;
		}

		arrPath[cnt] = tmpObj.parent.name;
		tmpObj = tmpObj.parent;
		cnt++;
	}

	var path = "";
	for (var i = arrPath.length - 1; i >= 0; i--) 
	{
		path += arrPath[i] + ".";
	}

	return path;
}

/*********************************************************************************************
 * @type   : function
 * @access : public
 * @desc   : Main Division의 Title을 세팅한다.
 * @param  : 
 * @return :
 *********************************************************************************************/
this.gfn_setTitleMain = function (parmTitle)
{
	application.goTopMain.staTitle.set_text(parmTitle);
}

/*********************************************************************************************
 * @type   : function
 * @access : public
 * @desc   : Sub Division의 Title을 세팅한다.
 * @param  : 
 * @return :
 *********************************************************************************************/
this.gfn_setTitleSub = function (parmTitle)
{
	application.goTopSub.staTitle.set_text(parmTitle);
}

// FSP푸시 수신하는 함수
this.gfn_pushReceivePopup = function(msgId, msgTitle, sendUserName)
{
//	this.alert("Push Message = "+msgId+" :: "+ msgTitle+" :: "+ sendUserName);

	// this.alert("gfn_pushTest:"+msgId);
	//this.fspmob_toast(this, "[알림 도착]\n\n"+msg.message , "" , "" , 10, "fnCallbackToast");
	//push 알림 받았을 시 콜백
	application.goMain.fn_callbackPush(0, msgTitle);
}]]></Script>
</ADL>
