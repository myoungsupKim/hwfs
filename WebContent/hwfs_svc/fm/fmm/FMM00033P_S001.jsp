<%-----------------------------------------------------------
 - Project     : 한화 FS System
 - MenuID      : 메뉴관리 > 레시피관리 > 사업장레시피관리
 - ViewPage    : FMM00033P.xml
 - Description : 레시피 재료구성 팝업
 - Author      : 손 창 덕
 - History     : 1) 2008. 04. 08 - 최초작성.
 -               2) [고도화]_운영율 관련 수정_김경은
 ------------------------------------------------------------%>
<%@page import="com.sz.util.AppDataUtility"%>

<%@page import="com.ifis.sc.scc.CommonUtil"%>
<%@page contentType="text/html; charset=EUC-KR" %>
<%@ include file = "../../sc/main/common.jsp" %>
<%
	try {
		PlatformRequest platformRequest = this.proc_input(request);  
		in_vl = platformRequest.getData().getVariableList();
		in_dl = platformRequest.getData().getDataSetList();
		
		// IN Valiables
		String sGubun       = in_vl.getString("GUBUN");
		int    iUpjang      = in_vl.getInt("UPJANG");
		String sRecipeCd    = in_vl.getString("RECIPE_CD");
		String sSubinvClass = in_vl.getString("SUBINV_CLASS");
	
		DataSet ds_out;
		StringBuffer sbQuery = new StringBuffer();
		sbQuery.setLength(0);
		
		if( sGubun.equals("한화") ) {
			
			sbQuery.setLength(0);
	    	sbQuery.append("\nSELECT " + iUpjang + " AS UPJANG,	--업장코드 ");
	    	sbQuery.append("\n       RECIPE_CD,		--레시피코드 ");
	    	sbQuery.append("\n       '" + sSubinvClass + "' AS SUBINV_CLASS,	--식당군 ");
	    	sbQuery.append("\n       ROWNUM AS ITEM_SEQ,		--자재순번 ");
	    	sbQuery.append("\n       ITEM_CODE,		--레시피명 ");
	    	sbQuery.append("\n       ITEM_NAME,		--자재명 ");
	    	sbQuery.append("\n       ITEM_SIZE,		--규격 ");
	    	sbQuery.append("\n       PO_UOM,			--구매단위 ");
	    	//sbQuery.append("\n       FEATURE_NAME,	--자재특성 ");
	    	sbQuery.append("\n	     FMS_ITEM_FEATURE_FUN("+iUpjang+", TO_CHAR(SYSDATE, 'YYYYMMDD'), ITEM_CODE, 'I') AS FEATURE_NAME, --자재특성 \n");
	    	sbQuery.append("\n       NEED_QTY,		--1인소요량 ");
	    	sbQuery.append("\n       NVL(OP_PRICE,0) OP_PRICE,	--구매단가 ");
	    	sbQuery.append("\n       DISUSE_RATE,		--페기율 ");
	    	sbQuery.append("\n       CUT_SPEC,		--커팅규격 ");
	    	sbQuery.append("\n       NULL AS REMARK,	--비고 ");
	    	sbQuery.append("\n       CAL,				--100g당 에너지 ");
	    	sbQuery.append("\n       DECODE(NVL(OP_PRICE,0),0,'Y','N') RESTRICT_YN,	--상태 ");
	    	sbQuery.append("\n       DECODE( NVL(DISUSE_RATE,0), 0, NEED_QTY, ROUND(NEED_QTY*(100-DISUSE_RATE)/100,2) ) EDIBLE_QTY,		--가식부량 ");
	    	sbQuery.append("\n       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0017' AND CODE = CUT_SPEC) CUT_SPEC_NAME,	--커팅규격명 ");
	    	sbQuery.append("\n       ROUND(NEED_QTY * (NVL(OP_PRICE,0) / KG_CONVERT_RATE / 1000) ) PERSON_PRICE,		--1인원가 ");
	    	sbQuery.append("\n       ROUND( NVL(CAL,0) * DECODE( NVL(DISUSE_RATE,0), 0, NEED_QTY, ROUND(NEED_QTY*(100-DISUSE_RATE)/100,2) ) / 100,2) CAL_CALC,	--가식부량에 대한 에너지 ");
	    	sbQuery.append("\n       ROUND(NVL(OP_PRICE,0) / KG_CONVERT_RATE / 1000,2) AS GRAM_PRICE, --g당 단가 ");
	    	sbQuery.append("\n       ORIGIN_TYPE --원산지 ");
	    	//sbQuery.append("\n  FROM (SELECT A.RECIPE_CD, A.ITEM_CODE, A.ITEM_NAME, A.ITEM_SIZE, A.PO_UOM, F.FEATURE_NAME, SUM(A.NEED_QTY) AS NEED_QTY, B.OP_PRICE, D.DISUSE_RATE, ");
	    	sbQuery.append("\n  FROM (SELECT A.RECIPE_CD, A.ITEM_CODE, A.ITEM_NAME, A.ITEM_SIZE, A.PO_UOM, SUM(A.NEED_QTY) AS NEED_QTY, B.OP_PRICE, D.DISUSE_RATE, ");
	    	sbQuery.append("\n               A.CUT_SPEC, D.CAL, A.KG_CONVERT_RATE, A.ORIGIN_TYPE ");
	    	sbQuery.append("\n          FROM (SELECT /*+ INDEX(A FMR_STD_RECIPE_ITEM_PK) */ ");
	    	sbQuery.append("\n                       A.RECIPE_CD, A.ITEM_SEQ, FMM_CHGITEM_FUN(" + iUpjang + ", A.ITEM_CODE) AS ITEM_CODE, A.NEED_QTY, A.CUT_SPEC, ");
	    	sbQuery.append("\n                       B.ITEM_NAME, B.ITEM_SIZE, B.PO_UOM, B.KG_CONVERT_RATE, B.ORIGIN_TYPE, ");
		    sbQuery.append("\n                       B.ITEM_CLASS1, B.ITEM_CLASS2, B.ITEM_CLASS3, B.ITEM_CLASS4 ");  
		    sbQuery.append("\n                  FROM FMR_STD_RECIPE_ITEM A, FMS_ITEM_V B "); 
		    sbQuery.append("\n                 WHERE A.ITEM_CODE = B.ITEM_CODE "); 
		    sbQuery.append("\n                ) A, \n"); 
	    	sbQuery.append("\n               ( ");
	    	sbQuery.append("\n                SELECT ");
	    	sbQuery.append("\n                       A.UPJANG, A.ITEM_CODE, A.SALE_PRICE, ");
	    	sbQuery.append("\n                       NVL(NVL(C.OP_RATE, D.OP_RATE), 0) AS OP_RATE, --운영율             ");
	    	sbQuery.append("\n                       CASE WHEN C.OP_PRICE IS NOT NULL OR C.OP_RATE IS NOT NULL              ");
	    	sbQuery.append("\n                            THEN DECODE(SIGN(NVL(C.OP_PRICE,0) ),0, SCC_CEIL(A.SALE_PRICE + (A.SALE_PRICE * NVL(C.OP_RATE,0) / 100),C.CEIL_VAL), C.OP_PRICE) ");
	    	sbQuery.append("\n                            WHEN D.OP_PRICE IS NOT NULL OR D.OP_RATE IS NOT NULL              ");
	    	sbQuery.append("\n                            THEN DECODE(SIGN(NVL(D.OP_PRICE,0) ),0, SCC_CEIL(A.SALE_PRICE + (A.SALE_PRICE * NVL(D.OP_RATE,0) / 100),D.CEIL_VAL), D.OP_PRICE) ");
	    	sbQuery.append("\n                            ELSE A.SALE_PRICE END AS OP_PRICE --운영단가                       ");
	    	sbQuery.append("\n                  FROM ");
	    	sbQuery.append("\n                        ( \n");
			sbQuery.append("\n                         SELECT ");
			sbQuery.append("\n                                "+iUpjang+" AS UPJANG , ");
			sbQuery.append("\n                                TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE , ");
			sbQuery.append("\n                                A.ITEM_CODE, A.SALE_PRICE, C.ITEM_CLASS4 ");
			sbQuery.append("\n                           FROM HLDC_PO_CONTRACT_FSALE A, HLDC_ST_UPJANG B, HLDC_PO_ITEM_MST C ");
			sbQuery.append("\n                          WHERE A.UPJANG = B.AP_UNITPRICE_UPJANG ");
			sbQuery.append("\n                            AND B.UPJANG = "+iUpjang+" ");
			sbQuery.append("\n                            AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN A.CONTRACT_START AND NVL(A.CONTRACT_END,'99999999') ");
			sbQuery.append("\n	   	                      AND A.SALE_PRICE > 0 ");
			sbQuery.append("\n                            AND A.USE_YN = 'Y' ");
			sbQuery.append("\n                            AND A.ITEM_CODE = C.ITEM_CODE ");
			sbQuery.append("\n                         ----------- ");
			sbQuery.append("\n                          UNION ALL  ");
			sbQuery.append("\n                         ----------- ");
			sbQuery.append("\n                         SELECT "+iUpjang+" AS UPJANG, TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE, A.ITEM_CODE, A.SALE_PRICE, C.ITEM_CLASS4 ");
			sbQuery.append("\n                           FROM FMP_OTCUST_PRICE_AVA_V A, FMP_OTCUST_ITEM C, ");
			sbQuery.append("\n                                ( ");
			sbQuery.append("\n                                SELECT UPJANG, ITEM_CODE, MAX(SDATE) AS SDATE ");
			sbQuery.append("\n                                  FROM FMP_OTCUST_PRICE_AVA_V ");
			sbQuery.append("\n                                 WHERE UPJANG = ");
			sbQuery.append("\n                                       ( ");
			sbQuery.append("\n                                       SELECT OTCUST_PRICE_UPJANG ");
			sbQuery.append("\n                                         FROM FMS_UPJANG ");
			sbQuery.append("\n                                        WHERE UPJANG = "+iUpjang+" ");
			sbQuery.append("\n                                       ) ");
			sbQuery.append("\n                                   AND SDATE <= TO_CHAR(SYSDATE,'YYYYMMDD') ");
			sbQuery.append("\n                                 GROUP BY UPJANG, ITEM_CODE ");
			sbQuery.append("\n                                ) B ");
			sbQuery.append("\n                          WHERE A.UPJANG = B.UPJANG ");
			sbQuery.append("\n                            AND A.SDATE = B.SDATE ");
			sbQuery.append("\n                            AND A.ITEM_CODE = B.ITEM_CODE ");
			sbQuery.append("\n                            AND A.SALE_PRICE > 0 ");
			sbQuery.append("\n                            AND A.USE_YN = 'Y' ");
			sbQuery.append("\n                            AND A.ITEM_CODE = C.ITEM_CODE ");
			sbQuery.append("\n                       ) A, ");
			sbQuery.append("\n                      ( ");        
    	    sbQuery.append("\n                      SELECT ITEM_CODE, OP_RATE, OP_PRICE, CEIL_VAL ");
    	    sbQuery.append("\n                        FROM FMU_OP_RATE ");
    	    sbQuery.append("\n                       WHERE UPJANG = "+iUpjang );
    	    sbQuery.append("\n                         AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND EDATE ");
    	    sbQuery.append("\n                         AND USE_YN = 'Y' ");
    	    sbQuery.append("\n                         AND ITEM_TYPE = 'M' ");
    	    sbQuery.append("\n                      ) C, ");
    	    sbQuery.append("\n                      ( ");        
    	    sbQuery.append("\n                      SELECT ITEM_CODE, OP_RATE, OP_PRICE, CEIL_VAL ");
    	    sbQuery.append("\n                        FROM FMU_OP_RATE ");
    	    sbQuery.append("\n                       WHERE UPJANG = "+iUpjang );
    	    sbQuery.append("\n                         AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND EDATE ");
    	    sbQuery.append("\n                         AND USE_YN = 'Y' ");
    	    sbQuery.append("\n                         AND ITEM_TYPE = 'C' ");
    	    sbQuery.append("\n                      ) D \n");
            sbQuery.append("\n                 WHERE A.ITEM_CODE = C.ITEM_CODE(+) ");
    		sbQuery.append("\n                   AND A.ITEM_CLASS4 = D.ITEM_CODE(+) ");
            sbQuery.append("\n               )  B, --단가 ");
	    	sbQuery.append("\n               ( ");
	    	sbQuery.append("\n                SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
	    	sbQuery.append("\n                  FROM FMP_ITEM_NUT ");
	    	sbQuery.append("\n                 WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                 UNION ALL ");
	    	sbQuery.append("\n                       ( ");
	    	sbQuery.append("\n                        SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
	    	sbQuery.append("\n                          FROM FSI_ITEM_NUT ");
	    	sbQuery.append("\n                         WHERE ITEM_CODE IN ");
	    	sbQuery.append("\n                               ( ");
	    	sbQuery.append("\n                                SELECT ITEM_CODE ");
	    	sbQuery.append("\n                                  FROM FSI_ITEM_NUT MINUS ");
	    	sbQuery.append("\n                                SELECT ITEM_CODE ");
	    	sbQuery.append("\n                                  FROM FMP_ITEM_NUT ");
	    	sbQuery.append("\n                                 WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                               ) ");
	    	sbQuery.append("\n                        ) ");
	    	sbQuery.append("\n               ) D ");
// 	    	sbQuery.append("\n               (SELECT ITEM_CODE, ");
// 	    	sbQuery.append("\n                       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0033' AND CODE = ITEM_FEATURE) AS FEATURE_NAME ");
// 	    	sbQuery.append("\n                  FROM FSI_ITEM_FEATURE ");
// 	    	sbQuery.append("\n                 WHERE (ITEM_CODE, CDATE) IN ");
// 	    	sbQuery.append("\n                       ( ");
// 	    	sbQuery.append("\n                        SELECT ITEM_CODE, MAX(CDATE) AS CDATE ");
// 	    	sbQuery.append("\n                          FROM FSI_ITEM_FEATURE ");
// 	    	sbQuery.append("\n                         WHERE (1=1) ");
// 	    	sbQuery.append("\n                           AND (CENTER_CODE, CUSTCD, ITEM_CODE, APPLY_DATE) IN ( ");
// 	    	sbQuery.append("\n                                SELECT ");
// 	    	sbQuery.append("\n                                       CENTER_CODE, CUSTCD, ITEM_CODE, MAX(APPLY_DATE) AS APPLY_DATE ");
// 	    	sbQuery.append("\n                                  FROM FSI_ITEM_FEATURE ");
// 	    	sbQuery.append("\n                                 WHERE CENTER_CODE IN (SELECT CENTER_CODE FROM HLDC_PO_CONTRACT_FSALE WHERE UPJANG = " + iUpjang + ") ");
// 	    	sbQuery.append("\n                                   AND APPLY_DATE BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD'),1)-1,'YYYYMMDD') ");
// 	    	sbQuery.append("\n                                 GROUP BY CENTER_CODE, CUSTCD, ITEM_CODE ");
// 	    	sbQuery.append("\n                               ) ");
// 	    	sbQuery.append("\n                         GROUP BY ITEM_CODE ");
// 	    	sbQuery.append("\n                       ) ");
// 	    	sbQuery.append("\n               ) F ");
	    	sbQuery.append("\n        WHERE A.RECIPE_CD = '" + sRecipeCd + "' ");
	    	sbQuery.append("\n          AND A.ITEM_CODE = B.ITEM_CODE(+) ");
	    	sbQuery.append("\n          AND A.ITEM_CODE = D.ITEM_CODE(+) ");
// 	    	sbQuery.append("\n          AND A.ITEM_CODE = F.ITEM_CODE(+) ");
	    	//sbQuery.append("\n        GROUP BY A.RECIPE_CD, A.ITEM_CODE, A.ITEM_NAME, A.ITEM_SIZE, A.PO_UOM, F.FEATURE_NAME, B.OP_PRICE, D.DISUSE_RATE, ");
	    	sbQuery.append("\n        GROUP BY A.RECIPE_CD, A.ITEM_CODE, A.ITEM_NAME, A.ITEM_SIZE, A.PO_UOM, B.OP_PRICE, D.DISUSE_RATE, ");
	    	sbQuery.append("\n                 A.CUT_SPEC, D.CAL, A.KG_CONVERT_RATE, A.ORIGIN_TYPE) ");
	    	sbQuery.append("\n ORDER BY ITEM_CODE ");
	    	
		} else if( sGubun.equals("본사") ) {
			
			sbQuery.append("\nSELECT A.UPJANG,    --업장코드 ");
			sbQuery.append("\n       A.RECIPE_CD,	--레시피코드 ");
			sbQuery.append("\n       A.ITEM_SEQ,  --자재순번 ");
			sbQuery.append("\n       A.ITEM_CODE,	--레시피명 ");
			sbQuery.append("\n       A.ITEM_NAME,	--자재명 ");
			sbQuery.append("\n       A.ITEM_SIZE,	--규격 ");
			sbQuery.append("\n       A.PO_UOM,	--구매단위 ");
			//sbQuery.append("\n       F.FEATURE_NAME,	--자재특성 ");
			sbQuery.append("\n	     FMS_ITEM_FEATURE_FUN("+iUpjang+", TO_CHAR(SYSDATE, 'YYYYMMDD'), A.ITEM_CODE, 'I') AS FEATURE_NAME, --자재특성 \n");
			sbQuery.append("\n       A.NEED_QTY,	--1인소요량 ");
			sbQuery.append("\n       NVL(B.OP_PRICE,0) OP_PRICE,	--구매단가 ");
			sbQuery.append("\n       D.DISUSE_RATE,	--페기율 ");
			sbQuery.append("\n       A.CUT_SPEC,	--커팅규격 ");
			sbQuery.append("\n       D.CAL,		--100g당 에너지 ");
			sbQuery.append("\n       DECODE(NVL(B.OP_PRICE,0),0,'Y','N') RESTRICT_YN, --상태 ");
			sbQuery.append("\n       DECODE( NVL(D.DISUSE_RATE,0), 0, A.NEED_QTY, ROUND(A.NEED_QTY*(100-D.DISUSE_RATE)/100,2) ) EDIBLE_QTY,		--가식부량 ");
			sbQuery.append("\n       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0017' AND CODE = A.CUT_SPEC) CUT_SPEC_NAME,		--커팅규격명 ");
			sbQuery.append("\n       ROUND(A.NEED_QTY * (NVL(B.OP_PRICE,0) / A.KG_CONVERT_RATE / 1000) ) PERSON_PRICE,				--1인원가 ");
			sbQuery.append("\n       ROUND( NVL(D.CAL,0) * DECODE( NVL(D.DISUSE_RATE,0), 0, A.NEED_QTY, ROUND(A.NEED_QTY*(100-D.DISUSE_RATE)/100,2) ) / 100,2) CAL_CALC,	--가식부량에 대한 에너지 ");
			sbQuery.append("\n       ROUND(NVL(B.OP_PRICE,0) / A.KG_CONVERT_RATE / 1000,2) AS GRAM_PRICE, --g당 단가 ");
			sbQuery.append("\n       A.ORIGIN_TYPE --원산지 ");
			sbQuery.append("\n  FROM (SELECT /*+ INDEX(A FMM_STD_RECIPE_ITEM_PK) */  \n");
		    sbQuery.append("\n               A.*, B.ITEM_NAME, B.ITEM_SIZE, B.PO_UOM, B.KG_CONVERT_RATE, B.ORIGIN_TYPE, \n");
		    sbQuery.append("\n               B.ITEM_CLASS1, B.ITEM_CLASS2, B.ITEM_CLASS3, B.ITEM_CLASS4 \n");  
		    sbQuery.append("\n          FROM FMM_STD_RECIPE_ITEM A, FMS_ITEM_V B \n"); 
		    sbQuery.append("\n         WHERE A.ITEM_CODE = B.ITEM_CODE \n"); 
		    sbQuery.append("\n        ) A, \n"); 
			sbQuery.append("\n       ( ");
			sbQuery.append("\n            SELECT ");
			sbQuery.append("\n                   A.UPJANG, A.ITEM_CODE ");
			sbQuery.append("\n                 , A.UNIT_PRICE, A.SALE_PRICE ");
	    	sbQuery.append("\n                 , CASE WHEN C.OP_PRICE IS NOT NULL OR C.OP_RATE IS NOT NULL              ");
	    	sbQuery.append("\n                        THEN DECODE(SIGN(NVL(C.OP_PRICE,0) ),0, SCC_CEIL(A.SALE_PRICE + (A.SALE_PRICE * NVL(C.OP_RATE,0) / 100),C.CEIL_VAL), C.OP_PRICE) ");
	    	sbQuery.append("\n                        WHEN D.OP_PRICE IS NOT NULL OR D.OP_RATE IS NOT NULL              ");
	    	sbQuery.append("\n                        THEN DECODE(SIGN(NVL(D.OP_PRICE,0) ),0, SCC_CEIL(A.SALE_PRICE + (A.SALE_PRICE * NVL(D.OP_RATE,0) / 100),D.CEIL_VAL), D.OP_PRICE) ");
	    	sbQuery.append("\n                        ELSE A.SALE_PRICE END AS OP_PRICE --운영단가(1인원가)                       ");
			sbQuery.append("\n              FROM ");
			sbQuery.append("\n                   ( \n");
			sbQuery.append("\n                    SELECT ");
			sbQuery.append("\n                           "+iUpjang+" AS UPJANG , ");
			sbQuery.append("\n                           TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE , ");
			sbQuery.append("\n                           A.ITEM_CODE, A.CONTRACT_PRICE AS UNIT_PRICE, A.SALE_PRICE, C.ITEM_CLASS4 ");
			sbQuery.append("\n                      FROM HLDC_PO_CONTRACT_FSALE A, HLDC_ST_UPJANG B, HLDC_PO_ITEM_MST C ");
			sbQuery.append("\n                     WHERE A.UPJANG = B.AP_UNITPRICE_UPJANG ");
			sbQuery.append("\n                       AND B.UPJANG = "+iUpjang+" ");
			sbQuery.append("\n                       AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN A.CONTRACT_START AND NVL(A.CONTRACT_END,'99999999') ");
			sbQuery.append("\n	   	                 AND A.SALE_PRICE > 0 ");
			sbQuery.append("\n                       AND A.USE_YN = 'Y' ");
			sbQuery.append("\n                       AND A.ITEM_CODE = C.ITEM_CODE ");
			sbQuery.append("\n                    ----------- ");
			sbQuery.append("\n                     UNION ALL  ");
			sbQuery.append("\n                    ----------- ");
			sbQuery.append("\n                    SELECT "+iUpjang+" AS UPJANG, TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE, A.ITEM_CODE, A.UNIT_PRICE, A.SALE_PRICE, C.ITEM_CLASS4 ");
			sbQuery.append("\n                      FROM FMP_OTCUST_PRICE_AVA_V A, FMP_OTCUST_ITEM C, ");
			sbQuery.append("\n                           ( ");
			sbQuery.append("\n                           SELECT UPJANG, ITEM_CODE, MAX(SDATE) AS SDATE ");
			sbQuery.append("\n                             FROM FMP_OTCUST_PRICE_AVA_V ");
			sbQuery.append("\n                            WHERE UPJANG = ");
			sbQuery.append("\n                                  ( ");
			sbQuery.append("\n                                  SELECT OTCUST_PRICE_UPJANG ");
			sbQuery.append("\n                                    FROM FMS_UPJANG ");
			sbQuery.append("\n                                   WHERE UPJANG = "+iUpjang+" ");
			sbQuery.append("\n                                  ) ");
			sbQuery.append("\n                              AND SDATE <= TO_CHAR(SYSDATE,'YYYYMMDD') ");
			sbQuery.append("\n                            GROUP BY UPJANG, ITEM_CODE ");
			sbQuery.append("\n                           ) B ");
			sbQuery.append("\n                     WHERE A.UPJANG = B.UPJANG ");
			sbQuery.append("\n                       AND A.SDATE = B.SDATE ");
			sbQuery.append("\n                       AND A.ITEM_CODE = B.ITEM_CODE ");
			sbQuery.append("\n                       AND A.SALE_PRICE > 0 ");
			sbQuery.append("\n                       AND A.USE_YN = 'Y' ");
			sbQuery.append("\n                       AND A.ITEM_CODE = C.ITEM_CODE ");
			sbQuery.append("\n                   ) A, ");
			sbQuery.append("\n                   ( ");        
    	    sbQuery.append("\n                   SELECT ITEM_CODE, OP_RATE, OP_PRICE, CEIL_VAL ");
    	    sbQuery.append("\n                     FROM FMU_OP_RATE ");
    	    sbQuery.append("\n                    WHERE UPJANG = "+iUpjang );
    	    sbQuery.append("\n                      AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND EDATE ");
    	    sbQuery.append("\n                      AND USE_YN = 'Y' ");
    	    sbQuery.append("\n                      AND ITEM_TYPE = 'M' ");
    	    sbQuery.append("\n                   ) C, ");
    	    sbQuery.append("\n                   ( ");        
    	    sbQuery.append("\n                   SELECT ITEM_CODE, OP_RATE, OP_PRICE, CEIL_VAL ");
    	    sbQuery.append("\n                     FROM FMU_OP_RATE ");
    	    sbQuery.append("\n                    WHERE UPJANG = "+iUpjang );
    	    sbQuery.append("\n                      AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND EDATE ");
    	    sbQuery.append("\n                      AND USE_YN = 'Y' ");
    	    sbQuery.append("\n                      AND ITEM_TYPE = 'C' ");
    	    sbQuery.append("\n                   ) D \n");
            sbQuery.append("\n             WHERE A.ITEM_CODE = C.ITEM_CODE(+) ");
    		sbQuery.append("\n               AND A.ITEM_CLASS4 = D.ITEM_CODE(+) ");
    		sbQuery.append("\n        )  B, --단가 ");
			sbQuery.append("\n       ( ");
			sbQuery.append("\n        SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
			sbQuery.append("\n          FROM FMP_ITEM_NUT ");
			sbQuery.append("\n         WHERE UPJANG = " + iUpjang );
			sbQuery.append("\n         UNION ALL ");
			sbQuery.append("\n        SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
			sbQuery.append("\n          FROM FSI_ITEM_NUT ");
			sbQuery.append("\n         WHERE ITEM_CODE IN ");
			sbQuery.append("\n              ( ");
			sbQuery.append("\n               SELECT ITEM_CODE ");
			sbQuery.append("\n                 FROM FSI_ITEM_NUT MINUS ");
			sbQuery.append("\n               SELECT ITEM_CODE ");
			sbQuery.append("\n                 FROM FMP_ITEM_NUT ");
			sbQuery.append("\n                WHERE UPJANG = " + iUpjang );
			sbQuery.append("\n              ) ");
			sbQuery.append("\n       ) D ");
// 			sbQuery.append("\n       ( ");
// 			sbQuery.append("\n        SELECT ITEM_CODE, ");
// 			sbQuery.append("\n               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0033' AND CODE = ITEM_FEATURE) AS FEATURE_NAME ");
// 			sbQuery.append("\n          FROM FSI_ITEM_FEATURE ");
// 			sbQuery.append("\n         WHERE (ITEM_CODE, CDATE) IN ");
// 			sbQuery.append("\n               ( ");
// 			sbQuery.append("\n                SELECT ITEM_CODE, MAX(CDATE) AS CDATE ");
// 			sbQuery.append("\n                  FROM FSI_ITEM_FEATURE ");
// 			sbQuery.append("\n                 WHERE (1=1) ");
// 			sbQuery.append("\n                  AND  (CENTER_CODE, CUSTCD, ITEM_CODE, APPLY_DATE) IN ( ");
// 			sbQuery.append("\n                        SELECT ");
// 			sbQuery.append("\n                               CENTER_CODE, CUSTCD, ITEM_CODE, MAX(APPLY_DATE) AS APPLY_DATE ");
// 			sbQuery.append("\n                          FROM  FSI_ITEM_FEATURE ");
// 			sbQuery.append("\n                         WHERE  CENTER_CODE IN (SELECT CENTER_CODE FROM HLDC_PO_CONTRACT_FSALE WHERE UPJANG = " + iUpjang + ") ");
// 			sbQuery.append("\n                           AND  APPLY_DATE BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD'),1)-1,'YYYYMMDD') ");
// 			sbQuery.append("\n                         GROUP BY CENTER_CODE, CUSTCD, ITEM_CODE ");
// 			sbQuery.append("\n                       ) ");
// 			sbQuery.append("\n                 GROUP BY ITEM_CODE ");
// 			sbQuery.append("\n               ) ");
// 			sbQuery.append("\n       )F ");
			sbQuery.append("\n WHERE A.UPJANG = (SELECT MAIN_UPJANG FROM FMS_UPJANG WHERE UPJANG = " + iUpjang + ") ");
			sbQuery.append("\n   AND A.RECIPE_CD = '" + sRecipeCd + "' ");
			sbQuery.append("\n   AND A.ITEM_CODE = B.ITEM_CODE(+) ");
			sbQuery.append("\n   AND A.ITEM_CODE = D.ITEM_CODE(+) ");
//			sbQuery.append("\n   AND A.ITEM_CODE = F.ITEM_CODE(+) ");
			sbQuery.append("\n ORDER BY ITEM_SEQ ");
			
		} else if( sGubun.equals("업장") ) {
			
			sbQuery.setLength(0);
	    	sbQuery.append("\nSELECT A.UPJANG, --업장코드 ");
	    	sbQuery.append("\n       A.RECIPE_CD,	--레시피코드 ");
	    	sbQuery.append("\n       A.SUBINV_CLASS, --식당군 ");
	    	sbQuery.append("\n       A.ITEM_SEQ,  --자재순번 ");
	    	sbQuery.append("\n       A.ITEM_CODE,	--레시피명 ");
	    	sbQuery.append("\n       A.ITEM_NAME,	--자재명 ");
	    	sbQuery.append("\n       A.ITEM_SIZE,	--규격 ");
	    	sbQuery.append("\n       A.PO_UOM,	--구매단위 ");
	    	//sbQuery.append("\n       F.FEATURE_NAME,	--자재특성 ");
	    	sbQuery.append("\n	     FMS_ITEM_FEATURE_FUN("+iUpjang+", TO_CHAR(SYSDATE, 'YYYYMMDD'), A.ITEM_CODE, 'I') AS FEATURE_NAME, --자재특성 \n");
	    	sbQuery.append("\n       A.NEED_QTY,	--1인소요량 ");
	    	sbQuery.append("\n       NVL(B.OP_PRICE,0) OP_PRICE,	--구매단가 ");
	    	sbQuery.append("\n       D.DISUSE_RATE,	--페기율 ");
	    	sbQuery.append("\n       A.CUT_SPEC,	--커팅규격 ");
	    	sbQuery.append("\n       A.REMARK,  --비고 ");
	    	sbQuery.append("\n       D.CAL,		--100g당 에너지 ");
	    	sbQuery.append("\n       DECODE(NVL(B.OP_PRICE,0),0,'Y','N') RESTRICT_YN, --상태 ");
	    	sbQuery.append("\n       DECODE( NVL(D.DISUSE_RATE,0), 0, A.NEED_QTY, ROUND(A.NEED_QTY*(100-D.DISUSE_RATE)/100,2) ) EDIBLE_QTY,		--가식부량 ");
	    	sbQuery.append("\n       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0017' AND CODE = A.CUT_SPEC) CUT_SPEC_NAME,		--커팅규격명 ");
	    	sbQuery.append("\n       ROUND(A.NEED_QTY * (NVL(B.OP_PRICE,0) / A.KG_CONVERT_RATE / 1000) ) PERSON_PRICE,				--1인원가 ");
	    	sbQuery.append("\n       ROUND( NVL(D.CAL,0) * DECODE( NVL(D.DISUSE_RATE,0), 0, A.NEED_QTY, ROUND(A.NEED_QTY*(100-D.DISUSE_RATE)/100,2) ) / 100,2) CAL_CALC,	--가식부량에 대한 에너지 ");
	    	sbQuery.append("\n       ROUND(NVL(B.OP_PRICE,0) / A.KG_CONVERT_RATE / 1000,2) AS GRAM_PRICE, --g당 단가 ");
	    	sbQuery.append("\n       A.ORIGIN_TYPE --원산지 ");
			sbQuery.append("\n  FROM (SELECT /*+ INDEX(A FMM_UPJANG_RECIPE_ITEM_PK) */  \n");
		    sbQuery.append("\n               A.*, B.ITEM_NAME, B.ITEM_SIZE, B.PO_UOM, B.KG_CONVERT_RATE, B.ORIGIN_TYPE, \n");
		    sbQuery.append("\n               B.ITEM_CLASS1, B.ITEM_CLASS2, B.ITEM_CLASS3, B.ITEM_CLASS4 \n");  
		    sbQuery.append("\n          FROM FMM_UPJANG_RECIPE_ITEM A, FMS_ITEM_V B \n"); 
		    sbQuery.append("\n         WHERE A.ITEM_CODE = B.ITEM_CODE \n"); 
		    sbQuery.append("\n        ) A, \n"); 
	    	sbQuery.append("\n       ( ");
	    	sbQuery.append("\n        SELECT ");
	    	sbQuery.append("\n               A.UPJANG, A.ITEM_CODE, A.SALE_PRICE, ");
	    	sbQuery.append("\n               NVL(NVL(C.OP_RATE, D.OP_RATE), 0) AS OP_RATE, --운영율             ");
	    	sbQuery.append("\n               CASE WHEN C.OP_PRICE IS NOT NULL OR C.OP_RATE IS NOT NULL              ");
	    	sbQuery.append("\n                    THEN DECODE(SIGN(NVL(C.OP_PRICE,0) ),0, SCC_CEIL(A.SALE_PRICE + (A.SALE_PRICE * NVL(C.OP_RATE,0) / 100),C.CEIL_VAL), C.OP_PRICE) ");
	    	sbQuery.append("\n                    WHEN D.OP_PRICE IS NOT NULL OR D.OP_RATE IS NOT NULL              ");
	    	sbQuery.append("\n                    THEN DECODE(SIGN(NVL(D.OP_PRICE,0) ),0, SCC_CEIL(A.SALE_PRICE + (A.SALE_PRICE * NVL(D.OP_RATE,0) / 100),D.CEIL_VAL), D.OP_PRICE) ");
	    	sbQuery.append("\n                    ELSE A.SALE_PRICE END AS OP_PRICE --운영단가(1인원가)                       ");
	    	sbQuery.append("\n          FROM ");
	    	sbQuery.append("\n               ( \n");
			sbQuery.append("\n                SELECT ");
			sbQuery.append("\n                       "+iUpjang+" AS UPJANG , ");
			sbQuery.append("\n                       TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE , ");
			sbQuery.append("\n                       A.ITEM_CODE, A.SALE_PRICE, C.ITEM_CLASS4 ");
			sbQuery.append("\n                  FROM HLDC_PO_CONTRACT_FSALE A, HLDC_ST_UPJANG B, HLDC_PO_ITEM_MST C ");
			sbQuery.append("\n                 WHERE A.UPJANG = B.AP_UNITPRICE_UPJANG ");
			sbQuery.append("\n                   AND B.UPJANG = "+iUpjang+" ");
			sbQuery.append("\n                   AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN A.CONTRACT_START AND NVL(A.CONTRACT_END,'99999999') ");
			sbQuery.append("\n	   	             AND A.SALE_PRICE > 0 ");
			sbQuery.append("\n                   AND A.USE_YN = 'Y' ");
			sbQuery.append("\n                   AND A.ITEM_CODE = C.ITEM_CODE ");
			sbQuery.append("\n                ----------- ");
			sbQuery.append("\n                 UNION ALL  ");
			sbQuery.append("\n                ----------- ");
			sbQuery.append("\n                SELECT "+iUpjang+" AS UPJANG, TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE, A.ITEM_CODE, A.SALE_PRICE, C.ITEM_CLASS4 ");
			sbQuery.append("\n                  FROM FMP_OTCUST_PRICE_AVA_V A, FMP_OTCUST_ITEM C, ");
			sbQuery.append("\n                       ( ");
			sbQuery.append("\n                       SELECT UPJANG, ITEM_CODE, MAX(SDATE) AS SDATE ");
			sbQuery.append("\n                         FROM FMP_OTCUST_PRICE_AVA_V ");
			sbQuery.append("\n                        WHERE UPJANG = ");
			sbQuery.append("\n                              ( ");
			sbQuery.append("\n                              SELECT OTCUST_PRICE_UPJANG ");
			sbQuery.append("\n                                FROM FMS_UPJANG ");
			sbQuery.append("\n                               WHERE UPJANG = "+iUpjang+" ");
			sbQuery.append("\n                              ) ");
			sbQuery.append("\n                          AND SDATE <= TO_CHAR(SYSDATE,'YYYYMMDD') ");
			sbQuery.append("\n                        GROUP BY UPJANG, ITEM_CODE ");
			sbQuery.append("\n                       ) B ");
			sbQuery.append("\n                 WHERE A.UPJANG = B.UPJANG ");
			sbQuery.append("\n                   AND A.SDATE = B.SDATE ");
			sbQuery.append("\n                   AND A.ITEM_CODE = B.ITEM_CODE ");
			sbQuery.append("\n                   AND A.SALE_PRICE > 0 ");
			sbQuery.append("\n                   AND A.USE_YN = 'Y' ");
			sbQuery.append("\n                   AND A.ITEM_CODE = C.ITEM_CODE ");
			sbQuery.append("\n              ) A, ");
			sbQuery.append("\n             ( ");        
    	    sbQuery.append("\n             SELECT ITEM_CODE, OP_RATE, OP_PRICE, CEIL_VAL ");
    	    sbQuery.append("\n               FROM FMU_OP_RATE ");
    	    sbQuery.append("\n              WHERE UPJANG = "+iUpjang );
    	    sbQuery.append("\n                AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND EDATE ");
    	    sbQuery.append("\n                AND USE_YN = 'Y' ");
    	    sbQuery.append("\n                AND ITEM_TYPE = 'M' ");
    	    sbQuery.append("\n             ) C, ");
    	    sbQuery.append("\n             ( ");        
    	    sbQuery.append("\n             SELECT ITEM_CODE, OP_RATE, OP_PRICE, CEIL_VAL ");
    	    sbQuery.append("\n               FROM FMU_OP_RATE ");
    	    sbQuery.append("\n              WHERE UPJANG = "+iUpjang );
    	    sbQuery.append("\n                AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND EDATE ");
    	    sbQuery.append("\n                AND USE_YN = 'Y' ");
    	    sbQuery.append("\n                AND ITEM_TYPE = 'C' ");
    	    sbQuery.append("\n             ) D \n");
            sbQuery.append("\n        WHERE A.ITEM_CODE = C.ITEM_CODE(+) ");
    		sbQuery.append("\n          AND A.ITEM_CLASS4 = D.ITEM_CODE(+) ");
	    	sbQuery.append("\n       )  B ,--단가 ");
	    	sbQuery.append("\n       ( ");
	    	sbQuery.append("\n         SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
	    	sbQuery.append("\n           FROM	FMP_ITEM_NUT ");
	    	sbQuery.append("\n          WHERE	UPJANG = " + iUpjang );
	    	sbQuery.append("\n          UNION ALL ");
	    	sbQuery.append("\n                ( ");
	    	sbQuery.append("\n                SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
	    	sbQuery.append("\n                  FROM	FSI_ITEM_NUT ");
	    	sbQuery.append("\n                 WHERE ITEM_CODE IN ");
	    	sbQuery.append("\n                       ( ");
	    	sbQuery.append("\n                       SELECT ITEM_CODE ");
	    	sbQuery.append("\n                         FROM FSI_ITEM_NUT MINUS ");
	    	sbQuery.append("\n                       SELECT ITEM_CODE ");
	    	sbQuery.append("\n                         FROM FMP_ITEM_NUT ");
	    	sbQuery.append("\n                        WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                       ) ");
	    	sbQuery.append("\n                ) ");
	    	sbQuery.append("\n       ) D ");
// 	    	sbQuery.append("\n       (SELECT ITEM_CODE, ");
// 	    	sbQuery.append("\n               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0033' AND CODE = ITEM_FEATURE) AS FEATURE_NAME ");
// 	    	sbQuery.append("\n          FROM FSI_ITEM_FEATURE ");
// 	    	sbQuery.append("\n         WHERE (ITEM_CODE, CDATE) IN ");
// 	    	sbQuery.append("\n               ( ");
// 	    	sbQuery.append("\n                SELECT ITEM_CODE, MAX(CDATE) AS CDATE ");
// 	    	sbQuery.append("\n                  FROM FSI_ITEM_FEATURE ");
// 	    	sbQuery.append("\n                 WHERE (1=1) ");
// 	    	sbQuery.append("\n                  AND  (CENTER_CODE, CUSTCD, ITEM_CODE, APPLY_DATE) IN ( ");
// 	    	sbQuery.append("\n                        SELECT ");
// 	    	sbQuery.append("\n                               CENTER_CODE, CUSTCD, ITEM_CODE, MAX(APPLY_DATE) AS APPLY_DATE ");
// 	    	sbQuery.append("\n                          FROM  FSI_ITEM_FEATURE ");
// 	    	sbQuery.append("\n                         WHERE  CENTER_CODE IN (SELECT CENTER_CODE FROM HLDC_PO_CONTRACT_FSALE WHERE UPJANG = " + iUpjang + ") ");
// 	    	sbQuery.append("\n                           AND  APPLY_DATE BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD'),1)-1,'YYYYMMDD') ");
// 	    	sbQuery.append("\n                         GROUP BY CENTER_CODE, CUSTCD, ITEM_CODE ");
// 	    	sbQuery.append("\n                       ) ");
// 	    	sbQuery.append("\n                 GROUP BY ITEM_CODE ");
// 	    	sbQuery.append("\n               ) ");
// 	    	sbQuery.append("\n       )F ");
	    	sbQuery.append("\n WHERE A.UPJANG = " + iUpjang );
	    	sbQuery.append("\n   AND A.SUBINV_CLASS = '" + sSubinvClass + "' ");
	    	sbQuery.append("\n   AND A.RECIPE_CD = '" + sRecipeCd + "' ");
	    	sbQuery.append("\n   AND A.ITEM_CODE = B.ITEM_CODE(+) ");
	    	sbQuery.append("\n   AND A.ITEM_CODE = D.ITEM_CODE(+) ");
//	    	sbQuery.append("\n   AND A.ITEM_CODE = F.ITEM_CODE(+) ");
	    	sbQuery.append("\n ORDER BY ITEM_SEQ ");
			
		} else {
			throw new Exception("올바르지 않은 작업구분입니다.\n관리자에게 문의하여 주십시요.");
		}
		
		pstmt = conn.prepareStatement(sbQuery.toString());
		rs = pstmt.executeQuery();
		
		DataSet ds_CONSTRUCT = this.makeDataSet(rs, "ds_CONSTRUCT");
		out_dl.add(ds_CONSTRUCT);
		
	   	this.setResultMessage(0, "OK", out_vl);
	} catch(Exception ex) {
	   ex.printStackTrace();
       this.setResultMessage(-1, ex.toString(), out_vl);
	} finally {
		if(rs != null) {
			try {
				rs.close();
			}catch(Exception e) {}
		}
		if(pstmt != null) {
			try {
				pstmt.close();
			}catch(Exception e) {}
		}
		if(conn != null) {
			try {
				conn.close();
			}catch(Exception e) {}
		}
		proc_output(response, out, out_vl, out_dl);
	}
%>

<%--
	try {
		PlatformRequest platformRequest = this.proc_input(request);  
		in_vl = platformRequest.getData().getVariableList();
		in_dl = platformRequest.getData().getDataSetList();
		
		// IN Valiables
		String sGubun       = in_vl.getString("GUBUN");
		int    iUpjang      = in_vl.getInt("UPJANG");
		String sRecipeCd    = in_vl.getString("RECIPE_CD");
		String sSubinvClass = in_vl.getString("SUBINV_CLASS");
	

		DataSet ds_out;
		StringBuffer sbQuery = new StringBuffer();
		sbQuery.setLength(0);
		
		if( sGubun.equals("한화") ) {
			
			sbQuery.setLength(0);
	    	sbQuery.append("\nSELECT /*한화*/ /*+ LEADING(A C) USE_HASH (A C) */ " + iUpjang + " AS UPJANG,	--업장코드 ");
	    	sbQuery.append("\n       RECIPE_CD,		--레시피코드 ");
	    	sbQuery.append("\n       '" + sSubinvClass + "' AS SUBINV_CLASS,	--식당군 ");
	    	sbQuery.append("\n       ROWNUM AS ITEM_SEQ,		--자재순번 ");
	    	sbQuery.append("\n       ITEM_CODE,		--레시피명 ");
	    	sbQuery.append("\n       ITEM_NAME,		--자재명 ");
	    	sbQuery.append("\n       ITEM_SIZE,		--규격 ");
	    	sbQuery.append("\n       PO_UOM,			--구매단위 ");
	    	sbQuery.append("\n       FEATURE_NAME,	--자재특성 ");
	    	sbQuery.append("\n       NEED_QTY,		--1인소요량 ");
	    	sbQuery.append("\n       NVL(OP_PRICE,0) OP_PRICE,	--구매단가 ");
	    	sbQuery.append("\n       DISUSE_RATE,		--페기율 ");
	    	sbQuery.append("\n       CUT_SPEC,		--커팅규격 ");
	    	sbQuery.append("\n       NULL AS REMARK,	--비고 ");
	    	sbQuery.append("\n       CAL,				--100g당 에너지 ");
	    	sbQuery.append("\n       DECODE(NVL(OP_PRICE,0),0,'Y','N') RESTRICT_YN,	--상태 ");
	    	sbQuery.append("\n       DECODE( NVL(DISUSE_RATE,0), 0, NEED_QTY, ROUND(NEED_QTY*(100-DISUSE_RATE)/100,2) ) EDIBLE_QTY,		--가식부량 ");
	    	sbQuery.append("\n       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0017' AND CODE = CUT_SPEC) CUT_SPEC_NAME,	--커팅규격명 ");
	    	sbQuery.append("\n       ROUND(NEED_QTY * (NVL(OP_PRICE,0) / KG_CONVERT_RATE / 1000) ) PERSON_PRICE,		--1인원가 ");
	    	sbQuery.append("\n       ROUND( NVL(CAL,0) * DECODE( NVL(DISUSE_RATE,0), 0, NEED_QTY, ROUND(NEED_QTY*(100-DISUSE_RATE)/100,2) ) / 100,2) CAL_CALC,	--가식부량에 대한 에너지 ");
	    	sbQuery.append("\n       ROUND(NVL(OP_PRICE,0) / KG_CONVERT_RATE / 1000,2) AS GRAM_PRICE		--g당 단가 ");
	    	sbQuery.append("\n  FROM (SELECT A.RECIPE_CD, A.ITEM_CODE, C.ITEM_NAME, C.ITEM_SIZE, C.PO_UOM, F.FEATURE_NAME, SUM(A.NEED_QTY) AS NEED_QTY, B.OP_PRICE, D.DISUSE_RATE, ");
	    	sbQuery.append("\n               A.CUT_SPEC, D.CAL, C.KG_CONVERT_RATE ");
	    	sbQuery.append("\n          FROM (SELECT RECIPE_CD, ITEM_SEQ, FMM_CHGITEM_FUN(" + iUpjang + ", ITEM_CODE) AS ITEM_CODE, NEED_QTY, CUT_SPEC ");
	    	sbQuery.append("\n                  FROM FSR_STD_RECIPE_ITEM ");
	    	sbQuery.append("\n                 WHERE RECIPE_CD = '" + sRecipeCd + "') A, ");
	    	sbQuery.append("\n               FMS_ITEM_V C, ");
	    	sbQuery.append("\n               ( ");
	    	sbQuery.append("\n                SELECT /*+ LEADING(A C) USE_HASH (A C) */ ");
	    	sbQuery.append("\n                       A.UPJANG, A.ITEM_CODE, A.SALE_PRICE, ");
	    	
	    	sbQuery.append("\n                       NVL(C.OP_RATE,0) AS OP_RATE, --운영율 ");
	    	sbQuery.append("\n                       DECODE(SIGN(NVL(C.OP_PRICE,0) ),0, SCC_CEIL(A.SALE_PRICE + ROUND(A.SALE_PRICE * NVL(C.OP_RATE,0) / 100),C.CEIL_VAL), C.OP_PRICE) AS OP_PRICE --운영단가(1인원가) ");
	    	
	    	sbQuery.append("\n                  FROM ");
	    	
	    	sbQuery.append("\n                       ( ");
	    	sbQuery.append("\n                        SELECT A.ITEM_CODE, OP_RATE, OP_PRICE, A.CEIL_VAL, A.UPJANG ");
	    	sbQuery.append("\n                          FROM FMU_OP_RATE A ");
	    	sbQuery.append("\n                         WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                           AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND EDATE ");
	    	sbQuery.append("\n                           AND A.USE_YN = 'Y' ");
	    	sbQuery.append("\n                       ) C, ");
	    	
	    	sbQuery.append("\n                       ( ");
	    	sbQuery.append("\n                        SELECT " + iUpjang + " AS UPJANG , ");
	    	sbQuery.append("\n                               TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE , ");
	    	sbQuery.append("\n                               ITEM_CODE, TO_NUMBER(SUBSTR(RESULT, 9, 8) ) SALE_PRICE ");
	    	sbQuery.append("\n                          FROM ");
	    	sbQuery.append("\n                               ( ");
	    	sbQuery.append("\n                                SELECT  ");
	    	sbQuery.append("\n                                       C.ITEM_CODE, C.CENTER_CODE, MAX(C.CONTRACT_START||RPAD(C.SALE_PRICE, 8) ) AS RESULT ");
	    	sbQuery.append("\n                                  FROM HLDC_PO_CONTRACT_FSALE C, HLDC_PO_UPJANG_CENTER D, HLDC_ST_UPJANG E ");
	    	sbQuery.append("\n                                 WHERE C.CENTER_CODE = D.CENTER_CODE ");
	    	sbQuery.append("\n                                   AND D.UPJANG = E.AP_UNITPRICE_UPJANG ");
	    	sbQuery.append("\n                                   AND E.UPJANG = " + iUpjang );
	    	sbQuery.append("\n                                   AND C.UPJANG = E.AP_UNITPRICE_UPJANG ");
	    	sbQuery.append("\n                                   AND C.ITEM_CODE > ' ' ");
	    	sbQuery.append("\n                                   AND C.CONTRACT_START <= TO_CHAR(SYSDATE,'YYYYMMDD') ");
	    	sbQuery.append("\n                                   AND C.USE_YN = 'Y' ");
	    	sbQuery.append("\n                                   AND EXISTS ");
	    	sbQuery.append("\n                                       ( ");
	    	sbQuery.append("\n                                        SELECT /*+ UNNEST NL_SJ */ 1 ");
	    	sbQuery.append("\n                                          FROM HLDC_PO_TREAT_UPJANG X ");
	    	sbQuery.append("\n                                         WHERE X.ITEM_CODE = C.ITEM_CODE ");
	    	sbQuery.append("\n                                           AND X.UPJANG = C.UPJANG ");
	    	sbQuery.append("\n                                       ) ");
	    	sbQuery.append("\n                                 GROUP BY C.CENTER_CODE, C.UPJANG, C.ITEM_CODE ");
	    	sbQuery.append("\n                               ) A ");
	    	sbQuery.append("\n                         WHERE TO_NUMBER(SUBSTR(RESULT, 9, 8) ) > 0 ");
	    	sbQuery.append("\n                        ----------- ");
	    	sbQuery.append("\n                         UNION ALL ");
	    	sbQuery.append("\n                        ----------- ");
	    	sbQuery.append("\n                        SELECT " + iUpjang + " AS UPJANG, TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE, A.ITEM_CODE, A.SALE_PRICE ");
	    	sbQuery.append("\n                          FROM FMP_OTCUST_PRICE_AVA_V A , ");
	    	sbQuery.append("\n                               ( ");
	    	sbQuery.append("\n                                SELECT UPJANG, ITEM_CODE, MAX(SDATE) AS SDATE ");
	    	sbQuery.append("\n                                  FROM FMP_OTCUST_PRICE_AVA_V ");
	    	sbQuery.append("\n                                 WHERE UPJANG = ");
	    	sbQuery.append("\n                                       ( ");
	    	sbQuery.append("\n                                        SELECT OTCUST_PRICE_UPJANG ");
	    	sbQuery.append("\n                                          FROM FMS_UPJANG ");
	    	sbQuery.append("\n                                         WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                                       ) ");
	    	sbQuery.append("\n                                   AND SDATE <= TO_CHAR(SYSDATE,'YYYYMMDD') ");
	    	sbQuery.append("\n                                 GROUP BY UPJANG, ITEM_CODE ");
	    	sbQuery.append("\n                               ) B ");
	    	sbQuery.append("\n                         WHERE A.UPJANG = B.UPJANG ");
	    	sbQuery.append("\n                           AND A.SDATE = B.SDATE ");
	    	sbQuery.append("\n                           AND A.ITEM_CODE = B.ITEM_CODE ");
	    	sbQuery.append("\n                           AND A.SALE_PRICE > 0 ");
	    	sbQuery.append("\n                           AND A.USE_YN = 'Y' ");
	    	sbQuery.append("\n                       ) A ");
//	    	sbQuery.append("\n                 WHERE A.ITEM_CODE = C.ITEM_CODE(+) ");
	    	sbQuery.append("\n                 WHERE A.ITEM_CODE BETWEEN C.ITEM_CODE(+) AND C.ITEM_CODE(+)||'9999' AND A.UPJANG = C.UPJANG(+)");
	    	sbQuery.append("\n               )  B ,--단가 ");
	    	sbQuery.append("\n               ( ");
	    	sbQuery.append("\n                SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
	    	sbQuery.append("\n                  FROM FMP_ITEM_NUT ");
	    	sbQuery.append("\n                 WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                 UNION ALL ");
	    	sbQuery.append("\n                       ( ");
	    	sbQuery.append("\n                        SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
	    	sbQuery.append("\n                          FROM FSI_ITEM_NUT ");
	    	sbQuery.append("\n                         WHERE ITEM_CODE IN ");
	    	sbQuery.append("\n                               ( ");
	    	sbQuery.append("\n                                SELECT ITEM_CODE ");
	    	sbQuery.append("\n                                  FROM FSI_ITEM_NUT MINUS ");
	    	sbQuery.append("\n                                SELECT ITEM_CODE ");
	    	sbQuery.append("\n                                  FROM FMP_ITEM_NUT ");
	    	sbQuery.append("\n                                 WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                               ) ");
	    	sbQuery.append("\n                        ) ");
	    	sbQuery.append("\n               ) D, ");
	    	sbQuery.append("\n               (SELECT ITEM_CODE, ");
	    	sbQuery.append("\n                       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0033' AND CODE = ITEM_FEATURE) AS FEATURE_NAME ");
	    	sbQuery.append("\n                  FROM FSI_ITEM_FEATURE ");
	    	sbQuery.append("\n                 WHERE (ITEM_CODE, CDATE) IN ");
	    	sbQuery.append("\n                       ( ");
	    	sbQuery.append("\n                        SELECT ITEM_CODE, MAX(CDATE) AS CDATE ");
	    	sbQuery.append("\n                          FROM FSI_ITEM_FEATURE ");
	    	sbQuery.append("\n                         WHERE (1=1) ");
	    	sbQuery.append("\n                           AND (CENTER_CODE, CUSTCD, ITEM_CODE, APPLY_DATE) IN ( ");
	    	sbQuery.append("\n                                SELECT ");
	    	sbQuery.append("\n                                       CENTER_CODE, CUSTCD, ITEM_CODE, MAX(APPLY_DATE) AS APPLY_DATE ");
	    	sbQuery.append("\n                                  FROM FSI_ITEM_FEATURE ");
	    	sbQuery.append("\n                                 WHERE CENTER_CODE  = (SELECT CENTER_CODE FROM HLDC_PO_UPJANG_CENTER WHERE UPJANG = " + iUpjang + ") ");
	    	sbQuery.append("\n                                   AND APPLY_DATE BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD'),1)-1,'YYYYMMDD') ");
	    	sbQuery.append("\n                                 GROUP BY CENTER_CODE, CUSTCD, ITEM_CODE ");
	    	sbQuery.append("\n                               ) ");
	    	sbQuery.append("\n                         GROUP BY ITEM_CODE ");
	    	sbQuery.append("\n                       ) ");
	    	sbQuery.append("\n               ) F ");
	    	sbQuery.append("\n        WHERE A.RECIPE_CD = '" + sRecipeCd + "' ");
	    	sbQuery.append("\n          AND A.ITEM_CODE = B.ITEM_CODE(+) ");
	    	sbQuery.append("\n          AND A.ITEM_CODE = C.ITEM_CODE ");
	    	sbQuery.append("\n          AND A.ITEM_CODE = D.ITEM_CODE(+) ");
	    	sbQuery.append("\n          AND A.ITEM_CODE = F.ITEM_CODE(+) ");
	    	sbQuery.append("\n        GROUP BY A.RECIPE_CD, A.ITEM_CODE, C.ITEM_NAME, C.ITEM_SIZE, C.PO_UOM, F.FEATURE_NAME, B.OP_PRICE, D.DISUSE_RATE, ");
	    	sbQuery.append("\n                 A.CUT_SPEC, D.CAL, C.KG_CONVERT_RATE) ");
	    	sbQuery.append("\n ORDER BY ITEM_CODE ");
	    	
		} else if( sGubun.equals("본사") ) {
			
			sbQuery.append("\nSELECT /*본사*/ /*+ LEADING(A B C D F) USE_HASH(A B) USE_HASH(D) USE_HASH(F) USE_NL(C) */ A.UPJANG,    --업장코드 ");
			sbQuery.append("\n       A.RECIPE_CD,	--레시피코드 ");
			sbQuery.append("\n       A.ITEM_SEQ,  --자재순번 ");
			sbQuery.append("\n       A.ITEM_CODE,	--레시피명 ");
			sbQuery.append("\n       C.ITEM_NAME,	--자재명 ");
			sbQuery.append("\n       C.ITEM_SIZE,	--규격 ");
			sbQuery.append("\n       C.PO_UOM,	--구매단위 ");
			sbQuery.append("\n       F.FEATURE_NAME,	--자재특성 ");
			sbQuery.append("\n       A.NEED_QTY,	--1인소요량 ");
			sbQuery.append("\n       NVL(B.OP_PRICE,0) OP_PRICE,	--구매단가 ");
			sbQuery.append("\n       D.DISUSE_RATE,	--페기율 ");
			sbQuery.append("\n       A.CUT_SPEC,	--커팅규격 ");
			sbQuery.append("\n       D.CAL,		--100g당 에너지 ");
			sbQuery.append("\n       DECODE(NVL(B.OP_PRICE,0),0,'Y','N') RESTRICT_YN, --상태 ");
			sbQuery.append("\n       DECODE( NVL(D.DISUSE_RATE,0), 0, A.NEED_QTY, ROUND(A.NEED_QTY*(100-D.DISUSE_RATE)/100,2) ) EDIBLE_QTY,		--가식부량 ");
			sbQuery.append("\n       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0017' AND CODE = A.CUT_SPEC) CUT_SPEC_NAME,		--커팅규격명 ");
			sbQuery.append("\n       ROUND(A.NEED_QTY * (NVL(B.OP_PRICE,0) / C.KG_CONVERT_RATE / 1000) ) PERSON_PRICE,				--1인원가 ");
			sbQuery.append("\n       ROUND( NVL(D.CAL,0) * DECODE( NVL(D.DISUSE_RATE,0), 0, A.NEED_QTY, ROUND(A.NEED_QTY*(100-D.DISUSE_RATE)/100,2) ) / 100,2) CAL_CALC,	--가식부량에 대한 에너지 ");
			sbQuery.append("\n       ROUND(NVL(B.OP_PRICE,0) / C.KG_CONVERT_RATE / 1000,2) AS GRAM_PRICE						--g당 단가 ");
			sbQuery.append("\n  FROM FMM_STD_RECIPE_ITEM A , ");
			sbQuery.append("\n       ( ");
			sbQuery.append("\n            SELECT /*+ NO_MERGE */ ");
			sbQuery.append("\n                   A.UPJANG, A.ITEM_CODE ");
			sbQuery.append("\n                 , A.UNIT_PRICE, A.SALE_PRICE ");
			sbQuery.append("\n                 , DECODE(SIGN(NVL(C.OP_PRICE,0)),0, SCC_CEIL(A.SALE_PRICE + ROUND(A.SALE_PRICE * NVL(C.OP_RATE,0) / 100),C.CEIL_VAL), C.OP_PRICE) AS OP_PRICE ");
			sbQuery.append("\n              FROM ( ");
			sbQuery.append("\n                   SELECT ITEM_CODE, OP_RATE, OP_PRICE, CEIL_VAL ");
			sbQuery.append("\n                     FROM FMU_OP_RATE ");
			sbQuery.append("\n                    WHERE UPJANG = " + iUpjang );
			sbQuery.append("\n                      AND NVL(TO_CHAR(TO_DATE( '','YYYYMMDD' ),'YYYYMMDD' ), TO_CHAR(SYSDATE,'YYYYMMDD' ) ) BETWEEN SDATE AND EDATE ");
			sbQuery.append("\n                      AND USE_YN = 'Y' ");
			sbQuery.append("\n                   ) C ");
			sbQuery.append("\n                 , ( ");
			sbQuery.append("\n                   SELECT /*+ INDEX_DESC(A PO_CONTRACT_FSALE_PK) */ ");
			sbQuery.append("\n                          " + iUpjang + " AS UPJANG, NVL('',TO_CHAR(SYSDATE,'YYYYMMDD')) AS NEED_DATE ");
			sbQuery.append("\n                        , A.ITEM_CODE, A.CONTRACT_PRICE AS UNIT_PRICE, A.SALE_PRICE ");
			sbQuery.append("\n                     FROM HLDC_PO_CONTRACT_FSALE A ");
			sbQuery.append("\n                    WHERE (A.CENTER_CODE,A.UPJANG,A.ITEM_CODE,A.CONTRACT_START) IN ");
			sbQuery.append("\n                          ( ");
			sbQuery.append("\n                           SELECT CENTER_CODE, UPJANG, ITEM_CODE, MAX(CONTRACT_START) AS CONTRACT_START ");
			sbQuery.append("\n                             FROM HLDC_PO_CONTRACT_FSALE ");
			sbQuery.append("\n                            WHERE CENTER_CODE = ( SELECT /*+ NO_UNNEST */ A.CENTER_CODE FROM HLDC_PO_UPJANG_CENTER A, HLDC_ST_UPJANG B WHERE A.UPJANG = B.AP_UNITPRICE_UPJANG AND B.UPJANG = " + iUpjang + " ) ");
			sbQuery.append("\n                              AND UPJANG      = ( SELECT /*+ NO_UNNEST */ AP_UNITPRICE_UPJANG FROM HLDC_ST_UPJANG WHERE UPJANG = " + iUpjang + " ) ");
			sbQuery.append("\n                              AND CONTRACT_START <= NVL(TO_CHAR(TO_DATE( '','YYYYMMDD' ),'YYYYMMDD' ), TO_CHAR(SYSDATE,'YYYYMMDD' ) ) ");
			sbQuery.append("\n                            GROUP BY CENTER_CODE, UPJANG, ITEM_CODE ");
			sbQuery.append("\n                          ) ");
			sbQuery.append("\n                      AND A.SALE_PRICE > 0 ");
			sbQuery.append("\n                      AND A.USE_YN = 'Y' ");
			sbQuery.append("\n                      AND EXISTS ( SELECT 1 FROM HLDC_PO_TREAT_UPJANG X WHERE X.ITEM_CODE = A.ITEM_CODE AND X.UPJANG = A.UPJANG ) ");
			sbQuery.append("\n                   ----------- ");
			sbQuery.append("\n                    UNION ALL ");
			sbQuery.append("\n                   ----------- ");
			sbQuery.append("\n                   SELECT " + iUpjang + " AS UPJANG, NVL('',TO_CHAR(SYSDATE,'YYYYMMDD')) AS NEED_DATE ");
			sbQuery.append("\n                        , A.ITEM_CODE, A.UNIT_PRICE, A.SALE_PRICE ");
			sbQuery.append("\n                     FROM FMP_OTCUST_PRICE_AVA_V A ");
			sbQuery.append("\n                        ,(SELECT UPJANG, ITEM_CODE, MAX(SDATE) AS SDATE ");
			sbQuery.append("\n                            FROM FMP_OTCUST_PRICE_AVA_V ");
			sbQuery.append("\n                           WHERE UPJANG = (SELECT /*+ NO_UNNEST */ OTCUST_PRICE_UPJANG FROM FMS_UPJANG WHERE UPJANG = " + iUpjang + ") ");
			sbQuery.append("\n                             AND SDATE <= NVL('',TO_CHAR(SYSDATE,'YYYYMMDD')) ");
			sbQuery.append("\n                           GROUP BY UPJANG, ITEM_CODE) B ");
			sbQuery.append("\n                    WHERE A.UPJANG = B.UPJANG ");
			sbQuery.append("\n                      AND A.SDATE = B.SDATE ");
			sbQuery.append("\n                      AND A.ITEM_CODE = B.ITEM_CODE ");
			sbQuery.append("\n                      AND A.SALE_PRICE > 0 ");
			sbQuery.append("\n                      AND A.USE_YN = 'Y' ");
			sbQuery.append("\n                  ) A ");
//			sbQuery.append("\n             WHERE A.ITEM_CODE = C.ITEM_CODE(+) ");
	 		sbQuery.append("\n             WHERE A.ITEM_CODE BETWEEN C.ITEM_CODE(+) AND C.ITEM_CODE(+)||'9999' ");
			sbQuery.append("\n        )  B ,--단가 ");
			sbQuery.append("\n       ( ");
			sbQuery.append("\n       SELECT ITEM_CODE, ");
			sbQuery.append("\n              ITEM_NAME, ");
			sbQuery.append("\n              ITEM_SIZE, ");
			sbQuery.append("\n              PO_UOM, ");
			sbQuery.append("\n              KG_CONVERT_RATE ");
			sbQuery.append("\n         FROM HLDC_PO_ITEM_MST ");
			sbQuery.append("\n        WHERE ITEM_CODE BETWEEN '010100000001' AND '019999999999' ");
			sbQuery.append("\n       ) C,	--명칭 단위 kg환산율 규격 ");
			sbQuery.append("\n       ( ");
			sbQuery.append("\n        SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
			sbQuery.append("\n          FROM FMP_ITEM_NUT ");
			sbQuery.append("\n         WHERE UPJANG = " + iUpjang );
			sbQuery.append("\n         UNION ALL ");
			sbQuery.append("\n        SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
			sbQuery.append("\n          FROM FSI_ITEM_NUT ");
			sbQuery.append("\n         WHERE ITEM_CODE IN ");
			sbQuery.append("\n              ( ");
			sbQuery.append("\n               SELECT ITEM_CODE ");
			sbQuery.append("\n                 FROM FSI_ITEM_NUT MINUS ");
			sbQuery.append("\n               SELECT ITEM_CODE ");
			sbQuery.append("\n                 FROM FMP_ITEM_NUT ");
			sbQuery.append("\n                WHERE UPJANG = " + iUpjang );
			sbQuery.append("\n              ) ");
			sbQuery.append("\n       ) D, ");
			sbQuery.append("\n       ( ");
			sbQuery.append("\n        SELECT ITEM_CODE, ");
			sbQuery.append("\n               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0033' AND CODE = ITEM_FEATURE) AS FEATURE_NAME ");
			sbQuery.append("\n          FROM FSI_ITEM_FEATURE ");
			sbQuery.append("\n         WHERE (ITEM_CODE, CDATE) IN ");
			sbQuery.append("\n               ( ");
			sbQuery.append("\n                SELECT ITEM_CODE, MAX(CDATE) AS CDATE ");
			sbQuery.append("\n                  FROM FSI_ITEM_FEATURE ");
			sbQuery.append("\n                 WHERE (1=1) ");
			sbQuery.append("\n                  AND  (CENTER_CODE, CUSTCD, ITEM_CODE, APPLY_DATE) IN ( ");
			sbQuery.append("\n                        SELECT ");
			sbQuery.append("\n                               CENTER_CODE, CUSTCD, ITEM_CODE, MAX(APPLY_DATE) AS APPLY_DATE ");
			sbQuery.append("\n                          FROM  FSI_ITEM_FEATURE ");
			sbQuery.append("\n                         WHERE  CENTER_CODE  = (SELECT CENTER_CODE FROM HLDC_PO_UPJANG_CENTER WHERE UPJANG = " + iUpjang + ") ");
			sbQuery.append("\n                           AND  APPLY_DATE BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD'),1)-1,'YYYYMMDD') ");
			sbQuery.append("\n                         GROUP BY CENTER_CODE, CUSTCD, ITEM_CODE ");
			sbQuery.append("\n                       ) ");
			sbQuery.append("\n                 GROUP BY ITEM_CODE ");
			sbQuery.append("\n               ) )F ");
			sbQuery.append("\n WHERE A.UPJANG = (SELECT MAIN_UPJANG FROM FMS_UPJANG WHERE UPJANG = " + iUpjang + ") ");
			sbQuery.append("\n   AND A.RECIPE_CD = '" + sRecipeCd + "' ");
			sbQuery.append("\n   AND A.ITEM_CODE = B.ITEM_CODE(+) ");
			sbQuery.append("\n   AND A.ITEM_CODE = C.ITEM_CODE ");
			sbQuery.append("\n   AND A.ITEM_CODE = D.ITEM_CODE(+) ");
			sbQuery.append("\n   AND A.ITEM_CODE = F.ITEM_CODE(+) ");
			sbQuery.append("\n ORDER BY ITEM_SEQ ");
			
		} else if( sGubun.equals("업장") ) {
			
			sbQuery.setLength(0);
	    	sbQuery.append("\nSELECT /*업장*/ /*+ LEADING(A B C D F) USE_HASH(A B) USE_HASH(D) USE_HASH(F) USE_NL(C) */ A.UPJANG, --업장코드 ");
	    	sbQuery.append("\n       A.RECIPE_CD,	--레시피코드 ");
	    	sbQuery.append("\n       A.SUBINV_CLASS, --식당군 ");
	    	sbQuery.append("\n       A.ITEM_SEQ,  --자재순번 ");
	    	sbQuery.append("\n       A.ITEM_CODE,	--레시피명 ");
	    	sbQuery.append("\n       C.ITEM_NAME,	--자재명 ");
	    	sbQuery.append("\n       C.ITEM_SIZE,	--규격 ");
	    	sbQuery.append("\n       C.PO_UOM,	--구매단위 ");
	    	sbQuery.append("\n       F.FEATURE_NAME,	--자재특성 ");
	    	sbQuery.append("\n       A.NEED_QTY,	--1인소요량 ");
	    	sbQuery.append("\n       NVL(B.OP_PRICE,0) OP_PRICE,	--구매단가 ");
	    	sbQuery.append("\n       D.DISUSE_RATE,	--페기율 ");
	    	sbQuery.append("\n       A.CUT_SPEC,	--커팅규격 ");
	    	sbQuery.append("\n       A.REMARK,  --비고 ");
	    	sbQuery.append("\n       D.CAL,		--100g당 에너지 ");
	    	sbQuery.append("\n       DECODE(NVL(B.OP_PRICE,0),0,'Y','N') RESTRICT_YN, --상태 ");
	    	sbQuery.append("\n       DECODE( NVL(D.DISUSE_RATE,0), 0, A.NEED_QTY, ROUND(A.NEED_QTY*(100-D.DISUSE_RATE)/100,2) ) EDIBLE_QTY,		--가식부량 ");
	    	sbQuery.append("\n       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0017' AND CODE = A.CUT_SPEC) CUT_SPEC_NAME,		--커팅규격명 ");
	    	sbQuery.append("\n       ROUND(A.NEED_QTY * (NVL(B.OP_PRICE,0) / C.KG_CONVERT_RATE / 1000) ) PERSON_PRICE,				--1인원가 ");
	    	sbQuery.append("\n       ROUND( NVL(D.CAL,0) * DECODE( NVL(D.DISUSE_RATE,0), 0, A.NEED_QTY, ROUND(A.NEED_QTY*(100-D.DISUSE_RATE)/100,2) ) / 100,2) CAL_CALC,	--가식부량에 대한 에너지 ");
	    	sbQuery.append("\n       ROUND(NVL(B.OP_PRICE,0) / C.KG_CONVERT_RATE / 1000,2) AS GRAM_PRICE						--g당 단가 ");
	    	sbQuery.append("\n  FROM FMM_UPJANG_RECIPE_ITEM A , ");
	    	sbQuery.append("\n       FMS_ITEM_V C, ");
	    	sbQuery.append("\n       ( ");
	    	sbQuery.append("\n        SELECT /*+ NO_MERGE USE_HASH(C) */ ");
	    	sbQuery.append("\n               A.UPJANG, A.ITEM_CODE, A.SALE_PRICE, NVL(C.OP_RATE,0) AS OP_RATE,                  --운영율 ");
	    	sbQuery.append("\n               DECODE(SIGN(NVL(C.OP_PRICE,0) ),0, SCC_CEIL(A.SALE_PRICE + ROUND(A.SALE_PRICE * NVL(C.OP_RATE,0) / 100),C.CEIL_VAL), C.OP_PRICE) AS OP_PRICE --운영단가(1인원가) ");
	    	sbQuery.append("\n          FROM ");
	    	sbQuery.append("\n             ( ");
	    	sbQuery.append("\n             SELECT UPJANG, A.ITEM_CODE, OP_RATE, OP_PRICE, A.CEIL_VAL ");
	    	sbQuery.append("\n               FROM FMU_OP_RATE A ");
	    	sbQuery.append("\n              WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SDATE AND EDATE ");
	    	sbQuery.append("\n                AND A.USE_YN = 'Y' ");
	    	sbQuery.append("\n             ) C, ");
	    	sbQuery.append("\n             ( ");
	    	sbQuery.append("\n              SELECT " + iUpjang + " AS UPJANG , ");
	    	sbQuery.append("\n                     TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE , ");
	    	sbQuery.append("\n                     ITEM_CODE, TO_NUMBER(SUBSTR(RESULT, 9, 8) ) SALE_PRICE ");
	    	sbQuery.append("\n                FROM ");
	    	sbQuery.append("\n                     ( ");
	    	sbQuery.append("\n                     SELECT /* LEADING(E D) USE_NL(D) USE_NL(C) */ ");
	    	sbQuery.append("\n                            C.ITEM_CODE, C.CENTER_CODE, MAX(C.CONTRACT_START||RPAD(C.SALE_PRICE, 8) ) AS RESULT ");
	    	sbQuery.append("\n                       FROM HLDC_PO_CONTRACT_FSALE C, HLDC_PO_UPJANG_CENTER D, HLDC_ST_UPJANG E ");
	    	sbQuery.append("\n                      WHERE C.CENTER_CODE = D.CENTER_CODE ");
	    	sbQuery.append("\n                        AND D.UPJANG = E.AP_UNITPRICE_UPJANG ");
	    	sbQuery.append("\n                        AND E.UPJANG = " + iUpjang );
	    	sbQuery.append("\n                        AND C.UPJANG = E.AP_UNITPRICE_UPJANG ");
	    	sbQuery.append("\n                        AND C.ITEM_CODE > ' ' ");
	    	sbQuery.append("\n                        AND C.CONTRACT_START <= TO_CHAR(SYSDATE,'YYYYMMDD') ");
	    	sbQuery.append("\n                        AND C.USE_YN = 'Y' ");
	    	sbQuery.append("\n                        AND EXISTS ");
	    	sbQuery.append("\n                            ( ");
	    	sbQuery.append("\n                            SELECT /*+ UNNEST NL_SJ */ 1 ");
	    	sbQuery.append("\n                              FROM HLDC_PO_TREAT_UPJANG X ");
	    	sbQuery.append("\n                             WHERE X.ITEM_CODE = C.ITEM_CODE ");
	    	sbQuery.append("\n                               AND X.UPJANG = C.UPJANG ");
	    	sbQuery.append("\n                            ) ");
	    	sbQuery.append("\n                      GROUP BY C.CENTER_CODE, C.UPJANG, C.ITEM_CODE ");
	    	sbQuery.append("\n                    ) A ");
	    	sbQuery.append("\n              WHERE TO_NUMBER(SUBSTR(RESULT, 9, 8) ) > 0 ");
	    	sbQuery.append("\n             ----------- ");
	    	sbQuery.append("\n              UNION ALL ");
	    	sbQuery.append("\n             ----------- ");
	    	sbQuery.append("\n             SELECT " + iUpjang + " AS UPJANG, TO_CHAR(SYSDATE,'YYYYMMDD') AS NEED_DATE, A.ITEM_CODE, A.SALE_PRICE ");
	    	sbQuery.append("\n               FROM FMP_OTCUST_PRICE_AVA_V A , ");
	    	sbQuery.append("\n                    ( ");
	    	sbQuery.append("\n                    SELECT UPJANG, ITEM_CODE, MAX(SDATE) AS SDATE ");
	    	sbQuery.append("\n                      FROM FMP_OTCUST_PRICE_AVA_V ");
	    	sbQuery.append("\n                     WHERE UPJANG = ");
	    	sbQuery.append("\n                           ( ");
	    	sbQuery.append("\n                           SELECT /*+ NO_UNNEST */ OTCUST_PRICE_UPJANG ");
	    	sbQuery.append("\n                             FROM FMS_UPJANG ");
	    	sbQuery.append("\n                            WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                           ) ");
	    	sbQuery.append("\n                       AND SDATE <= TO_CHAR(SYSDATE,'YYYYMMDD') ");
	    	sbQuery.append("\n                     GROUP BY UPJANG, ITEM_CODE ");
	    	sbQuery.append("\n                    ) B ");
	    	sbQuery.append("\n              WHERE A.UPJANG = B.UPJANG ");
	    	sbQuery.append("\n                AND A.SDATE = B.SDATE ");
	    	sbQuery.append("\n                AND A.ITEM_CODE = B.ITEM_CODE ");
	    	sbQuery.append("\n                AND A.SALE_PRICE > 0 ");
	    	sbQuery.append("\n                AND A.USE_YN = 'Y' ");
	    	sbQuery.append("\n             ) A ");
	    	//sbQuery.append("\n        WHERE A.ITEM_CODE = C.ITEM_CODE(+) ");
	    	sbQuery.append("\n        WHERE A.ITEM_CODE BETWEEN C.ITEM_CODE(+) AND C.ITEM_CODE(+)||'9999' ");
	    	sbQuery.append("\n          AND A.UPJANG = C.UPJANG(+) ");
	    	sbQuery.append("\n       )  B ,--단가 ");
	    	sbQuery.append("\n       ( ");
	    	sbQuery.append("\n         SELECT /*+ NO_MERGE */ ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
	    	sbQuery.append("\n           FROM	FMP_ITEM_NUT ");
	    	sbQuery.append("\n          WHERE	UPJANG = " + iUpjang );
	    	sbQuery.append("\n          UNION ALL ");
	    	sbQuery.append("\n                ( ");
	    	sbQuery.append("\n                SELECT /*+ UNNEST HASH_SJ */ ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE ");
	    	sbQuery.append("\n                  FROM	FSI_ITEM_NUT ");
	    	sbQuery.append("\n                 WHERE ITEM_CODE IN ");
	    	sbQuery.append("\n                       ( ");
	    	sbQuery.append("\n                       SELECT ITEM_CODE ");
	    	sbQuery.append("\n                         FROM FSI_ITEM_NUT MINUS ");
	    	sbQuery.append("\n                       SELECT ITEM_CODE ");
	    	sbQuery.append("\n                         FROM FMP_ITEM_NUT ");
	    	sbQuery.append("\n                        WHERE UPJANG = " + iUpjang );
	    	sbQuery.append("\n                       ) ");
	    	sbQuery.append("\n                ) ");
	    	sbQuery.append("\n        ) D, ");
	    	sbQuery.append("\n      ( SELECT /*+ NO_MERGE */ ITEM_CODE, ");
	    	sbQuery.append("\n               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0033' AND CODE = ITEM_FEATURE) AS FEATURE_NAME ");
	    	sbQuery.append("\n          FROM FSI_ITEM_FEATURE ");
	    	sbQuery.append("\n         WHERE (ITEM_CODE, CDATE) IN ");
	    	sbQuery.append("\n               ( ");
	    	sbQuery.append("\n                SELECT ITEM_CODE, MAX(CDATE) AS CDATE ");
	    	sbQuery.append("\n                  FROM FSI_ITEM_FEATURE ");
	    	sbQuery.append("\n                 WHERE (1=1) ");
	    	sbQuery.append("\n                  AND  (CENTER_CODE, CUSTCD, ITEM_CODE, APPLY_DATE) IN ( ");
	    	sbQuery.append("\n                        SELECT ");
	    	sbQuery.append("\n                               CENTER_CODE, CUSTCD, ITEM_CODE, MAX(APPLY_DATE) AS APPLY_DATE ");
	    	sbQuery.append("\n                          FROM  FSI_ITEM_FEATURE ");
	    	sbQuery.append("\n                         WHERE  CENTER_CODE  = (SELECT CENTER_CODE FROM HLDC_PO_UPJANG_CENTER WHERE UPJANG = " + iUpjang + ") ");
	    	sbQuery.append("\n                           AND  APPLY_DATE BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD') AND TO_CHAR(ADD_MONTHS(TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD'),1)-1,'YYYYMMDD') ");
	    	sbQuery.append("\n                         GROUP BY CENTER_CODE, CUSTCD, ITEM_CODE ");
	    	sbQuery.append("\n                       ) ");
	    	sbQuery.append("\n                 GROUP BY ITEM_CODE ");
	    	sbQuery.append("\n               ) )F ");
	    	sbQuery.append("\n WHERE A.UPJANG = " + iUpjang );
	    	sbQuery.append("\n   AND A.SUBINV_CLASS = '" + sSubinvClass + "' ");
	    	sbQuery.append("\n   AND A.RECIPE_CD = '" + sRecipeCd + "' ");
	    	sbQuery.append("\n   AND A.ITEM_CODE = B.ITEM_CODE(+) ");
	    	sbQuery.append("\n   AND A.ITEM_CODE = C.ITEM_CODE ");
	    	sbQuery.append("\n   AND A.ITEM_CODE = D.ITEM_CODE(+) ");
	    	sbQuery.append("\n   AND A.ITEM_CODE = F.ITEM_CODE(+) ");
	    	sbQuery.append("\n ORDER BY ITEM_SEQ ");
			
		} else {
			throw new Exception("올바르지 않은 작업구분입니다.\n관리자에게 문의하여 주십시요.");
		}
		
		pstmt = conn.prepareStatement(sbQuery.toString());
		rs = pstmt.executeQuery();
		
		DataSet ds_CONSTRUCT = this.makeDataSet(rs, "ds_CONSTRUCT");
		out_dl.add(ds_CONSTRUCT);
		
	   	this.setResultMessage(0, "OK", out_vl);
	} catch(Exception ex) {
	   ex.printStackTrace();
       this.setResultMessage(-1, ex.toString(), out_vl);
	} finally {
		if(rs != null) {
			try {
				rs.close();
			}catch(Exception e) {}
		}
		if(pstmt != null) {
			try {
				pstmt.close();
			}catch(Exception e) {}
		}
		if(conn != null) {
			try {
				conn.close();
			}catch(Exception e) {}
		}
		proc_output(response, out, out_vl, out_dl);
	}
--%>