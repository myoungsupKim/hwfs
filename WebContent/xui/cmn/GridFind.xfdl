<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.4">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="GridFind" classname="comFind" inheritanceid="" position="absolute 0 0 239 67" onload="GridFind_onload" ondeactivate="com_ondeactivate" titletext="그리드 검색" onbeforeclose="com_onbeforeclose" onkeydown="GridFind_onkeydown">
    <Layouts>
      <Layout>
        <Button id="btn_Find" taborder="1" onclick="btn_Find_onclick" position="absolute 203 10 224 31" class="btn_WF_popSearch"/>
        <Edit id="edt_Find" taborder="0" position="absolute 15 10 204 31" ontextchanged="edt_Find_ontextchanged" onkeydown="edt_Find_onkeydown" imemode="hangul"/>
        <CheckBox id="chk_Upper" taborder="2" text="대소문자 구분하지 않음" value="0" truevalue="1" falsevalue="0" position2="absolute l:15 w:180 t:35 h:20" positiontype="position2"/>
        <Static id="Static03" text="h10" class="Guide01_AreaRed" visible="false" position="absolute 15 0 224 10"/>
        <Static id="Static02" text="w15" class="Guide01_AreaRed" visible="false" position="absolute 0 0 15 67"/>
        <Static id="Static00" text="w15" class="Guide01_AreaRed" visible="false" position="absolute 224 0 239 67"/>
        <Static id="Static01" text="h08" class="Guide01_AreaRed" visible="false" position="absolute 15 31 224 39"/>
        <Static id="Static04" text="h15" class="Guide01_AreaRed" visible="false" position="absolute 15 52 224 67"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsOrder" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="index" type="INT" size="256"/>
          <Column id="order" type="STRING" size="256"/>
          <Column id="formats" type="STRING" size="256"/>
          <Column id="formatid" type="STRING" size="256"/>
          <Column id="parent" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <InitValue>
      <CheckBox id="chk_Upper" falsevalue="0" truevalue="1"/>
    </InitValue>
    <Bind>
      <BindItem id="item18" compid="chk_Upper" propid="value" datasetid="ds_list" columnid="SEARCH_YN"/>
    </Bind>
    <Script type="xscript4.0"><![CDATA[/*
  화 면 명 : Grid Find
  파 일 명 : GridFind.xfdl
  기    능 : Grid Find

    수정일    수정자                  수정내용
  ----------   -------  --------------------------------------------------
  2014.11.01   김윤기   최초 생성
*/

/************************************************************************************************
 * 공통 라이브러리 INCLUDE 영역 (필수)
************************************************************************************************/
include "lib::lib_com.xjs";

// form 변수
var fv_findComp = 0;		// 컴포넌트 수
var fv_findRow = 0;			// 찾은 Row
var fv_findCell = 0;		// 찾은 Cell
var fv_findPos = -1;		// 찾은 위치

var fv_arrComp = null;		// 해당 화면의 컴포넌트 배열
var fv_arrDataset = null;	// 해당 그리드의 데이터 셋 배열
var fo_Static = null;		// 문자열을 찾은 경우 표시할 동적 static component

// 부모창 전달 Parameter
var fv_objParent;			// 부모 폼
var fv_objGrid;				// Grid Object
var fv_sType;				// 검색방식(1 - 화면 내 그리드 전체, 2 - 특정 그리드

/*===============================================================================
 * 1. Form 관련 Script
 *=============================================================================*/

/******************************************************************************
* Even   : comFind_onload
* Desc   : onload 이후 Form 의 Object를 초기화한다.
********************************************************************************/
function GridFind_onload(obj:Form, e:LoadEventInfo)
{
	fn_InitVariable();
	
	this.getOwnerFrame().style.border = "2 solid #515d6f";
	
	// 부모창에서 전단 Parameter Setting
	fv_objParent = arg1;	// 부모 form
	fv_objGrid	 = arg2;	// Grid Object	
	fv_sType 	 = arg3;	// 검색 방식 구분
	
	edt_Find.setFocus();
	
	// 조회를 위한 정보를 Setting한다.
	fn_setFindInfo();
}

/*===============================================================================
 * 2. Dataset 관련 Script
 *=============================================================================*/

/*===============================================================================
 * 3. Grid 관련 Script
 *=============================================================================*/
 
/*===============================================================================
 * 4. Component 관련 Script
 *=============================================================================*/
 
/******************************************************************************
* Even   : edt_Find_ontextchanged
* Desc   : edit Box의 내용이 변경되는 경우 발생하는 Event
********************************************************************************/
function edt_Find_ontextchanged(obj:Edit,  e:TextChangedEventInfo)
{
	if(fo_Static != null) {
		fo_Static.visible = false;
	}
	
	fv_findComp = 0;
	fv_findRow = 0;
	fv_findCell = 0;
	fv_findPos = -1;
}

/******************************************************************************
* Even   : btn_Find_onclick
* Desc   : Find Button Click시 
********************************************************************************/
function btn_Find_onclick(obj:Button,  e:ClickEventInfo)
{
	fv_Find();
}

/******************************************************************************
* Even   : edt_Find_onkeydown
* Desc   : edit Box에서 Enter Key 입력시
********************************************************************************/
function edt_Find_onkeydown(obj:Edit, e:KeyEventInfo)
{
	if(e.keycode == 13) fv_Find();
}



/******************************************************************************
* Even   : comFind_onbeforeclose
* Desc   : Find 창이 닫히기 전 발생하는 이벤트
********************************************************************************/
function com_onbeforeclose(obj:Form, e:CloseEventInfo)
{
// 	trace("com_onbeforeclose");
	if(fo_Static != null) {
		fo_Static.visible = false;
	}
}

/******************************************************************************
* Even   : CmPopupFind_ondeactivate
* Desc   : Find 창이 활성화 안될때
********************************************************************************/
function com_ondeactivate(obj:Form, e:ActivateEventInfo)
{
// 	trace("com_ondeactivate");
	if(fo_Static != null) {
		fo_Static.visible = false;
	}	
}

/*===============================================================================
 * 5. User Function 관련 Script
 *=============================================================================*/
 /********************************************************************************
 * Desc		: 그리드의 내용을 찾는다.
 * Param	: 없음
 * Return	: 없음
 *******************************************************************************/
function fv_Find()
{
	var bCnt = 1;
	var sFind = edt_Find.text;
	var sFindSearch = sFind;
	var bUpper = chk_Upper.value;
	
	var testcnt_ = 10;
	var nSpan = 0;
	var nAddScrollPos = 0;
	var nSuppRowSize = 0;
	var cellLeft = 0;
	var cellRight = 0;

	if(sFind.length == 0) return;
	if(bUpper == 1) sFindSearch = sFindSearch.toUpperCase();
	//alert(" >>> : " + dsOrder);
	//alert(" >>> : " + fv_arrDataset);
	while(bCnt <= 2) {
		for(var i = fv_findComp; i < dsOrder.rowcount; i++){
			var nIdx = dsOrder.getColumn(i, "index");
			if(!fv_arrDataset[nIdx]) continue;
			
			// 만약 데이터set의 건수가 0이면 다시한번 Bind Dataset를 점검한다.
			if(fv_arrDataset[nIdx].getRowCount() == 0) {
				fn_setBindDataset(nIdx);
			}
			
			for(var j = fv_findRow; j < fv_arrDataset[nIdx].getRowCount(); j++) {						
				for(var k = fv_findCell; k < fv_arrComp[nIdx].getCellCount("Body"); k++) {							
					var sText = fv_arrComp[nIdx].getCellText(j, k);		
					var sTextSearch = sText;
					if(bUpper == 1) sTextSearch = sTextSearch.toUpperCase();
					var sTextAlign = fv_arrComp[nIdx].getCellProperty("body", k, "align");
					var sFont = fv_arrComp[nIdx].font;
					if(sTextAlign == "") sTextAlign = "center middle";

					var iPos = sTextSearch.indexOf(sFindSearch, fv_findPos + 1);
					while(iPos >= 0) {
						fv_arrComp[nIdx].parent.setFocus();
						fv_arrComp[nIdx].setFocus();
						fv_arrDataset[nIdx].rowposition = j;
						fv_arrComp[nIdx].setCellPos(k);
// 						trace("fv_arrDataset[nIdx].name ==> " + fv_arrDataset[nIdx].name);
						
// 						trace("fv_arrComp[nIdx].getCellProperty ==> " + fv_arrComp[nIdx].getCellProperty("Body", k, "suppress"));
						
						//if(fv_arrComp[nIdx].getCurEditType() == "none") {		
							if(fo_Static != null) {
								var obj = fv_objParent.removeChild("__stt_find");
								obj.destroy();
							
							}
							var nCol = fv_arrComp[nIdx].getCellProperty("Body", k, "col");
// 							trace("nCol ==> " + nCol);
							var sBand = fv_arrComp[nIdx].getFormatColProperty(nCol, "band");
// 							trace("sBand ==> " + sBand);
							var oRect;
							
							if(sBand == "left") {
								oRect = fv_arrComp[nIdx].getCellRect(j, k, -1);
							} 
							else {
								if(sBand == "right")
									oRect = fv_arrComp[nIdx].getCellRect(j, k, -2);
								else	// "body"
									oRect = fv_arrComp[nIdx].getCellRect(j, k);
							}
							
// 							trace("oRect.top ==> " + oRect.top);
// 							trace("oRect.left ==> " + oRect.left);
// 							trace("oRect.bottom ==> " + oRect.bottom);
// 							trace("oRect.right ==> " + oRect.right);
							var nGridTop = fv_arrComp[nIdx].position.top + oRect.top;

							var bSuppress = gfn_isNull(fv_arrComp[nIdx].getCellProperty("Body", k, "suppress"));
// 							trace("bSuppress ==> " + bSuppress);
							cellLeft = oRect.left;
							cellRight = oRect.right;
							if(!bSuppress) {
								nSuppRowSize = fn_getStaticSize(nIdx, j, k, sText);
// 								trace("nSuppRowSize ==> " + nSuppRowSize);
// 								trace("oRect.top ==> " + oRect.top);
// 								trace("oRect.bottom ==> " + oRect.bottom);
// 								trace("oRect.height ==> " + oRect.height);
								
								fv_arrDataset[nIdx].rowposition = fv_findRow;
// 								trace("fv_arrDataset[nIdx].name ==> " + fv_arrDataset[nIdx].name);
								
// 								fv_arrComp[nIdx].setCellPos(k);
// 								oRect = fv_arrComp[nIdx].getCellRect(j, k);
								
//								oRect.bottom = oRect.top + nSuppRowCnt;
// 								trace("oRect.top2 ==> " + oRect.top);
// 								trace("oRect.bottom2 ==> " + oRect.bottom);
// 								trace("oRect.height2 ==> " + oRect.height);
							}
							
							// Static Position이 그리드를 넘어가는 경우
							if(oRect.bottom > fv_arrComp[nIdx].position.bottom - fv_arrComp[nIdx].position.top) {
								nSpan = oRect.bottom - (fv_arrComp[nIdx].position.bottom - fv_arrComp[nIdx].position.top);
								nAddScrollPos = fn_getCalcPos(nIdx, j, nSpan);
								
								fv_arrComp[nIdx].vscrollbar.pos = fv_arrComp[nIdx].vscrollbar.pos + nAddScrollPos;
								
// 								trace(fv_arrComp[nIdx].vscrollbar.pos);
// 								trace("aaaaaa");
							}
							fv_arrComp[nIdx].parent.setFocus();
							fv_arrComp[nIdx].setFocus();
							
							fo_Static = new Static;
							fo_Static.init("__stt_find", oRect.left,nGridTop,oRect.right,(nGridTop+oRect.height));
							fo_Static.border = "1 solid gray";
							fo_Static.background = "white";
							fo_Static.usedecorate = true;
							
							if(fv_objParent.components["__stt_find"])
								fv_objParent.removeChild("__stt_find");
								
							fv_objParent.addChild("__stt_find", fo_Static);
							fo_Static.wordwrap = "both";
							fo_Static.align = sTextAlign;
							fo_Static.font = sFont;
							fo_Static.show();
							fo_Static.visible = false;
							
// 							trace("fo_Static.name ==> " + fo_Static);
// 							trace("fo_Static.position ==> " + fo_Static.position);
							
							if(sBand == "left") {
								oRect = fv_arrComp[nIdx].getCellRect(j, k, -1);
							} 
							else {
								if(sBand == "right")
									oRect = fv_arrComp[nIdx].getCellRect(j, k, -2);
								else	// "body"
									oRect = fv_arrComp[nIdx].getCellRect(j, k);
							}
							
// 							oRect = fv_arrComp[nIdx].getCellRect(j, k, -1);
							
							// Cell의 Left가 음수인경우 이전에 저장해 둔 값을 이용한다.
							if(oRect.left < 0)
								oRect.left = cellLeft;
								
							if(oRect.right < 0)
								oRect.right = cellRight;
							
							if(!bSuppress) {
								var realHeight;
								var oRectTemp;
								if(oRect.top < 0) {
									realHeight = getRealGridHeadHeght(nIdx);
									oRect.top = realHeight;
									
									oRectTemp = fv_arrComp[nIdx].getCellRect(fv_findRow, k);
// 									trace("oRectTemp.bottom ==> " + oRectTemp.bottom);
									oRect.bottom = oRectTemp.bottom;
								}
								else {
									oRect.bottom = oRect.top + nSuppRowSize;
									
	// 								trace("oRect.top2 ==> " + oRect.top);
	// 								trace("oRect.bottom2 ==> " + oRect.bottom);
	// 								trace("oRect.height2 ==> " + oRect.height);
									if(oRect.bottom > fv_arrComp[nIdx].position.bottom - fv_arrComp[nIdx].position.top) {
										realHeight = getRealGridBodyHeght(nIdx, oRect.top, oRect.bottom);
										
										oRect.height = realHeight;
									}
									
	// 								trace("fv_arrComp[nIdx].position.bottom ==> " + fv_arrComp[nIdx].position.bottom);
	// 								trace("oRect.top3 ==> " + oRect.top);
	// 								trace("oRect.bottom3 ==> " + oRect.bottom);
	// 								trace("oRect.left3 ==> " + oRect.left);
	// 								trace("oRect.right3 ==> " + oRect.right);
	// 								trace("oRect.height3 ==> " + oRect.height);
								}

							}
								
							var hscrollbar_pos = fv_objParent.hscrollbar.pos;
							var vscrollbar_pos = fv_objParent.vscrollbar.pos;
							if(hscrollbar_pos < 0) hscrollbar_pos = 0;
							if(vscrollbar_pos < 0) vscrollbar_pos = 0;
							var nGridLeft = system.clientToScreenX(fv_arrComp[nIdx], 0) - system.clientToScreenX(fv_objParent, 0) + hscrollbar_pos;
							
							var nGridTop = system.clientToScreenY(fv_arrComp[nIdx], 0) - system.clientToScreenY(fv_objParent, 0) + vscrollbar_pos;
						
// 							trace("system.clientToScreenY("+fv_arrComp[nIdx]+", 0) : "+system.clientToScreenY(fv_arrComp[nIdx], 0));
// 							trace("fv_arrComp[nIdx].position.top + oRect.top : "+(fv_arrComp[nIdx].position.top + oRect.top));
// 							trace("nGridLeft : "+nGridLeft+", nGridTop : "+nGridTop);
// 							trace("oRect.top : "+oRect.top);

// 							fo_Static.text = sText.substring(0, iPos) + "<fc v='red'><b v='true'>" + sFind + "</b></fc>" + sText.substring(iPos + sFind.length, sText.length);
							fo_Static.text = sText.substring(0, iPos) + "<fc v='red'>" + sFind + "</fc>" + sText.substring(iPos + sFind.length, sText.length);
							fo_Static.position = (nGridLeft + oRect.left) + " " + (nGridTop + oRect.top) + " " + (nGridLeft + oRect.right) + " " + (nGridTop + oRect.bottom);
//							fo_Static.position = oRect.left + " " + nGridTop/*oRect.top*/ + " " + oRect.right + " " + (nGridTop+oRect.height);
							
							fo_Static.visible = true;
// 							trace("fo_Static.name2 ==> " + fo_Static);
// 							trace("fo_Static.position2 ==> " + fo_Static.position);							
							edt_Find.setFocus();
						
						if(bSuppress) {
							fv_findRow = j;
							fv_findCell = k;
						}
						
						fv_findComp = i;
						fv_findPos = iPos;
						return;
					}
					fv_findPos = -1;
				}
				fv_findCell = 0;
			}
			fv_findRow = 0;
		}
		fv_findComp = 0;
		bCnt++;
	}
}

 /********************************************************************************
 * Desc		: 모든 변수 초기화
 * Param	: 없음
 * Return	: 없음
 *******************************************************************************/
function fn_InitVariable()
{
	fv_findComp = 0;
	fv_findRow = 0;
	fv_findCell = 0;
	fv_findPos = -1;

	if(fv_arrComp != null)
		delete fv_arrComp;
	if(fv_arrDataset != null)
		delete fv_arrDataset;

	fv_arrComp = null;
	fv_arrDataset = null;
	fo_Static = null;
}

/********************************************************************************
 * Desc		: 초기에 검색을 위한 정보를 Setting한다.
 * Param	: 없음
 * Return	: 없음
 *******************************************************************************/
function fn_setFindInfo()
{
	dsOrder.keystring  ="";
	dsOrder.clearData();
	fv_arrComp = new Array(100);
	fv_arrDataset = new Array(100);
	
	// 부모창이 null이 아닌 경우
	if(fv_sType == "1")	{
		// 부모창의 모든 그리드를 대상으로 검색하는 경우
		fv_getGrid(fv_objParent, "fv_objParent", "");
	}
	// 그리드 하나만 검색하는 경우
	else {	
		var nIdx = dsOrder.addRow();
		var sParent = "fv_objParent";
		var sOrder = String(fv_objGrid.taborder).padLeft(3, "0");
// 		trace("sOrder ==> " + sOrder);
// 		trace("fv_objGrid.formats ==> " + fv_objGrid.formats);
// 		trace("fv_objGrid.formatid ==> " + fv_objGrid.formatid);
		
		dsOrder.setColumn(nIdx, "index", 0);
		dsOrder.setColumn(nIdx, "order", sOrder);
		dsOrder.setColumn(nIdx, "formats", fv_objGrid.formats);
		dsOrder.setColumn(nIdx, "formatid", fv_objGrid.formatid);
		fv_arrComp[0] = fv_objGrid;

// 		trace(dsOrder.saveXML());
		var oDs = eval(sParent + "." + fv_objGrid.binddataset); 
		//alert(eval(sParent + "." + fv_objGrid.binddataset));
// 		trace(oDs.saveXML());
		fv_arrDataset[0] = oDs;
	}
	
	dsOrder.keystring  = "S:order";
	dsOrder.updateSortGroup();
}

/********************************************************************************
 * Desc		: Popup화면을 Open한 부모창의 Grid를 찾는다.
 * Param	: oForm		- 부모창
			  sComposit	- 부모창 id
			  sParentOrder - 부모창 order (기본 ""로 setting) - 사용안함
 * Return	: 없음
 *******************************************************************************/
function fv_getGrid(oForm, sComposit, sParentOrder) 
{
// 	trace("fv_getGrid("+oForm.name+", "+sComposit+", "+sParentOrder+")");
	var oComps = oForm.components;
	
	for(var i = 0; i < oComps.length; i++) {
		if(oForm.name == "divLoading") break;
		var sOrder = sParentOrder + String(oComps[i].taborder).padLeft(3, "0");
		
		if(oComps[i] instanceof Grid) {
 			//trace("fv_getGrid oComps[i].name ==> " + oComps[i].name);
			var nIdx = dsOrder.addRow();
			dsOrder.setColumn(nIdx, "index", nIdx);
			dsOrder.setColumn(nIdx, "order", sOrder);
			dsOrder.setColumn(nIdx, "formats", oComps[i].formats);
			dsOrder.setColumn(nIdx, "formatid", oComps[i].formatid);
			fv_arrComp[nIdx] = oComps[i];
			var oDs = null;
			var sParent = sComposit;

//  			trace("fv_arrComp[nIdx].name ==> " + fv_arrComp[nIdx].name);
			
			while(!oDs) {
				oDs = eval(sParent + "." + oComps[i].binddataset);
				dsOrder.setColumn(nIdx, "parent", sParent);
				
				sParent = sParent + ".parent";
				if(!eval(sParent)) break;
			}
// 			trace("oDS.name ==> " + oDs.name);
// 			trace("oDS ==> " + oDs.saveXML());
			
			fv_arrDataset[nIdx] = oDs;
		} else if(oComps[i] instanceof Div) {
			fv_getGrid(oComps[i], sComposit + "." + oComps[i].name, sOrder); 
		} else if(oComps[i] instanceof Tab) {
			var oTabPage = oComps[i].tabpages[oComps[i].tabindex];
			fv_getGrid(oTabPage, sComposit + "." + oComps[i].name + "." + oTabPage.name, sOrder); 
		}
	}
}

/********************************************************************************
 * Desc		: 그리드의 cell이 Suppress의 경우 Static 크기 구함
 * Param	: nCompIdx 	- 컴포넌트 index
			  nCurRow	- 현재 Row
			  nCellIdx	- Cell Index
			  sCellText - Cell Text
 * Return	: nSumRealRowSize - Static Size
 *******************************************************************************/
function fn_getStaticSize(nCompIdx, nCurRow, nCellIdx, sCellText)
{
	var i = 0;
	var nRet = 0;
	var nSumRealRowSize = 0;
	
	for(i = nCurRow; i < fv_arrDataset[nCompIdx].getRowCount(); i++) {
		var sText = fv_arrComp[nCompIdx].getCellText(i, nCellIdx);
		
		if(sText == sCellText) {
			nRet++;
			nSumRealRowSize += fv_arrComp[nCompIdx].getRealRowSize(i);
		}
		else {
			break;
		}
	}
	
// 	trace(nRet);
	fv_findRow = nCurRow + (nRet - 1);
	fv_findCell	= fv_arrComp[nCompIdx].getCellPos() + ((nRet - 1) * fv_arrComp[nCompIdx].getFormatColCount());

	return nSumRealRowSize;
}

/********************************************************************************
 * Desc		: Scroll 위치 계산
 * Param	: nCompIdx - 그리드 컴포넌트 인덱스
			  nCurRow	- 현재 Row position
			  nSpan		- Scroll 조정 차이값
 * Return	: nRet		- 위치 계산값
 *******************************************************************************/
function fn_getCalcPos(nCompIdx, nCurRow, nSpan)
{
	var i = 0;
	var nSumRowSize = 0;
	var nRet = 0;
	
	for(i = nCurRow; i >= 0; i--) {
		nSumRowSize += fv_arrComp[nCompIdx].getRealRowSize(i);
		
		nRet++;
		if(nSumRowSize >= nSpan) {
			break;
		}
	}
	
	return nRet;
}

/********************************************************************************
 * Desc		: 그리드의 바인딩 된 데이터 셋을 다시 찾는다.
 * Param	: nIdx - 그리드 컴포넌트 인덱스
 * Return	: 
 *******************************************************************************/
function fn_setBindDataset(nIdx)
{
	var oDs = null;
	var sParent;
	
	sParent =  dsOrder.getColumn(nIdx, "parent");
// 	trace(sParent);
	oDs = eval(sParent + "." + fv_arrComp[nIdx].binddataset);
	
	fv_arrDataset[nIdx] = oDs;
}

/********************************************************************************
 * Desc		: 그리드 Row이 실제 높이를 구한다.
 * Param	: nIdx - 그리드 컴포넌트 인덱스
			  nRectTop - 현재 Row의 Rect Top 값
			  nRectBottom - 현재 Row의 Rect bottom 값
 * Return	: ret - 실제 높이
 *******************************************************************************/
function getRealGridBodyHeght(nIdx, nRectTop, nRectBottom)
{
	var nRHeight = fv_arrComp[nIdx].getRealRowFullSize( "Head");
	var ret;
	
// 	trace("nRHeight ==> " + nRHeight);
// 	trace("fv_arrComp[nIdx].position.height ==> " + fv_arrComp[nIdx].position.height);
	
	if(nRectTop > nRHeight)
		ret = fv_arrComp[nIdx].position.height - nRectTop;
	else {
		if(nRectTop < 0)
			ret = (fv_arrComp[nIdx].position.height - nRHeight) - nRectTop;
//			ret = nRectBottom;
		else
			ret = fv_arrComp[nIdx].position.height - nRHeight;
	}
	
	return ret;
}

/********************************************************************************
 * Desc		: 그리드 헤더의 실제 높이를 구한다.
 * Param	: nIdx - 그리드 컴포넌트 인덱스
 * Return	: nRHeight - 높이
 *******************************************************************************/
function getRealGridHeadHeght(nIdx)
{
	var nRHeight = fv_arrComp[nIdx].getRealRowFullSize( "Head");
	
	return nRHeight;
}

function btn_close_onclick(obj:Button,  e:ClickEventInfo)
{
	this.close();
}

function GridFind_onkeydown(obj:Form, e:KeyEventInfo)
{
	if (e.keycode == 27) {
		this.close();
	}
}
]]></Script>
  </Form>
</FDL>
