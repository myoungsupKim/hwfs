<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.4">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="GridFilter" classname="comGridFilter" inheritanceid="" position="absolute 0 0 405 425" titletext="그리드 다중필터" onload="GridFilter_onload">
    <Layouts>
      <Layout>
        <Static id="sta_PopupBg" class="sta_bg_pop" transparenthittest="true" position2="absolute l:0 r:0 t:0px b:0px" positiontype="position2"/>
        <Button id="btn_apply" taborder="2" text="적용" class="btn_POP_Default" position="absolute 340 385 390 410" onclick="common_onclick"/>
        <Button id="btn_delete" taborder="1" text="삭제" class="btn_WF_Function" position="absolute 349 10 390 30" onclick="common_onclick"/>
        <Button id="btn_add" taborder="0" text="추가" class="btn_WF_Function" position="absolute 306 10 347 30" onclick="common_onclick"/>
        <Grid id="grd_filterList" taborder="4" autoenter="select" useinputpanel="false" autofittype="col" position="absolute 15 35 390 375" binddataset="ds_filterList" oncellclick="grd_filterList_oncellclick" oncloseup="grd_filterList_oncloseup" autoupdatetype="comboselect" extendsizetype="row" cellsizingtype="both" autosizingtype="row">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="129"/>
                <Column size="70"/>
                <Column size="97"/>
                <Column size="65"/>
                <Column size="0"/>
              </Columns>
              <Rows>
                <Row size="26" band="head"/>
                <Row size="24"/>
              </Rows>
              <Band id="head">
                <Cell text="항목"/>
                <Cell col="1" displaytype="text" text="조건"/>
                <Cell col="2" text="값"/>
                <Cell col="3" text="옵션"/>
                <Cell col="4"/>
              </Band>
              <Band id="body">
                <Cell displaytype="combo" edittype="combo" style="padding: ;" text="bind:name" wordwrap="word" combodataset="ds_filterItem" combocodecol="COL_ID" combodatacol="HEAD_TEXT" combodisplayrowcount="10" combodisplay="edit"/>
                <Cell col="1" displaytype="normal" edittype="combo" text="bind:cond" combodataset="ds_filterCond" combocodecol="cond" combodatacol="cond" combodisplayrowcount="10"/>
                <Cell col="2" edittype="normal" text="bind:val" combodataset="ds_filterValue" combocodecol="val" combodatacol="val" combodisplayrowcount="10"/>
                <Cell col="3" displaytype="combo" edittype="combo" text="bind:option" combodataset="ds_filterOption" combocodecol="OptionID" combodatacol="Option"/>
                <Cell col="4" style="padding:5 0 5 0;"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Static id="Static02" text="w15" class="Guide01_AreaRed" visible="false" position="absolute 0 0 15 326"/>
        <Static id="Static03" text="h10" class="Guide01_AreaRed" visible="false" position="absolute 15 0 390 10"/>
        <Static id="Static00" text="w15" class="Guide01_AreaRed" visible="false" position="absolute 390 0 405 326"/>
        <Static id="Static01" text="h05" class="Guide01_AreaRed" visible="false" position="absolute 306 30 390 35"/>
        <Static id="Static04" text="h10" class="Guide01_AreaRed" visible="false" position="absolute 15 375 390 385"/>
        <Static id="Static05" text="h15" class="Guide01_AreaRed" visible="false" position="absolute 15 410 390 425"/>
        <Static id="Static20" text="W102" visible="false" position="absolute 347 10 349 30" anchor="top right" style="background:#ff000055;align:center middle;"/>
      </Layout>
    </Layouts>
    <Bind/>
    <Objects>
      <Dataset id="ds_filterList" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="name" type="STRING" size="256"/>
          <Column id="cond" type="STRING" size="256"/>
          <Column id="val" type="STRING" size="256"/>
          <Column id="option" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_filterItem" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="COL_ID" type="STRING" size="256"/>
          <Column id="HEAD_TEXT" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_filterCond" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="cond" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="cond">==</Col>
          </Row>
          <Row>
            <Col id="cond">&gt;</Col>
          </Row>
          <Row>
            <Col id="cond">&gt;=</Col>
          </Row>
          <Row>
            <Col id="cond">&lt;</Col>
          </Row>
          <Row>
            <Col id="cond">&lt;=</Col>
          </Row>
          <Row>
            <Col id="cond">포함</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_filterOption" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="OptionID" type="STRING" size="256"/>
          <Column id="Option" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="OptionID">||</Col>
            <Col id="Option">OR</Col>
          </Row>
          <Row>
            <Col id="OptionID">&amp;&amp;</Col>
            <Col id="Option">AND</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
    <Script type="xscript4.0"><![CDATA[/*
  화 면 명 : Grid Filter
  파 일 명 : GridFind.xfdl
  기    능 : Grid Find

    수정일    수정자                  수정내용
  ----------   -------  --------------------------------------------------
  2014.11.01   김윤기   최초 생성
*/

/************************************************************************************************
 * 공통 라이브러리 INCLUDE 영역 (필수)
************************************************************************************************/
include "lib::lib_com.xjs";

// 부모창 전달 Parameter
var fv_objParent;			// 부모 폼
var fv_objGrid;				// Grid Object

/*===============================================================================
 * 1. Form 관련 Script
 *=============================================================================*/
/******************************************************************************
* Even   : comFind_onload
* Desc   : onload 이후 Form 의 Object를 초기화한다.
********************************************************************************/
function GridFilter_onload(obj:Form, e:LoadEventInfo)
{
	this.getOwnerFrame().style.border = "2 solid #515d6f";
	// 부모창에서 전단 Parameter Setting
	fv_objParent = arg1;	// 부모 form
	fv_objGrid	 = arg2;	// Grid Object	
	
	fn_init(fv_objGrid);
}

 /********************************************************************************
 * Desc		: 부모창의 그리드 정보를 가져온다(컬럼 정보, 각 컬럼 값 등을 Setting한다.)
 * Param	: objGrid - 부모창 그리드
 * Return	: 없음
 *******************************************************************************/
function fn_init(objGrid)
{
	var nColCount;
	var sParent = "fv_objParent";
	
	// 그리드 포인터 저장
	fv_objGrid = objGrid;
	
	// bind되어 있는 데이터 셋을 가져온다.
	var objBindDs = eval(sParent + "." + fv_objGrid.binddataset);	
	
	nColCount = objBindDs.getColCount();
	if(nColCount > 0) {
		ds_filterItem.clearData();
		
		// 컬럼정보 Setting 함수 호출
		fn_setInitSort(objGrid);
		
		// Dataset 저장 방식(포함 있을때)
		if(!gfn_isNull(objGrid.dsMultiFilter)) ds_filterList.loadXML(objGrid.dsMultiFilter);
	}
}

// init Multi Sort Conf
function fn_setInitSort(objGrid) 
{
	ds_filterItem.clearData();
	
	var nCellCnt = objGrid.getCellCount("Head");
	var nHeadRowCnt = fn_getGridHeadRowCnt(objGrid);
	
	for( var i=0;i<nCellCnt;i++ ) {
		var nCol 		= objGrid.getCellProperty("head", i, "col");
		var nRow 		= objGrid.getCellProperty("head", i, "row");
		var nRowSpan 	= objGrid.getCellProperty("head", i, "rowspan");
		var sTitleText	= objGrid.getCellProperty("head", i, "text");
		var sColType	= objGrid.getCellProperty("Body", i, "displaytype");
		//var sColType	= gfn_nvl(objGrid.getCellProperty("Body", gfn_getCellColId(objGrid, i), "displaytype"), "normal");
		var nRowPos 	= nRow + nRowSpan;
		
		// Grid Head 중에서 제일 하단 Row만 처리
		if( nHeadRowCnt == nRowPos ) 
		{
			//trace("i : " + i + " / nHeadRowCnt : " + nHeadRowCnt + " / sTitleText : " + sTitleText);
			if( gfn_length(sTitleText) > 0) 
			{
				var sBind = objGrid.getCellProperty("body", nCol, "text");
				var arrBind = String(sBind).split(":");

				// bind가 없거나 체크박스는 제외
				if(arrBind[0] == "bind" && sTitleText != '0')
				{
					var aRow 		= ds_filterItem.addRow();
					
					var strHeadText = objGrid.getCellText(-1, i);
										
					// 줄바꿈 삭제
					strHeadText = strHeadText.replace(String.fromCharCode(10),'');
					strHeadText = strHeadText.replace(String.fromCharCode(13),'');
					
					// sort 문자 삭제
					if (strHeadText.substr(strHeadText.length-1) == CONST_ASC_MARK || strHeadText.substr(strHeadText.length-1) == CONST_DESC_MARK) {
						strHeadText = strHeadText.substr(0, strHeadText.length - 2);
					}		
					
					ds_filterItem.setColumn(aRow, "COL_ID",    arrBind[1]);
					ds_filterItem.setColumn(aRow, "HEAD_TEXT", strHeadText);
				}
			}
		} else {
			continue;
		}
	}
}

/*===============================================================================
 * 3. Grid 관련 Script
 *=============================================================================*/
 
/******************************************************************************
* Even   : grd_filterList_oncellclick
* Desc   : 그리드 Cell Click 시
********************************************************************************/
function grd_filterList_oncellclick(obj:Grid, e:GridClickEventInfo)
{
	if(e.row >= 0)
		// 콤보박스의 리스트 창을 한번에 표시하기 위한 처리
		obj.dropdownCombo();
}

/******************************************************************************
* Even   : grd_filterList_oncloseup
* Desc   : 그리드 콤보 컬럼의 선택이 변경되는 경우
********************************************************************************/
function grd_filterList_oncloseup(obj:Grid, e:GridEditEventInfo)
{
	if(e.col == 0)
	{
		if(e.row >= 0) {
			// 선택 변경사항을 데이터 Set에 반영
			grd_filterList.updateToDataset();
		}
	}
}

/*===============================================================================
 * 4. Component 관련 Script
 *=============================================================================*/
/******************************************************************************
* Even   : common_onclick
* Desc   : 버튼 클릭 시 처리
********************************************************************************/
function common_onclick(obj:Button,  e:ClickEventInfo)
{
	switch (obj.name)
	{
		case "btn_add":			// 추가
			fn_AddRowFilter();
			break;
			
		case "btn_delete":		// 삭제
			ds_filterList.deleteRow(ds_filterList.rowposition);
			
			if(ds_filterList.getRowCount() === 0)
				btn_delete.enable = false;
			break;
			
		case "btn_apply":		// 적용
			var sFilterString;
 			sFilterString = fn_makeFilterString();

			var sParent = "fv_objParent";
			
			// bind되어 있는 데이터 셋을 가져온다.
			var objBindDs = eval(sParent + "." + fv_objGrid.binddataset);
				
			objBindDs.filter("");
			
 			if(!gfn_isNull(sFilterString)) {
				objBindDs.filter(sFilterString);
				
				var objRtn = new Object();
				objRtn["FilterDs"] 		= ds_filterList.saveXML();	
				this.close(objRtn);
			}
			else { 			
				this.close();
			}
			break;
	}
}

/*===============================================================================
 * 5. User Function 관련 Script
 *=============================================================================*/
/********************************************************************************
 * Desc		: Add Button Click시 Row를 추가하고 나머지 데이터 처리
 * Param	: 없음
 * Return	: 없음
 *******************************************************************************/
function fn_AddRowFilter()
{
	var nPreRow = ds_filterList.getRowCount() - 1;
	var sOption;
	
	sOption = ds_filterList.getColumn(nPreRow, "option");
	
	// 가장 마지막 로우에 옵션이 선택되어 있지 않으면 OR로 Setting한다.
	if(gfn_isNull(sOption)) {
		ds_filterList.setColumn(nPreRow, "option", 	ds_filterOption.getColumn(0, "OptionID"));
	}
	
	var nAddRow = ds_filterList.addRow();

	ds_filterList.setColumn(nAddRow, "name", 	ds_filterItem.getColumn(0, "COL_ID"));
	ds_filterList.setColumn(nAddRow, "cond", 	ds_filterCond.getColumn(0, "cond"));
	
	// Combo 사용시
	//displaytype : expr:gfn_isNull(name) ? 'normal' : 'combo'
	//edittype : expr:gfn_isNull(name) ? 'none' : 'combo'
	//ds_filterList.setColumn(nAddRow, "val", 	ds_FilterValue.getColumn(0, "val"));
	
	// Normal 사용시
	ds_filterList.setColumn(nAddRow, "val", 	null);
	
	ds_filterList.setColumn(nAddRow, "option", 	ds_filterOption.getColumn(0, "OptionID"));	
	grd_filterList.updateToDataset();
	
	btn_delete.enable = true;
}

/********************************************************************************
 * Desc		: 데이터 셋에 적용된 모든 필터를 제거한다.
 * Param	: objGrid - 부모창 그리드
 * Return	: 없음
 *******************************************************************************/
function fn_deleteAll(ds)
{
// 	ds.fiterstr = "";
	ds.filter("");
}

/********************************************************************************
 * Desc		: 필터 항목에서 값을 찾는다.
 * Param	: sValue - Filter 값
			  nAddRow - 추가된 row
 * Return	: true = 찾아서 처리한 경우
              false - 못찾은 경우
 *******************************************************************************/
function fn_findFilterItem(sValue, nAddRow)
{
	var nFindPos;
	
	nFindPos = ds_filterItem.findRow("COL_ID", sValue);
	
	if(nFindPos == -1)
		return false;

	ds_filterList.setColumn(nAddRow, "name", sValue);
	return true;
}

/********************************************************************************
 * Desc		: 조건 항목에서 값을 찾는다.
 * Param	: sValue - Filter 값
			  nAddRow - 추가된 row
 * Return	: true = 찾아서 처리한 경우
              false - 못찾은 경우
 *******************************************************************************/
function fn_findFilterCond(sValue, nAddRow)
{
	var nFindPos;
	
	nFindPos = ds_filterCond.findRow("cond", sValue);
	
	if(nFindPos == -1)
		return false;

	ds_filterList.setColumn(nAddRow, "cond", sValue);
	return true;
}

/********************************************************************************
 * Desc		: 값 항목에서 값을 찾는다.
 * Param	: sValue - Filter 값
			  nAddRow - 추가된 row
 * Return	: true = 찾아서 처리한 경우
              false - 못찾은 경우
 *******************************************************************************/
function fn_findFilterValue(sValue, nAddRow)
{
	var nFindPos;
	
	nFindPos = ds_FilterValue.findRow("val", sValue);
	
	if(nFindPos == -1)
		return false;

	ds_filterList.setColumn(nAddRow, "val", sValue);
	return true;
}

/********************************************************************************
 * Desc		: 값 항목에서 값을 찾는다.
 * Param	: sValue - Filter 값
			  nAddRow - 추가된 row
 * Return	: true = 찾아서 처리한 경우
              false - 못찾은 경우
 *******************************************************************************/
function fn_findFilterOption(sValue, nAddRow)
{
	var nFindPos;
	
	nFindPos = ds_filterOption.findRow("OptionID", sValue);
	
	if(nFindPos == -1)
		return false;

	ds_filterList.setColumn(nAddRow, "option", sValue);
	return true;
}

/********************************************************************************
 * Desc		: 값 항목에서 값을 찾는다.
 * Param	: 없음
 * Return	: sFilterString - 그리드에 값으로 filter string을 만든다.
 *******************************************************************************/
function fn_makeFilterString()
{
	var sReturn = "";
	var i;
	var sItem;
	var sCond;
	var sVal;
	var sOption;
	var sSpace = "";
	
	if(ds_filterList.getRowCount() == 0) {
		return sReturn;
	}
	
	for(i = 0; i < ds_filterList.getRowCount(); i++) {
		sItem = ds_filterList.getColumn(i, "name");
		sCond = ds_filterList.getColumn(i, "cond");
		sVal = ds_filterList.getColumn(i, "val");
		sOption = ds_filterList.getColumn(i, "option");

		// 만약 각 항목의 값 중에 null이 포함된 것이 있으면 처리하지 않고
		// 넘어간다.
// 		trace(sVal);
		if(gfn_isNull(sItem) || gfn_isNull(sCond) || gfn_isNull(sVal)) {
// 			trace(String(gfn_isNull(sItem)) + String(gfn_isNull(sCond)) + String(gfn_isNull(sVal)))
			sReturn += "";
			continue;
		}
		
		if(i != 0)	sSpace = " ";

		if(sCond == "포함")
		{
			sReturn += sSpace + sItem + ".toString().indexOf('" + sVal + "') > -1";
		}
		else {
			sReturn += sSpace + sItem + " " + sCond + " '" + sVal + "'";
		}
		
 		// 마지막 Row가 아니면
 		if(i != ds_filterList.getRowCount() - 1) {
			if(!gfn_isNull(sOption)) {
				sReturn += " " + sOption;
			}
 		}
	}	
 	
	return sReturn;
}

// Grid HeadRowCount 리턴
function fn_getGridHeadRowCnt(objGrid) 
{
	var idx=0;
	for ( var i=0;i<objGrid.getFormatRowCount();i++) {
		if(objGrid.getFormatRowProperty(i,"band") =="head") {
			idx++;
		}
	}
	return idx;
}
]]></Script>
  </Form>
</FDL>
