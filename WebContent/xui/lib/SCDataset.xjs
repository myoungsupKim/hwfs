<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/**
 * Dataset 처리 공통 스크립트
 * @ClassName SCDataset.xjs
 * @Description SCDataset Javascript
 * @Modification-Information
 *    수정일      수정자         수정내용
 *  ----------   ----------   -------------------------------
 *  2015.03.17    김재섭       최초 생성
 *  2015.04.08    kksoo         getSelectedRows, checkDuplicate, deleteRows 추가
 *
 * @author FC종합전산구축 : COM 김재섭
 * @since 2015.03.17.
 * @version 1.0
 * @see 
 * 
 *  Copyright (C) 2014 by HANWHA S&C CO.,LTD. All right reserved.
 */
var SCDataset = {
	form : null,
	
	/**
	 * @class 주어진 조건에 의해 Dataset에 값을 채운다.
	 * @param thisForm - 현재 Form Object
	 * @param qid - 조회하고자 하는 대상의 고유 KEY
	 * @param outDs - 조회된 결과를 Binding할 Dataset Object.
	 * @param option - qid를 조회할 시 필요한 조건(JSON 형태)
	 * @param [옵션] - triggerEvent 함수명(문자열)
	 * @return 
	 */
	bind : function(thisForm, qid, datasetName, option) {
		SCDataset.form = thisForm;
		
		var newVariableName = "gs_hwfsBindingDataset_" + datasetName;

		//Output Dataset이 없는경우에는 내부적으로 Dataset을 생성한다.
		if (datasetName == null || datasetName == "") {
			gfn_alert("Dataset Name이 지정되지 않았습니다.");
			return;
		}
		
		//기존 Dataset을 지우고 새로 생성한다.
		var datasetId = datasetName;
		thisForm.removeChild(datasetId);
		var dataset = new Dataset();
		dataset.id = datasetId;
		dataset.name = datasetId;
		thisForm.addChild(datasetId, dataset);
		
		//옵션에 대하여 선언되지 않는 경우에는 초기화 한다.
		if (option == undefined || option == null || option == "") option = {};
		
		//Controller로 전송할 Parameter를 설정한다.
		var parameter = {
			qid : qid,
			datasetName : datasetName,
			option : option,
			triggerEvent : "NVL"
		};

		//Trigger Event를 설정한다.
		if (arguments.length == 5)
		{
			parameter.triggerEvent = arguments[4];
		}
		
		//전역변수를 생성한다.
		setVariable(newVariableName, gfn_jsonObjectToString(parameter));

  		var strSvcID    = "hwfsBindingDataset,"+newVariableName;
  		var strURL      = "/sc/cmn/binding/select.xdo";
  		var strInDs     = "";
  		var strOutDs    = datasetName+"=output";
  		var strArg      = "input="+wrapQuote(gfn_jsonObjectToString(parameter));
  		var strCallback = "SCDataset.callback";
		var bAsync = true;
  
  		gfn_transaction(thisForm, strSvcID, strURL, strInDs, strOutDs, strArg, strCallback, bAsync);
	},
	
	/**
	 * @class 내부 CALLBACK Function으로 실제 Transaction에 대한 Callback 함수이다.
	 */
	callback : function(svcId, errCode, errMsg) {
		var tmp = svcId.split(",");
		var newVariableName = eval(tmp[1]);
		
		var json = gfn_jsonStringToObject(newVariableName);
		var dataset = SCDataset.form.objects[json.datasetName];
		
// 		if (dataset == null) {
// 			dataset = SCDataset.form.parent.objects[json.datasetName];
// 		}
		
		var triggerEventParameter = {};
		
		triggerEventParameter.oid = json.datasetName;
		
		//[[Trigger Event를 발생한다.
		if (json.triggerEvent != "NVL") {
			var triggerEvent = eval(json.triggerEvent);
			triggerEvent(triggerEventParameter, dataset);
		}
		//Trigger Event를 발생한다.]]
		
		//생성한 전역변수를 제거한다.
		removeVariable(tmp[1]);
	},
	
	/**
	 * Dataset에서 선택된 Row 번호를 배열로 얻는다.
	 * @param objDs Dataset  
	 * @param CheckColId Checkbox영역의 Cell ID  
	 * @return Row 번호를 인자로 하는 배열
	 */
	getSelectedRows : function (objDs:Dataset, chkColId) {
		var arrRows = new Array();

		for (var i=0, idx=0; i<objDs.getRowCount(); i++) {
			if(objDs.getColumn(i,chkColId) == 1) {
				arrRows[idx] = i;
				idx++;
			}
		}
		
		return arrRows;
	},
	
	/**
	 * DataSet에 중복된 데이터가 있는지 여부를 검사한다.
	 * @param objDs Dataset
	 * @param strColId 비교하고자 하는 Dataset 키값을 |로 구분하여 받는 인자
	 * @param strColData 비교하고자 하는 데이터 값을 |로 구분하여 받는 인자
	 * @return 중복된 데이터가 있으면 false, 아니면 true
	 */
	checkDuplicate:function (objDs:Dataset, strColId, strColData) {
		try{
			var strExpr = "";
			var strChkData = "";
			var objArrId = strColId.split("|");  
			var objArrData = strColData.split("|");  

			for (var i = 0 ; i < objArrId.length ; i++){
				if (strExpr != "") strExpr += " && ";
				strExpr += objArrId[i] + "=='" + objArrData[i] + "'" ;
				
				if (strChkData != "") strChkData += ",";
				strChkData += objArrData[i]; 
			}

			var intRow = objDs.findRowExpr(strExpr);

			if(intRow != -1){
				gfn_alert("msg.err.overlap.date", strChkData);	//중복 오류
				return false;
			}else
				return true;
		}catch(e){
			gfn_alert (e.message);
			return false;
		}
	},
	
	/**
	 * Dataset에서 Row를 삭제한다.
	 * @param objDs Dataset  
	 * @param arrRows Row 번호를 인자로 하는 배열
	 * @return None
	 */
	deleteRows:function (objDs:Dataset, arrRows){
		objDs.enableevent = false;
		//주의) 역으로 삭제해야 함
		for (var i=arrRows.length-1; i>=0; i--) {
			objDs.deleteRow(arrRows[i]);
		}
		objDs.enableevent = true;
	}

};]]></Script>
