<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/**
 * @fileOverview
 * FORM 관련 함수 모음
 */

/**
 * @class 화면초기화함수
 * @param obj    - Form object
 * @param bCreateEvent - 자동으로 Event 생성 여부
 * @return 없음
 */
var v_ds_check;
function gfn_formOnLoad(obj:Form, bCreateEvent)
{
//trace("lib_form - gfn_formOnLoad");
    // 기본값으로 콘테이너 내 Componet 처리
    if(gfn_isNull(bCreateEvent)) bCreateEvent = true;

    // 자동으로 Event 생성 여부 and obj가 Form 일때만
    strType = obj.parent.toString().toUpperCase();
    if( bCreateEvent == true && (strType == "[OBJECT FORM]" || strType == "[OBJECT CHILDFRAME]") )
    {
        // form에서 Key Down시 단축키들 지정
        var objEvent = obj.onkeydown.getHandler(0);
        if (gfn_isNull(objEvent)) obj.onkeydown.addHandler(gfn_formKeyDown);
    }

    // MDI창으로 호출 및 Frame 구조로 실행시
    //if ( gv_mdi == "Y" && obj.getOwnerFrame().form.name == "WorkFrame" )
    
    if ( gv_mdi == "Y" && obj.parent.name == "WorkFrame" )
    {
    }
    else
    {
		try
		{
			if (IS_SHOW_MODAL == "TRUE")
			{
				if (obj.getOwnerFrame().autosize) {
					obj.getOwnerFrame().position.width = obj.position.width+6;
					//obj.getOwnerFrame().position.height = obj.position.height+3;
				}
				
				obj.getOwnerFrame().style.border = "2 solid #515d6f";
			}
		}
		catch (e) {
		}
    }

    // 기본값으로 콘테이너 내 Componet 처리
    var bSubComp = true;
	
	// 로컬환경에서만 동작하도록 변경
	if ( gv_runMode == "L" ) {
		if ( !gfn_isNull(application.gv_hqmlAutoLoad) ) {
			if ( application.gv_hqmlAutoLoad ) {
				gfn_transaction(this, "test", "sc/cmn/hqml/loader/hqmlAutoLoader.xdo", "", "", "", ""); //HQML AUTO LOADER
			}
		}
		
	}
	
    // Form에 속한 공통버튼을 화면의 속성(CRUDP)에 맞도록 Show/Hide한다.
    gfn_commonButtonControl(obj);
	
    // Form에 속한 컨트롤들의 초기화 처리
    gfn_allCallFunction(obj, gfn_formSetInit, bCreateEvent, false, bSubComp);

	// Form에 속한 모든 Object중에서 EditMask의 MaxLengh를 체크한다.
	//gfn_editMaskMaxLength(obj);
}

// // EditMask의 MaxLength를 적용한다.(단, EditMask의 UserProperty인 maxlen이 정의되어야 한다.)
// function gfn_editMaskMaxLength(obj)
// {
//     var bSubComp = true;
//     var strType;
//     var retVal;
// 
//     // Component 목록에 함수 실행
//     for (var i = 0; i < obj.components.length; i++)
//     {
//         strType = obj.components[i].toString().toUpperCase();
// 
// 		if (strType == "[OBJECT MASKEDIT]") {
// 			var objEvent = obj.components[i].onchar.getHandler(0);
// 			if (gfn_isNull(objEvent)) obj.components[i].onchar.addHandler(gfn_editMaskOnCharEvent);
// 		}
// 
//         // 내부 Component에 해당 함수 호출
//         if(bSubComp == true)
//         {
//             if (obj.components[i].components)
//             {
//                 switch (strType)
//                 {
//                     case "[OBJECT TAB]":
//                     case "[OBJECT TABPAGE]":
//                     case "[OBJECT DIV]":
//                         if (gfn_isNull(obj.components[i].url) == true) gfn_editMaskMaxLength(obj.components[i]);
//                         break;
//                 }
//             }
//         }
//     }
// }
// 
// //EditMask의 OnCharEvent
// function gfn_editMaskOnCharEvent(obj, e) {
// 	if (gfn_length(obj.value) == Number(obj.maxlength)) {
// 		return false;
// 	}
// 	else {
// 		return true;
// 	}
// }


function gfn_commonButtonControl(obj)
{
    if (gfn_isNull(obj.components["div_cmnBtn"])) return;
	
	gv_drawButtonYn = "N"; /* UI의 버튼을 그렸는지를 확인한다. */
	
    if (gv_applyAuthYn == "Y") {
		var ds = null;
		
		//팝업인 경우에는 권한을 찾지 못하므로 예외처리로 수행한다.
		try {
			ds = parent.objects["ds_cmnAuth"];
		}
		catch (e) {
			ds = null;
		}
		
		if (ds != null) {
			var dsCmnAuth = new Dataset();
			dsCmnAuth.id = "ds_cmnAuth";
			dsCmnAuth.name = "ds_cmnAuth";
			dsCmnAuth.addColumn("delYn", "STRING", 1);
			dsCmnAuth.addColumn("exlYn", "STRING", 1);
			dsCmnAuth.addColumn("insYn", "STRING", 1);
			dsCmnAuth.addColumn("prtYn", "STRING", 1);
			dsCmnAuth.addColumn("savYn", "STRING", 1);
			dsCmnAuth.addColumn("srcYn", "STRING", 1);
			dsCmnAuth.addColumn("persInfoYn", "STRING", 1);
			dsCmnAuth.addColumn("adminYn", "STRING", 1);

			//var ds = parent.objects["ds_cmnAuth"];
			dsCmnAuth.copyData(ds);

			obj.removeChild("ds_cmnAuth");
			obj.addChild("ds_cmnAuth", dsCmnAuth);
			
			div_cmnBtn.fn_setPersInfoTitle(dsCmnAuth.getColumn(0, "persInfoYn"));
			div_cmnBtn.fn_setUseBtn(dsCmnAuth);
		}
		else {
			div_cmnBtn.fn_setUseBtn(ds_cmnAuth);
		}
    }
    else {
		div_cmnBtn.fn_setUseBtn(ds_cmnAuth);
    }

// 	try {
// 		if (!gfn_isNull(parent.objects["ds_cmnAuth"])) {
// 			var dsCmnAuth = new Dataset();
// 			dsCmnAuth.id = "ds_cmnAuth";
// 			dsCmnAuth.name = "ds_cmnAuth";
// 			dsCmnAuth.addColumn("delYn", "STRING", 1);
// 			dsCmnAuth.addColumn("exlYn", "STRING", 1);
// 			dsCmnAuth.addColumn("insYn", "STRING", 1);
// 			dsCmnAuth.addColumn("prtYn", "STRING", 1);
// 			dsCmnAuth.addColumn("savYn", "STRING", 1);
// 			dsCmnAuth.addColumn("srcYn", "STRING", 1);
// 			dsCmnAuth.addColumn("persInfoYn", "STRING", 1);
// 			dsCmnAuth.addColumn("adminYn", "STRING", 1);
// 
// 			var ds = parent.objects["ds_cmnAuth"];
// 			dsCmnAuth.copyData(ds);
// 
// 			obj.removeChild("ds_cmnAuth");
// 			obj.addChild("ds_cmnAuth", dsCmnAuth);
// 			
// 			div_cmnBtn.fn_setPersInfoTitle(dsCmnAuth.getColumn(0, "persInfoYn"));
// 			div_cmnBtn.fn_setUseBtn(dsCmnAuth);
// 		}
// 		else {
// 			// 공통버튼 권한 제어
// 			div_cmnBtn.fn_setUseBtn(ds_cmnAuth);
// 		}
// 	}
// 	catch (e) {
// 		div_cmnBtn.fn_setUseBtn(ds_cmnAuth);
// 	}
}
	
 /**
 * @class Form에 속한 모든 컴포넌트를 함수의 인자로 넘겨주고 함수 호출처리
 * @param obj - 컨테이너(Form, Div)
 * @param FunctionObj - 호출할 함수
 * @param paramObj - 함수에 넘겨줄 파라메터
 * @param bObjects - Object 포함 여부
 * @param bSubComp - 콘테이너 내 Componet 포함 여부
 * @return retVal 함수의 리턴 값
 */
function gfn_allCallFunction(obj, FunctionObj, paramObj, bObjects, bSubComp)
{
    // 기본값으로 Object도 처리
    if(gfn_isNull(bObjects)) bObjects = true;

    // 기본값으로 콘테이너 내 Componet도 처리
    if(gfn_isNull(bSubComp)) bSubComp = true;

    var strType;
    var retVal;

    // Component 목록에 함수 실행
    for (var i = 0; i < obj.components.length; i++)
    {
        strType = obj.components[i].toString().toUpperCase();
        //strName = obj.components[i].name;
        //trace("gfn_allCallFunction : strType : " + strType + " / strName : " + strName);

        if(strType == "[OBJECT STATIC]") continue;
        if(strType == "[OBJECT IMAGEVIEWER]") continue;
        if(strType == "[OBJECT BUTTON]") continue;
        if(strType == "[OBJECT CHECKBOX]") continue;
        if(strType == "[OBJECT CALENDAR]") continue;
        if(strType == "[OBJECT EDIT]") continue;
        if(strType == "[OBJECT TEXTAREA]") continue;
        if(strType == "[OBJECT OBJCALENDAR]") continue;
        if(strType == "[OBJECT OBJCALMONTH]") continue;
        //if(strType == "[OBJECT COMBO]") continue;

        // 기본 속성 및 이벤트 생성
        FunctionObj.call(this, obj.components[i], paramObj);

        // 내부 Component에 해당 함수 호출
        if(bSubComp == true)
        {
            if (obj.components[i].components)
            {
                switch (strType)
                {
                    case "[OBJECT TAB]":
                        retVal = gfn_allCallFunction(obj.components[i], FunctionObj, paramObj, bObjects, bSubComp);
                        if (gfn_isNull(retVal) == false) return retVal;
                        break;

                    case "[OBJECT TABPAGE]":
                    case "[OBJECT DIV]":
                    case "[OBJECT POPUPDIV]":
                        if (gfn_isNull(obj.components[i].url) == true)
                        {
                            retVal = gfn_allCallFunction(obj.components[i], FunctionObj, paramObj, bObjects, bSubComp);
                            if (gfn_isNull(retVal) == false) return retVal;
                        }
                        break;
                }
            }
        }
    }

    // Object 목록에 함수 실행
    if (bObjects == true && obj.objects)
    {
        for (var i = 0; i < obj.objects.length; i++)
        {
            strObjType = obj.objects[i].toString().toUpperCase();
            //strObjName = obj.objects[i].name;
            //trace("strObjType : " + strObjType + " / strObjName : " + strObjName);

            // 기본 속성 및 이벤트 생성
            FunctionObj.call(this, obj.components[i], paramObj);
        }
    }
}

 /**
 * @class Form에 속한 컨트롤들의 초기화 처리
 * @param obj - 컨테이너(Form, Div)
 * @param bEvent - 자동으로 Event 생성 여부
 * @return 없음
 */
function gfn_formSetInit(obj, bCreateEvent)
{
    var strType     = obj.toString().toUpperCase();	// Component Type
    //var strName     = obj.name;						// Name
    //trace("gfn_formSetInit : " + obj.name + " / bCreateEvent : " + bCreateEvent +" / strType : " + strType + " / strName : " + strName);

    // Form내 Component 초기 설정
    switch (strType)
    {
        case "[OBJECT GRID]":
            // no Data 이미지 셋팅
            obj.nodataimage = gv_noData;

            // wheelscrollrow 셋팅(컨버팅소스 때문에 추가)
            if(obj.wheelscrollrow < 3) obj.wheelscrollrow = 3;

            // 자동으로 Event 생성
            if(bCreateEvent == true)
            {
                // Sort 처리 : 해당 콤포넌트에 onheadclick 이벤트가 없을때만 생성
                var objEvent = obj.onheadclick.getHandler(0);
                if (gfn_isNull(objEvent)) obj.onheadclick.addHandler(gfn_gridSort);

                // 팝업 메뉴 처리 : 해당 콤포넌트에 onrbuttonup 이벤트가 없을때만 생성
                objEvent = obj.onrbuttonup.getHandler(0);
                if (gfn_isNull(objEvent)) obj.onrbuttonup.addHandler(gfn_openGridMenu);
            }
            break;

        case "[OBJECT COMBO]":
			// 해당 콤포넌트에 onsetfocus 이벤트가 없을때만 생성
			if(obj.type == "filter" || obj.type == "search")
			{
				var objEvent = obj.onsetfocus.getHandler(0);
				if (gfn_isNull(objEvent)) obj.onsetfocus.addHandler(gfn_comboSetFocus);

				var objEvent2 = obj.oneditclick.getHandler(0);
				if (gfn_isNull(objEvent2)) obj.oneditclick.addHandler(gfn_comboEditClick);								
			}
// 			if (obj.displayrowcount == -1)
// 			{
// 				obj.displayrowcount = 15;
// 			}
            break;

        case "[OBJECT MASKEDIT]":
            obj.clipmode = "excludespace";
            break;

        default:
            break;
    }
    return true;
}

 /**
 * @class Combo에 autoselect 처리
 * @param obj - obj
 * @param e - event 객체
 * @return 없음
 */  
function gfn_comboSetFocus(obj, e)
{
	obj.userCheck = "1";
	obj.setSelect();
}

 /**
 * @class Combo에 autoselect 처리
 * @param obj - obj
 * @param e - event 객체
 * @return 없음
 */  
function gfn_comboEditClick(obj, e)
{
	if (obj.userCheck == "1") 
	{
		obj.userCheck = "0";
		obj.setSelect();
	}
}

 /**
 * @class form에서 Key Down시 단축키들 지정
 * @param obj - obj
 * @param e - event 객체
 * @return 없음
 */
function gfn_formKeyDown(obj, e)
{
    //trace("gfn_formKeyDown : obj.name : " + obj.name + " / e.altKey : " + e.altKey + " / e.ctrlKey : " + e.ctrlKey + " / e.keycode : " + e.keycode);
    var obj = getFocus();
    var componentType = gfn_getObjType(obj);
    var strCssclass = obj.class;					// CSS Class

    // 제외할 콤포넌트들(버튼 ???)
    //if(componentType == "Button") return;

    // 엔터시 조회 : Cssclass가 enter일때는 조회로 리턴 처리
    //if (strCssclass == "enter") return;

    var objNextComponent = getNextComponent(obj,true);
    var nextComponentType = gfn_getObjType(objNextComponent);

    //trace("Obj Name : " + obj.name + " - objNextComponent : " + objNextComponent.name);

    if(componentType == "Grid")
    {
        // Ctrl + P	: Grid 인쇄
        if(e.ctrlKey == true && e.keycode == 80)
        {
			//인쇄 모듈 연결 by kksoo
			SCReport.viewGridReport(obj);
            //application.alert("준비중입니다.");
        }
        // Ctrl + C	: Cell clipboard 복사
        else if(e.ctrlKey == true && e.keycode == 67)
        {
            var v_clip = obj.getCellText(obj.currentrow, obj.currentcol);
            system.clearClipboard();
            system.setClipboard("CF_TEXT",v_clip);
        }
        // Ctrl + L	: Line clipboard 복사
        else if(e.ctrlKey == true && e.keycode == 76) {
            var v_clip = "";
            for ( var i = 0; i < obj.getCellCount("Body"); i++ )
            {
                v_clip += ", " + obj.getCellText(obj.currentrow, i);
            }
            system.clearClipboard();
            system.setClipboard("CF_TEXT",gfn_subStr(v_clip,2));
        }
        // Ctrl + A	: 전체 clipboard 복사
        else if(e.ctrlKey == true && e.keycode == 65) {
            system.clearClipboard();
            system.setClipboard("CF_TEXT",obj.getCsvData(false));
        }
        // Ctrl + V	: Paste
        else if(e.ctrlKey == true && e.keycode == 86) {
            gfn_gridPaste(obj, e);
        }
        // Ctrl + E	: 엑셀 다운로드
        else if(e.ctrlKey == true && e.keycode == 69) {
            gfn_exportExcel(obj);
        }
        // Ctrl + M	: Multi Sort
        else if(e.ctrlKey == true && e.keycode == 77) {
            gfn_gridMultiSort(obj);
        }
        // Ctrl + F	: Find
        else if(e.ctrlKey == true && e.keycode == 70) {
            gfn_gridFind(this, obj);
        }
        // Ctrl + T	: Filter
        else if(e.ctrlKey == true && e.keycode == 84) {
            gfn_gridFilter(this, obj);
        }
        // Enter 키	// 그리드의 textarea의 개행과 구분
        else if(e.ctrlKey == false && e.keycode == 13) {
            var bSuccess = obj.moveToNextCell();	// 수정이 가능한 다음 셀로 이동
            if(!bSuccess) objNextComponent.setFocus();	// 수정이 가능한 다음 셀 없을때 Next Comp로 이동
        }
    }

    // Enter 키
    if(e.keycode == 13 && componentType != "Grid")
    {
        // 현재 Component 기준
        if(componentType == "TextArea")
        {
            return;
        }
        else if(componentType == "Tab") {
            var objTemp = obj.components[tabindex];
            objTemp.setFocus();
        }
// 		else if(componentType == "Calendar") {
// 			// Data가 없을때는 팝업캘린더 실행
// 			if(gfn_isNull(obj.value))
// 			{
// 				obj.dropdown();
// 			}
// 			else {
// 				objNextComponent.setFocus();
// 			}
// 		}
        // Next Component 기준
        else if(nextComponentType == "Tab") {		// Tab은 필요할지 확인 필요
            var objTemp = objNextComponent.components[objNextComponent.tabindex];
            objTemp.setFocus();
        }
        else if(nextComponentType == "Combo") {
            objNextComponent.setFocus();
            objNextComponent.dropdown();
        }
        else {
            objNextComponent.setFocus();
        }
    }

    // 팝업에서 ESC 키 시 창닫기
    var objOpener = opener;
    if(e.keycode == 27 && gfn_isNull(objOpener) == false)
    {
        this.close();
    }
}

/**
 * @class 화면간의 parameter 설정
 * @param arrParam - 인자 array
 * @return 없음
 */
function gfn_setScreenParams(arrParam)
{
    av_ArrParam = arrParam;
}

/**
 * @class 화면간의 parameter 들의 전달값 가져옴
 * @param 없음
 * @return Array - 인자 array
 */
function gfn_getScreenParams()
{
    var returnArray = av_ArrParam;

    // 초기화
    av_ArrParam = new Array();

    return returnArray;
}

/**
 * @class MDI FrameSet 영역에 화면 생성
 * @param strMenuId - Menu Id
 * @param arrParam  - 인자 array
 * @return 없음
 */
function gfn_openMenu(strMenuId, arrParam)
{
    gfn_setScreenParams(arrParam);    	// 화면간의 parameter 설정
    gfn_addPage(strMenuId, arrParam);   // mdi 화면 생성
}

/**
 * @class MDI FrameSet 영역에 화면 생성.
 * @param strMenuId - Menu Id
 * @param arrParam  - 인자 array
 * @return ChildFrame Object
 */
function gfn_addPage(strMenuId, arrParam)
{
    if (gfn_isNull(strMenuId)) return;

    var fRow = gds_menu.findRow(gv_menuIdCol, strMenuId);
    if (fRow < 0) return;

    var strMenuNm   = gds_menu.getColumn(fRow, gv_menuNameCol);
    var strProgrmId = gds_menu.getColumn(fRow, gv_menuProgCol);
    var strProgrmLc = gds_menu.getColumn(fRow, gv_menuPrefixCol);
    var strParam    = gds_menu.getColumn(fRow, gv_paramCol);

    if (gfn_isNull(strProgrmLc)) return;

    // arrParam이 없으며 메뉴에 설정한 Param이 있으면 화면간의 parameter 설정
    if (gfn_isNull(arrParam) && !gfn_isNull(strParam))
    {
        arrParam = gfn_split(strParam,"@");	// 메뉴 등록시 @로 구분하여 등록
        gfn_setScreenParams(arrParam);
    }

    var strPageId = "WF_" + strMenuId;

    // Open 여부 체크
    var objPage = afrm_MDI.all[strPageId];
    var openRow = gds_openPage.findRow("formId", strPageId);

    afrm_Tab.form.tab_WorkTitle.class  = "tab_MDI";
    afrm_Tab.form.btn_home.class       = "btn_MDI_Home";

    // MDI 시
    if (!gfn_isNull(objPage) && openRow > -1)
    {
        // Intro 활성화 여부 체크
        if(!afrm_MDI.visible) {
            afrm_MDI.visible   = true;
            afrm_Intro.visible = false;
        }
        objPage.form.setFocus();

        // 이미열려있는 화면일 경우 화면간 interface Arg 존재시 호출
        var arrArg = gfn_getScreenParams();
        if (!gfn_isNull(arrArg))
        {
            objPage.form.div_work.fn_getScreenParams(arrArg);
        }
        return;
    }

    // SDI 팝업시
    if (gfn_isNull(objPage) && openRow > -1)
    {
        objPagePop = application.popupframes[strPageId + "_POP"];
        objPagePop.form.setFocus();

        // 이미열려있는 화면일 경우 화면간 interface Arg 존재시 호출
        var arrArg = gfn_getScreenParams();
        if (!gfn_isNull(arrArg))
        {
            objPagePop.form.div_work.fn_getScreenParams(arrArg);
        }
        return;
    }

    // Max Window Count 체크
    if (gds_openPage.getRowCount() > av_openWindowCnt - 1)
    {
        gfn_alert("msg.maxopen", av_openWindowCnt);	// 업무화면은 $1 개를 초과 할 수 없습니다.
        return;
    }
	
	// 전사구매 Max Window Count 체크 by kksoo  --> PC사양마다 차이가 있으므로 메모리 체크로 변경 --> 메모리 체크하지 않고 브라우저 오픈으로 변경
	//alert("gfn_addPage=" + strProgrmId + "," + gds_menu.getColumn(fRow, gv_menuPrefixCol));
	var strFormUrl = gds_menu.getColumn(fRow, gv_menuPrefixCol);
	if ( strFormUrl.indexOf(".jsp") > 0 || strFormUrl.indexOf(".html") > 0 || strFormUrl.indexOf("http://") >= 0  || strFormUrl.indexOf(".page?") >= 0 ) {
		/* 브라우저 오픈 윈도우로 처리하므로 막음 2015-09-29
		var nOpenPoCnt = 0;
		for (var i = 0; i < gds_openPage.getRowCount(); i++) {
			strFormUrl = gds_openPage.getColumn(i, gv_menuProgCol);
			if ( strFormUrl.indexOf(".jsp") > 0 || strFormUrl.indexOf(".html") > 0 || strFormUrl.indexOf("http://") >= 0 )
				nOpenPoCnt += 1;
		}
		if (nOpenPoCnt > av_openPoWindowCnt - 1)
		{
			gfn_alert("msg.maxopen.po", av_openPoWindowCnt);	// 전사구매 업무화면은 $1 개를 초과 할 수 없습니다.
			return;
		}
		*/
		
		if ( strFormUrl.indexOf("gateway.jsp") != -1 ) {
			//브라우저 오픈 윈도우로 처리하도록 함  2015-09-29
			var strEprocUrl = SCSysIf.makeEprocUrl (strFormUrl, true);
			var key = gfn_queryString(strFormUrl);
			//system.execBrowser(strEprocUrl);
			
			//return;
			// to-be
			// 기존 창에서 갱신
			// 2개 이상 application 실행중에는 첫번째 app에서만 정상 동작 / 두번쨰 app는 계속해서 신규창으로 뜸(no way; tobesoft)
			var str = "javascript:window.open('"+strEprocUrl+"','"+key["req_sys_cd"]+"_"+key["param"]+"')";	
			application.afrm_Left.form.web_link.url = "about:blank";
			application.afrm_Left.form.web_link.url = str;		
			return;
			
		}
		//alert(strFormUrl);
		if ( strFormUrl.indexOf("indexCP.page") != -1 ) {
			var strMaestroUrl = SCSysIf.makeMaestroUrl (strFormUrl, arrParam, true);
			var key = gfn_queryString(strFormUrl);
			
			//return;
			// to-be
			// 기존 창에서 갱신
			// 2개 이상 application 실행중에는 첫번째 app에서만 정상 동작 / 두번쨰 app는 계속해서 신규창으로 뜸(no way; tobesoft)
			var str = "javascript:window.open('"+strMaestroUrl+"','"+key["req_sys_cd"]+"_"+key["OPENID"]+"')";	
			application.afrm_Left.form.web_link.url = "about:blank";
			application.afrm_Left.form.web_link.url = str;		
			return;
			
		}
		
	}
	
	
	/* 메모리 체크하지 않도록 수정 by kksoo
	//메모리를 검사하여 화면을 오픈할 수 있는지 처리 by kksoo
	var strFormUrl = gds_menu.getColumn(fRow, gv_menuPrefixCol);
	var blnIsPo = false;
	if ( strFormUrl.indexOf(".jsp") > 0 || strFormUrl.indexOf(".html") > 0 || strFormUrl.indexOf("http://") >= 0 )
		blnIsPo = true;
	
	if (!gfn_checkFreeMemory(blnIsPo, strFormUrl)) return;
	*/
	
    // 메뉴ID, 프로그램ID 전역변수에 할당. 문제점이 있어 이곳에서 재설정함 : by kksoo
    gv_menuId = strMenuId;
    gv_progrmId = strProgrmId;
    gv_helpId = gds_menu.getColumn(fRow, gv_helpIdCol);
	//trace(gv_menuId + "," + gv_progrmId + "," + gv_helpId);
	
    // Intro 활성화 여부 체크
    if(!afrm_MDI.visible){
        afrm_MDI.visible = true;
        afrm_Intro.visible  = false;
    }

    // ChildFrame 생성
    var objChildFrame = new ChildFrame();

    objChildFrame.init(strPageId, 0, 0, av_divWidth, av_divHeight, "frame::WorkFrame.xfdl");
	
    // Open Form 정보 인자 전달 ...
    objChildFrame.arguments = [];
    objChildFrame.arguments["ARG_MENU_ID"]      = strMenuId;
    objChildFrame.arguments["ARG_MENU_NM"]      = strMenuNm;
    
    
    //김재섭 수정.... 외부 연동 연결 인 경우에 대한 처리.
    if ( strProgrmLc.indexOf(".jsp") > 0 || strProgrmLc.indexOf(".html") > 0 || strProgrmLc.indexOf("http://") >= 0 )
    {
		objChildFrame.arguments["ARG_FORM_PREFIX"]  = strMenuId; //strProgrmLc;
		objChildFrame.arguments["ARG_FORM_URL"]     = strProgrmLc;
    }
    else 
    {
		//김재섭 수정.... DB에서 조회한 결과는 U_TTTT:TTTTT.xfdl 형태로 가져와서 변경한다.
		var tmp = strProgrmLc.split("::");   
		objChildFrame.arguments["ARG_FORM_PREFIX"]  = tmp[0];
		objChildFrame.arguments["ARG_FORM_URL"]     = tmp[1];
    }
    
// // // //     var tmp = strProgrmLc.split("::");   
// // // //     
// // // //     //objChildFrame.arguments["ARG_FORM_PREFIX"]  = strProgrmLc;
// // // //     //objChildFrame.arguments["ARG_FORM_URL"]     = strProgrmId;
// // // // 	try {
// // // // 		objChildFrame.arguments["ARG_FORM_PREFIX"]  = tmp[0];
// // // // 		objChildFrame.arguments["ARG_FORM_URL"]     = tmp[1];
// // // // 	}
// // // // 	catch (e) {
// // // // 		objChildFrame.arguments["ARG_FORM_PREFIX"]  = strProgrmLc;
// // // // 		objChildFrame.arguments["ARG_FORM_URL"]     = tmp;
// // // // 	}


    if ( av_openStatus == "maximize" ) {
        objChildFrame.showtitlebar     = false;
        objChildFrame.openstatus       = "maximize";
        objChildFrame.style.border     = "0 none transparent";
        objChildFrame.style.bordertype = "normal 0 0";
        //objChildFrame.style.background = "transparent";
    } else {
        objChildFrame.showtitlebar     = true;
        objChildFrame.openstatus       = av_openStatus;
        
		if(g_SystemId == "SPOON" || g_SystemId == "FICS")
		{
			objChildFrame.style.border = "2 solid #515d6f";        
			objChildFrame.titlebar.style.background = "#696cc3";
			objChildFrame.titlebar.style.border = "0 none, 0 none, 1 solid #5a5daf, 0 none"; 
		}
		else {   
			objChildFrame.style.border = "2 solid #515d6f";        
			objChildFrame.titlebar.style.background = "#02a7ad";
			objChildFrame.titlebar.style.border = "0 none, 0 none, 1 solid #48888b, 0 none";
		}

//         objChildFrame.style.border     = "1 solid #898989";
//         objChildFrame.style.bordertype = "round 5 5";
        //objChildFrame.style.background = "#ffffff";
    }

    objChildFrame.resizable        = true;
    objChildFrame.titletext        = strMenuNm;

    afrm_MDI.addChild(strPageId, objChildFrame);

    // Left 숨김처리
    afrm_Left.form.fn_hiddenLeft(true);

    objChildFrame.show();
    objChildFrame.activate();

    return objChildFrame;
}

/**
 * @class 메모리가 부족한지 검사하여 화면을 오픈할 수 있는지 처리.
 * @param blnIsPo      - 전사구매 화면 여부
 * @param strFormUrl   - 오픈할 화면 URL
 * @return 오픈 가능여부
 */
function gfn_checkFreeMemory (blnIsPo, strFormUrl)
{
	//메모리가 부족한지 검사하여 처리 by kksoo
	var nFreeP = system.getMemoryStatus( "FreePhysical" )/1024; // 사용가능한 물리메모리크기 K byte
	var nFreeV = system.getMemoryStatus( "FreelVirtual" )/1024; // 사용가능한 가상메모리크기 K byte
	var nNeedMem;
	//trace("memory : " + nFreeP + "," + nFreeV + "," + strFormUrl);
	//alert("memory : " + nFreeP + "," + nFreeV + "," + strFormUrl);
	
	if (blnIsPo) nNeedMem =  200000; else nNeedMem =  100000;	//200M, 100M
	
	if (nFreeV > 0 && nFreeV > nNeedMem)	 
		return true;
	else if (nFreeV == 0 && nFreeP > nNeedMem)
		return true;
	else {
		if (!blnIsPo)
			gfn_alert("msg.mem.lack");	// 메모리가 부족하여 화면을 열 수 없습니다.@사용하지 않는 프로그램을 종료하고 사용하십시오.
		else {
			var retValue = gfn_confirm("confirm.mem.lack.po");	// 메모리가 부족하여 전사구매 화면을 열 수 없습니다.@사용하지 않는 프로그램을 종료하고 사용하십시오.@전사구매 화면을 별도의 브라우저로 여시겠습니까?
			if (retValue) {
				//호출 Url을 생성한다.
				var strEprocUrl = SCSysIf.makeEprocUrl (strFormUrl, true);
				system.execBrowser(strEprocUrl);
			}			
		}	
		return false;
	}
}

/**
 * @class MDI FrameSet 영역에 화면 생성.
 * @param strForm   - Form File 명
 * @param strPrefix - Prefix 명
 * @param strParam  - Parameter
 * @param strMenuNm - 메뉴명
 * @return ChildFrame Object
 */
function gfn_openMenuForm(strForm, strPrefix, strParam, strMenuNm)
{
    if (gfn_isNull(strForm)) return;
    if (gfn_isNull(strPrefix)) return;
    if (gfn_isNull(strMenuNm)) return;

    // parameter 존재시
    if (!gfn_isNull(strParam))
    {
        if ( strParam instanceof Object )
        {
            // 화면간의 parameter 설정
            gfn_setScreenParams(strParam);
        }
        // 기존 Miplatform 화면
        else {
            strParam = gfn_split(strParam,"|");
            gfn_setScreenParams(strParam);
        }
    }

    var strProgrmLc = strPrefix + "::" + strForm;
    if (gfn_isNull(strProgrmLc)) return;

    var strPageId = "WF_" + strForm;
	var oRow = gds_openPage.findRow("prgId", strForm);

	if (oRow > -1) {
		strPageId = "WF_" + gds_openPage.getColumn(oRow, "menuId");
	}

    // Open 여부 체크
    var objPage = afrm_MDI.all[strPageId];
    var openRow = gds_openPage.findRow("formId", strPageId);

    // MDI 시
    if (!gfn_isNull(objPage) && openRow > -1)
    {
        // Intro 활성화 여부 체크
        if(!afrm_MDI.visible) {
            afrm_MDI.visible   = true;
            afrm_Intro.visible = false;
        }
        objPage.form.setFocus();

        // 이미열려있는 화면일 경우 화면간 interface Arg 존재시 호출
        var arrArg = gfn_getScreenParams();
        if (!gfn_isNull(arrArg))
        {
            objPage.form.div_work.fn_getScreenParams(arrArg);
        }
        return;
    }

    // SDI 팝업시
    if (gfn_isNull(objPage) && openRow > -1)
    {
        objPagePop = application.popupframes[strPageId + "_POP"];
        objPagePop.form.setFocus();

        // 이미열려있는 화면일 경우 화면간 interface Arg 존재시 호출
        var arrArg = gfn_getScreenParams();
        if (!gfn_isNull(arrArg))
        {
            objPagePop.form.div_work.fn_getScreenParams(arrArg);
        }
        return;
    }

    // Max Window Count 체크
    if (gds_openPage.getRowCount() > av_openWindowCnt - 1)
    {
        gfn_alert("msg.maxopen", av_openWindowCnt);	// 업무화면은 $1 개를 초과 할 수 없습니다.
        return;
    }

	// 여기서 전사구매 Max Window Count 체크는 불가 by kksoo


    // Intro 활성화 여부 체크
    if(!afrm_MDI.visible){
        afrm_MDI.visible = true;
        afrm_Intro.visible  = false;
    }

    // ChildFrame 생성
    var objChildFrame = new ChildFrame();

    objChildFrame.init(strPageId, 0, 0, av_divWidth, av_divHeight, "frame::WorkFrame.xfdl");

    // Open Form 정보 인자 전달 ...
    objChildFrame.arguments = [];
    objChildFrame.arguments["ARG_MENU_ID"]     = strForm;
    objChildFrame.arguments["ARG_MENU_NM"]     = strMenuNm;
    objChildFrame.arguments["ARG_FORM_PREFIX"] = strPrefix;
    objChildFrame.arguments["ARG_FORM_URL"]    = strForm;
    try {
		objChildFrame.arguments["ARG_PARENT_MENU_ID"] = (arguments.length>4?arguments[4]:parent.fn_getMenuId());
	}
	catch(e) {
		objChildFrame.arguments["ARG_PARENT_MENU_ID"] = (arguments.length>4?arguments[4]:fn_getMenuId());
	}

    if ( av_openStatus == "maximize" ) {
        objChildFrame.showtitlebar     = false;
        objChildFrame.openstatus       = "maximize";
        objChildFrame.style.border     = "0 none transparent";
        objChildFrame.style.bordertype = "normal 0 0";
        //objChildFrame.style.background = "transparent";
    } else {
        objChildFrame.showtitlebar     = true;
        objChildFrame.openstatus       = av_openStatus;
        objChildFrame.style.border     = "1 solid #898989";
        objChildFrame.style.bordertype = "round 5 5";
        //objChildFrame.style.background = "#ffffff";
    }

    objChildFrame.resizable        = true;
    objChildFrame.titletext        = strMenuNm;

    afrm_MDI.addChild(strPageId, objChildFrame);

    objChildFrame.show();
    objChildFrame.activate();
	
    return objChildFrame;
}

/**
 * @class MDI FrameSet 영역에 화면 생성.
 * @param strForm   - Form File 명
 * @param strPrefix - Prefix 명
 * @param strParam  - Parameter
 * @param strMenuNm - 메뉴명
 * @return ChildFrame Object
 */
function gfn_openMenuForm_date(strForm, strPrefix, strParam, strMenuNm, strDate)
{
    if (gfn_isNull(strForm)) return;
    if (gfn_isNull(strPrefix)) return;
    if (gfn_isNull(strMenuNm)) return;

    // parameter 존재시
    if (!gfn_isNull(strParam))
    {
        if ( strParam instanceof Object )
        {
            // 화면간의 parameter 설정
            gfn_setScreenParams(strParam);
        }
        // 기존 Miplatform 화면
        else {
            strParam = gfn_split(strParam,"|");
            gfn_setScreenParams(strParam);
        }
    }

    var strProgrmLc = strPrefix + "::" + strForm;
    if (gfn_isNull(strProgrmLc)) return;

    var strPageId = "WF_" + strForm;
	var oRow = gds_openPage.findRow("prgId", strForm);

	if (oRow > -1) {
		strPageId = "WF_" + gds_openPage.getColumn(oRow, "menuId");
	}

    // Open 여부 체크
    var objPage = afrm_MDI.all[strPageId];
    var openRow = gds_openPage.findRow("formId", strPageId);

    // MDI 시
    if (!gfn_isNull(objPage) && openRow > -1)
    {
        // Intro 활성화 여부 체크
        if(!afrm_MDI.visible) {
            afrm_MDI.visible   = true;
            afrm_Intro.visible = false;
        }
        objPage.form.setFocus();

        // 이미열려있는 화면일 경우 화면간 interface Arg 존재시 호출
        var arrArg = gfn_getScreenParams();
        if (!gfn_isNull(arrArg))
        {
            objPage.form.div_work.fn_getScreenParams(arrArg);
        }
        return;
    }

    // SDI 팝업시
    if (gfn_isNull(objPage) && openRow > -1)
    {
        objPagePop = application.popupframes[strPageId + "_POP"];
        objPagePop.form.setFocus();

        // 이미열려있는 화면일 경우 화면간 interface Arg 존재시 호출
        var arrArg = gfn_getScreenParams();
        if (!gfn_isNull(arrArg))
        {
            objPagePop.form.div_work.fn_getScreenParams(arrArg);
        }
        return;
    }

    // Max Window Count 체크
    if (gds_openPage.getRowCount() > av_openWindowCnt - 1)
    {
        gfn_alert("msg.maxopen", av_openWindowCnt);	// 업무화면은 $1 개를 초과 할 수 없습니다.
        return;
    }

	// 여기서 전사구매 Max Window Count 체크는 불가 by kksoo


    // Intro 활성화 여부 체크
    if(!afrm_MDI.visible){
        afrm_MDI.visible = true;
        afrm_Intro.visible  = false;
    }

    // ChildFrame 생성
    var objChildFrame = new ChildFrame();

    objChildFrame.init(strPageId, 0, 0, av_divWidth, av_divHeight, "frame::WorkFrame.xfdl");

    // Open Form 정보 인자 전달 ...
    objChildFrame.arguments = [];
    objChildFrame.arguments["ARG_MENU_ID"]     = strForm;
    objChildFrame.arguments["ARG_MENU_NM"]     = strMenuNm;
    objChildFrame.arguments["ARG_FORM_PREFIX"] = strPrefix;
    objChildFrame.arguments["ARG_FORM_URL"]    = strForm;
    try {
		objChildFrame.arguments["ARG_PARENT_MENU_ID"] = (arguments.length>4?arguments[4]:parent.fn_getMenuId());
	}
	catch(e) {
		objChildFrame.arguments["ARG_PARENT_MENU_ID"] = (arguments.length>4?arguments[4]:fn_getMenuId());
	}

    if ( av_openStatus == "maximize" ) {
        objChildFrame.showtitlebar     = false;
        objChildFrame.openstatus       = "maximize";
        objChildFrame.style.border     = "0 none transparent";
        objChildFrame.style.bordertype = "normal 0 0";
        //objChildFrame.style.background = "transparent";
    } else {
        objChildFrame.showtitlebar     = true;
        objChildFrame.openstatus       = av_openStatus;
        objChildFrame.style.border     = "1 solid #898989";
        objChildFrame.style.bordertype = "round 5 5";
        //objChildFrame.style.background = "#ffffff";
    }

    objChildFrame.resizable        = true;
    objChildFrame.titletext        = strMenuNm;
    //날짜값 넘기기 추가(2016.03.24)
    gv_ReturnDate                  = strDate;

    afrm_MDI.addChild(strPageId, objChildFrame);

    objChildFrame.show();
    objChildFrame.activate();
	
    return objChildFrame;
}

 /**
 * @class 메세지 값을 문자열 치환하여 메세지 내용을 조회한다.
 * @param strMsgId - 메세지ID
 * @param sArgs  - 문자(아이디^패스워드)
 * @return string 메세지
 */
function gfn_getMessage(strMsgId, sArgs)
{
    var strTxtPrefix = "$";
    var sRtnMsg      = "";
    strMsgId = strMsgId.toString();

    if (gfn_isNull(strMsgId))
    {
        return sRtnMsg;
    }

    // 메시지 코드가 gds_message 없을때
    var nRow = gds_message.findRow("ID", strMsgId);
    if (nRow < 0)
    {
        // 줄 바꿈 처리
        sRtnMsg = strMsgId.replace("@", String.fromCharCode(13) + String.fromCharCode(10));
        return sRtnMsg;
    }

    // 메시지 코드로 메시지를 가져와 줄 바꿈 처리
    var sRtnMsg = gds_message.getColumn(nRow, "TEXT");
    sRtnMsg = sRtnMsg.replace("@", String.fromCharCode(13) + String.fromCharCode(10));

    // sArgs가 없을때는
    if (gfn_isNull(sArgs))
    {
        return sRtnMsg;
    }
    // sArgs가 있을때는 변수값 치환
    else
    {
        var aArgs = gfn_split(sArgs,"^");
        for (var i = 0; i < aArgs.length; i++)
        {
            var strVal  = aArgs[i];
            sRtnMsg = gfn_replace(sRtnMsg, strTxtPrefix + (i + 1),  strVal);
        }
    }

    return sRtnMsg;
}

 /**
 * @class 메세지 코드에 따른 실제 메세지값을 찾은 후 팝업창으로 해당 값을 보여주는 함수
 * @param strMsgId - 메세지ID
 * @param sArgs  - 문자(아이디^패스워드)
 * @param strType  - Message Type(A - alert, C - confirm, C1 - 버튼3개)
 * @return 없음
 */
function gfn_alert(strMsgId, sArgs, strType)
{
    if(gfn_isNull(strType)) strType = "A";
    var strMsg = gfn_getMessage(strMsgId, sArgs);

    // Popup창 사용 시
    gfn_message(strType, strMsg);

    // 기본 alert 사용 시
    // QuickView 실행이 아니고 Frame에서 호출시(Top 프레임에서 값 변경)
// 	if (gv_mdi == "Y")
// 	{
// 		application.alert(strMsg);
// 	}
// 	else {
// 		alert(strMsg);
// 	}
}

/**
 * @class 공통 확인창
 * @param strKey - Message Key
 * @param strArg - Message Argument(","로 구분)
 * @param strType  - Message Type(A - alert, C - confirm, U+유형 - 사용자 정의 유형:U1)
 * @return true/false
 */
function gfn_confirm(strMsgId, sArgs, strType)
{
    if(gfn_isNull(strType)) strType = "C";
    var strMsg = gfn_getMessage(strMsgId, sArgs);

    // Popup창 사용 시
    return gfn_message(strType, strMsg);

    // 기본 confirm 사용 시
    // QuickView 실행이 아니고 Frame에서 호출시(Top 프레임에서 값 변경)
// 	if (gv_mdi == "Y")
// 	{
// 		rtnVal = application.confirm(strMsg);
// 		return rtnVal;
// 	}
// 	else {
// 		rtnVal = confirm(strMsg);
// 		return rtnVal;
// 	}
}

/**
 * @class 메시지 창
 * @param strType  - Message Type(A - alert, C - confirm, U1 - 버튼3개)
 * @param msg      - Message
 * @param title    - 타이틀
 * @return 결과값
 */
function gfn_message(strType, strMsg)
{
    if(gfn_isNull(strType)) strType = "A";

    var objArgument = {type:strType, msg:strMsg};

    //팝업id 중복 방지
    var strRequstTime = Math.random() * 100000000000000000;

    var rtn = gfn_dialog("MSG"+strRequstTime, "cmn_static::MsgPopUp.xfdl", objArgument, null, null, null, null, null, false, false, null);
    //var rtn = gfn_dialog("MSG", "cmn::MsgPopUp.xfdl", objArgument, null, null, null, null, null, false, false, null);

    return rtn;
}

/**
 * @class 팝업화면을 호출한다.
 * @param strId      - Dialog ID
 * @param strURL     - Form URL
 * @param objArgument- Dialog 로 전달될 Argument - {strMessage1:'E'}
 * @param nWidth     - Form Width
 * @param nHeight    - Form Height
 * @param strStyle   - Miplatform 컨버젼 소스로 추가(미사용)
 * @param nLeft      - Form Left Position
 * @param nTop       - Form TOP Position
 * @param isModeless - 9번째 true 면 Dialog 를 Modeless로 띄운다.
 * @param bShowTitle - Form Title 을 표시 할지 여부
 * @param strAlign   - Dialog 의 위치 - '-1' : 모니터의 중앙
 *                   - 'Bottom Left' : Click 된 마우스 위치의 좌측 하단 정렬
 *                   - 'Top Left' : Click 된 마우스 위치의 좌측 상단 정렬
 *                   - 'Bottom Right' : Click 된 마우스 위치의 우측 하단 정렬
 *                   - 'Top Right' : Click 된 마우스 위치의 우측 상단 정렬
 *                   - 'offset' : Click 된 마우스 위치에서 nTop,nLeft만큼 들여쓰기
 *                   - 'absolute' : 입력된 좌표를 Screen 좌표로 인식
 *                   - '0' : 사용자 임의 정렬
 * @param bResizable - 팝업 리사이즈 여부
 * @return Variant
 */
function gfn_dialog(strId, strURL, objArgument, nWidth, nHeight, strStyle, nLeft, nTop, isModeless, bShowTitle, strAlign, bResizable)
{
    if(gfn_isNull(strId))    strId    = strURL;
    if(gfn_isNull(nWidth))   nWidth   = -1;
    if(gfn_isNull(nHeight))  nHeight  = -1;
    if(gfn_isNull(strStyle)) strStyle = "";
    if(gfn_isNull(nLeft))    nLeft    = -1;
    if(gfn_isNull(nTop))     nTop     = -1;

    if(gfn_isNull(isModeless)) isModeless = false;
    if(gfn_isNull(bShowTitle)) bShowTitle = true;
    if(gfn_isNull(strAlign))   strAlign   = "-1";
    if(gfn_isNull(bResizable)) bResizable = false;
    

    // Modeless의 경우 창이 이미 떠있으면 포커스만 이동
    if ( isModeless )
    {
        var objPopup = application.popupframes[strId];

        if ( !gfn_isNull(objPopup) ) {
            if ( objPopup.openstatus == "minimize" ) {
                objPopup.openstatus = "normal";
            }

            objPopup.form.setFocus();
            return;
        }
    }
    
    var sFrameName = getOwnerFrame().name;
    
    if (sFrameName == "topFrame" || sFrameName == "bottomFrame")	//수정 by kksoo
    {
		var objParentFrame = application.mainframe;
    }
    else {
		var objParentFrame = getOwnerFrame();
    }

    var newChild = null;
    var nRight  = 0;
    var nBottom = 0;
    var bAutoSize = false;
    if ( nLeft < 0 )    nLeft = system.cursorx;
    if ( nTop < 0 )     nTop  = system.cursory;
    if ( nWidth < 0 && nHeight < 0)
    {
        bAutoSize = true;
    }

    newChild = new ChildFrame();

    if (strAlign == "Bottom Left") {
        nLeft   = system.cursorx - nWidth;
        nTop    = system.cursory - 5;
        nRight  = system.cursorx;
        nBottom = nTop + nHeight;
    } else if (strAlign == "Top Left") {
        nLeft   = system.cursorx - nWidth;
        nTop    = system.cursory - nHeight;
        nRight  = system.cursorx;
        nBottom = system.cursory - 5;
    } else if (strAlign == "Bottom Right") {
        nLeft   = system.cursorx;
        nTop    = system.cursory - 5;
        nRight  = nLeft + nWidth;
        nBottom = nTop + nHeight;
    } else if (strAlign == "Top Right") {
        nLeft   = system.cursorx;
        nTop    = system.cursory - nHeight;
        nRight  = nLeft + nWidth;
        nBottom = system.cursory - 5;
    } else if (strAlign == "-1") {
        newChild.openalign.halign = "center";
        newChild.openalign.valign = "center";
        nRight  = nLeft + nWidth;
        nBottom = nTop + nHeight;
    } else if (strAlign == "offset") {
        nLeft  += system.cursorx;
        nTop   += system.cursory;
        nRight  = nLeft + nWidth;
        nBottom = nTop + nHeight;
    } else if (strAlign == "absolute") {
        nRight  = nLeft + nWidth;
        nBottom = nTop + nHeight;
    } else {
        nLeft  += mainframe.position.left;
        nTop   += mainframe.position.top;
        nRight  = nLeft + nWidth;
        nBottom = nTop + nHeight;
    }

    // 화면 밖으로 벗어나는 Dialog 방지
    var nMonitor = system.getMonitorIndex((nLeft+nRight)/2,(nTop+nBottom)/2);
    var rectScreen = system.getScreenRect(nMonitor);

    if(nBottom > rectScreen.bottom) {
        nTop = rectScreen.bottom - (nBottom - nTop);
        nBottom = rectScreen.bottom;
    }

    if(nTop < rectScreen.top) {
        nBottom = rectScreen.top + (nBottom - nTop);
        nTop = rectScreen.top;
    }

    if(nRight > rectScreen.right) {
        nLeft = rectScreen.right - (nRight - nLeft);
        nRight = rectScreen.right;
    }

    if(nLeft < rectScreen.left) {
        nRight = rectScreen.left + (nRight - nLeft);
        nLeft = rectScreen.left;
    }

    newChild.init(strId, nLeft, nTop, nRight, nBottom, strURL);

    if (!bShowTitle) newChild.showtitlebar = false;

    newChild.bordertype = "normal";

    // SPOON / FICS 일때
    if(g_SystemId == "SPOON" || g_SystemId == "FICS")
    {
        newChild.style.border = "2 solid #515d6f";
        newChild.titlebar.style.background = "#696cc3";
        newChild.titlebar.style.border = "0 none, 0 none, 1 solid #5a5daf, 0 none";
    }
    // IFIS 일때
    else {    
        //newChild.style.border = "2 solid #515d6f"; //이부분이 있으면 Dialog 화면의 시간이 소요되는 로직이 있을경우 line이 도출되는 현상
        newChild.style.border = "0 none";
        newChild.titlebar.style.background = "#02a7ad";
        newChild.titlebar.style.border = "0 none, 0 none, 1 solid #48888b, 0 none";
    }

    newChild.autosize  = bAutoSize;
	newChild.resizable = bResizable;
    // Modaless
    if (isModeless == true)
    {
        newChild.style.border = "2 solid #515d6f";
        newChild.titlebar.style.background = "#6f7a8c";
        newChild.titlebar.style.border = "0 none, 0 none, 1 solid #697588, 0 none";

        return newChild.showModeless(null, objArgument);
    }
    // Modal
    else {
 		try
 		{
			if (typeof(objArgument) == "string") {
				objArgument = {IS_SHOW_MODAL:"TRUE"};
			}
			else {
				objArgument.IS_SHOW_MODAL = "TRUE";
			}
 		}
 		catch (e)
 		{
 			objArgument = {IS_SHOW_MODAL:"TRUE"};
 		}
		
        var rtn = newChild.showModal(objParentFrame, objArgument);
        return rtn;
    }
}

/**
 * @class 팝업에서 Opener에 전달할 Array 생성
 * @param objDs - Return할 Dataset
 * @return Object
 */
function gfn_setPopupArray(objDs)
{
    if(gfn_isNull(objDs)) return;

    if(objDs.rowposition < 0)
    {
        gfn_alert("msg.noselect", "데이터");	// $1 을(를) 선택해 주십시요.
        return;
    }

    var arrRtn = new Array();
    var strColId = "";

    for ( var i=0; i<objDs.getColCount(); i++ )
    {
        strColId = objDs.getColID(i);
        arrRtn[strColId] = objDs.getColumn(objDs.rowposition, strColId);
    }

    return arrRtn;
}

/**
 * @class Miplatform String Argument를 Object으로 변환하여 리턴한다.
 * @param sArg - Miplatform String Argument ("fa_chkIRIS=123 fa_chk=555")
 * @return Object
 */
function gfn_argStringToObject(sArg)
{
    var objArg     = {};
    var arrArgList = new Array();
    var arrArg     = new Array();
    var strObj     = "";

    arrArgList = gfn_split(sArg," ");
    for (var i = 0; i < arrArgList.length ; i++ )
    {
        arrArg = arrArgList[i].split("=");
        if(gfn_isNull(arrArg)) continue;	// 공백 제거

        if (i == 0) {
            strObj = "{" + arrArg[0] + ":" + wrapQuote(arrArg[1]);
        } else {
            strObj += ", " + arrArg[0] + ":" + wrapQuote(arrArg[1]);
        }
    }
    strObj += "}";
    //trace("strObj : "+ strObj);

    objArg = gfn_stringToObject(strObj);
    return objArg;
}

/**
 * @class String을 Object으로 변환하여 리턴한다.
 * @param strObj - String
 * @return Object
 */
function gfn_stringToObject(strObj)
{
    return eval("(" + strObj + ")");
}

/**
 * @class 현재 화면명 가져오기
 * @return String - 화면명
 */
function gfn_getFormName()
{
    var sMenuName;
    // MDI창으로 호출시
    if ( gv_mdi == "Y" )
    {
        var row = gds_menu.findRow(gv_menuIdCol, gv_menuId);
        sMenuName = gds_menu.getColumn(row, gv_menuNameCol);
    }
    else{
        sMenuName = this.titletext;
    }
    return sMenuName;
}

/**
 * @class 이미지파일로 저장
 * @param obj         - 저장할 object
 * @param strFileName - 저장할 파일명
 * @param bExcute     - 저장 후 실행여부
 * @return 없음
 */
function gfn_saveToImage(obj, strFileName, bExcute)
{
    // Create FileDialog Object
    var fopendlg  = new FileDialog();

    fopendlg.filter = "PNG(*.png)|*.png|BMP(*.bmp)|*.bmp|JPG(*.jpg)|*.jpg|";

    fopendlg.defaultextension = true;

    // Choose file to save
    var vfile = fopendlg.open("Save To Image", FileDialog.SAVE, "%MYDOCUMENT%", strFileName);

    var strSaveFileName = "";
    var bSucc = false;

    var fileType = {
        "0":"PNG"
        ,"1":"BMP"
        ,"2":"JPG"
    };


    if ( vfile )
    {
        //strSaveFileName = vfile.fullpath + ".png";

        strSaveFileName = vfile.fullpath;

        var extension = strSaveFileName.substr(strSaveFileName.lastIndexOf(".")+1, strSaveFileName.length).toUpperCase();

        if(!(extension=="PNG"||extension=="BMP"||extension=="JPG")){
            strSaveFileName = strSaveFileName+"."+fileType[fopendlg.filterindex];
        }

        bSucc = obj.saveToImage(strSaveFileName, fileType[fopendlg.filterindex]);
    }

    if ( bSucc && bExcute ) {
        var extComm = new ExtCommon();
        extComm.executeProcess(strSaveFileName, "", "");
    }

    return bSucc;
}

/**
 * @class 내부 콤포넌트 활성/비활성 설정
 * @param obj - form object
 * @param bEnable - 활성 / 비활성
 * @return 없음
 */
function gfn_setEnableAll(obj, bEnable)
{
    var componentList = obj.components;
    var strType;
    var strSTyle;

    for ( var i=0; i<componentList.length; i++ ) {
        strType  = componentList[i].toString().toUpperCase();
        strName  = componentList[i].name;
        strSTyle = gfn_subStr(componentList[i].class,3,3);

        if ( strType == "[OBJECT IMAGEVIEWER]") continue;			// IMAGEVIEWER 제외
        if ( strType == "[OBJECT STATIC]") continue;				// STATIC 제외

        //trace("strType : " + strType + " / strName : " + strName);

        // TAB, TABPAGE, DIV, POPUPDIV
        if ( strType == "[OBJECT TAB]" || strType == "[OBJECT TABPAGE]"
             || strType == "[OBJECT DIV]" || strType == "[OBJECT POPUPDIV]" ) {
            gfn_setEnableAll(componentList[i], bEnable);
        }
        // Button
        else if ( strType == "[OBJECT BUTTON]" ) {
            componentList[i].enable = bEnable;
        }
        else {
            componentList[i].readonly = !bEnable;
        }
    }
}

 /**
 * @class Object의 type을 문자열로 얻어온다.
 * @param obj - type을 얻어올 Object
 * @return string Object의 type문자열(예 : "MainFrame", "ChildFrame", "Form", "Button",...)
 */
function gfn_getObjType(oObj)
{
    var sType;

    if (gfn_isNull(oObj))
    {
        return "";
    }

    sType = oObj.toString().valueOf().substr(1, 6);
    if (sType.toLowerCase() == "object")
    {
        return gfn_midString(oObj.toString().valueOf(), " ", "]");
    }

    return "";
}



 /**
 * @class 코드+명칭인 edit에서 keyDown 이벤트시 검색 팝업을 호출하거나, 값을 없애는 기능
 * @param obj - Object
 * @param e   - event
 * @param strTabObj   - Tab, Div object 문자열
 * @return string Object의 type문자열(예 : "MainFrame", "ChildFrame", "Form", "Button",...)
 */
function gfn_edtKeyDown(obj, e, strTabObj)
{
    if (gfn_isNull(obj)) return "";
    if (gfn_isNull(e))   return "";

    if(gfn_isNull(strTabObj) == false) strTabObj += ".";

    // Enter 키
    if(e.keycode == 13)
    {
        if ( (gfn_isNull(obj.text)) || eval(gfn_replace(obj.name,"edt_", "btn_")).userdata != obj.text )
        {
            eval(gfn_replace(obj.name,"edt_", "btn_")).click();
            //return false;		// gfn_formKeyDown 실행
        }
    }
    // Del 키
    else if(e.keycode == 46)
    {
        obj.value    = "";
        obj.userdata = "";
        //return true;		// gfn_formKeyDown 실행 안함
    }
}

/**
 * @class프로그램ID를 얻는다. by kksoo
 * (주의) Quick View로 실행한 경우는 절대 디렉토리로 표시된다.
 * @return 프로그램ID (패스와 .xfdl을 제외한 파일명)
 */
function gfn_getProgramId()
{
	var url = this.getOwnerFrame().formurl; // url
	if (url == "frame::WorkFrame.xfdl") {	//WorkFrame 내폼인 경우
		url = this.parent.div_work.url;
	}
	var nPos1 = url.lastIndexOf(":");	//Launch로 실행한 경우
	if (nPos1 == -1) {
		nPos1 = url.lastIndexOf("\\");	//Quick View로 실행한 경우
		if (nPos1 == -1) return "unknown";
	}
	var nPos2 = url.lastIndexOf(".xfdl");
	if (nPos2 == -1) return "unknown";
	return url.substring(nPos1+1, nPos2);
}]]></Script>
