<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[
function GetType(XobjTypeID){			//●●● Need Checking
	//등록된 Tag 이름을 Return 하는 Method 
	//return	XobjTypeID.components[XobjTypeID.name];
	return	XobjTypeID.toString().replace("object", "").trim("[").trim("]").trim();
}

function IsExistVar(XobjCompID,strVarID,bSearchAllFlag)
{
	if(IsNull(XobjCompID[strVarID])==true){
		return false;
	}else{
		if (typeof XobjCompID(strVarID) == "function")
			return false;
	}
	return;
}

function IsExistFunc(XobjCompID, strFuncID, bSearchAllFlag){
	     
	if(IsNull(XobjCompID[strFuncID])==true){
		return false;
	}else{
		if (typeof XobjCompID[strFuncID] == "function")
		return true;
	}
	return false;
}

//여기부터 EXPR관련 함수 ###############
function expr_GetPrevRow(){	
	//expr의 PrevRow 대체
	var rtnVal;
	
	if(rowidx == 0)
		rtnVal = rowidx;
	else
		rtnVal = rowidx - 1;
	
	return rtnVal;	
}

function expr_GetNextRow(){	
	//expr의 NextRow 대체
	var rtnVal;
	if(rowidx == getRowCount()-1)
		rtnVal = rowidx;
	else
		rtnVal = rowidx + 1;
	
	return rtnVal;	
}

function expr_GetFirstRow(){	
	//expr의 FirstRow 대체
	var nCount = getRowCount();
	
	if(nCount > 0)
		return	0;
	else
		return	-1;	
}

function expr_GetLastRow(){
	//expr의 LastRow 대체
	var nCount= getRowCount();
	
	if(nCount > 0)
		return nCount - 1;
	else
		return -1;	
}

function expr_GetRowTypeImg(nRow){	
	//expr의 RowType 대체	
	if(isNull(nRow)) nRow = currow;
	
	var rtnVal;
	var nRowType = getRowType(nRow);
	
	if(nRowType==1)
		rtnVal = "theme://convertImages/normal.png";
	else if(nRowType==2)
		rtnVal = "theme://convertImages/insert.bmp";
	else if(nRowType==4)
		rtnVal = "theme://convertImages/update.bmp";
	else if(nRowType==8)
		rtnVal = "theme://convertImages/delete.bmp";
	else if(nRowType==16)//ROWTYPE_GROUP
		rtnVal = "theme://convertImages/normal.png";
	else if(nRowType==0)//ROWTYPE_EMPTY
		rtnVal = "theme://convertImages/normal.png";	
				
	return rtnVal;			
}

function expr_GetRowType(nRow){	
	//expr의 RowType 대체	
	if(isNull(nRow)) nRow = currow;
	
	var rtnVal;
	var nRowType = getRowType(nRow);
	
	if(nRowType==1)
		rtnVal = "normal";
	else if(nRowType==2)
		rtnVal = "insert";
	else if(nRowType==4)
		rtnVal = "update";
	else if(nRowType==8)
		rtnVal = "delete";
	else if(nRowType==16)//ROWTYPE_GROUP
		rtnVal = "logical";
	else if(nRowType==0)//ROWTYPE_EMPTY
		rtnVal = "normal";
				
	return rtnVal;			
}
//여기까지 EXPR관련 함수 ###############

function MoveWindow(Xobject,nLeft,nTop,nWidth,nHeight){
	//component를 특정위치와 크기로 이동하는 Method
	var nRight = nLeft + nWidth;
	var nBottom = nTop + nHeight;
	
	Xobject.move(nLeft,nTop,nRight,nBottom);
}

function SetFont(Xobject,strFontName,nFontSize,strType){
	return Xobject.style.font = strFontName + "," + nFontSize + "," + strType;
}

function IsComposite(Xobject)
{	
	if(Xobject.components) {
		return true; // 하위콤포넌트 존재
	} else {
		return false; // 하위콤포넌트 존재하지 않음.
	}	
}

//##########################
//##### Dataset 관련 ######
//##########################

function AppendDataset(XDataObject,strDataset){
	//지정한 Dataset을 기존 Dataset에 추가하는 Method 
	//기존 Dataset의 마지막 레코드 다음에 추가됨
	var sType = strDataset.toString().valueOf().substr(1,6);
	if( sType.toLowerCase() == "object" )
	{
		XDataObject.appendData(strDataset);
	}
	else
	{
		XDataObject.appendData(eval(strDataset));
	}
}

function CaseAvgNF(XDataObject,strCmpExpr,strValExpr,nStart,nCnt){
	//Filter된 레코드를 포함한 Dataset의 해당 범위안에서 조건에 맞는
	//Record를 추출한 후, 계산식을 적용해 Record들의 평균값을 구하는 Method 
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		if(isNull(nStart)) nStart = 0;
		if(isNull(nCnt)) 
			nCnt = -1;
		else
			nCnt = nCnt + 1;
			
		rtnVal = XDataObject.getCaseAvg(strCmpExpr,strValExpr,nStart,nCnt);
		XDataObject.filter(strOrgFilter);	
	XDataObject.enableevent = true;
	
	return rtnVal;
}

function TotalCaseCount(XDataObject,strCmpExpr,nStart){
	//CaseCount 와 같음
	return CaseCount(XDataObject,strCmpExpr,nStart);
}

function CaseCountNF(XDataObject,strCmpExpr,nStart,nCnt){
	//Filter된 데이타를 포함한 Dataset의 해당 범위안에서 
	//조건식에 맞는 Record의 갯수를 구하는 Method
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		if(isNull(nStart)) nStart = 0;
		if(isNull(nCnt)) 
			nCnt = -1;
		else
			nCnt = nCnt + 1;
			
		rtnVal = XDataObject.getCaseCount(strCmpExpr,nStart,nCnt);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;
	
	return rtnVal;
}

function TotalAvg(XDataObject,strColID,nStart,nCnt){	
	//Filter된 레코드를 포함한 Dataset에서 요청한 Record 
	//범위에 대해 Column ID의 값에 대한 평균값이나 Record 별 
	//수식 수행 결과에 대한 평균값을 구하는 Method	
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		if(isNull(nStart)) nStart = 0;	
		if(isNull(nCnt)) 
			nCnt = -1;
		else
			nCnt = nCnt + 1;
			
		rtnVal = XDataObject.getAvgNF(strColID,nStart,nCnt);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;
	
	return rtnVal;
}

function Sort(XDataObject,strColList,bAscending){
			
	var sKeyString;
	var aColList;
		
	if(strColList.indexOf(":") > 0)//개별 소팅이 정의된 경우
	{
		sKeyString = "S:";
		
		aColList = strColList.split(",");
		for(var i=0; i<aColList.length; i++)
		{
			if(aColList[i].indexOf(":D") > 0)
			{
				sKeyString = sKeyString + "-" + rTrimCase(aColList[i], ":D");
			}
			else if(aColList[i].indexOf(":A") > 0)
			{
				sKeyString = sKeyString + "+" + rTrimCase(aColList[i], ":A");
			}
			else if(aColList[i].indexOf(":") == -1)//언급이 없는 것은 Ascending
			{
				sKeyString = sKeyString + "+" + rTrimCase(aColList[i], ":A");
			}
		}			
	}
	else
	{	//bAscending에 의해서 소팅 적용
		if(isNull(bAscending)) bAscending = true;
		if(bAscending)
		{
			sKeyString = "S:";
		
			aColList = strColList.split(",");
			for(var i=0; i<aColList.length; i++)
			{					
				sKeyString = sKeyString + "+" + aColList[i];					
			}
		}
		else
		{
			sKeyString = "S:";
		
			aColList = strColList.split(",");
			for(var i=0; i<aColList.length; i++)
			{					
				sKeyString = sKeyString + "-" + aColList[i];					
			}
		}
	}	
		
	XDataObject.keystring.current = sKeyString; //sorting 적용
}

function SetTotalColumn(XDataObject,nRow,strColID,varVal){//●●● Need Checking
	//Filter된 레코드를 포함한 Dataset에서 지정된 레코드 Index와 Column ID에 해당하는 값을 변경하는 Method 
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
		
	XDataObject.enableevent = false;
		XDataObject.filter("");
		XDataObject.setColumn(nRow,strColID,varVal);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;	 
}

function SetUpdate(XDataObject,bFlag){
	// Dataset의 Update Mode를 설정하는 Method 입니다
	if(!bFlag){
		XDataObject.updatecontrol = false;
	}else{
		XDataObject.updatecontrol = true;
	}
}

function CopyColumn(XDataObject,nToRow,nToCol,strDataset,nFromRow,nFromCol){
	//지정한 Dataset의 Record의 지정한 Column의 값으로 Dataset의 지정한 Record의 지정한 Column의 값을 변경하는 Method
	var sType = strDataset.toString().valueOf().substr(1,6);
	if( sType.toLowerCase() == "object" )
	{		
		XDataObject.copyRow(nToRow,strDataset,nFromRow, nToCol + "=" + nFromCol);
	}
	else
	{
		XDataObject.copyRow(nToRow,eval(strDataset),nFromRow, nToCol + "=" + nFromCol);
	}
}

function CopyToColumn(XDataObject,nFromRow,nFromCol,strDataset,nToRow,nToCol){
	//지정한 Dataset의 Record의 지정한 Column의 값으로 Dataset의 지정한 Record의 지정한 Column의 값을 변경하는 Method
	var sType = strDataset.toString().valueOf().substr(1,6);
	if( sType.toLowerCase() == "object" )
	{
		strDataset.copyRow(nToRow,XDataObject,nFromRow, nToCol + "=" + nFromCol);
	}
	else
	{
		eval(strDataset).copyRow(nToRow,XDataObject,nFromRow, nToCol + "=" + nFromCol);
	}
}

function CopyToRow(XDataObject,nFromRow,strDataset,nToRow,strColInfo){
	//지정한 Dataset에서 지정한 Record 전체를 복사해 DataSet의 지정한 Record를 변경하는 Method 
	if(isNull(strColInfo)) strColInfo = "";
	var sType = strDataset.toString().valueOf().substr(1,6);

	if( sType.toLowerCase() == "object" )
	{
		strDataset.copyRow(nToRow,XDataObject,nFromRow,strColInfo);
	}
	else
	{
		eval(strDataset).copyRow(nToRow,XDataObject,nFromRow,strColInfo);
	}
}

function CountNF(XDataObject, strCol){//●●● Need Checking	
	//Filter된 데이타를 포함한 Dataset에서 Logical Record를 제외한 유효한 Record 갯수를 얻어오는 Method 	
	if(isNull(strCol)) 
		return XDataObject.getCountNF(); 
	else
		return XDataObject.getCountNF(strCol); 
}

function GetFirstRow(XDataObject){
	//Dataset에 존재하는 첫번째 Record Index을 얻어오는 Method 
	// Dataset에 레코드가 존재하면 0, 그렇지 않으면 -1 
	var nCount = XDataObject.getRowCount();
	
	if(nCount > 0)
		return	0;
	else
		return	-1;	
}

function GetLastRow(XDataObject){
	//Dataset에 마지막 레코드의 Index를 얻어오는 Method
	var nCount= XDataObject.getRowCount();
	
	if(nCount > 0)
		return nCount - 1;
	else
		return -1;	
}

function GetNextRow(XDataObject){
	// Dataset의 현재 선택된 레코드의 다음 Record Index를 얻어오는 Method 
	var nRowCount = XDataObject.getRowCount();
	if(nRowCount > 0)
	{
		if(XDataObject.rowposition == XDataObject.getRowCount()-1)
			return XDataObject.rowposition;//Dataset이 마지막 레코드를 가리키고 있을 때는 NextRow는 CurRow와 같습니다
		else
			return XDataObject.rowposition + 1;
	}
	else	
		return 	-1;
}

function GetPrevRow(XDataObject){
	//Dataset의 현재 선택된 레코드의 이전 Record Index를 얻어오는 Method 	
	var nRowCount = XDataObject.getRowCount();
	if(nRowCount > 0)
	{
		if(XDataObject.rowposition == 0)
			return XDataObject.rowposition;//Dataset이 첫 레코드를 가리키고 있을 때는 PrevRow는 CurRow와 같습니다
		else
			return XDataObject.rowposition - 1;
	}
	else	
		return 	0;
}

function GetColIndex(XDataObject,strColID){
	//지정한 Column ID에 해당하는 Dataset의 Column Index를 가지고 오는 Method
	var rtnIndex;
	for(var i=0; i<XDataObject.getColCount(); i++)
	{		
		if(XDataObject.getColID(i).toLowerCase() == strColID.toLowerCase())
		{			
			rtnIndex = i;
			break;
		}
	}
	
	return rtnIndex;
}

function GetUpdate(XDataObject){
	
	applyData();
	if (XDataObject.updatecontrol) {
		if(XDataObject.getDeletedRowCount() > 0) return true;
	}
	if(XDataObject.findRowExpr("(getRowType(currow)==4)||(getRowType(currow)==2)") > -1) return true;
	if(XDataObject.getMaxNF("(getRowLevel(currow)==0 && getRowType(currow) > 1)") == true) return true;
    return false;
}

function GetRowType(XDataObject,nRow){
	var rtnVal;
	var nRowType = XDataObject.getRowType(nRow);
	
	if(nRowType==1)
		rtnVal = "normal";
	else if(nRowType==2)
		rtnVal = "insert";
	else if(nRowType==4)
		rtnVal = "update";
	else if(nRowType==8)
		rtnVal = "delete";
	else if(nRowType==16)//ROWTYPE_GROUP
		rtnVal = "logical";
	else if(nRowType==0)//ROWTYPE_EMPTY
		rtnVal = "normal";	
				
	return rtnVal;
}

function GetRowTypeNF(XDataObject,nRow){
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
		
	XDataObject.enableevent = false;
		XDataObject.filter("");
		var nRowType = XDataObject.getRowType(nRow);		
		XDataObject.filter(strOrgFilter);		
	XDataObject.enableevent = true;	
	 
	if(nRowType==1)
		rtnVal = "normal";
	else if(nRowType==2)
		rtnVal = "insert";
	else if(nRowType==4)
		rtnVal = "update";
	else if(nRowType==8)
		rtnVal = "delete";
	else if(nRowType==16)//ROWTYPE_GROUP
		rtnVal = "logical";
	else if(nRowType==0)//ROWTYPE_EMPTY
		rtnVal = "normal";		
	
	return rtnVal;
}

// mip 의 SetRowType 을 수정
// updatecontrol 값이 false일 경우에만 setRowType 메소드를 사용할 수 있습니다.
function SetRowType(XDataObject, nRow, strRowType)
{
	var tRowType = strRowType.toLowerCase();
	
	if(tRowType == "update")
		tRowType = Dataset.ROWTYPE_UPDATE;
	else if(tRowType == "insert")
		tRowType = Dataset.ROWTYPE_INSERT;
	else if(tRowType == "delete")
		tRowType = Dataset.ROWTYPE_DELETE;
	else 
		tRowType = Dataset.ROWTYPE_NORMAL;				
	
	XDataObject.setRowType(nRow, tRowType);		
}

function SetColumnNF(XDataObject,nRow,strColID,varVal){
	//Filter된 레코드를 포함한 Dataset에서 지정된 레코드 
	//Index와 Column ID에 해당하는 값을 변경하는 Method  
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		rtnVal = XDataObject.setColumn(nRow,strColID,varVal);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;	 
	
	return rtnVal;	
}

function Merge(XDataObject,strDataset){
	var sType = strDataset.toString().valueOf().substr(1,6);
	if( sType.toLowerCase() == "object" )
	{
		XDataObject.mergeData(strDataset);
	}
	else
	{
		XDataObject.mergeData(eval(strDataset));
	}
}

function Copy(XDataObject,strDataset){
	var sType = strDataset.toString().valueOf().substr(1,6);
	if( sType.toLowerCase() == "object" )
	{
		XDataObject.copyData(strDataset);
	}
	else
	{
		XDataObject.copyData(eval(strDataset));
	}
}

function CopyF(XDataObject,strDataset){
	//Dataset의 내용중 필터링된 내용만을 지정한 Dataset에서 복사하는 Method
	var sType = strDataset.toString().valueOf().substr(1,6);
	if( sType.toLowerCase() == "object" )
	{
		XDataObject.copyData(strDataset, true);
	}
	else
	{
		XDataObject.copyData(eval(strDataset), true);
	}	
}

function UnFilter(XDataObject){
	//Filter Method로 Filtering된 Dataset을 원상태로 되돌리는 Method
	 XDataObject.filter("");
}

function SearchRowNF(XDataObject,strExpr,nStart){
	//Filter된 Record를 포함한 Dataset에서 지정된 조건이 참인 첫번째 Record를 찾는 Method
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		if(isNull(nStart)) nStart = 0;	
		rtnVal = XDataObject.findRowExpr(strExpr,nStart);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;	 
	
	return rtnVal;
}

function FindRowNF(XDataObject,strColID,strVal,nStart,nEnd){
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		if(isNull(nStart)) nStart = 0;
		if(isNull(nEnd)) 
			nEnd = -1;
		else
			nEnd = nEnd + 1;
		rtnVal = XDataObject.findRow(strColID,strVal,nStart,nEnd);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;
	
	return rtnVal;
}

function FindRowNFAs(XDataObject,strColID,strVal,nStartIdx,nEndIdx){
		
	var ExtComm = new ExtCommon;
	return ExtComm.findRowsNFAs(XDataObject,strColID,strVal,nStartIdx,nEndIdx);
}

function TotalSum(XDataObject,strExpr,nStart,nCnt){
	//Filter된 레코드를 포함한 Dataset에서 요청한 Record 범위에 대해 
	//Column ID의 값에 대한 합계나 Record 별 수식 수행 결과에 대한 합계를 구하는 Method
	if(isNull(nStart)) nStart = 0;
	if(isNull(nCnt)) 
		nCnt = -1;
	else
		nCnt = nCnt + 1;
		
	return XDataObject.getSumNF(strExpr,nStart,nCnt);
}

function TotalMin(XDataObject,strExpr,nStart,nCnt){
	//Filter된 Record를 포함한 Dataset에서 요청한 Record 범위에 
	//대해 Column ID의 값에 대한 최대값이나, Record 별 수식 수행 결과에 대한 최소값을 구하는 Method 
	if(isNull(nStart)) nStart = 0;	
	if(isNull(nCnt)) 
		nCnt = -1;
	else
		nCnt = nCnt + 1;
		
	return XDataObject.getMinNF(strExpr,nStart,nCnt);
}

function CaseMaxNF(XDataObject,strCmpExpr,strValExpr,nStart,nCnt){
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		if(isNull(nStart)) nStart = 0;
		if(isNull(nCnt)) 
			nCnt = -1;
		else
			nCnt = nCnt + 1;
			
		rtnVal = XDataObject.getCaseMax(strCmpExpr,strValExpr,nStart,nCnt);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;
		
	return rtnVal; 
}

function CaseMinNF(XDataObject,strCmpExpr,strValExpr,nStart,nCnt){
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		if(isNull(nStart)) nStart = 0;
		if(isNull(nCnt)) 
			nCnt = -1;
		else
			nCnt = nCnt + 1;
			
		rtnVal = XDataObject.getCaseMin(strCmpExpr,strValExpr,nStart,nCnt);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;
		
	return rtnVal;
}

function CaseSumNF(XDataObject,strCmpExpr,strValExpr,nStart,nCnt){
	//Filter된 레코드를 포함하는 Dataset의 해당 범위안에서 조건에 맞는 Record를 추출한 후, 계산식을 적용해 Record들의 합계를 구하는 Method
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		if(isNull(nStart)) nStart = 0;
		if(isNull(nCnt)) 
			nCnt = -1;
		else
			nCnt = nCnt + 1;
			
		rtnVal = XDataObject.getCaseSum(strCmpExpr,strValExpr,nStart,nCnt);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;
		
	return rtnVal;
}

function TotalMax(XDataObject,strExpr,nStart,nCnt){
	//Filter된 Record를 포함한 Dataset에서 요청한 Record 범위에 대해 
	//Column ID의 값에 대한 최대값이나, Record 별 수식 수행 결과에 대한 최대값을 구하는 Method 
	if(isNull(nStart)) nStart = 0;	
	if(isNull(nCnt)) 
		nCnt = -1;
	else
		nCnt = nCnt + 1;
	
	return XDataObject.getMaxNF(strExpr,nStart,nCnt);
}

function LoadDataset(XDataObject, url){//●●● Need Checking
	if(!isNull(url)) XDataObject.url = url;
	XDataObject.load();
}

function GetTotalRowType(){
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
		
	XDataObject.enableevent = false;
		XDataObject.filter("");
		var nRowType = XDataObject.getRowType(nRow);
		
		if(nRowType==1)
			rtnVal = "normal";
		else if(nRowType==2)
			rtnVal = "insert";
		else if(nRowType==4)
			rtnVal = "update";
		else if(nRowType==8)
			rtnVal = "delete";
		else if(nRowType==16)	//ROWTYPE_GROUP
			rtnVal = "logical";
		else if(nRowType==0)	//ROWTYPE_EMPTY
			rtnVal = "normal";					
		
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;	
	
	return rtnVal;
}

function GetColSize(XDataObject,strColID){
	//지정한 DataSet Column ID의 Column Size를 얻어오는 Method
	var o_cinfo = XDataObject.getColumnInfo(strColID);
	return o_cinfo.size;
}

function GetColType(XDataObject,strColID){
	//지정한 DataSet Column ID의 Column Type을 얻어오는 Method
	var o_cinfo = XDataObject.getColumnInfo(strColID);
	return o_cinfo.type;
}

function GetColumnNF(XDataObject,nRow,strColID){
	//XDataObject
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");		
		rtnVal = XDataObject.getColumn(nRow,strColID);
		XDataObject.filter(strOrgFilter);
	XDataObject.enableevent = true;	
	
	return rtnVal;
}

function GetORgBuffCount(XDataObject)
{	
	return XDataObject.getSumNF("(getRowType(currow)!=2)") + XDataObject.getDeletedRowCount();
}

function GetOrgColumn(XDataObject,nRow,strColID){
	var rtnVal = XDataObject.getOrgColumn(nRow,strColID);
	if(IsNull(rtnVal.valueOf()) == true) rtnVal = "";
	return rtnVal;	
}

function GetOrgColumnNF(XDataObject,nRow,strColID){
	var rtnVal;
	var strOrgFilter = XDataObject.filterstr.valueOf();
	
	XDataObject.enableevent = false;
		XDataObject.filter("");
		rtnVal = XDataObject.getOrgColumn(nRow,strColID);
		XDataObject.filter(strOrgFilter);	
	XDataObject.enableevent = true;	
	
	if(IsNull(rtnVal.valueOf()) == true) rtnVal = "";
	return rtnVal;	
}

//##########################
//##### Grid 관련 #########
//#########################

//Grid의 특정한 Column의 Width를 변경하는 Method 	
function ChangeColWidth(XGridObject,nUnit,nCell,nWidth,strBand)
{//●●● Need Checking			
	strBand = nvl(strBand, "body");
	
	var colIndex = XGridObject.getCellProperty(strBand, nCell, "col");
	XGridObject.setFormatColProperty(colIndex, "size", nWidth);
}

//Grid의 특정한 Row의 Height를 변경하는 Method 
function ChangeRowHeight(XGridObject, nUnit, nCell, nHeight, strBand)
{//●●● Need Checking			 	
	XGridObject.setFormatRowProperty(nCell, "size", nHeight);
}

function ExportExcel(XGridObject, strDocName, bSelOnly, bAsync)
{
	//Grid의 selecttype이 area,multiarea,treecell인 경우에는 enumExportHead 를 지정하더라도 head,summ이 출력되지 않습니다
	if(isNull(bSelOnly)) bSelOnly = false;	
	if(isNull(bAsync)) bAsync = true;
	
	var orgSelectType = XGridObject.selecttype;	
	XGridObject.selecttype = "row";	//export 위해서 임시변경
	
	var objExport = new ExportObject();
	objExport.exporttype = ExportTypes.EXCEL;
	
	var strExportSelect = "allrecord";
	if(bSelOnly == true) strExportSelect = "selectrecord";
	
	var strExportHead = "";
	
	//Sheet 생성
	objExport.activepagename = strDocName;
	objExport.addExportItem(ExportItemTypes.GRID, XGridObject, strDocName + "!A1", strExportHead, strExportSelect);
	
	//엑셀 다운 실행
	objExport.export();
	objExport = null;
	
	XGridObject.selecttype = orgSelectType;	//원래대로 복구
}

function ExportExcelEx(XGridObject, strDocName, strCell, bSelOnly, bAddHeadSumm, bAsync, bMerge)
{
	//Grid의 selecttype이 area,multiarea,treecell인 경우에는 enumExportHead 를 지정하더라도 head,summ이 출력되지 않습니다
	if(isNull(strCell)) strCell = "A1";
	if(isNull(bSelOnly)) bSelOnly = false;
	if(isNull(bAddHeadSumm)) bAddHeadSumm = true;
	if(isNull(bAsync)) bAsync = true;
	if(isNull(bMerge)) bMerge = true;
		
	var orgSelectType = XGridObject.selecttype;	
	XGridObject.selecttype = "row";	//export 위해서 임시변경
	
	var objExport = new ExportObject();
	objExport.exporttype = ExportTypes.EXCEL;
	
	var strExportSelect = "allrecord";
	if(bSelOnly == true) strExportSelect = "selectrecord";
	
	var strExportHead = "";
	if(strExportSelect == "allrecord") strExportHead = "allband";
	if(bAddHeadSumm == false) strExportHead = "nohead,nosumm";
		
	var strExportMerge = "";
	if(bMerge == false) strExportMerge = "nosuppress";
				
	//Sheet 생성
	objExport.activepagename = strDocName;
	objExport.addExportItem(ExportItemTypes.GRID, XGridObject, strDocName + "!" + strCell, strExportHead, strExportSelect, strExportMerge);
	
	//엑셀 다운 실행
	objExport.export();
	objExport = null;
	
	XGridObject.selecttype = orgSelectType;	//원래대로 복구	
}
 

// Grid의 내용을 Microsoft Excel의 WorkSheet로 Export 하는 Method 
function SaveExcel(XGridObject, strFileName, strDocName, strCell, bSelOnly, bAddHeadSumm, bAsync, bMerge)
{
	//●●● Need Checking	
	var orgSelectType = XGridObject.selecttype;	
	XGridObject.selecttype = "row";	//export 위해서 임시변경
	
	//Grid의 selecttype이 area,multiarea,treecell인 경우에는 enumExportHead 를 지정하더라도 head,summ이 출력되지 않습니다
	if(isNull(strCell)) strCell = "A1";
	if(isNull(bSelOnly)) bSelOnly = false;
	if(isNull(bAddHeadSumm)) bAddHeadSumm = true;
	if(isNull(bAsync)) bAsync = true;
	if(isNull(bMerge)) bMerge = true;
	
	var objExport = new ExportObject();
	objExport.exporttype = ExportTypes.EXCEL;
	
	var strExportSelect = "allrecord";
	if(bSelOnly == true) strExportSelect = "selectrecord";
	
	var strExportHead = "";
	if(strExportSelect == "allrecord") strExportHead = "allband";
	if(bAddHeadSumm == false) strExportHead = "nohead,nosumm";
		
	var strExportMerge = "";
	if(bMerge == false) strExportMerge = "nosuppress";
		
	objExport.exportfilename   = strFileName;
    objExport.exportactivemode = "noactive";
    objExport.exportsavemode   = "save";
   
	//Sheet 생성
	objExport.activepagename = strDocName;
	objExport.addExportItem(ExportItemTypes.GRID, XGridObject, strDocName + "!" + strCell, strExportHead, strExportSelect, strExportMerge);
	
	//엑셀 다운 실행
	objExport.export();
	objExport = null;
	
	XGridObject.selecttype = orgSelectType;	//원래대로 복구
}

//  Grid의 내용을 Microsoft Excel의 WorkSheet로 Export 하는 Method 
function SaveExcelEx(XGridObject,strFileName,strDocName,strPassword, bAppOpen, strCell, bSelOnly, bAddHeadSumm, bAsync, bMerge)
{
	//●●● Need Checking	
	var orgSelectType = XGridObject.selecttype;	
	XGridObject.selecttype = "row";	//export 위해서 임시변경
	
	//Grid의 selecttype이 area,multiarea,treecell인 경우에는 enumExportHead 를 지정하더라도 head,summ이 출력되지 않습니다
	if(isNull(strCell)) strCell = "A1";
	if(isNull(bSelOnly)) bSelOnly = false;
	if(isNull(bAddHeadSumm)) bAddHeadSumm = true;
	if(isNull(bAsync)) bAsync = true;
	if(isNull(bMerge)) bMerge = true;
	
	var objExport = new ExportObject();
	objExport.exporttype = ExportTypes.EXCEL;
	
	var strExportSelect = "allrecord";
	if(bSelOnly == true) strExportSelect = "selectrecord";
	
	var strExportHead = "";
	if(strExportSelect == "allrecord") strExportHead = "allband";
	if(bAddHeadSumm == false) strExportHead = "nohead,nosumm";
		
	var strExportMerge = "";
	if(bMerge == false) strExportMerge = "nosuppress";
		
	objExport.exportfilename   = strFileName;
    objExport.exportsavemode   = "save";
    objExport.exportpassword   = strPassword;
    
    objExport.exportactivemode = "noactive";
    if(bAppOpen == true) objExport.exportactivemode = "active";
	//Sheet 생성
	objExport.activepagename = strDocName;
	objExport.addExportItem(ExportItemTypes.GRID, XGridObject, strDocName + "!" + strCell, strExportHead, strExportSelect, strExportMerge);
	
	//엑셀 다운 실행
	objExport.export();
	objExport = null;
	
	XGridObject.selecttype = orgSelectType;	//원래대로 복구
}

function SetBlinkColor(XGridObject,nRow,nCell,nMilisec){//●●● Need Checking						
	//nMilisec 시간 동안 해당 Cell을 깜박이게 보이도록 배경색과 글자색을 설정하는 Method 	
	//CSS적용 못해봄
	XGridObject.blinkCell(nRow,nCell,nMilisec);
}

//###########################################
//TextArea FUNCTION!TextArea FUNCTION!TextArea
//###########################################

//TextArea의 Scroll을 첫줄 또는 마지막줄이 보이도록 이동하는 Method 입니다.
function DoScroll(XObject, strSrcollAction)
{
	if(isNull(strSrcollAction)) return;
	strSrcoll = strSrcollAction.toUpperCase();
	
	switch(strSrcoll) {
		case "SCROLLBARDOWN":
		    XObject.vscrollbar.position = XObject.vscrollbar.max;
			break;
		case "SCROLLBARUP":
			XObject.vscrollbar.position = XObject.vscrollbar.min;
			break;
	}
}

//###########################################
//TAB FUNCTION! TAB FUNCTION! TAB FUNCTION!
//###########################################

function GetItem(XTabObject,nIdx)
{
	var childTabPg = XTabObject.components[nIdx]; 
	return childTabPg;
}

function GetHandle(XDataFormID)
{
	return XDataFormID.getOwnerFrame().getHandle();
}

function GetImageSize(XImageViewerObject)
{

	var aImgSize = new Array(2);
	aImgSize[0] = XImageViewerObject.imagewidth;
	aImgSize[1] = XImageViewerObject.imageheight;
	return aImgSize;
}

function GetCellText(XGridObject,strBand,nRow,nCell,nSubCellIdx,nPivotIndex)
{  
	//trace(XGridObject+"<-XGridObject오브젝"+strBand+"<-strBand밴드"+nRow+"<-nRow엔로우"+nCell+"<-nCell엔셀"+nSubCellIdx+"<-nSubCellIdx섭셀"+nPivotIndex+"<-nPivotIndex인덱");
	var rtnVal;
	strBand = strBand.toLowerCase();
	
	if(strBand == "head")
	{
		rtnVal = -1;
	}
	else if(strBand == "summ" || strBand == "summary")
	{
		rtnVal = -2;
	}
	else
	{
		rtnVal = nRow;
	}
	
	return XGridObject.getCellText(rtnVal,nCell,0);   // 디폴트 0                      
}

function SaveXML(XDataObject,strSaveType,bHeader,codepage)
{	
	var rtnVal;

	if(isNull(strSaveType))
	{
		rtnVal ="normal" ;
	}
	else
	{
		if(strSaveType=="A" ||strSaveType=="a" ||strSaveType=="all" || strSaveType=="All")
		{
			rtnVal = "a";
		}
		else if(strSaveType=="U"||strSaveType=="u"||strSaveType=="update"||strSaveType=="Update")
		{
			rtnVal = "u" ;
		}
		else if(strSaveType=="N"||strSaveType=="n"||strSaveType=="normal"||strSaveType=="Normal")
		{
			rtnVal ="normal" ;
		}	
	}
	return XDataObject.saveXML(XDataObject.name, rtnVal); 
}

function GetObjLength(obj)
{
	return obj.length;
}
	
function Dialog(strURL, strInArgument, nWidth, nHeight, strOpenStyle, nLeft, nTop)
{	
	if(IsNull(nLeft))	nLeft = -1; 
	if(IsNull(nTop))	nTop = -1; 
	if(IsNull(nWidth))	nWidth = -1; 
	if(IsNull(nHeight))	nHeight = -1; 
		
	var nRight;
	var nBottom;	
	var newArguments = new Array();
	var tArguments = strInArgument.split(" ");
	
	//새로운 argument 세팅
	if(strInArgument.length > 0)
	{
		for(var i=0; i<tArguments.length; i++)
		{
			newArguments[tArguments[i].split("=")[0]] = tArguments[i].split("=")[1].valueOf();
		}
	}
	
	var newChild = null;
	var objParentFrame = this.getOwnerFrame();
	strURL = strURL.replace(".xml", ".xfdl");
	newChild = new ChildFrame;
	
	if(nLeft == -1 && nTop == -1)		
	{
		newChild.openalign = "center middle"; //화면의 중앙에 위치		
	}
	
	if(nWidth == -1 && nHeight == -1)		
	{
		nWidth = 0;	
		nHeight = 0;	
	}
	
	//이값은 의미가 없는건가
	nRight = nLeft + nWidth;
	nBottom = nTop + nHeight;
		
	newChild.init("modal", nLeft, nTop, nRight, nBottom, strURL);
	
	//strOpenStyle의 적용	(//CloseFlag 는 ??)
	strOpenStyle = String(strOpenStyle).toLowerCase();//소문자처리한 후 체크
	var tOpenStyle = strOpenStyle.split(" ");
		
	for(var i=0; i<tOpenStyle.length; i++)
	{
		if(tOpenStyle[i].split("=")[0].indexOf("titlebar") > -1)
		{			
			newChild.showtitlebar = tOpenStyle[i].split("=")[1].valueOf();
		}
		if(tOpenStyle[i].split("=")[0].indexOf("resize") > -1)
		{			
			newChild.resizable = tOpenStyle[i].split("=")[1].valueOf();
		}
		if(tOpenStyle[i].split("=")[0].indexOf("autosize") > -1)
		{
			newChild.autosize = tOpenStyle[i].split("=")[1].valueOf();
		}
		if(tOpenStyle[i].split("=")[0].indexOf("statusbar") > -1)
		{
			newChild.showstatusbar = tOpenStyle[i].split("=")[1].valueOf();
		}
		/*닫기버튼은 제어가 안됨
		if(tOpenStyle[i].split("=")[0].indexOf("closeflag") > -1)
		{			
			newChild.titlebar.closebutton.visible = tOpenStyle[i].split("=")[1].valueOf();						
		}
		*/
	}		
	
	var rtnVal = newChild.showModal(objParentFrame, newArguments);
	
	return rtnVal;	//close 메소드로 닫을 때 넘긴 값
}

function Open(strURL, strInArgument, nWidth, nHeight, strOpenStyle, nLeft, nTop)
{	
	if(IsNull(nLeft))	nLeft = -1; 
	if(IsNull(nTop))	nTop = -1; 
	if(IsNull(nWidth))	nWidth = -1; 
	if(IsNull(nHeight))	nHeight = -1; 	
	
	var nRight;
	var nBottom;	
	var newArguments = new Array();
	var tArguments = strInArgument.split(" ");
	
	//새로운 argument 세팅
	if(strInArgument.length > 0)
	{
		for(var i=0; i<tArguments.length; i++)
		{
			newArguments[tArguments[i].split("=")[0]] = tArguments[i].split("=")[1].valueOf();
		}
	}
	
	var newChild = null;
	var objParentFrame = this.getOwnerFrame();
	strURL = strURL.replace(".xml", ".xfdl");
	newChild = new ChildFrame;
	
	if(nLeft == -1 && nTop == -1)		
	{
		newChild.openalign = "center middle"; //화면의 중앙에 위치		
	}
	
	if(nWidth == -1 && nHeight == -1)		
	{
		nWidth = 0;	
		nHeight = 0;	
	}
	
	nRight = nLeft + nWidth;
	nBottom = nTop + nHeight;
	
	newChild.init("modeless", nLeft, nTop, nRight, nBottom, strURL);
	
	//strOpenStyle의 적용	(//CloseFlag 는 ??)
	strOpenStyle = String(strOpenStyle).toLowerCase();//소문자처리한 후 체크
	//trace("strOpenStyle=" + strOpenStyle);
	var tOpenStyle = strOpenStyle.split(" ");
		
	for(var i=0; i<tOpenStyle.length; i++)
	{	
		if(tOpenStyle[i].split("=")[0].indexOf("titlebar") > -1)
		{			
			newChild.showtitlebar = tOpenStyle[i].split("=")[1].valueOf();
		}
		if(tOpenStyle[i].split("=")[0].indexOf("resize") > -1)
		{			
			newChild.resizable = tOpenStyle[i].split("=")[1].valueOf();
		}
		if(tOpenStyle[i].split("=")[0].indexOf("autosize") > -1)
		{
			newChild.autosize = tOpenStyle[i].split("=")[1].valueOf();
		}
		if(tOpenStyle[i].split("=")[0].indexOf("statusbar") > -1)
		{
			newChild.showstatusbar = tOpenStyle[i].split("=")[1].valueOf();
		}
		/*
		if(tOpenStyle[i].split("=")[0].indexOf("closeflag") > -1)
		{			
			newChild.titlebar.closebutton.visible = tOpenStyle[i].split("=")[1].valueOf();			
		}
		*/
				
		//winlevel은 modeless인 경우만
		if(tOpenStyle[i].split("=")[0].indexOf("winlevel") > -1)
		{			
			/* miplatform 속성값 참고
			-2: 화면에서 가장 밑의 윈도우 밑으로 들어감
			-1: 화면에서 가장위의 윈도우 아래로 들어감 
			 0: 현재상태 유지 
			 1: 화면에서 가장위의 윈도우 위로감(단, 항상위에 있는 윈도우보다는 아래) 
			 2: 화면의 모든 윈도우보다 위로 감. 
			*/
			
			var tlevel = tOpenStyle[i].split("=")[1].valueOf();			
			var twinlevel;
			
			switch(tlevel)
			{
				case -2:
					twinlevel = "bottom";
					break;
				case -1:
					twinlevel = "top";
					break;
				case 0:
					twinlevel = "top";
					break;
				case 1:
					twinlevel = "notopmost";
					break;
				case 2:
					twinlevel = "topmost";
					break;
				default:
					twinlevel = "top";
					break;				
			}			
			
			newChild.winlevel = twinlevel;			
		}
	}	
	
	var rtnVal = newChild.showModeless(objParentFrame, newArguments);
	return rtnVal;	//정상적으로 생성되었는지 여부(Mip와 조금 다름)
}

//##########################
//##### TreeView 관련 #########
//#########################

//(하위레벨Child 리턴됨) 
function ChildCount(XObject,nRowOrPath){
	
	var nTRow=XObject.getTreeRow(nRowOrPath);	 
	
	return XObject.getTreeChildCount(nTRow,true);		
}

//제일 상위레벨 클릭 :하위 레벨idx 리턴 (하위레벨 없으면 0 miplatform은 -1)
function GetChildRow(XObject,nRowOrPath,nChildIndex){
	
	var nTRow=XObject.getTreeRow(nRowOrPath);	
	
	return XObject.getTreeChildRow(nTRow,nChildIndex,true);
}

// true:펼침   false:접힘
function ExpandItem(XObject,nRowOrPath,bExpand, bEnsureVisible){	
	
	var nTRow=XObject.getTreeRow(nRowOrPath);	
	
	return XObject.setTreeStatus(nTRow,bExpand);
}

//GetChildRow 반대개념  부모인덱스리턴
function GetParentRow(XObject,nRowOrPath){
	
	var nTRow=XObject.getTreeRow(nRowOrPath);
	
	return XObject.getTreeParentRow(nTRow,true);	
}

//1:하위   음수:상위   같은레벨상 find     	●●● Need Checking
function GetSiblingRow(XObject,nRowOrPath,nOffset){	
	
	var nTRow=XObject.getTreeRow(nRowOrPath);	
	return XObject.getTreeSiblingRow(nTRow,nOffset,false);	
}

//Leaf가 아니면  false  0   Leaf면 true 1
function IsLeaf(XObject,nRowOrPath){
	
	var nTRow=XObject.getTreeRow(nRowOrPath);	
	var ingStatus= XObject.isTreeLeafRow(nTRow,true);
	
	if(ingStatus){
		return 1;
	}else{
		return 0;
	}
}

//Leaf를 체크했다면 무조건 false miplatform- 무조건 -1 반환
function IsExpanded(XObject,nRowOrPath){
	
	var nTRow=XObject.getTreeRow(nRowOrPath);
	var ingStatus= XObject.getTreeStatus(nTRow,true);
	
	if(ingStatus==3){
		return -1;
	}else{
		return ingStatus;
	}		
}

// Root 항목인지 여부
function IsRoot(XObject,nRowOrPath){
	
	var nTRow=XObject.getTreeRow(nRowOrPath);	
	var ingStatus= XObject.isTreeRootRow(nTRow,false);
	
	if(ingStatus){
		return 1;
	}else{
		return 0;
	}
}	

function GetStartofWeek(XObject) 
{
	var Day  = XObject.getDayOfWeek();
	var minusDay = 0 - Day;
	var objDate = new Date(XObject.getYear(), XObject.getMonth()-1, XObject.getDay());
	if(Day == 0) return objDate.toFormatString("%Y%m%d");
	var nMs = objDate.addDate(minusDay);
	return objDate.toFormatString("%Y%m%d");
}

function GetEndofWeek(XObject) 
{
	var nLastDay = 6;
	var Day      = XObject.getDayOfWeek();
	
	var objDate = new Date(XObject.getYear(), XObject.getMonth()-1, XObject.getDay());
	if(Day == nLastDay) return objDate.toFormatString("%Y%m%d");
	
	var lastDate = new Date(XObject.getYear(), XObject.getMonth()-1, XObject.getDay());
	
	var objDay  = objDate.getDate();
	
	lastDate.addDate(nLastDay - Day);
	var lastDay = lastDate.getDate();
	
	return lastDate.toFormatString("%Y%m%d");
}

//**************
//**ExportObject
//**************
function AddExportDataset(XExportObject,strRange,DatasetComp,bExportHead){

	var pExportHead;
	
	if(bExportHead)		pExportHead="allband";
		
	if(!bExportHead)	pExportHead="nohead";
	
	return XExportObject.addExportItem(ExportItemTypes.DATASET,DatasetComp,strRange,pExportHead);
}

function AddExportGrid(XExportObject,strRange,GridComp,bExportHead,bExportValue){

	var pExportHead;
	var pExportValue;

	if(bExportHead)		pExportHead="allband";
		
	if(!bExportHead)	pExportHead="nohead";
	
	if(bExportValue)	pExportValue="onlyvalue";
	
	if(!bExportValue)	pExportValue="allstyle";
	
	return XExportObject.addExportItem(ExportItemTypes.GRID,GridComp,strRange,pExportHead,"","",pExportValue);
}

//●●● Need Checking
function AddExportXML(XExportObject,strRange,strXML,bExportHead){
	
	return XExportObject.addExportItem(ExportItemTypes.XML,strXML,strRange);
}

function GetExportDataset(XExportObject,nIndex,strRange,DatasetCompVar){
	
	return XExportObject.getExportItem(ExportItemTypes.DATASET,nIndex);
}

function GetExportGrid(XExportObject,nIndex,strRange,GridCompVar,bExportHead,ExportValue){
	
	return XExportObject.getExportItem(ExportItemTypes.GRID,nIndex);
}

function GetExportXML(XExportObject,nIndex,strRange,strXML,bExportHead){      

	return XExportObject.getExportItem(ExportItemTypes.XML,nIndex);
}

function SetExportDataset(XExportObject,nIndex,strRange,DatasetComp,bExportHead){
	
	return XExportObject.setExportItem(ExportItemTypes.DATASET,nIndex,strRange);		
}

function SetExportGrid(XExportObject,nIndex,strRange,GridComp,bExportHead){
	
	return XExportObject.setExportItem(ExportItemTypes.GRID,nIndex,strRange);		
}

//●●●Need Checking
function SetExportXML(XExportObject,nIndex,strRange,strXML,bExportHead){
	
	return XExportObject.setExportItem(ExportItemTypes.XML,nIndex,strRange);		
}

//Text에서 Column id를 구한다.
function getTextToColId(sText)
{
	if(isNull(sText)) return "";
	var sArText = String(sText).split(":");
	if(sArText.length == 2) return sArtText[1];
	return sText;
}

//Text에서 Column id를 구한다.
function addBindText(sText)
{
	if(isNull(sText)) return "";
	return "bind:" + sText;
}

function setCellEditVal(XGridObject,strBand,nCellIdx,varValue)
{
	if(isNull(varValue)) return "";
	
	sValue = String(varValue).toLowerCase();
	
	switch(sValue)
	{
		case "uppernumchar":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","upper,number,char");
			return "text";
			break;
		case "integer":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","integer");
			return "text";
			break;
		case "lower":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","lower");
			return "text"; 
			break;
		case "lowerchar":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","lower,char");
			return "text";  
			break;
		case "lowernum":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","lower,number");
			return "text";
			break;
		case "lowernumchar":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","lower,number,char");
			return "text";  
			break;
		case "number":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","number");
			return "text"; 
			break;
		case "upperchar":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","upper,char");
			return "text";  
			break;
		case "uppernum":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","upper,number");
			return "text";  
			break;
		case "upper":
			XGridObject.setCellProperty(strBand,nCellIdx,"editfilter","upper");
			return "text";  
			break;
		case "button":
			return "button";
			break;
		case "combo":
			return "combo";
			break;
		case "date":
			return "date";
			break;
		case "expand":
			return "expand";
			break;
		case "masknumber":
			return "masknumber";
			break;
		case "none":
			return "none";
			break;
		case "normal":
			return "normal";
			break;
		case "numchar":
			return "masknumber";
			break;
		case "checkbox":
			return "checkbox";
			break;
		case "maskinteger":	//mp:3자리수마다,붙여줌   xp는 아래와같이 처리
			XGridObject.setCellProperty(strBand,nCellIdx,"displaytype","number");
			return "masknumber";
			break;
		default:
			return varValue;
			break;	
	}
}

//mp에서 리턴값이 배열이므로 함수화)
function GetCellRect(XGridObject,nRow,nCell)
{
	var x_arr,my_array;	
	x_arr = XGridObject.getCellRect(nRow,nCell);
	my_array = new Array(6);

	my_array[0] = x_arr.left;
	my_array[1] = x_arr.top;
	my_array[2] = x_arr.right;
	my_array[3] = x_arr.bottom;
	my_array[4] = x_arr.width;
	my_array[5] = x_arr.height;	 
	
	return my_array;
}

//filter속성  setVoidEdit 관련
function setfilterExpr(strValue)
{
	var sValue = String(strValue).toLowerCase();
	
	switch(sValue)
	{
		case "uppernumchar":
			return "upper,number,char";
			break;
		case "integer":
			return "integer";
			break;
		case "lower":
			return "lower"; 
			break;
		case "lowerchar":
			return "lower,char";  
			break;
		case "lowernum":
			return "lower,number";
			break;
		case "lowernumchar":
			return "lower,number,char"; 
			break;
		case "number":
			return "number";
			break;
		case "upperchar":
			return "upper,char";
			break;
		case "uppernum":
			return "upper,number";
			break;
		case "upper":
			return "upper";
			break;
		default:
			return varValue;
			break;	
	}
}

//edittype 속성 setVoidEdit 관련
function setEditExpr(strValue)
{
	sValue = String(strValue).toLowerCase();
	
	switch(sValue)
	{
		case "uppernumchar":
			return "text";
			break;
		case "integer":
			return "text";
			break;
		case "lower":
			return "text"; 
			break;
		case "lowerchar":
			return "text";  
			break;
		case "lowernum":
			return "text";
			break;
		case "lowernumchar":
			return "text";  
			break;
		case "number":
			return "text"; 
			break;
		case "upperchar":
			return "text";  
			break;
		case "uppernum":
			return "text";  
			break;
		case "upper":
			return "text";  
			break;
		case "button":
			return "button";
			break;
		case "combo":
			return "combo";
			break;
		case "date":
			return "date";
			break;
		case "expand":
			return "expand";
			break;
		case "masknumber":
			return "masknumber";
			break;
		case "none":
			return "none";
			break;
		case "normal":
			return "normal";
			break;
		case "numchar":
			return "masknumber";
			break;
		case "checkbox":
			return "checkbox";
			break;
		case "maskinteger":	//mp:3자리수마다,붙여줌   xp는 아래와같이 처리
			return "masknumber";
			break;
		default:
			return strValue;
			break;	
	}
}
]]></Script>
