<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[var ExtComm = new ExtCommon();

function ext_ExecuteApp(strAppName, left, top, width, height)	
{	
	ExtComm.executeApp(strAppName, left, top, width, height);
}

function ext_GetFileVersion(strFileName)	
{
	return ExtComm.getFileVersion(strFileName);
}

function ext_SelectFolder()	
{
	return ExtComm.selectFolder();
}

function ext_GetFileList(strFolder, strOpt)	
{
	return ExtComm.getFileList(strFolder, strOpt);
}

function ext_GetTextExtent(componentid, strtext)	
{
	return ExtComm.getTextExtent(componentid, strtext);
}

function ext_GetIPAddress()	
{
	return ExtComm.getIPAddress();
}

function ext_GetMacAddress()	
{
	return ExtComm.getMacAddress();
}

function ext_GetIPAdapterInfo()	
{
	return ExtComm.getIPAdapterInfo();
}

function ext_GetPrinterList()	
{
	return ExtComm.getPrinterList();
}

function ext_GetDefaultPrinter()	
{
	return ExtComm.getDefaultPrinter();
}

function ext_SetDefaultPrinter(strPrinter)	
{
	return ExtComm.setDefaultPrinter(strPrinter);
}

/*
function ext_MsgBox(strTitle, strMsg, strStyle)
{
	ExtComm.
}
*/

function ext_RegSetValue(strKey, strPath, strName, strValue)	
{
	return ExtComm.regSetValue(strKey, strPath, strName, strValue);
}

function ext_RegGetValue(strKey, strPath, strName, strType , bMsg)	
{
	return ExtComm.regGetValue(strKey, strPath, strName, strType , bMsg);
}

/*
function ext_Xml2Bin(compress, in_filename, out_folder)
{
	ExtComm
}
*/

function ext_GetTime()	
{
	return ExtComm.getTime();
}

function ext_SetTime(strTime)	
{
	return ExtComm.setTime(strTime);
}

function ext_SetImeNativeMode(Flag)	
{
	ExtComm.setImeNativeMode(Flag);
}

function ext_FindRow(strDatasetID,strColID,strVal,nStartIdx,nEndIdx)	
{	
	if(isNull(nStartIdx)) nStartIdx = 0;
	if(isNull(nEndIdx)) nEndIdx = -1;
	
	return ExtComm.findRows(strDatasetID,strColID,strVal,nStartIdx,nEndIdx);
}

function ext_FindRowAs(strDataset,strColID,strVal,nStartIdx,nEndIdx)	
{	
	if(isNull(nStartIdx)) nStartIdx = 0;
	if(isNull(nEndIdx)) nEndIdx = -1;
	
	return ExtComm.findRowsAs(strDataset,strColID,strVal,nStartIdx,nEndIdx);
}

function ext_FindRowNF(strDatasetID,strColID,strVal,nStartIdx,nEndIdx)	
{	
	if(isNull(nStartIdx)) nStartIdx = 0;
	if(isNull(nEndIdx)) nEndIdx = -1;
	
	return ExtComm.findRowsNF(strDatasetID,strColID,strVal,nStartIdx,nEndIdx);
}

function ext_FindRowNFAs(strDataset,strColID,strVal,nStartIdx,nEndIdx)	
{	
	if(isNull(nStartIdx)) nStartIdx = 0;
	if(isNull(nEndIdx)) nEndIdx = -1;
	
	return ExtComm.findRowsNFAs(strDataset,strColID,strVal,nStartIdx,nEndIdx);
}

function ext_GetSystemDir(strFlag)	
{
	return ExtComm.getSystemDir(strFlag);
}

function ext_SetTopWindow(Flag)	
{
	ExtComm.SetTopWindow(Flag);
}

function ext_ExcelImportByIndex(strExcelFilename	
								,intSheetIndex
								,strTargetDatasetID
								,intUseColInfo
								,intExp
								,intDecimal
								,intStartRow
								,numcheck
								,skiprow
								,emptycol
								,nDispcnt
								,colDate
								,rowStart)
{
	return ExtComm.excelImportByIndex(strExcelFilename
								,intSheetIndex
								,strTargetDatasetID
								,intUseColInfo
								,intExp
								,intDecimal
								,intStartRow
								,numcheck
								,skiprow
								,emptycol
								,nDispcnt
								,colDate
								,rowStart);
}

function ext_ExcelImportByName(strExcelFilename	
							,strSheetName
							,strDatasetID
							,intUseColInfo
							,intExp
							,intDecimal
							,intStartRow
							,numcheck
							,skiprow
							,emptycol)
{
	ExtComm.excelImportByName(strExcelFilename
							,strSheetName
							,strDatasetID
							,intUseColInfo
							,intExp
							,intDecimal
							,intStartRow
							,numcheck
							,skiprow
							,emptycol);
}

/*
function ext_ExcelImportByIndexEx
{
	ExtComm
}

function ext_ExcelImportByNameEx
{
	ExtComm
}
*/

function ext_ExcelGetSheetList(strExcelFilename)	
{
	return ExtComm.excelGetSheetList(strExcelFilename);
}

function ext_ExcelSaveAs(strFilename, strTargetFilename, strFileType, bCheckCompatibility )
{
	//●●● Need Checking : strFileType 에 따라 결과가 다름
	if(isNull(bCheckCompatibility)) bCheckCompatibility = false;
	return ExtComm.excelSaveAs(strFilename, strTargetFilename, strFileType, bCheckCompatibility);
}

/*
function ext_SetExcelSaveMode(nMode)
{
	ExtComm
}


function ext_FindWindow(strClassName, strTitle,frontyn)
{
	ExtComm
}

function ext_FindWindowEx( strTitle)
{
	ExtComm
}
*/

function ext_ExecuteProccess(strExeName, strArgs, strStartdir)	
{
	return ExtComm.executeProcess(strExeName, strArgs, strStartdir);
}

function ext_WriteUProfileString(strAppNm, strKey,strValue, strFilename, strFormat)	
{
	if(isNull(strFormat)) strFormat = "ANSI";
	ExtComm.writeUProfileString(strAppNm, strKey, strValue, strFilename, strFormat);
}

function ext_GetUProfileString(strAppNm, strKey, strDefault, strFileName)	
{
	return ExtComm.getUProfileString(strAppNm, strKey, strDefault, strFileName);
}

function ext_KeyCheck(strKey)	
{
	return ExtComm.keyCheck(strKey);
}

function ext_GetHostName()	
{
	return ExtComm.getHostName();
}

function ext_GetUserName()	
{
	return ExtComm.getUserName();
}

function ext_Csv2Ds(strFileName,strDatasetName,HeadFlag,strColumnId)	
{
	ExtComm.csv2Ds(strFileName,strDatasetName,HeadFlag,strColumnId);
}

function ext_Ds2Csv(strDatsetName,strFileName,HeadFlag,strColumnId,commaYN,strFileFormat) 
{
	ExtComm.ds2Csv(strDatsetName,strFileName,HeadFlag,strColumnId,commaYN,strFileFormat);
}

/*
function ext_Ds2CsvEx(strDsname,strFileName,Quoteyn,headyn,columnGbn,newlinestr,idbMark)
{
	ExtComm
}

function ext_Ds2CsvEx(strDsname,strFileName,Quoteyn,headyn,columnGbn,newlinestr,idbMark,strFileFormat)
{
	ExtComm
}
*/

function ext_InternetGetConnectedState()	
{
	return ExtComm.getInternetConnectedState();
}

/*
function ext_OleServerBusyTimeout(bReg,DelayTime,EnableNotRespondingDialog,bBusyDialog)
{
	ExtComm
}
*/

function ext_CheckDirectory(dirName,option)	
{
	return ExtComm.checkDirectory(dirName,option);
}

function ext_Base64Encode(str)	
{
	return ExtComm.encodeBase64(str);
}

function ext_Base64Decode(str,type)	
{
	return ExtComm.decodeBase64(str,type);
}

function ext_getSystemEnv(str)	
{
	return ExtComm.getSystemEnv(str);
}

function ext_getDriveInfo()	
{
	return ExtComm.getDriveInfo();
}

function ext_getBitCalc(gubun,val1,val2)	
{
	return ExtComm.getBitsCalc(gubun,val1,val2);
}

/*
function ext_setTitle(strTitle)
{
	ExtComm
}
*/

function ext_RegGetList(strKey,path)	
{
	return ExtComm.regGetList(strKey,path);
}

function ext_RegGetValueList(strKey,path)	
{
	return ExtComm.regGetValueList(strKey,path);
}

/*
function ext_GetImeStatus()
{
	ExtComm
}


function ext_getMonitorInfo(strComponentID)
{	//getMonitorRect ???
	ExtComm
}
*/

function ext_Txt2Ds(filename,datasetid,headyn,seperator,strColInfo,multidel,chkqt,delqt,delchr )	
{
	//ExtComm.txt2Ds(filename,datasetid,headyn,seperator,strColInfo,multidel,chkqt,delqt,delchr );
	//XPLATFORM 에 맞게 변경
	ExtComm.txt2Ds(filename,datasetid,headyn,seperator,strColInfo,1024,false);
}

function ext_Txt2DsEx(strFileName,strDatasetID,sizeInfo,skipLength,strColumnInfo, intSort)	
{
	//ExtComm.txt2DsEx(strFileName,strDatasetID,sizeInfo,skipLength,strColumnInfo, intSort );
	//XPLATFORM 에 맞게 변경 but ●●● Need Checking
	ExtComm.txt2DsEx(strFileName,strDatasetID,sizeInfo,skipLength,strColumnInfo,1024,false);
}

function ext_killProcess(processName, AllSameNameKillTag)	
{	
	ExtComm.Ext_killProcess(processName, AllSameNameKillTag);
}

/*
function ext_getFormHandle()
{
	ExtComm
}


function ext_getAppHandle
{
	ExtComm
}
*/

function ext_ExportDS2UBI(strDsName, strFileName)	
{
	//테스트는 못했지만 형식이 똑같음
	ExtComm.ds2Ubi(strDsName, strFileName);
}

function ext_TextToBin(strText, CodePage)	
{
	//return ExtComm.textToBin(strText,CodePage);	//참고자료가 없음
	var objBuff = new Buffer(strText, CodePage);      
	return objBuff;
}

function ext_readByte(blob,spos,cnt)	//●●● Need Checking
{
	ExtComm.readByte(blob,spos,cnt);	
}

/*
function ext_writeByte(blob,spos,chr)
{
	ExtComm
}
*/

function ext_GetFileDateInfo(strFileName)	
{
	return ExtComm.getFileDateInfo(strFileName);
}

/*
function ext_installProg(progid)
{
	ExtComm
}


function ext_ByteReplace(binary, before, after)
{
	ExtComm
}
*/

function ext_GetTextExtentPoint32(objComponent, strtext)	
{	//확인해봐야 함
	return ExtComm.getTextExtent(objComponent, strtext);	
}

function ext_GetTextExtentBoxPoint32(objComponent, strtext)
{
	return ExtComm.getTextExtent(objComponent, strtext);	
}

function ext_RegGetValue_win7(strKey, strPath, strName, strType,bMsg)	
{	
	return ExtComm.regGetValue(strKey, strPath, strName, strType,bMsg)
}

/*
function ext_GetSystemDefaultUILanguage(void)
{
	ExtComm
}


function ext_GetSystemDefault_LCID(void)
{
	ExtComm
}

function ext_GetSystemDefault_LCID(void)
{
	ExtComm
}

function ext_GetSystemDefault_LangID(void)
{
	ExtComm
}

function ext_GetUserefault_ID(void)
{	//오타확인해봐야
	ExtComm
}
*/

function ext_setShowCursor(bOpt)	
{
	ExtComm.setShowCursor(bOpt);
}

/*
function ext_ExcelImportByDateChange(nVal)
{
	ExtComm
}

function ext_FullScreenCapture(Filepath, Option)
{
	ExtComm
}


function ext_GetSeedRoundKey(DWORD *pdwRoundKey, BYTE *pbUserKey)
{
	ExtComm
}

function ext_GetSeedEncrypt(BYTE *pbData, DWORD *pdwRoundKey)
{
	ExtComm
}

function ext_GetSeedDecrypt(BYTE *pbData, DWORD *pdwRoundKey)
{
	ExtComm
}
*/

function ext_GetTraySizeInfo()	
{
	return ExtComm.getTraySizeInfo();
}

function ext_GetTaskBarPosition()	
{
	return ExtComm.getTaskBarPosition();
}

function ext_GetDeskTopWorkArea()	
{
	return ExtComm.getDeskTopWorkArea();
}

function ext_GetMaxPosition(Handle)	
{
	return ExtComm.getMaxPosition(Handle);
}

function ext_getMonitorRect(Handle)	
{
	return ExtComm.getMonitorRect(Handle);
}

/*
function ext_NumFormatLoc(dNumber,nLocation,digits)
{
	ExtComm
}

function ext_NumFormatLoc(dNumber,strLocation, digits)
{
	ExtComm
}

function ext_GetDateUTC(년,월,일,시,분,초)
{
	ExtComm
}

function ext_getDriveInfo2()
{
	ExtComm
}

function ext_GetDateLocalTimeType
{
	ExtComm
}
*/
function ext_GetCurrentProcessId()	
{
	return ExtComm.getCurrentProcessId();
}

function ext_KillProcessById(nProcessId)	
{
	ExtComm.killProcessById(nProcessId);
}

function ext_SendCopyDataMsg(strClassName, strTitle, dwData, strData)	//●●● Need Checking
{	
	//ext_SendCopyDataMsg("", "CopyDataTest", 123, "1234");
	ExtComm.CopyData_SendMsg(strClassName, strTitle, dwData, strData);	
}

/*
function ext_HandleScreenCapture(nHandle, strFilePath, bOriginal)
{
	ExtComm
}

function ext_DisplayInfo()
{
	ExtComm
}
*/
]]></Script>
