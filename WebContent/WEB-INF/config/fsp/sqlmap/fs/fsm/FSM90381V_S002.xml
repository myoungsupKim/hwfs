<?xml version="1.0" encoding="euc-kr"?>
<query dynamic="true">
	<type>select</type>
	<description><![CDATA[식재료율실적예상-하단]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>
SELECT BASE_DD                                         /* 기준일 */
     , WEEK_NAME                                       /* 요일 */
     , WE_COLOR                                        /* 요일색상 */
     , SP_AMT
     , SR_AMT
     , SS_AMT
<isEqual col="PRICE_TYPE" value="1">
     , MP_AMT
     , MR_AMT
</isEqual>
<isEqual col="PRICE_TYPE" value="2">
     , NVL(MP_AMT / (MAP_MARGIN_RATE_MGMT_FUN(#UPJANG#,#START_DATE#) / 100),0) AS MP_AMT
     , NVL(MR_AMT / (MAP_MARGIN_RATE_MGMT_FUN(#UPJANG#,#START_DATE#) / 100),0) AS MR_AMT
</isEqual>
, MS_AMT
<isEqual col="PRICE_TYPE" value="1">
     , P_RATE
     , R_RATE
</isEqual>
<isEqual col="PRICE_TYPE" value="2">
     , NVL(ROUND(DECODE(SP_AMT, 0, 0, (MP_AMT / (MAP_MARGIN_RATE_MGMT_FUN(#UPJANG#,#START_DATE#) / 100)) / SP_AMT * 100), 2),0) AS P_RATE   /* 식재료율 - 계획 */
     , NVL(ROUND(DECODE(SR_AMT, 0, 0, (MR_AMT / (MAP_MARGIN_RATE_MGMT_FUN(#UPJANG#,#START_DATE#) / 100)) / SR_AMT * 100), 2),0) AS R_RATE   /* 식재료율 - 추정 */
</isEqual>
     , S_RATE
     , SS_AMT - SP_AMT AS SDP_VAL                                  /* 매출액 - 계획대비 - 차이 */
     , DECODE(SP_AMT, 0, 0, SS_AMT / SP_AMT * 100) AS SDP_RATE     /* 매출액 - 계획대비 - 비율 */
     , SS_AMT - SR_AMT AS SDR_VAL                                  /* 매출액 - 추정대비 - 차이 */     
     , DECODE(SR_AMT, 0, 0, SS_AMT / SR_AMT * 100) AS SDR_RATE     /* 매출액 - 추정대비 - 비율 */
     , MS_AMT - MP_AMT AS MDP_VAL                                  /* 식재료비 - 계획대비 - 차이 */
     , DECODE(MP_AMT, 0, 0, MS_AMT / MP_AMT * 100) AS MDP_RATE     /* 식재료비 - 계획대비 - 비율 */
     , MS_AMT - MR_AMT AS MDR_VAL                                  /* 식재료비 - 추정대비 - 차이 */
     , DECODE(MR_AMT, 0, 0, MS_AMT / MR_AMT * 100) AS MDR_RATE     /* 식재료비 - 추정대비 - 비율 */
     , S_RATE - P_RATE AS RDP_RATE                                 /* 식재료비율 - 계획대비 - 차이(%P) */
     , S_RATE - R_RATE AS RDR_RATE                                 /* 식재료비율 - 추정대비 - 차이(%P) */
     , IP_RATE AS IP_RATE                                          /* 재고비율 - 계획 */
     , DECODE(MS_AMT, 0, 0, IS_AMT / MS_AMT * 100) AS IS_RATE      /* 재고비율 - 실적 */
     , DECODE(MS_AMT, 0, 0, (IS_AMT / MS_AMT * 100)) - IP_RATE AS IDP_RATE    /* 재고비율 - 계획대비 - 차이(%P) */
     , IS_AMT
     , MS_AMT1
     , MS_AMT2
<isEqual col="GBN" value="1">
     , MS_AMT3
     , EXPECT_SALE
<isEqual col="PRICE_TYPE" value="1">
     , EXPECT_COST
     , EXPECT_RATE
</isEqual>
<isEqual col="PRICE_TYPE" value="2">
     , NVL(EXPECT_COST / (MAP_MARGIN_RATE_MGMT_FUN_2(#UPJANG#,#START_DATE#) / 100),0) AS EXPECT_COST
     , ROUND(DECODE(NVL(EXPECT_SALE,0),0,0,NVL(EXPECT_COST / (MAP_MARGIN_RATE_MGMT_FUN_2(#UPJANG#,#START_DATE#) / 100),0) / NVL(EXPECT_SALE,0)) * 100,1) AS EXPECT_RATE
</isEqual>
</isEqual>
<isEqual col="GBN" value="2">
     , 0 AS MS_AMT3    
     , 0 AS EXPECT_SALE
     , 0 AS EXPECT_COST
     , 0 AS EXPECT_RATE
</isEqual> 
<isEqual col="GBN" value="3">
     , MS_AMT3 MS_AMT3
     , EXPECT_SALE
<isEqual col="PRICE_TYPE" value="1">
     , EXPECT_COST
     , EXPECT_RATE
</isEqual> 
<isEqual col="PRICE_TYPE" value="2">
     , NVL(EXPECT_COST / (MAP_MARGIN_RATE_MGMT_FUN_2(#UPJANG#,#START_DATE#) / 100),0) AS EXPECT_COST
     , ROUND(DECODE(NVL(EXPECT_SALE,0),0,0,NVL(EXPECT_COST / (MAP_MARGIN_RATE_MGMT_FUN_2(#UPJANG#,#START_DATE#) / 100),0) / NVL(EXPECT_SALE,0)) * 100,1) AS EXPECT_RATE
</isEqual>
</isEqual>    
  FROM (	    
        SELECT A.BASE_DD
             , A.WEEK_NAME
             , A.WE_COLOR
             , SUM(NVL(B.SP_AMT,0)) AS SP_AMT     /* 매출액 - 식음료매출 계획 */
             , SUM(NVL(B.SR_AMT,0)) AS SR_AMT     /* 매출액 - 식음료매출 추정 */
<isEqual col="SELECT_TYPE" value="1">
    		 , SUM(NVL(C.SS_AMT,0)) AS SS_AMT     /* 매출액 - 식음료매출 실적 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="2">
    		 , SUM(NVL(C.SS_AMT_EST,0)+NVL(B.SR_AMT_EST,0)) AS SS_AMT     /* 매출액 - 식음료매출 실적 */
</isEqual>     
             , SUM(NVL(B.MP_AMT,0)) AS MP_AMT     /* 재료비 - 식음료원가 계획 */
             , SUM(NVL(B.MR_AMT,0)) AS MR_AMT     /* 재료비 - 식음료원가 추정 */
<isEqual col="SELECT_TYPE" value="1">
             , SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0), 0)) AS MS_AMT     /* 재료비 - 식음료매출 실적 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="2">
             , SUM(NVL(E.MS_AMT1_EST,0)+NVL(MR_AMT_EST,0)) - SUM(NVL(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0), 0)) AS MS_AMT     /* 재료비 - 식음료매출 실적 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="1">
			 , SUM(NVL(E.MS_AMT1,0)) AS MS_AMT1   /* 식음료매출 실적 - 전산구매 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="2">
			 , SUM(NVL(E.MS_AMT1_EST,0)+NVL(MR_AMT_EST,0)) AS MS_AMT1   /* 식음료매출 실적 - 전산구매 */
</isEqual>     
			 , SUM(NVL(E.MS_AMT2,0)) AS MS_AMT2   /* 식음료매출 실적 - 현지구매 */
             , SUM(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0)) AS MS_AMT3   /* 식음료매출 실적 - 복리후생식대비 */
             , ROUND(DECODE(SUM(NVL(B.SP_AMT,0)), 0, 0, SUM(NVL(B.MP_AMT,0)) / SUM(NVL(B.SP_AMT,0)) * 100), 2) AS P_RATE   /* 식재료율 - 계획 */
             , ROUND(DECODE(SUM(NVL(B.SR_AMT,0)), 0, 0, SUM(NVL(B.MR_AMT,0)) / SUM(NVL(B.SR_AMT,0)) * 100), 2) AS R_RATE   /* 식재료율 - 추정 */
<isEqual col="SELECT_TYPE" value="1">
             , ROUND(DECODE(SUM(NVL(C.SS_AMT, 0)), 0, 0, (SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0), 0))) / SUM(NVL(C.SS_AMT,0)) * 100), 2) AS S_RATE   /* 식재료율 - 실적 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="2">
             , ROUND(DECODE(SUM(NVL(C.SS_AMT_EST,0)+NVL(B.SR_AMT_EST,0)), 0, 0, (SUM(NVL(E.MS_AMT1_EST,0)+NVL(MR_AMT_EST,0)) - SUM(NVL(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0), 0))) / SUM(NVL(C.SS_AMT_EST,0)+NVL(B.SR_AMT_EST,0)) * 100), 2) AS S_RATE   /* 식재료율 - 실적 */
</isEqual>     
			 , SUM(NVL(H.IP_RATE,0)) AS IP_RATE
             , SUM(NVL(E.IS_AMT,0)) AS IS_AMT
             , SUM(NVL(J.EXPECT_SALE,0)) AS EXPECT_SALE
             , SUM(NVL(J.EXPECT_COST,0)) AS EXPECT_COST
             , ROUND(DECODE(SUM(NVL(J.EXPECT_SALE,0)),0,0,SUM(NVL(J.EXPECT_COST,0)) / SUM(NVL(J.EXPECT_SALE,0))) * 100,1) AS EXPECT_RATE
          FROM (
                /* 일자 기준정보 */
                SELECT A.FDAY AS BASE_DD
                     , A.WEEK_NAME
                     , DECODE(A.WEEK_NAME,'일','FFCC00','토','99CCFF','FFFFFF') AS WE_COLOR
                  FROM (SELECT FDAY
                             , TO_CHAR(TO_DATE(FDAY, 'YYYYMMDD'), 'DY', 'NLS_DATE_LANGUAGE=KOREAN') AS WEEK_NAME
                          FROM (SELECT TO_CHAR(TO_DATE(#START_DATE#, 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS FDAY
                                  FROM DUAL
                                CONNECT BY LEVEL &lt;= TO_DATE(#END_DATE#, 'YYYYMMDD') - TO_DATE(#START_DATE#, 'YYYYMMDD') + 1)) A
               ) A
             , (
		        /* 매출 - 식음료매출 계획(P), 추정(R) */
		        SELECT BASE_DD
		             , NVL(SUM(PAMT), 0) AS SP_AMT
		             , NVL(SUM(RAMT), 0) AS SR_AMT
		             , NVL(SUM(MP_AMT), 0) AS MP_AMT
		             , NVL(SUM(MR_AMT), 0) AS MR_AMT
		             , NVL(SUM(PAMT_EST), 0) AS SP_AMT_EST
		             , NVL(SUM(RAMT_EST), 0) AS SR_AMT_EST
		             , NVL(SUM(MP_AMT_EST), 0) AS MP_AMT_EST
		             , NVL(SUM(MR_AMT_EST), 0) AS MR_AMT_EST
		          FROM (
		                SELECT B.YMD AS BASE_DD
		<isEqual col="GBN" value="1">
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS PAMT
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS RAMT
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS MP_AMT
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS MR_AMT
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS PAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS RAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MP_AMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MR_AMT_EST
		</isEqual>
		<isEqual col="GBN" value="2">
                             , CASE WHEN B.ACCT_CD IN ('41201020') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS PAMT
                             , CASE WHEN B.ACCT_CD IN ('41201020') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS RAMT
                             , CASE WHEN B.ACCT_CD IN ('42201020') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS MP_AMT
                             , CASE WHEN B.ACCT_CD IN ('42201020') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS MR_AMT
                             , CASE WHEN B.ACCT_CD IN ('41201020') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS PAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('41201020') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS RAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42201020') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MP_AMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42201020') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MR_AMT_EST
		</isEqual>
		<isEqual col="GBN" value="3">
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS PAMT
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS RAMT
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030','42201020') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS MP_AMT
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030','42201020') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS MR_AMT
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS PAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS RAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030','42201020') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MP_AMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030','42201020') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MR_AMT_EST
		</isEqual>
			              FROM MAP_DAY_LOG_MGMT A
		                     , MAP_DAY_PLAN B
		                 WHERE A.UPJANG = B.UPJANG
        <isNotNull col="UPJANG">
		                   AND B.UPJANG = #UPJANG#
		</isNotNull>
                           AND A.YY = B.YY
		                   AND A.MM = B.MM
		                   AND A.DAY_CLASS = B.DAY_CLASS
		                   AND A.CONFIRM_YN = 'Y'
		                   AND B.YMD BETWEEN #START_DATE# AND #END_DATE#
		<isEqual col="GBN" value="1">
		                   /* 41203010:[매출액]식음료매출_식료, 41203020:[매출액]식음료매출_음료, 41203030:[매출액]식음료매출(FS) */                   
	 	                   /* 42203010:[재료비]식음료원가_식료, 42203020:[재료비]식음료원가_음료, 42203030:[재료비]식음료원가(FS) */
		                   AND B.ACCT_CD IN ('41203010', '41203020', '41203030','42203010', '42203020', '42203030')
		</isEqual>
		<isEqual col="GBN" value="2">
		                   /* 41201020:[매출액]상품매출_슈퍼매점 */
		                   /* 41201020:[재료비]상품원가_슈퍼매점 */
		                   AND B.ACCT_CD IN ('41201020','42201020')    
		</isEqual> 
		<isEqual col="GBN" value="3">
		                   /* 전체 */
		                   AND B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020','42203010', '42203020', '42203030','42201020') 
		</isEqual>                        
                )
         		GROUP BY BASE_DD    
               ) B
             , (
		        /* 매출 - 식음료매출 실적 (내부이용포함) */
		        SELECT A.OCCUR_DATE AS BASE_DD
		             , SUM(B.NET_AMT) AS SS_AMT
		             , SUM(CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD') &gt; B.OCCUR_DATE THEN B.NET_AMT ELSE 0 END) AS SS_AMT_EST /* 추정 */
		          FROM SLA_IF_UPJANG_SALS_MST A
		             , SLA_IF_UPJANG_SALS_DETAIL B
		         WHERE A.OCCUR_DATE = B.OCCUR_DATE
		           AND A.SYS_CLASS = B.SYS_CLASS
		           AND A.UPJANG_CD = B.UPJANG_CD
	               AND B.RECD_STATUS = 'L'
		<isNotNull col="UPJANG">
		           AND A.UPJANG_CD = #UPJANG#
		</isNotNull>
		           AND A.OCCUR_DATE BETWEEN #START_DATE# AND #END_DATE#
		           AND A.RECEIPT_NUM = B.RECEIPT_NUM
		<isEqual col="GBN" value="1">
	               /* 1103:[FS사업]식음료매출(FS), 1106:[FS사업]기타매출_기타, 1204:[외식사업]식음료매출_식료, 1205:[외식사업]식음료매출_음료, 2001:[매점POS]식음료매출(FS), 2101:[외식POS]식음료매출_식료, 2102:[외식POS]식음료매출_음료 */
         	       AND B.SALS_CLASS IN ('1108','1103', '2001', '2002', '1106', '1204', '1205', '2101', '2102','1901','1113','2003','1206','2103') 
		</isEqual>
		<isEqual col="GBN" value="2">
		           /* 1102:[FS사업]상품매출_슈퍼매점, 1111:[FS사업]상품(-)매출_슈퍼매점, 2004:[매점POS]상품매출_슈퍼매점 */
		           AND B.SALS_CLASS IN ('1102', '1111', '2004') 
		</isEqual>        
		<isEqual col="GBN" value="3">
		          AND B.SALS_CLASS IN ('1108','1103', '2001', '2002', '1106', '1204', '1205', '2101', '2102','1901','1113','2003','1206','2103','1102', '1111', '2004') 
		</isEqual>     
		         GROUP BY A.OCCUR_DATE
               ) C
             , (
SELECT BASE_DD,
       MS_AMT1,
       MS_AMT2,
       MS_AMT1_EST,
       NVL(NVL(NVL(NVL(NVL(NVL(NVL(
       NVL(NVL(NVL(NVL(NVL(NVL(NVL(
       NVL(NVL(NVL(NVL(NVL(NVL(NVL(
       NVL(NVL(NVL(NVL(NVL(NVL(NVL(
       NVL(NVL(NVL(
       NVL(IS_AMT,
       NVL(LAG(IS_AMT,1) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,2) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,3) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,4) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,5) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,6) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,7) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,8) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,9) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,10) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,11) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,12) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,13) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,14) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,15) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,16) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,17) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,18) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,19) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,20) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,21) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,22) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,23) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,24) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,25) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,26) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,27) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,28) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,29) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,30) OVER(ORDER BY BASE_DD),
       NVL(LAG(IS_AMT,31) OVER(ORDER BY BASE_DD),
       LAG(IS_AMT,2) OVER(ORDER BY BASE_DD)
       )))
       )))))))
       )))))))
       )))))))
       ))))))))
       ,LEAD(B_AMT,1) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,2) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,3) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,4) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,5) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,6) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,7) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,8) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,9) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,10) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,11) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,12) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,13) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,14) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,15) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,16) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,17) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,18) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,19) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,20) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,21) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,22) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,23) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,24) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,25) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,26) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,27) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,28) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,29) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,30) OVER(ORDER BY BASE_DD))
       ,LEAD(B_AMT,31) OVER(ORDER BY BASE_DD))
       AS IS_AMT
  FROM (
SELECT A.BASE_DD,
       MS_AMT1,
       MS_AMT2,
       MS_AMT1_EST,
       B_AMT,
       B_AMT + SUM(P_AMT) OVER(ORDER BY TRANS_DATE ROWS UNBOUNDED PRECEDING) + SUM(M_AMT) OVER(ORDER BY TRANS_DATE ROWS UNBOUNDED PRECEDING) - M_AMT2 AS IS_AMT
  FROM (
                /* 일자 기준정보 */
                SELECT A.FDAY AS BASE_DD
                     , A.WEEK_NAME
                     , DECODE(A.WEEK_NAME,'일','FFCC00','토','99CCFF','FFFFFF') AS WE_COLOR
                  FROM (SELECT FDAY
                             , TO_CHAR(TO_DATE(FDAY, 'YYYYMMDD'), 'DY', 'NLS_DATE_LANGUAGE=KOREAN') AS WEEK_NAME
                          FROM (SELECT TO_CHAR(TO_DATE(#START_DATE#, 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS FDAY
                                  FROM DUAL
                                CONNECT BY LEVEL &lt;= TO_DATE(#END_DATE#, 'YYYYMMDD') - TO_DATE(#START_DATE#, 'YYYYMMDD') + 1)) A
       ) A,
(SELECT TRANS_DATE
		<isEqual col="PRICE_TYPE" value="1">
			<isEqual col="GBN" value="1">
     , SUM(FOOD_MS_AMT1)         AS MS_AMT1
     , SUM(FOOD_MS_AMT1_EST)     AS MS_AMT1_EST
     , SUM(FOOD_MS_AMT2)         AS MS_AMT2
     , SUM(FOOD_P_AMT)           AS P_AMT
     , NVL(LAG(SUM(FOOD_M_AMT)) OVER(ORDER BY TRANS_DATE),0) AS M_AMT
     , SUM(FOOD_M_AMT2)          AS M_AMT2
     , MAX(TO_NUMBER(NVL(SPLITDATA_FUN(B_AMT,0),'0'))) AS B_AMT
			</isEqual>
			<isEqual col="GBN" value="2">
     , SUM(GOODS_MS_AMT1)         AS MS_AMT1
     , SUM(GOODS_MS_AMT1_EST)     AS MS_AMT1_EST
     , SUM(GOODS_MS_AMT2)         AS MS_AMT2
     , SUM(GOODS_P_AMT)           AS P_AMT
     , NVL(LAG(SUM(GOODS_M_AMT)) OVER(ORDER BY TRANS_DATE),0) AS M_AMT
     , SUM(GOODS_M_AMT2)          AS M_AMT2
     , MAX(TO_NUMBER(NVL(SPLITDATA_FUN(B_AMT,1),'0'))) AS B_AMT
			</isEqual>
			<isEqual col="GBN" value="3">
     , SUM(TOT_MS_AMT1)         AS MS_AMT1
     , SUM(TOT_MS_AMT1_EST)     AS MS_AMT1_EST
     , SUM(TOT_MS_AMT2)         AS MS_AMT2
     , SUM(TOT_P_AMT)           AS P_AMT
     , NVL(LAG(SUM(TOT_M_AMT)) OVER(ORDER BY TRANS_DATE),0) AS M_AMT
     , SUM(TOT_M_AMT2)          AS M_AMT2
     , MAX(TO_NUMBER(NVL(SPLITDATA_FUN(B_AMT,2),'0'))) AS B_AMT
			</isEqual>
		</isEqual>
		<isEqual col="PRICE_TYPE" value="2">
			<isEqual col="GBN" value="1">
     , SUM(FOOD_MS_AMT1_J)      AS MS_AMT1
     , SUM(FOOD_MS_AMT1_EST_J)  AS MS_AMT1_EST
     , SUM(FOOD_MS_AMT2_J)      AS MS_AMT2
     , SUM(FOOD_P_AMT_J)        AS P_AMT
     , NVL(LAG(SUM(FOOD_M_AMT_J)) OVER(ORDER BY TRANS_DATE),0) AS M_AMT
     , SUM(FOOD_M_AMT2_J)       AS M_AMT2
     , MAX(TO_NUMBER(NVL(SPLITDATA_FUN(B_AMT,3),'0'))) AS B_AMT
			</isEqual>
			<isEqual col="GBN" value="2">
     , SUM(GOODS_MS_AMT1_J)     AS MS_AMT1
     , SUM(GOODS_MS_AMT1_EST_J) AS MS_AMT1_EST
     , SUM(GOODS_MS_AMT2_J)     AS MS_AMT2
     , SUM(GOODS_P_AMT_J)       AS P_AMT
     , NVL(LAG(SUM(GOODS_M_AMT_J)) OVER(ORDER BY TRANS_DATE),0) AS M_AMT
     , SUM(GOODS_M_AMT2_J)      AS M_AMT2
     , MAX(TO_NUMBER(NVL(SPLITDATA_FUN(B_AMT,4),'0'))) AS B_AMT
			</isEqual>
			<isEqual col="GBN" value="3">
     , SUM(TOT_MS_AMT1_J)       AS MS_AMT1
     , SUM(TOT_MS_AMT1_EST_J)   AS MS_AMT1_EST
     , SUM(TOT_MS_AMT2_J)       AS MS_AMT2
     , SUM(TOT_P_AMT_J)         AS P_AMT
     , NVL(LAG(SUM(TOT_M_AMT_J)) OVER(ORDER BY TRANS_DATE),0) AS M_AMT
     , SUM(TOT_M_AMT2_J)        AS M_AMT2
     , MAX(TO_NUMBER(NVL(SPLITDATA_FUN(B_AMT,5),'0'))) AS B_AMT
			</isEqual>
		</isEqual>
  FROM FSM_ESIMG_SUM A
<isNotNull col="TM_CD">
      ,SCO_UPJANG_MST_V G
</isNotNull>
 WHERE TRANS_DATE BETWEEN #START_DATE# AND #END_DATE#
<isNotNull col="UPJANG">
   AND TRANS_UPJANG = #UPJANG#
</isNotNull>
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
   AND TRANS_UPJANG IN (#ds_upjangList.UPJANG$#)
</isLessEqual>
</isGreaterThan>
<isNotNull col="TM_CD">
   AND A.TRANS_UPJANG = G.UPJANG
   AND G.TM_CD LIKE #TM_CD# || '%'
</isNotNull>
GROUP BY TRANS_DATE) B
  WHERE A.BASE_DD = B.TRANS_DATE(+)
  )
               ) E
             , (
                /* 복리후생 식대비 - 일수로 Split */
                SELECT ROUND(NVL(SUM(AMT), 0) / TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE(#START_DATE#,'YYYYMMDD')), 'DD')), 0) AS MS_AMT3
                  FROM MAS_WELFARE
                 WHERE APPLY_MM = TO_CHAR(TO_DATE(#START_DATE#, 'YYYYMMDD'), 'YYYYMM')
		<isNotNull col="UPJANG">
	               AND UPJANG = #UPJANG#
		</isNotNull>
               ) G
             , (
                /* 목표재고비율 */
                SELECT #START_DATE# AS BASE_DD
                     , GOAL_RATE AS IP_RATE
                  FROM FSA_STOCK_GOAL_SET
                 WHERE GOAL_MM = SUBSTR(#START_DATE#, 1, 6)
		<isNotNull col="UPJANG">
	               AND UPJANG = #UPJANG#
		</isNotNull>
               ) H
             , (
                SELECT BASE_DD
                     , SUM(EXPECT_COST) EXPECT_COST
                     , SUM(SALE_AMT) EXPECT_SALE
                  FROM (
                        SELECT A.MENU_DATE AS BASE_DD
                             , SUM(A.SALE_PRICE * A.EXPECT_MEAL_QTY) SALE_AMT
                             , 0 EXPECT_COST
                          FROM FSM_REAL_MENU_MST A
                             , SCC_COMMON_CODE B
                         WHERE SUBSTR(A.HALL_CD,1,3) = B.CODE
                           AND B.GROUP_CODE= 'FS0019'
		<isNotNull col="UPJANG">
				           AND A.UPJANG = #UPJANG#
		</isNotNull>
						   AND A.MENU_DATE BETWEEN #START_DATE# AND #END_DATE#                                                                                                               
                           AND B.ATTR02 &lt;&gt; 'Y'                                                                                                                                                               
		                   AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                         GROUP BY A.MENU_DATE
                        UNION ALL
                        SELECT A.MENU_DATE AS BASE_DD
                             , SUM(C.SALE_PRICE * C.EXPECT_SALE_QTY) SALE_AMT
                             , 0 EXPECT_COST
                          FROM FSM_REAL_MENU_MST A
                             , SCC_COMMON_CODE B
                             , FSM_REAL_RECIPE_MST C
                         WHERE SUBSTR(A.HALL_CD,1,3) = B.CODE
                           AND A.UPJANG = C.UPJANG
		<isNotNull col="UPJANG">
				           AND A.UPJANG = #UPJANG#
		</isNotNull>
		                   AND A.MENU_CD = C.MENU_CD
                           AND B.GROUP_CODE = 'FS0019'
                           AND A.MENU_DATE BETWEEN #START_DATE# AND #END_DATE#
                           AND B.ATTR02 = 'Y'
                           AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                         GROUP BY A.MENU_DATE
                        UNION ALL
	                        SELECT A.MENU_DATE AS BASE_DD
	                             , 0
	                             , ROUND(SUM((C.NEED_QTY * ROUND((C.MARGIN_PRICE / D.KG_CONVERT_RATE / 1000), 2)) * DECODE(E.ATTR02,'Y', B.EXPECT_SALE_QTY, DECODE(E.SET3, 'Y', B.EXPECT_SALE_QTY, A.EXPECT_MEAL_QTY)))) AS EXPECT_COST
	                          FROM FSM_REAL_MENU_MST A
	                             , FSM_REAL_RECIPE_MST B
	                             , FSM_REAL_RECIPE_ITEM C
	                             , HLDC_PO_ITEM_MST D
	                             , (SELECT * FROM SCC_COMMON_CODE WHERE GROUP_CODE= 'FS0019') E
		<isNotNull col="TM_CD">
                                 , SCC_CC F
                                 , ST_UPJANGV G                                                                                                                                                  
		</isNotNull>
	                         WHERE A.UPJANG = B.UPJANG
		<isNotNull col="UPJANG">
	                           AND A.UPJANG = #UPJANG#
		</isNotNull>
		                       AND A.MENU_CD = B.MENU_CD
		<isNotNull col="TM_CD">
                               AND B.UPJANG = G.UPJANG 
                               AND F.CC_CD = G.CC_CD
                               AND F.ORG_LEVEL_CD4 LIKE #TM_CD# || '%'  
		</isNotNull>
	                           AND B.UPJANG = C.UPJANG
	                           AND B.MENU_CD = C.MENU_CD
	                           AND B.RECIPE_CD = C.RECIPE_CD
	                           AND SUBSTR(A.HALL_CD,1,3) = E.CODE
	                           AND A.MENU_DATE BETWEEN #START_DATE# AND #END_DATE#
	                           AND C.ITEM_CODE = D.ITEM_CODE
                           GROUP BY A.MENU_DATE
                       )
                 GROUP BY BASE_DD
               ) J
         WHERE A.BASE_DD = B.BASE_DD(+)
           AND A.BASE_DD = C.BASE_DD(+)
           AND A.BASE_DD = E.BASE_DD(+)
           AND A.BASE_DD = H.BASE_DD(+)
           AND A.BASE_DD = J.BASE_DD(+)
         GROUP BY A.BASE_DD, A.WEEK_NAME, A.WE_COLOR
       )     
    </statement>
	<input default-name="ds_cond">
	</input>
	<output default-name="ds_dailyList">
	</output>
</query>
