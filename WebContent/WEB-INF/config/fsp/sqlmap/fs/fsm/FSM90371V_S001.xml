<?xml version="1.0" encoding="euc-kr"?>
<query dynamic="true">
	<type>select</type>
	<description><![CDATA[식재료율실적예상-상단]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>
SELECT SP_AMT
     , SR_AMT
     , SS_AMT
     , MP_AMT
     , MR_AMT
     , MS_AMT
     , P_RATE
     , R_RATE
     , S_RATE
     , SP_AMT - SS_AMT AS SDP_VAL                                  /* 매출액 - 계획대비 - 차이 */
     , DECODE(SP_AMT, 0, 0, SS_AMT / SP_AMT * 100) AS SDP_RATE     /* 매출액 - 계획대비 - 비율 */
     , SR_AMT - SS_AMT AS SDR_VAL                                  /* 매출액 - 추정대비 - 차이 */
     , DECODE(SR_AMT, 0, 0, SS_AMT / SR_AMT * 100) AS SDR_RATE     /* 매출액 - 추정대비 - 비율 */
     , MP_AMT - MS_AMT AS MDP_VAL                                  /* 식재료비 - 계획대비 - 차이 */
     , DECODE(MP_AMT, 0, 0, MS_AMT / MP_AMT * 100) AS MDP_RATE     /* 식재료비 - 계획대비 - 비율 */
     , MS_AMT - MR_AMT AS MDR_VAL                                  /* 식재료비 - 추정대비 - 차이 */
     , DECODE(MR_AMT, 0, 0, MS_AMT / MR_AMT * 100) AS MDR_RATE     /* 식재료비 - 추정대비 - 비율 */
     , P_RATE - S_RATE AS RDP_RATE                                 /* 식재료비율 - 계획대비 - 차이(%P) */
     , R_RATE - S_RATE AS RDR_RATE                                 /* 식재료비율 - 추정대비 - 차이(%P) */
     , IP_RATE AS IP_RATE                                          /* 재고비율 - 계획 */
     , DECODE(MS_AMT, 0, 0, IS_AMT / MS_AMT * 100) AS IS_RATE      /* 재고비율 - 실적 */
     , IP_RATE - DECODE(MS_AMT, 0, 0, IS_AMT / MS_AMT * 100) AS IDP_RATE    /* 재고비율 - 계획대비 - 차이(%P) */
  FROM (
        SELECT
        <isEqual col="PRICE_TYPE" value="1">
               SUM(NVL(B.SP_AMT,0)) AS SP_AMT     /* 매출액 - 식음료매출 계획 */
             , SUM(NVL(B.SR_AMT,0)) AS SR_AMT     /* 매출액 - 식음료매출 추정 */
             , SUM(NVL(C.SS_AMT,0)) AS SS_AMT     /* 매출액 - 식음료매출 실적 */
             , SUM(NVL(D.MP_AMT,0)) AS MP_AMT     /* 재료비 - 식음료원가 계획 */
             , SUM(NVL(D.MR_AMT,0)) AS MR_AMT     /* 재료비 - 식음료원가 추정 */
             , SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(G.MS_AMT3, 0)) AS MS_AMT     /* 재료비 - 식음료매출 실적 */
             , SUM(NVL(E.MS_AMT1,0)) AS MS_AMT1   /* 식음료매출 실적 - 전산구매 */
             , SUM(NVL(F.MS_AMT2,0)) AS MS_AMT2   /* 식음료매출 실적 - 현지구매 */
             , SUM(NVL(G.MS_AMT3,0)) AS MS_AMT3   /* 식음료매출 실적 - 복리후생식대비 */
             , ROUND(DECODE(SUM(NVL(B.SP_AMT,0)), 0, 0, SUM(NVL(D.MP_AMT,0)) / SUM(NVL(B.SP_AMT,0)) * 100), 2) AS P_RATE   /* 식재료율 - 계획 */
             , ROUND(DECODE(SUM(NVL(B.SR_AMT,0)), 0, 0, SUM(NVL(D.MR_AMT,0)) / SUM(NVL(B.SR_AMT,0)) * 100), 2) AS R_RATE   /* 식재료율 - 추정 */
             , ROUND(DECODE(SUM(NVL(C.SS_AMT, 0)), 0, 0, (SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(G.MS_AMT3, 0))) / SUM(NVL(C.SS_AMT,0)) * 100), 2) AS S_RATE   /* 식재료율 - 실적 */
             , SUM(NVL(H.IP_RATE,0)) AS IP_RATE
             , SUM(NVL(I.IS_AMT,0)) AS IS_AMT
        </isEqual>
        <isEqual col="PRICE_TYPE" value="2">
               SUM(NVL(B.SP_AMT,0)) AS SP_AMT     /* 매출액 - 식음료매출 계획 */
             , SUM(NVL(B.SR_AMT,0)) AS SR_AMT     /* 매출액 - 식음료매출 추정 */
             , SUM(NVL(C.SS_AMT,0)) AS SS_AMT     /* 매출액 - 식음료매출 실적 */
             , SUM(NVL(D.MP_AMT,0)) AS MP_AMT     /* 재료비 - 식음료원가 계획 */
             , SUM(NVL(D.MR_AMT,0)) AS MR_AMT     /* 재료비 - 식음료원가 추정 */
             , SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(G.MS_AMT3, 0)) AS MS_AMT     /* 재료비 - 식음료매출 실적 */
             , SUM(NVL(E.MS_AMT1,0)) AS MS_AMT1   /* 식음료매출 실적 - 전산구매 */
             , SUM(NVL(F.MS_AMT2,0)) AS MS_AMT2   /* 식음료매출 실적 - 현지구매 */
             , SUM(NVL(G.MS_AMT3,0)) AS MS_AMT3   /* 식음료매출 실적 - 복리후생식대비 */
             , ROUND(DECODE(SUM(NVL(B.SP_AMT,0)), 0, 0, SUM(NVL(D.MP_AMT,0)) / SUM(NVL(B.SP_AMT,0)) * 100), 2) AS P_RATE   /* 식재료율 - 계획 */
             , ROUND(DECODE(SUM(NVL(B.SR_AMT,0)), 0, 0, SUM(NVL(D.MR_AMT,0)) / SUM(NVL(B.SR_AMT,0)) * 100), 2) AS R_RATE   /* 식재료율 - 추정 */
             , ROUND(DECODE(SUM(NVL(C.SS_AMT, 0)), 0, 0, (SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(G.MS_AMT3, 0))) / SUM(NVL(C.SS_AMT,0)) * 100), 2) AS S_RATE   /* 식재료율 - 실적 */
             , SUM(NVL(H.IP_RATE,0)) AS IP_RATE
             , SUM(NVL(I.IS_AMT,0)) AS IS_AMT
        </isEqual>
             , SUM(NVL(J.EXPECT_SALE,0)) AS EXPECT_SALE
             , SUM(NVL(J.EXPECT_COST,0)) AS EXPECT_COST
             , SUM(NVL(J.EXPECT_RATE,0)) AS EXPECT_RATE
          FROM (
                /* 일자 기준정보 */
                SELECT A.FDAY AS BASE_DD
                     , A.WEEK_NAME
                     , DECODE(A.WEEK_NAME,'일','FFCC00','토','99CCFF','FFFFFF') AS WE_COLOR
                  FROM (SELECT FDAY
                             , TO_CHAR(TO_DATE(FDAY, 'YYYYMMDD'), 'DY', 'NLS_DATE_LANGUAGE=KOREAN') AS WEEK_NAME
                          FROM (SELECT TO_CHAR(TO_DATE(#START_DATE#, 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS FDAY
                                  FROM DUAL
                                CONNECT BY LEVEL &lt;= TO_DATE(#END_DATE#, 'YYYYMMDD') - TO_DATE(#START_DATE#, 'YYYYMMDD') + 1)) A
               ) A
             , (
                /* 매출 - 식음료매출 계획(P), 추정(R) */
                SELECT YMD AS BASE_DD
                     , NVL(SUM(PAMT), 0) AS SP_AMT
                     , NVL(SUM(RAMT), 0) AS SR_AMT
                  FROM (
                        SELECT B.YMD
                             , DECODE(B.DAY_CLASS, 'P', SUM(B.DD_AMT), 0) AS PAMT
                             , DECODE(B.DAY_CLASS, 'R', SUM(B.DD_AMT), 0) AS RAMT
                          FROM MAP_DAY_LOG_MGMT A
                             , MAP_DAY_PLAN B
                         WHERE A.UPJANG = B.UPJANG
                           AND B.UPJANG = #UPJANG#
                           AND A.YY = B.YY
                           AND A.MM = B.MM
                           AND A.DAY_CLASS = B.DAY_CLASS
                           AND A.CONFIRM_YN = 'Y'
                           AND B.YMD BETWEEN #START_DATE# AND #END_DATE#
        <isEqual col="GBN" value="1">
                           /* 41203010:[매출액]식음료매출_식료, 41203020:[매출액]식음료매출_음료, 41203030:[매출액]식음료매출(FS) */
                           AND B.ACCT_CD IN ('41203010', '41203020', '41203030')
        </isEqual>
        <isEqual col="GBN" value="2">
                           /* 41201020:[매출액]상품매출_슈퍼매점 */
                           AND B.ACCT_CD = ('41201020')
        </isEqual>
                         GROUP BY YMD, B.DAY_CLASS
                        )
                 GROUP BY YMD
               ) B
             , (
                /* 매출 - 식음료매출 실적 (내부이용포함) */
                SELECT A.OCCUR_DATE AS BASE_DD
                     , SUM(B.NET_AMT) AS SS_AMT
                  FROM SLA_IF_UPJANG_SALS_MST A
                     , SLA_IF_UPJANG_SALS_DETAIL B
                 WHERE A.OCCUR_DATE = B.OCCUR_DATE
                   AND A.SYS_CLASS = B.SYS_CLASS
                   AND A.UPJANG_CD = B.UPJANG_CD
                   AND A.UPJANG_CD = #UPJANG#
                   AND A.OCCUR_DATE BETWEEN #START_DATE# AND #END_DATE#
                   AND A.RECEIPT_NUM = B.RECEIPT_NUM
        <isEqual col="GBN" value="1">
                   /* 1103:[FS사업]식음료매출(FS), 1106:[FS사업]기타매출_기타, 1204:[외식사업]식음료매출_식료, 1205:[외식사업]식음료매출_음료, 2001:[매점POS]식음료매출(FS), 2101:[외식POS]식음료매출_식료, 2102:[외식POS]식음료매출_음료 */
                   AND B.SALS_CLASS IN ('1103', '2001', '2002', '1106', '1204', '1205', '2101', '2102')
        </isEqual>
        <isEqual col="GBN" value="2">
                   /* 1102:[FS사업]상품매출_슈퍼매점, 1111:[FS사업]상품(-)매출_슈퍼매점, 2004:[매점POS]상품매출_슈퍼매점 */
                   AND B.SALS_CLASS IN ('1102', '1111', '2004')
        </isEqual>
                 GROUP BY A.OCCUR_DATE
               ) C
             , (
                /* 재료비 - 식음료원가 계획, 추정 */
                SELECT YMD AS BASE_DD
                     , NVL(SUM(PAMT), 0) AS MP_AMT
                     , NVL(SUM(RAMT), 0) AS MR_AMT
                  FROM (
                        SELECT B.YMD
                             , DECODE(B.DAY_CLASS, 'P', SUM(B.DD_AMT), 0) AS PAMT
                             , DECODE(B.DAY_CLASS, 'R', SUM(B.DD_AMT), 0) AS RAMT
                          FROM MAP_DAY_LOG_MGMT A
                             , MAP_DAY_PLAN B
                         WHERE A.UPJANG = B.UPJANG
                           AND B.UPJANG = #UPJANG#
                           AND A.YY = B.YY
                           AND A.MM = B.MM
                           AND A.DAY_CLASS = B.DAY_CLASS
                           AND A.CONFIRM_YN = 'Y'
                           AND B.YMD BETWEEN #START_DATE# AND #END_DATE#
        <isEqual col="GBN" value="1">
                           /* 42203010:[재료비]식음료원가_식료, 42203020:[재료비]식음료원가_음료, 42203030:[재료비]식음료원가(FS) */
                           AND B.ACCT_CD IN ('42203010', '42203020', '42203030')
        </isEqual>
        <isEqual col="GBN" value="2">
                           /* 41201020:[재료비]상품원가_슈퍼매점 */
                           AND B.ACCT_CD IN ('42201020')
        </isEqual>
                         GROUP BY YMD, B.DAY_CLASS
                        )
                 GROUP BY YMD
               ) D
             , (
                /* 재료비 - 실적 - 전산구매 */
                SELECT /*+ USE_NL(A.HD A.DT) */ TRANS_DATE AS BASE_DD
        <isEqual col="PRICE_TYPE" value="1">
                     , ROUND(NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( MARGIN_AMOUNT ) ), 0)) AS MS_AMT1
        </isEqual>
        <isEqual col="PRICE_TYPE" value="2">
                     , ROUND(NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( UNIT_AMOUNT ) ), 0)) AS MS_AMT1
        </isEqual>
                  FROM HLDC_PO_TRANSACTION A
                     , HLDC_PO_SUBINVENTORY B
                 WHERE A.SUBINV_CODE = B.SUBINV_CODE
                   AND A.TRANS_DATE BETWEEN #START_DATE# AND #END_DATE#
                   AND A.TRANS_UPJANG = #UPJANG#
                   AND A.TRANS_TYPE LIKE 'O%'        -- 출고
                   AND A.TRANS_TYPE &lt;&gt; 'O002'  -- 이동출고 제외
        <isEqual col="GBN" value="1">
                   /* 42203010:[재료비]식음료원가_식료, 42203020:[재료비]식음료원가_음료, 42203030:[재료비]식음료원가(FS) */
                   AND A.ACCTCD IN ('42203010', '42203020', '42203030')
        </isEqual>
        <isEqual col="GBN" value="2">
                   /* 41201020:[재료비]상품원가_슈퍼매점 */
                   AND A.ACCTCD IN ('42201020')
        </isEqual>
                 GROUP BY TRANS_DATE, B.OUTVAT_FLAG
               ) E
             , (
                /* 재료비 - 실적 - 현재구매 */
                SELECT /*+ USE_NL(A.HD A.DT) */ TRANS_DATE AS BASE_DD
        <isEqual col="PRICE_TYPE" value="1">
                     , ROUND(NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( MARGIN_AMOUNT ) ), 0)) AS MS_AMT2
        </isEqual>
        <isEqual col="PRICE_TYPE" value="2">
                     , ROUND(NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( UNIT_AMOUNT ) ), 0)) AS MS_AMT2
        </isEqual>
                  FROM HLDC_PO_TRANSACTION A
                     , HLDC_PO_SUBINVENTORY B
                 WHERE A.SUBINV_CODE = B.SUBINV_CODE
                   AND A.TRANS_DATE BETWEEN #START_DATE# AND #END_DATE#
                   AND A.TRANS_UPJANG = #UPJANG#
                   AND A.TRANS_TYPE LIKE 'I%'        -- 입고
                   AND A.PO_TYP = 'BP'               -- BP : 정산용, UP : 전산구매
        <isEqual col="GBN" value="1">
                   AND A.ITEM_CODE LIKE 'F%'         -- 식재료
        </isEqual>
        <isEqual col="GBN" value="2">
                   AND A.ITEM_CODE LIKE 'A%'
        </isEqual>
                 GROUP BY TRANS_DATE, B.OUTVAT_FLAG
               ) F
             , (
                /* 복리후생 식대비 - 일수로 Split */
                SELECT ROUND(NVL(SUM(AMT), 0) / TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE(#START_DATE#)), 'DD')), 0) AS MS_AMT3
                  FROM MAS_WELFARE
                 WHERE UPJANG = #UPJANG#
                   AND APPLY_MM = TO_CHAR(TO_DATE(#START_DATE#, 'YYYYMMDD'), 'YYYYMM')
               ) G
             , (
                /* 목표재고비율 */
                SELECT #START_DATE# AS BASE_DD
                     , GOAL_RATE AS IP_RATE
                  FROM FSA_STOCK_GOAL_SET
                 WHERE GOAL_MM = SUBSTR(#START_DATE#, 1, 6)
                   AND UPJANG = #UPJANG#
               ) H
             , (
                /* 재고실적금액 */
                SELECT A.BASE_DD
                     , SUM(NVL(A.STOCK_AMT, 0)) OVER(PARTITION BY SUBSTR(A.BASE_DD, 0, 6) ORDER BY A.BASE_DD ASC) AS IS_AMT
                  FROM (
                        SELECT A.BASE_DD
                             , SUM(B.STOCK_AMT) AS STOCK_AMT
                          FROM (
                                /* 일자 기준정보 */
                                SELECT A.FDAY AS BASE_DD
                                     , A.WEEK_NAME
                                     , DECODE(A.WEEK_NAME,'일','FFCC00','토','99CCFF','FFFFFF') AS WE_COLOR
                                  FROM (SELECT FDAY
                                             , TO_CHAR(TO_DATE(FDAY, 'YYYYMMDD'), 'DY', 'NLS_DATE_LANGUAGE=KOREAN') AS WEEK_NAME
                                          FROM (SELECT TO_CHAR(TO_DATE(#START_DATE#, 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS FDAY
                                                  FROM DUAL
                                                CONNECT BY LEVEL &lt;= TO_DATE(#END_DATE#, 'YYYYMMDD') - TO_DATE(#START_DATE#, 'YYYYMMDD') + 1)) A
                               ) A
                             , (
                                SELECT A.TRANS_DATE AS BASE_DD
        <isEqual col="PRICE_TYPE" value="1">
                                     , DECODE(SUBSTR(TRANS_TYPE, 1, 1), 'I', 1, -1) * NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( MARGIN_AMOUNT * DECODE( A.TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( MARGIN_AMOUNT ) ), 0) STOCK_AMT
        </isEqual>
        <isEqual col="PRICE_TYPE" value="2">
                                     , DECODE(SUBSTR(TRANS_TYPE, 1, 1), 'I', 1, -1) * NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( UNIT_AMOUNT * DECODE( A.TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( UNIT_AMOUNT ) ), 0) STOCK_AMT
        </isEqual>
                                  FROM HLDC_PO_TRANSACTION A
                                     , HLDC_PO_SUBINVENTORY B
                                     , HLDC_PO_ITEM_MST C
                                 WHERE A.SUBINV_CODE = B.SUBINV_CODE
                                   AND A.ITEM_CODE = C.ITEM_CODE
                                   AND A.TRANS_DATE BETWEEN #START_DATE# AND #END_DATE#
                                   AND A.TRANS_UPJANG = #UPJANG#
                                   AND B.MATERIAL_ACCTCD = '11402000'
                                 GROUP BY A.TRANS_DATE, B.OUTVAT_FLAG, SUBSTR(TRANS_TYPE, 1, 1)
                                 UNION ALL
                                SELECT #START_DATE# AS BASE
        <isEqual col="PRICE_TYPE" value="1">
                                     , NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( MARGIN_AMOUNT ) ), 0) STOCK_AMT
        </isEqual>
        <isEqual col="PRICE_TYPE" value="2">
                                     , NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( UNIT_AMOUNT ) ), 0) STOCK_AMT
        </isEqual>
                                  FROM HLDC_PO_ONHAND_MONTH A
                                     , HLDC_PO_SUBINVENTORY B
                                     , HLDC_PO_ITEM_MST C
                                 WHERE A.SUBINV_CODE = B.SUBINV_CODE
                                   AND A.ITEM_CODE = C.ITEM_CODE
                                   AND A.ONHAND_YM = (SELECT MAX(CLS_YM) FROM HLDC_PO_CLOSING WHERE CLS_FLAG = 'Y' AND SUBINV_CODE = A.SUBINV_CODE AND CLS_YM &lt; SUBSTR(#START_DATE#, 0, 6))
                                   AND B.UPJANG = #UPJANG#
                                   AND B.MATERIAL_ACCTCD = '11402000'
                                 GROUP BY B.OUTVAT_FLAG
                               ) B
                           WHERE A.BASE_DD = B.BASE_DD(+)
                           GROUP BY A.BASE_DD
                       ) A
                 GROUP BY A.BASE_DD, A.STOCK_AMT
               ) I
             , (
                /* 재고실적금액 */
                SELECT A.BASE_DD
                     , SUM(NVL(A.STOCK_AMT, 0)) AS IS_AMT
                  FROM (
                        SELECT A.BASE_DD
                             , SUM(B.STOCK_AMT) AS STOCK_AMT
                          FROM (
                                /* 일자 기준정보 */
                                SELECT A.FDAY AS BASE_DD
                                     , A.WEEK_NAME
                                     , DECODE(A.WEEK_NAME,'일','FFCC00','토','99CCFF','FFFFFF') AS WE_COLOR
                                  FROM (SELECT FDAY
                                             , TO_CHAR(TO_DATE(FDAY, 'YYYYMMDD'), 'DY', 'NLS_DATE_LANGUAGE=KOREAN') AS WEEK_NAME
                                          FROM (SELECT TO_CHAR(TO_DATE(#START_DATE#, 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS FDAY
                                                  FROM DUAL
                                                CONNECT BY LEVEL &lt;= TO_DATE(#END_DATE#, 'YYYYMMDD') - TO_DATE(#START_DATE#, 'YYYYMMDD') + 1)) A
                               ) A
                             , (
        						SELECT C.PHYSIC_DATE AS BASE_DD
        						<isEqual col="PRICE_TYPE" value="1">
        						     , ROUND(SUM(A.ONHAND_MAMOUNT - A.LOSS_MAMOUNT)) AS STOCK_AMT     -- 실사재고금액
        						</isEqual>
        						<isEqual col="PRICE_TYPE" value="2">
        						     , ROUND(SUM(A.ONHAND_UAMOUNT - A.LOSS_UAMOUNT)) AS STOCK_AMT     -- 실사금액(매입)
        						</isEqual>
        			              FROM HLDC_PO_PHYSICAL_INVENTORY A
        			                 , HLDC_PO_ITEM_MST B
        			                 , (SELECT DISTINCT
        			                           A.PHYSIC_ID
        			                         , A.PHYSIC_DATE
        			                         , A.CANCEL_YN
        			                      FROM HLDC_PO_PHYSICAL_INVENTORY A
        			                         , (SELECT PHYSIC_DATE
        			                                 , SUBINV_CODE
        			                                 , ITEM_CODE AS ITEM_CODE
        			                                 , MAX(UPDATE_DATE) AS UPDATE_DATE
        			                              FROM HLDC_PO_PHYSICAL_INVENTORY
        			                             WHERE PHYSIC_DATE BETWEEN #START_DATE# AND #END_DATE# -- 조사일
        			                               AND SUBINV_CODE IN (SELECT SUBINV_CODE FROM HLDC_PO_SUBINVENTORY WHERE UPJANG = #UPJANG# AND SUBINV_CODE LIKE 'C%')
        			                             GROUP BY PHYSIC_DATE, SUBINV_CODE, ITEM_CODE) B
        			                     WHERE A.PHYSIC_DATE = B.PHYSIC_DATE
        			                       AND A.SUBINV_CODE = B.SUBINV_CODE
        			                       AND A.ITEM_CODE = B.ITEM_CODE
        			                       AND A.UPDATE_DATE = B.UPDATE_DATE
        			                   ) C
        			             WHERE A.ITEM_CODE   = B.ITEM_CODE
        			               AND A.PHYSIC_ID   = C.PHYSIC_ID
        			               AND A.SUBINV_CODE IN (SELECT SUBINV_CODE FROM HLDC_PO_SUBINVENTORY WHERE UPJANG = #UPJANG#)
        			               AND A.PHYSIC_DATE BETWEEN #START_DATE# AND #END_DATE# -- 조사일
        			               AND (A.PHYSIC_QTY &lt;&gt; 0 OR A.LOSS_QTY &lt;&gt; 0)
        			               AND C.CANCEL_YN = 'N'
        			             GROUP BY C.PHYSIC_DATE
                               ) B
                           WHERE A.BASE_DD = B.BASE_DD(+)
                           GROUP BY A.BASE_DD
                       ) A
                 GROUP BY A.BASE_DD, A.STOCK_AMT
               ) I1
             , (
                SELECT BASE_DD
                     , ROUND(DECODE(SUM(SALE_AMT),0,0,SUM(EXPECT_COST) / SUM(SALE_AMT)) * 100,1) EXPECT_RATE
                     , SUM(EXPECT_COST) EXPECT_COST
                     , SUM(SALE_AMT) EXPECT_SALE
                  FROM (
                        SELECT A.MENU_DATE AS BASE_DD
                             , SUM(A.SALE_PRICE * A.EXPECT_MEAL_QTY) SALE_AMT
                             , 0 EXPECT_COST
                          FROM FSM_REAL_MENU_MST A
                             , SCC_COMMON_CODE B
                         WHERE SUBSTR(A.HALL_CD,1,3) = B.CODE
                           AND B.GROUP_CODE= 'FS0019'
                           AND A.MENU_DATE BETWEEN #START_DATE# AND #END_DATE#
                           AND A.UPJANG = #UPJANG#
                           AND B.ATTR02 &lt;&gt; 'Y'
                           AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                         GROUP BY A.MENU_DATE
                        UNION ALL
                        SELECT A.MENU_DATE AS BASE_DD
                             , SUM(C.SALE_PRICE * C.EXPECT_SALE_QTY) SALE_AMT
                             , 0 EXPECT_COST
                          FROM FSM_REAL_MENU_MST A
                             , SCC_COMMON_CODE B
                             , FSM_REAL_RECIPE_MST C
                         WHERE SUBSTR(A.HALL_CD,1,3) = B.CODE
                           AND A.UPJANG = C.UPJANG
                           AND A.MENU_CD = C.MENU_CD
                           AND B.GROUP_CODE = 'FS0019'
                           AND A.MENU_DATE BETWEEN #START_DATE# AND #END_DATE#
                           AND A.UPJANG = #UPJANG#
                           AND B.ATTR02 = 'Y'
                           AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                         GROUP BY A.MENU_DATE
                        UNION ALL
                        SELECT MENU_DATE AS BASE_DD
                             , 0 SALE_AMT
                             , SUM(EXPECT_COST) EXPECT_COST
                          FROM (
                                SELECT A.UPJANG
                                     , A.MENU_CD
                                     , A.MENU_DATE
                                     , A.RECIPE_CD
                                     , ROUND(SUM(A.NEED_QTY*ROUND((A.MARGIN_PRICE/B.KG_CONVERT_RATE/1000),2))) * A.QTY AS EXPECT_COST
                                  FROM HLDC_PO_ITEM_MST B
                                     , (
                                        SELECT A.UPJANG
                                             , A.MENU_CD
                                             , A.MENU_DATE
                                             , B.RECIPE_CD
                                             , C.ITEM_CODE
                                             , DECODE(E.ATTR02,'Y', B.EXPECT_SALE_QTY, DECODE(E.SET3, 'Y', B.EXPECT_SALE_QTY, A.EXPECT_MEAL_QTY)) QTY
                                             , C.NEED_QTY
                                             , C.MARGIN_PRICE
                                          FROM FSM_REAL_MENU_MST A
                                             , FSM_REAL_RECIPE_MST B
                                             , FSM_REAL_RECIPE_ITEM C
                                             , (SELECT * FROM SCC_COMMON_CODE WHERE GROUP_CODE= 'FS0019') E
                                         WHERE A.UPJANG = B.UPJANG
                                           AND A.MENU_CD = B.MENU_CD
                                           AND B.UPJANG = C.UPJANG
                                           AND B.MENU_CD = C.MENU_CD
                                           AND B.RECIPE_CD = C.RECIPE_CD
                                           AND SUBSTR(A.HALL_CD,1,3) = E.CODE
                                           AND A.MENU_DATE BETWEEN #START_DATE# AND #END_DATE#
                                           AND A.UPJANG = #UPJANG#
                                       ) A
                                 WHERE A.ITEM_CODE = B.ITEM_CODE
                                 GROUP BY A.UPJANG, A.MENU_CD, A.MENU_DATE, A.RECIPE_CD, A.QTY
                               )
                         GROUP BY MENU_DATE
                       )
                 GROUP BY BASE_DD
               ) J
             , (
                /* 사업계획 출하율 */
                SELECT DECODE(lv, 1, '01', 2, '02', 3, '03', 4, '04', 5, '05', 6, '06', 7, '07', 8, '08', 9, '09', 10, '10', 11, '11', 12, '12') AS BASE_MM
                     , DECODE(lv, 1, M01, 2, M02, 3, M03, 4, M04, 5, M05, 6, M06, 7, M07, 8, M08, 9, M09, 10, M10, 11, M11, 12, M12) AS OP_RATE
                  FROM (
                        SELECT B.UPJANG
                             , NVL(A.MM_MARGIN_RATE_01, 100) AS M01
                             , NVL(A.MM_MARGIN_RATE_02, 100) AS M02
                             , NVL(A.MM_MARGIN_RATE_03, 100) AS M03
                             , NVL(A.MM_MARGIN_RATE_04, 100) AS M04
                             , NVL(A.MM_MARGIN_RATE_05, 100) AS M05
                             , NVL(A.MM_MARGIN_RATE_06, 100) AS M06
                             , NVL(A.MM_MARGIN_RATE_07, 100) AS M07
                             , NVL(A.MM_MARGIN_RATE_08, 100) AS M08
                             , NVL(A.MM_MARGIN_RATE_09, 100) AS M09
                             , NVL(A.MM_MARGIN_RATE_10, 100) AS M10
                             , NVL(A.MM_MARGIN_RATE_11, 100) AS M11
                             , NVL(A.MM_MARGIN_RATE_12, 100) AS M12
                          FROM MAP_MARGIN_RATE_MGMT A
                             , SCO_UPJANG_MST_V B
                        WHERE A.UPJANG(+) = B.UPJANG
                          AND A.CLASS(+) = 'R'
                          AND A.YY(+) = SUBSTR(#START_DATE#, 1, 4)
                          AND A.UPJANG = #UPJANG#
                          AND B.CLOSE_DATE IS NULL
                       )
                     , (SELECT LEVEL lv
                          FROM DUAL
                        CONNECT BY LEVEL &lt;= 12)
               ) K
         WHERE A.BASE_DD = B.BASE_DD(+)
           AND A.BASE_DD = C.BASE_DD(+)
           AND A.BASE_DD = D.BASE_DD(+)
           AND A.BASE_DD = E.BASE_DD(+)
           AND A.BASE_DD = F.BASE_DD(+)
           AND A.BASE_DD = I.BASE_DD(+)
           AND A.BASE_DD = I1.BASE_DD(+)
           AND A.BASE_DD = J.BASE_DD(+)
           AND SUBSTR(A.BASE_DD, 1, 6) = SUBSTR(#START_DATE#, 1, 4) || K.BASE_MM(+)
       )
    </statement>
	<input default-name="ds_cond">
	</input>
	<output default-name="ds_mst">
	</output>
</query>
