<?xml version="1.0" encoding="euc-kr"?>
<query dynamic="true">
	<type>select</type>
	<description><![CDATA[]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>

WITH V AS
(
SELECT C.TM_CD
     , C.TM_NM
     , V.UPJANG_CD AS UPJANG
     , C.UPJANGNM
     , TO_CHAR(TO_DATE(C.OPEN_DATE, 'YYYYMMDD'), 'YYYY-MM-DD') AS OPEN_DATE
     , TO_CHAR(TO_DATE(C.CLOSE_DATE, 'YYYYMMDD'), 'YYYY-MM-DD') AS CLOSE_DATE
     , V.OCCUR_DATE AS TRX_DATE
     , SUM(V.EQTY) AS EQTY
     , SUM(V.CQTY) AS CQTY
     , SUM(V.RQTY) AS RQTY
     , ABS(SUM(V.RQTY) - SUM(V.EQTY)) ERQTY --예상식수 추가 20161025
     , DECODE(NVL(SUM(V.EQTY), 0), 0, 0, 1) AS EEXI
     , DECODE(NVL(SUM(V.CQTY), 0), 0, 0, 1) AS CEXI
     , DECODE(NVL(SUM(V.RQTY), 0), 0, 0, 1) AS REXI
     , SUM(V.QTY) AS QTY
     , SUM(V.F_AMT) AS F_AMT
     , SUM(V.S_AMT) AS S_AMT
     , SUM(V.E_AMT) AS E_AMT
<isEqual col="EXCEPT7" value="N"> 
     , S_RATE
     , EXPECT_RATE
</isEqual>
<isEqual col="EXCEPT7" value="Y"> 
     , 0 S_RATE
     , 0 EXPECT_RATE
</isEqual>
     , SUM(V.MEAL_UPRICE) AS MEAL_UPRICE
         , ( SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'SUBJOB2' AND CODE = C.JOB_CD2 ) JOB_CD2
  FROM SCO_UPJANG_MST_V C
     , HLDC_PO_UPJANG_CENTER D
     , (SELECT V.UPJANG_CD
             , V.OCCUR_DATE
             , NULL AS EQTY
             , NULL AS CQTY
             , NULL AS RQTY
             , DECODE(SALS_CLASS, '1103', TOT_PSN, '1108', TOT_PSN, '2001', TOT_PSN, '2101', TOT_PSN, '2102', TOT_PSN) AS QTY
             , DECODE(VAT_CLASS,'20',
                          ROUND(DECODE(SALS_CLASS, '1103', SAL_AMT, '1108', SAL_AMT, '2001', SAL_AMT, '2101', SAL_AMT, '2102', SAL_AMT, 0) / 1.1),
                                DECODE(SALS_CLASS, '1103', SAL_AMT, '1108', SAL_AMT, '2001', SAL_AMT, '2101', SAL_AMT, '2102', SAL_AMT, 0) ) AS F_AMT /* 식음료 */
             , DECODE(VAT_CLASS,'20',
                          ROUND(DECODE(SALS_CLASS, '1101', SAL_AMT, '1102', SAL_AMT, '1110', SAL_AMT, '1111', SAL_AMT, '1201', SAL_AMT, '1202', SAL_AMT, '1203', SAL_AMT, '1301', SAL_AMT, '1301', SAL_AMT, '1401', SAL_AMT, '1701', SAL_AMT, '2004', SAL_AMT, '2104', SAL_AMT, 0) / 1.1),
                                DECODE(SALS_CLASS, '1101', SAL_AMT, '1102', SAL_AMT, '1110', SAL_AMT, '1111', SAL_AMT, '1201', SAL_AMT, '1202', SAL_AMT, '1203', SAL_AMT, '1301', SAL_AMT, '1301', SAL_AMT, '1401', SAL_AMT, '1701', SAL_AMT, '2004', SAL_AMT, '2104', SAL_AMT, 0) ) AS E_AMT /* 상품 */
             , DECODE(VAT_CLASS,'20',
                          ROUND(DECODE(SALS_CLASS, '1106', SAL_AMT, '1113', SAL_AMT, '1206', SAL_AMT, '1402', SAL_AMT, '1501', SAL_AMT, '1801', SAL_AMT, '1901', SAL_AMT, '2003', SAL_AMT, '2103', SAL_AMT, 0) / 1.1),
                                DECODE(SALS_CLASS, '1106', SAL_AMT, '1113', SAL_AMT, '1206', SAL_AMT, '1402', SAL_AMT, '1501', SAL_AMT, '1801', SAL_AMT, '1901', SAL_AMT, '2003', SAL_AMT, '2103', SAL_AMT, 0) ) AS S_AMT /* 기타 */
             , NULL AS MEAL_UPRICE
          FROM SLA_IF_UPJANG_SALS_DETAIL V
             , SLA_IF_UPJANG_SALS_MST     M
--           WHERE V.CR_ACCTCD = A.ACCTCD
         WHERE V.OCCUR_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
--          AND A.BOND_GUBUN = 'MACHUL'
           AND V.OCCUR_DATE = M.OCCUR_DATE
           AND V.SYS_CLASS = M.SYS_CLASS
           AND V.RECEIPT_NUM = M.RECEIPT_NUM
           AND V.UPJANG_CD = M.UPJANG_CD
         UNION ALL
        SELECT A.UPJANG
             , A.MENU_DATE
             , A.EXPECT_MEAL_QTY AS EQTY
             , A.COOK_MEAL_QTY AS CQTY
             , A.REAL_MEAL_QTY AS RQTY
             , NULL AS QTY
             , NULL AS F_AMT
             , NULL AS S_AMT
             , NULL AS E_AMT
             , NULL AS MEAL_UPRICE
          FROM FSM_REAL_MENU_MST A
         WHERE A.MENU_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
--추가
UNION ALL
SELECT  A.UPJANG 
       ,MENU_DATE
       ,NULL AS EQTY
       , NULL AS CQTY
       , NULL AS RQTY 
       , NULL AS QTY
       , NULL AS F_AMT
       , NULL AS S_AMT
       , NULL AS E_AMT
       ,  (DECODE(B.HALL_CLASS,'010',A.SALE_PRICE, '005',(SELECT SUM(SALE_PRICE) FROM FSM_REAL_RECIPE_MST F WHERE F.MENU_CD = A.MENU_CD AND F.UPJANG = A.UPJANG),C.MEAL_UPRICE) * REAL_MEAL_QTY ) MEAL_UPRICE
  FROM FSM_REAL_MENU_MST A,
       FSA_HALL_MST B,
       FSA_HALL_DTL C
 WHERE  MENU_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
   AND A.UPJANG = B.UPJANG(+)
   AND A.HALL_CD = B.HALL_CD(+)
   AND A.UPJANG = C.UPJANG(+)
   AND A.HALL_CD = C.HALL_CD(+)
   AND A.MEAL = C.MEAL(+)
   AND A.CORNER = C.CORNER(+)
   AND C.USE_YN(+) = 'Y'
 
   --추가
       ) V
<isEqual col="EXCEPT7" value="N">
     , (SELECT /*+ NO_MERGE */ UPJANG
             , SDATE
             , S_RATE
             , EXPECT_RATE
          FROM (SELECT A.UPJANG
                     , A.SDATE
                     , ROUND(DECODE(SUM(NVL(C.SS_AMT, 0)), 0, 0, (SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(DECODE('1', '1', G.MS_AMT3, 0), 0))) / SUM(C.SS_AMT) * 100), 2) AS S_RATE /* 식재료율 - 실적 */
                     , ROUND(DECODE(SUM(J.EXPECT_SALE),0,0,SUM(J.EXPECT_COST) / SUM(J.EXPECT_SALE)) * 100,1) AS EXPECT_RATE
                  FROM (SELECT A.UPJANG
                             , A.MU_CD
                             , A.TM_CD
                             , A.PT_CD
                             , CD_SY||CD_SM||CD_SD AS SDATE
                          FROM SCC_CALENDA_DATA
                             , MAC_UPJANG_V A
                         WHERE CD_SY||CD_SM||CD_SD BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                           AND A.CLOSE_DATE IS NULL
                       ) A
                     /* 매출 - 식음료매출 실적 (내부이용포함) */
                     , (SELECT A.UPJANG_CD AS UPJANG
                             , A.OCCUR_DATE AS SDATE
                             , SUM(B.NET_AMT) AS SS_AMT
                          FROM SLA_IF_UPJANG_SALS_MST A
                             , SLA_IF_UPJANG_SALS_DETAIL B
                         WHERE A.OCCUR_DATE = B.OCCUR_DATE
                           AND A.SYS_CLASS = B.SYS_CLASS
                           AND A.UPJANG_CD = B.UPJANG_CD
                           AND A.OCCUR_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                        <isNotNull col="UPJANG">
                           AND A.UPJANG_CD = #UPJANG#
                        </isNotNull>
                        <isNotNull col="MU_CD">
                           AND A.MU_CD = #MU_CD#
                        </isNotNull>
                           AND A.RECEIPT_NUM = B.RECEIPT_NUM
                           /* 1103:[FS사업]식음료매출(FS), 1106:[FS사업]기타매출_기타, 1204:[외식사업]식음료매출_식료, 1205:[외식사업]식음료매출_음료, 2001:[매점POS]식음료매출(FS), 2101:[외식POS]식음료매출_식료, 2102:[외식POS]식음료매출_음료 */
                           AND B.SALS_CLASS IN ('1103', '2001', '2002', '1106', '1204', '1205', '2101', '2102')
                         GROUP BY A.UPJANG_CD, A.OCCUR_DATE
                       ) C
                     /* 재료비 - 실적 - 전산구매 */
                     , ( SELECT UPJANG,
        TRANS_DATE SDATE,
       	SUM(MS_AMT1) MS_AMT1
			  FROM (		        
      				SELECT   UPJANG
                     ,TRANS_DATE
             				,MS_AMT1
		         	  FROM (
		         	      SELECT  MIHD.SHOP_CD UPJANG,
                          MIHD.INSP_DATE AS TRANS_DATE 
               		    	--    , ROUND(NVL(DECODE(MIDT.CANCEL_YN, 'N', MIDT.GAP_MGT_AMT, 0), 0))  AS MS_AMT1 
                 				  ,NVL(DECODE(MIDT.CANCEL_YN, 'N', MIDT.GAP_MGT_AMT, 0), 0) + DECODE(MIDT.CANCEL_YN, 'Y', MIDT.AMEND_MGT_AMT, 0)      AS MS_AMT1 
  							 FROM EPROCUSR.ESIMIHD MIHD  
  					  		INNER JOIN EPROCUSR.ESIMIDT MIDT  
   						      		ON MIHD.SYS_ID = MIDT.SYS_ID  
      						  		AND MIHD.COMP_CD = MIDT.COMP_CD  
    					      		AND MIHD.IVT_INSP_NO = MIDT.IVT_INSP_NO  
    				  		INNER JOIN EPROCUSR.ESPSWHU SWHU  
    					      		ON MIHD.SYS_ID = SWHU.SYS_ID  
      						  		AND MIHD.COMP_CD = SWHU.COMP_CD  
       						  		AND MIHD.WH_CD = SWHU.WH_CD  
       						  		    INNER JOIN SCO_UPJANG_MST A
        ON TO_NUMBER(SWHU.SHOP_CD) = A.UPJANG
    INNER JOIN ST_UPJANG B
        ON A.UPJANG = B.UPJANG
    INNER JOIN HLDC_SC_DEPT_V C
        ON B.DEPT_ID = C.DEPT_ID
 			   				WHERE MIHD.SYS_ID = '100'  
  				 			  AND MIHD.COMP_CD = 'HFC'  
                           AND MIHD.INSP_DATE  BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                        <isNotNull col="UPJANG">
                           AND MIHD.SHOP_CD  = #UPJANG#
                        </isNotNull>
                        <isNotNull col="MU_CD">
                           AND C.MU_CD = #MU_CD#
                        </isNotNull>
                           /* 42203010:[재료비]식음료원가_식료, 42203020:[재료비]식음료원가_음료, 42203030:[재료비]식음료원가(FS) */
                         AND MIDT.JRNL_TYP_CD IN (SELECT JRNL_TYP_CD FROM EPROCUSR.ESIJRNL WHERE SYS_ID = '100' AND COMP_CD = 'HFC' AND DR_ACC_CD IN ('42203010', '42203020', '42203030') AND MG_CLS_CD = 'GI') 
                       ) 
    )
GROUP BY UPJANG,TRANS_DATE                 
                       ) E
                     /* 복리후생 식대비 - 일수로 Split */
                     , (SELECT UPJANG
                             , CD_SY||CD_SM||CD_SD AS SDATE
                             , ROUND(NVL(SUM(AMT), 0) / TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE(#TRX_DATEFR#, 'YYYYMMDD')), 'DD')), 0) AS MS_AMT3
                          FROM MAS_WELFARE
                             , SCC_CALENDA_DATA
                         WHERE APPLY_MM = TO_CHAR(TO_DATE(#TRX_DATEFR#, 'YYYYMMDD'), 'YYYYMM')
                           AND CD_SY||CD_SM||CD_SD BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                         GROUP BY UPJANG, CD_SY||CD_SM||CD_SD
                       ) G
                     , (SELECT UPJANG
                             , MENU_DATE AS SDATE
                           --  , SUM(EXPECT_COST) EXPECT_COST
                           --  , SUM(SALE_AMT) EXPECT_SALE
                           , EXPECT_COST
                           , SALE_AMT EXPECT_SALE
                          FROM (SELECT A.UPJANG
                                     , MENU_DATE
                                     , SUM(A.SALE_PRICE * A.EXPECT_MEAL_QTY) SALE_AMT
                                     , 0 EXPECT_COST
                                  FROM FSM_REAL_MENU_MST A
                                     , SCC_COMMON_CODE B
                                 WHERE SUBSTR(A.HALL_CD, 1, 3) = B.CODE
                                   AND B.GROUP_CODE= 'FS0019'
                                <isNotNull col="UPJANG">
                                   AND A.UPJANG = #UPJANG#
                                </isNotNull>
                                   AND A.MENU_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                                   AND B.ATTR02 &lt;&gt; 'Y'
                                   AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                                 GROUP BY A.UPJANG, MENU_DATE
                                 UNION ALL
                                SELECT A.UPJANG
                                     , MENU_DATE
                                     , SUM(C.SALE_PRICE * C.EXPECT_SALE_QTY) SALE_AMT
                                     , 0 EXPECT_COST
                                  FROM FSM_REAL_MENU_MST A
                                     , SCC_COMMON_CODE B
                                     , FSM_REAL_RECIPE_MST C
                                 WHERE SUBSTR(A.HALL_CD,1,3) = B.CODE
                                   AND A.UPJANG = C.UPJANG
                                <isNotNull col="UPJANG">
                                   AND A.UPJANG = #UPJANG#
                                </isNotNull>
                                   AND A.MENU_CD = C.MENU_CD
                                   AND B.GROUP_CODE = 'FS0019'
                                   AND A.MENU_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                                   AND B.ATTR02 = 'Y'
                                   AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                                 GROUP BY A.UPJANG, MENU_DATE
                                 UNION ALL
                                SELECT UPJANG
                                     , MENU_DATE
                                     , 0 SALE_AMT
                                     , SUM(EXPECT_COST) EXPECT_COST
                                  FROM (SELECT A.UPJANG
                                             , A.MENU_CD
                                             , A.MENU_DATE
                                             , A.RECIPE_CD
                                             , ROUND(SUM(A.NEED_QTY * ROUND((A.MARGIN_PRICE / B.KG_CONVERT_RATE / 1000), 2))) * A.QTY AS EXPECT_COST
                                          FROM HLDC_PO_ITEM_MST B
                                             , (SELECT A.UPJANG
                                                     , A.MENU_CD
                                                     , A.MENU_DATE
                                                     , B.RECIPE_CD
                                                     , C.ITEM_CODE
                                                     , DECODE(E.ATTR02, 'Y', B.EXPECT_SALE_QTY, DECODE(E.SET3, 'Y', B.EXPECT_SALE_QTY, A.EXPECT_MEAL_QTY)) QTY
                                                     , C.NEED_QTY
                                                     , C.MARGIN_PRICE
                                                  FROM FSM_REAL_MENU_MST A
                                                     , FSM_REAL_RECIPE_MST B
                                                     , FSM_REAL_RECIPE_ITEM C
                                                     , (SELECT * FROM SCC_COMMON_CODE WHERE GROUP_CODE= 'FS0019') E
                                                 WHERE A.UPJANG = B.UPJANG
                                                <isNotNull col="UPJANG">
                                                   AND A.UPJANG = #UPJANG#
                                                </isNotNull>
                                                   AND A.MENU_CD = B.MENU_CD
                                                   AND B.UPJANG = C.UPJANG
                                                   AND B.MENU_CD = C.MENU_CD
                                                   AND B.RECIPE_CD = C.RECIPE_CD
                                                   AND SUBSTR(A.HALL_CD, 1, 3) = E.CODE
                                                   AND A.MENU_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                                               ) A
                                         WHERE A.ITEM_CODE = B.ITEM_CODE
                                         GROUP BY A.UPJANG, A.MENU_CD, A.MENU_DATE, A.RECIPE_CD, A.QTY
                                       )
                                 GROUP BY UPJANG, MENU_DATE
                               )
                       --  GROUP BY UPJANG, MENU_DATE
                       ) J
                 WHERE A.UPJANG = C.UPJANG(+)
                   AND A.UPJANG = E.UPJANG(+)
                   AND A.UPJANG = G.UPJANG(+)
                   AND A.UPJANG = J.UPJANG(+)
                   AND A.SDATE  = C.SDATE(+)
                   AND A.SDATE  = E.SDATE(+)
                   AND A.SDATE  = G.SDATE(+)
                   AND A.SDATE  = J.SDATE(+)
                <isNotNull col="MU_CD">
                   AND A.MU_CD = #MU_CD#
                </isNotNull>
                <isNotNull col="TM_CD">
                   --본부 조회 추가 20160725 맹수영
                   --AND (A.TM_CD = #TM_CD# OR A.PT_CD = #TM_CD#)
                   AND (A.TM_CD LIKE #TM_CD#||'%' OR A.PT_CD LIKE #TM_CD#||'%')
                </isNotNull>
                <isNotNull col="UPJANG">
                   AND A.UPJANG = #UPJANG#
                </isNotNull>
                 GROUP BY A.UPJANG, A.SDATE
               )
       ) K
</isEqual>
 WHERE V.UPJANG_CD = C.UPJANG
   AND C.AP_UNITPRICE_UPJANG = D.UPJANG
<isEqual col="EXCEPT7" value="N">
   AND V.UPJANG_CD = K.UPJANG(+)
   AND V.OCCUR_DATE = K.SDATE(+)
</isEqual>
<isNotNull col="CENTER_CODE">
   AND D.CENTER_CODE = #CENTER_CODE#
</isNotNull>
<isNotNull col="MU_CD">
   AND C.MU_CD = #MU_CD#
</isNotNull>
<isNotNull col="TM_CD">
   <isNotEqual col="HOMEPLUS" value="1"> 
   --AND (C.TM_CD = #TM_CD# OR C.PT_CD = #TM_CD#)
   --본부조회 추가 20160725 맹수영
   AND (C.TM_CD LIKE #TM_CD#||'%' OR C.PT_CD LIKE #TM_CD#||'%')
   </isNotEqual>
</isNotNull>
<isNotNull col="UPJANG">
   <isNotEqual col="HOMEPLUS" value="1"> 
   AND C.UPJANG = #UPJANG#
   </isNotEqual>
   <isEqual col="HOMEPLUS" value="1"> 
   AND C.UPJANG    IN  (SELECT Z.CODE FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'UPJANG_GROUP' AND Z.USE_YN = 'Y' AND SET1 =  #UPJANG#   )
   </isEqual>
</isNotNull>
<isEqual col="EXCEPT1" value="Y">
   AND C.EXCEPT_FLAG = 'N'
</isEqual>
<isEqual col="EXCEPT2" value="Y">
   AND V.OCCUR_DATE &gt;= NVL(C.OPEN_DATE, 'ZZZZZZZZ')
</isEqual>
<isEqual col="EXCEPT3" value="Y">
   AND NVL(CLOSE_DATE, '99991231') = '99991231'
</isEqual>
<isEqual col="EXCEPT5" value="Y">
   AND NVL(C.OP_TYPE, 'O') != 'C'
</isEqual>
<isEqual col="EXCEPT6" value="Y">
   AND C.SUB_JOB_CD != '003001' /* 병원사업장 제외 */
</isEqual>
<isEqual col="EXCEPT7" value="N"> 
 GROUP BY C.TM_CD, C.TM_NM, V.UPJANG_CD, C.UPJANGNM, C.OPEN_DATE, C.CLOSE_DATE, V.OCCUR_DATE, S_RATE, EXPECT_RATE,JOB_CD2
 </isEqual>
 <isEqual col="EXCEPT7" value="Y"> 
 GROUP BY C.TM_CD, C.TM_NM, V.UPJANG_CD, C.UPJANGNM, C.OPEN_DATE, C.CLOSE_DATE, V.OCCUR_DATE,JOB_CD2
 </isEqual>
<isEqual col="EXCEPT4" value="Y">
HAVING SUM(V.EQTY) != 0 OR SUM(V.RQTY) != 0
</isEqual>   
)
SELECT V.TM_CD
     , V.TM_NM
     , V.UPJANG
     , V.UPJANGNM
     , V.OPEN_DATE
     , V.CLOSE_DATE
     , V.TRX_DATE
     , V.EQTY
     , V.CQTY
     , V.RQTY
     , V.ERQTY --예상식수 추가 20161025
     , V.EEXI
     , V.CEXI
     , V.REXI
     , ABS(V.EQTY-V.RQTY) AS MEAL_QTY_DIFF
     , ABS(V.CQTY-V.RQTY) AS COOK_QTY_DIFF
     , DECODE(V.EQTY, 0, 0,ROUND(ABS(V.EQTY - V.RQTY) / V.EQTY * 100, 1)) AS MEAL_QTY_RATE
     , DECODE(V.CQTY, 0, 0,ROUND(ABS(V.CQTY - V.RQTY) / V.CQTY * 100, 1)) AS COOK_QTY_RATE
     , V.QTY
     , MEAL_UPRICE
     , ABS(MEAL_UPRICE - (NVL(V.F_AMT,0) + NVL(V.S_AMT,0))) MAECHUL_C
--     , ROUND(ABS((MEAL_UPRICE - (V.F_AMT + V.S_AMT)) / DECODE(MEAL_UPRICE,0,1,MEAL_UPRICE)) * 100,2) MAECHUL_CP 
 --,ROUND(ABS(MEAL_UPRICE / DECODE((MEAL_UPRICE - (V.F_AMT + V.S_AMT)),0,MEAL_UPRICE,(MEAL_UPRICE - (V.F_AMT + V.S_AMT))) *100),2)  MAECHUL_CP
      , CASE WHEN  (MEAL_UPRICE - (NVL(V.F_AMT,0) + NVL(V.S_AMT,0))) = 0 THEN 0
           WHEN    MEAL_UPRICE = (MEAL_UPRICE - (NVL(V.F_AMT,0) + NVL(V.S_AMT,0))) THEN 100
          --  ELSE ROUND(ABS(MEAL_UPRICE / DECODE((MEAL_UPRICE - (V.F_AMT + V.S_AMT)),0,DECODE(MEAL_UPRICE,0,1),(MEAL_UPRICE - (V.F_AMT + V.S_AMT))) *100),2) 
            
            ELSE ROUND(ABS((MEAL_UPRICE - (NVL(V.F_AMT,0) + NVL(V.S_AMT,0))) / DECODE(MEAL_UPRICE,0,1,MEAL_UPRICE)) * 100,2)
            END MAECHUL_CP    
     , V.F_AMT + V.S_AMT + V.E_AMT AS T_AMT
     , V.F_AMT
     , V.S_AMT
     , V.E_AMT
<isEqual col="EXCEPT7" value="N"> 
     , DECODE(V.S_RATE, 0, 0, ROUND(V.S_RATE, 1)) AS S_RATE
     , DECODE(V.EXPECT_RATE, 0, 0, ROUND(V.EXPECT_RATE, 1)) AS EXPECT_RATE
</isEqual>
 <isEqual col="EXCEPT7" value="Y">
     , 0 S_RATE
     , 0 EXPECT_RATE
 </isEqual>  
     ,JOB_CD2
  FROM V
 UNION ALL
SELECT V.TM_CD
     , V.TM_NM
     , V.UPJANG
     , V.UPJANGNM
     , V.OPEN_DATE
     , V.CLOSE_DATE
     , '계' AS TRX_DATE
     , SUM(V.EQTY) AS EQTY
     , SUM(V.CQTY) AS CQTY
     , SUM(V.RQTY) AS RQTY
     , SUM(V.ERQTY) AS ERQTY--예상식수 추가 20161025
     , SUM(V.EEXI) AS EEXI
     , SUM(V.CEXI) AS CEXI
     , SUM(V.REXI) AS REXI
     , SUM(ABS(V.EQTY - V.RQTY)) AS MEAL_QTY_DIFF
     , SUM(ABS(V.CQTY - V.RQTY)) AS COOK_QTY_DIFF
     , DECODE(SUM(V.EQTY), 0, 0,ROUND(SUM(ABS(V.EQTY - V.RQTY)) / SUM(V.EQTY) * 100, 1)) AS MEAL_QTY_RATE
     , DECODE(SUM(V.CQTY), 0, 0,ROUND(SUM(ABS(V.CQTY - V.RQTY)) / SUM(V.CQTY) * 100, 1)) AS COOK_QTY_RATE
     , SUM(V.QTY) AS QTY
     , SUM(MEAL_UPRICE) MEAL_UPRICE
     , SUM(ABS(MEAL_UPRICE - (NVL(V.F_AMT,0) + NVL(V.S_AMT,0)))) MAECHUL_C
    -- , ROUND(SUM(ABS((MEAL_UPRICE - (V.F_AMT + V.S_AMT)) / DECODE(MEAL_UPRICE,0,1,MEAL_UPRICE)) * 100),2) MAECHUL_CP
  --  ,  ROUND(SUM(ABS(MEAL_UPRICE / DECODE((MEAL_UPRICE - (V.F_AMT + V.S_AMT)),0,MEAL_UPRICE,(MEAL_UPRICE - (V.F_AMT + V.S_AMT)))) *100),2) MAECHUL_CP
      --매출차이율 계산식 변경 처리:맹수영 요청자:윤지혜 (CH201607_00047)
       , CASE WHEN SUM(MEAL_UPRICE - (NVL(V.F_AMT,0) + NVL(V.S_AMT,0))) = 0 THEN 0
              WHEN   SUM(MEAL_UPRICE) = SUM(MEAL_UPRICE - (NVL(V.F_AMT,0) + NVL(V.S_AMT,0))) THEN 100
         --   ELSE ROUND(SUM(ABS(MEAL_UPRICE / DECODE((MEAL_UPRICE - (NVL(V.F_AMT,0) + NVL(V.S_AMT,0))),0,DECODE(MEAL_UPRICE,0,1),(MEAL_UPRICE - (V.F_AMT + V.S_AMT)))) *100),2)           
              ELSE ROUND(SUM(ABS((MEAL_UPRICE - (NVL(V.F_AMT,0) + NVL(V.S_AMT,0))) / DECODE(MEAL_UPRICE,0,1,MEAL_UPRICE)) * 100),2)
              END MAECHUL_CP            
     , SUM(V.F_AMT + V.S_AMT + V.E_AMT) AS T_AMT
     , SUM(V.F_AMT) AS F_AMT
     , SUM(V.S_AMT) AS S_AMT
     , SUM(V.E_AMT) AS E_AMT
 <isEqual col="EXCEPT7" value="N">
     , K.S_RATE
     , K.EXPECT_RATE
 </isEqual>    
 <isEqual col="EXCEPT7" value="Y">
     , 0 S_RATE
     , 0 EXPECT_RATE
 </isEqual>    
      ,JOB_CD2
  FROM V
<isEqual col="EXCEPT7" value="N"> 
     , (SELECT /*+ NO_MERGE */ UPJANG
             , S_RATE
             , EXPECT_RATE
          FROM (SELECT A.UPJANG
                     , ROUND(DECODE(SUM(NVL(C.SS_AMT, 0)), 0, 0, (SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(DECODE('1', '1', G.MS_AMT3, 0), 0))) / SUM(C.SS_AMT) * 100), 2) AS S_RATE /* 식재료율 - 실적 */
                     , ROUND(DECODE(SUM(J.EXPECT_SALE), 0, 0, SUM(J.EXPECT_COST) / SUM(J.EXPECT_SALE)) * 100, 1) AS EXPECT_RATE
                  FROM MAC_UPJANG_V A
                     /* 매출 - 식음료매출 실적 (내부이용포함) */
                     , (SELECT A.UPJANG_CD AS UPJANG
                             , SUM(B.NET_AMT) AS SS_AMT
                          FROM SLA_IF_UPJANG_SALS_MST A
                             , SLA_IF_UPJANG_SALS_DETAIL B
                         WHERE A.OCCUR_DATE = B.OCCUR_DATE
                           AND A.SYS_CLASS = B.SYS_CLASS
                           AND A.UPJANG_CD = B.UPJANG_CD
                        <isNotNull col="UPJANG">
                           AND A.UPJANG_CD = #UPJANG#
                        </isNotNull>
                        <isNotNull col="MU_CD">
                           AND A.MU_CD = #MU_CD#
                        </isNotNull>
                           AND A.OCCUR_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                           AND A.RECEIPT_NUM = B.RECEIPT_NUM
                           /* 1103:[FS사업]식음료매출(FS), 1106:[FS사업]기타매출_기타, 1204:[외식사업]식음료매출_식료, 1205:[외식사업]식음료매출_음료, 2001:[매점POS]식음료매출(FS), 2101:[외식POS]식음료매출_식료, 2102:[외식POS]식음료매출_음료 */
                           AND B.SALS_CLASS IN ('1103', '2001', '2002', '1106', '1204', '1205', '2101', '2102')
                         GROUP BY A.UPJANG_CD
                       ) C
                     /* 재료비 - 실적 - 전산구매 */
                     , ( SELECT UPJANG, 
       	SUM(MS_AMT1) MS_AMT1
			  FROM (		        
      				SELECT   UPJANG 
             				,MS_AMT1
		         	  FROM (
	
	SELECT  MIHD.SHOP_CD UPJANG 
               		    	--    , ROUND(NVL(DECODE(MIDT.CANCEL_YN, 'N', MIDT.GAP_MGT_AMT, 0), 0))  AS MS_AMT1 
                 				  ,NVL(DECODE(MIDT.CANCEL_YN, 'N', MIDT.GAP_MGT_AMT, 0), 0) + DECODE(MIDT.CANCEL_YN, 'Y', MIDT.AMEND_MGT_AMT, 0)      AS MS_AMT1 
  							 FROM EPROCUSR.ESIMIHD MIHD  
  					  		INNER JOIN EPROCUSR.ESIMIDT MIDT  
   						      		ON MIHD.SYS_ID = MIDT.SYS_ID  
      						  		AND MIHD.COMP_CD = MIDT.COMP_CD  
    					      		AND MIHD.IVT_INSP_NO = MIDT.IVT_INSP_NO  
    				  		INNER JOIN EPROCUSR.ESPSWHU SWHU  
    					      		ON MIHD.SYS_ID = SWHU.SYS_ID  
      						  		AND MIHD.COMP_CD = SWHU.COMP_CD  
       						  		AND MIHD.WH_CD = SWHU.WH_CD  
       						     INNER JOIN SCO_UPJANG_MST A
        ON TO_NUMBER(SWHU.SHOP_CD) = A.UPJANG
    INNER JOIN ST_UPJANG B
        ON A.UPJANG = B.UPJANG
    INNER JOIN HLDC_SC_DEPT_V C
        ON B.DEPT_ID = C.DEPT_ID 		
 			   				WHERE MIHD.SYS_ID = '100'  
  				 			  AND MIHD.COMP_CD = 'HFC'  
                           AND MIHD.INSP_DATE  BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                        <isNotNull col="UPJANG">
                           AND MIHD.SHOP_CD  = #UPJANG#
                        </isNotNull>
                        <isNotNull col="MU_CD">
                           AND C.MU_CD = #MU_CD#
                        </isNotNull>
                           /* 42203010:[재료비]식음료원가_식료, 42203020:[재료비]식음료원가_음료, 42203030:[재료비]식음료원가(FS) */
                         AND MIDT.JRNL_TYP_CD IN (SELECT JRNL_TYP_CD FROM EPROCUSR.ESIJRNL WHERE SYS_ID = '100' AND COMP_CD = 'HFC' AND DR_ACC_CD IN ('42203010', '42203020', '42203030') AND MG_CLS_CD = 'GI') 
                        ) 
    )
GROUP BY UPJANG                
                       ) E
                     /* 복리후생 식대비 - 일수로 Split */
                     , (SELECT UPJANG
                             , ROUND(NVL(SUM(AMT), 0) / TO_NUMBER(TO_CHAR(LAST_DAY(SYSDATE), 'DD')), 0) * (TO_DATE('20151224', 'YYYYMMDD') - TO_DATE('20151201', 'YYYYMMDD') + 1) AS MS_AMT3
                          FROM MAS_WELFARE
                         WHERE APPLY_MM = TO_CHAR(TO_DATE('20151201', 'YYYYMMDD'), 'YYYYMM')
                         GROUP BY UPJANG
                       ) G
                     , (SELECT UPJANG
                             --, SUM(EXPECT_COST) EXPECT_COST
                            -- , SUM(SALE_AMT) EXPECT_SALE
                            , EXPECT_COST
                            , SALE_AMT EXPECT_SALE
                          FROM (SELECT A.UPJANG
                                     , SUM(A.SALE_PRICE * A.EXPECT_MEAL_QTY) SALE_AMT
                                     , 0 EXPECT_COST
                                  FROM FSM_REAL_MENU_MST A
                                     , SCC_COMMON_CODE B
                                 WHERE SUBSTR(A.HALL_CD, 1, 3) = B.CODE
                                   AND B.GROUP_CODE= 'FS0019'
                                <isNotNull col="UPJANG">
                                   AND A.UPJANG = #UPJANG#
                                </isNotNull>
                                   AND A.MENU_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                                   AND B.ATTR02 &lt;&gt; 'Y'
                                   AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                                 GROUP BY A.UPJANG
                                 UNION ALL
                                SELECT A.UPJANG
                                     , SUM(C.SALE_PRICE * C.EXPECT_SALE_QTY) SALE_AMT
                                     , 0 EXPECT_COST
                                  FROM FSM_REAL_MENU_MST A
                                     , SCC_COMMON_CODE B
                                     , FSM_REAL_RECIPE_MST C
                                 WHERE SUBSTR(A.HALL_CD, 1, 3) = B.CODE
                                   AND A.UPJANG = C.UPJANG
                                <isNotNull col="UPJANG">
                                   AND A.UPJANG = #UPJANG#
                                </isNotNull>
                                   AND A.MENU_CD = C.MENU_CD
                                   AND B.GROUP_CODE = 'FS0019'
                                   AND A.MENU_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                                   AND B.ATTR02 = 'Y'
                                   AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                                 GROUP BY A.UPJANG
                                 UNION ALL
                                SELECT UPJANG
                                     , 0 SALE_AMT
                                     , SUM(EXPECT_COST) EXPECT_COST
                                  FROM (SELECT A.UPJANG
                                             , A.MENU_CD
                                             , A.RECIPE_CD
                                             , ROUND(SUM(A.NEED_QTY * ROUND((A.MARGIN_PRICE / B.KG_CONVERT_RATE / 1000), 2))) * A.QTY AS EXPECT_COST
                                          FROM HLDC_PO_ITEM_MST B
                                             , (SELECT A.UPJANG
                                                     , A.MENU_CD
                                                     , B.RECIPE_CD
                                                     , C.ITEM_CODE
                                                     , DECODE(E.ATTR02,'Y', B.EXPECT_SALE_QTY, DECODE(E.SET3, 'Y', B.EXPECT_SALE_QTY, A.EXPECT_MEAL_QTY)) QTY
                                                     , C.NEED_QTY
                                                     , C.MARGIN_PRICE
                                                  FROM FSM_REAL_MENU_MST A
                                                     , FSM_REAL_RECIPE_MST B
                                                     , FSM_REAL_RECIPE_ITEM C
                                                     , (SELECT * FROM SCC_COMMON_CODE WHERE GROUP_CODE= 'FS0019') E
                                                 WHERE A.UPJANG = B.UPJANG
                                                <isNotNull col="UPJANG">
                                                   AND A.UPJANG = #UPJANG#
                                                </isNotNull>
                                                   AND A.MENU_CD = B.MENU_CD
                                                   AND B.UPJANG = C.UPJANG
                                                   AND B.MENU_CD = C.MENU_CD
                                                   AND B.RECIPE_CD = C.RECIPE_CD
                                                   AND SUBSTR(A.HALL_CD,1,3) = E.CODE
                                                   AND A.MENU_DATE BETWEEN #TRX_DATEFR# AND #TRX_DATETO#
                                               ) A
                                         WHERE A.ITEM_CODE = B.ITEM_CODE
                                         GROUP BY A.UPJANG, A.MENU_CD, A.RECIPE_CD, A.QTY
                                       )
                                 GROUP BY UPJANG
                               )
                      --   GROUP BY UPJANG
                       ) J
                 WHERE A.UPJANG = C.UPJANG(+)
                   AND A.UPJANG = E.UPJANG(+)
                   AND A.UPJANG = G.UPJANG(+)
                   AND A.UPJANG = J.UPJANG(+)
                <isNotNull col="MU_CD">
                   AND A.MU_CD = #MU_CD#
                </isNotNull>
                <isNotNull col="TM_CD">
                   --AND (A.TM_CD = #TM_CD# OR A.PT_CD = #TM_CD#)
                   AND (A.TM_CD LIKE #TM_CD#||'%' OR A.PT_CD LIKE #TM_CD#||'%' )
                </isNotNull>
                <isNotNull col="UPJANG">
                   AND A.UPJANG = #UPJANG#
                </isNotNull>
                 GROUP BY A.UPJANG
               )
       ) K
 WHERE V.UPJANG = K.UPJANG (+)
</isEqual>
<isEqual col="EXCEPT7" value="N"> 
 GROUP BY V.TM_CD, V.TM_NM, V.UPJANG, V.UPJANGNM, V.OPEN_DATE, V.CLOSE_DATE, K.S_RATE, K.EXPECT_RATE    , JOB_CD2
 </isEqual>
 <isEqual col="EXCEPT7" value="Y"> 
 GROUP BY V.TM_CD, V.TM_NM, V.UPJANG, V.UPJANGNM, V.OPEN_DATE, V.CLOSE_DATE    , JOB_CD2
 </isEqual>
 

	</statement>
	<input default-name="ds_cond">
	    <col name="CENTER_CODE" size="255" type="VARCHAR" description="" />
	  	<col name="TM_CD" size="255" type="VARCHAR" description="" /> 
		<col name="UPJANG" size="6" type="NUMERIC" description="업장코드" /> 
		<col name="EXCEPT1" size="255" type="VARCHAR" description="" /> 
		<col name="EXCEPT2" size="255" type="VARCHAR" description="" /> 
		<col name="EXCEPT3" size="255" type="VARCHAR" description="" /> 
		<col name="EXCEPT4" size="255" type="VARCHAR" description="" /> 
		<col name="EXCEPT5" size="255" type="VARCHAR" description="" /> 
		<col name="EXCEPT6" size="255" type="VARCHAR" description="" /> 		
		<col name="TRX_DATEFR" size="255" type="VARCHAR" description="" /> 
		<col name="TRX_DATETO" size="255" type="VARCHAR" description="" /> 
		<col name="HOMEPLUS" size="255" type="VARCHAR" description="" /> 
	</input>
	<output default-name="ds_list">      
	</output>
</query>