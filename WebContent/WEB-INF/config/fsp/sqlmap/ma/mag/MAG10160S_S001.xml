<?xml version="1.0" encoding="euc-kr"?>
<query dynamic="true">
	<type>select</type>
	<description><![CDATA[]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>
SELECT V.SAUP_TYPE,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'MA0001' AND CODE = V.SAUP_TYPE) SAUP_TYPENM,
       V.TM_CD,
       (SELECT TM_NM FROM HLDC_SC_TM WHERE TM_CD = V.TM_CD) TM_NM,
       V.UPJANG,
       (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM,
       SUM(DECODE(V.DUE_GUBUN, '당월매출',   V.AMT, 0))                                         CURR_TRX_AMT,
       SUM(DECODE(V.DUE_GUBUN, '당월수금',   V.AMT, 0))                                         CURR_RCP_AMT,
       SUM(DECODE(V.DUE_GUBUN, '미도래채권', V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             MI_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             DO_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '악성채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             AK_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '미수금',     V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             MISU_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '미수금(신용카드)',     V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))   MISUCARD_BOND_AMT,
       V.SAUP_TYPE||'-'||V.TM_CD||'-'||V.UPJANG PL_CD,
       '1' PL_UP_CD,
       '0' BL_SHOW,
       3 LEVEL_NO,
       '+' BL_PLUS
  FROM (
        SELECT C.SAUP_TYPE,
               C.TM_CD,
               V.UPJANG,
               V.CUSTCD,
               NVL(V.AMT, 0) AMT,
               V.TRX_DATE BOND_DATE,
               '당월매출' DUE_GUBUN,
               0 RCP_AMT1,
               0 RCP_AMT2
          FROM MAS_TRX V,
               SCO_UPJANG_CUST  B,
               SCO_UPJANG_MST_V C
        WHERE (V.UPJANG     = B.UPJANG)
        AND   (V.CUSTCD     = B.CUSTCD)
        AND   (V.UPJANG     = C.UPJANG)
        AND   (V.TRX_DATE   BETWEEN SUBSTR(#TRX_DATE#, 1, 6)||'01' AND SUBSTR(#TRX_DATE#, 1, 6)||'31')
        <isNotNull col="SAUP_TYPE">
        AND   (C.SAUP_TYPE  = #SAUP_TYPE#)
        </isNotNull>
        <isNotNull col="TM_CD">
        AND   (C.TM_CD      = #TM_CD#)
        </isNotNull>
        <isNotNull col="SUB_JOB_CD">
        AND   (C.SUB_JOB_CD = #SUB_JOB_CD#)
        </isNotNull>
        <isNotNull col="LOC_CD">
        AND   (C.LOC_CD     = #LOC_CD#)
        </isNotNull>
        UNION ALL
        SELECT C.SAUP_TYPE,
               C.TM_CD,
               V.UPJANG,
               V.CUSTCD,
               NVL(V.AMT, 0) AMT,
               V.RCP_DATE BOND_DATE,
               '당월수금' DUE_GUBUN,
               0 RCP_AMT1,
               0 RCP_AMT2
          FROM MAS_RCP V,
               SCO_UPJANG_CUST  B,
               SCO_UPJANG_MST_V C
        WHERE (V.UPJANG     = B.UPJANG)
        AND   (V.CUSTCD     = B.CUSTCD)
        AND   (V.UPJANG     = C.UPJANG)
        AND   (V.RCP_DATE   BETWEEN SUBSTR(#TRX_DATE#, 1, 6)||'01' AND SUBSTR(#TRX_DATE#, 1, 6)||'31')
        <isNotNull col="SAUP_TYPE">
        AND   (C.SAUP_TYPE  = #SAUP_TYPE#)
        </isNotNull>
        <isNotNull col="TM_CD">
        AND   (C.TM_CD      = #TM_CD#)
        </isNotNull>
        <isNotNull col="SUB_JOB_CD">
        AND   (C.SUB_JOB_CD = #SUB_JOB_CD#)
        </isNotNull>
        <isNotNull col="LOC_CD">
        AND   (C.LOC_CD     = #LOC_CD#)
        </isNotNull>
        UNION ALL
        SELECT C.SAUP_TYPE,
               C.TM_CD,
               V.UPJANG,
               V.CUSTCD,
               NVL(V.AMT, 0) AMT,
               V.TRX_DATE BOND_DATE,
               (CASE WHEN #TRX_DATE# &gt;  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.TRX_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.TRX_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                     LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.TRX_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                     ) THEN
                          '악성채권'
                     WHEN #TRX_DATE# &lt;=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.TRX_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.TRX_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                     LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.TRX_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                     ) AND
                          #TRX_DATE# &gt; DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.TRX_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.TRX_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
                                     LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.TRX_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                     ) THEN
                          '도래채권'
                     WHEN #TRX_DATE# &lt;=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.TRX_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.TRX_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
                                     LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.TRX_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                     ) THEN
                          '미도래채권' END) DUE_GUBUN,
               NVL((SELECT SUM(AMT) FROM MAS_TRX_LINE       WHERE TRX_ID     = V.TRX_ID AND LINE_DATE BETWEEN '19000101' AND #TRX_DATE#), 0) RCP_AMT1,
               NVL((SELECT SUM(AMT) FROM MAS_TRX_SUBST_LINE WHERE ORG_TRX_ID = V.TRX_ID AND LINE_DATE BETWEEN '19000101' AND #TRX_DATE#), 0) RCP_AMT2
          FROM MAS_TRX V,
               MAS_BOND_CODE A,
               SCO_UPJANG_CUST  B,
               SCO_UPJANG_MST_V C
        WHERE (A.BOND_GUBUN = 'CREDIT')
        AND   (V.DR_ACCTCD  = A.ACCTCD)
        AND   (V.UPJANG     = B.UPJANG)
        AND   (V.CUSTCD     = B.CUSTCD)
        AND   (V.UPJANG     = C.UPJANG)
        AND   (V.TRX_DATE   BETWEEN '19000101' AND #TRX_DATE#)
        <isNotNull col="SAUP_TYPE">
        AND   (C.SAUP_TYPE  = #SAUP_TYPE#)
        </isNotNull>
        <isNotNull col="TM_CD">
        AND   (C.TM_CD      = #TM_CD#)
        </isNotNull>
        <isNotNull col="SUB_JOB_CD">
        AND   (C.SUB_JOB_CD = #SUB_JOB_CD#)
        </isNotNull>
        <isNotNull col="LOC_CD">
        AND   (C.LOC_CD     = #LOC_CD#)
        </isNotNull>
        UNION ALL
        SELECT C.SAUP_TYPE,
               C.TM_CD,
               V.UPJANG,
               V.CUSTCD,
               NVL(V.AMT, 0) AMT,
               V.RCP_DATE    BOND_DATE,
               DECODE(V.DR_ACCTCD, '1110822', '미수금', '1110815', '미수금(신용카드)') DUE_GUBUN,
               NVL((SELECT SUM(AMT) FROM MAS_RMT_LINE       WHERE RCP_ID     = V.RCP_ID AND LINE_DATE BETWEEN '19000101' AND #TRX_DATE#), 0) RCP_AMT1,
               0 RCP_AMT2
          FROM MAS_RCP V,
               MAS_BOND_CODE A,
               SCO_UPJANG_CUST  B,
               SCO_UPJANG_MST_V C
        WHERE (A.BOND_GUBUN = 'MISU')
        AND   (V.DR_ACCTCD  = A.ACCTCD)
        AND   (V.UPJANG     = B.UPJANG)
        AND   (V.CUSTCD     = B.CUSTCD)
        AND   (V.UPJANG     = C.UPJANG)
        AND   (V.RCP_DATE   BETWEEN '19000101' AND #TRX_DATE#)
        <isNotNull col="SAUP_TYPE">
        AND   (C.SAUP_TYPE  = #SAUP_TYPE#)
        </isNotNull>
        <isNotNull col="TM_CD">
        AND   (C.TM_CD      = #TM_CD#)
        </isNotNull>
        <isNotNull col="SUB_JOB_CD">
        AND   (C.SUB_JOB_CD = #SUB_JOB_CD#)
        </isNotNull>
        <isNotNull col="LOC_CD">
        AND   (C.LOC_CD     = #LOC_CD#)
        </isNotNull>
       ) V
GROUP BY V.SAUP_TYPE,
         V.TM_CD,
         V.UPJANG
         
         
UNION ALL      
SELECT '004' SAUP_TYPE,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'MA0001' AND CODE = '004') SAUP_TYPENM,
       A.TM_CD,
       (SELECT TM_NM FROM HLDC_SC_TM WHERE TM_CD = A.TM_CD)||'(식재)' TM_NM,
       V.UPJANG,
       (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM,
       SUM(V.CURR_MACHUL)                                         CURR_TRX_AMT,
       NVL((SELECT SUM(B.AMOUNT) FROM FMS_UPJANG A, HLDC_FM_RECEIPT B WHERE A.UPJANG = B.UPJANG AND B.RECEIPT_DATE BETWEEN SUBSTR(#TRX_DATE# , 1, 6)||'01' AND SUBSTR(#TRX_DATE# , 1, 6)||'31'
                                                                      AND   B.DCGUBUN = '2'       AND B.ACCTCD = '1110411' AND DECODE(A.HEAD_CREDIT_YN, 'Y', A.MAIN_UPJANG, A.UPJANG) = V.UPJANG), 0) CURR_RCP_AMT,
       SUM(DECODE(V.DUE_GUBUN, '미도래채권', V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             MI_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             DO_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '악성채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             AK_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '미수금',     V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             MISU_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '미수금(신용카드)',     V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))   MISUCARD_BOND_AMT,
       '004'||'-'||A.TM_CD||'-'||V.UPJANG PL_CD,
       '1' PL_UP_CD,
       '0' BL_SHOW,
       3 LEVEL_NO,
       '+' BL_PLUS
FROM (
      SELECT UPJANG,
             SUM(AMT) AMT,
             BOND_DATE,
             DUE_GUBUN,
             SUM(RCP_AMT1) RCP_AMT1,
             SUM(RCP_AMT2) RCP_AMT2,
             CUSTCD,
             SUM(CURR_MACHUL) CURR_MACHUL
        FROM (
              SELECT DECODE(B.HEAD_CREDIT_YN, 'Y', B.MAIN_UPJANG, B.UPJANG) UPJANG,
                     (V.BILL_AMOUNT + V.BILL_VAT) AMT,
                     V.BILL_DATE                  BOND_DATE,
                     (CASE WHEN #TRX_DATE# &gt;  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.BILL_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.BILL_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.BILL_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) THEN
                                '악성채권'
                           WHEN #TRX_DATE# &lt;=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.BILL_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.BILL_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.BILL_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) AND
                                #TRX_DATE# &gt; DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.BILL_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.BILL_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.BILL_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) THEN
                                '도래채권'
                           WHEN #TRX_DATE# &lt;=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.BILL_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.BILL_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.BILL_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) THEN
                                '미도래채권' END) DUE_GUBUN,
                     NVL((SELECT SUM(B.AMOUNT) FROM HLDC_FM_RECEIPT A, HLDC_FM_BILL_RECEIPT B WHERE A.RECEIPT_ID = B.RECEIPT_ID AND B.BILL_ID = V.BILL_ID AND A.RECEIPT_DATE BETWEEN '19000101' AND #TRX_DATE#), 0) RCP_AMT1,
                     0 RCP_AMT2,
                     C.CUSTCD,
                     (CASE WHEN V.BILL_DATE   BETWEEN SUBSTR(#TRX_DATE# , 1, 6)||'01' AND SUBSTR(#TRX_DATE# , 1, 6)||'31' THEN
                                (V.BILL_AMOUNT + V.BILL_VAT)
                           ELSE
                                0
                      END) CURR_MACHUL
                FROM HLDC_FM_BILL V,
                     FMS_UPJANG B,
                     (SELECT * FROM SCO_UPJANG_CUST A WHERE (UPJANG, CUSTCD) IN  (SELECT UPJANG, MIN(CUSTCD) CUSTCD FROM SCO_UPJANG_CUST GROUP BY UPJANG)) C
              WHERE  (V.UPJANG                                               = B.UPJANG)
              AND    (DECODE(B.HEAD_CREDIT_YN, 'Y', B.MAIN_UPJANG, B.UPJANG) = C.UPJANG)
              AND    (V.BILL_DATE  BETWEEN '19000101' AND #TRX_DATE#)
              AND    (V.CANCEL_FLAG    = 'N')
              AND    (V.DCGUBUN        = '1')
              AND    (V.ACCTCD         = '1110411')
              ) 
              GROUP BY UPJANG,BOND_DATE,DUE_GUBUN,CUSTCD                   
        ) V,
        MAC_UPJANG_V A
WHERE (V.UPJANG = A.UPJANG)
<isNotNull col="SAUP_TYPE">
AND   ('004'    = #SAUP_TYPE#)
</isNotNull>
<isNotNull col="TM_CD">
AND   (A.TM_CD      = #TM_CD#)
</isNotNull>
<isNotNull col="SUB_JOB_CD">
AND   (A.SUB_JOB_CD = #SUB_JOB_CD#)
</isNotNull>
<isNotNull col="LOC_CD">
AND   (A.LOC_CD     = #LOC_CD#)
</isNotNull>
GROUP BY A.SAUP_TYPE,
         A.TM_CD,
         V.UPJANG
</statement>
	<input default-name="ds_cond">
	  <col name="TM_CD" size="255" type="VARCHAR" description="" /> 
		<col name="SUB_JOB_CD" size="255" type="VARCHAR" description="" /> 
		<col name="LOC_CD" size="255" type="VARCHAR" description="" /> 
		<col name="TRX_DATE" size="255" type="VARCHAR" description="" /> 
	</input>
	<output default-name="ds_list">      
<col name="SAUP_TYPE" size="255" type="VARCHAR" description="" />   	
<col name="SAUP_TYPENM" size="255" type="VARCHAR" description="" />   	
<col name="TM_CD" size="255" type="VARCHAR" description="" />      	
<col name="TM_NM" size="255" type="VARCHAR" description="" />      	
<col name="CUSTCD" size="" type="NUMERIC" description="" />
<col name="CUSTNM" size="255" type="VARCHAR" description="" />
<col name="CURR_TRX_AMT" size="" type="NUMERIC" description="" />
<col name="CURR_RCP_AMT" size="" type="NUMERIC" description="" />
<col name="MI_BOND_AMT" size="" type="NUMERIC" description="" />
<col name="DO_BOND_AMT" size="" type="NUMERIC" description="" />
<col name="AK_BOND_AMT" size="" type="NUMERIC" description="" />
<col name="MISU_BOND_AMT" size="" type="NUMERIC" description="" />
<col name="MISUCARD_BOND_AMT" size="" type="NUMERIC" description="" />
<col name="PL_CD" size="255" type="VARCHAR" description="" />
<col name="PL_UP_CD" size="255" type="VARCHAR" description="" />
<col name="BL_SHOW" size="255" type="VARCHAR" description="" />
<col name="LEVEL_NO" size="255" type="NUMERIC" description="" />
<col name="BL_PLUS" size="255" type="VARCHAR" description="" />

	</output>
</query>