<?xml version="1.0" encoding="euc-kr"?>
<query dynamic="true">
	<type>select</type>
	<description><![CDATA[영양평가 리스트 조회(폐기율미적용)]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>
SELECT A.MENU_DATE,
       (E.CODE_NAME || F.CODE_NAME || DECODE(G.CORNER_DESC, NULL, '', '[' || G.CORNER_DESC || ']')) AS MENU_DESC,
       SUM(ROUND((NVL(D.CAL,0) * NVL(C.NEED_QTY,0) / 100),2)) CAL, -- "열량"
	   SUM(ROUND((NVL(D.CARBO,0) * NVL(C.NEED_QTY,0) / 100),2)) CARBO, --"당질"
	   SUM(ROUND((NVL(D.PROT,0) * NVL(C.NEED_QTY,0) / 100),2)) PROT, --"단백질"
	   SUM(ROUND((NVL(D.FAT,0) * NVL(C.NEED_QTY,0) / 100),2)) FAT, --"지질"
	   SUM(ROUND((NVL(D.VITA_A,0) * NVL(C.NEED_QTY,0) / 100),2)) VITA_A, --"비타민A"
	   SUM(ROUND((NVL(D.THIA,0) * NVL(C.NEED_QTY,0) / 100),2)) THIA, --"비타민B1"
       SUM(ROUND((NVL(D.RIBO,0) * NVL(C.NEED_QTY,0) / 100),2)) RIBO, --"비타민B2"
	   SUM(ROUND((NVL(D.VITA_C,0) * NVL(C.NEED_QTY,0) / 100),2)) VITA_C, --"비타민C"
	   SUM(ROUND((NVL(D.CA,0) * NVL(C.NEED_QTY,0) / 100),2)) CA, --"칼슘"
	   SUM(ROUND((NVL(D.FE,0) * NVL(C.NEED_QTY,0) / 100),2)) FE --"철"
  FROM FMM_MENU A,    -- 실재 식단 마스터(KEY : UPJANG, MENU_CD)
       FMM_RECIPE B,  -- 실재 레시피 마스터(KEY : UPJANG, MENU_CD, RECIPE_CD)
       FMM_RECIPE_ITEM C, -- 실재 레시피 품목(KEY : UPJANG, MENU_CD, RECIPE_CD, ITEM_CODE)
       (
            SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE
              FROM FMP_ITEM_NUT WHERE UPJANG = #UPJANG#
             UNION ALL
           (SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE
              FROM FSI_ITEM_NUT
             MINUS
            SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE
              FROM FMP_ITEM_NUT WHERE UPJANG = #UPJANG#)
       ) D,
      (SELECT CODE, CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0023') E,
      (SELECT CODE, CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'FS0022') F,
      FMS_MEAL_CORNER G
 WHERE A.UPJANG = #UPJANG# -- "업장코드(필수조회조건)"
   AND A.SUBINV_CODE = #SUBINV_CODE# -- "식당코드(필수조회조건)"
   AND A.MENU_DATE BETWEEN #FROM_MENU_DATE# AND #TO_MENU_DATE# -- "제공일자(검색조건)"
   AND A.UPJANG = B.UPJANG
   AND A.MENU_CD = B.MENU_CD
   AND B.UPJANG = C.UPJANG
   AND B.MENU_CD = C.MENU_CD
   AND B.RECIPE_CD = C.RECIPE_CD
   AND C.ITEM_CODE = D.ITEM_CODE
   AND A.MEAL = E.CODE(+)
   AND A.CORNER = F.CODE(+)
   AND A.SUBINV_CODE = G.SUBINV_CODE
   AND A.MEAL = G.MEAL
   AND A.CORNER = G.CORNER
<isNotNull col="MEAL">
   AND A.MEAL = #MEAL#
</isNotNull>
<isNotNull col="CORNER">
   AND A.CORNER = #CORNER#
</isNotNull>
 GROUP BY A.MENU_DATE, A.MENU_CD, E.CODE_NAME, F.CODE_NAME, G.CORNER_DESC	</statement>
	<input default-name="ds_Input">
	</input>
	<output default-name="ds_List">
	</output>
</query>
