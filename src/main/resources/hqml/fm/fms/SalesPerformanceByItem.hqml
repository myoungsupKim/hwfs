<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="fm.fms.salesPerformanceByItemDAO">
	<desc>거래처자재별별 매출실적조회 HQML Query</desc>
	
	<!-- 매출집계정보 조회 -->
	<statement name="selectCondDt" type="select">
		<![CDATA[
		/*+ com.hwfs.fm.fms.dao.SalesPerformanceByCustDAO.selectCondDt */
		SELECT   TO_CHAR(MIN(C.STRDD), 'YYYYMMDD') AS STRDD
       , TO_CHAR(MAX(C.ENDDD), 'YYYYMMDD') AS ENDDD
       , DECODE(C.SUM_YN, 'Y', 1, 0) AS SUM_YN
       , SUM(DECODE(C.SUM_YN, 'Y', 0, 1)) OVER () AS FLAG
		FROM     ( SELECT  B.*
		                , SUM(B.FLAG) OVER(ORDER BY B.YYMM) AS GRP
		         FROM     ( SELECT  A.*
		                         , CASE
		                                    WHEN STRDD -1 = LAG(ENDDD) OVER (PARTITION BY SUM_YN ORDER BY STRDD)
		                                    THEN 0
		                                    ELSE 1
		                           END FLAG
		                  FROM     ( SELECT YYMM                               --AS "대상년월"
		                                 , TO_DATE(STRDD, 'YYYYMMDD') AS STRDD --AS "조회시작일"
		                                 , TO_DATE(ENDDD, 'YYYYMMDD') AS ENDDD --AS "조회종료일"
		                                 , CASE
		                                           WHEN YYMM_FDAY    = STRDD
		                                           AND     YYMM_LDAY = ENDDD
		                                           AND     LST_DT   >= ENDDD
		                                           THEN 'Y'
		                                           ELSE 'N'
		                                   END AS SUM_YN                                                               --AS "테이블참조구분"
		                           FROM    ( SELECT YYMM                                                               --조회년월
		                                         , TO_CHAR(TRUNC(TO_DATE(YYMM,'YYYYMM'),'MM'),'YYYYMMDD') AS YYMM_FDAY --년월시작일
		                                         , TO_CHAR(LAST_DAY(TO_DATE(YYMM,'YYYYMM')),'YYYYMMDD')   AS YYMM_LDAY --년월종료일
		                                         , STRDD                                                               --조회시작일
		                                         , ENDDD                                                               --조회종료일
		                                         , (SELECT MAX(TRANS_DATE)                                             
		                                           FROM    FMS_BUY_SALE_SUM )
		                                           AS LST_DT
		                                   FROM    ( SELECT  SUBSTRB(DATES,1,6) YYMM
		                                                  , MIN(DATES) STRDD
		                                                  , MAX(DATES) ENDDD
		                                           FROM     ( SELECT TO_CHAR(MAKE_DATES + LEVEL -1,'YYYYMMDD') DATES
		                                                    FROM    ( SELECT TO_DATE(:schTransDtFr,'YYYYMMDD') MAKE_DATES
		                                                            FROM    DUAL)                                                       --조회시작일
		                                                            CONNECT BY (MAKE_DATES + LEVEL-1) <= TO_DATE(:schTransDtTo,'YYYYMMDD') --조회종료일
		                                                    )
		                                           GROUP BY SUBSTRB(DATES,1,6) )
		                                           T1) )
		                           A )
		                  B )
		         C
		GROUP BY C.GRP, C.SUM_YN

	    ]]>
	</statement>
	
	<!-- 매출내역을 조회한다. -->
	<statement name="selectList" type="select">
		
		<![CDATA[
		/*+ com.hwfs.fm.fms.dao.SalesPerformanceByItemDAO.selectList */
		SELECT ITEM_CLASS
				, CLASS_NAME
				, ITEM_CODE
				, ITEM_NAME
				, ITEM_SIZE
				, SUM(SUM_A) AS SUM_A
				--, ROUND(SUM(SUM_B)/SUM(SUM_A)) AS SUM_B
				, CASE WHEN SUM(SUM_A) = 0 THEN 0
					ELSE ROUND(SUM(SUM_B)/SUM(SUM_A)) 
				END AS SUM_B
				--, ROUND(SUM(SUM_C)/SUM(SUM_A)) AS SUM_C
				, CASE WHEN SUM(SUM_A) = 0  THEN 0
					ELSE ROUND(SUM(SUM_C)/SUM(SUM_A)) 
				END AS SUM_C
				, SUM(SUM_D_TOT) AS SUM_D_TOT
				, SUM(SUM_D) AS SUM_D
				, SUM(SUM_E) AS SUM_E
				--, SUM(SUM_F) AS SUM_F
				--, ROUND((SUM(SUM_E)/SUM(SUM_D))*100, 2) AS SUM_F
				, CASE WHEN SUM(SUM_D) = 0 THEN 0
					ELSE ROUND((SUM(SUM_E)/SUM(SUM_D))*100, 2) 
				END AS SUM_F
				
		 FROM  (
		<#if liveFr?has_content>
		 SELECT 
			  RS.ITEM_CLASS2 AS ITEM_CLASS 
			, CASE WHEN SUBSTR(RS.ITEM_CODE, 1, 1) = '7' THEN '보정분' ELSE (SELECT CLASS_NAME FROM HLDC_PO_ITEM_CLASS_HLDC_V WHERE CLASS_CODE = RS.ITEM_CLASS2) END  AS CLASS_NAME 
			, RS.ITEM_CODE 
			, RS.ITEM_NAME 
			, RS.ITEM_SIZE 
			--, RS.TRANS_UOM 
			, RS.TRANS_QTY AS SUM_A	/* 입고수량 */ 
			--, CASE WHEN RS.TRANS_QTY = 0 THEN 0 ELSE ROUND(RS.TRANS_SUM / RS.TRANS_QTY, 0) END AS SUM_B	/* 평균원가 */ 
			, CASE WHEN RS.TRANS_QTY = 0 THEN 0 ELSE RS.TRANS_SUM END AS SUM_B	/* 평균원가 */ 
			--, CASE WHEN RS.TRANS_QTY = 0 THEN 0 ELSE ROUND((RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM)) / RS.TRANS_QTY, 0) END AS SUM_C	/* 평균판매가 */
			, CASE WHEN RS.TRANS_QTY = 0 THEN 0 ELSE (RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM)) END AS SUM_C	/* 평균판매가 */ 
			, RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM) + 
			  RS.SALE_VAT - (RS.CK_SALE_VAT + RS.JI_SALE_VAT)  AS SUM_D_TOT	/* 총매출액 */ 
			, RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM) AS SUM_D	/* 순매출액 */ 
			, RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM) - RS.TRANS_SUM AS SUM_E  /* 이익액 */ 
			, CASE WHEN RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM) = 0 THEN 0 
			  ELSE ROUND((RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM) - RS.TRANS_SUM) / (RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM)) * 100, 2) 
			  END AS SUM_F /* 이익율 */ 
			, RS.SALE_SUM AS SUM_G
		 FROM  
			( 
			SELECT 
				     X.ITEM_CLASS2 
					, X.ITEM_CODE 
					, X.ITEM_NAME 
					, X.ITEM_SIZE 
					, X.TRANS_UOM 
				, SUM(X.TRANS_QTY) AS TRANS_QTY 
				, SUM(ROUND(X.TRANS_MAMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)))     AS TRANS_SUM   
		<#if schChk3 == '1'>
			     , SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_SUM 
				 , SUM( 
						CASE WHEN X.FLAG = '1' THEN 		 
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0.1,0)) 
						ELSE 
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)   
						END 
					) AS SALE_VAT 
		<#else>
        		, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_SUM 
        --		, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))) AS SALE_VAT  
        		, SUM(   
						CASE WHEN X.FLAG = '1' THEN   
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))   
						ELSE   
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)   
						END   
				 ) AS SALE_VAT  
		</#if>
				, SUM(ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)))          AS CK_SALE_SUM 
				, SUM(ROUND(DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))) AS CK_SALE_VAT 
				, SUM(ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)))          AS JI_SALE_SUM 
				, SUM(ROUND(DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))) AS JI_SALE_VAT 
			FROM 
				( 
				SELECT 
					   T.MAIN_UPJANG 
					  , T.UPJANG 
					  ,	T.TRANS_DATE 
					  , T.ITEM_CODE 
					  , T.ITEM_NAME 
					  , T.ITEM_SIZE 
					  , T.TRANS_UOM 
					  , T.TRANS_TYPE 
					  , T.TRANS_QTY 
					  , T.TRANS_MPRICE 
					  , T.TRANS_MAMOUNT 
					  , T.TRANS_MVAT 
					  , T.SALE_PRICE 
					  , T.SALE_AMOUNT 
					  , T.SALE_VAT 
					  , T.TAX_CODE 
					  , T.FLAG 
					  , T.DEPT_ID 
					  , T.CC_NM 
					  , T.UPJANGNM 
					  , T.ITEM_CLASS2 
		       		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0 
			  		  ELSE 
							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN   
								CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0  
                           		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END	  
							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))  
							END  
			  		   END AS CK_AMOUNT 
		    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0 
			  		  ELSE 
							CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN  
								CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0  
                       			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END 
				  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100)))) 
							END  
					  END AS JI_AMOUNT 
				 , DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE 
				FROM 
					( 
						SELECT
							   /*+ PUSH_PRED(A) */ 
							   Z.MAIN_UPJANG	 
							  , A.TRANS_UPJANG AS UPJANG 
							  , 	A.TRANS_DATE 
							  , A.ITEM_CODE 
							  , A.ITEM_NAME 
							  , A.ITEM_SIZE 
							  , A.TRANS_UOM 
							  , A.TRANS_TYPE 
							  , A.TRANS_QTY 
		<#if schPriceGnb == '2'>
				      		  , NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE                                                                                                       
				      		  , NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT                                                                                              
				      		  , ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT                                        
		<#else>
		                      , NVL(A.TRANS_MPRICE,0) AS  TRANS_MPRICE                                                                                                   
		                      , NVL(A.TRANS_MAMOUNT,0) AS TRANS_MAMOUNT                                                                                          
		                      , NVL(A.TRANS_MVAT,0) AS TRANS_MVAT                                                                                                        
		</#if>


							  , NVL(A.SALE_PRICE,0) AS SALE_PRICE 
							  , NVL(A.SALE_AMOUNT,0) AS SALE_AMOUNT 
							  , NVL(A.SALE_VAT,0) AS SALE_VAT 
							  , A.TAX_CODE 
							  , A.FLAG 
							  , B2.DEPT_ID 
							  , D.CC_NM 
							  , B2.UPJANGNM 
							  , M.ITEM_CLASS2			-- 중분류기준 
		<#if schChk1 == '1'>
							  , CASE WHEN A.TAX_CODE = '100' THEN 
									(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0) 
									ELSE NVL(C2.FM_SALE_RATE, 0) 
									END) 
								ELSE  
									(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0) 
									ELSE NVL(C2.FM_NOSALE_RATE, 0) 
									END) 
								END AS C1_SALE_RATE									/* 분류 기준 CK 물류비율 */	 
							  , FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 장려금 비율 */ 
		<#else>
					      	  , 0 AS C1_SALE_RATE									/* 분류 기준 CK 물류비율 */ 
					      	  , 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */ 
		</#if>
		<#if schChk2 == '1'>
							  , CASE WHEN A.TAX_CODE = '100' THEN 
									(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0) 
									ELSE NVL(J2.FM_SALE_RATE, 0) 
									END) 
								ELSE  
									(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0) 
									ELSE NVL(J2.FM_NOSALE_RATE, 0) 
									END) 
								END AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */	 
							  , FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE		/* 자재별 지급수수료 비율 */ 
		<#else>
					      	  , 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */ 
					      	  , 0 AS J_SALE_RATE									/* 자재별 지급수수료 비율 */ 
		</#if>
		<#if schChk3 == '1'>
							  , CASE WHEN A.TAX_CODE = '100' THEN 
									(CASE WHEN NVL(S2.FM_SALE_RATE, 0) = 0 THEN NVL(S1.FM_SALE_RATE, 0) 
									ELSE NVL(S2.FM_SALE_RATE, 0) 
									END) 
								ELSE  
									(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) = 0 THEN NVL(S1.FM_NOSALE_RATE, 0) 
									ELSE NVL(S2.FM_NOSALE_RATE, 0) 
									END) 
								END AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	 
							  , FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */ 
		<#else>
					      	  , 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */ 
					      	  , 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */ 
		</#if>
					    FROM FMS_TRANSACTION_V A 

				    	 					    INNER JOIN ST_UPJANG B2 ON 1 = 1 
					<#if schUpjangCd?has_content>
																					AND B2.UPJANG = TO_NUMBER(:schUpjangCd)
					<#else>
						<#if schMainUpjangCd?has_content>
																					AND  B2.UPJANG IN (SELECT TO_CHAR(UPJANG) FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjangCd) 
						</#if>
					</#if>			
				    	 					    									AND A.TRANS_UPJANG = B2.UPJANG 
				    	 					    INNER JOIN FMS_UPJANG Z ON 1 = 1 
					 <#if schPartSalesSabun?has_content>
																					AND Z.PART_SALES_SABUN      = :schPartSalesSabun 
					</#if>
																					AND A.TRANS_UPJANG = Z.UPJANG 
				    	 					    INNER JOIN HLDC_SC_DEPT_V D ON 1 = 1 
					<#if schTeamCd?has_content>
																							AND D.TM_CD               = :schTeamCd 
					</#if>
				    	 																	AND B2.DEPT_ID = D.DEPT_ID 
												LEFT JOIN HLDC_PO_ITEM_MST M ON SUBSTR(M.ITEM_CODE, 1, 1) = 'F' 
																		AND A.ITEM_CODE = M.ITEM_CODE 
												
		<#if schChk1 == '1'>
												LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG 
																	AND C1.SUBINV_CODE = A.SUBINV_CODE 
																	AND C1.CASH_CODE = '001'			/* CK물류비(001) */ 
																	AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE 
																	AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */ 
												LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG 
																	AND C2.SUBINV_CODE = A.SUBINV_CODE 
																	AND C2.CASH_CODE = '001'			/* CK물류비(001) */ 
																	AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE 
																	AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */ 
		</#if>
		<#if schChk2 == '1'>
												LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG 
																	AND J1.SUBINV_CODE = A.SUBINV_CODE 
																	AND J1.CASH_CODE = '002'			/* 지급수수료(002) */ 
																	AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE 
																	AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */ 
												LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG 
																	AND J2.SUBINV_CODE = A.SUBINV_CODE 
																	AND J2.CASH_CODE = '002'			/* 지급수수료(002) */ 
																	AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE 
																	AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */ 
		</#if>
		<#if schChk3 == '1'>
												LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG 
																	AND S1.SUBINV_CODE = A.SUBINV_CODE 
																	AND S1.CASH_CODE = '003'			/* 장려금(003) */ 
																	AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE 
																	AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */ 
												LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG 
																	AND S2.SUBINV_CODE = A.SUBINV_CODE 
																	AND S2.CASH_CODE = '003'			/* 장려금(003) */ 
																	AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE 
																	AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */ 
		</#if>
						WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' 
						AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' ) 
		
		<#if liveFr1?has_content && liveTo1?has_content>
			AND ( ( A.TRANS_DATE2 BETWEEN :liveFr AND :liveTo ) OR ( A.TRANS_DATE2 BETWEEN :liveFr1 AND :liveTo1 ) )
			
		<#else>
			AND A.TRANS_DATE2 BETWEEN :liveFr AND :liveTo
		</#if>
						 
		<#if schCenterCd != '*'>
			            AND A.CENTER_CODE  = :schCenterCd 
		</#if>
					) T	 
				) X 
				GROUP BY 	  X.ITEM_CLASS2, X.ITEM_CODE, X.ITEM_NAME, X.ITEM_SIZE, X.TRANS_UOM 
			) RS 
		</#if>
		
		<#if liveFr?has_content && sumFr?has_content>
		UNION ALL
		</#if>
		<#if sumFr?has_content>
		
		SELECT
			 CASE
			 		WHEN SUBSTR(A.ITEM_CODE, 1, 1) = '7'
			 		THEN A.ITEM_CODE
			 		ELSE ( SELECT C.ITEM_CLASS2 
			 					FROM HLDC_PO_ITEM_MST C 
			 					WHERE C.ITEM_CODE = A.ITEM_CODE )
			 		END AS ITEM_CLASS
			 -- C.ITEM_CLASS2 AS ITEM_CLASS
		     ,  CASE
		              WHEN SUBSTR(A.ITEM_CODE, 1, 1) = '7'
		              THEN '보정분'
		              ELSE
		                    (SELECT X.CLASS_NAME
		                    	FROM    HLDC_PO_ITEM_CLASS_HLDC_V X 
		                    			, HLDC_PO_ITEM_MST Y 
		                    WHERE   X.CLASS_CODE = Y.ITEM_CLASS2
		                    AND Y.ITEM_CODE = A.ITEM_CODE)
		       END AS CLASS_NAME
		     , A.ITEM_CODE
		     , A.ITEM_NAME
		     , A.ITEM_SIZE
		     , B.UNIT_CNT AS SUM_A
		     /*
		     , CASE WHEN B.UNIT_CNT = 0 THEN 0
		       	  ELSE ROUND((A.TRANS_SUM / B.UNIT_CNT))
		     	END AS SUM_B -- 평균원가
		     */
		     , CASE WHEN B.UNIT_CNT = 0 THEN 0
		       	  ELSE A.TRANS_SUM
		     	END AS SUM_B -- 평균원가
		     /*
		     , CASE WHEN B.UNIT_CNT = 0 THEN 0
		     		ELSE 
				     	ROUND((
				     	- <#if schChk1 == '1'> A.CK_SALE_NOTAX <#else> 0 </#if>
				     	- <#if schChk2 == '1'> A.JI_SALE_NOTAX <#else> 0 </#if>
				     	+ <#if schChk3 == '1'> A.SALE_TOT_S <#else> A.SALE_TOT </#if>
				     	/ B.UNIT_CNT
				     	)) 
				     END AS SUM_C -- 평균판매
			 */
			 , CASE WHEN B.UNIT_CNT = 0 THEN 0
		     		ELSE 
				     	- <#if schChk1 == '1'> A.CK_SALE_NOTAX <#else> 0 </#if>
				     	- <#if schChk2 == '1'> A.JI_SALE_NOTAX <#else> 0 </#if>
				     	+ <#if schChk3 == '1'> A.SALE_TOT_S <#else> A.SALE_TOT </#if> 
				     END AS SUM_C -- 평균판매
		     , (
		    	- <#if schChk1 == '1'> A.CK_SALE_TAX <#else> 0 </#if>
		     	- <#if schChk2 == '1'> A.JI_SALE_TAX <#else> 0 </#if>
		     	+ <#if schChk3 == '1'> A.SALE_ALL_S <#else> A.SALE_ALL </#if>
		     	) AS SUM_D_TOT
		     , (
		    	- <#if schChk1 == '1'> A.CK_SALE_NOTAX <#else> 0 </#if>
		     	- <#if schChk2 == '1'> A.JI_SALE_NOTAX <#else> 0 </#if>
		     	+ <#if schChk3 == '1'> A.SALE_TOT_S <#else> A.SALE_TOT </#if>
		     	) AS SUM_D
		     	
		     <#if schPriceGnb == '2'>
		     	, A.MARGIN_SUM AS SUM_E
		     <#else>	
			     <#if schChk3 == '1'>
			     , A.MARGIN_S AS SUM_E
			     <#else>
			     , A.MARGIN	AS SUM_E
			     </#if>
		     </#if>
		     --, ROUND((1-(A.SALE_TOT-A.MARGIN)/A.SALE_TOT)*100, 2)  AS SUM_F
		     , ROUND (
		     ( 1 - 
		       ((   - <#if schChk1 == '1'> A.CK_SALE_NOTAX <#else> 0 </#if>
		      		 - <#if schChk2 == '1'> A.JI_SALE_NOTAX <#else> 0 </#if>
		      		 + <#if schChk3 == '1'> A.SALE_TOT_S <#else> A.SALE_TOT </#if> )
		     - ( <#if schChk3 == '1'> A.MARGIN_S <#else> A.MARGIN </#if> ))
		     /
		     (  - <#if schChk1 == '1'> A.CK_SALE_NOTAX <#else> 0 </#if>
		      	- <#if schChk2 == '1'> A.JI_SALE_NOTAX <#else> 0 </#if>
		      	+ <#if schChk3 == '1'> A.SALE_TOT_S <#else> A.SALE_TOT </#if> ) )
		      	*100, 2) AS SUM_F
		     , A.TRANS_SUM AS SUM_G
		     --, A.* 
		FROM   FMS_BUY_SALE_MONTH_ITEM_SUM A
		     , ( SELECT TO_CHAR(X.UPJANG) AS UPJANG
		     		  , SUBSTR(B.TRANS_DATE, 1, 6) AS TRANS_MONTH
		     		  , B.ITEM_CODE
		              , SUM(NVL(B.TRANS_SUM/DECODE(B.TRANS_MPRICE, 0
		                                         , NULL
		                                         , B.TRANS_MPRICE), 0)) AS UNIT_CNT
		       FROM     FMS_BUY_SALE_SUM B, FMS_UPJANG X, HLDC_SC_DEPT_V Y
		       WHERE    B.UPJANG = TO_CHAR(X.UPJANG)
		       AND B.DEPT_ID = Y.CC_CD
		       AND X.DEPT_ID = Y.DEPT_ID
		       <#if schMainUpjangCd?has_content>
		       AND B.MAIN_UPJANG = :schMainUpjangCd
		       AND X.MAIN_UPJANG = :schMainUpjangCd
		       <#else>
		       		<#if schUpjangCd?has_content>
		       			AND B.MAIN_UPJANG = (SELECT MAIN_UPJANG FROM FMS_UPJANG WHERE UPJANG = TO_NUMBER(:schUpjangCd) )
		       		</#if>
		       </#if>
		       <#if schUpjangCd?has_content>
		       AND      B.UPJANG = :schUpjangCd
		       AND		X.UPJANG = TO_NUMBER(:schUpjangCd)
		       </#if>
		       <#if schPartSalesSabun?has_content>
				AND X.PART_SALES_SABUN = :schPartSalesSabun
			   </#if>
			   <#if schTeamCd?has_content> 
				AND Y.TM_CD = :schTeamCd
			   </#if>
			   <#if schCenterCd != "*">
				AND A.CENTER_CODE = :schCenterCd
			   </#if>
		       AND      B.TRANS_DATE BETWEEN :sumFr AND :sumTo
		       AND      B.MG_DATE BETWEEN :sumFr AND :sumTo
		       GROUP BY X.UPJANG, SUBSTR(B.TRANS_DATE, 1, 6), B.ITEM_CODE )
		       B
		WHERE  A.ITEM_CODE   = B.ITEM_CODE
		AND    A.UPJANG   = B.UPJANG
		AND	   A.TRANS_MONTH = B.TRANS_MONTH
		<#if schMainUpjangCd?has_content>
		AND    A.MAIN_UPJANG = :schMainUpjangCd
		<#else>
		       <#if schUpjangCd?has_content>
		       		AND    A.MAIN_UPJANG = (SELECT MAIN_UPJANG FROM FMS_UPJANG WHERE UPJANG = TO_NUMBER(:schUpjangCd) )	
		       </#if>
		</#if>
		<#if schUpjangCd?has_content>
		AND    A.UPJANG      = :schUpjangCd
		</#if>
		AND    A.TRANS_MONTH BETWEEN SUBSTR(:sumFr, 1, 6) AND SUBSTR(:sumTo, 1, 6)
				
		</#if>
		) GROUP BY ITEM_CLASS, CLASS_NAME, ITEM_CODE, ITEM_NAME, ITEM_SIZE
		]]>
	</statement>
</hqml>

