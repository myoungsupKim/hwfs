<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="fm.fms.salePriceHistoryMgntDAO">
	<desc>가격이력관리 HQML Query</desc>
	<!--가격이력관리 목록을 조회한다. -->
	<statement name="selectPeriod" type="select">
	/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.selectPeriod */
		<![CDATA[
			SELECT LISTAGG(TO_CHAR(MONTH , 'YYYYMM'), ', ') WITHIN GROUP ( ORDER BY MONTH ) AS P_DATE
					FROM (SELECT ADD_MONTHS(DAY1, (LEVEL -1))  AS MONTH 
					        FROM (SELECT TO_DATE(:schStDate, 'YYYYMM') DAY1 
					                    ,TO_DATE(:schEdDate, 'YYYYMM') DAY2 
					                FROM DUAL) 
					      CONNECT BY LEVEL <=  ABS(MONTHS_BETWEEN(DAY1, DAY2 )) + 1)
		]]>
	</statement>
	<!--가격이력관리 목록을 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.selectList */
		<![CDATA[
		
				SELECT 
				ITEM_CODE
				, ITEM_NAME
				, ITEM_SIZE
				${schCondTerm}
				FROM (
				<#if schCurMonth?has_content>		
					SELECT SUBSTR(X.TRANS_DATE,1,6) AS TRANS_MONTH   
						, X.ITEM_CODE
						, X.ITEM_NAME
						, X.ITEM_SIZE
						, COUNT(X.ITEM_CODE)                                                                                                 AS UNIT_CNT           -- 수량
						, ROUND(AVG(X.UNIT_PRICE))                                                                                           AS UNIT_AVG     --평균단가
						, CASE WHEN SUM(X.UNIT_PRICE) = 0 THEN 0
						ELSE ROUND(((SUM(X.TRANS_MPRICE)-SUM(X.UNIT_PRICE))/SUM(X.UNIT_PRICE))*100)
						END AS BUY_RATIO          -- 구매율
						, AVG(X.STRATEGY_RATE)                                                                                               AS STRATEGY_RATIO  -- 전략율
						, CASE WHEN COUNT(X.ITEM_CODE) = 0 THEN 0
						ELSE ROUND( (SUM(X.SALE_AMOUNT) / COUNT(X.ITEM_CODE)) ) END AS MARGIN_SUM        --매출액
						, CASE WHEN SUM(X.SALE_AMOUNT) = 0 THEN 0
						ELSE ROUND( ( SUM(X.SALE_AMOUNT) - (COUNT(X.ITEM_CODE) * ROUND(AVG(X.STRATEGY_PRICE))) ) / SUM(X.SALE_AMOUNT) * 100, 2)
						END AS SALE_RATIO        -- 영업이익
						, CASE WHEN SUM(X.SALE_AMOUNT) = 0 THEN 0
						ELSE ROUND( ( SUM(X.SALE_AMOUNT) - (COUNT(X.ITEM_CODE) * ROUND(AVG(X.UNIT_PRICE))) ) / SUM(X.SALE_AMOUNT) * 100, 2)
						END AS MARGIN_RATIO      -- 매출이익
					FROM     ( SELECT T.TRANS_UPJANG
								, T.TRANS_DATE
								, T.ITEM_CODE
								, T.ITEM_NAME
								, T.ITEM_SIZE
								, T.UNIT_PRICE
								, T.TRANS_MPRICE
								, T.SALE_AMOUNT
								, T.STRATEGY_RATE
								, CASE
											WHEN T.ATTR09 = 'Y'
											THEN T.TRANS_MPRICE
											ELSE (
													CASE
															WHEN T.STRATEGY_RATE = 0
															THEN T.TRANS_MPRICE
															ELSE FMS_GETPRICE_TYPE_FUN('S', T.TRANS_MPRICE, T.STRATEGY_RATE, 0, 0, 0)
													END)
									END AS STRATEGY_PRICE
							FROM    ( SELECT A.TRANS_UPJANG
										, A.TRANS_DATE
										, A.ITEM_CODE
										, A.ITEM_NAME
										, A.ITEM_SIZE
										, A.UNIT_PRICE
										, A.TRANS_MPRICE
										, A.SALE_AMOUNT
										, NVL(
												(SELECT
														/*+ INDEX(F FMS_STRATEGY_PROFIT_IDX01) */
														NVL(F.STRATEGY_RATE,0)
												FROM    FMS_STRATEGY_PROFIT F
												WHERE   F.CENTER_CODE = A.CENTER_CODE
												AND     F.CC_CD       =
														(SELECT CC_CD
														FROM    ST_UPJANGv
														WHERE   TO_CHAR(UPJANG) = A.TRANS_UPJANG)
												AND     A.TRANS_DATE BETWEEN F.PROFIT_DATE AND     F.PROFIT_END
												AND     F.CLASS_TYPE = 'M'
												AND     F.ITEM_CODE  = A.ITEM_CODE )
												,0) AS STRATEGY_RATE
										, B.ATTR09
									FROM    FMS_TRANSACTION_V A
										, FMS_UPJANG B
									WHERE   A.TRANS_UPJANG   = TO_CHAR(B.UPJANG)
									--AND A.ITEM_CODE = 'F253733'
									AND ( A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
									AND     A.SUBINV_CODE LIKE 'S1%'
									
									<#if schMainUpjangCd?has_content>
										AND B.MAIN_UPJANG IN TO_NUMBER(:schMainUpjangCd)
									</#if>
									<#if schCcCd?has_content>						
				        				AND B.DEPT_ID = :schCcCd
									</#if>
									<#if schSalesSabun?has_content>
										AND B.PART_SALES_SABUN = :schSalesSabun
									</#if>
									<#if schCenter?has_content>
										AND A.CENTER_CODE IN (${schCenter})
									</#if>
										AND     A.TRANS_DATE2 LIKE :schCurMonth || '%')
										
										T )
								X
					   GROUP BY SUBSTR(X.TRANS_DATE, 1, 6)
       							, X.ITEM_CODE
       							, X.ITEM_NAME
       							, X.ITEM_SIZE
       							, X.TRANS_MPRICE
       							, X.SALE_AMOUNT
       							, X.STRATEGY_RATE 
					  
						
					  UNION 
					</#if>	
						SELECT  X.TRANS_MONTH 
								, X.ITEM_CODE
       							, X.ITEM_NAME
       							, X.ITEM_SIZE
       							, SUM(X.SALE_CNT)                                                                                AS UNIT_CNT
       							, CASE WHEN SUM(X.SALE_CNT) = 0 THEN 0
       								ELSE ROUND(SUM(X.UNIT_SUM) / SUM(X.SALE_CNT))
       							END AS UNIT_AVG
       							, CASE WHEN SUM(X.UNIT_SUM) = 0 THEN 0
       								ELSE ( ROUND( SUM(X.TRANS_SUM) / SUM(X.UNIT_SUM), 2) -1 ) * 100 
       							END AS BUY_RATIO
       							, CASE WHEN SUM(X.TRANS_SUM) = 0 THEN 0
       							ELSE (ROUND( SUM(X.STRATEGY_AMOUNT) / SUM(X.TRANS_SUM), 2) - 1) * 100
       							END AS STRATEGY_RATIO
       							, CASE WHEN SUM(X.SALE_CNT) = 0 THEN 0
       							ELSE ROUND( (SUM(X.SALE_TOT_S)/SUM(X.SALE_CNT)) ) END AS MARGIN_SUM
       							, CASE WHEN SUM(X.SALE_TOT_S) = 0 THEN 0
       							ELSE ROUND((SUM(X.SALE_TOT_S) - SUM(X.STRATEGY_AMOUNT)) / SUM(X.SALE_TOT_S)*100, 2)
								END AS SALE_RATIO
       							, CASE WHEN SUM(X.SALE_TOT_S) = 0 THEN 0
       							ELSE ROUND((SUM(X.SALE_TOT_S) - SUM(X.UNIT_SUM)) / SUM(X.SALE_TOT_S)*100, 2)
       							END AS MARGIN_RATIO
						FROM     FMS_BUY_SALE_MONTH_ITEM_SUM X
						WHERE X.TRANS_MONTH BETWEEN :schStDate AND :schEdDate
						--AND X.ITEM_CODE = 'F253733'
						<#if schCcCd?has_content>						
				        	AND X.UPJANG IN (SELECT DISTINCT TO_CHAR(UPJANG) FROM FMS_UPJANG WHERE DEPT_ID = :schCcCd)
						</#if>
						<#if schMainUpjangCd?has_content>
							AND X.MAIN_UPJANG = :schMainUpjangCd
						</#if>
						<#if schSalesSabun?has_content>
							AND X.UPJANG IN (SELECT DISTINCT TO_CHAR(UPJANG) FROM FMS_UPJANG WHERE PART_SALES_SABUN = :schSalesSabun)
						</#if>
						<#if schCenter?has_content>
							AND X.UPJANG IN (SELECT UPJANG FROM HLDC_PO_UPJANG_CENTER WHERE CENTER_CODE IN (${schCenter}) )
						</#if>   
				        
						GROUP BY X.TRANS_MONTH, X.ITEM_CODE, X.ITEM_NAME, X.ITEM_SIZE
				)
				PIVOT (
				  AVG(UNIT_AVG) AS UNIT_AVG
				  ,SUM(UNIT_CNT) AS UNIT_CNT
				  ,SUM(BUY_RATIO) AS BUY_RATIO
				  ,SUM(STRATEGY_RATIO) AS STRATEGY_RATIO
				  ,SUM(SALE_RATIO) AS SALE_RATIO
				  ,SUM(MARGIN_SUM) AS MARGIN_SUM
				  ,SUM(MARGIN_RATIO) AS MARGIN_RATIO
				  FOR TRANS_MONTH
					IN ( ${schPeriod}	)
				)

		]]>
	</statement>
	
	<statement name="selectCondList" type="select">
	<![CDATA[
			/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.selectCondList */	
			SELECT   LISTAGG(CONTRACT_START, ',') WITHIN GROUP(ORDER BY CONTRACT_START) AS P_COND
			FROM     ( SELECT DISTINCT CONTRACT_START
         					FROM PO_CONTRACT_FSALE
         					WHERE CONTRACT_START BETWEEN :schFrDt AND :schToDt
         					AND CENTER_CODE = :schCenter
         					<#if schApUpjangCd?has_content>
         					AND UPJANG IN
                          	( SELECT UPJANG
                          				FROM ST_UPJANG
                          				WHERE AP_UNITPRICE_UPJANG = TO_NUMBER(:schApUpjangCd)
                          	)
                          	</#if>
         			)
		]]>
	</statement>
	
	
	<statement name="selectTrendList" type="select">
	<![CDATA[
			/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.selectTrendList */	
			SELECT * FROM (
			SELECT   A.ITEM_CLASS4
					, (SELECT CLASS_NAME FROM HLDC_PO_ITEM_CLASS WHERE CLASS_CODE = A.ITEM_CLASS4) AS CLASS_NM
       				, A.CONTRACT_START
       				, A.AVG_CP
       				, A.AVG_SP
       				, ROUND(AVG(B.DPR1)) AS AVG_KP
				FROM     ( SELECT  B.ITEM_CLASS4
                				, A.CONTRACT_START
                				, A.CONTRACT_END
                				, ROUND(AVG(A.CONTRACT_PRICE/B.KG_CONVERT_RATE)) AS AVG_CP
                				, ROUND(AVG(A.SALE_PRICE    /B.KG_CONVERT_RATE)) AS AVG_SP
         					FROM PO_CONTRACT_FSALE A
                				, HLDC_PO_ITEM_MST B
                				, (SELECT CODE
                        				, SET1
                        				, SET2
                  						FROM SCC_COMMON_CODE
                  						WHERE GROUP_CODE = 'PRICE_INFO'
                  						AND USE_YN = 'Y')
                  				C
         					WHERE A.ITEM_CODE = B.ITEM_CODE
         					AND B.ITEM_CLASS4 = C.CODE
         					AND B.ITEM_CLASS3 = C.SET1
         					AND B.ITEM_CLASS2 = C.SET2
         					AND A.CENTER_CODE = :schCenter
         					<#if schApUpjangCd?has_content>
         					AND A.UPJANG IN
                  				( SELECT UPJANG
                  					FROM ST_UPJANG 
                  					WHERE AP_UNITPRICE_UPJANG = TO_NUMBER(:schApUpjangCd)
                  				)
                  			</#if>
         					AND A.CONTRACT_START BETWEEN :schFrDt AND :schToDt
         					GROUP BY B.ITEM_CLASS4, A.CONTRACT_START, A.CONTRACT_END )
         		A, FMS_PRICE_INFO B
				WHERE A.ITEM_CLASS4 = B.ITEM_CLASS4
				AND B.REG_DAY BETWEEN A.CONTRACT_START AND A.CONTRACT_END
				GROUP BY A.ITEM_CLASS4, A.CONTRACT_START, A.AVG_CP, A.AVG_SP
				) T PIVOT (
					SUM(T.AVG_CP) AS AVG_CP
					, SUM(T.AVG_SP) AS AVG_SP
					, SUM(T.AVG_KP) AS AVG_KP
					FOR CONTRACT_START IN ( ${schCond} )
				)
	]]>
	</statement>
	
	<!--가격예측 기준정보를 조회한다. -->
	<statement name="selectTrendList2" type="select">
	/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.selectTrendList2 */
		<![CDATA[
			SELECT * FROM (
			SELECT   -- A.ITEM_CLASS4
					-- , (SELECT CLASS_NAME FROM HLDC_PO_ITEM_CLASS WHERE CLASS_CODE = A.ITEM_CLASS4) AS CLASS_NM
       				A.CONTRACT_START
       				, A.AVG_CP
       				, A.AVG_SP
       				, ROUND(AVG(B.DPR1)) AS AVG_KP
				FROM     ( SELECT  B.ITEM_CLASS4
                				, A.CONTRACT_START
                				, A.CONTRACT_END
                				, ROUND(AVG(A.CONTRACT_PRICE/B.KG_CONVERT_RATE)) AS AVG_CP
                				, ROUND(AVG(A.SALE_PRICE    /B.KG_CONVERT_RATE)) AS AVG_SP
         					FROM PO_CONTRACT_FSALE A
                				, HLDC_PO_ITEM_MST B
                				, (SELECT CODE
                        				, SET1
                        				, SET2
                  						FROM SCC_COMMON_CODE
                  						WHERE GROUP_CODE = 'PRICE_INFO'
                  						AND USE_YN = 'Y')
                  				C
         					WHERE A.ITEM_CODE = B.ITEM_CODE
         					AND B.ITEM_CLASS4 = C.CODE
         					AND B.ITEM_CLASS3 = C.SET1
         					AND B.ITEM_CLASS2 = C.SET2
         					AND A.CENTER_CODE = :schCenter
         					<#if schApUpjangCd?has_content>
         					AND A.UPJANG IN
                  				( SELECT UPJANG
                  					FROM ST_UPJANG 
                  					WHERE AP_UNITPRICE_UPJANG = TO_NUMBER(:schApUpjangCd)
                  				)
                  			</#if>
         					AND A.CONTRACT_START BETWEEN :schFrDt AND :schToDt
         					GROUP BY B.ITEM_CLASS4, A.CONTRACT_START, A.CONTRACT_END )
         		A, FMS_PRICE_INFO B
				WHERE A.ITEM_CLASS4 = B.ITEM_CLASS4
				AND A.ITEM_CLASS4 = :schItmCls
				AND B.REG_DAY BETWEEN A.CONTRACT_START AND A.CONTRACT_END
				GROUP BY A.ITEM_CLASS4, A.CONTRACT_START, A.AVG_CP, A.AVG_SP
				)
		]]>
	</statement>
	
	
	<!-- 센터별 단가 현황 조회한다. -->
	<statement name="selectStatusList" type="select">
		<![CDATA[
		/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.selectStatusList */
			SELECT Z.CENTER_CODE
			, (SELECT Y.CENTER_NAME 
						FROM HLDC_PO_CENTER Y 
						WHERE Y.CENTER_CODE = Z.CENTER_CODE) AS CENTER_NAME
			, COUNT(Z.CONTRACT_ID) AS ALL_CONT_CNT
			, SUM(DECODE(Z.CONTRACT_STATUS, 'C', 1, 0)) AS C_CONT_CNT
			, SUM(DECODE(Z.CONTRACT_STATUS, 'R', 1, 0)) AS R_CONT_CNT
			, SUM(DECODE(Z.CONTRACT_STATUS, 'D', 1, 0)) AS D_CONT_CNT
			, SUM(DECODE(Z.CONTRACT_STATUS, 'E', 1, 0)) AS E_CONT_CNT
			, SUM(DECODE(Z.CONTRACT_STATUS, 'C', Z.C_CNT, 0)) AS C_ITEM_CNT
			, SUM(DECODE(Z.CONTRACT_STATUS, 'R', Z.R_CNT, 0)) AS R_ITEM_CNT
			, SUM(DECODE(Z.CONTRACT_STATUS, 'D', Z.D_CNT, 0)) AS D_ITEM_CNT
			, SUM(DECODE(Z.CONTRACT_STATUS, 'E', Z.E_CNT, 0)) AS E_ITEM_CNT
			, SUM(Z.ITEM_CNT) AS ALL_ITEM_CNT
			, MAX(Z.LST_STD) AS LST_STD
			FROM (
				SELECT X.CENTER_CODE
						, x.CONTRACT_ID 
						, x.CONTRACT_STATUS
						, SUM(X.ITEM_CNT) AS ITEM_CNT
						, MAX(X.CONTRACT_START ) AS LST_STD 
						, SUM(DECODE(X.CONTRACT_STATUS, 'C', X.ITEM_CNT, 0 )) AS C_CNT
						, SUM(DECODE(X.CONTRACT_STATUS, 'R', X.ITEM_CNT, 0 )) AS R_CNT
						, SUM(DECODE(X.CONTRACT_STATUS, 'D', X.ITEM_CNT, 0 )) AS D_CNT
						, SUM(DECODE(X.CONTRACT_STATUS, 'E', X.ITEM_CNT, 0 )) AS E_CNT
				FROM PO_CONTRACT_FSALE_STATS X
				GROUP BY X.CENTER_CODE, X.CONTRACT_ID, X.CONTRACT_STATUS
				) Z
			GROUP BY Z.CENTER_CODE
		]]>
	</statement>
	
	
	<!-- 업장별 최종 거래 정보를 조회한다. -->
	<statement name="selectLstOrderList" type="select">
		<![CDATA[
		/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.selectLstOrderList */
		SELECT  A.MAIN_UPJANG
				, (SELECT Z.UPJANGNM_DISP FROM FMS_UPJANG Z WHERE Z.UPJANG = A.MAIN_UPJANG ) AS MAIN_UPJANGNM_DISP
				, A.UPJANG
				, A.UPJANGNM_DISP 
				, A.LST_DEAL_DATE
				, A.USE_YN 
				, C.CONTRACT_CNT
				, (SELECT X.NM_KOR FROM HR_PERSONAL X WHERE X.SABUN = A.CS_SABUN ) AS CS_NM
				, (SELECT X.NM_KOR FROM HR_PERSONAL X WHERE X.SABUN = A.PART_SALES_SABUN ) AS SALES_NM
				, B.CENTER_CODE
		FROM FMS_UPJANG A
		, HLDC_PO_UPJANG_CENTER B	
		, (SELECT UPJANG, COUNT(DISTINCT CONTRACT_ID) AS CONTRACT_CNT 
			FROM PO_CONTRACT_FSALE_STATS 
			WHERE CONTRACT_START <=:schLstDt 
			AND CENTER_CODE = :schCenter
			<#if schStatus?has_content>
				AND CONTRACT_STATUS = :schStatus
			</#if>
			GROUP BY UPJANG) C
		WHERE A.UPJANG = B.UPJANG
		AND A.UPJANG = C.UPJANG
		--AND B.CENTER_CODE = :schCenter
		AND A.LST_DEAL_DATE <= :schLstDt
		<#if schCsSabun?has_content>
		AND A.CS_SABUN = :schCsSabun
		</#if>
		<#if schSalesSabun?has_content>
		AND A.PART_SALES_SABUN = :schSalesSabun
		</#if>
		ORDER BY A.LST_DEAL_DATE
		]]>
	</statement>
	
	
	<!-- 판매단가 집계 정보를 조회한다. -->
	<statement name="selectContractList" type="select">
		<![CDATA[
			/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.selectContractList */
			SELECT 
				A.CENTER_CODE
				, A.UPJANG
				, A.CONTRACT_START
				, A.CONTRACT_END
				, A.CONTRACT_ID
				, A.ITEM_CNT
				, A.CONTRACT_STATUS
				, A.USE_YN
				, A.ATTR01
				, A.ATTR02
				, A.ATTR03
				, '0' AS CHK
				, CASE WHEN A.CENTER_CODE = (SELECT X.CENTER_CODE 
													FROM HLDC_PO_UPJANG_CENTER X 
													WHERE X.UPJANG = A.UPJANG) THEN ''
					ELSE 'D'
					END AS SET01
				FROM PO_CONTRACT_FSALE_STATS A
				WHERE 1 = 1
				<#if schUpjangCd?has_content>
					AND A.UPJANG = :schUpjangCd
				</#if>
				<#if schLstDt?has_content>
					AND A.CONTRACT_START <= :schLstDt
				</#if> 
				<#if schStatus?has_content>
					AND A.CONTRACT_STATUS = :schStatus
				</#if>
				ORDER BY A.CONTRACT_START
		]]>
	</statement>
	
	
	<!-- 판매단가 집계 정보를 조회한다. -->
	<statement name="selectArrageList" type="select">
		<![CDATA[
			/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.selectArrageList */
			SELECT COUNT(CONTRACT_ID) AS CONTRACT_CNT
			FROM PO_CONTRACT_FSALE_STATS X
			WHERE X.CONTRACT_STATUS = 'R'
			GROUP BY X.CONTRACT_ID
		]]>
	</statement>
	
			
	<!-- 판매단가 수집정보를 수정한다. -->
	<statement name="saveContractList" type="update">
		<![CDATA[
			/*+ com.hwfs.fm.fms.dao.salePriceHistoryDAO.saveContractList */
  			UPDATE PO_CONTRACT_FSALE_STATS A
  			SET A.CONTRACT_STATUS = :contractStatus
  				, A.UUSER = :sabun
  				, A.UDATE = SYSDATE
			WHERE A.CONTRACT_ID = :contractId
		]]>
	</statement>
</hqml>
