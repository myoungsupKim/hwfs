<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="fm.fms.salePriceSimuDAO">
	<desc>판매가 시뮬레이션 HQML Query</desc>

	<!-- 판매가 시뮬레이션 ID 목록을 조회한다. -->
	<statement name="selectSimu" type="select">
		/*+ com.hwfs.fm.fms.dao.SalePriceSimuDAO.selectSimu */
		<![CDATA[
		SELECT 
	  		  SIMU_ID
			, SIMU_ID || ' : ' || REMARK  AS SIMU_NM
			, BASIS_DATE
			, PERIOD_SDATE
			, PERIOD_EDATE
			, NXTYR_SDATE
			, NXTYR_EDATE
			, CONFIRM_YN
			, REMARK
			, '1' AS ORDR
		FROM FMS_SALEPRICE_SIMU 
		WHERE SABUN = :schSabun
		GROUP BY SIMU_ID, BASIS_DATE, PERIOD_SDATE, PERIOD_EDATE, NXTYR_SDATE, NXTYR_EDATE, CONFIRM_YN, REMARK
		UNION ALL
		SELECT
			 'NEW'
			,'신규생성'
			, TO_CHAR(SYSDATE, 'YYYYMMDD')
			, ''
			, ''
			, ''
			, ''
			, ''
			, ''
			,'0'
		FROM DUAL
		ORDER BY ORDR ASC, SIMU_ID DESC		
		]]>
	</statement>


	<!-- 판매가 시뮬레이션 목록을 조회한다.(신규작성용) -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.fm.fms.dao.SalePriceSimuDAO.selectList */
		<![CDATA[
		SELECT
	  		  B.CENTER_CODE
	    	, A.UPJANG
			, A.UPJANGNM || '(' ||  A.UPJANG || ')' AS UPJANG_NM 
			, NVL(S1.PERIOD_CST, 0) AS PERIOD_CST			/* 전기_원가 */
			, NVL(S1.PERIOD_SALS, 0) AS PERIOD_SALS		/* 전기_매출 */
			, NVL(S1.PERIOD_SALS, 0) - NVL(S1.PERIOD_CST, 0) AS PERIOD_GROSS_PROFIT	/* 전기_매출이익 */
			, CASE WHEN NVL(S1.PERIOD_SALS, 0) = 0 THEN 0  
	  		  ELSE ROUND((NVL(S1.PERIOD_SALS, 0) - NVL(S1.PERIOD_CST, 0)) / NVL(S1.PERIOD_SALS, 0) * 100, 2) 
	  		  END AS PERIOD_GAINRAT								/* 전기_매출이익율 */
			, NVL(S1.NXTYR_CST, 0) AS NXTYR_CST				/* 차기_원가 */
			, NVL(S1.NXTYR_SALS, 0) AS NXTYR_SALS			/* 차기_매출 */	
			, NVL(S1.NXTYR_SALS, 0) - NVL(S1.NXTYR_CST, 0) AS NXTYR_GROSS_PROFIT	/* 차기_매출이익 */
			, CASE WHEN NVL(S1.NXTYR_SALS, 0) = 0 THEN 0
	  		  ELSE  ROUND((NVL(S1.NXTYR_SALS, 0) - NVL(S1.NXTYR_CST, 0)) / NVL(S1.NXTYR_SALS, 0) * 100, 2) 
	  		  END AS NXTYR_GAINRAT							/* 차기_매출이익율 */
			, NVL(S1.NXTYR_CST, 0) - NVL(S1.PERIOD_CST, 0) AS DIFF_CST		/* 전기비_원가 */
			, NVL(S1.NXTYR_SALS, 0) - NVL(S1.PERIOD_SALS, 0) AS DIFF_SALS			/* 전기비_매출 */
			, (NVL(S1.NXTYR_SALS, 0) - NVL(S1.PERIOD_SALS, 0)) - (NVL(S1.NXTYR_CST, 0) - NVL(S1.PERIOD_CST, 0)) AS DIFF_GROSS_PROFIT		/* 전기비_매출이익 */
			, CASE WHEN (NVL(S1.NXTYR_SALS, 0) - NVL(S1.PERIOD_SALS, 0)) = 0 THEN 0
			  ELSE ROUND(((NVL(S1.NXTYR_SALS, 0) - NVL(S1.PERIOD_SALS, 0)) - (NVL(S1.NXTYR_CST, 0) - NVL(S1.PERIOD_CST, 0))) / (NVL(S1.NXTYR_SALS, 0) - NVL(S1.PERIOD_SALS, 0)) * 100, 2)
	  		  END AS DIFF_GAINRAT					/* 전기비_매출이익율 */
			, 'N' AS CONFIRM_YN						/* 확인여부 */
			, NULL AS CHOICE00						/* 선택1_업장코드 */
			, 0 AS CHOICE00_AMT						/* 선택1_매출금액 */
			, NULL AS CHOICE01						/* 선택2_업장코드 */
			, 0 AS CHOICE01_AMT						/* 선택2_매출금액 */
			, NULL AS CHOICE02						/* 선택3_업장코드 */
			, 0 AS CHOICE02_AMT						/* 선택3_매출금액 */
			, NULL AS CHOICE03						/* 선택4_업장코드 */
			, 0 AS CHOICE03_AMT						/* 선택4_매출금액 */
			, NULL AS CHOICE04						/* 선택5_업장코드 */
			, 0 AS CHOICE04_AMT						/* 선택5_매출금액 */
			, NULL AS CHOICE05						/* 선택6_업장코드 */
			, 0 AS CHOICE05_AMT						/* 선택6_매출금액 */
			, NULL AS CHOICE06						/* 선택7_업장코드 */
			, 0 AS CHOICE06_AMT						/* 선택7_매출금액 */
			, :schPeriodSdate AS PERIOD_SDATE	/* 전기기간_FROM */	
			, :schPeriodEdate AS PERIOD_EDATE	/* 전기기간_TO */	
			, :schNxtyrSdate AS NXTYR_SDATE		/* 차기기간_FROM */	
			, :schNxtyrEdate AS NXTYR_EDATE		/* 차기기간_TO */
			, 'N' AS SIMU_YN								/* 시뮬레이션여부 */
			, :schSabun AS SABUN						/* 담당자사번 */
			, :schSabunNm AS SABUN_NM			/* 담당자성명 */
			, 'NEW' AS SIMU_ID							/* 시뮬레이션ID */
			, :schDate AS BASIS_DATE					/* 기준일자 */
			, '' AS REMARK								/* 비고 */
		FROM ST_UPJANG A 
			    					LEFT JOIN (
										/* 수불정보 : 전기/차기매출, 원가(관리금액) 가져오기, 시뮬레시션 대분류 기준만 SUM */
										SELECT 	/*+ RULE */
					  						  A.TRANS_UPJANG AS UPJANG
											, SUM(CASE WHEN A.TRANS_DATE BETWEEN :schPeriodSdate AND :schPeriodEdate THEN (A.TRANS_MAMOUNT * DECODE(SUBSTR(A.TRANS_TYPE,1,1), 'I', 1, -1))  
											  ELSE 0 END) AS PERIOD_CST
--											, SUM(CASE WHEN A.TRANS_DATE BETWEEN :schPeriodSdate AND :schPeriodEdate THEN (A.SALE_AMOUNT * DECODE(SUBSTR(A.TRANS_TYPE,1,1), 'I', 1, -1))
											, SUM(CASE WHEN A.TRANS_DATE BETWEEN :schPeriodSdate AND :schPeriodEdate THEN DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * A.TRANS_QTY)
											  ELSE 0 END) AS PERIOD_SALS
											, SUM(CASE WHEN A.TRANS_DATE BETWEEN :schNxtyrSdate AND :schNxtyrEdate THEN (A.TRANS_MAMOUNT * DECODE(SUBSTR(A.TRANS_TYPE,1,1), 'I', 1, -1))  
											  ELSE 0 END) AS NXTYR_CST
--											, SUM(CASE WHEN A.TRANS_DATE BETWEEN :schNxtyrSdate AND :schNxtyrEdate THEN (A.SALE_AMOUNT * DECODE(SUBSTR(A.TRANS_TYPE,1,1), 'I', 1, -1))
											, SUM(CASE WHEN A.TRANS_DATE BETWEEN :schNxtyrSdate AND :schNxtyrEdate THEN DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * A.TRANS_QTY)
											  ELSE 0 END) AS NXTYR_SALS
			        					FROM FMS_TRANSACTION_V A INNER JOIN HLDC_PO_ITEM_MST B ON 1 = 1--B.ITEM_CLASS2 IN ('F10', 'F11', 'F12', 'F13', 'F14', 'F17', 'F15', 'F16', 'F18', 'F19', 'F20', 'F21', 'F22', 'F23', 'F24', 'F27')			/* 자재 대분류 기준 */
			        																									 AND A.ITEM_CODE = B.ITEM_CODE
									        												   -- INNER JOIN SCC_COMMON_CODE C ON C.GROUP_CODE = 'FM0034'
																 							   --											 		 AND B.ITEM_CLASS2 = C.CODE
										WHERE (A.TRANS_DATE BETWEEN :schPeriodSdate AND :schPeriodEdate OR
											        A.TRANS_DATE BETWEEN :schNxtyrSdate AND :schNxtyrEdate)
										--AND    A.SUBINV_CODE LIKE 'S10%'
		   								AND  SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
										AND   (A.TRANS_TYPE = 'I001' OR (A.TRANS_TYPE LIKE '_002' AND A.SOURCE_TYPE = 'PO')) 
										GROUP BY A.TRANS_UPJANG
			     					)	S1 ON A.UPJANG = S1.UPJANG
									INNER JOIN HLDC_PO_UPJANG_CENTER B ON B.CENTER_CODE = :schCenter		/* 조건 : 센터코드 */
										    												AND B.USE_YN = 'Y'
										    												AND A.UPJANG = B.UPJANG
			     					INNER JOIN FMS_UPJANG C ON C.PART_SALES_SABUN = :schSabun				/* 조건 : 담당자사번 */
								  										 AND A.UPJANG = C.UPJANG				     					
--			     					LEFT JOIN (
--									/* 수불정보 : 차기매출, 원가(관리금액) 가져오기, 시뮬레시션 대분류 기준만 SUM */
--										SELECT  /*+ RULE */
--					  					  	  A.TRANS_UPJANG AS UPJANG
--											, SUM(A.TRANS_MAMOUNT * DECODE(SUBSTR(A.TRANS_TYPE,1,1), 'I', 1, -1))  AS NXTYR_CST
--											--, SUM(A.SALE_AMOUNT * DECODE(SUBSTR(A.TRANS_TYPE,1,1), 'I', 1, -1))  AS NXTYR_SALS
--											, SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))  AS NXTYR_SALS
--			        					FROM HLDC_PO_TRANSACTION_SALE A INNER JOIN HLDC_PO_ITEM_MST B ON A.ITEM_CODE = B.ITEM_CODE
--									        									    		    INNER JOIN SCC_COMMON_CODE C ON C.GROUP_CODE = 'FM0034'
--																 																	 		     AND B.ITEM_CLASS2 = C.CODE
--										WHERE A.TRANS_DATE BETWEEN :schNxtyrSdate AND :schNxtyrEdate
--										--AND    A.SUBINV_CODE LIKE 'S10%'
--		   								AND  SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
--										AND   (A.TRANS_TYPE = 'I001' OR (A.TRANS_TYPE LIKE '_002' AND A.SOURCE_TYPE = 'PO')) 
--										GROUP BY A.TRANS_UPJANG
--			     					)	S2 ON A.UPJANG = S2.UPJANG
		ORDER BY A.UPJANG ASC		
		]]>
	</statement>


	<!-- 판매가 시뮬레이션 목록을 조회한다.(기존자료 조회) -->
	<statement name="selectList2" type="select">
		/*+ com.hwfs.fm.fms.dao.SalePriceSimuDAO.selectList2 */
		<![CDATA[
		SELECT
	  		  A.CENTER_CODE
			, A.UPJANG
			, B.UPJANGNM AS UPJANG_NM
			, NVL(A.PERIOD_CST, 0) AS PERIOD_CST					/* 전기_원가 */
			, NVL(A.PERIOD_SALS, 0) AS PERIOD_SALS				/* 전기_매출 */
			, NVL(A.PERIOD_GROSS_PROFIT, 0) AS PERIOD_GROSS_PROFIT 	/* 전기_매출이익 */
			, NVL(A.PERIOD_GAINRAT, 0) AS PERIOD_GAINRAT					/* 전기_매출이익율 */
			, NVL(A.NXTYR_CST, 0) AS NXTYR_CST					/* 차기_원가 */
			, NVL(A.NXTYR_SALS, 0) AS NXTYR_SALS				/* 차기_매출 */	
			, NVL(A.NXTYR_GROSS_PROFIT, 0) AS NXTYR_GROSS_PROFIT 	/* 차기_매출이익 */
			, NVL(A.NXTYR_GAINRAT, 0) AS NXTYR_GAINRAT		/* 차기_매출이익율 */
			, NVL(A.NXTYR_CST, 0) - NVL(A.PERIOD_CST, 0) AS DIFF_CST				/* 전기비_원가 */
			, NVL(A.NXTYR_SALS, 0) - NVL(A.PERIOD_SALS, 0) AS DIFF_SALS		/* 전기비_매출 */
			, NVL(A.NXTYR_GROSS_PROFIT, 0) - NVL(A.PERIOD_GROSS_PROFIT, 0) AS DIFF_GROSS_PROFIT	/* 전기비_매출이익 */
			, CASE WHEN NVL(A.NXTYR_SALS, 0) - NVL(A.PERIOD_SALS, 0) = 0 THEN 0
	  		  ELSE  ROUND (((NVL(A.NXTYR_GROSS_PROFIT, 0) - NVL(A.PERIOD_GROSS_PROFIT, 0)) / (NVL(A.NXTYR_SALS, 0) - NVL(A.PERIOD_SALS, 0))) * 100, 2) 
	  	      END AS DIFF_GAINRAT								/* 전기비_매출이익율 */
			, A.CONFIRM_YN			/* 확인여부 */
			, A.CHOICE00				/* 선택1_업장코드 */
			, A.CHOICE00_AMT		/* 선택1_매출금액 */
			, A.CHOICE01				/* 선택2_업장코드 */
			, A.CHOICE01_AMT		/* 선택2_매출금액 */
			, A.CHOICE02				/* 선택3_업장코드 */
			, A.CHOICE02_AMT		/* 선택3_매출금액 */
			, A.CHOICE03				/* 선택4_업장코드 */
			, A.CHOICE03_AMT		/* 선택4_매출금액 */
			, A.CHOICE04				/* 선택5_업장코드 */
			, A.CHOICE04_AMT		/* 선택5_매출금액 */
			, A.CHOICE05				/* 선택6_업장코드 */
			, A.CHOICE05_AMT		/* 선택6_매출금액 */
			, A.CHOICE06				/* 선택7_업장코드 */
			, A.CHOICE06_AMT		/* 선택7_매출금액 */
			, A.PERIOD_SDATE		/* 전기기간_FROM */	
			, A.PERIOD_EDATE		/* 전기기간_TO */	
			, A.NXTYR_SDATE			/* 차기기간_FROM */	
			, A.NXTYR_EDATE			/* 차기기간_TO */
			, A.SIMU_YN				/* 시뮬레이션여부 */
			, A.SABUN					/* 담당자사번 */
			, '' AS SABUN_NM		/* 담당자성명 */
			, A.SIMU_ID				/* 시뮬레이션ID */
			, A.BASIS_DATE			/* 기준일자 */
			, A.REMARK				/* 비고 */
		FROM FMS_SALEPRICE_SIMU A INNER JOIN ST_UPJANG B ON A.UPJANG = B.UPJANG
		WHERE A.SIMU_ID = :schSimuId
		ORDER BY A.UPJANG ASC

		]]>
	</statement>


	<!-- 시뮬레이션 ID를 조회한다 -->
	<statement name="selectID" type="select">
		/*+ com.hwfs.fm.fms.dao.SalePriceSimuDAO.selectID */
		<![CDATA[
		SELECT
				:sabunNm || '-' || :basisDate || '-' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(SIMU_ID, -3))),0)+1, 3, '0') AS SIMU_ID
	   	FROM   FMS_SALEPRICE_SIMU
	   	WHERE SABUN  = :sabun				/* 조건 : 담당자 */
	   	AND    BASIS_DATE = :basisDate 	 	/* 조건 : 전기기준일자 */
		]]>
	</statement>




	<!-- 판매가 시뮬레이션(을)를 등록한다. -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.fm.fms.dao.SalePriceSimuDAO.insert */
		<![CDATA[
		INSERT INTO FMS_SALEPRICE_SIMU (
	    	  SABUN 
	  		, SIMU_ID 
	  		, BASIS_DATE
	  		, CENTER_CODE
	  		, UPJANG
	  		, PERIOD_SDATE
	  		, PERIOD_EDATE
	  		, NXTYR_SDATE
	  		, NXTYR_EDATE
	  		, SIMU_YN
	  		, PERIOD_CST
	  		, PERIOD_SALS
	  		, PERIOD_GROSS_PROFIT
	  		, PERIOD_GAINRAT
	  		, NXTYR_CST
	  		, NXTYR_SALS
	  		, NXTYR_GROSS_PROFIT
	  		, NXTYR_GAINRAT
	  		, CHOICE00
	  		, CHOICE00_AMT
	  		, CHOICE01
	  		, CHOICE01_AMT
	  		, CHOICE02
	  		, CHOICE02_AMT
	  		, CHOICE03
	  		, CHOICE03_AMT
	  		, CHOICE04
	  		, CHOICE04_AMT
	  		, CHOICE05
	  		, CHOICE05_AMT
	  		, CHOICE06
	  		, CHOICE06_AMT
	  		, CONFIRM_YN
	  		, REMARK
	  		, CUSER
	  		, CDATE
	  		, UUSER
	  		, UDATE
		)
		 SELECT
	    	  :sabun AS SABUN
	  		, :simuId AS SIMU_ID
	  		, :basisDate AS BASIS_DATE
	  		, :centerCode AS CENTER_CODE
	  		, :upjang AS UPJANG 
	  		, :periodSdate AS PERIOD_SDATE
	  		, :periodEdate AS PERIOD_EDATE
	  		, :nxtyrSdate AS NXTYR_SDATE
	  		, :nxtyrEdate AS NXTYR_EDATE
	  		, :simuYn AS SIMU_YN
	  		, :periodCst AS PERIOD_CST
	  		, :periodSals AS PERIOD_SALS
	  		, :periodGrossProfit AS PERIOD_GROSS_PROFIT
	  		, :periodGainrat AS PERIOD_GAINRAT
	  		, :nxtyrCst AS NXTYR_CST
	  		, :nxtyrSals AS NXTYR_SALS
	  		, :nxtyrGrossProfit AS NXTYR_GROSS_PROFIT
	  		, :nxtyrGainrat AS NXTYR_GAINRAT
			, <#if choice00?has_content> :choice00 <#else> NULL </#if> AS CHOICE00
	  		, :choice00Amt AS CHOICE00_AMT
			, <#if choice01?has_content> :choice01 <#else> NULL </#if> AS CHOICE01
	  		, :choice01Amt AS CHOICE01_AMT
			, <#if choice02?has_content> :choice02 <#else> NULL </#if> AS CHOICE02
	  		, :choice02Amt AS CHOICE02_AMT
			, <#if choice03?has_content> :choice03 <#else> NULL </#if> AS CHOICE03
	  		, :choice03Amt AS CHOICE03_AMT
			, <#if choice04?has_content> :choice04 <#else> NULL </#if> AS CHOICE04
	  		, :choice04Amt AS CHOICE04_AMT
			, <#if choice05?has_content> :choice05 <#else> NULL </#if> AS CHOICE05
	  		, :choice05Amt AS CHOICE05_AMT
			, <#if choice06?has_content> :choice06 <#else> NULL </#if> AS CHOICE06
	  		, :choice06Amt AS CHOICE06_AMT
	  		, :confirmYn AS CONFIRM_YN
	  		, :remark AS REMARK
	  		, :loginSabun AS CUSER
	  		, SYSDATE AS CDATE
	  		, :loginSabun AS UUSER
	  		, SYSDATE AS UDATE
	  	FROM DUAL
		]]>
	</statement>
	
	<!-- 판매가 시뮬레이션(을)를 수정한다. -->
	<statement name="update" type="update">
		/*+ com.hwfs.fm.fms.dao.SalePriceSimuDAO.update */
		<![CDATA[
		UPDATE TABLE_NAME 
		SET    COLUMN_NAME1 = :columnName1,
		       COLUMN_NAME2 = :columnName2,
		       UUSER = :loginSabun,
		       UDATE = SYSDATE
		WHERE  COLUMN_NAME = :columnName
		]]>
	</statement>

	<!-- 시뮬레이션을 확인 처리한다. -->
	<statement name="confirm" type="update">
		/*+ com.hwfs.fm.fms.dao.SalePriceSimuDAO.confirm */
		<![CDATA[
		UPDATE FMS_SALEPRICE_SIMU 
		SET  CONFIRM_YN = 'Y',
		       UUSER = :loginSabun,
		       UDATE = SYSDATE
		WHERE  SIMU_ID = :simuId
		AND     UPJANG  = :upjang
		]]>
	</statement>

	
	<!-- 시뮬레이션 자료를 일괄 삭제한다. -->
	<statement name="deleteAll" type="delete">
		/*+ com.hwfs.fm.fms.dao.SalePriceSimuDAO.deleteAll */
		<![CDATA[
		DELETE 
		FROM   FMS_SALEPRICE_SIMU 
		WHERE  SIMU_ID = :simuId
		]]>
	</statement>
	

	<!-- 판매가 시뮬레이션(을)를 삭제한다. -->
	<statement name="delete" type="delete">
		/*+ com.hwfs.fm.fms.dao.SalePriceSimuDAO.delete */
		<![CDATA[
		DELETE 
		FROM   TABLE_NAME 
		WHERE  COLUMN_NAME = :columnName
		]]>
	</statement>

</hqml>
