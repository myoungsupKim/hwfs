<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="fm.fmf.buySaleSumDAO">
	<desc>매입매출집계 HQML Query</desc>

	<!-- 일자별집계 목록을 조회한다. (구)-->
	<statement name="selectListTab0_old" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab0_old */
		<![CDATA[
		SELECT TO_CHAR(TO_DATE(TRANS_DATE,'YYYYMMDD'),'YYYY-MM-DD') TRANS_DATE
		     , ITEM_CODE, ITEM_NAME, ITEM_SIZE, TRANS_UOM
		     , ROUND(TRANS_MPRICE) TRANS_PRICE
		     , A.SALE_PRICE
             , SUM(CEIL(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS SALE_AMT
             , SUM(DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))                  AS SALE_VAT
             , SUM(CEIL(SALE_AMOUNT) + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1))  AS SALE_SUM
             , SUM(CEIL(TRANS_MAMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS TRANS_AMOUNT
             , SUM(DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT* DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))                  AS TRANS_VAT
             , SUM(CEIL(TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))  AS TRANS_SUM
<#if newGubun=="Y">
		  FROM FMS_TRANSACTION_ALL_V A, ST_UPJANG B2 , HLDC_SC_DEPT_V D
<#else>
		  FROM FMS_TRANSACTION_V A, ST_UPJANG B2 , HLDC_SC_DEPT_V D
</#if>
		 WHERE 1 = 1 
<#if newGubun=="Y">
		   AND ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
		   AND SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
           AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
           /*검색 조건 : 기간*/
           AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
           /*검색 조건 : 관리부서(팀)*/
           <#if schTm?has_content>
           AND D.TM_CD = :schTm
           </#if>
           /*검색 조건 : 센터*/     
           <#if schCenter?has_content>
           AND A.CENTER_CODE = :schCenter
           </#if>
             /*검색 조건 : 본사*/
           <#if schMainUpjang?has_content>
           AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           </#if>       
             /*검색 조건 : 사업장*/       
           <#if schUpjang?has_content>
           AND B2.UPJANG = :schUpjang
           </#if>
             /*검색 조건 : 납품업체*/
           <#if schCustCd?has_content>
           AND A.CUSTCD = :schCustCd
           </#if>
          /*
           AND EXISTS (
           					  SELECT 1
           					  FROM FMS_SALES
                       		  WHERE UPJANG = A.TRANS_UPJANG
                       		  AND   SALE_DATE = A.TRANS_DATE
                       		  AND   SUBINV_CODE = A.SUBINV_CODE
                       		  AND   TRANS_YN = 'Y'
           					)
           */					
		   AND A.TRANS_UPJANG = B2.UPJANG
		   AND B2.DEPT_ID = D.DEPT_ID
		 GROUP BY TRANS_DATE, ITEM_CODE, ITEM_NAME, ITEM_SIZE, TRANS_UOM, ROUND(TRANS_MPRICE), A.SALE_PRICE
		 ORDER BY TRANS_DATE DESC
		]]>
	</statement>


	<!-- 일자별집계 목록을 조회한다. -->
	<statement name="selectListTab0" type="select"><![CDATA[
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab0 */
		
		--마감여부에 따라 집계 또는 실시간 검색 추가 20170824 김호석 
		<#if mCloseYn=="Y">
		
			SELECT
				  <#if schGubun=="1">
				  	RS.TRANS_DATE
    			  <#else>
				  	RS.MG_DATE AS TRANS_DATE
      			  </#if>
				  , RS.ITEM_CODE
				  , RS.ITEM_NAME
				  , RS.ITEM_SIZE
				  , RS.TRANS_UOM
				  , ROUND(SUM(RS.TRANS_MPRICE)) AS TRANS_PRICE
				  , ROUND(SUM(RS.SALE_PRICE)) AS SALE_PRICE
				  
				  , /* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> ) 
					AS SALE_AMT																		    /* 매출금액 = 매출금액 - (각종 수수료금액 제외) */
				  , /* 장려금 제외 여부     */ <#if schChk3?has_content> SUM(RS.SALE_VAT_S) <#else> SUM(RS.SALE_VAT) </#if>
				    /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>SUM(RS.CK_SALE_VAT) <#else> 0 </#if>
  					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_VAT) <#else> 0 </#if>)
					AS SALE_VAT																			    /* 매출부가세 = 매출부가세 - (각종 수수료금액 제외) */
				  , /* 장려금 제외 여부     */ <#if schChk3?has_content> SUM(RS.SALE_ALL_S) <#else> SUM(RS.SALE_ALL) </#if>
  				    /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX + RS.CK_SALE_VAT) <#else> 0 </#if>
					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX +RS.JI_SALE_VAT )<#else> 0 </#if>) 
					AS SALE_SUM		  																	    /* 매출합계 = 매출합계 - (각종 수수료금액 제외) */
             <#if schPrice=="2">  
               , SUM(RS.TRANS_SUM_UNIT) TRANS_AMOUNT
               , SUM(RS.TRANS_VAT_UNIT) TRANS_VAT
               , (SUM(RS.TRANS_SUM_UNIT) + SUM(RS.TRANS_VAT_UNIT)) TRANS_SUM             
             <#else>
               , SUM(RS.TRANS_SUM) TRANS_AMOUNT
               , SUM(RS.TRANS_VAT) TRANS_VAT
               , SUM(RS.TRANS_TOT) TRANS_SUM
             </#if>					
					
				 -- , SUM(RS.TRANS_SUM) AS TRANS_AMOUNT															/* 매입액 공급가 */
				 -- , SUM(RS.TRANS_VAT) AS TRANS_VAT																			/* 매입액 부가세 */
				 -- , SUM(RS.TRANS_TOT) AS TRANS_SUM																/* 매입액 합계 */
				  , SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) AS CK_AMT											/* CK물류비 제외 - 공급가 */
				  , SUM(RS.CK_SALE_VAT) AS CK_VAT																/* CK물류비 제외 - 부가세 */
				  , SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX + RS.CK_SALE_VAT) AS CK_SUM							/* CK물류비 제외 - 합계 */
				  , SUM(RS.JI_SALE_NOTAX + RS.JI_SALE_TAX) AS JI_AMT											/* 지급수수료 제외 - 공급가 */
				  , SUM(RS.JI_SALE_VAT) AS JI_VAT																/* 지급수수료 제외 - 부가세 */
				  , SUM(RS.JI_SALE_NOTAX + RS.JI_SALE_TAX + RS.JI_SALE_VAT) AS JI_SUM							/* 지급수수료 제외 - 합계 */
<#if schPrice=="2">				
				   , SUM(RS.SALE_NOTAX) + SUM(RS.SALE_TAX) - SUM(RS.TRANS_SUM_UNIT) AS MARGIN_AMT																/* 이익액 */
				  , CASE
					WHEN /* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  = 0 THEN 0
					  ELSE ROUND(((/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  - SUM(RS.TRANS_SUM_UNIT))
					   / (/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX )<#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> ) )) * 100, 2) END AS MARGIN_RATIO  /* 이익율 */
 <#else>	
 				  , SUM(RS.MARGIN_SUM) AS MARGIN_AMT																/* 이익액 */
				  , CASE
					WHEN /* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  = 0 THEN 0
					  ELSE ROUND(((/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  - SUM(RS.TRANS_SUM))
					   / (/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX )<#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> ) )) * 100, 2) END AS MARGIN_RATIO  /* 이익율 */
 
 </#if>	
 					, F.MD_NAME
                	, F.VENDOR_NAME
   					FROM FMS_BUY_SALE_SUM RS																		
							INNER JOIN FMS_UPJANG Z ON 1 = 1
									 /*검색 조건 : 영업담당*/
									<#if schSabun?has_content>
									AND Z.PART_SALES_SABUN = :schSabun
									</#if>
									AND RS.UPJANG = Z.UPJANG
							INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
									/*검색 조건 : 관리부서(팀)*/
									<#if schTm?has_content>
									AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
									</#if>
									/*검색 조건 : CC */
									<#if schCc?has_content>
									AND D.CC_CD = :schCc
									</#if>
									AND  RS.DEPT_ID = D.DEPT_ID
							<#if schCustYn == "Y">
							LEFT JOIN (
									  	SELECT A.ITEM_CD, C.WH_CNTR_CD, B.HFC_CHR_ID, EPROCUSR.FC_GET_NAME('100', 'ko_KR', 'HFC', 'USER', B.HFC_CHR_ID, '','','','','') AS MD_NAME
						      					, EPROCUSR.FC_GET_NAME('100', 'ko_KR', 'HFC', 'VENDOR', B.ERP_VD_CD, '','','','','') AS VENDOR_NAME
												FROM EPROCUSR.ESPINFO A
						    						LEFT OUTER JOIN EPROCUSR.ESMVDOG B
												    ON A.SYS_ID = B.SYS_ID
												    AND A.COMP_CD = B.COMP_CD
												    AND A.VD_SN = B.VD_SN
												    AND B.OPER_ORG_SN = '414' --FC부문만
												    INNER JOIN EPROCUSR.ESPSWHC C
												    ON A.SYS_ID = C.SYS_ID
												    AND A.COMP_CD = C.COMP_CD
												    AND A.PURC_OPER_ORG_SN = C.OPER_ORG_SN_PURC
												WHERE A.SYS_ID = '100'
												   AND A.COMP_CD = 'HFC'
												   AND :schFromDate BETWEEN A.APPLY_SD AND A.APPLY_ED  --계약 기간
												   AND A.STS <> 'D'
												   AND SUBSTR(A.ITEM_CD, 0 , 1) = 'F' --식자재만
												   
												   <#if schCenter?has_content>
						       							<#if schCenter != '*'>
						       							AND C.WH_CNTR_CD = :schCenter
						       							</#if>
						       						</#if>
												   --AND C.WH_CNTR_CD = '300001'
										) F ON F.ITEM_CD = RS.ITEM_CODE
										AND F.WH_CNTR_CD = RS.CENTER_CODE
							<#else>
							LEFT JOIN ( SELECT '' AS ITEM_CD, '' AS MD_NAME, '' AS VENDOR_NAME FROM DUAL ) F ON F.ITEM_CD = RS.ITEM_CODE
							</#if>
					WHERE 1=1
						<#if schMainUpjang?has_content>
							AND RS.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
						</#if>
						 /*검색 조건 : 사업장*/
						<#if schUpjang?has_content>
							AND RS.UPJANG = :schUpjang
						</#if>
						/*검색 조건 : 기간*/
						<#if schGubun=="1">
						AND RS.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate
						<#else>
						AND RS.MG_DATE BETWEEN :schFromDate AND :schToDate
						</#if>
						/*검색 조건 : 센터*/     
						<#if schCenter?has_content>
							<#if schCenter != '*'>
							AND RS.CENTER_CODE = :schCenter
							</#if>
						</#if>
						/*검색 조건 : 납품업체*/
						<#if schCustCd?has_content>
						AND RS.CUSTCD = :schCustCd
						</#if>						
						/*검색 조건 : 세부직군*/
						<#if schBizDetail?has_content>
						AND RS.BIZ_DETAIL_MAIN = :schBizDetail
						</#if>
						GROUP BY 
						  <#if schGubun=="1">
						  	RS.TRANS_DATE,
		    			  <#else>
						  	RS.MG_DATE,
		      			  </#if>
						RS.ITEM_CODE, RS.ITEM_NAME, RS.ITEM_SIZE, RS.TRANS_UOM, RS.TRANS_MPRICE, RS.SALE_PRICE, F.MD_NAME, F.VENDOR_NAME
								ORDER BY RS.TRANS_DATE DESC
		
									
		<#else>
		
				SELECT
			  		  RS.TRANS_DATE
					, RS.ITEM_CODE
					, RS.ITEM_NAME
					, RS.ITEM_SIZE
					, RS.TRANS_UOM
					, ROUND(RS.TRANS_PRICE) AS TRANS_PRICE
					, ROUND(RS.SALE_PRICE) AS SALE_PRICE
					, RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT) AS SALE_AMT		/* 매출금액 = 매출금액 - (각종 수수료금액 제외) */
					, RS.SALE_VAT - ((RS.CK_SUM - RS.CK_AMT) + (RS.JI_SUM - RS.JI_AMT)) AS SALE_VAT			/* 매출부가세 = 매출부가세 - (각종 수수료금액 제외) */
					, RS.SALE_SUM - (RS.CK_SUM + RS.JI_SUM) AS SALE_SUM		/* 매출합계 = 매출합계 - (각종 수수료금액 제외) */
					, RS.TRANS_AMOUNT
					, RS.TRANS_VAT 
					, RS.TRANS_SUM
					, RS.CK_AMT			/* CK물류비 제외 - 공급가 */
					, (RS.CK_SUM - RS.CK_AMT) AS CK_VAT			/* CK물류비 제외 - 부가세 */
					, RS.CK_SUM			/* CK물류비 제외 - 합계 */
					, RS.JI_AMT				/* 지급수수료 제외 - 공급가 */
					, (RS.JI_SUM - RS.JI_AMT) AS JI_VAT				/* 지급수수료 제외 - 부가세 */
					, RS.JI_SUM				/* 지급수수료 제외 - 합계 */
					--, RS.SE_AMT			/* 장려금 제외 - 공급가 */
					--, (RS.SE_SUM - RS.SE_AMT) AS SE_VAT			/* 장려금 제외 - 부가세 */
					--, RS.SE_SUM			/* 장려금 제외 - 합계 */
					, RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT) - RS.TRANS_AMOUNT AS MARGIN_AMT 
		            , CASE -- WHEN RS.TRANS_AMOUNT = 0 THEN 0 
		              WHEN RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT) = 0 THEN 0
		              ELSE ROUND(((RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT) - RS.TRANS_AMOUNT) / (RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT))) * 100, 2) END AS MARGIN_RATIO
		            , RS.MD_NAME
                	, RS.VENDOR_NAME

				FROM
						(
						SELECT
							  TO_CHAR(TO_DATE(X.TRANS_DATE,'YYYYMMDD'),'YYYY-MM-DD') TRANS_DATE
			      			, X.ITEM_CODE
			      			, X.ITEM_NAME
			      			, X.ITEM_SIZE
				  	      	, X.TRANS_UOM
			      			, ROUND(X.TRANS_MPRICE) AS TRANS_PRICE
			      			, ROUND(X.SALE_PRICE) AS SALE_PRICE
							<#if schChk3?has_content>
					        , SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_AMT 
							, SUM(
								CASE WHEN X.FLAG = '1' THEN
									DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0.1,0))
								ELSE
									-- 보정자재는 장려율 적용안됨
									DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
								END
								) AS SALE_VAT
							, SUM(
								CASE WHEN X.FLAG = '1' THEN
									DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))
								ELSE
									-- 보정자재는 장려율 적용안됨
				 					DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT
								END
								) AS SALE_SUM
							<#else>
							, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_AMT 
				 			, SUM(
				 				CASE WHEN X.FLAG = '1' THEN
				 					DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
				 				ELSE 
									DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
				 				END
				 				) AS SALE_VAT 
				 			, SUM(
				 				CASE WHEN X.FLAG = '1' THEN
				 					DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
				 				ELSE 
				 					DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT
				 				END
				 				) AS SALE_SUM 
							</#if>
			      			, SUM(ROUND(X.TRANS_MAMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS TRANS_AMOUNT
		             		--, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))           AS TRANS_VAT   /* 수불 부가세 필드 이용 */
		             		--매입부가세 계산방식 오류 수정 20180413 김호석 부가세 절대값(매입부가세단가)*수량
		             		, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) )           AS TRANS_VAT
		             		, SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))  AS TRANS_SUM
			      			-- CHECK 
			      			, SUM(ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS CK_AMT
			      			, SUM(ROUND(X.CK_AMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT / 10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)) AS CK_SUM
			      			, SUM(ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS JI_AMT
			      			, SUM(ROUND(X.JI_AMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT / 10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)) AS JI_SUM
			      			, X.MD_NAME
                			, X.VENDOR_NAME
						FROM
								(
								SELECT
									  T.TRANS_DATE
				      				, T.ITEM_CODE
				      				, T.ITEM_NAME
				      				, T.ITEM_SIZE
				      				, T.TRANS_UOM
				      				, T.TRANS_TYPE
				      				, T.TRANS_QTY
				      				, T.TRANS_MPRICE
				      				, T.TRANS_MAMOUNT
				      				, T.TRANS_MVAT
				      				, T.SALE_PRICE
				      				, T.SALE_AMOUNT
				      				, T.SALE_VAT
				      				, T.TAX_CODE
				      				, T.FLAG
				     			    , CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
									  ELSE
					    					CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
												CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
		                                        ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
					    					ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
					    					END 
									  END AS CK_AMOUNT
				      				, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
									  ELSE
					    					CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
												CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
		                                        ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
					    					ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
					    					END 
									  END AS JI_AMOUNT
								 , DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE	
								 , T.MD_NAME
                				 , T.VENDOR_NAME		            				 
							FROM
									(
										SELECT
											<#if schMainUpjang?has_content || schUpjang?has_content>
												/*+ PUSH_PRED(A) */
											</#if>
										<#if schGubun=="1">
											  A.TRANS_DATE
					      				<#else>
											  A.MG_DATE AS TRANS_DATE
		           						</#if>
						      				, A.ITEM_CODE
						      				, A.ITEM_NAME
						      				, A.ITEM_SIZE
						      				, A.TRANS_UOM
						      				, A.TRANS_TYPE
						      				, A.TRANS_QTY
										<#if schPrice=="2">
						      				, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
						      				, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
						      				, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
					      				<#else>
						      				, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
						      				, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
						      				/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
						      				, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
		           						</#if>
						      				, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
						      				, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
						      				, NVL(A.SALE_VAT, 0) AS SALE_VAT
						      				, A.TAX_CODE
						      				, A.FLAG
		         							/*검색 조건 : CK물류비제외*/
		         							<#if schChk1?has_content>
						      				, CASE WHEN A.TAX_CODE = '100' THEN
												(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
												 ELSE NVL(C2.FM_SALE_RATE, 0)
												END)
											 ELSE 
												(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
												 ELSE NVL(C2.FM_NOSALE_RATE, 0)
												END)
											 END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
						      			 	, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
						      				<#else>
						      				, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
						      				, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
											</#if>
		         							/*검색 조건 : 지급수수료제외*/
		         							<#if schChk2?has_content>
						      				, CASE WHEN A.TAX_CODE = '100' THEN
												(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
												ELSE NVL(J2.FM_SALE_RATE, 0)
												END)
											  ELSE 
												(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
												 ELSE NVL(J2.FM_NOSALE_RATE, 0)
												END)
											  END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
						     				 , FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
						      				<#else>
						      				 , 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
						     				 , 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
											</#if>
		         							/*검색 조건 : 장려금제외*/
		         							<#if schChk3?has_content>
						      			    , CASE WHEN A.TAX_CODE = '100' THEN
												(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
												 ELSE NVL(S2.FM_SALE_RATE, 0)
												 END)
											  ELSE 
												(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
												ELSE NVL(S2.FM_NOSALE_RATE, 0)
												END)
											END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
						     			  , FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
						      				<#else>
										  ,	0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
						     			  , 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
											</#if>
											, F.MD_NAME
                							, F.VENDOR_NAME
<#if newGubun=="Y">
		 								FROM FMS_TRANSACTION_ALL_V A
<#else>
		 								FROM FMS_TRANSACTION_V A
</#if>
																					INNER JOIN ST_UPJANG B2 ON 1 = 1
		             																									/*검색 조건 : 본사*/
		           																										<#if schMainUpjang?has_content>
		           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
		           																										</#if>
		            																									 /*검색 조건 : 사업장*/
		           																										<#if schUpjang?has_content>
		           																										AND B2.UPJANG = :schUpjang
		           																										</#if>
																														 AND A.TRANS_UPJANG = B2.UPJANG																			
																					INNER JOIN FMS_UPJANG Z ON 1 = 1
		            																									 /*검색 조건 : 영업담당*/
		           																										<#if schSabun?has_content>
		           																		  								AND Z.PART_SALES_SABUN = :schSabun
																														</#if>
		            																									 /*검색 조건 : 세부직군*/
		           																										<#if schBizDetail?has_content>
		           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																														</#if>
																						  								AND A.TRANS_UPJANG = Z.UPJANG
																					INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
		           																												/*검색 조건 : 관리부서(팀)*/
		           																												<#if schTm?has_content>
		           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
		           																												</#if>
		           																												/*검색 조건 : CC */
		           																												<#if schCc?has_content>
		           																												AND D.CC_CD = :schCc
		           																												</#if>
																																AND  B2.DEPT_ID = D.DEPT_ID
																					LEFT JOIN HLDC_PO_ITEM_MST M ON A.ITEM_CODE = M.ITEM_CODE
<#if newGubun!="Y">
																																 AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
</#if>
												 									-- 추가 : 특약사항관련 : 중분류, 소분류
		         																	<#if schChk1?has_content>
																					LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG
																															AND C1.SUBINV_CODE = A.SUBINV_CODE
																															AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																															AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																															AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																					LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG
																															AND C2.SUBINV_CODE = A.SUBINV_CODE
																															AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																															AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																															AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																					</#if>
		         																	<#if schChk2?has_content>
																					LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG
																															AND J1.SUBINV_CODE = A.SUBINV_CODE
																															AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																															AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																															AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																					LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG
																															AND J2.SUBINV_CODE = A.SUBINV_CODE
																															AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																															AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																															AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																					</#if>
		         																	<#if schChk3?has_content>
																					LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG
																															AND S1.SUBINV_CODE = A.SUBINV_CODE
																															AND S1.CASH_CODE = '003'			/* 장려금(003) */
																															AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																															AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																					LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG
																															AND S2.SUBINV_CODE = A.SUBINV_CODE
																															AND S2.CASH_CODE = '003'			/* 장려금(003) */
																															AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																															AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																					</#if>
																					
																					
																					
																					<#if schCustYn == "Y">
																					LEFT JOIN (
																							  	SELECT A.ITEM_CD, C.WH_CNTR_CD, B.HFC_CHR_ID, EPROCUSR.FC_GET_NAME('100', 'ko_KR', 'HFC', 'USER', B.HFC_CHR_ID, '','','','','') AS MD_NAME
																			          					, EPROCUSR.FC_GET_NAME('100', 'ko_KR', 'HFC', 'VENDOR', B.ERP_VD_CD, '','','','','') AS VENDOR_NAME
																			  							FROM EPROCUSR.ESPINFO A
																				    						LEFT OUTER JOIN EPROCUSR.ESMVDOG B
																										    ON A.SYS_ID = B.SYS_ID
																										    AND A.COMP_CD = B.COMP_CD
																										    AND A.VD_SN = B.VD_SN
																										    AND B.OPER_ORG_SN = '414' --FC부문만
																										    INNER JOIN EPROCUSR.ESPSWHC C
																										    ON A.SYS_ID = C.SYS_ID
																										    AND A.COMP_CD = C.COMP_CD
																										    AND A.PURC_OPER_ORG_SN = C.OPER_ORG_SN_PURC
																			 							WHERE A.SYS_ID = '100'
																										   AND A.COMP_CD = 'HFC'
																										   AND :schFromDate BETWEEN A.APPLY_SD AND A.APPLY_ED  --계약 기간
																										   AND A.STS <> 'D'
<#if newGubun!="Y">
																										   AND SUBSTR(A.ITEM_CD, 0 , 1) = 'F' --식자재만
</#if>
																										   
																										   <#if schCenter?has_content>
																			           							<#if schCenter != '*'>
																			           							AND C.WH_CNTR_CD = :schCenter
																			           							</#if>
																			           						</#if>
																										   --AND C.WH_CNTR_CD = '300001'
																			   					) F ON F.ITEM_CD = A.ITEM_CODE
																			   					AND F.WH_CNTR_CD = A.CENTER_CODE
																					<#else>
																					LEFT JOIN ( SELECT '' AS ITEM_CD, '' AS MD_NAME, '' AS VENDOR_NAME FROM DUAL ) F ON F.ITEM_CD = A.ITEM_CODE
																					</#if>
																					
																					
<#if newGubun=="Y">
										WHERE ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
										WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
										AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		           						/*검색 조건 : 기간*/
										<#if schGubun=="1">
		           						AND A.TRANS_DATE2 BETWEEN :schFromDate AND :schToDate
					      				<#else>
		           						AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
		           						</#if>
		           						/*검색 조건 : 센터*/     
		           						<#if schCenter?has_content>
		           							<#if schCenter != '*'>
		           							AND A.CENTER_CODE = :schCenter
		           							</#if>
		           						</#if>
		             					/*검색 조건 : 납품업체*/
		           						<#if schCustCd?has_content>
		           						AND A.CUSTCD = :schCustCd
		           						</#if>
								) T	
						) X		
					 GROUP BY X.TRANS_DATE, X.ITEM_CODE, X.ITEM_NAME, X.ITEM_SIZE, X.TRANS_UOM, X.TRANS_MPRICE, X.SALE_PRICE , X.MD_NAME, X.VENDOR_NAME
					) RS
		 		ORDER BY RS.TRANS_DATE DESC
 		
 		</#if>
 		
		]]></statement>



	<!-- 인도처별집계 목록을 조회한다.(구) -->
	<statement name="selectListTab1_old" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab1_old */
		<![CDATA[
		SELECT (SELECT Z.MAIN_UPJANG FROM FMS_UPJANG Z WHERE Z.UPJANG = A.TRANS_UPJANG) AS MAIN_UPJANG
		     , (SELECT Z.UPJANGNM_DISP FROM FMS_UPJANG Z, FMS_UPJANG Y WHERE Z.UPJANG = Y.MAIN_UPJANG AND Y.UPJANG = A.TRANS_UPJANG) AS MAIN_UPJANGNM_DISP
		     , B2.UPJANG
		     , B2.UPJANGNM
		     , A.SUBINV_CODE
      		 , (SELECT SUBINV_NAME FROM HLDC_PO_SUBINVENTORY WHERE SUBINV_CODE = A.SUBINV_CODE) AS SUBINV_NAME_DISP
             , SUM(CEIL(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS SALE_AMOUNT
             , SUM(DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))                  AS SALE_VAT
             , SUM(CEIL(SALE_AMOUNT) + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1))  AS SALE_SUM
             , SUM(CEIL(TRANS_MAMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS TRANS_AMOUNT
             , SUM(DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT* DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))                  AS TRANS_VAT
             , SUM(CEIL(TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))  AS TRANS_SUM      
<#if newGubun=="Y">
		  FROM FMS_TRANSACTION_ALL_V A,  ST_UPJANG B2 , HLDC_SC_DEPT_V D
<#else>
		  FROM FMS_TRANSACTION_V A,  ST_UPJANG B2 , HLDC_SC_DEPT_V D
</#if>
		 WHERE 1 = 1
<#if newGubun=="Y">
		   AND ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
		   AND SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
           AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		   /*검색 조건 : 기간*/
           AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
           /*검색 조건 : 관리부서(팀)*/
           <#if schTm?has_content>
           AND D.TM_CD = :schTm
           </#if>
           /*검색 조건 : 센터*/     
           <#if schCenter?has_content>
           AND A.CENTER_CODE = :schCenter
           </#if>
            /*검색 조건 : 본사*/
           <#if schMainUpjang?has_content>
           AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           </#if>       
             /*검색 조건 : 사업장*/       
           <#if schUpjang?has_content>
           AND B2.UPJANG = :schUpjang
           </#if>
             /*검색 조건 : 납품업체*/
           <#if schCustCd?has_content>
           AND A.CUSTCD = :schCustCd
           </#if>
           /*
           AND EXISTS (
           					  SELECT 1
           					  FROM FMS_SALES
                       		  WHERE UPJANG = A.TRANS_UPJANG
                       		  AND   SALE_DATE = A.TRANS_DATE
                       		  AND   SUBINV_CODE = A.SUBINV_CODE
                       		  AND   TRANS_YN = 'Y'
           					)
			*/           					
		   AND A.TRANS_UPJANG = B2.UPJANG
		   AND B2.DEPT_ID = D.DEPT_ID
		 GROUP BY A.TRANS_UPJANG, B2.UPJANG, B2.UPJANGNM, A.SUBINV_CODE
		]]>
	</statement>


	<!-- 인도처별집계 목록을 조회한다. -->
	<statement name="selectListTab1" type="select"><![CDATA[
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectList1 */
		
		--마감여부에 따라 집계 또는 실시간 검색 추가 20170824 김호석 
		<#if mCloseYn=="Y">

			SELECT TOTAL.*  -- TOTAL.INCOME_PRICE, TOTAL.INCOME_SUM
			 	, (TOTAL.TRANS_AMOUNT - TOTAL.INCOME_SUM) AS INCOME_TRANS_SUM -- 매입금액 - 매입차감합계
                , (TOTAL.SALE_AMOUNT - (TOTAL.TRANS_AMOUNT - TOTAL.INCOME_SUM)) AS INCOME_MARGIN_AMT -- 매출금액 - 매입합계(차감반영)
                , ROUND(ROUND((TOTAL.SALE_AMOUNT - (TOTAL.TRANS_AMOUNT - TOTAL.INCOME_SUM))) / ROUND(DECODE(TOTAL.SALE_AMOUNT,0,1,ROUND(TOTAL.SALE_AMOUNT)))*100, 2) AS INCOME_MARGIN_RATIO -- 이익액(차감반영) / 매출금액
			FROM (
			SELECT
		         	  RS.MAIN_UPJANG
		    		, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = TO_NUMBER(RS.MAIN_UPJANG)) AS MAIN_UPJANGNM_DISP
		   			, RS.UPJANG AS UPJANG
		    		, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = TO_NUMBER(RS.UPJANG)) AS UPJANGNM
		    		, RS.SUBINV_CODE
		    		, (SELECT SUBINV_NAME FROM HLDC_PO_SUBINVENTORY WHERE SUBINV_CODE = RS.SUBINV_CODE) AS SUBINV_NAME_DISP
		    		, RS.BIZ_DETAIL_MAIN  																								/* 세부직군 */
					 , /* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX )+ SUM(RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX) + SUM(RS.JI_SALE_NOTAX)<#else> 0 </#if> ) 
					AS SALE_AMOUNT																		    /* 매출금액 = 매출금액 - (각종 수수료금액 제외) */
				  , /* 장려금 제외 여부     */ <#if schChk3?has_content> SUM(RS.SALE_VAT_S) <#else> SUM(RS.SALE_VAT) </#if>
				    /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>SUM(RS.CK_SALE_VAT) <#else> 0 </#if>
  					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_VAT) <#else> 0 </#if>)
					AS SALE_VAT																			    /* 매출부가세 = 매출부가세 - (각종 수수료금액 제외) */
				  , /* 장려금 제외 여부     */ <#if schChk3?has_content> SUM(RS.SALE_ALL_S) <#else> SUM(RS.SALE_ALL) </#if>
  				    /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX) + SUM(RS.CK_SALE_TAX) + SUM(RS.CK_SALE_VAT) <#else> 0 </#if>
					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX) + SUM(RS.JI_SALE_NOTAX) + SUM(RS.JI_SALE_VAT) <#else> 0 </#if>) 
					AS SALE_SUM		  																	    /* 매출합계 = 매출합계 - (각종 수수료금액 제외) */
             <#if schPrice=="2">  
               , SUM(RS.TRANS_SUM_UNIT) TRANS_AMOUNT
               , SUM(RS.TRANS_VAT_UNIT) TRANS_VAT
               , (SUM(RS.TRANS_SUM_UNIT) + SUM(RS.TRANS_VAT_UNIT)) TRANS_SUM             
             <#else>
               , SUM(RS.TRANS_SUM) TRANS_AMOUNT
               , SUM(RS.TRANS_VAT) TRANS_VAT
               , SUM(RS.TRANS_TOT) TRANS_SUM
             </#if>							
					
			       -- , SUM(RS.TRANS_SUM )AS TRANS_AMOUNT																				/* 매입액 공급가 */
			       -- , SUM(RS.TRANS_VAT)	AS TRANS_VAT																											/* 매입액 부가세 */
			       -- , SUM(RS.TRANS_TOT) AS TRANS_SUM																						/* 매입액 합계 */
					, SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) AS CK_AMT												/* CK물류비 제외 - 공급가 */
				  	, SUM(RS.CK_SALE_VAT) AS CK_VAT																						/* CK물류비 제외 - 부가세 */
					, SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX + RS.CK_SALE_VAT) AS CK_SUM			/* CK물류비 제외 - 합계 */
					, SUM(RS.JI_SALE_NOTAX + RS.JI_SALE_TAX) AS JI_AMT												/* 지급수수료 제외 - 공급가 */
					, SUM(RS.JI_SALE_VAT) AS JI_VAT																						/* 지급수수료 제외 - 부가세 */
					, SUM(RS.JI_SALE_NOTAX + RS.JI_SALE_TAX + RS.JI_SALE_VAT) AS JI_SUM			/* 지급수수료 제외 - 합계 */
<#if schPrice=="2">				
				    , SUM(RS.SALE_NOTAX) + SUM(RS.SALE_TAX) - SUM(RS.TRANS_SUM_UNIT) AS MARGIN_AMT																/* 이익액 */
				  , CASE
					WHEN /* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  = 0 THEN 0
					  ELSE ROUND(((/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  - SUM(RS.TRANS_SUM_UNIT))
					   / (/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX )<#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> ) )) * 100, 2) END AS MARGIN_RATIO  /* 이익율 */
 <#else>	
 				   , SUM(RS.SALE_NOTAX) + SUM(RS.SALE_TAX) - SUM(RS.TRANS_SUM) AS MARGIN_AMT																			/* 이익액 */
				  , CASE
					WHEN /* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  = 0 THEN 0
					  ELSE ROUND(((/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  - SUM(RS.TRANS_SUM))
					   / (/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX )<#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> ) )) * 100, 2) END AS MARGIN_RATIO  /* 이익율 */
 
 </#if>	
                 , ROUND(SUM(RS.INCOME_PRICE)) AS INCOME_PRICE
                 , SUM(RS.INCOME_SUM) AS INCOME_SUM
 FROM FMS_BUY_SALE_SUM RS
							INNER JOIN FMS_UPJANG Z ON 1 = 1
									 /*검색 조건 : 영업담당*/
									<#if schSabun?has_content>
									AND Z.PART_SALES_SABUN = :schSabun
									</#if>
									AND RS.UPJANG = Z.UPJANG
							INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
									/*검색 조건 : 관리부서(팀)*/
									<#if schTm?has_content>
									AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
									</#if>
									/*검색 조건 : CC */
									<#if schCc?has_content>
									AND D.CC_CD = :schCc
									</#if>
									AND  RS.DEPT_ID = D.DEPT_ID
		    	WHERE 1=1
						<#if schMainUpjang?has_content>
							AND RS.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
						</#if>
						 /*검색 조건 : 사업장*/
						<#if schUpjang?has_content>
							AND RS.UPJANG = :schUpjang
						</#if>
						/*검색 조건 : 기간*/
						<#if schGubun=="1">
						AND RS.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate
						<#else>
						AND RS.MG_DATE BETWEEN :schFromDate AND :schToDate
						</#if>
						/*검색 조건 : 센터*/     
						<#if schCenter?has_content>
							<#if schCenter != '*'>
							AND RS.CENTER_CODE = :schCenter
							</#if>
						</#if>
						/*검색 조건 : 납품업체*/
						<#if schCustCd?has_content>
						AND RS.CUSTCD = :schCustCd
						</#if>						
						/*검색 조건 : 세부직군*/
						<#if schBizDetail?has_content>
						AND RS.BIZ_DETAIL_MAIN = :schBizDetail
						</#if>
			  GROUP BY RS.MAIN_UPJANG ,  RS.UPJANG, RS.SUBINV_CODE, RS.BIZ_DETAIL_MAIN	
			  
			  ) TOTAL
		<#else>
		
				SELECT
		      		  RS.MAIN_UPJANG
		    		, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = RS.MAIN_UPJANG) AS MAIN_UPJANGNM_DISP
		   			, RS.TRANS_UPJANG AS UPJANG
		    		, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = RS.TRANS_UPJANG) AS UPJANGNM
		    		, RS.SUBINV_CODE
		    		, (SELECT SUBINV_NAME FROM HLDC_PO_SUBINVENTORY WHERE SUBINV_CODE = RS.SUBINV_CODE) AS SUBINV_NAME_DISP
		        	, (SELECT Z.CODE_NAME FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'FM0021' AND Z.CODE = RS.BIZ_DETAIL) AS BIZ_DETAIL_NAME	-- 세부직군
					, RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT) AS SALE_AMOUNT		/* 매출금액 = 매출금액 - (각종 수수료금액 제외) */
					, RS.SALE_VAT - ((RS.CK_SUM - RS.CK_AMT) + (RS.JI_SUM - RS.JI_AMT)) AS SALE_VAT			/* 매출부가세 = 매출부가세 - (각종 수수료금액 제외) */
					, RS.SALE_SUM - (RS.CK_SUM + RS.JI_SUM) AS SALE_SUM		/* 매출합계 = 매출합계 - (각종 수수료금액 제외) */
		    		, RS.TRANS_AMOUNT
		    		, RS.TRANS_VAT
		    		, RS.TRANS_SUM
		    		, RS.CK_AMT
		    		, (RS.CK_SUM - RS.CK_AMT) AS CK_VAT
		    		, RS.CK_SUM
		    		, RS.JI_AMT
		    		, (RS.JI_SUM - RS.JI_AMT) AS JI_VAT
		    		, RS.JI_SUM
					, RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT) - RS.TRANS_AMOUNT AS MARGIN_AMT 
		            , CASE --WHEN RS.TRANS_AMOUNT = 0 THEN 0 
		              WHEN RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT) = 0 THEN 0
		              ELSE ROUND(((RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT) - RS.TRANS_AMOUNT) / (RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT))) * 100, 2) END AS MARGIN_RATIO
                    , RS.INCOME_PRICE
                    , RS.INCOME_SUM
                    , (RS.TRANS_AMOUNT - RS.INCOME_SUM) AS INCOME_TRANS_SUM
                    , ((RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT)) - (RS.TRANS_AMOUNT - RS.INCOME_SUM)) AS INCOME_MARGIN_AMT
                    , ROUND(NVL(((RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT)) - (RS.TRANS_AMOUNT - RS.INCOME_SUM))/DECODE((RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT)), 0, NULL, (RS.SALE_AMT - (RS.CK_AMT +  RS.JI_AMT))), 0) * 100, 2) AS INCOME_MARGIN_RATIO
				FROM
		    			(
		    			SELECT
		        				  B.MAIN_UPJANG        
		          				, X.TRANS_UPJANG
		          				, X.SUBINV_CODE
		          				, X.BIZ_DETAIL
								<#if schChk3?has_content>
					        	, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_AMT 
								, SUM(
									CASE WHEN X.FLAG = '1' THEN
										DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0.1,0))
									ELSE
										-- 보정자재는 장려율 적용안됨
										DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
									END
									) AS SALE_VAT
								, SUM(
									CASE WHEN X.FLAG = '1' THEN
										DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))
									ELSE
										-- 보정자재는 장려율 적용안됨
				 						DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT
									END
									) AS SALE_SUM
								<#else>
								, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_AMT 
				 				, SUM(
				 					CASE WHEN X.FLAG = '1' THEN
				 						DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
				 					ELSE 
										DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
				 					END
				 					) AS SALE_VAT 
				 				, SUM(
				 					CASE WHEN X.FLAG = '1' THEN
				 						DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
				 					ELSE
				 						DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT
				 					END
				 					) AS SALE_SUM 
								</#if>
		          				, SUM(ROUND(X.TRANS_MAMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS TRANS_AMOUNT
		             			--, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))           AS TRANS_VAT   /* 수불 부가세 필드 이용 */
		             			--, SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))  AS TRANS_SUM
		             			--매입부가세 계산방식 오류 수정 20180413 김호석 부가세 절대값(매입부가세단가)*수량
			             		, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) )           AS TRANS_VAT
			             		, SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))  AS TRANS_SUM
				      			
		          				-- CHECK 
		          				, SUM(ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS CK_AMT
		          				, SUM(ROUND(X.CK_AMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT / 10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)) AS CK_SUM
		          				, SUM(ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS JI_AMT
		          				, SUM(ROUND(X.JI_AMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT / 10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)) AS JI_SUM
		          				, SUM(ROUND(X.INCOME_PRICE)) AS INCOME_PRICE
		          				, SUM(ROUND(X.INCOME_SUM)) AS INCOME_SUM
		    			FROM
		        				(
		        					SELECT
		            						  T.TRANS_UPJANG
		              						, T.SUBINV_CODE
		              						, T.TRANS_DATE
		              						, T.ITEM_CODE
		              						, T.ITEM_NAME
		              						, T.ITEM_SIZE
		              						, T.TRANS_UOM
		              						, T.TRANS_TYPE
		              						, T.TRANS_QTY
		              						, T.TRANS_MPRICE
		              						, T.TRANS_MAMOUNT
		              						, T.TRANS_MVAT
		              						, T.SALE_PRICE
		              						, T.SALE_AMOUNT
		              						, T.SALE_VAT
		              						, T.TAX_CODE
		              						, T.FLAG
		              						, T.BIZ_DETAIL
				     			    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
									  		  ELSE
					    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
														CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
		                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
					    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
					    							END 
									  		   END AS CK_AMOUNT
				      						, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
									  		  ELSE
					    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
															CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
		                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
					    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
					    					  			END 
									  		  END AS JI_AMOUNT
										 , DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE
										 , T.INCOME_PRICE
										 , T.INCOME_SUM
		        					FROM
		            						(
		                						SELECT
												<#if schMainUpjang?has_content || schUpjang?has_content>
													/*+ PUSH_PRED(A) */
												</#if>
		                    						  A.TRANS_UPJANG
		                                      		, A.SUBINV_CODE
													<#if schGubun=="1">
											 		, A.TRANS_DATE
					      							<#else>
											  		, A.MG_DATE AS TRANS_DATE
		           									</#if>
		                      						, A.ITEM_CODE
		                      						, A.ITEM_NAME
		                      						, A.ITEM_SIZE
		                      						, A.TRANS_UOM
		                      						, A.TRANS_TYPE
		                      						, A.TRANS_QTY
													<#if schPrice=="2">
						      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
						      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
						      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
					      							<#else>
						      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
						      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
						      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
						      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
		           									</#if>
		                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
		                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
		                      						, NVL(A.SALE_VAT, 0) AS SALE_VAT
		                      						, A.TAX_CODE
		                      						, A.FLAG
		                      						, Z.BIZ_DETAIL
		         									/*검색 조건 : CK물류비제외*/
		         									<#if schChk1?has_content>
						      						, CASE WHEN A.TAX_CODE = '100' THEN
															(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
															 ELSE NVL(C2.FM_SALE_RATE, 0)
															END)
											 		ELSE 
															(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
												 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
															END)
											 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
						      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
						      						<#else>
						      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
						      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
													</#if>
		         									/*검색 조건 : 지급수수료제외*/
		         									<#if schChk2?has_content>
						      						, CASE WHEN A.TAX_CODE = '100' THEN
															(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
															ELSE NVL(J2.FM_SALE_RATE, 0)
															END)
											  		 ELSE 
															(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
												 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
															END)
											  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
						     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
						      						<#else>
						      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
						     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
													</#if>
		         									/*검색 조건 : 장려금제외*/
		         									<#if schChk3?has_content>
						      			    		, CASE WHEN A.TAX_CODE = '100' THEN
															(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
												 			ELSE NVL(S2.FM_SALE_RATE, 0)
												 		END)
											  		 ELSE 
															(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
															ELSE NVL(S2.FM_NOSALE_RATE, 0)
															END)
													 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
						     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
						      					<#else>
										 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
						     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
						     			  		, (NVL(INFO.DELY_DS_RATE,0)+NVL(INFO.DELY_TC_RATE,0)+NVL(INFO.DELY_DC_RATE,0)+NVL(INFO.DELY_GS_RATE,0)+NVL(INFO.DELY_BH_RATE,0)+NVL(INFO.DELY_PK_RATE,0))*NVL(INFO.ITEM_PRICE,0)/100 AS INCOME_PRICE
						     			  		, (A.TRANS_QTY * (NVL(INFO.DELY_DS_RATE,0)+NVL(INFO.DELY_TC_RATE,0)+NVL(INFO.DELY_DC_RATE,0)+NVL(INFO.DELY_GS_RATE,0)+NVL(INFO.DELY_BH_RATE,0)+NVL(INFO.DELY_PK_RATE,0))*NVL(INFO.ITEM_PRICE,0)/100) AS INCOME_SUM
												</#if>
<#if newGubun=="Y">
		 										FROM FMS_TRANSACTION_ALL_V A
<#else>
		 										FROM FMS_TRANSACTION_V A
</#if>
		                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
		             																									/*검색 조건 : 본사*/
		           																										<#if schMainUpjang?has_content>
		           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
		           																										</#if>
		            																									 /*검색 조건 : 사업장*/
		           																										<#if schUpjang?has_content>
		           																										AND B2.UPJANG = :schUpjang
		           																										</#if>
																														 AND A.TRANS_UPJANG = B2.UPJANG
																						INNER JOIN FMS_UPJANG Z ON 1 = 1
		            																									 /*검색 조건 : 영업담당*/
		           																										<#if schSabun?has_content>
		           																		  								 AND Z.PART_SALES_SABUN = :schSabun
																														</#if>
		            																									 /*검색 조건 : 세부직군*/
		           																										<#if schBizDetail?has_content>
		           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																														</#if>
																						  								 AND A.TRANS_UPJANG = Z.UPJANG
																						INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
		           																												/*검색 조건 : 관리부서(팀)*/
		           																												<#if schTm?has_content>
		           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
		           																												</#if>
		           																												/*검색 조건 : CC */
		           																												<#if schCc?has_content>
		           																												AND D.CC_CD = :schCc
		           																												</#if>
																																AND  B2.DEPT_ID = D.DEPT_ID
		                                        										LEFT JOIN HLDC_PO_ITEM_MST M ON A.ITEM_CODE = M.ITEM_CODE
<#if newGubun!="Y">
		                                                               																 AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
</#if>
					                                 								LEFT JOIN EPROCUSR.ESPINFO INFO ON INFO.SYS_ID = '100'
															      															AND INFO.COMP_CD = 'HFC'
															                                      							AND INFO.ITEM_CD = A.ITEM_CODE
															                                      							AND INFO.PURC_OPER_ORG_SN IN (SELECT  WHC.OPER_ORG_SN_PURC FROM EPROCUSR.ESPSWHC WHC WHERE  WHC.SYS_ID='100' AND WHC.COMP_CD = 'HFC' AND WHC.WH_CNTR_CD = A.CENTER_CODE)
															                                      							AND :schFromDate BETWEEN INFO.APPLY_SD AND INFO.APPLY_ED
															                                      							AND INFO.STS <> 'D'
		                                         											-- 추가 : 특약사항관련 : 중분류, 소분류
		         																	<#if schChk1?has_content>
																					LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG
																															AND C1.SUBINV_CODE = A.SUBINV_CODE
																															AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																															AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																															AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																					LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG
																															AND C2.SUBINV_CODE = A.SUBINV_CODE
																															AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																															AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																															AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																					</#if>
		         																	<#if schChk2?has_content>
																					LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG
																															AND J1.SUBINV_CODE = A.SUBINV_CODE
																															AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																															AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																															AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																					LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG
																															AND J2.SUBINV_CODE = A.SUBINV_CODE
																															AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																															AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																															AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																					</#if>
		         																	<#if schChk3?has_content>
																					LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG
																															AND S1.SUBINV_CODE = A.SUBINV_CODE
																															AND S1.CASH_CODE = '003'			/* 장려금(003) */
																															AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																															AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																					LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG
																															AND S2.SUBINV_CODE = A.SUBINV_CODE
																															AND S2.CASH_CODE = '003'			/* 장려금(003) */
																															AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																															AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																					</#if>
<#if newGubun=="Y">
		                						WHERE ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
		                						WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
		                						AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		           								/*검색 조건 : 기간*/
												<#if schGubun=="1">
		           								AND A.TRANS_DATE2 BETWEEN :schFromDate AND :schToDate
					      						<#else>
		           								AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
		           								</#if>
		           								/*검색 조건 : 센터*/     
		           								<#if schCenter?has_content>
		           									<#if schCenter != '*'>
		           									AND A.CENTER_CODE = :schCenter
		           									</#if>
		           								</#if>
		             							/*검색 조건 : 납품업체*/
		           								<#if schCustCd?has_content>
		           								AND A.CUSTCD = :schCustCd
		           								</#if>
		            				) T 
		        			) X INNER JOIN FMS_UPJANG B ON X.TRANS_UPJANG = B.UPJANG        
		     			GROUP BY B.MAIN_UPJANG, X.TRANS_UPJANG, X.SUBINV_CODE, X.BIZ_DETAIL
		  		) RS
        </#if>
		]]></statement>


	<!-- 자재별집계 목록을 조회한다. (구)-->
	<statement name="selectListTab2_old" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab2_old */
		<![CDATA[
        SELECT '('||TO_CHAR(B2.DEPT_ID)||')'||D.CC_NM AS CC_NM
             , Y.CLASS_NAME||'('||Y.CLASS_CODE||')' AS CLASS_M
             , Z.CLASS_NAME||'('||Z.CLASS_CODE||')' AS CLASS_S
             , A.ITEM_CODE, A.ITEM_NAME, A.ITEM_SIZE, A.TRANS_UOM
		     , ROUND(TRANS_MPRICE) TRANS_MPRICE
		     , A.SALE_PRICE
             , SUM(CEIL(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS SALE_AMOUNT
             , SUM(DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))                  AS SALE_VAT
             , SUM(CEIL(SALE_AMOUNT) + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1))  AS SALE_SUM
             , SUM(CEIL(TRANS_MAMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS TRANS_AMOUNT
             , SUM(DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT* DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))                  AS TRANS_VAT
             , SUM(CEIL(TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))  AS TRANS_SUM
<#if newGubun=="Y">
		  FROM FMS_TRANSACTION_ALL_V A, ST_UPJANG B2, HLDC_SC_DEPT_V D, HLDC_PO_ITEM_CLASS Y, HLDC_PO_ITEM_CLASS Z, HLDC_PO_ITEM_MST V
<#else>
		  FROM FMS_TRANSACTION_V A, ST_UPJANG B2, HLDC_SC_DEPT_V D, HLDC_PO_ITEM_CLASS Y, HLDC_PO_ITEM_CLASS Z, HLDC_PO_ITEM_MST V
</#if>
		 WHERE 1 = 1
<#if newGubun=="Y">
		   AND ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
		   AND SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
           AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		   /*검색 조건 : 기간*/
           AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
           /*검색 조건 : 관리부서(팀)*/
           <#if schTm?has_content>
           AND D.TM_CD = :schTm
           </#if>
           /*검색 조건 : 센터*/     
           <#if schCenter?has_content>
           AND A.CENTER_CODE = :schCenter
           </#if>
            /*검색 조건 : 본사*/
           <#if schMainUpjang?has_content>
           AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           </#if>       
             /*검색 조건 : 사업장*/       
           <#if schUpjang?has_content>
           AND B2.UPJANG = :schUpjang
           </#if>
             /*검색 조건 : 납품업체*/
           <#if schCustCd?has_content>
           AND A.CUSTCD = :schCustCd
           </#if>
           /*
           AND EXISTS (
           					  SELECT 1
           					  FROM FMS_SALES
                       		  WHERE UPJANG = A.TRANS_UPJANG
                       		  AND   SALE_DATE = A.TRANS_DATE
                       		  AND   SUBINV_CODE = A.SUBINV_CODE
                       		  AND   TRANS_YN = 'Y'
           					)
           */					
           AND A.TRANS_UPJANG = B2.UPJANG
           AND B2.DEPT_ID = D.DEPT_ID
           AND A.ITEM_CODE = V.ITEM_CODE(+)
           AND V.ITEM_CLASS2 = Y.CLASS_CODE(+)
           AND V.ITEM_CLASS3 = Z.CLASS_CODE(+)
		 GROUP BY '('||TO_CHAR(B2.DEPT_ID)||')'||D.CC_NM, Y.CLASS_NAME||'('||Y.CLASS_CODE||')', Z.CLASS_NAME||'('||Z.CLASS_CODE||')', A.ITEM_CODE, A.ITEM_NAME, A.ITEM_SIZE, A.TRANS_UOM, ROUND(TRANS_MPRICE), A.SALE_PRICE, A.TAX_CODE
		]]>
	</statement>


	<!-- 자재별집계 목록을 조회한다. -->
	<statement name="selectListTab2" type="select"><![CDATA[
		
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab2 */
		--마감여부에 따라 집계 또는 실시간 검색 추가 20170824 김호석 
		<#if mCloseYn=="Y">
			
		    SELECT TOTAL.*  -- TOTAL.INCOME_PRICE, TOTAL.INCOME_SUM
			 	, (TOTAL.TRANS_AMOUNT - TOTAL.INCOME_SUM) AS INCOME_TRANS_SUM -- 매입금액 - 매입차감합계
                , (TOTAL.SALE_AMOUNT - (TOTAL.TRANS_AMOUNT - TOTAL.INCOME_SUM)) AS INCOME_MARGIN_AMT -- 매출금액 - 매입합계(차감반영)
                , ROUND(ROUND((TOTAL.SALE_AMOUNT - (TOTAL.TRANS_AMOUNT - TOTAL.INCOME_SUM))) / ROUND(DECODE(TOTAL.SALE_AMOUNT,0,1,ROUND(TOTAL.SALE_AMOUNT)))*100, 2) AS INCOME_MARGIN_RATIO -- 이익액(차감반영) / 매출금액
            FROM 
			(
			SELECT
				  D.CC_NM
		        , A.CLASS_NAME ||'(' || M.ITEM_CLASS2 || ')' AS CLASS_M
		        , B.CLASS_NAME ||'(' || M.ITEM_CLASS3 || ')' AS CLASS_S
				, C.CLASS_NAME ||'(' || M.ITEM_CLASS4 || ')' AS CLASS_D
				, RS.ITEM_CODE
				, RS.ITEM_NAME
				, RS.ITEM_SIZE
				, RS.TRANS_UOM
				--발주수량 추가 20171011 요청자:김은영
				, ROUND((SUM(RS.TRANS_SUM)/ROUND(DECODE(RS.TRANS_MPRICE,0,1,ROUND(RS.TRANS_MPRICE)))), 2) TRANS_QTY
			<#if schPrice=="2">
		        , ROUND(AVG(RS.TRANS_MPRICE_UNIT)) AS TRANS_MPRICE  		 	
			<#else>
		        , ROUND(RS.TRANS_MPRICE) AS TRANS_MPRICE  
		    </#if>														/* 매입단가 */
		        --, ROUND(SUM(RS.SALE_PRICE)) AS SALE_PRICE   																/* 판매단가 */
		        , CASE WHEN (SUM(RS.TRANS_SUM)/ROUND(DECODE(RS.TRANS_MPRICE,0,1,ROUND(RS.TRANS_MPRICE)))) = 0 THEN 0
		          ELSE ROUND( (
		        	/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT )</#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )
   					) / (SUM(RS.TRANS_SUM)/ROUND(DECODE(RS.TRANS_MPRICE,0,1,ROUND(RS.TRANS_MPRICE))))
   					) END AS SALE_PRICE
		         , /* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT )</#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> ) 
					AS SALE_AMOUNT																		    /* 매출금액 = 매출금액 - (각종 수수료금액 제외) */
				  , /* 장려금 제외 여부     */ <#if schChk3?has_content> SUM(RS.SALE_VAT_S) <#else> SUM(RS.SALE_VAT) </#if>
				    /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>SUM(RS.CK_SALE_VAT) <#else> 0 </#if>
  					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_VAT) <#else> 0 </#if>)
					AS SALE_VAT																			    /* 매출부가세 = 매출부가세 - (각종 수수료금액 제외) */
				  , /* 장려금 제외 여부     */ <#if schChk3?has_content> SUM(RS.SALE_ALL_S) <#else> SUM(RS.SALE_ALL) </#if>
  				    /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX + RS.CK_SALE_VAT) <#else> 0 </#if>
					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX +RS.JI_SALE_VAT )<#else> 0 </#if>) 
					AS SALE_SUM		  																	    /* 매출합계 = 매출합계 - (각종 수수료금액 제외) */
             <#if schPrice=="2">  
               , SUM(RS.TRANS_SUM_UNIT) TRANS_AMOUNT
               , SUM(RS.TRANS_VAT_UNIT) TRANS_VAT
               , (SUM(RS.TRANS_SUM_UNIT) + SUM(RS.TRANS_VAT_UNIT)) TRANS_SUM             
             <#else>
               , SUM(RS.TRANS_SUM) TRANS_AMOUNT
               , SUM(RS.TRANS_VAT) TRANS_VAT
               , SUM(RS.TRANS_TOT) TRANS_SUM
             </#if>					
										
		     --   , SUM(RS.TRANS_SUM) AS TRANS_AMOUNT																				/* 매입액 공급가 */
			--	, SUM(RS.TRANS_VAT)	AS TRANS_VAT																											/* 매입액 부가세 */
			--	, SUM(RS.TRANS_TOT) AS TRANS_SUM																						/* 매입액 합계 */
				, SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) AS CK_AMT												/* CK물류비 제외 - 공급가 */
			  	, SUM(RS.CK_SALE_VAT) AS CK_VAT																						/* CK물류비 제외 - 부가세 */
				, SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX + RS.CK_SALE_VAT) AS CK_SUM			/* CK물류비 제외 - 합계 */
				, SUM(RS.JI_SALE_NOTAX + RS.JI_SALE_TAX) AS JI_AMT												/* 지급수수료 제외 - 공급가 */
				, SUM(RS.JI_SALE_VAT) AS JI_VAT																						/* 지급수수료 제외 - 부가세 */
				, SUM(RS.JI_SALE_NOTAX + RS.JI_SALE_TAX + RS.JI_SALE_VAT) AS JI_SUM			/* 지급수수료 제외 - 합계 */
<#if schPrice=="2">				
				   , SUM(RS.SALE_NOTAX) + SUM(RS.SALE_TAX) - SUM(RS.TRANS_SUM_UNIT) AS MARGIN_AMT																/* 이익액 */
				  , CASE
					WHEN /* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  = 0 THEN 0
					  ELSE ROUND(((/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  - SUM(RS.TRANS_SUM_UNIT))
					   / (/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX )<#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> ) )) * 100, 2) END AS MARGIN_RATIO  /* 이익율 */
 <#else>	
 				  , SUM(RS.SALE_NOTAX) + SUM(RS.SALE_TAX) - SUM(RS.TRANS_SUM) AS MARGIN_AMT	
                --  , SUM(RS.MARGIN_SUM) AS MARGIN_AMT																/* 이익액 */
				  , CASE
					WHEN /* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  = 0 THEN 0
					  ELSE ROUND(((/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S) <#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) <#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> )  - SUM(RS.TRANS_SUM))
					   / (/* 장려금 제외 여부     */ <#if schChk3?has_content>SUM(RS.SALE_TOT_S )<#else> SUM(RS.SALE_TOT) </#if>
				    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>SUM(RS.CK_SALE_NOTAX + RS.CK_SALE_TAX )<#else> 0 </#if>
   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>SUM(RS.JI_SALE_TAX + RS.JI_SALE_NOTAX)<#else> 0 </#if> ) )) * 100, 2) END AS MARGIN_RATIO  /* 이익율 */
 
 </#if>			, F.MD_NAME
                , F.VENDOR_NAME 
                , ROUND(RS.INCOME_PRICE) AS INCOME_PRICE 
                , SUM(RS.INCOME_SUM) AS INCOME_SUM
				FROM FMS_BUY_SALE_SUM RS	
							INNER JOIN FMS_UPJANG Z ON 1 = 1
									 /*검색 조건 : 영업담당*/
									<#if schSabun?has_content>
									AND Z.PART_SALES_SABUN = :schSabun
									</#if>
									AND RS.UPJANG = Z.UPJANG
							INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
									/*검색 조건 : 관리부서(팀)*/
									<#if schTm?has_content>
									AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
									</#if>
									/*검색 조건 : CC */
									<#if schCc?has_content>
									AND D.CC_CD = :schCc
									</#if>
									AND  RS.DEPT_ID = D.DEPT_ID	     
					      	LEFT OUTER JOIN HLDC_PO_ITEM_MST M ON RS.ITEM_CODE = M.ITEM_CODE
					      	LEFT OUTER JOIN HLDC_PO_ITEM_CLASS A ON M.ITEM_CLASS2 = A.CLASS_CODE AND A.CLASS_TYPE = 'M'
					      	LEFT OUTER JOIN HLDC_PO_ITEM_CLASS B ON M.ITEM_CLASS3 = B.CLASS_CODE AND B.CLASS_TYPE = 'S'
					      	LEFT OUTER JOIN HLDC_PO_ITEM_CLASS C ON M.ITEM_CLASS4 = C.CLASS_CODE AND C.CLASS_TYPE = 'D'
		       				<#if schCustYn == "Y">
							LEFT JOIN (
									  	SELECT A.ITEM_CD, C.WH_CNTR_CD, B.HFC_CHR_ID, EPROCUSR.FC_GET_NAME('100', 'ko_KR', 'HFC', 'USER', B.HFC_CHR_ID, '','','','','') AS MD_NAME
						      					, EPROCUSR.FC_GET_NAME('100', 'ko_KR', 'HFC', 'VENDOR', B.ERP_VD_CD, '','','','','') AS VENDOR_NAME
												FROM EPROCUSR.ESPINFO A
						    						LEFT OUTER JOIN EPROCUSR.ESMVDOG B
												    ON A.SYS_ID = B.SYS_ID
												    AND A.COMP_CD = B.COMP_CD
												    AND A.VD_SN = B.VD_SN
												    AND B.OPER_ORG_SN = '414' --FC부문만
												    INNER JOIN EPROCUSR.ESPSWHC C
												    ON A.SYS_ID = C.SYS_ID
												    AND A.COMP_CD = C.COMP_CD
												    AND A.PURC_OPER_ORG_SN = C.OPER_ORG_SN_PURC
												WHERE A.SYS_ID = '100'
												   AND A.COMP_CD = 'HFC'
												   AND :schFromDate BETWEEN A.APPLY_SD AND A.APPLY_ED  --계약 기간
												   AND A.STS <> 'D'
												   AND SUBSTR(A.ITEM_CD, 0 , 1) = 'F' --식자재만
												   
												   <#if schCenter?has_content>
						       							<#if schCenter != '*'>
						       							AND C.WH_CNTR_CD = :schCenter
						       							</#if>
						       						</#if>
												   --AND C.WH_CNTR_CD = '300001'
										) F ON F.ITEM_CD = RS.ITEM_CODE
										AND F.WH_CNTR_CD = RS.CENTER_CODE
							<#else>
							LEFT JOIN ( SELECT '' AS ITEM_CD, '' AS MD_NAME, '' AS VENDOR_NAME FROM DUAL ) F ON F.ITEM_CD = RS.ITEM_CODE
							</#if>
		        	WHERE 1=1
		        		<#if schMainUpjang?has_content>
							AND RS.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
						</#if>
						 /*검색 조건 : 사업장*/
						<#if schUpjang?has_content>
							AND RS.UPJANG = :schUpjang
						</#if>
						/*검색 조건 : 기간*/
						<#if schGubun=="1">
						AND RS.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate
						<#else>
						AND RS.MG_DATE BETWEEN :schFromDate AND :schToDate
						</#if>
						/*검색 조건 : 센터*/     
						<#if schCenter?has_content>
							<#if schCenter != '*'>
							AND RS.CENTER_CODE = :schCenter
							</#if>
						</#if>
						/*검색 조건 : 납품업체*/
						<#if schCustCd?has_content>
						AND RS.CUSTCD = :schCustCd
						</#if>						
						/*검색 조건 : 세부직군*/
						<#if schBizDetail?has_content>
						AND RS.BIZ_DETAIL_MAIN = :schBizDetail
						</#if>
						GROUP BY   D.CC_NM,  A.CLASS_NAME ||'(' || M.ITEM_CLASS2 || ')' , B.CLASS_NAME ||'(' ||M.ITEM_CLASS3 || ')', C.CLASS_NAME ||'(' ||M.ITEM_CLASS4 || ')',  RS.ITEM_CODE, RS.ITEM_NAME,RS.ITEM_SIZE,RS.TRANS_UOM
						, RS.TRANS_MPRICE_UNIT
						, RS.TRANS_MPRICE
						, F.MD_NAME, F.VENDOR_NAME, RS.INCOME_PRICE
						
				) TOTAL
												
		<#else>
		
				SELECT
		  			  RS.CC_NM
					, RS.CLASS_M
					, RS.CLASS_S
					, RS.CLASS_D
					, RS.ITEM_CODE
					, RS.ITEM_NAME
					, RS.ITEM_SIZE
					, RS.TRANS_UOM					
                    --발주수량 추가 20171011 요청자:김은영
                    , ROUND((RS.TRANS_AMOUNT/DECODE(RS.TRANS_MPRICE,0,1,ROUND(RS.TRANS_MPRICE))), 2) TRANS_QTY 
					, ROUND(RS.TRANS_MPRICE) AS TRANS_MPRICE
					, ROUND(RS.SALE_PRICE) AS SALE_PRICE
					, RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT) AS SALE_AMOUNT		/* 매출금액 = 매출금액 - (각종 수수료금액 제외) */
					, RS.SALE_VAT - ((RS.CK_SUM - RS.CK_AMT) + (RS.JI_SUM - RS.JI_AMT)) AS SALE_VAT			/* 매출부가세 = 매출부가세 - (각종 수수료금액 제외) */
					, RS.SALE_SUM - (RS.CK_SUM + RS.JI_SUM) AS SALE_SUM		/* 매출합계 = 매출합계 - (각종 수수료금액 제외) */
					, RS.TRANS_AMOUNT
					, RS.TRANS_VAT
					, RS.TRANS_SUM
					, RS.CK_AMT
					, (RS.CK_SUM - RS.CK_AMT) AS CK_VAT
					, RS.CK_SUM
					, RS.JI_AMT
					, (RS.JI_SUM - RS.JI_AMT) AS JI_VAT
					, RS.JI_SUM
					, RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT) - RS.TRANS_AMOUNT AS MARGIN_AMT 
	            	--, CASE WHEN RS.TRANS_AMOUNT = 0 THEN 0 
	            	--  WHEN RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT) = 0 THEN 0
	              	--  ELSE ROUND(((RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT) - RS.TRANS_AMOUNT) / (RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT))) * 100, 2) END AS MARGIN_RATIO
	            	, CASE  
	            	  WHEN RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT) = 0 THEN 0
	              	  ELSE ROUND(((RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT) - RS.TRANS_AMOUNT) / (RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT))) * 100, 2) END AS MARGIN_RATIO
					, RS.MD_NAME
                	, RS.VENDOR_NAME
                    , ROUND(RS.INCOME_PRICE) AS INCOME_PRICE
                    , RS.INCOME_SUM
                    , (RS.TRANS_AMOUNT - RS.INCOME_SUM) AS INCOME_TRANS_SUM
                    , ((RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT)) - (RS.TRANS_AMOUNT - RS.INCOME_SUM)) AS INCOME_MARGIN_AMT
                    , ROUND(NVL(((RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT)) - (RS.TRANS_AMOUNT - RS.INCOME_SUM))/DECODE((RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT)), 0, NULL, (RS.SALE_AMOUNT - (RS.CK_AMT +  RS.JI_AMT))), 0) * 100, 2) AS INCOME_MARGIN_RATIO
			FROM
					(
						SELECT
		    					  '(' || TO_CHAR(X.DEPT_ID) || ')' || X.CC_NM AS CC_NM
	             				, X.CLASS_NAME2 ||'(' || X.ITEM_CLASS2 || ')' AS CLASS_M
	              				, X.CLASS_NAME3 ||'(' || X.ITEM_CLASS3 || ')' AS CLASS_S
	              				, X.CLASS_NAME4 ||'(' || X.ITEM_CLASS4 || ')' AS CLASS_D
		      					, X.ITEM_CODE
		      					, X.ITEM_NAME
		      					, X.ITEM_SIZE
		      					, X.TRANS_UOM
		      					, AVG(X.TRANS_MPRICE) AS TRANS_MPRICE
		      					, AVG(X.SALE_PRICE) AS SALE_PRICE
								<#if schChk3?has_content>
				        		, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_AMOUNT 
								, SUM(
									CASE WHEN X.FLAG = '1' THEN
										DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0.1,0))
									ELSE
										-- 보정자재는 장려율 적용안됨
										DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
									END
									) AS SALE_VAT
								, SUM(
									CASE WHEN X.FLAG = '1' THEN
										DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))
									ELSE
										-- 보정자재는 장려율 적용안됨
			 							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT
									END
									) AS SALE_SUM
								<#else>
								, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_AMOUNT 
			 					, SUM(
			 						CASE WHEN X.FLAG = '1' THEN
			 							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
			 						ELSE
										DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
			 						END
			 					  ) AS SALE_VAT 
			 					, SUM(
			 						CASE WHEN X.FLAG = '1' THEN
			 							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
			 						ELSE
			 							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT
			 						END
			 					) AS SALE_SUM 
								</#if>
		      					, SUM(ROUND(X.TRANS_MAMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS TRANS_AMOUNT
	             				--, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))           AS TRANS_VAT   /* 수불 부가세 필드 이용 */
	             				--, SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))  AS TRANS_SUM
	             				--매입부가세 계산방식 오류 수정 20180413 김호석 부가세 절대값(매입부가세단가)*수량
			             		, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) )           AS TRANS_VAT
			             		, SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))  AS TRANS_SUM				      			
		      					-- CHECK 
		      					, SUM(ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS CK_AMT
		      					, SUM(ROUND(X.CK_AMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT / 10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)) AS CK_SUM
		      					, SUM(ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS JI_AMT
		      					, SUM(ROUND(X.JI_AMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT / 10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)) AS JI_SUM
						        , SUM(X.TRANS_QTY) TRANS_QTY
						        , X.MD_NAME
                				, X.VENDOR_NAME
                				, AVG(X.INCOME_PRICE) AS INCOME_PRICE
		          				, SUM(ROUND(X.INCOME_SUM)) AS INCOME_SUM
		      		FROM
								(
									SELECT
										 T.TRANS_DATE
			     						, T.ITEM_CODE
			      						, T.ITEM_NAME
			      						, T.ITEM_SIZE
			      						, T.TRANS_UOM
			      						, T.TRANS_TYPE
			      						, T.TRANS_QTY
			      						, T.TRANS_MPRICE
			      						, T.TRANS_MAMOUNT
			      						, T.TRANS_MVAT
			      						, T.SALE_PRICE
			      						, T.SALE_AMOUNT
			      						, T.SALE_VAT
			      						, T.TAX_CODE
			      						, T.FLAG
			     		 				, T.DEPT_ID
			      						, T.CC_NM
			      						, T.ITEM_CLASS2
			      						, T.ITEM_CLASS3
			      						, T.ITEM_CLASS4
			      						, T.CLASS_NAME2
			      						, T.CLASS_NAME3
			      						, T.CLASS_NAME4
			     			    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
								  		  ELSE
				    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
													CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
	                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
				    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
				    							END 
								  		   END AS CK_AMOUNT
			      						, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
								  		  ELSE
				    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
														CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
	                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
				    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
				    					  			END 
								  		  END AS JI_AMOUNT
									 	, DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE	
									 	, T.MD_NAME
                				 		, T.VENDOR_NAME		
                				 		, T.INCOME_PRICE
										, T.INCOME_SUM
								FROM
										(
											SELECT
											<#if schMainUpjang?has_content || schUpjang?has_content>
												/*+ PUSH_PRED(A) */
											</#if>
												<#if schGubun=="1">
										 		  A.TRANS_DATE
				      							<#else>
										  		  A.MG_DATE AS TRANS_DATE
	           									</#if>
					      						, A.ITEM_CODE
					      						, A.ITEM_NAME
					      						, A.ITEM_SIZE
					      						, A.TRANS_UOM
					      						, A.TRANS_TYPE
					      						, A.TRANS_QTY
												<#if schPrice=="2">
					      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
					      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
					      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
				      							<#else>
					      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
					      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
					      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
					      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
	           									</#if>
	                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
	                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
	                      						, NVL(A.SALE_VAT, 0) AS SALE_VAT
					      						, A.TAX_CODE
					      						, A.FLAG
					      						, B2.DEPT_ID
					      						, D.CC_NM
					      						, M.ITEM_CLASS2
					      						, M.ITEM_CLASS3
					      						, M.ITEM_CLASS4
					      						, (SELECT CLASS_NAME FROM HLDC_PO_ITEM_CLASS WHERE CLASS_TYPE = 'M' AND CLASS_CODE = M.ITEM_CLASS2) AS CLASS_NAME2
					     						, (SELECT CLASS_NAME FROM HLDC_PO_ITEM_CLASS WHERE CLASS_TYPE = 'S' AND CLASS_CODE = M.ITEM_CLASS3) AS CLASS_NAME3
	         									, (SELECT CLASS_NAME FROM HLDC_PO_ITEM_CLASS WHERE CLASS_TYPE = 'D' AND CLASS_CODE = M.ITEM_CLASS4) AS CLASS_NAME4
	         									/*검색 조건 : CK물류비제외*/
	         									<#if schChk1?has_content>
					      						, CASE WHEN A.TAX_CODE = '100' THEN
														(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
														 ELSE NVL(C2.FM_SALE_RATE, 0)
														END)
										 		ELSE 
														(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
											 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
														END)
										 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
					      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
					      						<#else>
					      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
					      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
												</#if>
	         									/*검색 조건 : 지급수수료제외*/
	         									<#if schChk2?has_content>
					      						, CASE WHEN A.TAX_CODE = '100' THEN
														(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
														ELSE NVL(J2.FM_SALE_RATE, 0)
														END)
										  		 ELSE 
														(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
											 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
														END)
										  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
					     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
					      						<#else>
					      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
					     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
												</#if>
	         									/*검색 조건 : 장려금제외*/
	         									<#if schChk3?has_content>
					      			    		, CASE WHEN A.TAX_CODE = '100' THEN
														(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
											 			ELSE NVL(S2.FM_SALE_RATE, 0)
											 		END)
										  		 ELSE 
														(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
														ELSE NVL(S2.FM_NOSALE_RATE, 0)
														END)
												 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
					     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
					      					<#else>
									 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
					     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
											</#if>
	 								, F.MD_NAME
                					, F.VENDOR_NAME
                					, (NVL(INFO.DELY_DS_RATE,0)+NVL(INFO.DELY_TC_RATE,0)+NVL(INFO.DELY_DC_RATE,0)+NVL(INFO.DELY_GS_RATE,0)+NVL(INFO.DELY_BH_RATE,0)+NVL(INFO.DELY_PK_RATE,0))*NVL(INFO.ITEM_PRICE,0)/100 AS INCOME_PRICE --매입차감단가
                                    , (A.TRANS_QTY * (NVL(INFO.DELY_DS_RATE,0)+NVL(INFO.DELY_TC_RATE,0)+NVL(INFO.DELY_DC_RATE,0)+NVL(INFO.DELY_GS_RATE,0)+NVL(INFO.DELY_BH_RATE,0)+NVL(INFO.DELY_PK_RATE,0))*NVL(INFO.ITEM_PRICE,0)/100) AS INCOME_SUM
	 								<#if schGubun=="1">
<#if newGubun=="Y">
	 								FROM FMS_TRANSACTION_ALL_V A
<#else>
	 								FROM FMS_TRANSACTION_V2 A 
</#if>
	 								<#else>
<#if newGubun=="Y">
	 								FROM FMS_TRANSACTION_ALL_V A
<#else>
	 								FROM FMS_TRANSACTION_V A
</#if>
	 								</#if>
	                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
	             																									/*검색 조건 : 본사*/
	           																										<#if schMainUpjang?has_content>
	           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
	           																										</#if>
	            																									 /*검색 조건 : 사업장*/
	           																										<#if schUpjang?has_content>
	           																										AND B2.UPJANG = :schUpjang
	           																										</#if>
																													 AND A.TRANS_UPJANG = B2.UPJANG
																					INNER JOIN FMS_UPJANG Z ON 1 = 1
	            																									 /*검색 조건 : 영업담당*/
	           																										<#if schSabun?has_content>
	           																		  								 AND Z.PART_SALES_SABUN = :schSabun
																													</#if>
	            																									 /*검색 조건 : 세부직군*/
	           																										<#if schBizDetail?has_content>
	           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																													</#if>
																					  								 AND A.TRANS_UPJANG = Z.UPJANG
																					INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
	           																												/*검색 조건 : 관리부서(팀)*/
	           																												<#if schTm?has_content>
	           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
	           																												</#if>
	           																												/*검색 조건 : CC */
	           																												<#if schCc?has_content>
	           																												AND D.CC_CD = :schCc
	           																												</#if>
																															AND  B2.DEPT_ID = D.DEPT_ID
	                                        										LEFT JOIN HLDC_PO_ITEM_MST M ON A.ITEM_CODE = M.ITEM_CODE
<#if newGubun!="Y">
	                                                               																 AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
</#if>
				                                 								LEFT JOIN EPROCUSR.ESPINFO INFO ON INFO.SYS_ID = '100'
														      															AND INFO.COMP_CD = 'HFC'
														                                      							AND INFO.ITEM_CD = A.ITEM_CODE
														                                      							AND INFO.PURC_OPER_ORG_SN IN (SELECT  WHC.OPER_ORG_SN_PURC FROM EPROCUSR.ESPSWHC WHC WHERE  WHC.SYS_ID='100' AND WHC.COMP_CD = 'HFC' AND WHC.WH_CNTR_CD = A.CENTER_CODE)
														                                      							AND :schFromDate BETWEEN INFO.APPLY_SD AND INFO.APPLY_ED
														                                      							AND INFO.STS <> 'D'
	                                         											-- 추가 : 특약사항관련 : 중분류, 소분류
	         																	<#if schChk1?has_content>
																				LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG
																														AND C1.SUBINV_CODE = A.SUBINV_CODE
																														AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																														AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																														AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																				LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG
																														AND C2.SUBINV_CODE = A.SUBINV_CODE
																														AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																														AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																														AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																				</#if>
	         																	<#if schChk2?has_content>
																				LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG
																														AND J1.SUBINV_CODE = A.SUBINV_CODE
																														AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																														AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																														AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																				LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG
																														AND J2.SUBINV_CODE = A.SUBINV_CODE
																														AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																														AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																														AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																				</#if>
	         																	<#if schChk3?has_content>
																				LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG
																														AND S1.SUBINV_CODE = A.SUBINV_CODE
																														AND S1.CASH_CODE = '003'			/* 장려금(003) */
																														AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																														AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																				LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG
																														AND S2.SUBINV_CODE = A.SUBINV_CODE
																														AND S2.CASH_CODE = '003'			/* 장려금(003) */
																														AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																														AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																				</#if>
																				<#if schCustYn == "Y">
																					LEFT JOIN (
																							  	SELECT A.ITEM_CD, C.WH_CNTR_CD, B.HFC_CHR_ID, EPROCUSR.FC_GET_NAME('100', 'ko_KR', 'HFC', 'USER', B.HFC_CHR_ID, '','','','','') AS MD_NAME
																			          					, EPROCUSR.FC_GET_NAME('100', 'ko_KR', 'HFC', 'VENDOR', B.ERP_VD_CD, '','','','','') AS VENDOR_NAME
																			  							FROM EPROCUSR.ESPINFO A
																				    						LEFT OUTER JOIN EPROCUSR.ESMVDOG B
																										    ON A.SYS_ID = B.SYS_ID
																										    AND A.COMP_CD = B.COMP_CD
																										    AND A.VD_SN = B.VD_SN
																										    AND B.OPER_ORG_SN = '414' --FC부문만
																										    INNER JOIN EPROCUSR.ESPSWHC C
																										    ON A.SYS_ID = C.SYS_ID
																										    AND A.COMP_CD = C.COMP_CD
																										    AND A.PURC_OPER_ORG_SN = C.OPER_ORG_SN_PURC
																			 							WHERE A.SYS_ID = '100'
																										   AND A.COMP_CD = 'HFC'
																										   AND :schFromDate BETWEEN A.APPLY_SD AND A.APPLY_ED  --계약 기간
																										   AND A.STS <> 'D'
<#if newGubun!="Y">
																										   AND SUBSTR(A.ITEM_CD, 0 , 1) = 'F' --식자재만
</#if>
																										   
																										   <#if schCenter?has_content>
																			           							<#if schCenter != '*'>
																			           							AND C.WH_CNTR_CD = :schCenter
																			           							</#if>
																			           						</#if>
																										   --AND C.WH_CNTR_CD = '300001'
																			   					) F ON F.ITEM_CD = A.ITEM_CODE
																			   					AND F.WH_CNTR_CD = A.CENTER_CODE
																					<#else>
																					LEFT JOIN ( SELECT '' AS ITEM_CD, '' AS MD_NAME, '' AS VENDOR_NAME FROM DUAL ) F ON F.ITEM_CD = A.ITEM_CODE
																					</#if>
																					
<#if newGubun=="Y">
											WHERE ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
											WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
											AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
	           								/*검색 조건 : 기간*/
											<#if schGubun=="1">
	           								AND A.TRANS_DATE2 BETWEEN :schFromDate AND :schToDate
				      						<#else>
	           								AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
	           							  </#if>
	           								/*검색 조건 : 센터*/     
	           								<#if schCenter?has_content>
	           									<#if schCenter != '*'>
	           									AND A.CENTER_CODE = :schCenter
	           									</#if>
	           								</#if>
	             							/*검색 조건 : 납품업체*/
	           								<#if schCustCd?has_content>
	           								AND A.CUSTCD = :schCustCd
	           								</#if>
									) T	
						) X		
		 				GROUP BY '(' || TO_CHAR(X.DEPT_ID) || ')' || X.CC_NM,  X.CLASS_NAME2 ||'(' || X.ITEM_CLASS2 || ')' , X.CLASS_NAME3 ||'(' || X.ITEM_CLASS3 || ')', X.CLASS_NAME4 ||'(' || X.ITEM_CLASS4 || ')', X.ITEM_CODE, X.ITEM_NAME, X.ITEM_SIZE, X.TRANS_UOM, X.MD_NAME, X.VENDOR_NAME
					) RS
			</#if>
		]]></statement>


	<!-- 자재분류별집계 목록을 조회한다. -->
	<statement name="selectListTab3_old" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab3_old */
		<![CDATA[
		SELECT '('||TO_CHAR(B2.DEPT_ID)||')'||D.CC_NM AS CC_NM
		     , Z.UPJANGNM_DISP,
   		       SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F10' THEN TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) A0101,             --양곡
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 IN ('F11','F12') THEN TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) A0102,    --야채 
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F13' THEN TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) A0104,             --축산
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F14' THEN TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) A0103,             --수산               
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F17' THEN TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) A0105,             --김치
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24') THEN TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) A0107, --공산
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F27' THEN TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) A0108,             --소모품
               SUM(CEIL(CASE WHEN SUBSTR(A.ITEM_CODE, 1, 1) = '7' THEN TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) A0109,       --보정분
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F10' THEN SALE_AMOUNT + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)  ELSE 0 END)) B0101,           --양곡
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 IN ('F11','F12') THEN SALE_AMOUNT + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)  ELSE 0 END)) B0102,  --야채
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F13' THEN SALE_AMOUNT + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)  ELSE 0 END)) B0104,           --수산
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F14' THEN SALE_AMOUNT + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)  ELSE 0 END)) B0103,           --축산
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F17' THEN SALE_AMOUNT + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)  ELSE 0 END)) B0105,           --김치
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24') THEN CEIL(SALE_AMOUNT) + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)  ELSE 0 END)) B0107, --공산
               SUM(CEIL(CASE WHEN V.ITEM_CLASS2 = 'F27' THEN SALE_AMOUNT + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)  ELSE 0 END)) B0108,            --소모품
               SUM(CEIL(CASE WHEN SUBSTR(A.ITEM_CODE, 1, 1) = '7' THEN SALE_AMOUNT + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)  ELSE 0 END)) B0109            --보정분
<#if newGubun=="Y">
		  FROM FMS_TRANSACTION_ALL_V A, ST_UPJANG B2, HLDC_SC_DEPT_V D, HLDC_PO_ITEM_MST V
<#else>
		  FROM FMS_TRANSACTION_V A, ST_UPJANG B2, HLDC_SC_DEPT_V D, HLDC_PO_ITEM_MST V
</#if>
		     , FMS_UPJANG Y, FMS_UPJANG Z
		 WHERE 1 = 1
<#if newGubun=="Y">
		   AND ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
		   AND SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
           AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		   /*검색 조건 : 기간*/
           AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
           /*검색 조건 : 관리부서(팀)*/
           <#if schTm?has_content>
           AND D.TM_CD = :schTm
           </#if>
           /*검색 조건 : 센터*/     
           <#if schCenter?has_content>
           AND A.CENTER_CODE = :schCenter
           </#if>
            /*검색 조건 : 본사*/
           <#if schMainUpjang?has_content>
           AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           </#if>       
             /*검색 조건 : 사업장*/       
           <#if schUpjang?has_content>
           AND B2.UPJANG = :schUpjang
           </#if>
             /*검색 조건 : 납품업체*/
           <#if schCustCd?has_content>
           AND A.CUSTCD = :schCustCd
           </#if>
           /*
           AND EXISTS (
           					  SELECT 1
           					  FROM FMS_SALES
                       		  WHERE UPJANG = A.TRANS_UPJANG
                       		  AND   SALE_DATE = A.TRANS_DATE
                       		  AND   SUBINV_CODE = A.SUBINV_CODE
                       		  AND   TRANS_YN = 'Y'
           					)
           	*/				
		   AND A.TRANS_UPJANG = B2.UPJANG
		   AND A.ITEM_CODE = V.ITEM_CODE(+)
		   AND B2.DEPT_ID = D.DEPT_ID
		   AND A.TRANS_UPJANG = Y.UPJANG
		   AND Y.MAIN_UPJANG = Z.UPJANG
		 GROUP BY '('||TO_CHAR(B2.DEPT_ID)||')'||D.CC_NM, Z.UPJANGNM_DISP
		
		]]>
	</statement>


	<!-- 자재분류별집계 목록을 조회한다. -->
	<statement name="selectListTab3" type="select"><![CDATA[		
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab3 */
		--마감여부에 따라 집계 또는 실시간 검색 추가 20170824 김호석 
		<#if mCloseYn=="Y">
		
			SELECT
			      X.CC_NM
			    , X.UPJANG
			    , X.UPJANGNM AS UPJANGNM_DISP
             <#if schPrice=="2">  
			    -- 매입금액(공급가) 시작
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN X.TRANS_SUM_UNIT ELSE 0 END)) AS A0101																	--양곡
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN X.TRANS_SUM_UNIT ELSE 0 END)) AS A0102															--야채
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN X.TRANS_SUM_UNIT ELSE 0 END)) AS A0104																	--축산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN X.TRANS_SUM_UNIT ELSE 0 END)) AS A0103																	--수산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17'  THEN X.TRANS_SUM_UNIT ELSE 0 END)) AS A0105																	--김치
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99')
			    			 THEN X.TRANS_SUM_UNIT ELSE 0 END)) AS A0107																																			--공산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN X.TRANS_SUM_UNIT ELSE 0 END)) AS A0108																	--소모품
			    , SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN X.TRANS_SUM_UNIT ELSE 0 END)) AS A0109															--보정분
			    -- 매입금액(공급가) 끝        
             <#else>
			    -- 매입금액(공급가) 시작
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN X.TRANS_AMOUNT ELSE 0 END)) AS A0101																	--양곡
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN X.TRANS_AMOUNT ELSE 0 END)) AS A0102															--야채
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN X.TRANS_AMOUNT ELSE 0 END)) AS A0104																	--축산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN X.TRANS_AMOUNT ELSE 0 END)) AS A0103																	--수산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17'  THEN X.TRANS_AMOUNT ELSE 0 END)) AS A0105																	--김치
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99')
			    			 THEN X.TRANS_AMOUNT ELSE 0 END)) AS A0107																																			--공산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN X.TRANS_AMOUNT ELSE 0 END)) AS A0108																	--소모품
			    , SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN X.TRANS_AMOUNT ELSE 0 END)) AS A0109															--보정분
			    -- 매입금액(공급가) 끝
             </#if>					

			    -- 매출금액(공급가) 시작
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN X.SALE_AMOUNT ELSE 0 END)) AS B0101																	--양곡
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN X.SALE_AMOUNT ELSE 0 END)) AS B0102															--야채
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN X.SALE_AMOUNT ELSE 0 END)) AS B0104																	--축산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN X.SALE_AMOUNT ELSE 0 END)) AS B0103																	--수산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17'  THEN X.SALE_AMOUNT ELSE 0 END)) AS B0105																	--김치
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99')
			    			 THEN X.SALE_AMOUNT ELSE 0 END)) AS B0107																																				--공산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN X.SALE_AMOUNT ELSE 0 END)) AS B0108																	--소모품
			    , SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN X.SALE_AMOUNT ELSE 0 END)) AS B0109															--보정분
			    -- 매출금액(공급가) 끝
			    -- CK물류비(공급가) 시작
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN X.CK_AMT ELSE 0 END)) AS CK_A0101																		--양곡
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN X.CK_AMT ELSE 0 END)) AS CK_A0102																--야채
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN X.CK_AMT ELSE 0 END)) AS CK_A0104																		--축산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN X.CK_AMT ELSE 0 END)) AS CK_A0103																		--수산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17'  THEN X.CK_AMT ELSE 0 END)) AS CK_A0105																		--김치
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99')
			    			 THEN X.CK_AMT ELSE 0 END)) AS CK_A0107																																					--공산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN X.CK_AMT ELSE 0 END)) AS CK_A0108																		--소모품
			    , SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN X.CK_AMT ELSE 0 END)) AS CK_A0109															--보정분
			    -- CK물류비(공급가) 끝
			    -- 지급수수료(공급가) 시작
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN X.JI_AMT ELSE 0 END)) AS JI_A0101																		--양곡
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN X.JI_AMT ELSE 0 END)) AS JI_A0102																--야채
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN X.JI_AMT ELSE 0 END)) AS JI_A0104																		--축산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN X.JI_AMT ELSE 0 END)) AS JI_A0103																		--수산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17'  THEN X.JI_AMT ELSE 0 END)) AS JI_A0105																		--김치
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99')
			    			 THEN X.JI_AMT ELSE 0 END)) AS JI_A0107																																					--공산
			    , SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN X.JI_AMT ELSE 0 END)) AS JI_A0108																		--소모품
			    , SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN X.JI_AMT ELSE 0 END)) AS JI_A0109															--보정분
			    -- 지급수수료(공급가) 끝
				
			FROM (
			    SELECT
			
			    		'(' || TO_CHAR(RS.DEPT_ID) || ')' || D.CC_NM AS CC_NM
			    		<#if schView == '1'>	
							/* 본사별 집계 */
		     				 , RS.MAIN_UPJANG AS UPJANG
		      				, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = RS.MAIN_UPJANG) AS UPJANGNM
		      				<#else>
							/* 업장별 집계 */		      				
				  			, RS.UPJANG
				      		, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = RS.UPJANG) AS UPJANGNM
           				</#if>
		        		, M.ITEM_CLASS2
			        	, M.ITEM_CLASS3
						, RS.ITEM_CODE
						, RS.ITEM_NAME
						, RS.ITEM_SIZE
						, RS.TRANS_UOM
				        , ROUND(RS.TRANS_MPRICE) AS TRANS_MPRICE  													/* 매입단가 */
				        , ROUND(RS.SALE_PRICE) AS SALE_PRICE   														/* 판매단가 */
				        , /* 장려금 제외 여부     */ <#if schChk3?has_content>RS.SALE_TOT_S <#else> RS.SALE_TOT </#if>
					      /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>RS.CK_SALE_NOTAX + RS.CK_SALE_TAX <#else> 0 </#if>
	   					  /* 지급수수료 제외 여부 */    + <#if schChk2?has_content>RS.JI_SALE_TAX + RS.JI_SALE_NOTAX<#else> 0 </#if> ) 
						  AS SALE_AMOUNT																		    /* 매출금액 = 매출금액 - (각종 수수료금액 제외) */
					    , /* 장려금 제외 여부     */ <#if schChk3?has_content> RS.SALE_VAT_S <#else> RS.SALE_VAT </#if>
					      /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>RS.CK_SALE_VAT <#else> 0 </#if>
	  					  /* 지급수수료 제외 여부 */    + <#if schChk2?has_content>RS.JI_SALE_VAT <#else> 0 </#if>)
						  AS SALE_VAT																			    /* 매출부가세 = 매출부가세 - (각종 수수료금액 제외) */
					    , /* 장려금 제외 여부     */ <#if schChk3?has_content> RS.SALE_ALL_S <#else> RS.SALE_ALL </#if>
	  				      /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>RS.CK_SALE_NOTAX + RS.CK_SALE_TAX + RS.CK_SALE_VAT <#else> 0 </#if>
						  /* 지급수수료 제외 여부 */    + <#if schChk2?has_content>RS.JI_SALE_TAX + RS.JI_SALE_NOTAX +RS.JI_SALE_VAT <#else> 0 </#if>) 
						  AS SALE_SUM		  																	    /* 매출합계 = 매출합계 - (각종 수수료금액 제외) */
			        	, RS.TRANS_SUM AS TRANS_AMOUNT																/* 매입액 공급가 */
						, RS.TRANS_VAT																				/* 매입액 부가세 */
						, RS.TRANS_TOT AS TRANS_SUM																	/* 매입액 합계 */
						, (RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) AS CK_AMT												/* CK물류비 제외 - 공급가 */
					  	, RS.CK_SALE_VAT AS CK_VAT																	/* CK물류비 제외 - 부가세 */
						, (RS.CK_SALE_NOTAX + RS.CK_SALE_TAX + RS.CK_SALE_VAT) AS CK_SUM							/* CK물류비 제외 - 합계 */
						, (RS.JI_SALE_NOTAX + RS.JI_SALE_TAX) AS JI_AMT												/* 지급수수료 제외 - 공급가 */
						, RS.JI_SALE_VAT AS JI_VAT																	/* 지급수수료 제외 - 부가세 */
						, (RS.JI_SALE_NOTAX + RS.JI_SALE_TAX + RS.JI_SALE_VAT) AS JI_SUM							/* 지급수수료 제외 - 합계 */
						, RS.MARGIN_SUM AS MARGIN_AMT																/* 이익액 */
			        	, CASE
						WHEN /* 장려금 제외 여부     */ <#if schChk3?has_content>RS.SALE_TOT_S <#else> RS.SALE_TOT </#if>
					    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>RS.CK_SALE_NOTAX + RS.CK_SALE_TAX <#else> 0 </#if>
	   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>RS.JI_SALE_TAX + RS.JI_SALE_NOTAX<#else> 0 </#if> )  = 0 THEN 0
						  ELSE ROUND(((/* 장려금 제외 여부     */ <#if schChk3?has_content>RS.SALE_TOT_S <#else> RS.SALE_TOT </#if>
					    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>RS.CK_SALE_NOTAX + RS.CK_SALE_TAX <#else> 0 </#if>
	   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>RS.JI_SALE_TAX + RS.JI_SALE_NOTAX<#else> 0 </#if> )  - RS.TRANS_SUM)
						   / (/* 장려금 제외 여부     */ <#if schChk3?has_content>RS.SALE_TOT_S <#else> RS.SALE_TOT </#if>
					    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>RS.CK_SALE_NOTAX + RS.CK_SALE_TAX <#else> 0 </#if>
	   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>RS.JI_SALE_TAX + RS.JI_SALE_NOTAX<#else> 0 </#if> ) )) * 100, 2) END AS MARGIN_RATIO  /* 이익율 */
			            , TRANS_SUM_UNIT
			            
					FROM FMS_BUY_SALE_SUM RS
							INNER JOIN FMS_UPJANG Z ON 1 = 1
									 /*검색 조건 : 영업담당*/
									<#if schSabun?has_content>
									AND Z.PART_SALES_SABUN = :schSabun
									</#if>
									AND RS.UPJANG = Z.UPJANG
							INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
									/*검색 조건 : 관리부서(팀)*/
									<#if schTm?has_content>
									AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
									</#if>
									/*검색 조건 : CC */
									<#if schCc?has_content>
									AND D.CC_CD = :schCc
									</#if>
									AND  RS.DEPT_ID = D.DEPT_ID	     
					      	LEFT OUTER JOIN HLDC_PO_ITEM_MST M ON RS.ITEM_CODE = M.ITEM_CODE
			      
			        WHERE 1=1
			        	<#if schMainUpjang?has_content>
							AND RS.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
						</#if>
						 /*검색 조건 : 사업장*/
						<#if schUpjang?has_content>
							AND RS.UPJANG = :schUpjang
						</#if>
						/*검색 조건 : 기간*/
						<#if schGubun=="1">
						AND RS.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate
						<#else>
						AND RS.MG_DATE BETWEEN :schFromDate AND :schToDate
						</#if>
						/*검색 조건 : 센터*/     
						<#if schCenter?has_content>
							<#if schCenter != '*'>
							AND RS.CENTER_CODE = :schCenter
							</#if>
						</#if>
						/*검색 조건 : 납품업체*/
						<#if schCustCd?has_content>
						AND RS.CUSTCD = :schCustCd
						</#if>						
						/*검색 조건 : 세부직군*/
						<#if schBizDetail?has_content>
						AND RS.BIZ_DETAIL_MAIN = :schBizDetail
						</#if>
			) X
			GROUP BY  X.CC_NM
			        , X.UPJANG
			    	, X.UPJANGNM
			    	
													
		<#else>
		
				SELECT
		  			  RS.CC_NM
					, RS.UPJANG 
					, RS.UPJANGNM AS UPJANGNM_DISP
					, RS.A0101
					, RS.A0102
					, RS.A0104
					, RS.A0103
					, RS.A0105
					, RS.A0107
					, RS.A0108
					, RS.A0109
					, RS.B0101 - (RS.CK_A0101 + RS.JI_A0101) AS B0101
					, RS.B0102 - (RS.CK_A0102 + RS.JI_A0102) AS B0102
					, RS.B0104 - (RS.CK_A0104 + RS.JI_A0104) AS B0104
					, RS.B0103 - (RS.CK_A0103 + RS.JI_A0103) AS B0103
					, RS.B0105 - (RS.CK_A0105 + RS.JI_A0105) AS B0105
					, RS.B0107 - (RS.CK_A0107 + RS.JI_A0107) AS B0107
					, RS.B0108 - (RS.CK_A0108 + RS.JI_A0108) AS B0108
					, RS.B0109 - (RS.CK_A0109 + RS.JI_A0109) AS B0109
					, RS.CK_A0101
					, RS.CK_A0102
					, RS.CK_A0104
					, RS.CK_A0103
					, RS.CK_A0105
					, RS.CK_A0107
					, RS.CK_A0108
					, RS.CK_A0109
					, RS.JI_A0101
					, RS.JI_A0102
					, RS.JI_A0104
					, RS.JI_A0103
					, RS.JI_A0105
					, RS.JI_A0107
					, RS.JI_A0108
					, RS.JI_A0109
					--, RS.SE_A0101
					--, RS.SE_A0102
					--, RS.SE_A0104
					--, RS.SE_A0103
					--, RS.SE_A0105
					--, RS.SE_A0107
					--, RS.SE_A0108
					--, RS.SE_A0109
					
			FROM
					(
						SELECT
		    				  '(' || TO_CHAR(X.DEPT_ID) || ')' || X.CC_NM AS CC_NM
							<#if schView == '1'>	
							/* 본사별 집계 */
		     				 , X.MAIN_UPJANG AS UPJANG
		      				, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = X.MAIN_UPJANG) AS UPJANGNM
		      				<#else>
							/* 업장별 집계 */
		      				, X.UPJANG
		      				, X.UPJANGNM
	           				</#if>
	           				
		      				, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN X.TRANS_MAMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) ELSE 0 END)) A0101             --양곡
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN X.TRANS_MAMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) ELSE 0 END)) A0102    --야채 
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN X.TRANS_MAMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) ELSE 0 END)) A0104             --축산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN X.TRANS_MAMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) ELSE 0 END)) A0103             --수산               
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17' THEN X.TRANS_MAMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) ELSE 0 END)) A0105             --김치
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99') THEN X.TRANS_MAMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) ELSE 0 END)) A0107 --공산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN X.TRANS_MAMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) ELSE 0 END)) A0108             --소모품
	              			, SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN X.TRANS_MAMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) ELSE 0 END)) A0109       --보정분
							<#if schChk3?has_content>
							, SUM(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN (DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))) ELSE 0 END) AS B0101           --양곡
							, SUM(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN (DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))) ELSE 0 END) AS B0102  --야채
							, SUM(CASE WHEN  X.ITEM_CLASS2 = 'F13' THEN (DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))) ELSE 0 END) AS B0104           --수산
							, SUM(CASE WHEN  X.ITEM_CLASS2 = 'F14' THEN (DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))) ELSE 0 END) AS B0103           --축산
							, SUM(CASE WHEN  X.ITEM_CLASS2 = 'F17' THEN (DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))) ELSE 0 END) AS B0105           --김치
							, SUM(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99') THEN (DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))) ELSE 0 END) AS B0107 --공산
							, SUM(CASE WHEN  X.ITEM_CLASS2 = 'F27' THEN (DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))) ELSE 0 END) AS B0108            --소모품
							--, SUM(CASE WHEN  SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN (DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))) ELSE 0 END) AS B0109            --보정분
							-- 보정분 : 장려금적용 제외
	              			, SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT ELSE 0 END)) B0109            --보정분
							<#else>
							
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) ELSE 0 END)) B0101           --양곡
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) ELSE 0 END)) B0102  --야채
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) ELSE 0 END)) B0104           --수산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) ELSE 0 END)) B0103           --축산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17' THEN DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) ELSE 0 END)) B0105           --김치
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99') THEN DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) ELSE 0 END)) B0107 --공산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) ELSE 0 END)) B0108            --소모품
	              			, SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT ELSE 0 END)) B0109            --보정분
							</#if>
	              			
		      				, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN X.CK_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) CK_A0101             --양곡
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN X.CK_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) CK_A0102    --야채 
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN X.CK_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) CK_A0104             --축산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN X.CK_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) CK_A0103             --수산               
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17' THEN X.CK_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) CK_A0105             --김치
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99') THEN X.CK_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) CK_A0107 --공산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN X.CK_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) CK_A0108             --소모품
	              			, SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN X.CK_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) CK_A0109       --보정분
		
		      				, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN X.JI_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) JI_A0101             --양곡
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN X.JI_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) JI_A0102    --야채 
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN X.JI_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) JI_A0104             --축산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN X.JI_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) JI_A0103             --수산               
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17' THEN X.JI_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) JI_A0105             --김치
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99') THEN X.JI_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) JI_A0107 --공산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN X.JI_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) JI_A0108             --소모품
	              			, SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN X.JI_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) JI_A0109       --보정분
	
							/*
		      				, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F10' THEN X.SE_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.SE_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) SE_A0101             --양곡
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F11','F12') THEN X.SE_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.SE_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) SE_A0102    --야채 
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F13' THEN X.SE_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.SE_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) SE_A0104             --축산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F14' THEN X.SE_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.SE_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) SE_A0103             --수산               
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F17' THEN X.SE_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.SE_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) SE_A0105             --김치
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 IN ('F15','F16','F18','F19','F20','F21','F22','F23','F24','F25','F26','F28','F80','F90','F99') THEN X.SE_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.SE_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) SE_A0107 --공산
	              			, SUM(ROUND(CASE WHEN X.ITEM_CLASS2 = 'F27' THEN X.SE_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.SE_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) SE_A0108             --소모품
	              			, SUM(ROUND(CASE WHEN SUBSTR(X.ITEM_CODE, 1, 1) = '7' THEN X.SE_AMOUNT + DECODE(X.TAX_CODE,100,ROUND(X.SE_AMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) ELSE 0 END)) SE_A0109       --보정분
							*/        
							      			
					FROM
							(
								SELECT
									 T.TRANS_DATE
			      					, T.ITEM_CODE
			      					, T.ITEM_NAME
			      					, T.ITEM_SIZE
			      					, T.TRANS_UOM
			      					, T.TRANS_TYPE
			      					, T.TRANS_QTY
			     					, T.TRANS_MPRICE
			      					, T.TRANS_MAMOUNT
			      					, T.TRANS_MVAT
			      					, T.SALE_PRICE
			      					, T.SALE_AMOUNT
			      					, T.SALE_VAT
			      					--, T.TAX_CODE
			      					, '200' AS TAX_CODE -- (부가세 제외금액을 합산하기 위해 강제로 부가세 200으로 적용)  
			      					, T.DEPT_ID
			      					, T.CC_NM
			      					, T.UPJANGNM
			      					, T.ITEM_CLASS2
			      					, T.UPJANG
			      					, T.MAIN_UPJANG
			      					, T.FLAG
			      					, T.BIZ_DETAIL
			     			    	, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
								  	  ELSE
				    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
													CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
	                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
				    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
				    							END 
								  	   END AS CK_AMOUNT
			      					, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
								  	  ELSE
				    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
														CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
	                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
				    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
				    					  			END 
								  	  END AS JI_AMOUNT
								 	, DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE		
								 		
							FROM
									(
										SELECT
											<#if schMainUpjang?has_content || schUpjang?has_content>
												/*+ PUSH_PRED(A) */
											</#if>
												<#if schGubun=="1">
										 		 A.TRANS_DATE
				      							<#else>
										  		 A.MG_DATE AS TRANS_DATE
	           									</#if>
					      						, A.ITEM_CODE
					      						, A.ITEM_NAME
					      						, A.ITEM_SIZE
					      						, A.TRANS_UOM
					      						, A.TRANS_TYPE
					      						, A.TRANS_QTY
												<#if schPrice=="2">
					      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
					      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
					      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
				      							<#else>
					      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
					      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
					      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
					      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
	           									</#if>
	                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
	                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
	                      						, NVL(A.SALE_VAT, 0) AS SALE_VAT
					      						, A.TAX_CODE
					      						, A.FLAG
					      						, B2.DEPT_ID
					      						, D.CC_NM
					      						, B2.UPJANGNM
					      						, M.ITEM_CLASS2			-- 중분류기준
					      						, A.TRANS_UPJANG AS UPJANG
					      						, C.MAIN_UPJANG
					      						, C.BIZ_DETAIL
	         									/*검색 조건 : CK물류비제외*/
	         									<#if schChk1?has_content>
					      						, CASE WHEN A.TAX_CODE = '100' THEN
														(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
														 ELSE NVL(C2.FM_SALE_RATE, 0)
														END)
										 		ELSE 
														(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
											 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
														END)
										 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
					      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
					      						<#else>
					      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
					      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
												</#if>
	         									/*검색 조건 : 지급수수료제외*/
	         									<#if schChk2?has_content>
					      						, CASE WHEN A.TAX_CODE = '100' THEN
														(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
														ELSE NVL(J2.FM_SALE_RATE, 0)
														END)
										  		 ELSE 
														(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
											 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
														END)
										  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
					     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
					      						<#else>
					      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
					     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
												</#if>
	         									/*검색 조건 : 장려금제외*/
	         									<#if schChk3?has_content>
					      			    		, CASE WHEN A.TAX_CODE = '100' THEN
														(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
											 			ELSE NVL(S2.FM_SALE_RATE, 0)
											 		END)
										  		 ELSE 
														(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
														ELSE NVL(S2.FM_NOSALE_RATE, 0)
														END)
												 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
					     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
					      					<#else>
									 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
					     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
											</#if>
											
<#if newGubun=="Y">
	 								FROM FMS_TRANSACTION_ALL_V A
<#else>
	 								FROM FMS_TRANSACTION_V A
</#if>
	                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
	             																									/*검색 조건 : 본사*/
	           																										<#if schMainUpjang?has_content>
	           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
	           																										</#if>
	            																									 /*검색 조건 : 사업장*/
	           																										<#if schUpjang?has_content>
	           																										AND B2.UPJANG = :schUpjang
	           																										</#if>
																													 AND A.TRANS_UPJANG = B2.UPJANG
																					INNER JOIN FMS_UPJANG C ON 1 = 1
	            																									 /*검색 조건 : 영업담당*/
	           																										<#if schSabun?has_content>
	           																		  								 AND C.PART_SALES_SABUN = :schSabun
																													</#if>
	            																									 /*검색 조건 : 세부직군*/
	           																										<#if schBizDetail?has_content>
	           																		  								AND C.BIZ_DETAIL = :schBizDetail
																													</#if>
																													AND A.TRANS_UPJANG = C.UPJANG
																					INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
	           																												/*검색 조건 : 관리부서(팀)*/
	           																												<#if schTm?has_content>
	           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
	           																												</#if>
	           																												/*검색 조건 : CC */
	           																												<#if schCc?has_content>
	           																												AND D.CC_CD = :schCc
	           																												</#if>
																															AND  B2.DEPT_ID = D.DEPT_ID
	                                        										LEFT JOIN HLDC_PO_ITEM_MST M ON A.ITEM_CODE = M.ITEM_CODE
<#if newGubun!="Y">
	                                                               																 AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
</#if>
	
	                                         											-- 추가 : 특약사항관련 : 중분류, 소분류
	         																	<#if schChk1?has_content>
																				LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG
																														AND C1.SUBINV_CODE = A.SUBINV_CODE
																														AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																														AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																														AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																				LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG
																														AND C2.SUBINV_CODE = A.SUBINV_CODE
																														AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																														AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																														AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																				</#if>
	         																	<#if schChk2?has_content>
																				LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG
																														AND J1.SUBINV_CODE = A.SUBINV_CODE
																														AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																														AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																														AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																				LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG
																														AND J2.SUBINV_CODE = A.SUBINV_CODE
																														AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																														AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																														AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																				</#if>
	         																	<#if schChk3?has_content>
																				LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG
																														AND S1.SUBINV_CODE = A.SUBINV_CODE
																														AND S1.CASH_CODE = '003'			/* 장려금(003) */
																														AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																														AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																				LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG
																														AND S2.SUBINV_CODE = A.SUBINV_CODE
																														AND S2.CASH_CODE = '003'			/* 장려금(003) */
																														AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																														AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																				</#if>
<#if newGubun=="Y">
											WHERE ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
											WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
											AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
	           								/*검색 조건 : 기간*/
											<#if schGubun=="1">
	           								AND A.TRANS_DATE2 BETWEEN :schFromDate AND :schToDate
				      						<#else>
	           								AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
	           							  </#if>
	           								/*검색 조건 : 센터*/     
	           								<#if schCenter?has_content>
	           									<#if schCenter != '*'>
	           									AND A.CENTER_CODE = :schCenter
	           									</#if>
	           								</#if>
	             							/*검색 조건 : 납품업체*/
	           								<#if schCustCd?has_content>
	           								AND A.CUSTCD = :schCustCd
	           								</#if>
									) T	
						) X	
						<#if schView == '1'>	
						/* 본사별 집계 */
						GROUP BY '(' || TO_CHAR(X.DEPT_ID) || ')' || X.CC_NM, X.MAIN_UPJANG		
		      			<#else>
						/* 업장별 집계 */
		      			GROUP BY	'(' || TO_CHAR(X.DEPT_ID) || ')' || X.CC_NM, X.UPJANG, X.UPJANGNM
	       				</#if>
				) RS
			</#if>
		]]></statement>



	<!-- 일자별요약집계 목록을 조회한다. -->
	<statement name="selectListTab4_old" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab4_old */
		<![CDATA[
		SELECT TO_CHAR(TO_DATE(TRANS_DATE,'YYYYMMDD'),'YYYYMMDD') TRANS_DATE,
		
		       ROUND(SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',CEIL(TRANS_MAMOUNT),0)) +
		       SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',CEIL(TRANS_MAMOUNT),0))) TAXALL_1,
               
		       ROUND(SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',CEIL(TRANS_MAMOUNT),0))) NOTAX_1,
		       
               SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',ROUND(TRANS_MAMOUNT),0)) TAX_1,
		              
               SUM(DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0)) AS VAT_1,
		       
               ROUND(SUM(CEIL(TRANS_MAMOUNT) + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1))) AS ALL_1,
		       
               ROUND(SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',SALE_AMOUNT,0)) +
		       SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',SALE_AMOUNT,0))) TAXALL_2,
		      
			   ROUND(SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',SALE_AMOUNT,0))) NOTAX_2,
		       
               ROUND(SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',SALE_AMOUNT,0))) TAX_2,
		
               SUM(DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0)) AS VAT_2,

               SUM(CEIL(SALE_AMOUNT) + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)) AS ALL_2,
               
		       SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',ROUND(A.TRANS_QTY * A.SALE_PRICE),0)) +
		       SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',ROUND(A.TRANS_QTY * A.SALE_PRICE),0)) -
		       SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',TRANS_MAMOUNT,0)) -
		       SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',TRANS_MAMOUNT,0)) AS MARGIN_AMT,
		       ROUND(DECODE((SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',ROUND(A.TRANS_QTY * A.SALE_PRICE),0)) +
		                     SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',ROUND(A.TRANS_QTY * A.SALE_PRICE),0)))
		                   ,0
		                   ,0
		                   ,((SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',ROUND(A.TRANS_QTY * A.SALE_PRICE),0)) +
		                      SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',ROUND(A.TRANS_QTY * A.SALE_PRICE),0)) -
		                      SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',TRANS_MAMOUNT,0)) -
		                      SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',TRANS_MAMOUNT,0)))
		                     /
		                     (SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',ROUND(A.TRANS_QTY * A.SALE_PRICE),0)) +
		                      SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',ROUND(A.TRANS_QTY * A.SALE_PRICE),0))))
		                    *100
		                   )
		            ,1) AS MARGIN_RATE
<#if newGubun=="Y">
		  FROM FMS_TRANSACTION_ALL_V A, ST_UPJANG B2 , HLDC_SC_DEPT_V D
<#else>
		  FROM FMS_TRANSACTION_V A, ST_UPJANG B2 , HLDC_SC_DEPT_V D
</#if>
		 WHERE 1 = 1
<#if newGubun=="Y">
		   AND ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
		   AND SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
           AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		   /*검색 조건 : 기간*/
           AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
           /*검색 조건 : 관리부서(팀)*/
           <#if schTm?has_content>
           AND D.TM_CD = :schTm
           </#if>
           /*검색 조건 : 센터*/     
           <#if schCenter?has_content>
           AND A.CENTER_CODE = :schCenter
           </#if>
            /*검색 조건 : 본사*/
           <#if schMainUpjang?has_content>
           AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           </#if>       
             /*검색 조건 : 사업장*/       
           <#if schUpjang?has_content>
           AND B2.UPJANG = :schUpjang
           </#if>
             /*검색 조건 : 납품업체*/
           <#if schCustCd?has_content>
           AND A.CUSTCD = :schCustCd
           </#if>
           /*
           AND EXISTS (
           					  SELECT 1
           					  FROM FMS_SALES
                       		  WHERE UPJANG = A.TRANS_UPJANG
                       		  AND   SALE_DATE = A.TRANS_DATE
                       		  AND   SUBINV_CODE = A.SUBINV_CODE
                       		  AND   TRANS_YN = 'Y'
           					)
           */					
		   AND A.TRANS_UPJANG = B2.UPJANG
		   AND B2.DEPT_ID = D.DEPT_ID
		 GROUP BY TRANS_DATE
		 ORDER BY TRANS_DATE DESC
		]]>
	</statement>


	<!-- 일자별요약집계 목록을 조회한다. -->
	<statement name="selectListTab4" type="select"><![CDATA[
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab4 */
		--마감여부에 따라 집계 또는 실시간 검색 추가 20170824 김호석 
		<#if mCloseYn=="Y">
		
			SELECT
 				  X.TRANS_DATE
 				  
 			<#if schPrice=="2">	  
				, SUM(X.TRANS_SUM_UNIT) AS TAXALL_1															/* 매입(공급가) */
				, SUM(DECODE(X.TRANS_VAT_UNIT, 0, X.TRANS_SUM_UNIT, 0)) AS NOTAX_1									/* 매입(면세) */
				, SUM(DECODE(X.TRANS_VAT_UNIT, 0, 0, X.TRANS_SUM_UNIT)) AS TAX_1									/* 매입(과세) */
				, SUM(X.TRANS_VAT_UNIT) AS VAT_1																	/* 매입(부가세) */
				, SUM(X.TRANS_SUM_UNIT) AS ALL_1																	/* 매입(합계) */	
	        <#else>
				, SUM(X.TRANS_AMOUNT) AS TAXALL_1															/* 매입(공급가) */
				, SUM(DECODE(X.TRANS_VAT, 0, X.TRANS_AMOUNT, 0)) AS NOTAX_1									/* 매입(면세) */
				, SUM(DECODE(X.TRANS_VAT, 0, 0, X.TRANS_AMOUNT)) AS TAX_1									/* 매입(과세) */
				, SUM(X.TRANS_VAT) AS VAT_1																	/* 매입(부가세) */
				, SUM(X.TRANS_SUM) AS ALL_1																	/* 매입(합계) */	
            </#if>   
							
				
				
				, SUM(X.SALE_AMOUNT) AS TAXALL_2															/* 매출(공급가) */
				, SUM(X.SALE_NOTAX) AS NOTAX_2																/* 매출(면세) */
				, SUM(X.SALE_TAX) AS TAX_2																	/* 매출(과세) */
				, SUM(SALE_VAT) AS VAT_2																	/* 매출(부가세) */	
				, SUM(X.SALE_AMOUNT - (X.CK_AMT + X.JI_AMT) +
				  X.SALE_VAT - (X.CK_VAT + X.JI_VAT)) AS ALL_2												/* 매출(합계) - 매입(합계) */	
				  
				, SUM(X.CK_AMT) AS CK_TAXALL_2																/* CK물류비(공급가) */
				, SUM(X.CK_SALE_NOTAX) AS CK_NOTAX_2														/* CK물류비(면세) */
				, SUM(X.CK_SALE_TAX) AS CK_TAX_2															/* CK물류비(과세) */
				, SUM(X.CK_VAT) AS CK_VAT_2																	/* CK물류비(부가세) */
				, SUM(X.JI_AMT) AS JI_TAXALL_2																/* 지급수수료(공급가) */
				, SUM(X.JI_SALE_NOTAX) AS I_NOTAX_2															/* 지급수수료(면세) */
				, SUM(X.JI_SALE_TAX) AS JI_TAX_2															/* 지급수수료(과세) */
				, SUM(X.JI_VAT) AS JI_VAT_2																	/* 지급수수료(부가세) */
				
		        , SUM(X.UNIT_SUM) AS UNIT_SUM																/* 순수매입액 */
		        , SUM(X.SALE_AMOUNT - X.UNIT_SUM) AS MARGIN_SUM												/* 순수이익액 */
		        <#if schPrice=="2">	 
		        	, SUM(X.SALE_AMOUNT - (X.CK_AMT + X.JI_AMT)  - X.TRANS_SUM_UNIT) AS MARGIN_AMT 				/* 순수이익액(부가세별도) */
		            , CASE WHEN SUM(X.SALE_AMOUNT - (X.CK_AMT +  X.JI_AMT)) = 0 THEN 0
		            ELSE ROUND(( SUM((X.SALE_AMOUNT - (X.CK_AMT + X.JI_AMT)  - X.TRANS_SUM_UNIT)) / SUM((X.SALE_AMOUNT - (X.CK_AMT +  X.JI_AMT)))) * 100, 2) END AS MARGIN_RATIO /* 순수이익율 */
		        <#else>	
		        	, SUM(X.SALE_AMOUNT - (X.CK_AMT + X.JI_AMT)  - X.TRANS_AMOUNT) AS MARGIN_AMT 				/* 순수이익액(부가세별도) */
		            , CASE WHEN SUM(X.SALE_AMOUNT - (X.CK_AMT +  X.JI_AMT)) = 0 THEN 0
		              ELSE ROUND(( SUM((X.SALE_AMOUNT - (X.CK_AMT + X.JI_AMT)  - X.TRANS_AMOUNT)) / SUM((X.SALE_AMOUNT - (X.CK_AMT +  X.JI_AMT)))) * 100, 2) END AS MARGIN_RATIO /* 순수이익율 */
		        
		       	</#if>
			FROM (SELECT
		 			  <#if schGubun=="1">
					  	RS.TRANS_DATE
	    			  <#else>
					  	RS.MG_DATE AS TRANS_DATE
	      			  </#if>
					  , RS.ITEM_CODE
					  , RS.ITEM_NAME
					  , RS.ITEM_SIZE
					  , RS.TRANS_UOM
					  , ROUND(RS.TRANS_MPRICE) AS TRANS_PRICE
					  , ROUND(RS.SALE_PRICE) AS SALE_PRICE				  
					  , /* 장려금 제외 여부     */ <#if schChk3?has_content>RS.SALE_TOT_S <#else> RS.SALE_TOT </#if>
					    /* CK물류비 제외 여부   */ - ( <#if schChk1?has_content>RS.CK_SALE_NOTAX + RS.CK_SALE_TAX <#else> 0 </#if>
	   					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>RS.JI_SALE_TAX + RS.JI_SALE_NOTAX<#else> 0 </#if> ) 
						AS SALE_AMOUNT																		    					/* 매출금액 = 매출금액 - (각종 수수료금액 제외) */
					  , /* 장려금 제외 여부     */ <#if schChk3?has_content> RS.SALE_VAT_S <#else> RS.SALE_VAT </#if>
					    /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>RS.CK_SALE_VAT <#else> 0 </#if>
	  					/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>RS.JI_SALE_VAT <#else> 0 </#if>)
						AS SALE_VAT																			    					/* 매출부가세 = 매출부가세 - (각종 수수료금액 제외) */
					  , /* 장려금 제외 여부     */ <#if schChk3?has_content> RS.SALE_ALL_S <#else> RS.SALE_ALL </#if>
	  				    /* CK물류비 제외 여부   */ - (<#if schChk1?has_content>RS.CK_SALE_NOTAX + RS.CK_SALE_TAX + RS.CK_SALE_VAT <#else> 0 </#if>
						/* 지급수수료 제외 여부 */    + <#if schChk2?has_content>RS.JI_SALE_TAX + RS.JI_SALE_NOTAX +RS.JI_SALE_VAT <#else> 0 </#if>) 
						AS SALE_SUM		  																	    					/* 매출합계 = 매출합계 - (각종 수수료금액 제외) */
				      ,	RS.SALE_NOTAX - (RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX)  AS SALE_NOTAX										/* 매출금액(면세) */  
				      , RS.SALE_TAX - (RS.CK_SALE_TAX + RS.JI_SALE_TAX) AS SALE_TAX													/* 매출금액(과세) */
				      , RS.TRANS_SUM AS TRANS_AMOUNT																				/* 매입액 공급가 */
				      , RS.TRANS_VAT																								/* 매입액 부가세 */
				      , RS.TRANS_TOT AS TRANS_SUM																					/* 매입액 합계 */
				        , RS.TRANS_SUM_UNIT																				/* 매입액 공급가 */
				      , RS.TRANS_VAT_UNIT
				      <#if schChk1?has_content>
					      , (RS.CK_SALE_NOTAX + RS.CK_SALE_TAX) AS CK_AMT															/* CK물류비 제외 - 공급가 */
					      , RS.CK_SALE_NOTAX 																						/* CK물류비 제외 - 공급가(면세) */
					      , RS.CK_SALE_TAX																							/* CK물류비 제외 - 공급가(과세) */
					      , RS.CK_SALE_VAT AS CK_VAT																				/* CK물류비 제외 - 부가세 */
					      , (RS.CK_SALE_NOTAX + RS.CK_SALE_TAX + RS.CK_SALE_VAT) AS CK_SUM											/* CK물류비 제외 - 합계 */
				      <#else>
				      	  , 0 AS CK_AMT																								/* CK물류비 제외 - 공급가 */
					      , 0 AS CK_SALE_NOTAX																						/* CK물류비 제외 - 공급가(면세) */
					      , 0 AS CK_SALE_TAX																						/* CK물류비 제외 - 공급가(과세) */
					      , 0 AS CK_VAT																								/* CK물류비 제외 - 부가세 */
					      , 0 AS CK_SUM																								/* CK물류비 제외 - 합계 */
				      </#if>
				      <#if schChk2?has_content>
					      , (RS.JI_SALE_NOTAX + RS.JI_SALE_TAX)  AS JI_AMT															/* 지급수수료 제외 - 공급가 */
					      , RS.JI_SALE_NOTAX 																						/* 지급수수료 제외 - 공급가(면세) */
					      , RS.JI_SALE_TAX 																							/* 지급수수료 제외 - 공급가(과세) */
					      , RS.JI_SALE_VAT AS JI_VAT																				/* 지급수수료 제외 - 부가세 */
					      , (RS.JI_SALE_NOTAX + RS.JI_SALE_TAX + RS.JI_SALE_VAT) AS JI_SUM											/* 지급수수료 제외 - 합계 */
				      <#else> 
					      , 0 AS JI_AMT																								/* 지급수수료 제외 - 공급가 */
					      , 0 AS JI_SALE_NOTAX 																						/* 지급수수료 제외 - 공급가(면세) */
					      , 0 AS JI_SALE_TAX 																						/* 지급수수료 제외 - 공급가(과세) */
					      , 0 AS JI_VAT																								/* 지급수수료 제외 - 부가세 */
					      , 0 AS JI_SUM																								/* 지급수수료 제외 - 합계 */
				      </#if>
				      
				      , RS.MARGIN_SUM AS MARGIN_AMT																					/* 이익액 */
				      , RS.UNIT_SUM																									/* 순수매입액 */
				
						FROM FMS_BUY_SALE_SUM RS																		
							INNER JOIN FMS_UPJANG Z ON 1 = 1
									 /*검색 조건 : 영업담당*/
									<#if schSabun?has_content>
									AND Z.PART_SALES_SABUN = :schSabun
									</#if>
									AND RS.UPJANG = Z.UPJANG
							INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
									/*검색 조건 : 관리부서(팀)*/
									<#if schTm?has_content>
									AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
									</#if>
									/*검색 조건 : CC */
									<#if schCc?has_content>
									AND D.CC_CD = :schCc
									</#if>
									AND  RS.DEPT_ID = D.DEPT_ID
									
				    	WHERE 1=1
							<#if schMainUpjang?has_content>
								AND RS.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
							</#if>
							 /*검색 조건 : 사업장*/
							<#if schUpjang?has_content>
								AND RS.UPJANG = :schUpjang
							</#if>
							/*검색 조건 : 기간*/
							<#if schGubun=="1">
								AND RS.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate							
							<#else>
								AND RS.MG_DATE BETWEEN :schFromDate AND :schToDate
							</#if>
							/*검색 조건 : 센터*/     
							<#if schCenter?has_content>
								<#if schCenter != '*'>
								AND RS.CENTER_CODE = :schCenter
								</#if>
							</#if>
							/*검색 조건 : 납품업체*/
							<#if schCustCd?has_content>
							AND RS.CUSTCD = :schCustCd
							</#if>						
							/*검색 조건 : 세부직군*/
							<#if schBizDetail?has_content>
							AND RS.BIZ_DETAIL_MAIN = :schBizDetail
							</#if>
				 ) X
				 GROUP BY X.TRANS_DATE
					ORDER BY X.TRANS_DATE
			
		<#else>
		
				SELECT
			  		  RS.TRANS_DATE
					, RS.TAXALL_1
					, RS.NOTAX_1
					, RS.TAX_1
					, RS.VAT_1
					, RS.ALL_1
					
					, RS.TAXALL_2 - (RS.CK_TAXALL_2 + RS.JI_TAXALL_2) AS TAXALL_2
					, RS.NOTAX_2 - (RS.CK_NOTAX_2 + RS.JI_NOTAX_2) AS NOTAX_2
					, RS.TAX_2 - (RS.CK_TAX_2 + RS.JI_TAX_2) AS TAX_2
					, RS.VAT_2 - (RS.CK_VAT_2 + RS.JI_VAT_2) AS VAT_2
					
					, RS.TAXALL_2 - (RS.CK_TAXALL_2 + RS.JI_TAXALL_2) +
					  RS.VAT_2 - (RS.CK_VAT_2 + RS.JI_VAT_2) AS ALL_2  
					
					, RS.CK_TAXALL_2
					, RS.CK_NOTAX_2
					, RS.CK_TAX_2
					, RS.CK_VAT_2
					, RS.JI_TAXALL_2
					, RS.JI_NOTAX_2
					, RS.JI_TAX_2
					, RS.JI_VAT_2
					, RS.TAXALL_2 - (RS.CK_TAXALL_2 + RS.JI_TAXALL_2)  - RS.TAXALL_1 AS MARGIN_AMT 
		           	, CASE WHEN RS.TAXALL_2 - (RS.CK_TAXALL_2 +  RS.JI_TAXALL_2) = 0 THEN 0
		           	  ELSE ROUND(((RS.TAXALL_2 - (RS.CK_TAXALL_2 + RS.JI_TAXALL_2)  - RS.TAXALL_1) / (RS.TAXALL_2 - (RS.CK_TAXALL_2 +  RS.JI_TAXALL_2))) * 100, 2) END AS MARGIN_RATIO
		           	, RS.UNIT_SUM AS UNIT_SUM
		           	, RS.TAXALL_2 - RS.UNIT_SUM AS MARGIN_SUM
				FROM
						(
							SELECT
				 				  TO_CHAR(TO_DATE(X.TRANS_DATE,'YYYYMMDD'),'YYYYMMDD') TRANS_DATE
		               			
			      				, SUM(ROUND(X.TRANS_MAMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS TAXALL_1												/* 매입_면과세합계 */
			      				, SUM(ROUND(DECODE(X.TAX_CODE, '100', 0, X.TRANS_MAMOUNT) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS NOTAX_1		/* 매입_면세 */
			      				, SUM(ROUND(DECODE(X.TAX_CODE, '100', X.TRANS_MAMOUNT, 0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS TAX_1			/* 매입_과세 */
			      				
		             			--, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))           AS VAT_1   /* 매입부가세 : 수불 부가세 필드 이용 */		               			
		               			--, ROUND(SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS ALL_1	/* 매입_총합계 */
		             			--, SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))  AS ALL_1
		             			
	             				--매입부가세 계산방식 오류 수정 20180413 김호석 부가세 절대값(매입부가세단가)*수량
			             		, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) )           AS VAT_1
			             		, SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))  AS ALL_1
		             			
		
								<#if schChk3?has_content>
					        		, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS TAXALL_2 
									, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0,1))) AS NOTAX_2
									, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1,0))) AS TAX_2
									, SUM(
										CASE WHEN X.FLAG = '1' THEN
											DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0.1,0))
										ELSE
											-- 보정자재 : 장려금 제외
											DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
										END
										) AS VAT_2
								<#else>
									, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS TAXALL_2 		/* 매출_면과세합계 */
									, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', 0, ROUND(X.SALE_PRICE * X.TRANS_QTY))) AS NOTAX_2		/* 매출_면세 */ 
									, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', ROUND(X.SALE_PRICE * X.TRANS_QTY),0)) AS TAX_2			/* 매출_과세 */ 
									, SUM(
										CASE WHEN X.FLAG = '1' THEN
											DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
										ELSE
											DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
										END
										) AS VAT_2   /* 매출부가세  */ 
								</#if>
		
		               			, ROUND(SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.CK_AMOUNT,0)) +
				 					SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.CK_AMOUNT,0))) AS CK_TAXALL_2			/* CK_면과세합계 */
			       				, ROUND(SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.CK_AMOUNT,0))) AS CK_NOTAX_2		/* CK_면세 */
		               			, ROUND(SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.CK_AMOUNT,0))) AS CK_TAX_2			/* CK_과세 */
		               			, SUM(DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0)) AS CK_VAT_2		/* CK_부가세 */
		
		
		               			, ROUND(SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.JI_AMOUNT,0)) +
				 					SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.JI_AMOUNT,0))) AS JI_TAXALL_2				/* JI_면과세합계 */
			       				, ROUND(SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.JI_AMOUNT,0))) AS JI_NOTAX_2			/* JI_면세 */
		               			, ROUND(SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.JI_AMOUNT,0))) AS JI_TAX_2			/* JI_과세 */
		               			, SUM(DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0)) AS JI_VAT_2		/* JI_부가세 */
		               			, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * (X.TRANS_QTY * X.UNIT_PRICE))) AS UNIT_SUM
		
						FROM
								(
									SELECT
											 T.TRANS_DATE
				      						, T.ITEM_CODE
				      						, T.ITEM_NAME
				      						, T.ITEM_SIZE
				      						, T.TRANS_UOM
				      						, T.TRANS_TYPE
				      						, T.TRANS_QTY
				      						, T.TRANS_MPRICE
				      						, T.TRANS_MAMOUNT
				      						, T.TRANS_MVAT
				      						, T.UNIT_PRICE
				      						, T.SALE_PRICE
				      						, T.SALE_AMOUNT
				      						, T.SALE_VAT
				      						, T.TAX_CODE
				      						, T.FLAG
				      						, T.DEPT_ID
				      						, T.CC_NM
				      						, T.UPJANGNM
				     					 	, T.ITEM_CLASS2
				     			    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
									  		  ELSE
					    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
														CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
		                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
					    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
					    							END 
									  		   END AS CK_AMOUNT
				      						, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
									  		  ELSE
					    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
															CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
		                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
					    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
					    					  			END 
									  		  END AS JI_AMOUNT
									 		, DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE			
								FROM
										(
											SELECT
												<#if schMainUpjang?has_content || schUpjang?has_content>
													/*+ PUSH_PRED(A) */
												</#if>
													<#if schGubun=="1">
											 		 A.TRANS_DATE
					      							<#else>
											  		 A.MG_DATE AS TRANS_DATE
		           									</#if>
						      					   , A.ITEM_CODE
						      						, A.ITEM_NAME
						      						, A.ITEM_SIZE
						      						, A.TRANS_UOM
						      						, A.TRANS_TYPE
						      						, A.TRANS_QTY
													<#if schPrice=="2">
						      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
						      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
						      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
					      							<#else>
						      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
						      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
						      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
						      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
		           									</#if>
		           									, NVL(A.UNIT_PRICE, 0) AS UNIT_PRICE
		                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
		                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
		                      						, NVL(A.SALE_VAT, 0) AS SALE_VAT
						      						, A.TAX_CODE
						      						, A.FLAG
						      						, B2.DEPT_ID
						      						, D.CC_NM
						      						, B2.UPJANGNM
						      						, M.ITEM_CLASS2			-- 중분류기준
		         									/*검색 조건 : CK물류비제외*/
		         									<#if schChk1?has_content>
						      						, CASE WHEN A.TAX_CODE = '100' THEN
															(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
															 ELSE NVL(C2.FM_SALE_RATE, 0)
															END)
											 		ELSE 
															(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
												 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
															END)
											 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
						      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
						      						<#else>
						      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
						      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
													</#if>
		         									/*검색 조건 : 지급수수료제외*/
		         									<#if schChk2?has_content>
						      						, CASE WHEN A.TAX_CODE = '100' THEN
															(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
															ELSE NVL(J2.FM_SALE_RATE, 0)
															END)
											  		 ELSE 
															(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
												 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
															END)
											  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
						     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
						      						<#else>
						      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
						     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
													</#if>
		         									/*검색 조건 : 장려금제외*/
		         									<#if schChk3?has_content>
						      			    		, CASE WHEN A.TAX_CODE = '100' THEN
															(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
												 			ELSE NVL(S2.FM_SALE_RATE, 0)
												 		END)
											  		 ELSE 
															(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
															ELSE NVL(S2.FM_NOSALE_RATE, 0)
															END)
													 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
						     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
						      					<#else>
										 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
						     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
												</#if>
<#if newGubun=="Y">
		 								FROM FMS_TRANSACTION_ALL_V A
<#else>
		 								FROM FMS_TRANSACTION_V A
</#if>
		                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
		             																									/*검색 조건 : 본사*/
		           																										<#if schMainUpjang?has_content>
		           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
		           																										</#if>
		            																									 /*검색 조건 : 사업장*/
		           																										<#if schUpjang?has_content>
		           																										AND B2.UPJANG = :schUpjang
		           																										</#if>
																														 AND A.TRANS_UPJANG = B2.UPJANG
																						INNER JOIN FMS_UPJANG Z ON 1 = 1
		            																									 /*검색 조건 : 영업담당*/
		           																										<#if schSabun?has_content>
		           																		  								 AND Z.PART_SALES_SABUN = :schSabun
																														</#if>
		            																									 /*검색 조건 : 세부직군*/
		           																										<#if schBizDetail?has_content>
		           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																														</#if>
																						  								 AND A.TRANS_UPJANG = Z.UPJANG
																						INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
		           																												/*검색 조건 : 관리부서(팀)*/
		           																												<#if schTm?has_content>
		           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
		           																												</#if>
		           																												/*검색 조건 : CC */
		           																												<#if schCc?has_content>
		           																												AND D.CC_CD = :schCc
		           																												</#if>
																																AND  B2.DEPT_ID = D.DEPT_ID
		                                        										LEFT JOIN HLDC_PO_ITEM_MST M ON A.ITEM_CODE = M.ITEM_CODE
<#if newGubun!="Y">
		                                                               																 AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
</#if>
		
		                                   											-- 추가 : 특약사항관련 : 중분류, 소분류
		         																	<#if schChk1?has_content>
																					LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG
																															AND C1.SUBINV_CODE = A.SUBINV_CODE
																															AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																															AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																															AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																					LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG
																															AND C2.SUBINV_CODE = A.SUBINV_CODE
																															AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																															AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																															AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																					</#if>
		         																	<#if schChk2?has_content>
																					LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG
																															AND J1.SUBINV_CODE = A.SUBINV_CODE
																															AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																															AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																															AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																					LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG
																															AND J2.SUBINV_CODE = A.SUBINV_CODE
																															AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																															AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																															AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																					</#if>
		         																	<#if schChk3?has_content>
																					LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG
																															AND S1.SUBINV_CODE = A.SUBINV_CODE
																															AND S1.CASH_CODE = '003'			/* 장려금(003) */
																															AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																															AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																					LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG
																															AND S2.SUBINV_CODE = A.SUBINV_CODE
																															AND S2.CASH_CODE = '003'			/* 장려금(003) */
																															AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																															AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																					</#if>
<#if newGubun=="Y">
												WHERE ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
												WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
												AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		           								/*검색 조건 : 기간*/
												<#if schGubun=="1">
		           								AND A.TRANS_DATE2 BETWEEN :schFromDate AND :schToDate
					      						<#else>
		           								AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
		           							  </#if>
		           								/*검색 조건 : 센터*/     
		           								<#if schCenter?has_content>
		           									<#if schCenter != '*'>
		           									AND A.CENTER_CODE = :schCenter
		           									</#if>
		           								</#if>
		             							/*검색 조건 : 납품업체*/
		           								<#if schCustCd?has_content>
		           								AND A.CUSTCD = :schCustCd
		           								</#if>
										) T	
								) X		
			 				GROUP BY  X.TRANS_DATE
					) RS
				   ORDER BY RS.TRANS_DATE
			</#if>
		]]></statement>



	<!-- 매입/매출집계 목록을 조회한다.(구) -->
	<statement name="selectListTab5_old" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab5_old */
		<![CDATA[
		SELECT CC_NM, MAIN_UPJANG, MAIN_UPJANGNM, UPJANG, UPJANGNM,
		       SUM(TRANS_SUM) TRANS_SUM,
		       SUM(TRANS_VAT) TRANS_VAT,
		       (SUM(TRANS_SUM) + SUM(TRANS_VAT)) TRANS_TOT,
		       SUM(SALE_NOTAX) SALE_NOTAX, 
		       SUM(SALE_TAX) SALE_TAX, 
		       SUM(SALE_VAT) SALE_VAT,
		       (SUM(SALE_NOTAX) + SUM(SALE_TAX)) SALE_TOT,
		       SUM(SALE_ALL) SALE_ALL,
		       SUM(SALE_NOTAX) + SUM(SALE_TAX) - SUM(TRANS_SUM) MARGIN,
		       DECODE(SUM(SALE_NOTAX) + SUM(SALE_TAX),0,0,ROUND(((SUM(SALE_NOTAX) + SUM(SALE_TAX) - SUM(TRANS_SUM)) / (SUM(SALE_NOTAX) + SUM(SALE_TAX)))*100,2)) MARGIN_RATIO
		FROM
		(
		SELECT (SELECT Z.MAIN_UPJANG FROM FMS_UPJANG Z WHERE Z.UPJANG = A.TRANS_UPJANG) AS MAIN_UPJANG,
		       (SELECT Z.UPJANGNM_DISP FROM FMS_UPJANG Z, FMS_UPJANG Y WHERE Z.UPJANG = Y.MAIN_UPJANG AND Y.UPJANG = A.TRANS_UPJANG) AS MAIN_UPJANGNM,
		        '' AS UPJANG,
		        '' AS UPJANGNM,
		       D.CC_NM||'('||TO_CHAR(A.TRANS_DEPT_ID)||')' AS CC_NM,
		       SUM(CEIL(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * TRANS_MAMOUNT)) AS TRANS_SUM,
               SUM(DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT* DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))                  AS TRANS_VAT,
		       SUM(CEIL(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',SALE_AMOUNT,0))) SALE_NOTAX,
		       SUM(CEIL(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',SALE_AMOUNT,0))) SALE_TAX,
               SUM(CEIL(DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0)))                  AS SALE_VAT,
		       SUM(CEIL(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'210',SALE_AMOUNT,0))) +
		       SUM(CEIL(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(TAX_CODE,'100',SALE_AMOUNT,0))) +
		       SUM(CEIL(DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))) SALE_ALL
<#if newGubun=="Y">
		  FROM FMS_TRANSACTION_ALL_V A, ST_UPJANG B2, HLDC_SC_DEPT_V D
<#else>
		  FROM FMS_TRANSACTION_V A, ST_UPJANG B2, HLDC_SC_DEPT_V D
</#if>
		 WHERE 1 = 1
<#if newGubun=="Y">
		   AND ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
		   AND SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
           AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		   /*검색 조건 : 기간*/
           AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
           /*검색 조건 : 관리부서(팀)*/
           <#if schTm?has_content>
           AND D.TM_CD = :schTm
           </#if>
           /*검색 조건 : 센터*/     
           <#if schCenter?has_content>
           AND A.CENTER_CODE = :schCenter
           </#if>
            /*검색 조건 : 본사*/
           <#if schMainUpjang?has_content>
           AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           </#if>       
             /*검색 조건 : 사업장*/       
           <#if schUpjang?has_content>
           AND B2.UPJANG = :schUpjang
           </#if>
             /*검색 조건 : 납품업체*/
           <#if schCustCd?has_content>
           AND A.CUSTCD = :schCustCd
           </#if>
           /*
           AND EXISTS (
           					  SELECT 1
           					  FROM FMS_SALES
                       		  WHERE UPJANG = A.TRANS_UPJANG
                       		  AND   SALE_DATE = A.TRANS_DATE
                       		  AND   SUBINV_CODE = A.SUBINV_CODE
                       		  AND   TRANS_YN = 'Y'
           					)
           	*/				
		   AND A.TRANS_UPJANG = B2.UPJANG
		   AND B2.DEPT_ID = D.DEPT_ID
		 GROUP BY A.TRANS_UPJANG, A.TAX_CODE, D.CC_NM||'('||TO_CHAR(A.TRANS_DEPT_ID)||')'
		)
		GROUP BY CC_NM, MAIN_UPJANG, MAIN_UPJANGNM, UPJANG, UPJANGNM
		]]>
	</statement>


	<!-- 매입/매출집계 목록을 조회한다. -->
	<statement name="selectListTab5_old_20170215" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab5 */
		<![CDATA[
		SELECT
          	  RS.CC_NM
			, RS.MAIN_UPJANG
			, RS.MAIN_UPJANGNM
			<#if schView == '2'>	
			/* 업장별 집계 */
			, RS.UPJANG
			, RS.UPJANGNM
			, FMS_GET_SALES_MAN_FUN(RS.UPJANG) AS SALES_MAN
			, (SELECT Z.CODE_NAME FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'FM0021' AND Z.CODE = RS.BIZ_DETAIL) AS BIZ_DETAIL_NAME	-- 업장_세부직군
			, MAX(RS.CONTRACT_TERM) AS CONTRACT_TERM	-- 업장_계약시작일
			<#else>
			, (SELECT Z.CODE_NAME FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'FM0021' AND Z.CODE = RS.BIZ_DETAIL_MAIN) AS BIZ_DETAIL_NAME	-- 본사_세부직군
			, MAX(RS.CONTRACT_TERM_MAIN) AS CONTRACT_TERM	-- 본사_계약시작일
			</#if>
			, SUM(RS.TRANS_SUM) TRANS_SUM
			, SUM(RS.TRANS_VAT) TRANS_VAT
			, (SUM(RS.TRANS_SUM) + SUM(RS.TRANS_VAT)) TRANS_TOT
			, SUM(RS.UNIT_SUM) UNIT_SUM
			
			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) AS SALE_NOTAX			/* 매출_면세 : 수수료 제외 */ 
			, SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX) AS  SALE_TAX								 /* 매출_과세 : 수수료 제외 */
			, SUM(RS.SALE_VAT) -  SUM(RS.CK_SALE_VAT + RS.JI_SALE_VAT) AS  SALE_VAT								/* 매출_부가세 : 수수료 제외 */
			
			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX) AS SALE_TOT
			  
			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX)  +
			  SUM(RS.SALE_VAT) -  SUM(RS.CK_SALE_VAT + RS.JI_SALE_VAT) AS SALE_ALL

			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX)  -
			  SUM(RS.TRANS_SUM)  AS MARGIN

			, SUM(RS.SALE_SUM)-SUM(RS.UNIT_SUM) MARGIN_SUM	/*순수 매출 - 매입 */
		
			--, DECODE(SUM(SALE_NOTAX) + SUM(SALE_TAX),0,0,ROUND(((SUM(SALE_NOTAX) + SUM(SALE_TAX) - SUM(TRANS_SUM)) / (SUM(SALE_NOTAX) + SUM(SALE_TAX)))*100,2)) MARGIN_RATIO

		FROM
				(
					SELECT
	          			  X.CC_NM
						, X.MAIN_UPJANG
						, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = X.MAIN_UPJANG) AS MAIN_UPJANGNM
						, X.UPJANG
						, X.UPJANGNM
						, MAX(X.BIZ_DETAIL_MAIN) AS BIZ_DETAIL_MAIN
						, MAX(X.BIZ_DETAIL) AS BIZ_DETAIL
						, MAX(X.CONTRACT_TERM_MAIN) AS CONTRACT_TERM_MAIN
						, MAX(X.CONTRACT_TERM) AS CONTRACT_TERM
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * X.TRANS_MAMOUNT)) AS TRANS_SUM
             			, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))           AS TRANS_VAT   /* 수불 부가세 필드 이용 */
                		, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * (X.TRANS_QTY * X.UNIT_PRICE))) AS UNIT_SUM
						<#if schChk3?has_content>
			        	, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_SUM 
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0,1))) AS SALE_NOTAX
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1,0))) AS SALE_TAX
						, SUM(
							CASE WHEN X.FLAG = '1' THEN 
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0.1,0))
							ELSE
								-- 보정분 : 장려금제외
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
							END
							) AS SALE_VAT
						<#else>
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_SUM 		/* 매출_면과세합계 */
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', 0, ROUND(X.SALE_PRICE * X.TRANS_QTY))) AS SALE_NOTAX		/* 매출_면세 */ 
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', ROUND(X.SALE_PRICE * X.TRANS_QTY),0)) AS SALE_TAX			/* 매출_과세 */ 
						, SUM(
							CASE WHEN X.FLAG = '1' THEN
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
							ELSE
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
							END
							) AS SALE_VAT   /* 매출부가세 */ 
						</#if>
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.SALE_AMOUNT,0))) +
		  					SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.SALE_AMOUNT,0))) +
		  					SUM(DECODE(X.TAX_CODE,100,ROUND(X.SALE_VAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0)) AS SALE_ALL

						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * X.CK_AMOUNT)) AS CK_SALE_SUM
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.CK_AMOUNT,0))) AS CK_SALE_NOTAX
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.CK_AMOUNT,0))) AS CK_SALE_TAX
                		, SUM(ROUND(DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))) AS CK_SALE_VAT

						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * X.JI_AMOUNT)) AS JI_SALE_SUM
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.JI_AMOUNT,0))) AS JI_SALE_NOTAX
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.JI_AMOUNT,0))) AS JI_SALE_TAX
                		, SUM(ROUND(DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))) AS JI_SALE_VAT
				FROM
						(
							SELECT
		        				  T.MAIN_UPJANG
		      					, T.UPJANG
		      					, T.TRANS_DATE
		      					, T.ITEM_CODE
		      					, T.ITEM_NAME
		      					, T.ITEM_SIZE
		      					, T.TRANS_UOM
		      					, T.TRANS_TYPE
		      					, T.TRANS_QTY
		      					, T.TRANS_MPRICE
		     					, T.TRANS_MAMOUNT
		     					, T.TRANS_MVAT
		     					, T.UNIT_PRICE
		      					, T.SALE_PRICE
		      					, T.SALE_AMOUNT
		      					, T.SALE_VAT
		      					, T.TAX_CODE
		      					, T.FLAG
		      					, T.DEPT_ID
		      					, T.CC_NM
		      					, T.UPJANGNM
		      					, F1.BIZ_DETAIL AS BIZ_DETAIL_MAIN
		      					, F2.BIZ_DETAIL
		      					, F1.CONTRACT_TERM AS CONTRACT_TERM_MAIN
		      					, F2.CONTRACT_TERM
	     			    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
												CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
			    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
			    							END 
						  		   END AS CK_AMOUNT
	      						, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
													CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
			    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
			    					  			END 
						  		  END AS JI_AMOUNT
						 		, DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE			
  						FROM
									(
										SELECT
										<#if schMainUpjang?has_content || schUpjang?has_content>
											/*+ PUSH_PRED(A) */
										</#if>
				        					 Z.MAIN_UPJANG	
                                      		, A.TRANS_UPJANG AS UPJANG
											<#if schGubun=="1">
				      						, A.TRANS_DATE
			      							<#else>
									  		, A.MG_DATE AS TRANS_DATE
           									</#if>
				      						, A.ITEM_CODE
				      						, A.ITEM_NAME
				      						, A.ITEM_SIZE
				      						, A.TRANS_UOM
				      						, A.TRANS_TYPE
				      						, A.TRANS_QTY
											<#if schPrice=="2">
				      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
			      							<#else>
				      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
				      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
           									</#if>
                                            , NVL(A.UNIT_PRICE, 0) AS UNIT_PRICE
                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
                      						, NVL(A.SALE_VAT, 0) AS SALE_VAT
				      						, A.TAX_CODE
				      						, A.FLAG
				      						, B2.DEPT_ID
				      						, D.CC_NM
				     						, B2.UPJANGNM
         									/*검색 조건 : CK물류비제외*/
         									<#if schChk1?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
													 ELSE NVL(C2.FM_SALE_RATE, 0)
													END)
									 		ELSE 
													(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
													END)
									 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
				      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
				      						<#else>
				      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
				      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
											</#if>
         									/*검색 조건 : 지급수수료제외*/
         									<#if schChk2?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
													ELSE NVL(J2.FM_SALE_RATE, 0)
													END)
									  		 ELSE 
													(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
													END)
									  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
				     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
				      						<#else>
				      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
				     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
											</#if>
         									/*검색 조건 : 장려금제외*/
         									<#if schChk3?has_content>
				      			    		, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
										 			ELSE NVL(S2.FM_SALE_RATE, 0)
										 		END)
									  		 ELSE 
													(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
													ELSE NVL(S2.FM_NOSALE_RATE, 0)
													END)
											 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
				     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
				      					<#else>
								 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
				     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
										</#if>
<#if newGubun=="Y">
 								FROM FMS_TRANSACTION_ALL_V A
<#else>
 								FROM FMS_TRANSACTION_V A
</#if>
                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
             																									/*검색 조건 : 본사*/
           																										<#if schMainUpjang?has_content>
           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           																										</#if>
            																									 /*검색 조건 : 사업장*/
           																										<#if schUpjang?has_content>
           																										AND B2.UPJANG = :schUpjang
           																										</#if>
																												 AND A.TRANS_UPJANG = B2.UPJANG
																				INNER JOIN FMS_UPJANG Z ON 1 = 1
            																									 /*검색 조건 : 영업담당*/
           																										<#if schSabun?has_content>
           																		  								 AND Z.PART_SALES_SABUN = :schSabun
																												</#if>
            																									 /*검색 조건 : 세부직군*/
           																										<#if schBizDetail?has_content>
           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																												</#if>
																				  								 AND A.TRANS_UPJANG = Z.UPJANG
																				INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
           																												/*검색 조건 : 관리부서(팀)*/
           																												<#if schTm?has_content>
           																												AND D.TM_CD = :schTm
           																												</#if>
           																												/*검색 조건 : CC */
           																												<#if schCc?has_content>
           																												AND D.CC_CD = :schCc
           																												</#if>
																														AND  B2.DEPT_ID = D.DEPT_ID
                                        										LEFT JOIN HLDC_PO_ITEM_MST M ON A.ITEM_CODE = M.ITEM_CODE
<#if newGubun!="Y">
                                                               																 AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
</#if>
                                   											-- 추가 : 특약사항관련 : 중분류, 소분류
         																	<#if schChk1?has_content>
																			LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG
																													AND C1.SUBINV_CODE = A.SUBINV_CODE
																													AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																													AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG
																													AND C2.SUBINV_CODE = A.SUBINV_CODE
																													AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																													AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk2?has_content>
																			LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG
																													AND J1.SUBINV_CODE = A.SUBINV_CODE
																													AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																													AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG
																													AND J2.SUBINV_CODE = A.SUBINV_CODE
																													AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																													AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk3?has_content>
																			LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG
																													AND S1.SUBINV_CODE = A.SUBINV_CODE
																													AND S1.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																													AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG
																													AND S2.SUBINV_CODE = A.SUBINV_CODE
																													AND S2.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																													AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																			</#if>
<#if newGubun=="Y">
										WHERE ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
										WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
										AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
           								/*검색 조건 : 기간*/
										<#if schGubun=="1">
           								AND A.TRANS_DATE2 BETWEEN :schFromDate AND :schToDate
			      						<#else>
           								AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
           							  </#if>
           								/*검색 조건 : 센터*/     
           								<#if schCenter?has_content>
           									<#if schCenter != '*'>
           									AND A.CENTER_CODE = :schCenter
           									</#if>
           								</#if>
             							/*검색 조건 : 납품업체*/
           								<#if schCustCd?has_content>
           								AND A.CUSTCD = :schCustCd
           								</#if>
								) T	 INNER JOIN FMS_UPJANG F1 ON T.MAIN_UPJANG = F1.UPJANG
									 INNER JOIN FMS_UPJANG F2 ON T.UPJANG = F2.UPJANG
						) X  
	 					GROUP BY  X.CC_NM, X.MAIN_UPJANG, X.UPJANG, X.UPJANGNM
				) RS
				GROUP BY RS.CC_NM
					, RS.MAIN_UPJANG
					, RS.MAIN_UPJANGNM
					<#if schView == '2'>	
					/* 업장별 집계 */
					, RS.UPJANG
					, RS.UPJANGNM
					, RS.BIZ_DETAIL
					<#else>
					, RS.BIZ_DETAIL_MAIN
					</#if>
		]]>
	</statement>


	<!-- 매입/매출집계 목록을 조회한다.(신:2017.02.17) -->
	<statement name="selectListTab5" type="select"><![CDATA[--마감여부에 따라 집계 또는 실시간 검색 추가 20170824 맹수영

<#if mCloseYn=="Y">    

	SELECT	  Z.CC_NM --관리부서
			, Z.MAIN_UPJANG
			, Z.MAIN_UPJANGNM
          	/* 업장별 집계 */
          <#if schView == '2'>	
            , Z.UPJANG
            , Z.UPJANGNM
            , Z.SALES_MAN
            , Z.BIZ_DETAIL_NAME	-- 업장_세부직군
            , Z.CONTRACT_TERM	-- 업장_계약시작일
          <#else>
            , Z.BIZ_DETAIL_NAME	-- 본사_세부직군
            , Z.CONTRACT_TERM	-- 본사_계약시작일
          </#if> 
			, Z.TRANS_SUM
			, Z.TRANS_VAT
			, Z.TRANS_TOT
			, Z.UNIT_SUM
          <#if schChk3?has_content>
            --장려금 제외
            , (Z.SALE_NOTAX_S - (CK_SALE_NOTAX + JI_SALE_NOTAX))	SALE_NOTAX		/* 매출_면세 : 수수료 제외 */ 
            , (Z.SALE_TAX_S	- (CK_SALE_TAX + JI_SALE_TAX))	SALE_TAX					 /* 매출_과세 : 수수료 제외 */
            , (Z.SALE_VAT_S	- (CK_SALE_VAT + JI_SALE_VAT))	SALE_VAT						/* 매출_부가세 : 수수료 제외 */			
            , (Z.SALE_TOT_S - (CK_SALE_NOTAX + JI_SALE_NOTAX) - (CK_SALE_TAX + JI_SALE_TAX)) SALE_TOT
            , (Z.SALE_ALL_S - (CK_SALE_NOTAX + JI_SALE_NOTAX) - (CK_SALE_TAX + JI_SALE_TAX ) - (CK_SALE_VAT + JI_SALE_VAT)) SALE_ALL
            , (Z.MARGIN_S - (CK_SALE_NOTAX + JI_SALE_NOTAX)  	- (CK_SALE_TAX + JI_SALE_TAX))  MARGIN
            , ((Z.SALE_TOT_S - (CK_SALE_NOTAX + JI_SALE_NOTAX) - (CK_SALE_TAX + JI_SALE_TAX)) - Z.UNIT_SUM)  MARGIN_SUM
            --장려금 제외
         <#else> 
            --장려금 포함
            , (Z.SALE_NOTAX - (CK_SALE_NOTAX + JI_SALE_NOTAX))	SALE_NOTAX		/* 매출_면세 : 수수료 제외 */ 
            , (Z.SALE_TAX	- (CK_SALE_TAX + JI_SALE_TAX))	SALE_TAX					 /* 매출_과세 : 수수료 제외 */
            , (Z.SALE_VAT	- (CK_SALE_VAT + JI_SALE_VAT))	SALE_VAT						/* 매출_부가세 : 수수료 제외 */			
            , (Z.SALE_TOT - (CK_SALE_NOTAX + JI_SALE_NOTAX) - (CK_SALE_TAX + JI_SALE_TAX)) SALE_TOT
            , (Z.SALE_ALL - (CK_SALE_NOTAX + JI_SALE_NOTAX) - (CK_SALE_TAX + JI_SALE_TAX ) - (CK_SALE_VAT + JI_SALE_VAT)) SALE_ALL
            , (Z.MARGIN - (CK_SALE_NOTAX + JI_SALE_NOTAX)  	- (CK_SALE_TAX + JI_SALE_TAX))  MARGIN
            , Z.MARGIN_SUM AS MARGIN_SUM	/*순수 매출 - 매입 */
            --장려금 포함
         </#if>
          -- 장려금 제외/포함시 금액이 다르게 나와야 함 ( (매출액(부가세제외) - 순수매입액) / 매출액(부가세제외) 계산으로 변경 )
          --  ,Z.MARGIN_SUM AS MARGIN_SUM	/*순수 매출 - 매입 */  
          
          <#if schView == '2'>	
			, (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS0',UJ.MASTERCLASS0) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.UPJANG ) AS MASTERCLASS0
            , (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS1',UJ.MASTERCLASS1) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.UPJANG ) AS MASTERCLASS1
            , (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS2',UJ.MASTERCLASS2) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.UPJANG ) AS MASTERCLASS2
            , (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS3',UJ.MASTERCLASS3) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.UPJANG ) AS MASTERCLASS3
            , (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS4',UJ.MASTERCLASS4) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.UPJANG ) AS MASTERCLASS4   
          <#else>
            , (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS0',UJ.MASTERCLASS0) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.MAIN_UPJANG ) AS MASTERCLASS0
            , (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS1',UJ.MASTERCLASS1) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.MAIN_UPJANG ) AS MASTERCLASS1
            , (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS2',UJ.MASTERCLASS2) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.MAIN_UPJANG ) AS MASTERCLASS2
            , (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS3',UJ.MASTERCLASS3) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.MAIN_UPJANG ) AS MASTERCLASS3
            , (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS4',UJ.MASTERCLASS4) FROM FMS_UPJANG_V UJ WHERE UPJANG = Z.MAIN_UPJANG ) AS MASTERCLASS4   
          </#if> 
          	, NULL AS INCOME_PRICE
			, NULL AS INCOME_SUM
			, NULL AS INCOME_TRANS_SUM
			, NULL AS INCOME_MARGIN_AMT
			--, NULL AS INCOME_MARGIN_RATIO
	FROM (
		SELECT 	  C.CC_NM --관리부서
				, B.MAIN_UPJANG
				, (SELECT UPJANGNM_DISP FROM FMS_UPJANG  WHERE UPJANG = B.MAIN_UPJANG)  MAIN_UPJANGNM
             /* 업장별 집계 */
              <#if schView == '2'>	 
				, B.UPJANG
				, B.UPJANGNM_DISP UPJANGNM
				, FMS_GET_SALES_MAN_FUN(B.UPJANG) AS SALES_MAN
				, (SELECT Z.CODE_NAME FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'FM0021' AND Z.CODE = A.BIZ_DETAIL_MAIN) AS BIZ_DETAIL_NAME	-- 업장_세부직군
				, MAX(B.CONTRACT_TERM) AS CONTRACT_TERM	-- 업장_계약시작일
              <#else>
            	, (SELECT Z.CODE_NAME FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'FM0021' AND Z.CODE = A.BIZ_DETAIL_MAIN) AS BIZ_DETAIL_NAME	-- 본사_세부직군
            	, MAX(B.CONTRACT_TERM) AS CONTRACT_TERM	-- 본사_계약시작일
              </#if>     
              <#if schPrice=="2">  
            	, SUM(A.TRANS_SUM_UNIT) TRANS_SUM
            	, SUM(A.TRANS_VAT_UNIT) TRANS_VAT
            	, (SUM(A.TRANS_SUM_UNIT) + SUM(A.TRANS_VAT_UNIT)) TRANS_TOT             
              <#else>
               	, SUM(A.TRANS_SUM) TRANS_SUM
             	, SUM(A.TRANS_VAT) TRANS_VAT
               	, SUM(A.TRANS_TOT) TRANS_TOT
              </#if>
               	, SUM(A.UNIT_SUM) UNIT_SUM
               --장려금 포함
               	, SUM(A.SALE_NOTAX) AS SALE_NOTAX			/* 매출_면세 : 수수료 제외 */ 
               	, SUM(A.SALE_TAX)  AS  SALE_TAX								 /* 매출_과세 : 수수료 제외 */
               	, SUM(A.SALE_VAT) AS  SALE_VAT								/* 매출_부가세 : 수수료 제외 */			
               	, SUM(A.SALE_TOT) AS SALE_TOT			  
               	, SUM(A.SALE_ALL) AS SALE_ALL
              <#if schPrice=="2">
                , SUM(A.SALE_NOTAX) + SUM(A.SALE_TAX) - SUM(A.TRANS_SUM_UNIT) AS MARGIN 
              <#else>
                , SUM(A.MARGIN) AS MARGIN
              </#if>
               --장려금 포함
         	   --장려금 제외
         	   	, SUM(A.SALE_NOTAX_S) AS SALE_NOTAX_S			/* 매출_면세 : 수수료 제외 */ 
               	, SUM(A.SALE_TAX_S)  AS  SALE_TAX_S								 /* 매출_과세 : 수수료 제외 */
          	   	, SUM(A.SALE_VAT_S) AS  SALE_VAT_S								/* 매출_부가세 : 수수료 제외 */			
               	, SUM(A.SALE_TOT_S) AS SALE_TOT_S			  
               	, SUM(A.SALE_ALL_S) AS SALE_ALL_S
              <#if schPrice=="2">
                , SUM(A.SALE_NOTAX_S) + SUM(A.SALE_TAX_S) - SUM(A.TRANS_SUM_UNIT) AS MARGIN_S  
              <#else>
                , SUM(A.MARGIN_S) AS MARGIN_S  
              </#if>
               --장려금 제외
               --CK수수료
              <#if schChk1?has_content>
              	, SUM(CK_SALE_NOTAX) AS CK_SALE_NOTAX
              	, SUM(CK_SALE_TAX) AS CK_SALE_TAX
              	, SUM(CK_SALE_VAT) AS CK_SALE_VAT
              <#else>
              	, 0 AS CK_SALE_NOTAX
              	, 0 AS CK_SALE_TAX
              	, 0 AS CK_SALE_VAT
              </#if>
             --CK수수료
             --지급수수료
              <#if schChk2?has_content>
              	, SUM(JI_SALE_NOTAX) AS JI_SALE_NOTAX
              	, SUM(JI_SALE_TAX) AS JI_SALE_TAX
              	, SUM(JI_SALE_VAT) AS JI_SALE_VAT
              <#else>
            	, 0 AS JI_SALE_NOTAX
              	, 0 AS JI_SALE_TAX
              	, 0 AS JI_SALE_VAT      
              </#if>
            --지급수수료            
              	, SUM(A.MARGIN_SUM) AS MARGIN_SUM	/*순수 매출 - 매입 */
		FROM FMS_BUY_SALE_SUM A,
             FMS_UPJANG B,
             HLDC_SC_DEPT_V C
			<#if schPbYn=="Y">
             , FSI_PB_MST D
			</#if>
		WHERE A.UPJANG = B.UPJANG
          AND B.DEPT_ID = C.CC_CD
		/*검색 조건 : 1이면 거래명세서기준, 2면 회계기준*/
		<#if schGubun=="1">
		--AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
		  AND A.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate
		<#else>
		--AND A.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate
		  AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
		</#if>
		<#if schPbYn=="Y">
		  AND A.ITEM_CODE = D.ITEM_CODE
          AND D.START_DATE <= :schToDate AND D.END_DATE >= :schFromDate
		  AND D.USE_YN = 'Y'
		  AND D.MU_CD='2004'
		</#if>
		<#if schMainUpjang?has_content>
		  AND A.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
		</#if>							
		/*검색 조건 : 사업장*/
		<#if schUpjang?has_content>
		  AND A.UPJANG = :schUpjang
		</#if>
	  	/*검색 조건 : 팀 */
      	<#if schTm?has_content>
		  AND C.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
	  	</#if>
	  	/*검색 조건 : CC */
	  	<#if schCc?has_content>
		  AND C.CC_CD = :schCc
	  	</#if>
	  	<#if schSabun?has_content>
		  AND B.PART_SALES_SABUN = :schSabun   --영업사원
	  	</#if>
	  	/*검색 조건 : 센터*/     
	  	<#if schCenter?has_content>
	     <#if schCenter != '*'>
		  AND A.CENTER_CODE = :schCenter
		 </#if>
		</#if>
	  	/*검색 조건 : 납품업체*/
	  	<#if schCustCd?has_content>
		  AND A.CUSTCD = :schCustCd
	  	</#if>						
	  	/*검색 조건 : 세부직군*/
	  	<#if schBizDetail?has_content>
		  AND A.BIZ_DETAIL_MAIN = :schBizDetail
	  	</#if>

		GROUP BY  	  C.CC_NM --관리부서
					, B.MAIN_UPJANG
				/* 업장별 집계 */
				<#if schView == '2'>	
					, B.UPJANG
					, B.UPJANGNM_DISP 
					, A.BIZ_DETAIL_MAIN
				<#else>
					, A.BIZ_DETAIL_MAIN
				</#if> 
		) Z
	ORDER BY   CC_NM
			 , MAIN_UPJANG
		<#if schView == '2'>	
			 , UPJANG 
		</#if> 

<#else>

SELECT
          	  RS.CC_NM
			, RS.MAIN_UPJANG
			, RS.MAIN_UPJANGNM
			<#if schView == '2'>	
			/* 업장별 집계 */
			, RS.UPJANG
			, RS.UPJANGNM
			, FMS_GET_SALES_MAN_FUN(RS.UPJANG) AS SALES_MAN
			, (SELECT Z.CODE_NAME FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'FM0021' AND Z.CODE = RS.BIZ_DETAIL) AS BIZ_DETAIL_NAME	-- 업장_세부직군
			, MAX(RS.CONTRACT_TERM) AS CONTRACT_TERM	-- 업장_계약시작일
			<#else>
			, (SELECT Z.CODE_NAME FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'FM0021' AND Z.CODE = RS.BIZ_DETAIL_MAIN) AS BIZ_DETAIL_NAME	-- 본사_세부직군
			, MAX(RS.CONTRACT_TERM_MAIN) AS CONTRACT_TERM	-- 본사_계약시작일
			</#if>
			, SUM(RS.TRANS_SUM) TRANS_SUM
			, SUM(RS.TRANS_VAT) TRANS_VAT
			, (SUM(RS.TRANS_SUM) + SUM(RS.TRANS_VAT)) TRANS_TOT
			, SUM(RS.UNIT_SUM) UNIT_SUM
			
			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) AS SALE_NOTAX			/* 매출_면세 : 수수료 제외 */ 
			, SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX) AS  SALE_TAX								 /* 매출_과세 : 수수료 제외 */
			, SUM(RS.SALE_VAT) -  SUM(RS.CK_SALE_VAT + RS.JI_SALE_VAT) AS  SALE_VAT								/* 매출_부가세 : 수수료 제외 */
			
			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX) AS SALE_TOT
			  
			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX)  +
			  SUM(RS.SALE_VAT) -  SUM(RS.CK_SALE_VAT + RS.JI_SALE_VAT) AS SALE_ALL

			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX)  -
			  SUM(RS.TRANS_SUM)  AS MARGIN

			, SUM(RS.SALE_SUM)-SUM(RS.UNIT_SUM) MARGIN_SUM	/*순수 매출 - 매입 */
		
			--, DECODE(SUM(SALE_NOTAX) + SUM(SALE_TAX),0,0,ROUND(((SUM(SALE_NOTAX) + SUM(SALE_TAX) - SUM(TRANS_SUM)) / (SUM(SALE_NOTAX) + SUM(SALE_TAX)))*100,2)) MARGIN_RATIO

			<#if schView == '2'>	
            ,(SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS0',UJ.MASTERCLASS0) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.UPJANG ) AS MASTERCLASS0,
             (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS1',UJ.MASTERCLASS1) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.UPJANG ) AS MASTERCLASS1,
             (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS2',UJ.MASTERCLASS2) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.UPJANG ) AS MASTERCLASS2,
             (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS3',UJ.MASTERCLASS3) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.UPJANG ) AS MASTERCLASS3,
             (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS4',UJ.MASTERCLASS4) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.UPJANG ) AS MASTERCLASS4
			<#else>
            ,(SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS0',UJ.MASTERCLASS0) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.MAIN_UPJANG ) AS MASTERCLASS0,
             (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS1',UJ.MASTERCLASS1) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.MAIN_UPJANG ) AS MASTERCLASS1,
             (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS2',UJ.MASTERCLASS2) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.MAIN_UPJANG ) AS MASTERCLASS2,
             (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS3',UJ.MASTERCLASS3) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.MAIN_UPJANG ) AS MASTERCLASS3,
             (SELECT GFN_SCC_CODENAME_FUN('CUSTCLASS4',UJ.MASTERCLASS4) FROM FMS_UPJANG_V UJ
               WHERE UPJANG = RS.MAIN_UPJANG ) AS MASTERCLASS4
			</#if>
			
			, SUM(RS.INCOME_PRICE) AS INCOME_PRICE
			, SUM(RS.INCOME_SUM) AS INCOME_SUM
            , SUM(RS.TRANS_SUM) - SUM(RS.INCOME_SUM) AS INCOME_TRANS_SUM 
			, (SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX)) - (SUM(RS.TRANS_SUM) - SUM(RS.INCOME_SUM)) AS INCOME_MARGIN_AMT
			
		FROM
				(
					SELECT
	          			  X.CC_NM
						, X.MAIN_UPJANG
						, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = X.MAIN_UPJANG) AS MAIN_UPJANGNM
						, X.UPJANG
						, X.UPJANGNM
						, MAX(X.BIZ_DETAIL_MAIN) AS BIZ_DETAIL_MAIN
						, MAX(X.BIZ_DETAIL) AS BIZ_DETAIL
						, MAX(X.CONTRACT_TERM_MAIN) AS CONTRACT_TERM_MAIN
						, MAX(X.CONTRACT_TERM) AS CONTRACT_TERM
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * X.TRANS_MAMOUNT)) AS TRANS_SUM
             			--, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))           AS TRANS_VAT   /* 수불 부가세 필드 이용 */
	             		--매입부가세 계산방식 오류 수정 20180413 김호석 부가세 절대값(매입부가세단가)*수량
			            , SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) )           AS TRANS_VAT
			             		
                		, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * (X.TRANS_QTY * X.UNIT_PRICE))) AS UNIT_SUM
                		
						<#if schChk3?has_content>
			        	, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_SUM 
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0,1))) AS SALE_NOTAX
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1,0))) AS SALE_TAX
						, SUM(
							CASE WHEN X.FLAG = '1' THEN 
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0.1,0))
							ELSE
								-- 보정분 : 장려금제외
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
							END
							) AS SALE_VAT
						<#else>
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_SUM 		/* 매출_면과세합계 */
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', 0, ROUND(X.SALE_PRICE * X.TRANS_QTY))) AS SALE_NOTAX		/* 매출_면세 */ 
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', ROUND(X.SALE_PRICE * X.TRANS_QTY),0)) AS SALE_TAX			/* 매출_과세 */ 
						, SUM(
							CASE WHEN X.FLAG = '1' THEN
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
							ELSE
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
							END
							) AS SALE_VAT   /* 매출부가세 */ 
						</#if>
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.SALE_AMOUNT,0))) +
		  					SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.SALE_AMOUNT,0))) +
		  					SUM(DECODE(X.TAX_CODE,100,ROUND(X.SALE_VAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0)) AS SALE_ALL

						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * X.CK_AMOUNT)) AS CK_SALE_SUM
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.CK_AMOUNT,0))) AS CK_SALE_NOTAX
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.CK_AMOUNT,0))) AS CK_SALE_TAX
                		, SUM(ROUND(DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))) AS CK_SALE_VAT

						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * X.JI_AMOUNT)) AS JI_SALE_SUM
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.JI_AMOUNT,0))) AS JI_SALE_NOTAX
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.JI_AMOUNT,0))) AS JI_SALE_TAX
                		, SUM(ROUND(DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))) AS JI_SALE_VAT
                		
                		, SUM(ROUND(X.INCOME_PRICE)) AS INCOME_PRICE
						, SUM(ROUND(X.INCOME_SUM)) AS INCOME_SUM
				FROM
						(
							SELECT
		        				  T.MAIN_UPJANG
		      					, T.UPJANG
		      					, T.TRANS_DATE
		      					, T.ITEM_CODE
		      					, T.ITEM_NAME
		      					, T.ITEM_SIZE
		      					, T.TRANS_UOM
		      					, T.TRANS_TYPE
		      					, T.TRANS_QTY
		      					, T.TRANS_MPRICE
		     					, T.TRANS_MAMOUNT
		     					, T.TRANS_MVAT
		     					, T.UNIT_PRICE
		      					, T.SALE_PRICE
		      					, T.SALE_AMOUNT
		      					, T.SALE_VAT
		      					, T.TAX_CODE
		      					, T.FLAG
		      					, T.DEPT_ID
		      					, T.CC_NM
		      					, T.UPJANGNM
		      					, F1.BIZ_DETAIL AS BIZ_DETAIL_MAIN
		      					, F2.BIZ_DETAIL
		      					, F1.CONTRACT_TERM AS CONTRACT_TERM_MAIN
		      					, F2.CONTRACT_TERM
	     			    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
												CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
			    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
			    							END 
						  		   END AS CK_AMOUNT
	      						, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
													CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
			    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
			    					  			END 
						  		  END AS JI_AMOUNT
						 		, DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE	
						 		
						 		
						 		, T.INCOME_PRICE  --매입차감단가
								, T.INCOME_SUM  --매입차감합계		
  						FROM
									(
										SELECT	
										<#if schMainUpjang?has_content || schUpjang?has_content>
											/*+ PUSH_PRED(A) */
										<#else>
											/*+ LEADING(Z) */
										</#if>
											 Z.MAIN_UPJANG	
                                      		, A.TRANS_UPJANG AS UPJANG
											<#if schGubun=="1">
				      						, A.TRANS_DATE
			      							<#else>
									  		, A.MG_DATE AS TRANS_DATE
           									</#if>
				      						, A.ITEM_CODE
				      						, A.ITEM_NAME
				      						, A.ITEM_SIZE
				      						, A.TRANS_UOM
				      						, A.TRANS_TYPE
				      						, A.TRANS_QTY
											<#if schPrice=="2">
				      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
			      							<#else>
				      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
				      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
           									</#if>
                                            , NVL(A.UNIT_PRICE, 0) AS UNIT_PRICE
                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
                      						, NVL(A.SALE_VAT, 0) AS SALE_VAT
				      						, A.TAX_CODE
				      						, A.FLAG
				      						, B2.DEPT_ID
				      						, D.CC_NM
				     						, B2.UPJANGNM
         									/*검색 조건 : CK물류비제외*/
         									<#if schChk1?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
													 ELSE NVL(C2.FM_SALE_RATE, 0)
													END)
									 		ELSE 
													(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
													END)
									 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
				      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
				      						<#else>
				      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
				      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
											</#if>
         									/*검색 조건 : 지급수수료제외*/
         									<#if schChk2?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
													ELSE NVL(J2.FM_SALE_RATE, 0)
													END)
									  		 ELSE 
													(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
													END)
									  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
				     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
				      						<#else>
				      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
				     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
											</#if>
         									/*검색 조건 : 장려금제외*/
         									<#if schChk3?has_content>
				      			    		, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
										 			ELSE NVL(S2.FM_SALE_RATE, 0)
										 		END)
									  		 ELSE 
													(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
													ELSE NVL(S2.FM_NOSALE_RATE, 0)
													END)
											 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
				     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
				      					<#else>
								 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
				     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
										</#if>
										, NVL(A.UNIT_AMOUNT, 0) AS UNIT_AMOUNT
			    						, NVL((INFO.ITEM_PRICE * ((INFO.DELY_DS_RATE + INFO.DELY_TC_RATE + INFO.DELY_DC_RATE + INFO.DELY_GS_RATE + INFO.DELY_BH_RATE + INFO.DELY_PK_RATE)*(0.01))),0) AS INCOME_PRICE --매입차감단가
    									, NVL(A.TRANS_QTY * ((INFO.DELY_DS_RATE + INFO.DELY_TC_RATE + INFO.DELY_DC_RATE + INFO.DELY_GS_RATE + INFO.DELY_BH_RATE + INFO.DELY_PK_RATE)*(0.01)*INFO.ITEM_PRICE),0) AS INCOME_SUM --매입차감합계
 								FROM (
 										SELECT 
												A.TRANS_UPJANG	,A.TRANS_DATE		,A.MG_DATE		,A.ITEM_CODE
												,A.ITEM_NAME	,A.ITEM_SIZE		,A.TRANS_UOM	,A.TRANS_TYPE
												,A.TRANS_QTY	,A.UNIT_PRICE		,A.UNIT_AMOUNT	,A.TAX_CODE
												,A.TRANS_MPRICE	,A.TRANS_MAMOUNT	,A.TRANS_MVAT	,A.SALE_PRICE
												,A.SALE_AMOUNT	,A.SALE_VAT			,A.SUBINV_CODE	,DECODE(SUBSTR(A.TRANS_DATE, 1, 6), SUBSTR(A.MG_DATE, 1, 6), A.TRANS_DATE, A.MG_DATE) AS TRANS_DATE2
												,A.CENTER_CODE		,A.CUSTCD		,'1' AS FLAG
												FROM (
															SELECT 
															
																	DT.MG_NO AS TRANS_ID,  /* 자재수불번호 */
															       SL.CUST_GR_DATE AS TRANS_DATE,  /* 판매일자 */
															       DT.MG_DATE AS MG_DATE,  /* 수불일자*/
															       
															--	   CASE
															--        WHEN SUBSTR(DT.MOVEMENT_TYP,0,2)='25' THEN 'FO'
															--        WHEN DT.PROC_TYP_CD IS NULL AND DT.IVT_INSP_NO IS NOT NULL THEN '재고조정'
															--        WHEN DT.PROC_TYP_CD IS NULL AND DT.IVT_INSP_NO IS NULL THEN 'INV'
															--        ELSE 'PO'
															--      END AS SOURCE_TYPE,  /* FO, PO, INV, 재고조정 */
															--      DT.MOVEMENT_TYP AS MVT,                                                             /*이동유형 */
															       CASE
															         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NULL THEN 'O002'         /* 재고이동 - 이동출고   */
															         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NOT NULL THEN 'I002'      /*재고이동 - 이동입고  */
															         WHEN DT.MOVEMENT_TYP = '251'OR DT.MOVEMENT_TYP = '252' THEN 'O001'      /* POS 매출 유형  */
															         WHEN DT.MOVEMENT_TYP = '701' OR DT.MOVEMENT_TYP = '702' THEN 'O004'      /* 재고실사 */
         															 WHEN DT.MOVEMENT_TYP ='261' OR DT.MOVEMENT_TYP = '262' THEN 'O003'      /* 대표창고 수불 단수차 원가 처리 2018.04.11 최학진 */
         															 WHEN ((DT.MOVEMENT_TYP ='197' OR DT.MOVEMENT_TYP = '198') AND (NVL(GI_BUY_AMT, 0) <> 0 OR NVL(GI_MGT_AMT, 0) <> 0)) THEN 'O004'      /* 재고실사 */
															         ELSE 'I001'
															       END AS TRANS_TYPE,
															       CASE
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)
															       END AS TRANS_QTY,             /* 수량 */
															       CASE
															         WHEN DT.PROC_TYP_CD IS NOT NULL THEN ROUND(DECODE(DT.GR_QTY,NULL,DT.GI_BUY_AMT/DT.GI_PURC_QTY,DT.GR_BUY_AMT/DT.GR_PURC_QTY),2) --20151022
															         WHEN DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_BUY_PRICE,DT.GR_BUY_PRICE)
															       END AS UNIT_PRICE,           /* 매입단가 */
															       CASE
															         WHEN DT.PROC_TYP_CD IS NOT NULL THEN PO.MGT_PRICE   --20151022
															         WHEN DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_PRICE,DT.GR_MGT_PRICE)
															       END AS TRANS_MPRICE,         /* 관리단가 */
															       CASE WHEN PO.DUTY_FREE_YN ='1' THEN
															         CASE
															           WHEN DT.PROC_TYP_CD IS NOT NULL THEN DECODE(MOD(TO_NUMBER(DT.MOVEMENT_TYP),2), 0, -1, 1) * ROUND(PO.MGT_PRICE*0.1) --20151022
															           WHEN DT.PROC_TYP_CD IS NULL THEN DECODE(MOD(TO_NUMBER(DT.MOVEMENT_TYP),2), 0, -1, 1) * DECODE(DT.GR_QTY,NULL,ROUND(DT.GI_MGT_PRICE*0.1),ROUND(DT.GR_MGT_PRICE*0.1)) --20151022
															         END
															       ELSE 0
															       END AS TRANS_MVAT,                                                               /* 관리금액 * 10% */
															--       CASE
															--         WHEN DT.PROC_TYP_CD IS NOT NULL THEN ROUND(PO.MGT_PRICE/DT.PURC_UNIT_RATE,2)  --20151022
															--         WHEN DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_PRICE,DT.GR_MGT_PRICE)
															--       END AS MARGIN_PRICE,           /* 내부관리단가.*/
															       CASE
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN ROUND(DECODE(DT.GR_QTY,NULL,DT.GI_BUY_AMT*-1,DT.GR_BUY_AMT*-1),2)
															         ELSE ROUND(DECODE(DT.GR_QTY,NULL,DT.GI_BUY_AMT,DT.GR_BUY_AMT),2)
															       END AS UNIT_AMOUNT,                 /* 매입단가 * 수량 */
															       CASE
															         WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY) --20151022
															         WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1) --20151022
															         WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT,DT.GR_MGT_AMT)
															         WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT*-1,DT.GR_MGT_AMT*-1)
															       END AS TRANS_MAMOUNT,                 /* 관리단가 * 수량 */
															--       CASE
															--         WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY) --20151022
															--         WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1) --20151022
															--         WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT,DT.GR_MGT_AMT)
															--         WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT*-1,DT.GR_MGT_AMT*-1)
															--       END AS MARGIN_AMOUNT,                 /* 관리단가 * 수량 */
															--       CASE WHEN PO.DUTY_FREE_YN ='1' THEN
															--         CASE
															--           --WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN ROUND(DT.GR_PURC_QTY*PO.MGT_PRICE,2)*0.1
															--           --WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN ROUND(DT.GR_PURC_QTY*PO.MGT_PRICE,2)*0.1 * -1
															--           WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*0.1,DT.GR_PURC_QTY*0.1) --20151022
															--           WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*0.1*-1,DT.GR_PURC_QTY*0.1*-1) --20151022
															--           WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT*0.1,DT.GR_MGT_AMT*0.1)
															--           WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT*0.1*-1,DT.GR_MGT_AMT*0.1*-1)
															--         END
															--         ELSE 0
															--       END AS MARGIN_VAT,            /* 관리금액 * 10% */
															--       DT.PO_NO AS PO_NO,                                        /* 발주번호 */
															--       DT.PO_LNO AS PO_LNO,                                       /* 발주항번*/
															--       NVL(PO.LEGCY_REQ_LNO, PO.PO_LNO) AS SOURCE_ID,             /* 소스문서 ID */
															--       SL.MU_CD AS TRANS_MU_CD,         /*  MU 코드*/
															--       SL.CC_CD AS TRANS_DEPT_ID,       /* CC 코드*/
															       SL.SHOP_CD AS TRANS_UPJANG,    /* 업장코드 */
															       SL.CUST_WH_CD AS SUBINV_CODE,     /* 창고코드*/
															--       CASE
															--         --WHEN DT.MOVEMENT_TYP ='701' OR DT.MOVEMENT_TYP = '702' THEN (SELECT JR.DR_ACC_CD FROM ESIJRNL JR WHERE JR.JRNL_TYP_CD = DT.JRNL_TYP_CD) /* 재고실사 계정코드*/
															--         WHEN DT.MOVEMENT_TYP ='701' OR DT.MOVEMENT_TYP = '702' THEN (SELECT MAX(JR.DR_ACC_CD) FROM ESIJRNL JR WHERE JR.SYS_ID = DT.SYS_ID AND JR.COMP_CD = DT.COMP_CD AND JR.JRNL_TYP_CD = DT.JRNL_TYP_CD AND JR.MG_CLS_CD = 'GI') /* 재고실사 계정코드*/
															--         ELSE PO.ACC_CD                                                          /* ESPPODT 계정코드*/
															--       END AS ACCTCD,                                      /* 계정코드 */
															       DT.ITEM_CD AS ITEM_CODE,                                  /* 품목코드 */
															       MT.ITEM_NM AS ITEM_NAME,                                   /* 품목명 */
															       MT.SPEC AS ITEM_SIZE,                                      /*  규격 */
															       DECODE(PO.DUTY_FREE_YN,'1','100','3','210','220') AS TAX_CODE,             /* 과면세 코드 */
															       MT.PURC_UNIT_CD AS TRANS_UOM,                             /* 구매단위 */
															--       MT.PURC_IO_UNIT_CD AS UOM_CODE,                           /* 수불단위 */
															--       MT.PURC_UNIT_RATE AS UNIT_RATE,                        /* 관리단위환산율 */
															--       DT.GR_QTY AS UOM_QTY,                                 /* 수불에 이미 환산 수량으로 입고  */
															       DT.VD_CD AS CUSTCD,                                       /*  매입처 */
															--       PH.LEGCY_SO_TYP_CD AS PO_TYPE,                           /*  구매유형 */
															       PO.WH_CNTR_CD AS CENTER_CODE,                             /* 센터코드 */
															--       NVL(( SELECT MAX(SLIP_YN) FROM ESIFIHD WHERE SYS_ID = DT.SYS_ID AND COMP_CD = DT.COMP_CD AND MG_NO = DT.MG_NO),-1)  AS GANO,  /* 전표화 여부 */
															--       PO.BUDGET_USE_DEPT_CD AS BUDDEPT_ID,                      /* 예산 CC 코드 */
															       SL.SAL_PRICE AS SALE_PRICE,                               /* 외부판매단가 */
															--       CASE
															--        WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN (DT.GR_QTY * SL.SAL_PRICE)*-1
															--         ELSE (DT.GR_QTY * SL.SAL_PRICE)
															--        END AS SALE_AMOUNT,                                     /* 외부판매단가 * 수량 */
															        CASE
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN SL.SAL_PRICE_AMT*-1
															         ELSE SL.SAL_PRICE_AMT
															       END AS SALE_AMOUNT,                                     /* 외부판매단가 * 수량 */
															       --CASE WHEN MT.ACC_TAX_CD = '1' THEN
															       CASE WHEN PO.DUTY_FREE_YN ='1' THEN
															         CASE
															           WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN SL.SAL_PRICE_AMT * 0.1 * -1
															           ELSE SL.SAL_PRICE_AMT * 0.1
															         END
															       ELSE 0
															       END AS SALE_VAT,
															       SL.CUST_GR_DATE AS STD_DATE1,
															       DT.MG_DATE AS STD_DATE2                                        /*  외부판매금액 * 10% */
															--       SL.SAL_EVNT_PRICE AS SAL_EVNT_PRICE,                    /* 판매기획단가 */
															--       SL.SAL_STRA_PRICE AS SAL_STRA_PRICE,                    /*  판매전략단가 */
															--       SL.SAL_ENCO_PRICE AS SAL_ENCO_PRICE,                    /* 판매장려단가*/
															--       SL.SAL_OPER_PRICE AS SAL_OPER_PRICE,                    /* 판매운영단가 */
															--       DT.CUST_WH_CD AS SCUSTCD,                                  /*  매출처 */
															--       CASE WHEN PH.PO_TYP = 'BP' AND PH.PO_DTL_CD = 'Q' THEN 'Y'
															--         ELSE 'N'
															--       END AS CARD_PO_YN,                                     /* 법인카드 현지구매 정산 */
															--       DT.REG_ID,
															--       DT.REG_DT,
															--       DT.MOD_ID,
															--       DT.MOD_DT
																
															 FROM EPROCUSR.ESIMGHD HD,                                                /* 수불헤더*/
															      EPROCUSR.ESIMGDT DT,                                               /* 수불상세 */
															      EPROCUSR.ESPPODT PO,                                              /* 발주 상세 */
															      EPROCUSR.ESPPOHD PH,                                              /* 발주 헤더 */
															      EPROCUSR.ESMMTGL MT,                                              /* 품목마스터 */
															      EPROCUSR.ESISALP SL                                               /* 판매단가 */
															      
																<#if schPbYn=="Y">
																  , FSI_PB_MST PB
																</#if>
															      
															WHERE HD.SYS_ID = '100'
															  AND HD.COMP_CD = 'HFC'
															  AND HD.BU_CD = '2000'
															  AND HD.SYS_ID = DT.SYS_ID
															  AND HD.COMP_CD = DT.COMP_CD
															  AND HD.WH_CD = DT.WH_CD
															  AND HD.ITEM_CD = DT.ITEM_CD
															 <#if schPbYn=="Y">
															  AND DT.ITEM_CD = PB.ITEM_CODE
                      										  AND PB.START_DATE <= :schToDate AND PB.END_DATE >= :schFromDate
		              										  AND PB.USE_YN = 'Y'
		              										  AND PB.MU_CD='2004'
															 </#if>
															  
															  
															  AND DT.MOVEMENT_TYP NOT IN ('561','562','998','999','901','902','801','802','111','112','211','212')   /* 기초 , 기말 재고,배송입출고, 직송 가상입출고  제외 */
															  --AND DT.MOVEMENT_TYP IN ('115','132','147','148','651','652') 
															  --AND DT.MOVEMENT_TYP IN ('101','102','105','106','115','123','132','144','147','148','151','152','153','154','155','156','157','158','161','162','163','165','167','171','172','181','182','185','186','195','196','197','198','251','252','261','262','301','311','312','321','322','331','332','351','352','511','512','651','652','701','702','711','712')
															  
															  AND DT.SYS_ID = PO.SYS_ID
															  AND DT.COMP_CD = PO.COMP_CD
															  AND DT.PO_NO = PO.PO_NO
															  AND DT.PO_LNO = PO.PO_LNO
															  AND DT.SYS_ID = PH.SYS_ID
															  AND DT.COMP_CD = PH.COMP_CD
															  AND DT.PO_NO = PH.PO_NO
															  AND DT.SYS_ID = MT.SYS_ID
															  AND DT.ITEM_CD = MT.ITEM_CD
															  AND DT.SYS_ID = SL.SYS_ID
															  AND DT.COMP_CD = SL.COMP_CD
															  AND DT.MG_NO = SL.MG_NO
															  AND DT.STS <> 'D'
															  
															  AND SUBSTR(SL.CUST_WH_CD, 1, 2) = 'S1'
															  --AND SL.CUST_WH_CD LIKE 'S1%'															  
---															  AND (TRANS_TYPE IN '_002' OR TRANS_TYPE = 'I001' )
															/*
															  AND (SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NOT NULL OR 
																	  		(
																	  			SUBSTR(DT.MOVEMENT_TYP,0,1) <> '3'
																	  			AND DT.MOVEMENT_TYP <> '251' AND DT.MOVEMENT_TYP <> '252'
																	  			AND DT.MOVEMENT_TYP <> '701' AND DT.MOVEMENT_TYP <> '702'
																	  		)
															  	)
															*/
															
																AND SL.SHOP_CD IN (
																	SELECT UPJANG FROM ST_UPJANG WHERE USE_YN = 'Y'
																		<#if schCustCd?has_content>
																			AND CUSTCD = :schCustCd
															  			</#if>
																		<#if schCc?has_content>
           																	AND CC_CD = :schCc
           																</#if>
																	)
																AND SL.SYS_ID = '100'
                                								AND SL.COMP_CD = 'HFC'  
															  <#if schGubun=="1">
															    AND SL.TRANS_DATE2 BETWEEN  :schFromDate AND :schToDate
																--AND DECODE (SUBSTR (SL.CUST_GR_DATE, 1, 6), SUBSTR (DT.MG_DATE, 1, 6), SL.CUST_GR_DATE, DT.MG_DATE)  BETWEEN :schFromDate AND :schToDate
																--AND (SL.CUST_GR_DATE BETWEEN :schFromDate AND :schToDate
                                								--OR DT.MG_DATE BETWEEN :schFromDate AND :schToDate )
															  <#else>
																AND DT.MG_DATE BETWEEN :schFromDate AND :schToDate
															  </#if>
															  
															  <#if schCenter?has_content>
																<#if schCenter != '*'>
																	AND PO.WH_CNTR_CD = :schCenter
															    </#if>
															  </#if>
															  
															  <#if schCustCd?has_content>
																AND DT.VD_CD = :schCustCd
															  </#if>
												
												) A WHERE DECODE (SUBSTR (A.STD_DATE1, 1, 6), SUBSTR (A.STD_DATE2, 1, 6), A.STD_DATE1, A.STD_DATE2)  BETWEEN :schFromDate AND :schToDate
 											
 												UNION ALL
	
												SELECT 
													TO_CHAR(B.TRANS_UPJANG) AS TRANS_UPJANG		,B.TRANS_DATE						,B.TRANS_DATE AS MG_DATE
													,B.ITEM_CODE								,B.ITEM_NAME						,B.ITEM_SIZE
													,B.TRANS_UOM								,B.TRANS_TYPE						,B.TRANS_QTY
													,B.UNIT_PRICE								,B.UNIT_AMOUNT AS UNIT_AMOUNT		,B.TAX_CODE
													,B.TRANS_MPRICE								,B.TRANS_MAMOUNT AS TRANS_MAMOUNT	,B.TRANS_MVAT 
													,B.SALE_PRICE								,B.SALE_AMOUNT						,B.SALE_VAT
													,B.SUBINV_CODE								,B.TRANS_DATE AS TRANS_DATE2		,B.CENTER_CODE
													,TO_CHAR(B.CUSTCD) AS CUSTCD				,'2' AS FLAG 
												FROM  FMS_TRANSACTION B
												  <#if schPbYn=="Y">
													, FSI_PB_MST PB
												  </#if>
												WHERE 1=1
													--AND SUBSTR(B.SUBINV_CODE, 1, 2) = 'S1'
												<#if schPbYn=="Y"> 
												  AND B.ITEM_CODE = PB.ITEM_CODE
												</#if> 
												  AND (B.TRANS_TYPE IN '_002' OR B.TRANS_TYPE = 'I001' )
												<#if schGubun=="1">
												  AND B.TRANS_DATE BETWEEN :schFromDate AND :schToDate
												<#else>
												  AND B.TRANS_DATE BETWEEN :schFromDate AND :schToDate
												</#if>
												<#if schCenter?has_content>
												 <#if schCenter != '*'>
												  AND B.CENTER_CODE = :schCenter
												 </#if>
												</#if>
												<#if schCustCd?has_content>
												  AND B.CUSTCD = :schCustCd
												</#if>
 								) A
                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
             																									/*검색 조건 : 본사*/
           																										<#if schMainUpjang?has_content>
           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           																										</#if>
            																									 /*검색 조건 : 사업장*/
           																										<#if schUpjang?has_content>
           																										AND B2.UPJANG = :schUpjang
           																										</#if>
																												 AND A.TRANS_UPJANG = B2.UPJANG
																				INNER JOIN FMS_UPJANG Z ON 1 = 1
            																									 /*검색 조건 : 영업담당*/
           																										<#if schSabun?has_content>
           																		  								 AND Z.PART_SALES_SABUN = :schSabun
																												</#if>
            																									 /*검색 조건 : 세부직군*/
           																										<#if schBizDetail?has_content>
           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																												</#if>
																				  								 AND A.TRANS_UPJANG = Z.UPJANG
																				INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
           																												/*검색 조건 : 관리부서(팀)*/
           																												<#if schTm?has_content>
           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
           																												</#if>
           																												/*검색 조건 : CC */
           																												<#if schCc?has_content>
           																												AND D.CC_CD = :schCc
           																												</#if>
																														AND  B2.DEPT_ID = D.DEPT_ID
                                        										--LEFT JOIN HLDC_PO_ITEM_MST M ON SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
                                                               					--											 AND A.ITEM_CODE = M.ITEM_CODE
                                                               						LEFT JOIN EPROCUSR.ESMMTGL M ON A.ITEM_CODE = M.ITEM_CD
                                                               																			--M.ITEM_CD LIKE 'F%' 
                                                               																			AND SUBSTR(M.ITEM_CD, 1, 1) = 'F'
                                                               																			AND M.SYS_ID = '100'
                                                               																			AND M.STS <> 'D'
                                                               					LEFT JOIN EPROCUSR.ESPINFO INFO ON INFO.SYS_ID = '100'
      																											AND INFO.COMP_CD = 'HFC'
      																											AND INFO.ITEM_CD = M.ITEM_CD
                                      																			AND INFO.PURC_OPER_ORG_SN IN (SELECT  WHC.OPER_ORG_SN_PURC FROM EPROCUSR.ESPSWHC WHC WHERE  WHC.SYS_ID='100' AND WHC.COMP_CD = 'HFC' AND WHC.WH_CNTR_CD = A.CENTER_CODE)
                                      																			AND :schFromDate BETWEEN INFO.APPLY_SD AND INFO.APPLY_ED
                                      																			AND INFO.STS <> 'D'
                                      																			
                                   											-- 추가 : 특약사항관련 : 중분류, 소분류
         																	<#if schChk1?has_content>
																			LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND C1.SUBINV_CODE = A.SUBINV_CODE
																													AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																													--AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																													AND M.CATE3_CD = C1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND C2.SUBINV_CODE = A.SUBINV_CODE
																													AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																													--AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																													AND M.CATE4_CD = C2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk2?has_content>
																			LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND J1.SUBINV_CODE = A.SUBINV_CODE
																													AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																													--AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																													AND M.CATE3_CD = J1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND J2.SUBINV_CODE = A.SUBINV_CODE
																													AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																													--AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																													AND M.CATE4_CD = J2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk3?has_content>
																			LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND S1.SUBINV_CODE = A.SUBINV_CODE
																													AND S1.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																													--AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																													AND M.CATE3_CD = S1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND S2.SUBINV_CODE = A.SUBINV_CODE
																													AND S2.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																													--AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																													AND M.CATE4_CD = S2.ITEM_CLASS /* 소분류 */
																			</#if>
										
<#if newGubun=="Y">
								UNION ALL

                                SELECT
                                          Z.MAIN_UPJANG	
                                        , A.TRANS_UPJANG AS UPJANG
                  											<#if schGubun=="1">
                  				      			  , A.TRANS_DATE
                  			      					<#else>
                  									  	, A.MG_DATE AS TRANS_DATE
                             						</#if>
                                        , A.ITEM_CODE
                                        , A.ITEM_NAME
                                        , A.ITEM_SIZE
                                        , A.TRANS_UOM
                                        , A.TRANS_TYPE
                                        , A.TRANS_QTY
              											    <#if schPrice=="2">
              				      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
              				      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
              				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
              			      							<#else>
              				      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
              				      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
              				      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
              				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
                         								</#if>
                                        , NVL(A.UNIT_PRICE, 0) AS UNIT_PRICE
                                        , NVL(A.SALE_PRICE, 0) AS SALE_PRICE
                                        , NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
                                        , NVL(A.SALE_VAT, 0) AS SALE_VAT
                                        , A.TAX_CODE
                                        , '1'
                                        , B2.DEPT_ID
                                        , D.CC_NM
                                        , B2.UPJANGNM
                                        
                       									/*검색 조건 : CK물류비제외*/
                       									<#if schChk1?has_content>
              				      						, CASE WHEN A.TAX_CODE = '100' THEN
              													    (CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
              													     ELSE NVL(C2.FM_SALE_RATE, 0)
              													     END)
              									 		      ELSE 
              													    (CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
              										 			     ELSE NVL(C2.FM_NOSALE_RATE, 0)
              													     END)
              									 		      END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
              				      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
              				      						<#else>
              				      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
              				      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
                  											</#if>
                       									/*검색 조건 : 지급수수료제외*/
                       									<#if schChk2?has_content>
              				      						, CASE WHEN A.TAX_CODE = '100' THEN
              													    (CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
              													     ELSE NVL(J2.FM_SALE_RATE, 0)
              													     END)
              									  		    ELSE 
              													    (CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
              										 			     ELSE NVL(J2.FM_NOSALE_RATE, 0)
              													     END)
              									  		    END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
              				     				 		  , FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
              				      						<#else>
              				      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
              				     				 		  , 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
                  											</#if>
                       									/*검색 조건 : 장려금제외*/
                       									<#if schChk3?has_content>
            				      			    		, CASE WHEN A.TAX_CODE = '100' THEN
            													      (CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
            										 			       ELSE NVL(S2.FM_SALE_RATE, 0)
            										 		         END)
            									  		      ELSE 
              													    (CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
              													     ELSE NVL(S2.FM_NOSALE_RATE, 0)
              													     END)
              											      END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
              				     			  		  , FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
              				      					  <#else>
              								 	 	      , 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
              				     			  		  , 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
              										      </#if>
              										      
              										  	, NVL(A.UNIT_AMOUNT, 0) AS UNIT_AMOUNT
														, NVL((INFO.ITEM_PRICE * ((INFO.DELY_DS_RATE + INFO.DELY_TC_RATE + INFO.DELY_DC_RATE + INFO.DELY_GS_RATE + INFO.DELY_BH_RATE + INFO.DELY_PK_RATE)*(0.01))),0) AS INCOME_PRICE --매입차감단가
              										  	, NVL(A.TRANS_QTY * ((INFO.DELY_DS_RATE + INFO.DELY_TC_RATE + INFO.DELY_DC_RATE + INFO.DELY_GS_RATE + INFO.DELY_BH_RATE + INFO.DELY_PK_RATE)*(0.01)*INFO.ITEM_PRICE),0) AS INCOME_SUM --매입차감합계    
                                  FROM  FCUS.VO_PO_TRANSACTION_SALE_HNR A
                                 INNER JOIN ST_UPJANGV B2 
                                   ON 1 = 1
																	/*검색 조건 : 본사*/
																	<#if schMainUpjang?has_content>
																	AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
																	</#if>
																	 /*검색 조건 : 사업장*/
																	<#if schUpjang?has_content>
																	AND B2.UPJANG = :schUpjang
																	</#if>
                                  AND A.TRANS_UPJANG = B2.UPJANG
                                INNER JOIN FMS_UPJANGV Z
                                   ON 1 = 1
															    /*검색 조건 : 영업담당*/
															    <#if schSabun?has_content>
							  								  AND Z.PART_SALES_SABUN = :schSabun
												          </#if>
															    /*검색 조건 : 세부직군*/
															    <#if schBizDetail?has_content>
							  								  AND Z.BIZ_DETAIL = :schBizDetail
												          </#if>
                                  AND A.TRANS_UPJANG = Z.UPJANG
                                INNER JOIN HLDC_SC_DEPT_V D 
                                   ON  1 = 1
																	/*검색 조건 : 관리부서(팀)*/
																	<#if schTm?has_content>
																	AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
																	</#if>
																	/*검색 조건 : CC */
																	<#if schCc?has_content>
																	AND D.CC_CD = :schCc
																	</#if>
                                  AND B2.DEPT_ID = D.DEPT_ID
                                LEFT JOIN EPROCUSR.ESMMTGL M 
                                  ON A.ITEM_CODE = M.ITEM_CD
                                 AND M.SYS_ID = '100'
                                 AND M.STS <> 'D'
                                 
                                 LEFT JOIN EPROCUSR.ESPINFO INFO ON INFO.SYS_ID = '100'
      															AND INFO.COMP_CD = 'HFC'
                                      							AND INFO.ITEM_CD = M.ITEM_CD
                                      							AND INFO.PURC_OPER_ORG_SN IN (SELECT  WHC.OPER_ORG_SN_PURC FROM EPROCUSR.ESPSWHC WHC WHERE  WHC.SYS_ID='100' AND WHC.COMP_CD = 'HFC' AND WHC.WH_CNTR_CD = A.CENTER_CODE)
                                      							AND :schFromDate BETWEEN INFO.APPLY_SD AND INFO.APPLY_ED
                                      							AND INFO.STS <> 'D'
                                      							
           											-- 추가 : 특약사항관련 : 중분류, 소분류
																<#if schChk1?has_content>
																LEFT JOIN FMS_SALE_RATE C1 ON 
																  C1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
 																 AND C1.SUBINV_CODE = A.SUBINV_CODE
																 AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																 AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																 AND M.CATE3_CD = C1.ITEM_CLASS /* 중분류 */
																LEFT JOIN FMS_SALE_RATE C2 
																  ON C2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND C2.SUBINV_CODE = A.SUBINV_CODE
																 AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																 AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																 AND M.CATE4_CD = C2.ITEM_CLASS	/* 소분류 */
																</#if>
																<#if schChk2?has_content>
																LEFT JOIN FMS_SALE_RATE J1 
																  ON J1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND J1.SUBINV_CODE = A.SUBINV_CODE
																 AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																 AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																 AND M.CATE3_CD = J1.ITEM_CLASS /* 중분류 */
																LEFT JOIN FMS_SALE_RATE J2 
																  ON J2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND J2.SUBINV_CODE = A.SUBINV_CODE
																 AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																 AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																 AND M.CATE4_CD = J2.ITEM_CLASS	/* 소분류 */
																</#if>
																<#if schChk3?has_content>
																LEFT JOIN FMS_SALE_RATE S1 
																  ON S1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND S1.SUBINV_CODE = A.SUBINV_CODE
																 AND S1.CASH_CODE = '003'			/* 장려금(003) */
																 AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																 AND M.CATE3_CD = S1.ITEM_CLASS /* 중분류 */
																LEFT JOIN FMS_SALE_RATE S2 
																  ON S2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND S2.SUBINV_CODE = A.SUBINV_CODE
																 AND S2.CASH_CODE = '003'			/* 장려금(003) */
																 AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																 AND M.CATE4_CD = S2.ITEM_CLASS /* 소분류 */
																</#if>
                                WHERE A.MG_DATE BETWEEN :schFromDate AND :schToDate
                                   AND ( A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )                                
</#if>
										
								) T	 INNER JOIN FMS_UPJANG F1 ON T.MAIN_UPJANG = F1.UPJANG
									 INNER JOIN FMS_UPJANG F2 ON T.UPJANG = F2.UPJANG
						) X  
	 					GROUP BY  X.CC_NM, X.MAIN_UPJANG, X.UPJANG, X.UPJANGNM
				) RS
				GROUP BY RS.CC_NM
					, RS.MAIN_UPJANG
					, RS.MAIN_UPJANGNM
					<#if schView == '2'>	
					/* 업장별 집계 */
					, RS.UPJANG
					, RS.UPJANGNM
					, RS.BIZ_DETAIL
					<#else>
					, RS.BIZ_DETAIL_MAIN
					</#if>		
		
		
</#if>		]]></statement>




	<!-- 매입결과보고자료 목록을 조회한다.(구) -->
	<statement name="selectListTab6_old" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab6_old */
		<![CDATA[
		SELECT UPJANGNM_DISP,
		       CUSTNM,
		       CLASS_NAME,
		       SUM(TRANS_AMT) TRANS_AMT,
		       SUM(TRANS_VAT) TRAMS_VAT,
		       SUM(SALE_AMT) SALE_AMT,
		       SUM(SALE_AMT)+SUM(SALE_VAT) SALE_SUM,
		       SUM(SALE_AMT)-SUM(TRANS_AMT) EL_AMT,
		       ROUND( DECODE(SUM(SALE_AMT),0,0,(SUM(SALE_AMT)-SUM(TRANS_AMT))/SUM(SALE_AMT)*100) ,1) EL_RATE,
		       (SUM(TRANS_AMT)+SUM(TRANS_VAT)) DIF_AMT
               --FORMNM
		FROM   (
		SELECT UPJANGNM_DISP ,
		       CUSTNM ,
		       (CASE WHEN SUBSTR(ITEM_CODE, 1, 1) = '7' THEN '보정분' ELSE CLASS_NAME END) AS CLASS_NAME,
		       TRANS_AMT ,
		       TRANS_VAT ,
		       SALE_AMT ,
		       SALE_VAT 
		       /*( SELECT FORMNM FROM GA_DETAIL E, ST_PAYFORM F
		          WHERE A.GAMU = E.GAMU AND A.GADATE = E.GADATE AND A.GANO   = E.GANO
		            AND E.PAYMENT_FORMAT IS NOT NULL AND E.PAYMENT_GROUP = F.GROUPCD AND E.PAYMENT_FORMAT = F.FORMCD
		       ) FORMNM*/
		  FROM (
		        SELECT A.TRANS_UPJANG
		        	, B2.UPJANGNM AS UPJANGNM_DISP
		        	, A.CUSTCD
		        	, C.VD_NM  AS CUSTNM
		        	, MAX(A.ITEM_CODE) AS ITEM_CODE
		             , (SELECT D.CLASS_NAME FROM HLDC_PO_ITEM_CLASS D WHERE D.CLASS_CODE = A0.ITEM_CLASS2) AS CLASS_NAME
				     , SUM(CEIL(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS SALE_AMT
		             , DECODE(A.TAX_CODE,100,ROUND(SUM(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)) / 10),0)                  AS SALE_VAT
		             , SUM(CEIL(SALE_AMOUNT) + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1))  AS SALE_SUM
		             , SUM(CEIL(TRANS_MAMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS TRANS_AMT
		             , DECODE(A.TAX_CODE,100,ROUND(SUM(TRANS_MAMOUNT* DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)) / 10),0)                  AS TRANS_VAT
		             , SUM(CEIL(TRANS_MAMOUNT + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))  AS TRANS_SUM		             
<#if newGubun=="Y">
		          FROM FMS_TRANSACTION_ALL_V A, HLDC_PO_ITEM_MST A0 
<#else>
		          FROM FMS_TRANSACTION_V A, HLDC_PO_ITEM_MST A0 
</#if>
		             , ST_UPJANG B2
		             , VO_FC_VENDOR C
		             , HLDC_SC_DEPT_V D 
		 		WHERE 1 = 1
<#if newGubun=="Y">
		   		AND ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
		   		AND SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
           		AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		   		/*검색 조건 : 기간*/
           		AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
           		/*검색 조건 : 관리부서(팀)*/
           		<#if schTm?has_content>
           		AND D.TM_CD = :schTm
           		</#if>
           		/*검색 조건 : 센터*/     
           		<#if schCenter?has_content>
           		AND A.CENTER_CODE = :schCenter
           		</#if>
            	/*검색 조건 : 본사*/
           		<#if schMainUpjang?has_content>
           		AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           		</#if>       
            	 /*검색 조건 : 사업장*/       
           		<#if schUpjang?has_content>
           		AND B2.UPJANG = :schUpjang
           		</#if>
             	/*검색 조건 : 납품업체*/
           		<#if schCustCd?has_content>
           		AND A.CUSTCD = :schCustCd
           		</#if>
           		/*
           		AND EXISTS (
           					  SELECT 1
           					  FROM FMS_SALES
                       		  WHERE UPJANG = A.TRANS_UPJANG
                       		  AND   SALE_DATE = A.TRANS_DATE
                       		  AND   SUBINV_CODE = A.SUBINV_CODE
                       		  AND   TRANS_YN = 'Y'
           					)
           		*/			
		       AND A.ITEM_CODE = A0.ITEM_CODE(+)		/* 보정분 자재 포함 */
		       AND A.TRANS_UPJANG = B2.UPJANG
		       AND A.CUSTCD         = C.VD_CD(+)			/* 보정분 자재 포함 */
		   		AND B2.DEPT_ID = D.DEPT_ID
		       GROUP BY A.TRANS_UPJANG, B2.UPJANGNM, A.CUSTCD, C.VD_NM, A0.ITEM_CLASS2, A.TAX_CODE
		        ) A
		)
		GROUP BY UPJANGNM_DISP, CUSTNM, CLASS_NAME -- FORMNM
		]]>
	</statement>


	<!-- 매입결과보고자료 목록을 조회한다. -->
	<statement name="selectListTab6" type="select"><![CDATA[--마감여부에 따라 집계 또는 실시간 검색 추가 20170824 맹수영
<#if mCloseYn=="Y">

SELECT   Z.UPJANG
        , Z.UPJANGNM
        , CUSTCD
        ,(SELECT VD_NM FROM VO_FC_VENDOR C WHERE C.VD_CD = Z.CUSTCD ) CUSTNM
        , CLASS_NAME
        <#if schPrice=="2">
        , SUM(Z.TRANS_SUM_UNIT) TRANS_AMT  --매입액(vat별도)     
        , SUM(Z.TRANS_VAT_UNIT) TRAMS_VAT --매입부가세        
        <#else> 
        , SUM(Z.TRANS_SUM) TRANS_AMT  --매입액(vat별도)     
        , SUM(Z.TRANS_VAT) TRAMS_VAT --매입부가세        
        </#if>

         <#if schChk3?has_content>
          --장려금 제외
          , SUM(Z.SALE_TAX_S	- (CK_SALE_TAX + JI_SALE_TAX))	SALE_AMT					 /* 매출_과세 : 수수료 제외 */	
          , SUM(Z.SALE_TOT_S - (CK_SALE_NOTAX + JI_SALE_NOTAX) - (CK_SALE_TAX + JI_SALE_TAX)) SALE_SUM
          --장려금 제외
          <#else> 
          --장려금 포함
          , SUM(Z.SALE_TAX	- (CK_SALE_TAX + JI_SALE_TAX))	SALE_AMT					 /* 매출_과세 : 수수료 제외 */--매출액(vat별도)
          , SUM(Z.SALE_TOT - (CK_SALE_NOTAX + JI_SALE_NOTAX) - (CK_SALE_TAX + JI_SALE_TAX)) SALE_SUM  --매출액 vat포함
          --장려금 포함
          </#if>      
          
          
          
          <#if schPrice=="2">
          , ( SUM(Z.SALE_TAX	- (CK_SALE_TAX + JI_SALE_TAX)) - SUM(Z.TRANS_SUM_UNIT) )EL_AMT
          , ( SUM(Z.TRANS_SUM_UNIT)+SUM(Z.TRANS_VAT_UNIT)) AS DIF_AMT          
          <#else> 
          , ( SUM(Z.SALE_TAX	- (CK_SALE_TAX + JI_SALE_TAX)) - SUM(Z.TRANS_SUM) )EL_AMT
          , ( SUM(Z.TRANS_SUM)+SUM(Z.TRANS_VAT)) AS DIF_AMT
          </#if> 
FROM (
    SELECT B.UPJANG
          , B.UPJANGNM_DISP UPJANGNM
          , A.CUSTCD
          , A.ITEM_CODE
          ,(CASE WHEN SUBSTR(A.ITEM_CODE, 1, 1) = '7' THEN '보정분' 
            ELSE (SELECT D.CLASS_NAME 
                    FROM HLDC_PO_ITEM_CLASS D 
                   WHERE D.CLASS_CODE = (SELECT ITEM_CLASS2 
                                           FROM HLDC_PO_ITEM_MST M 
                                          WHERE M.ITEM_CODE =  A.ITEM_CODE
                                            AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F')
            ) END) CLASS_NAME
          , MAX(B.CONTRACT_TERM) AS CONTRACT_TERM	-- 업장_계약시작일
          , SUM(A.TRANS_SUM) TRANS_SUM
          , SUM(A.TRANS_VAT) TRANS_VAT
          --장려금 포함
          , SUM(DECODE(A.SALE_TAX,0,A.SALE_NOTAX,A.SALE_TAX))   AS  SALE_TAX								 /* 매출_과세 : 수수료 제외 */	
          , SUM(A.SALE_ALL) AS SALE_TOT			
          --장려금 포함
          --장려금 제외
           ,SUM(DECODE(A.SALE_TAX_S,0,A.SALE_NOTAX_S,A.SALE_TAX_S))   AS  SALE_TAX_S								 /* 매출_과세 : 수수료 제외 */	
          , SUM(A.SALE_ALL_S) AS SALE_TOT_S			
          --장려금 제외
          --CK수수료
          <#if schChk1?has_content>
           ,SUM(CK_SALE_NOTAX) AS CK_SALE_NOTAX
          ,SUM(CK_SALE_TAX) AS CK_SALE_TAX
          ,SUM(CK_SALE_VAT) AS CK_SALE_VAT
          <#else>
          ,0 AS CK_SALE_NOTAX
          ,0 AS CK_SALE_TAX
          ,0 AS CK_SALE_VAT
          </#if>
          --CK수수료
          --지급수수료
          <#if schChk2?has_content>
          ,SUM(JI_SALE_NOTAX) AS JI_SALE_NOTAX
          ,SUM(JI_SALE_TAX) AS JI_SALE_TAX
          ,SUM(JI_SALE_VAT) AS JI_SALE_VAT
          <#else>
          ,0 AS JI_SALE_NOTAX
          ,0 AS JI_SALE_TAX
          ,0 AS JI_SALE_VAT      
          </#if>
          , SUM(TRANS_SUM_UNIT) AS TRANS_SUM_UNIT
          , SUM(TRANS_VAT_UNIT) AS TRANS_VAT_UNIT
          --지급수수료    A,
    FROM FMS_BUY_SALE_SUM A,
         FMS_UPJANG B,
         HLDC_SC_DEPT_V C
    WHERE A.UPJANG = B.UPJANG
      AND B.DEPT_ID = C.CC_CD
 <#if schGubun=="1">
							AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
							<#else>
							AND A.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate
							</#if>
                           <#if schMainUpjang?has_content>
           					AND A.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           					</#if>							
							 /*검색 조건 : 사업장*/
							<#if schUpjang?has_content>
								AND A.UPJANG = :schUpjang
							</#if>
							/*검색 조건 : 팀 */
<#if schTm?has_content>
		AND C.TM_CD = IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
		</#if>
		/*검색 조건 : CC */
		<#if schCc?has_content>
		AND C.CC_CD = :schCc
		</#if>
	<#if schSabun?has_content>
	AND B.PART_SALES_SABUN = :schSabun   --영업사원
	</#if>
							/*검색 조건 : 센터*/     
							<#if schCenter?has_content>
								<#if schCenter != '*'>
								AND A.CENTER_CODE = :schCenter
								</#if>
							</#if>
							/*검색 조건 : 납품업체*/
							<#if schCustCd?has_content>
							AND A.CUSTCD = :schCustCd
							</#if>						
							/*검색 조건 : 세부직군*/
							<#if schBizDetail?has_content>
							AND A.BIZ_DETAIL_MAIN = :schBizDetail
							</#if>
GROUP BY  B.UPJANG
          , B.UPJANGNM_DISP 
          , A.CUSTCD
          ,A.ITEM_CODE
 ) Z
 GROUP BY UPJANGNM,UPJANG,CUSTCD,CLASS_NAME
ORDER BY  UPJANG           
          
          
 <#else>         
          
		SELECT
	  		  RS.UPJANG
			, RS.UPJANGNM
			, RS.CUSTCD
			, RS.CUSTNM
        	, (CASE WHEN SUBSTR(RS.ITEM_CODE, 1, 1) = '7' THEN '보정분' ELSE RS.CLASS_NAME END) AS CLASS_NAME
			, SUM(RS.TRANS_AMT) AS TRANS_AMT
			, SUM(RS.TRANS_VAT) AS TRAMS_VAT
			
			, SUM(RS.SALE_AMT) - SUM(RS.CK_SALE_AMT + RS.JI_SALE_AMT)  AS SALE_AMT

			, SUM(RS.SALE_AMT) - SUM(RS.CK_SALE_AMT + RS.JI_SALE_AMT)  +
			  SUM(RS.SALE_VAT)  - SUM(RS.CK_SALE_VAT + RS.JI_SALE_VAT ) AS SALE_SUM
			
			, SUM(RS.SALE_AMT) - SUM(RS.CK_SALE_AMT + RS.JI_SALE_AMT) - 
			  SUM(RS.TRANS_AMT) AS EL_AMT
			
			--, ROUND( DECODE(SUM(RS.SALE_AMT),0,0,(SUM(RS.SALE_AMT)-SUM(RS.TRANS_AMT))/SUM(RS.SALE_AMT)*100) ,1) AS EL_RATE
			
			, (SUM(RS.TRANS_AMT)+SUM(RS.TRANS_VAT)) AS DIF_AMT
		FROM
				(
				SELECT
		  			  X.UPJANG
					, X.UPJANGNM
					, X.CUSTCD
					, X.CUSTNM
					, MAX(X.ITEM_CODE) AS ITEM_CODE
                	, (SELECT D.CLASS_NAME FROM HLDC_PO_ITEM_CLASS D WHERE D.CLASS_CODE = X.ITEM_CLASS2) AS CLASS_NAME

					<#if schChk3?has_content>
			        , SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_AMT 
					, SUM(
						CASE WHEN X.FLAG = '1' THEN
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0.1,0))
						ELSE
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
						END
						) AS SALE_VAT
					, SUM(
						CASE WHEN X.FLAG = '1' THEN
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1.1,1))
						ELSE
							-- 보정분 : 장려금 적용 제외
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT
						END
						) AS SALE_SUM
					<#else>
					, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_AMT 
					, SUM(
						CASE WHEN X.FLAG = '1' THEN
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
						ELSE
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
						END
						) AS SALE_VAT 
					, SUM(
						CASE WHEN X.FLAG = '1' THEN
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1.1,1) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
						ELSE
							DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY) + X.SALE_VAT
						END
						) AS SALE_SUM 
					</#if>
					, SUM(ROUND(X.TRANS_MAMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS TRANS_AMT
           			--, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))           AS TRANS_VAT   /* 수불 부가세 필드 이용 */
           			--, SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))  AS TRANS_SUM
           			--매입부가세 계산방식 오류 수정 20180413 김호석 부가세 절대값(매입부가세단가)*수량
             		, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) )           AS TRANS_VAT
             		, SUM(ROUND(X.TRANS_MAMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))  AS TRANS_SUM
            			
					, SUM(ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS CK_SALE_AMT
					, SUM(DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0)) AS CK_SALE_VAT
					, SUM(ROUND(X.CK_AMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT / 10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)) AS CK_SALE_SUM

					, SUM(ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1))) AS JI_SALE_AMT
					, SUM(DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0)) AS JI_SALE_VAT
					, SUM(ROUND(X.JI_AMOUNT) + DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT / 10),0) * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)) AS JI_SALE_SUM



				FROM
						(
						SELECT
		        		  		  T.UPJANG
		      					, T.TRANS_DATE
		      					, T.ITEM_CODE
		      					, T.ITEM_NAME
		      					, T.ITEM_SIZE
		      					, T.TRANS_UOM
		      					, T.TRANS_TYPE
		      					, T.TRANS_QTY
		      					, T.TRANS_MPRICE
		      					, T.TRANS_MAMOUNT
		      					, T.TRANS_MVAT
		     	 				, T.SALE_PRICE
		      					, T.SALE_AMOUNT
		      					, T.SALE_VAT
		      					, T.TAX_CODE
		      					, T.FLAG
		      					, T.DEPT_ID
		      					, T.CC_NM
		      					, T.UPJANGNM
		      					, T.CUSTCD
		      					, T.CUSTNM
		      					, T.ITEM_CLASS2
	     			    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
												CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
			    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
			    							END 
						  		   END AS CK_AMOUNT
	      						, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
													CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
			    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
			    					  			END 
						  		  END AS JI_AMOUNT
						 		, DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE			
						FROM
								(
									SELECT
										<#if schMainUpjang?has_content || schUpjang?has_content>
											/*+ PUSH_PRED(A) */
										</#if>
                                        	A.TRANS_UPJANG AS UPJANG
											<#if schGubun=="1">
				      						, A.TRANS_DATE
			      							<#else>
									  		, A.MG_DATE AS TRANS_DATE
           									</#if>
				      						, A.ITEM_CODE
				      						, A.ITEM_NAME
				      						, A.ITEM_SIZE
				      						, A.TRANS_UOM
				      						, A.TRANS_TYPE
				      						, A.TRANS_QTY
											<#if schPrice=="2">
				      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
			      							<#else>
				      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
				      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
           									</#if>
                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
                      						, NVL(A.SALE_VAT, 0) AS SALE_VAT
				      						, A.TAX_CODE
				      						, A.FLAG
				      						, B2.DEPT_ID
				      						, D.CC_NM
				      						, B2.UPJANGNM
				      						, A.CUSTCD
				      						, C.VD_NM AS CUSTNM
				      						, M.ITEM_CLASS2
         									/*검색 조건 : CK물류비제외*/
         									<#if schChk1?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
													 ELSE NVL(C2.FM_SALE_RATE, 0)
													END)
									 		ELSE 
													(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
													END)
									 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
				      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
				      						<#else>
				      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
				      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
											</#if>
         									/*검색 조건 : 지급수수료제외*/
         									<#if schChk2?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
													ELSE NVL(J2.FM_SALE_RATE, 0)
													END)
									  		 ELSE 
													(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
													END)
									  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
				     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
				      						<#else>
				      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
				     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
											</#if>
         									/*검색 조건 : 장려금제외*/
         									<#if schChk3?has_content>
				      			    		, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
										 			ELSE NVL(S2.FM_SALE_RATE, 0)
										 		END)
									  		 ELSE 
													(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
													ELSE NVL(S2.FM_NOSALE_RATE, 0)
													END)
											 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
				     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
				      					<#else>
								 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
				     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
										</#if>
<#if newGubun=="Y">
							FROM FMS_TRANSACTION_ALL_V A
<#else>
							FROM FMS_TRANSACTION_V A
</#if>
                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
             																									/*검색 조건 : 본사*/
           																										<#if schMainUpjang?has_content>
           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           																										</#if>
            																									 /*검색 조건 : 사업장*/
           																										<#if schUpjang?has_content>
           																										AND B2.UPJANG = :schUpjang
           																										</#if>
																												 AND A.TRANS_UPJANG = B2.UPJANG
																				INNER JOIN FMS_UPJANG Z ON 1 = 1
            																									 /*검색 조건 : 영업담당*/
           																										<#if schSabun?has_content>
           																		  								 AND Z.PART_SALES_SABUN = :schSabun
																												</#if>
            																									 /*검색 조건 : 세부직군*/
           																										<#if schBizDetail?has_content>
           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																												</#if>
																				  								 AND A.TRANS_UPJANG = Z.UPJANG
																				LEFT JOIN VO_FC_VENDOR C ON A.CUSTCD = C.VD_CD
																				INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
           																												/*검색 조건 : 관리부서(팀)*/
           																												<#if schTm?has_content>
           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
           																												</#if>
           																												/*검색 조건 : CC */
           																												<#if schCc?has_content>
           																												AND D.CC_CD = :schCc
           																												</#if>
																														AND  B2.DEPT_ID = D.DEPT_ID
                                        										LEFT JOIN HLDC_PO_ITEM_MST M ON A.ITEM_CODE = M.ITEM_CODE
<#if newGubun!="Y">
                                                               																 AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
</#if>
                                   											-- 추가 : 특약사항관련 : 중분류, 소분류
         																	<#if schChk1?has_content>
																			LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG
																													AND C1.SUBINV_CODE = A.SUBINV_CODE
																													AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																													AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG
																													AND C2.SUBINV_CODE = A.SUBINV_CODE
																													AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																													AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk2?has_content>
																			LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG
																													AND J1.SUBINV_CODE = A.SUBINV_CODE
																													AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																													AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG
																													AND J2.SUBINV_CODE = A.SUBINV_CODE
																													AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																													AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk3?has_content>
																			LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG
																													AND S1.SUBINV_CODE = A.SUBINV_CODE
																													AND S1.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																													AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG
																													AND S2.SUBINV_CODE = A.SUBINV_CODE
																													AND S2.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																													AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																			</#if>
<#if newGubun=="Y">
										WHERE ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
										WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
										AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
           								/*검색 조건 : 기간*/
										<#if schGubun=="1">
           								AND A.TRANS_DATE2 BETWEEN :schFromDate AND :schToDate
			      						<#else>
           								AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
           							  </#if>
           								/*검색 조건 : 센터*/     
           								<#if schCenter?has_content>
           									<#if schCenter != '*'>
           									AND A.CENTER_CODE = :schCenter
           									</#if>
           								</#if>
             							/*검색 조건 : 납품업체*/
           								<#if schCustCd?has_content>
           								AND A.CUSTCD = :schCustCd
           								</#if>
								) T	
						) X  
	 					GROUP BY   X.UPJANG, X.UPJANGNM, X.CUSTCD, X.CUSTNM, X.ITEM_CLASS2
				) RS
				GROUP BY  RS.UPJANG	, RS.UPJANGNM, RS.CUSTCD	, RS.CUSTNM, RS.CLASS_NAME, RS.ITEM_CODE
				ORDER BY  RS.UPJANG	, RS.CUSTCD
</#if>		]]></statement>


	<!-- 채권잔액현황 목록을 조회한다. -->
	<statement name="selectListTab7" type="select"><![CDATA[
	SELECT * FROM (
		SELECT '(' || TO_CHAR(A.UPJANG_CD )|| ')' || (SELECT UPJANGNM_DISP FROM FMS_UPJANG WHERE UPJANG = A.UPJANG_CD) UPJANG
		     , TO_CHAR(TO_DATE(A.OCCUR_DATE,'YYYYMMDD'),'YYYY-MM-DD') OCCUR_DATE
		     , A.AR_NUM
		     , A.AR_AMT
		     --, C.AMOUNT
		     ,NVL((SELECT SUM(RECEIVE_AMT) 
		     		 FROM SLA_AR_RECEIVE_DETAIL RD 
		     		 WHERE RD.AR_NUM=A.AR_NUM 
		     		 --AND RD.RECEIVE_DATE BETWEEN :schFromDate AND :schToDate 
		     		 AND RD.RECD_STATUS='L'),0) RECEIVE_AMT
             ,(NVL(A.AR_AMT,0) - NVL((SELECT SUM(RECEIVE_AMT) 
             									  FROM SLA_AR_RECEIVE_DETAIL RD 
             									  WHERE RD.AR_NUM=A.AR_NUM 
             									  --AND RD.RECEIVE_DATE BETWEEN :schFromDate AND :schToDate 
             									  AND RD.RECD_STATUS='L'),0)) AS AR_BAL_AMT
		     --, (A.AR_AMT) - NVL(C.AMOUNT,0) AR_SUM
		     , A.REMARK
		     --, '' GAMU
		     --, '' GADATE
		     --, '' GANO
		  FROM SLA_AR_MST A, VO_CENTER_UPJANG C, ST_UPJANG B2, HLDC_SC_DEPT_V D
		 WHERE 1=1
		   AND A.RECD_STATUS = 'L'
		   AND A.SYS_CLASS = '13'
           /*검색 조건 : 기간*/
           AND A.OCCUR_DATE BETWEEN :schFromDate AND :schToDate
            /*검색 조건 : 본사*/
           <#if schMainUpjang?has_content>
           AND A.UPJANG_CD IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           </#if>       
           /*검색 조건 : 사업장*/       
           <#if schUpjang?has_content>
           AND A.UPJANG_CD = :schUpjang
           </#if>
           /*검색 조건 : 관리부서(팀)*/
           	<#if schTm?has_content>
           	AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
           	</#if>
			/*검색 조건 : CC */
			<#if schCc?has_content>
			AND D.CC_CD = :schCc
			</#if>
           	/*검색 조건 : 센터*/     
			<#if schCenter?has_content>
           			<#if schCenter != '*'>
           			AND C.CENTER_CODE = :schCenter
           			</#if>
           	</#if>
           	/* 검색조건 : 영업담당 */
           <#if schSabun?has_content>
           AND A.UPJANG_CD IN (SELECT UPJANG FROM FMS_UPJANG WHERE  PART_SALES_SABUN = :schSabun)
           </#if>       
           	/* 검색조건 : 세부직군 */
           <#if schBizDetail?has_content>
           AND A.UPJANG_CD IN (SELECT UPJANG FROM FMS_UPJANG WHERE  BIZ_DETAIL = :schBizDetail)
           </#if>       
			AND A.UPJANG_CD = C.UPJANG(+)
			AND A.UPJANG_CD = B2.UPJANG
	   		AND B2.DEPT_ID = D.DEPT_ID
		 ORDER BY A.CC_CD, A.OCCUR_DATE, A.AR_AMT
		 )
         GROUP BY UPJANG, OCCUR_DATE, AR_NUM, AR_AMT,RECEIVE_AMT, AR_BAL_AMT, REMARK

		]]></statement>

	<!-- 영업사원매출집계 목록을 조회한다. (구)-->
	<statement name="selectListTab8_old" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab8_old */
		<![CDATA[
		WITH A AS
		(
		SELECT B.MAIN_UPJANG
		     , B.MAIN_UPJANGNM
		     , B.UPJANG
		     , B.UPJANGNM
		     , D.CC_NM||'('||TO_CHAR(A.TRANS_DEPT_ID)||')' AS CC_NM
		     , B.NM_KOR||'('||B.PART_SALES_SABUN||')' AS PART_SALES_SABUN
		     , DECODE(TO_CHAR(B.CREATE_DATE, 'YYYY'), SUBSTR('20140101', 1, 4), '신규', '기존') AS GUBUN
		    -- , SUM(CEIL(SALE_AMOUNT) + DECODE(A.TAX_CODE,100,ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1))  AS SALE_SUM
            -- , SUM(CEIL(TRANS_MAMOUNT) + DECODE(A.TAX_CODE,100,ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1))  AS TRANS_SUM		     
             , SUM(CEIL(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS SALE_SUM
             , SUM(CEIL(TRANS_MAMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS TRANS_SUM  
<#if newGubun=="Y">
		  FROM FMS_TRANSACTION_ALL_V A
<#else>
		  FROM FMS_TRANSACTION_V A
</#if>
		     , (SELECT Z.MAIN_UPJANG AS MAIN_UPJANG, Z.UPJANGNM_DISP AS MAIN_UPJANGNM
		             , Y.UPJANG AS UPJANG, Y.UPJANGNM_DISP AS UPJANGNM
		             , W.CREATE_DATE
		             , Y.PART_SALES_SABUN, X.NM_KOR
		          FROM FMS_UPJANG Z, FMS_UPJANG Y, HR_PERSONAL X, ST_UPJANG W
		         WHERE Z.UPJANG = Y.MAIN_UPJANG
		           AND Y.PART_SALES_SABUN = X.SABUN
		           AND Y.UPJANG = W.UPJANG
		         UNION ALL
		        SELECT Z.MAIN_UPJANG AS MAIN_UPJANG, Z.UPJANGNM_DISP AS MAIN_UPJANGNM
		             , Y.UPJANG AS UPJANG, Y.UPJANGNM_DISP AS UPJANGNM
		             , W.CREATE_DATE
		             , '' AS PART_SALES_SABUN, '' AS NM_KOR
		          FROM FMS_UPJANG Z, FMS_UPJANG Y, ST_UPJANG W
		         WHERE Z.UPJANG = Y.MAIN_UPJANG
		           AND Y.UPJANG = W.UPJANG
		           AND Y.PART_SALES_SABUN IS NULL) B
			 , ST_UPJANG B2
		     , HLDC_SC_DEPT_V D
		WHERE 1 = 1
<#if newGubun=="Y">
   		AND ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
   		AND SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
   		AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		/*검색 조건 : 기간*/
   		AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
   		/*검색 조건 : 관리부서(팀)*/
   		<#if schTm?has_content>
   		AND D.TM_CD = :schTm
   		</#if>
   		/*검색 조건 : 센터*/
  		<#if schCenter?has_content>
   		AND A.CENTER_CODE = :schCenter
   		</#if>
      	/*검색 조건 : 본사*/
   		<#if schMainUpjang?has_content>
   		AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
   		</#if>
       	 /*검색 조건 : 사업장*/       
   		<#if schUpjang?has_content>
   		AND B2.UPJANG = :schUpjang
   		</#if>
       	/*검색 조건 : 납품업체*/
   		<#if schCustCd?has_content>
   		AND A.CUSTCD = :schCustCd
   		</#if>
   		/*
   		AND EXISTS (
           					  SELECT 1
           					  FROM FMS_SALES
                       		  WHERE UPJANG = A.TRANS_UPJANG
                       		  AND   SALE_DATE = A.TRANS_DATE
                       		  AND   SUBINV_CODE = A.SUBINV_CODE
                       		  AND   TRANS_YN = 'Y'
           					)
         */  					
		   AND A.TRANS_UPJANG = B.UPJANG
		  AND  A.TRANS_UPJANG = B2.UPJANG
		   AND B2.DEPT_ID = D.DEPT_ID
		 GROUP BY B.MAIN_UPJANG, B.MAIN_UPJANGNM, B.UPJANG, B.UPJANGNM, D.CC_NM||'('||TO_CHAR(A.TRANS_DEPT_ID)||')', B.NM_KOR||'('||B.PART_SALES_SABUN||')', TO_CHAR(B.CREATE_DATE, 'YYYY')
		)
		SELECT
		       CASE
		         WHEN GROUPING(PART_SALES_SABUN) = 1 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '      총합계'
		         WHEN GROUPING(PART_SALES_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '    영업사원 소계'
		         WHEN GROUPING(PART_SALES_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 0 AND GROUPING(UPJANG) = 1 THEN '  본사 소계'
		         ELSE ''
		       END AS LINE_NAME
		     , CC_NM, PART_SALES_SABUN, MAIN_UPJANG, MAIN_UPJANGNM, UPJANG, UPJANGNM, GUBUN
		     , SUM(SALE_SUM) AS SALE_SUM
		     , SUM(SALE_SUM) - SUM(TRANS_SUM) MARGIN_SUM
		     , DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(TRANS_SUM)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO
		  FROM A
		 GROUP BY ROLLUP(PART_SALES_SABUN, (MAIN_UPJANG, MAIN_UPJANGNM), (UPJANG, UPJANGNM, CC_NM, GUBUN))
		]]>
	</statement>


	<!-- 영업사원매출집계 목록을 조회한다. -->
	<statement name="selectListTab8" type="select"><![CDATA[--마감여부에 따라 집계 또는 실시간 검색 추가 20170824 맹수영
<#if mCloseYn=="Y">

SELECT  	CASE
		 		WHEN GROUPING(PART_SALES_SABUN) = 1 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '총합계'
		 		WHEN GROUPING(PART_SALES_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '영업사원 소계'
		 		WHEN GROUPING(PART_SALES_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 0 AND GROUPING(UPJANG) = 1 THEN '본사 소계'
		 		ELSE ''
	       END AS LINE_NAME

          , Z.CC_NM --관리부서
          , Z.PART_SALES_SABUN
          , Z.MAIN_UPJANG
          , Z.MAIN_UPJANGNM
          , Z.UPJANG
          , Z.UPJANGNM
         <#if schChk3?has_content>
          --장려금 제외
          , SUM(Z.SALE_SUM_S	- (CK_SALE_TAX + JI_SALE_TAX))	SALE_SUM					 /* 매출_과세 : 수수료 제외 */	
          --장려금 제외
          <#else> 
          --장려금 포함
          , SUM(Z.SALE_SUM	- (CK_SALE_TAX + JI_SALE_TAX))	SALE_SUM					 /* 매출_과세 : 수수료 제외 */--매출액(vat별도)
           --장려금 포함
          </#if>         
  	     --, SUM(SALE_SUM) - SUM(TRANS_SUM) MARGIN_SUM
	     , SUM(SALE_SUM) - SUM(UNIT_SUM) MARGIN_SUM2
         , DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(UNIT_SUM)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO2	     
        <#if schPrice=="2">
, SUM(SALE_SUM) - SUM(TRANS_SUM_UNIT) MARGIN_SUM
, DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(TRANS_SUM_UNIT)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO            
        <#else> 
, SUM(SALE_SUM) - SUM(TRANS_SUM) MARGIN_SUM        
, DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(TRANS_SUM)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO              
        </#if>	     
	     
         -- ,SUM(TRANS_SUM)
          --장려금 포함
FROM (
    SELECT C.CC_NM --관리부서
          ,B.MAIN_UPJANG
          ,(SELECT UPJANGNM_DISP FROM FMS_UPJANG  WHERE UPJANG = B.MAIN_UPJANG)  MAIN_UPJANGNM
          , B.UPJANG
          , B.UPJANGNM_DISP UPJANGNM
          ,D.NM_KOR || '(' || B.PART_SALES_SABUN || ')' PART_SALES_SABUN
          ,A.UNIT_SUM UNIT_SUM
           ,DECODE(A.SALE_TAX,0,A.SALE_NOTAX,A.SALE_TAX)  AS  SALE_SUM           
         , A.TRANS_SUM TRANS_SUM
         , A.TRANS_SUM_UNIT
          ,A.MARGIN AS MARGIN
          --장려금 포함
          --장려금 제외
           ,DECODE(A.SALE_TAX_S,0,A.SALE_NOTAX_S,A.SALE_TAX_S)  AS  SALE_SUM_S   
          , A.MARGIN_S AS MARGIN_S     
          --장려금 제외
         --CK수수료
          <#if schChk1?has_content>
           ,SUM(CK_SALE_NOTAX) AS CK_SALE_NOTAX
          ,SUM(CK_SALE_TAX) AS CK_SALE_TAX
          ,SUM(CK_SALE_VAT) AS CK_SALE_VAT
          <#else>
          ,0 AS CK_SALE_NOTAX
          ,0 AS CK_SALE_TAX
          ,0 AS CK_SALE_VAT
          </#if>
          --CK수수료
          --지급수수료
          <#if schChk2?has_content>
          ,SUM(JI_SALE_NOTAX) AS JI_SALE_NOTAX
          ,SUM(JI_SALE_TAX) AS JI_SALE_TAX
          ,SUM(JI_SALE_VAT) AS JI_SALE_VAT
          <#else>
          ,0 AS JI_SALE_NOTAX
          ,0 AS JI_SALE_TAX
          ,0 AS JI_SALE_VAT      
          </#if>     
    FROM FMS_BUY_SALE_SUM A,
         FMS_UPJANG B,
         HLDC_SC_DEPT_V C,
         HR_PERSONAL D
    WHERE A.UPJANG = B.UPJANG
      AND B.DEPT_ID = C.CC_CD
      AND B.PART_SALES_SABUN = D.SABUN
 <#if schGubun=="1">
							AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
							<#else>
							AND A.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate
							</#if>
                           <#if schMainUpjang?has_content>
           					AND A.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           					</#if>							
							 /*검색 조건 : 사업장*/
							<#if schUpjang?has_content>
								AND A.UPJANG = :schUpjang
							</#if>
							/*검색 조건 : 팀 */
<#if schTm?has_content>
		AND C.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
		</#if>
		/*검색 조건 : CC */
		<#if schCc?has_content>
		AND C.CC_CD = :schCc
		</#if>
	<#if schSabun?has_content>
	AND B.PART_SALES_SABUN = :schSabun   --영업사원
	</#if>
							/*검색 조건 : 센터*/     
							<#if schCenter?has_content>
								<#if schCenter != '*'>
								AND A.CENTER_CODE = :schCenter
								</#if>
							</#if>
							/*검색 조건 : 납품업체*/
							<#if schCustCd?has_content>
							AND A.CUSTCD = :schCustCd
							</#if>						
							/*검색 조건 : 세부직군*/
							<#if schBizDetail?has_content>
							AND A.BIZ_DETAIL_MAIN = :schBizDetail
							</#if>

) Z
GROUP BY ROLLUP(PART_SALES_SABUN, (MAIN_UPJANG, MAIN_UPJANGNM ), (UPJANG, UPJANGNM, CC_NM))
          
 <#else>  

		WITH A AS
		(
			SELECT
		  		  RS.MAIN_UPJANG
				, RS.MAIN_UPJANGNM
				, RS.UPJANG
				, RS.UPJANGNM
				, RS.CC_NM
				, RS.PART_SALES_SABUN
				, RS.UNIT_SUM
				, RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM) AS SALE_SUM
				, RS.TRANS_SUM
				, RS.CK_SALE_SUM
				, RS.JI_SALE_SUM
				-- CK, JI, SE 금액 제외부분 추가
			FROM
					(
						SELECT
			  				  X.MAIN_UPJANG
							, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = X.MAIN_UPJANG) AS MAIN_UPJANGNM
							, X.UPJANG
							, X.UPJANGNM
							, X.CC_NM
							, X.NM_KOR || '(' || X.PART_SALES_SABUN || ')' AS PART_SALES_SABUN
							, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * (X.TRANS_QTY * X.UNIT_PRICE))) AS UNIT_SUM
							<#if schChk3?has_content>
			        		, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_SUM 
							<#else>
							, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_SUM 		/* 매출_면과세합계 */
							</#if>
							, SUM(ROUND(X.TRANS_MAMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)))     AS TRANS_SUM  
							, SUM(ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)))          AS CK_SALE_SUM
							, SUM(ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)))          AS JI_SALE_SUM
						FROM
							(
							SELECT
								  T.MAIN_UPJANG
			      				, T.UPJANG
			      				, T.TRANS_DATE
			      				, T.ITEM_CODE
			      				, T.ITEM_NAME
			      				, T.ITEM_SIZE
			      				, T.TRANS_UOM
			      				, T.TRANS_TYPE
			      				, T.TRANS_QTY
			      				, T.TRANS_MPRICE
			     				, T.TRANS_MAMOUNT
			     				, T.TRANS_MVAT
			     				, T.UNIT_PRICE
			      				, T.SALE_PRICE
			      				, T.SALE_AMOUNT
			      				, T.SALE_VAT
			      				, T.TAX_CODE
			      				, T.FLAG
			      				, T.DEPT_ID
			      				, T.CC_NM
			      				, T.UPJANGNM
			      				, T.PART_SALES_SABUN
			      				, T.NM_KOR
	     			    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
												CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
			    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
			    							END 
						  		   END AS CK_AMOUNT
	      						, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
													CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
			    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
			    					  			END 
						  		  END AS JI_AMOUNT
						 		, DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE			
							FROM
									(
										SELECT
										<#if schMainUpjang?has_content || schUpjang?has_content>
											/*+ PUSH_PRED(A) */
										</#if>
										     Z.MAIN_UPJANG	
					      					, A.TRANS_UPJANG AS UPJANG
											<#if schGubun=="1">
				      						, A.TRANS_DATE
			      							<#else>
									  		, A.MG_DATE AS TRANS_DATE
           									</#if>
					      					, A.ITEM_CODE
					      					, A.ITEM_NAME
					      					, A.ITEM_SIZE
					      					, A.TRANS_UOM
					      					, A.TRANS_TYPE
					      					, A.TRANS_QTY
											<#if schPrice=="2">
				      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
			      							<#else>
				      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
				      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
           									</#if>
           									, NVL(A.UNIT_PRICE, 0) AS UNIT_PRICE
                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
                      						, NVL(A.SALE_VAT, 0) AS SALE_VAT
					     					, A.TAX_CODE
					     					, A.FLAG
					      					, B2.DEPT_ID
					      					, D.CC_NM
					      					, B2.UPJANGNM
					      					, Z.PART_SALES_SABUN
					      					, H.NM_KOR
         									/*검색 조건 : CK물류비제외*/
         									<#if schChk1?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
													 ELSE NVL(C2.FM_SALE_RATE, 0)
													END)
									 		ELSE 
													(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
													END)
									 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
				      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
				      						<#else>
				      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
				      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
											</#if>
         									/*검색 조건 : 지급수수료제외*/
         									<#if schChk2?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
													ELSE NVL(J2.FM_SALE_RATE, 0)
													END)
									  		 ELSE 
													(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
													END)
									  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
				     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
				      						<#else>
				      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
				     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
											</#if>
         									/*검색 조건 : 장려금제외*/
         									<#if schChk3?has_content>
				      			    		, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
										 			ELSE NVL(S2.FM_SALE_RATE, 0)
										 		END)
									  		 ELSE 
													(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
													ELSE NVL(S2.FM_NOSALE_RATE, 0)
													END)
											 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
				     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
				      					<#else>
								 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
				     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
										</#if>
								<#if schGubun=="1">
<#if newGubun=="Y">
									FROM FMS_TRANSACTION_ALL_V A
<#else>
									FROM FMS_TRANSACTION_V2 A
</#if>
								<#else>
<#if newGubun=="Y">
									FROM FMS_TRANSACTION_ALL_V A
<#else>
									FROM FMS_TRANSACTION_V A
</#if>
								</#if>
 								
                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
             																									/*검색 조건 : 본사*/
           																										<#if schMainUpjang?has_content>
           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           																										</#if>
            																									 /*검색 조건 : 사업장*/
           																										<#if schUpjang?has_content>
           																										AND B2.UPJANG = :schUpjang
           																										</#if>
																												 AND A.TRANS_UPJANG = B2.UPJANG
																				INNER JOIN FMS_UPJANG Z ON 1 = 1
            																									 /*검색 조건 : 영업담당*/
           																										<#if schSabun?has_content>
           																		  								 AND Z.PART_SALES_SABUN = :schSabun
																												</#if>
            																									 /*검색 조건 : 세부직군*/
           																										<#if schBizDetail?has_content>
           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																												</#if>
																				  								 AND A.TRANS_UPJANG = Z.UPJANG
																				LEFT JOIN HR_PERSONAL H ON Z.PART_SALES_SABUN = H.SABUN
																				INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
           																												/*검색 조건 : 관리부서(팀)*/
           																												<#if schTm?has_content>
           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
           																												</#if>
           																												/*검색 조건 : CC */
           																												<#if schCc?has_content>
           																												AND D.CC_CD = :schCc
           																												</#if>
																														AND  B2.DEPT_ID = D.DEPT_ID
                                        										LEFT JOIN HLDC_PO_ITEM_MST M ON A.ITEM_CODE = M.ITEM_CODE
<#if newGubun!="Y">
                                                               																 AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
</#if>
                                   											-- 추가 : 특약사항관련 : 중분류, 소분류
         																	<#if schChk1?has_content>
																			LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG
																													AND C1.SUBINV_CODE = A.SUBINV_CODE
																													AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																													AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG
																													AND C2.SUBINV_CODE = A.SUBINV_CODE
																													AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																													AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk2?has_content>
																			LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG
																													AND J1.SUBINV_CODE = A.SUBINV_CODE
																													AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																													AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG
																													AND J2.SUBINV_CODE = A.SUBINV_CODE
																													AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																													AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk3?has_content>
																			LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG
																													AND S1.SUBINV_CODE = A.SUBINV_CODE
																													AND S1.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																													AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG
																													AND S2.SUBINV_CODE = A.SUBINV_CODE
																													AND S2.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																													AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																			</#if>
<#if newGubun=="Y">
										WHERE ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
										WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
										AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
           								/*검색 조건 : 기간*/
										<#if schGubun=="1">
           								AND A.TRANS_DATE2 BETWEEN :schFromDate AND :schToDate
			      						<#else>
           								AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
           							  </#if>
           								/*검색 조건 : 센터*/     
           								<#if schCenter?has_content>
           									<#if schCenter != '*'>
           									AND A.CENTER_CODE = :schCenter
           									</#if>
           								</#if>
             							/*검색 조건 : 납품업체*/
           								<#if schCustCd?has_content>
           								AND A.CUSTCD = :schCustCd
           								</#if>
								) T	
						) X  
				 	GROUP BY  X.CC_NM, X.MAIN_UPJANG, X.UPJANG, X.UPJANGNM, X.NM_KOR || '(' || X.PART_SALES_SABUN || ')'
				) RS
			)
		SELECT
	       	CASE
		 		WHEN GROUPING(PART_SALES_SABUN) = 1 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '총합계'
		 		WHEN GROUPING(PART_SALES_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '영업사원 소계'
		 		WHEN GROUPING(PART_SALES_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 0 AND GROUPING(UPJANG) = 1 THEN '본사 소계'
		 		ELSE ''
	       END AS LINE_NAME
	     , CC_NM
	     , PART_SALES_SABUN
	     , MAIN_UPJANG
	     , MAIN_UPJANGNM
	     , UPJANG
	     , UPJANGNM
	     , SUM(SALE_SUM) AS SALE_SUM
	     , SUM(SALE_SUM) - SUM(TRANS_SUM) MARGIN_SUM
	     , SUM(SALE_SUM) - SUM(UNIT_SUM) MARGIN_SUM2
	     , DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(TRANS_SUM)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO
	     , DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(UNIT_SUM)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO2
	  FROM A
	 GROUP BY ROLLUP(PART_SALES_SABUN, (MAIN_UPJANG, MAIN_UPJANGNM), (UPJANG, UPJANGNM, CC_NM)) 
	 
	</#if>	
		]]></statement>




	<!-- CS매출집계 목록을 조회한다. -->
	<statement name="selectListTab9_old" type="select">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectListTab9_old */
		<![CDATA[
		WITH A AS
		(
		SELECT B.MAIN_UPJANG
		     , B.MAIN_UPJANGNM
		     , B.UPJANG
		     , B.UPJANGNM
		     , D.CC_NM||'('||TO_CHAR(A.TRANS_DEPT_ID)||')' AS CC_NM
		     , B.NM_KOR||'('||B.CS_SABUN||')' AS CS_SABUN
		     , DECODE(TO_CHAR(B.CREATE_DATE, 'YYYY'), SUBSTR('20140101', 1, 4), '신규', '기존') AS GUBUN
		    -- , SUM(CEIL(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS SALE_AMT
            -- , SUM(CEIL(SALE_AMOUNT) + DECODE(TAX_CODE,'100',ROUND(SALE_AMOUNT / 10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1))  AS SALE_SUM
            -- , SUM(CEIL(TRANS_MAMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS TRANS_AMOUNT
            -- , SUM(CEIL(TRANS_MAMOUNT + DECODE(TAX_CODE,'100',ROUND(TRANS_MAMOUNT/10),0) * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))  AS TRANS_SUM
             , SUM(CEIL(SALE_AMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS SALE_SUM
             , SUM(CEIL(TRANS_MAMOUNT * DECODE(SUBSTR(TRANS_TYPE,1,1), 'I', 1, -1)))               AS TRANS_SUM  
<#if newGubun=="Y">
		  FROM FMS_TRANSACTION_ALL_V A
<#else>
		  FROM FMS_TRANSACTION_V A
</#if>
		     , (SELECT Z.MAIN_UPJANG AS MAIN_UPJANG, Z.UPJANGNM_DISP AS MAIN_UPJANGNM
		             , Y.UPJANG AS UPJANG, Y.UPJANGNM_DISP AS UPJANGNM
		             , W.CREATE_DATE
		             , Y.CS_SABUN, X.NM_KOR
		          FROM FMS_UPJANG Z, FMS_UPJANG Y, HR_PERSONAL X, ST_UPJANG W
		         WHERE Z.UPJANG = Y.MAIN_UPJANG
		           AND Y.CS_SABUN = X.SABUN
		           AND Y.UPJANG = W.UPJANG
		         UNION ALL
		        SELECT Z.MAIN_UPJANG AS MAIN_UPJANG, Z.UPJANGNM_DISP AS MAIN_UPJANGNM
		             , Y.UPJANG AS UPJANG, Y.UPJANGNM_DISP AS UPJANGNM
		             , W.CREATE_DATE
		             , '' AS CS_SABUN, '' AS NM_KOR
		          FROM FMS_UPJANG Z, FMS_UPJANG Y, ST_UPJANG W
		         WHERE Z.UPJANG = Y.MAIN_UPJANG
		           AND Y.UPJANG = W.UPJANG
		           AND Y.CS_SABUN IS NULL) B
			 , ST_UPJANG B2
		     , HLDC_SC_DEPT_V D
		WHERE 1 = 1
<#if newGubun=="Y">
   		AND ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
   		AND SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
   		AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		/*검색 조건 : 기간*/
   		AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
   		/*검색 조건 : 관리부서(팀)*/
   		<#if schTm?has_content>
   		AND D.TM_CD = :schTm
   		</#if>
   		/*검색 조건 : 센터*/
  		<#if schCenter?has_content>
   		AND A.CENTER_CODE = :schCenter
   		</#if>
      	/*검색 조건 : 본사*/
   		<#if schMainUpjang?has_content>
   		AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
   		</#if>
       	 /*검색 조건 : 사업장*/       
   		<#if schUpjang?has_content>
   		AND B2.UPJANG = :schUpjang
   		</#if>
       	/*검색 조건 : 납품업체*/
   		<#if schCustCd?has_content>
   		AND A.CUSTCD = :schCustCd
   		</#if>
   		/*
   		AND EXISTS (
           					  SELECT 1
           					  FROM FMS_SALES
                       		  WHERE UPJANG = A.TRANS_UPJANG
                       		  AND   SALE_DATE = A.TRANS_DATE
                       		  AND   SUBINV_CODE = A.SUBINV_CODE
                       		  AND   TRANS_YN = 'Y'
           					)
		*/           					
		 AND  A.TRANS_UPJANG = B.UPJANG
		  AND  A.TRANS_UPJANG = B2.UPJANG
		   AND B2.DEPT_ID = D.DEPT_ID
		 GROUP BY B.MAIN_UPJANG, B.MAIN_UPJANGNM, B.UPJANG, B.UPJANGNM, D.CC_NM||'('||TO_CHAR(A.TRANS_DEPT_ID)||')', B.NM_KOR||'('||B.CS_SABUN||')', TO_CHAR(B.CREATE_DATE, 'YYYY')
		)
		SELECT
		       CASE
		         WHEN GROUPING(CS_SABUN) = 1 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '      총합계'
		         WHEN GROUPING(CS_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '    영업사원 소계'
		         WHEN GROUPING(CS_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 0 AND GROUPING(UPJANG) = 1 THEN '  본사 소계'
		         ELSE ''
		       END AS LINE_NAME
		     , CC_NM, CS_SABUN, MAIN_UPJANG, MAIN_UPJANGNM, UPJANG, UPJANGNM, GUBUN
		     , SUM(SALE_SUM) AS SALE_SUM
		     , SUM(SALE_SUM) - SUM(TRANS_SUM) MARGIN_SUM
		     , DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(TRANS_SUM)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO
		  FROM A
		 GROUP BY ROLLUP(CS_SABUN, (MAIN_UPJANG, MAIN_UPJANGNM), (UPJANG, UPJANGNM, CC_NM, GUBUN))
		]]>
	</statement>


	<!-- CS매출집계 목록을 조회한다. -->
	<statement name="selectListTab9" type="select"><![CDATA[--마감여부에 따라 집계 또는 실시간 검색 추가 20170824 맹수영
<#if mCloseYn=="Y">

SELECT  	CASE
		 		WHEN GROUPING(CS_SABUN) = 1 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '총합계'
		 		WHEN GROUPING(CS_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN 'CS사원 소계'
		 		WHEN GROUPING(CS_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 0 AND GROUPING(UPJANG) = 1 THEN '본사 소계'
		 		ELSE ''
	       END AS LINE_NAME

          , Z.CC_NM --관리부서
          , Z.CS_SABUN
          , Z.MAIN_UPJANG
          , Z.MAIN_UPJANGNM
          , Z.UPJANG
          , Z.UPJANGNM
         <#if schChk3?has_content>
          --장려금 제외
          , SUM(Z.SALE_SUM_S	- (CK_SALE_TAX + JI_SALE_TAX))	SALE_SUM					 /* 매출_과세 : 수수료 제외 */	
          --장려금 제외
          <#else> 
          --장려금 포함
          , SUM(Z.SALE_SUM	- (CK_SALE_TAX + JI_SALE_TAX))	SALE_SUM					 /* 매출_과세 : 수수료 제외 */--매출액(vat별도)
           --장려금 포함
          </#if>         
  	     --, SUM(SALE_SUM) - SUM(TRANS_SUM) MARGIN_SUM
	     , SUM(SALE_SUM) - SUM(UNIT_SUM) MARGIN_SUM2
        <#if schPrice=="2">
 , SUM(SALE_SUM) - SUM(TRANS_SUM_UNIT) MARGIN_SUM
, DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(TRANS_SUM_UNIT)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO            
        <#else> 
 , SUM(SALE_SUM) - SUM(TRANS_SUM) MARGIN_SUM
, DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(TRANS_SUM)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO              
        </#if>	 	            
         -- ,SUM(TRANS_SUM)
          --장려금 포함
FROM (
    SELECT C.CC_NM --관리부서
          ,B.MAIN_UPJANG
          ,(SELECT UPJANGNM_DISP FROM FMS_UPJANG  WHERE UPJANG = B.MAIN_UPJANG)  MAIN_UPJANGNM
          , B.UPJANG
          , B.UPJANGNM_DISP UPJANGNM
          ,D.NM_KOR || '(' || B.CS_SABUN || ')' CS_SABUN
          ,A.UNIT_SUM UNIT_SUM
           ,DECODE(A.SALE_TAX,0,A.SALE_NOTAX,A.SALE_TAX)  AS  SALE_SUM           
         , A.TRANS_SUM TRANS_SUM
         , A.TRANS_SUM_UNIT 
          ,A.MARGIN AS MARGIN
          --장려금 포함
          --장려금 제외
           ,DECODE(A.SALE_TAX_S,0,A.SALE_NOTAX_S,A.SALE_TAX_S)  AS  SALE_SUM_S   
          , A.MARGIN_S AS MARGIN_S     
          --장려금 제외
         --CK수수료
          <#if schChk1?has_content>
           ,CK_SALE_NOTAX AS CK_SALE_NOTAX
          ,CK_SALE_TAX AS CK_SALE_TAX
          ,CK_SALE_VAT AS CK_SALE_VAT
          <#else>
          ,0 AS CK_SALE_NOTAX
          ,0 AS CK_SALE_TAX
          ,0 AS CK_SALE_VAT
          </#if>
          --CK수수료
          --지급수수료
          <#if schChk2?has_content>
          ,JI_SALE_NOTAX AS JI_SALE_NOTAX
          ,JI_SALE_TAX AS JI_SALE_TAX
          ,JI_SALE_VAT AS JI_SALE_VAT
          <#else>
          ,0 AS JI_SALE_NOTAX
          ,0 AS JI_SALE_TAX
          ,0 AS JI_SALE_VAT      
          </#if>     
    FROM FMS_BUY_SALE_SUM A,
         FMS_UPJANG B,
         HLDC_SC_DEPT_V C,
         HR_PERSONAL D
    WHERE A.UPJANG = B.UPJANG
      AND B.DEPT_ID = C.CC_CD
      AND B.CS_SABUN = D.SABUN
 <#if schGubun=="1">
							AND A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
							<#else>
							AND A.RECIEPT_DATE BETWEEN :schFromDate AND :schToDate
							</#if>
                           <#if schMainUpjang?has_content>
           					AND A.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           					</#if>							
							 /*검색 조건 : 사업장*/
							<#if schUpjang?has_content>
								AND A.UPJANG = :schUpjang
							</#if>
							/*검색 조건 : 팀 */
<#if schTm?has_content>
		AND C.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
		</#if>
		/*검색 조건 : CC */
		<#if schCc?has_content>
		AND C.CC_CD = :schCc
		</#if>
	<#if schSabun?has_content>
	AND B.PART_SALES_SABUN = :schSabun   --영업사원
	</#if>
							/*검색 조건 : 센터*/     
							<#if schCenter?has_content>
								<#if schCenter != '*'>
								AND A.CENTER_CODE = :schCenter
								</#if>
							</#if>
							/*검색 조건 : 납품업체*/
							<#if schCustCd?has_content>
							AND A.CUSTCD = :schCustCd
							</#if>						
							/*검색 조건 : 세부직군*/
							<#if schBizDetail?has_content>
							AND A.BIZ_DETAIL_MAIN = :schBizDetail
							</#if>

) Z
GROUP BY ROLLUP(CS_SABUN, (MAIN_UPJANG, MAIN_UPJANGNM ), (UPJANG, UPJANGNM, CC_NM))
          
 <#else>  
 
		WITH A AS
		(
			SELECT
		  		  RS.MAIN_UPJANG
				, RS.MAIN_UPJANGNM
				, RS.UPJANG
				, RS.UPJANGNM
				, RS.CC_NM
				, RS.CS_SABUN
				, RS.SALE_SUM - (RS.CK_SALE_SUM + RS.JI_SALE_SUM) AS SALE_SUM
				, RS.TRANS_SUM
				, RS.CK_SALE_SUM
				, RS.JI_SALE_SUM
			FROM
					(
					SELECT
			  			  X.MAIN_UPJANG
						, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = X.MAIN_UPJANG) AS MAIN_UPJANGNM
						, X.UPJANG
						, X.UPJANGNM
						, X.CC_NM
						, X.NM_KOR || '(' || X.CS_SABUN || ')' AS CS_SABUN
						<#if schChk3?has_content>
		        		, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_SUM 
						<#else>
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_SUM 		/* 매출_면과세합계 */
						</#if>
						, SUM(ROUND(X.TRANS_MAMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)))     AS TRANS_SUM  
						, SUM(ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)))          AS CK_SALE_SUM
						, SUM(ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)))          AS JI_SALE_SUM
					FROM
							(
								SELECT
									  T.MAIN_UPJANG
			      					, T.UPJANG
			      					, T.TRANS_DATE
			      					, T.ITEM_CODE
			      					, T.ITEM_NAME
			      					, T.ITEM_SIZE
			      					, T.TRANS_UOM
			      					, T.TRANS_TYPE
			      					, T.TRANS_QTY
			      					, T.TRANS_MPRICE
			      					, T.TRANS_MAMOUNT
			      					, T.SALE_PRICE
			      					, T.SALE_AMOUNT
			      					, T.TAX_CODE
			      					, T.DEPT_ID
			      					, T.CC_NM
			      					, T.UPJANGNM
			      					, T.CS_SABUN
			      					, T.NM_KOR
		     			    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
												CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
			    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
			    							END 
							  		   END AS CK_AMOUNT
		      						, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
													CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
			    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
			    					  			END 
							  		  END AS JI_AMOUNT
						 			, DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE			
						FROM
								(
									SELECT
										<#if schMainUpjang?has_content || schUpjang?has_content>
											/*+ PUSH_PRED(A) */
										</#if>
										  	  Z.MAIN_UPJANG	
					      					, A.TRANS_UPJANG AS UPJANG
											<#if schGubun=="1">
				      						, A.TRANS_DATE
			      							<#else>
									  		, A.MG_DATE AS TRANS_DATE
           									</#if>
					      					, A.ITEM_CODE
					      					, A.ITEM_NAME
					      					, A.ITEM_SIZE
					      					, A.TRANS_UOM
					      					, A.TRANS_TYPE
					      					, A.TRANS_QTY
											<#if schPrice=="2">
				      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
			      							<#else>
				      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
				      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
           									</#if>
                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
					      					, A.TAX_CODE
					      					, B2.DEPT_ID
					      					, D.CC_NM
					      					, B2.UPJANGNM
					      					, Z.CS_SABUN
					      					, H.NM_KOR
         									/*검색 조건 : CK물류비제외*/
         									<#if schChk1?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
													 ELSE NVL(C2.FM_SALE_RATE, 0)
													END)
									 		ELSE 
													(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
													END)
									 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
				      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
				      						<#else>
				      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
				      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
											</#if>
         									/*검색 조건 : 지급수수료제외*/
         									<#if schChk2?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
													ELSE NVL(J2.FM_SALE_RATE, 0)
													END)
									  		 ELSE 
													(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
													END)
									  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
				     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
				      						<#else>
				      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
				     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
											</#if>
         									/*검색 조건 : 장려금제외*/
         									<#if schChk3?has_content>
				      			    		, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
										 			ELSE NVL(S2.FM_SALE_RATE, 0)
										 		END)
									  		 ELSE 
													(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
													ELSE NVL(S2.FM_NOSALE_RATE, 0)
													END)
											 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
				     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
				      					<#else>
								 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
				     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
										</#if>
<#if newGubun=="Y">
					FROM FMS_TRANSACTION_ALL_V A
<#else>
					FROM FMS_TRANSACTION_V A
</#if>
                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
             																									/*검색 조건 : 본사*/
           																										<#if schMainUpjang?has_content>
           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           																										</#if>
            																									 /*검색 조건 : 사업장*/
           																										<#if schUpjang?has_content>
           																										AND B2.UPJANG = :schUpjang
           																										</#if>
																												 AND A.TRANS_UPJANG = B2.UPJANG
																				INNER JOIN FMS_UPJANG Z ON 1 = 1
            																									 /*검색 조건 : 영업담당*/
           																										<#if schSabun?has_content>
           																		  								 AND Z.PART_SALES_SABUN = :schSabun
																												</#if>
            																									 /*검색 조건 : 세부직군*/
           																										<#if schBizDetail?has_content>
           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																												</#if>
																				  								 AND A.TRANS_UPJANG = Z.UPJANG
																				LEFT JOIN HR_PERSONAL H ON Z.CS_SABUN = H.SABUN
																				INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
           																												/*검색 조건 : 관리부서(팀)*/
           																												<#if schTm?has_content>
           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
           																												</#if>
           																												/*검색 조건 : CC */
           																												<#if schCc?has_content>
           																												AND D.CC_CD = :schCc
           																												</#if>
																														AND  B2.DEPT_ID = D.DEPT_ID
                                        										LEFT JOIN HLDC_PO_ITEM_MST M ON A.ITEM_CODE = M.ITEM_CODE
<#if newGubun!="Y">
                                                               																 AND SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
</#if>
                                   											-- 추가 : 특약사항관련 : 중분류, 소분류
         																	<#if schChk1?has_content>
																			LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = A.TRANS_UPJANG
																													AND C1.SUBINV_CODE = A.SUBINV_CODE
																													AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																													AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = A.TRANS_UPJANG
																													AND C2.SUBINV_CODE = A.SUBINV_CODE
																													AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																													AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk2?has_content>
																			LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = A.TRANS_UPJANG
																													AND J1.SUBINV_CODE = A.SUBINV_CODE
																													AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																													AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = A.TRANS_UPJANG
																													AND J2.SUBINV_CODE = A.SUBINV_CODE
																													AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																													AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk3?has_content>
																			LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = A.TRANS_UPJANG
																													AND S1.SUBINV_CODE = A.SUBINV_CODE
																													AND S1.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																													AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = A.TRANS_UPJANG
																													AND S2.SUBINV_CODE = A.SUBINV_CODE
																													AND S2.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																													AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																			</#if>
<#if newGubun=="Y">
										WHERE ((SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1' AND SUBSTR(A.ITEM_CODE,1,1) = 'F') OR A.GUBUN = 'HNR')
<#else>
										WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
</#if>
										AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
           								/*검색 조건 : 기간*/
										<#if schGubun=="1">
           								AND A.TRANS_DATE2 BETWEEN :schFromDate AND :schToDate
			      						<#else>
           								AND A.MG_DATE BETWEEN :schFromDate AND :schToDate
           							  </#if>
           								/*검색 조건 : 센터*/     
           								<#if schCenter?has_content>
           									<#if schCenter != '*'>
           									AND A.CENTER_CODE = :schCenter
           									</#if>
           								</#if>
             							/*검색 조건 : 납품업체*/
           								<#if schCustCd?has_content>
           								AND A.CUSTCD = :schCustCd
           								</#if>
								) T	
						) X  
					 GROUP BY  X.CC_NM, X.MAIN_UPJANG, X.UPJANG, X.UPJANGNM, X.NM_KOR || '(' || X.CS_SABUN || ')'
				) RS
			)
			SELECT
	       		CASE
		 			WHEN GROUPING(CS_SABUN) = 1 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '총합계'
		 			WHEN GROUPING(CS_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 1 AND GROUPING(UPJANG) = 1 THEN '영업사원 소계'
		 			WHEN GROUPING(CS_SABUN) = 0 AND GROUPING(MAIN_UPJANG) = 0 AND GROUPING(UPJANG) = 1 THEN '본사 소계'
		 		ELSE ''
	       		END AS LINE_NAME
	     		, CC_NM
	     		, CS_SABUN
	     		, MAIN_UPJANG
	     		, MAIN_UPJANGNM
	     		, UPJANG
	     		, UPJANGNM
	     		, SUM(SALE_SUM) AS SALE_SUM
	     		, SUM(SALE_SUM) - SUM(TRANS_SUM) MARGIN_SUM
	     		, DECODE(SUM(SALE_SUM),0,0,ROUND(((SUM(SALE_SUM) - SUM(TRANS_SUM)) / (SUM(SALE_SUM)))*100,2)) MARGIN_RATIO
	  	FROM A
	 	GROUP BY ROLLUP(CS_SABUN, (MAIN_UPJANG, MAIN_UPJANGNM), (UPJANG, UPJANGNM, CC_NM))		

		
	</#if>	
		]]></statement>



	<!-- 선택자재매출을 조회한다.(신:2019.06.04) -->
	<statement name="selectListTab10" type="select"><![CDATA[

SELECT
          	  RS.CC_NM
			, RS.MAIN_UPJANG
			, RS.MAIN_UPJANGNM
			, RS.UPJANG
			, RS.UPJANGNM 
			, FMS_GET_SALES_MAN_FUN(RS.UPJANG) AS SALES_MAN
			<#if schView == '2'>	
			/* 업장별 집계 */
			, (SELECT Z.CODE_NAME FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'FM0021' AND Z.CODE = RS.BIZ_DETAIL) AS BIZ_DETAIL_NAME	-- 업장_세부직군
			, MAX(RS.CONTRACT_TERM) AS CONTRACT_TERM	-- 업장_계약시작일
			<#else>
			, (SELECT Z.CODE_NAME FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'FM0021' AND Z.CODE = RS.BIZ_DETAIL_MAIN) AS BIZ_DETAIL_NAME	-- 본사_세부직군
			, MAX(RS.CONTRACT_TERM_MAIN) AS CONTRACT_TERM	-- 본사_계약시작일
			</#if>
			, SUM(RS.TRANS_SUM) TRANS_SUM
			, SUM(RS.TRANS_VAT) TRANS_VAT
			, (SUM(RS.TRANS_SUM) + SUM(RS.TRANS_VAT)) TRANS_TOT
			, SUM(RS.UNIT_SUM) UNIT_SUM
			
			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) AS SALE_NOTAX			/* 매출_면세 : 수수료 제외 */ 
			, SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX) AS  SALE_TAX								 /* 매출_과세 : 수수료 제외 */
			, SUM(RS.SALE_VAT) -  SUM(RS.CK_SALE_VAT + RS.JI_SALE_VAT) AS  SALE_VAT								/* 매출_부가세 : 수수료 제외 */
			
			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX) AS SALE_TOT
			  
			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX)  +
			  SUM(RS.SALE_VAT) -  SUM(RS.CK_SALE_VAT + RS.JI_SALE_VAT) AS SALE_ALL

			, SUM(RS.SALE_NOTAX) - SUM(RS.CK_SALE_NOTAX + RS.JI_SALE_NOTAX) + 
			  SUM(RS.SALE_TAX) - SUM(RS.CK_SALE_TAX + RS.JI_SALE_TAX)  -
			  SUM(RS.TRANS_SUM)  AS MARGIN

			, SUM(RS.SALE_SUM)-SUM(RS.UNIT_SUM) MARGIN_SUM	/*순수 매출 - 매입 */
		
			--, DECODE(SUM(SALE_NOTAX) + SUM(SALE_TAX),0,0,ROUND(((SUM(SALE_NOTAX) + SUM(SALE_TAX) - SUM(TRANS_SUM)) / (SUM(SALE_NOTAX) + SUM(SALE_TAX)))*100,2)) MARGIN_RATIO
            , SUM(RS.ITEM_QTY) AS ITEM_QTY
            
		FROM
				(
					SELECT
	          			  X.CC_NM
						, X.MAIN_UPJANG
						, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = X.MAIN_UPJANG) AS MAIN_UPJANGNM
						, X.UPJANG
						, X.UPJANGNM
						, MAX(X.BIZ_DETAIL_MAIN) AS BIZ_DETAIL_MAIN
						, MAX(X.BIZ_DETAIL) AS BIZ_DETAIL
						, MAX(X.CONTRACT_TERM_MAIN) AS CONTRACT_TERM_MAIN
						, MAX(X.CONTRACT_TERM) AS CONTRACT_TERM
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * X.TRANS_MAMOUNT)) AS TRANS_SUM
             			--, SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0))           AS TRANS_VAT   /* 수불 부가세 필드 이용 */
	             		--매입부가세 계산방식 오류 수정 20180413 김호석 부가세 절대값(매입부가세단가)*수량
			            , SUM(DECODE(X.TAX_CODE,100,ROUND(X.TRANS_MVAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0) )           AS TRANS_VAT
			             		
                		, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * (X.TRANS_QTY * X.UNIT_PRICE))) AS UNIT_SUM
                		
						<#if schChk3?has_content>
			        	, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100)))) AS SALE_SUM 
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0,1))) AS SALE_NOTAX
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',1,0))) AS SALE_TAX
						, SUM(
							CASE WHEN X.FLAG = '1' THEN 
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(ROUND(X.TRANS_QTY * ROUND(X.SALE_PRICE / (1 + X.SE_RATE/100))) * DECODE(X.TAX_CODE,'100',0.1,0))
							ELSE
								-- 보정분 : 장려금제외
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
							END
							) AS SALE_VAT
						<#else>
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(X.SALE_PRICE * X.TRANS_QTY)) AS SALE_SUM 		/* 매출_면과세합계 */
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', 0, ROUND(X.SALE_PRICE * X.TRANS_QTY))) AS SALE_NOTAX		/* 매출_면세 */ 
						, SUM(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', ROUND(X.SALE_PRICE * X.TRANS_QTY),0)) AS SALE_TAX			/* 매출_과세 */ 
						, SUM(
							CASE WHEN X.FLAG = '1' THEN
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',0.1,0) * ROUND(X.SALE_PRICE * X.TRANS_QTY))
							ELSE
								DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(X.TAX_CODE,'100',1,0) * X.SALE_VAT)
							END
							) AS SALE_VAT   /* 매출부가세 */ 
						</#if>
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.SALE_AMOUNT,0))) +
		  					SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.SALE_AMOUNT,0))) +
		  					SUM(DECODE(X.TAX_CODE,100,ROUND(X.SALE_VAT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1)),0)) AS SALE_ALL

						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * X.CK_AMOUNT)) AS CK_SALE_SUM
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.CK_AMOUNT,0))) AS CK_SALE_NOTAX
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.CK_AMOUNT,0))) AS CK_SALE_TAX
                		, SUM(ROUND(DECODE(X.TAX_CODE,100,ROUND(X.CK_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))) AS CK_SALE_VAT

						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * X.JI_AMOUNT)) AS JI_SALE_SUM
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'210', X.JI_AMOUNT,0))) AS JI_SALE_NOTAX
						, SUM(ROUND(DECODE(SUBSTR(X.TRANS_TYPE,1,1),'I',1,-1) * DECODE(X.TAX_CODE,'100', X.JI_AMOUNT,0))) AS JI_SALE_TAX
                		, SUM(ROUND(DECODE(X.TAX_CODE,100,ROUND(X.JI_AMOUNT * DECODE(SUBSTR(X.TRANS_TYPE,1,1), 'I', 1, -1) / 10),0))) AS JI_SALE_VAT
                		, SUM(X.ITEM_QTY) AS ITEM_QTY
				FROM
						(
							SELECT
		        				  T.MAIN_UPJANG
		      					, T.UPJANG
		      					, T.TRANS_DATE
		      					, T.ITEM_CODE
		      					, T.ITEM_NAME
		      					, T.ITEM_SIZE
		      					, T.TRANS_UOM
		      					, T.TRANS_TYPE
		      					, T.TRANS_QTY
		      					, T.TRANS_MPRICE
		     					, T.TRANS_MAMOUNT
		     					, T.TRANS_MVAT
		     					, T.UNIT_PRICE
		      					, T.SALE_PRICE
		      					, T.SALE_AMOUNT
		      					, T.SALE_VAT
		      					, T.TAX_CODE
		      					, T.FLAG
		      					, T.DEPT_ID
		      					, T.CC_NM
		      					, T.UPJANGNM
		      					, F1.BIZ_DETAIL AS BIZ_DETAIL_MAIN
		      					, F2.BIZ_DETAIL
		      					, F1.CONTRACT_TERM AS CONTRACT_TERM_MAIN
		      					, F2.CONTRACT_TERM
	     			    		, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    							CASE WHEN NVL(T.C_SALE_RATE, 0) = 0 THEN  
												CASE WHEN NVL(T.C1_SALE_RATE, 0) = 0 THEN 0 
                                        		ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C1_SALE_RATE,0) / 100)))) END			    					
			    							ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.C_SALE_RATE,0) / 100))))
			    							END 
						  		   END AS CK_AMOUNT
	      						, CASE WHEN NVL(T.SALE_AMOUNT, 0) = 0 THEN 0
							  		  ELSE
			    								CASE WHEN NVL(T.J_SALE_RATE, 0) = 0 THEN 
													CASE WHEN NVL(T.J1_SALE_RATE, 0) = 0 THEN 0 
                                        			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J1_SALE_RATE,0) / 100)))) END			    					
			    					  			ELSE (T.SALE_AMOUNT - ROUND(T.SALE_AMOUNT / (1 + (NVL(T.J_SALE_RATE,0) / 100))))
			    					  			END 
						  		  END AS JI_AMOUNT
						 		, DECODE(NVL(T.S_SALE_RATE,0), 0, NVL(T.S1_SALE_RATE,0), 0) AS SE_RATE		
						 		,T.ITEM_QTY	
  						FROM
									(
										SELECT
										<#if schMainUpjang?has_content || schUpjang?has_content>
											/*+ PUSH_PRED(A) */
										<#else>
											/*+ LEADING(Z) */
										</#if>
											 Z.MAIN_UPJANG	
                                      		, A.TRANS_UPJANG AS UPJANG
											<#if schGubun=="1">
				      						, A.TRANS_DATE
			      							<#else>
									  		, A.MG_DATE AS TRANS_DATE
           									</#if>
				      						, A.ITEM_CODE
				      						, A.ITEM_NAME
				      						, A.ITEM_SIZE
				      						, A.TRANS_UOM
				      						, A.TRANS_TYPE
				      						, A.TRANS_QTY
											<#if schPrice=="2">
				      						, NVL(A.UNIT_PRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.UNIT_AMOUNT, 0)) AS TRANS_MVAT
			      							<#else>
				      						, NVL(A.TRANS_MPRICE, 0) AS TRANS_MPRICE
				      						, NVL(A.TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
				      						/* , NVL(A.TRANS_MVAT, 0) AS TRANS_MVAT */
				      						, ROUND(DECODE(A.TAX_CODE,'100',0.1,0) * NVL(A.TRANS_MAMOUNT, 0)) AS TRANS_MVAT
           									</#if>
                                            , NVL(A.UNIT_PRICE, 0) AS UNIT_PRICE
                      						, NVL(A.SALE_PRICE, 0) AS SALE_PRICE
                      						, NVL(A.SALE_AMOUNT, 0) AS SALE_AMOUNT
                      						, NVL(A.SALE_VAT, 0) AS SALE_VAT
				      						, A.TAX_CODE
				      						, A.FLAG
				      						, B2.DEPT_ID
				      						, D.CC_NM
				     						, B2.UPJANGNM
         									/*검색 조건 : CK물류비제외*/
         									<#if schChk1?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
													 ELSE NVL(C2.FM_SALE_RATE, 0)
													END)
									 		ELSE 
													(CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(C2.FM_NOSALE_RATE, 0)
													END)
									 		END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
				      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '001', A.ITEM_CODE, A.TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
				      						<#else>
				      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
				      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
											</#if>
         									/*검색 조건 : 지급수수료제외*/
         									<#if schChk2?has_content>
				      						, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
													ELSE NVL(J2.FM_SALE_RATE, 0)
													END)
									  		 ELSE 
													(CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
										 			ELSE NVL(J2.FM_NOSALE_RATE, 0)
													END)
									  		 END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
				     				 		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '002', A.ITEM_CODE, A.TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
				      						<#else>
				      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
				     				 		, 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
											</#if>
         									/*검색 조건 : 장려금제외*/
         									<#if schChk3?has_content>
				      			    		, CASE WHEN A.TAX_CODE = '100' THEN
													(CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
										 			ELSE NVL(S2.FM_SALE_RATE, 0)
										 		END)
									  		 ELSE 
													(CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
													ELSE NVL(S2.FM_NOSALE_RATE, 0)
													END)
											 END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
				     			  		, FMS_ITEM_SALE_RATE_CODE_FUN(A.TAX_CODE, A.TRANS_UPJANG, A.SUBINV_CODE, '003', A.ITEM_CODE, A.TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
				      					<#else>
								 	 	, 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
				     			  		, 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
										</#if>
										, NVL(A.ITEM_QTY, 0) AS ITEM_QTY
 								FROM (
 										SELECT 
												A.TRANS_UPJANG	,A.TRANS_DATE		,A.MG_DATE		,A.ITEM_CODE
												,A.ITEM_NAME	,A.ITEM_SIZE		,A.TRANS_UOM	,A.TRANS_TYPE
												,A.TRANS_QTY	,A.UNIT_PRICE		,A.UNIT_AMOUNT	,A.TAX_CODE
												,A.TRANS_MPRICE	,A.TRANS_MAMOUNT	,A.TRANS_MVAT	,A.SALE_PRICE
												,A.SALE_AMOUNT	,A.SALE_VAT			,A.SUBINV_CODE	,DECODE(SUBSTR(A.TRANS_DATE, 1, 6), SUBSTR(A.MG_DATE, 1, 6), A.TRANS_DATE, A.MG_DATE) AS TRANS_DATE2
												,A.CENTER_CODE		,A.CUSTCD		,'1' AS FLAG
												,A.ITEM_QTY 
												FROM (
															SELECT 
															
																	DT.MG_NO AS TRANS_ID,  /* 자재수불번호 */
															       SL.CUST_GR_DATE AS TRANS_DATE,  /* 판매일자 */
															       DT.MG_DATE AS MG_DATE,  /* 수불일자*/
															       
															--	   CASE
															--        WHEN SUBSTR(DT.MOVEMENT_TYP,0,2)='25' THEN 'FO'
															--        WHEN DT.PROC_TYP_CD IS NULL AND DT.IVT_INSP_NO IS NOT NULL THEN '재고조정'
															--        WHEN DT.PROC_TYP_CD IS NULL AND DT.IVT_INSP_NO IS NULL THEN 'INV'
															--        ELSE 'PO'
															--      END AS SOURCE_TYPE,  /* FO, PO, INV, 재고조정 */
															--      DT.MOVEMENT_TYP AS MVT,                                                             /*이동유형 */
															       CASE
															         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NULL THEN 'O002'         /* 재고이동 - 이동출고   */
															         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NOT NULL THEN 'I002'      /*재고이동 - 이동입고  */
															         WHEN DT.MOVEMENT_TYP = '251'OR DT.MOVEMENT_TYP = '252' THEN 'O001'      /* POS 매출 유형  */
															         WHEN DT.MOVEMENT_TYP = '701' OR DT.MOVEMENT_TYP = '702' THEN 'O004'      /* 재고실사 */
         															 WHEN DT.MOVEMENT_TYP ='261' OR DT.MOVEMENT_TYP = '262' THEN 'O003'      /* 대표창고 수불 단수차 원가 처리 2018.04.11 최학진 */
         															 WHEN ((DT.MOVEMENT_TYP ='197' OR DT.MOVEMENT_TYP = '198') AND (NVL(GI_BUY_AMT, 0) <> 0 OR NVL(GI_MGT_AMT, 0) <> 0)) THEN 'O004'      /* 재고실사 */
															         ELSE 'I001'
															       END AS TRANS_TYPE,
															       CASE
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)
															       END AS TRANS_QTY,             /* 수량 */
															       CASE
															         WHEN DT.PROC_TYP_CD IS NOT NULL THEN ROUND(DECODE(DT.GR_QTY,NULL,DT.GI_BUY_AMT/DT.GI_PURC_QTY,DT.GR_BUY_AMT/DT.GR_PURC_QTY),2) --20151022
															         WHEN DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_BUY_PRICE,DT.GR_BUY_PRICE)
															       END AS UNIT_PRICE,           /* 매입단가 */
															       CASE
															         WHEN DT.PROC_TYP_CD IS NOT NULL THEN PO.MGT_PRICE   --20151022
															         WHEN DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_PRICE,DT.GR_MGT_PRICE)
															       END AS TRANS_MPRICE,         /* 관리단가 */
															       CASE WHEN PO.DUTY_FREE_YN ='1' THEN
															         CASE
															           WHEN DT.PROC_TYP_CD IS NOT NULL THEN DECODE(MOD(TO_NUMBER(DT.MOVEMENT_TYP),2), 0, -1, 1) * ROUND(PO.MGT_PRICE*0.1) --20151022
															           WHEN DT.PROC_TYP_CD IS NULL THEN DECODE(MOD(TO_NUMBER(DT.MOVEMENT_TYP),2), 0, -1, 1) * DECODE(DT.GR_QTY,NULL,ROUND(DT.GI_MGT_PRICE*0.1),ROUND(DT.GR_MGT_PRICE*0.1)) --20151022
															         END
															       ELSE 0
															       END AS TRANS_MVAT,                                                               /* 관리금액 * 10% */
															--       CASE
															--         WHEN DT.PROC_TYP_CD IS NOT NULL THEN ROUND(PO.MGT_PRICE/DT.PURC_UNIT_RATE,2)  --20151022
															--         WHEN DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_PRICE,DT.GR_MGT_PRICE)
															--       END AS MARGIN_PRICE,           /* 내부관리단가.*/
															       CASE
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN ROUND(DECODE(DT.GR_QTY,NULL,DT.GI_BUY_AMT*-1,DT.GR_BUY_AMT*-1),2)
															         ELSE ROUND(DECODE(DT.GR_QTY,NULL,DT.GI_BUY_AMT,DT.GR_BUY_AMT),2)
															       END AS UNIT_AMOUNT,                 /* 매입단가 * 수량 */
															       CASE
															         WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY) --20151022
															         WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1) --20151022
															         WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT,DT.GR_MGT_AMT)
															         WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT*-1,DT.GR_MGT_AMT*-1)
															       END AS TRANS_MAMOUNT,                 /* 관리단가 * 수량 */
															--       CASE
															--         WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY) --20151022
															--         WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1) --20151022
															--         WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT,DT.GR_MGT_AMT)
															--         WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT*-1,DT.GR_MGT_AMT*-1)
															--       END AS MARGIN_AMOUNT,                 /* 관리단가 * 수량 */
															--       CASE WHEN PO.DUTY_FREE_YN ='1' THEN
															--         CASE
															--           --WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN ROUND(DT.GR_PURC_QTY*PO.MGT_PRICE,2)*0.1
															--           --WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN ROUND(DT.GR_PURC_QTY*PO.MGT_PRICE,2)*0.1 * -1
															--           WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*0.1,DT.GR_PURC_QTY*0.1) --20151022
															--           WHEN DT.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN PO.MGT_PRICE * DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*0.1*-1,DT.GR_PURC_QTY*0.1*-1) --20151022
															--           WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT*0.1,DT.GR_MGT_AMT*0.1)
															--           WHEN DT.PROC_TYP_CD IS NULL AND MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN DECODE(DT.GR_QTY,NULL,DT.GI_MGT_AMT*0.1*-1,DT.GR_MGT_AMT*0.1*-1)
															--         END
															--         ELSE 0
															--       END AS MARGIN_VAT,            /* 관리금액 * 10% */
															--       DT.PO_NO AS PO_NO,                                        /* 발주번호 */
															--       DT.PO_LNO AS PO_LNO,                                       /* 발주항번*/
															--       NVL(PO.LEGCY_REQ_LNO, PO.PO_LNO) AS SOURCE_ID,             /* 소스문서 ID */
															--       SL.MU_CD AS TRANS_MU_CD,         /*  MU 코드*/
															--       SL.CC_CD AS TRANS_DEPT_ID,       /* CC 코드*/
															       SL.SHOP_CD AS TRANS_UPJANG,    /* 업장코드 */
															       SL.CUST_WH_CD AS SUBINV_CODE,     /* 창고코드*/
															--       CASE
															--         --WHEN DT.MOVEMENT_TYP ='701' OR DT.MOVEMENT_TYP = '702' THEN (SELECT JR.DR_ACC_CD FROM ESIJRNL JR WHERE JR.JRNL_TYP_CD = DT.JRNL_TYP_CD) /* 재고실사 계정코드*/
															--         WHEN DT.MOVEMENT_TYP ='701' OR DT.MOVEMENT_TYP = '702' THEN (SELECT MAX(JR.DR_ACC_CD) FROM ESIJRNL JR WHERE JR.SYS_ID = DT.SYS_ID AND JR.COMP_CD = DT.COMP_CD AND JR.JRNL_TYP_CD = DT.JRNL_TYP_CD AND JR.MG_CLS_CD = 'GI') /* 재고실사 계정코드*/
															--         ELSE PO.ACC_CD                                                          /* ESPPODT 계정코드*/
															--       END AS ACCTCD,                                      /* 계정코드 */
															       DT.ITEM_CD AS ITEM_CODE,                                  /* 품목코드 */
															       MT.ITEM_NM AS ITEM_NAME,                                   /* 품목명 */
															       MT.SPEC AS ITEM_SIZE,                                      /*  규격 */
															       DECODE(PO.DUTY_FREE_YN,'1','100','3','210','220') AS TAX_CODE,             /* 과면세 코드 */
															       MT.PURC_UNIT_CD AS TRANS_UOM,                             /* 구매단위 */
															--       MT.PURC_IO_UNIT_CD AS UOM_CODE,                           /* 수불단위 */
															--       MT.PURC_UNIT_RATE AS UNIT_RATE,                        /* 관리단위환산율 */
															--       DT.GR_QTY AS UOM_QTY,                                 /* 수불에 이미 환산 수량으로 입고  */
															       DT.VD_CD AS CUSTCD,                                       /*  매입처 */
															--       PH.LEGCY_SO_TYP_CD AS PO_TYPE,                           /*  구매유형 */
															       PO.WH_CNTR_CD AS CENTER_CODE,                             /* 센터코드 */
															--       NVL(( SELECT MAX(SLIP_YN) FROM ESIFIHD WHERE SYS_ID = DT.SYS_ID AND COMP_CD = DT.COMP_CD AND MG_NO = DT.MG_NO),-1)  AS GANO,  /* 전표화 여부 */
															--       PO.BUDGET_USE_DEPT_CD AS BUDDEPT_ID,                      /* 예산 CC 코드 */
															       SL.SAL_PRICE AS SALE_PRICE,                               /* 외부판매단가 */
															--       CASE
															--        WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN (DT.GR_QTY * SL.SAL_PRICE)*-1
															--         ELSE (DT.GR_QTY * SL.SAL_PRICE)
															--        END AS SALE_AMOUNT,                                     /* 외부판매단가 * 수량 */
															        CASE
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN SL.SAL_PRICE_AMT*-1
															         ELSE SL.SAL_PRICE_AMT
															       END AS SALE_AMOUNT,                                     /* 외부판매단가 * 수량 */
															       --CASE WHEN MT.ACC_TAX_CD = '1' THEN
															       CASE WHEN PO.DUTY_FREE_YN ='1' THEN
															         CASE
															           WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN SL.SAL_PRICE_AMT * 0.1 * -1
															           ELSE SL.SAL_PRICE_AMT * 0.1
															         END
															       ELSE 0
															       END AS SALE_VAT,
															       SL.CUST_GR_DATE AS STD_DATE1,
															       DT.MG_DATE AS STD_DATE2                                        /*  외부판매금액 * 10% */
															--       SL.SAL_EVNT_PRICE AS SAL_EVNT_PRICE,                    /* 판매기획단가 */
															--       SL.SAL_STRA_PRICE AS SAL_STRA_PRICE,                    /*  판매전략단가 */
															--       SL.SAL_ENCO_PRICE AS SAL_ENCO_PRICE,                    /* 판매장려단가*/
															--       SL.SAL_OPER_PRICE AS SAL_OPER_PRICE,                    /* 판매운영단가 */
															--       DT.CUST_WH_CD AS SCUSTCD,                                  /*  매출처 */
															--       CASE WHEN PH.PO_TYP = 'BP' AND PH.PO_DTL_CD = 'Q' THEN 'Y'
															--         ELSE 'N'
															--       END AS CARD_PO_YN,                                     /* 법인카드 현지구매 정산 */
															--       DT.REG_ID,
															--       DT.REG_DT,
															--       DT.MOD_ID,
															--       DT.MOD_DT
															       , PO.ITEM_QTY	
															 FROM EPROCUSR.ESIMGHD HD,                                                /* 수불헤더*/
															      EPROCUSR.ESIMGDT DT,                                               /* 수불상세 */
															      EPROCUSR.ESPPODT PO,                                              /* 발주 상세 */
															      EPROCUSR.ESPPOHD PH,                                              /* 발주 헤더 */
															      EPROCUSR.ESMMTGL MT,                                              /* 품목마스터 */
															      EPROCUSR.ESISALP SL                                               /* 판매단가 */
															WHERE HD.SYS_ID = '100'
															  AND HD.COMP_CD = 'HFC'
															  AND HD.BU_CD = '2000'
															  AND HD.SYS_ID = DT.SYS_ID
															  AND HD.COMP_CD = DT.COMP_CD
															  AND HD.WH_CD = DT.WH_CD
															  AND HD.ITEM_CD = DT.ITEM_CD
															  
															  AND DT.MOVEMENT_TYP NOT IN ('561','562','998','999','901','902','801','802','111','112','211','212')   /* 기초 , 기말 재고,배송입출고, 직송 가상입출고  제외 */
															  --AND DT.MOVEMENT_TYP IN ('115','132','147','148','651','652') 
															  --AND DT.MOVEMENT_TYP IN ('101','102','105','106','115','123','132','144','147','148','151','152','153','154','155','156','157','158','161','162','163','165','167','171','172','181','182','185','186','195','196','197','198','251','252','261','262','301','311','312','321','322','331','332','351','352','511','512','651','652','701','702','711','712')
															  
															  AND DT.SYS_ID = PO.SYS_ID
															  AND DT.COMP_CD = PO.COMP_CD
															  AND DT.PO_NO = PO.PO_NO
															  AND DT.PO_LNO = PO.PO_LNO
															  AND DT.SYS_ID = PH.SYS_ID
															  AND DT.COMP_CD = PH.COMP_CD
															  AND DT.PO_NO = PH.PO_NO
															  AND DT.SYS_ID = MT.SYS_ID
															  AND DT.ITEM_CD = MT.ITEM_CD
															  AND DT.SYS_ID = SL.SYS_ID
															  AND DT.COMP_CD = SL.COMP_CD
															  AND DT.MG_NO = SL.MG_NO
															  AND DT.STS <> 'D'
															  
															  AND SUBSTR(SL.CUST_WH_CD, 1, 2) = 'S1'
															  --AND SL.CUST_WH_CD LIKE 'S1%'															  
---															  AND (TRANS_TYPE IN '_002' OR TRANS_TYPE = 'I001' )
															/*
															  AND (SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NOT NULL OR 
																	  		(
																	  			SUBSTR(DT.MOVEMENT_TYP,0,1) <> '3'
																	  			AND DT.MOVEMENT_TYP <> '251' AND DT.MOVEMENT_TYP <> '252'
																	  			AND DT.MOVEMENT_TYP <> '701' AND DT.MOVEMENT_TYP <> '702'
																	  		)
															  	)
															*/
															
																AND SL.SHOP_CD IN (
																	SELECT UPJANG FROM ST_UPJANG WHERE USE_YN = 'Y'
																		<#if schCustCd?has_content>
																			AND CUSTCD = :schCustCd
															  			</#if>
																		<#if schCc?has_content>
           																	AND CC_CD = :schCc
           																</#if>
																	)
																AND SL.SYS_ID = '100'
                                								AND SL.COMP_CD = 'HFC'  
															  <#if schGubun=="1">
															    AND SL.TRANS_DATE2 BETWEEN  :schFromDate AND :schToDate
																--AND DECODE (SUBSTR (SL.CUST_GR_DATE, 1, 6), SUBSTR (DT.MG_DATE, 1, 6), SL.CUST_GR_DATE, DT.MG_DATE)  BETWEEN :schFromDate AND :schToDate
																--AND (SL.CUST_GR_DATE BETWEEN :schFromDate AND :schToDate
                                								--OR DT.MG_DATE BETWEEN :schFromDate AND :schToDate )
															  <#else>
																AND DT.MG_DATE BETWEEN :schFromDate AND :schToDate
															  </#if>
															  
															  <#if schCenter?has_content>
																<#if schCenter != '*'>
																	AND PO.WH_CNTR_CD = :schCenter
															    </#if>
															  </#if>
															  
															  <#if schCustCd?has_content>
																AND DT.VD_CD = :schCustCd
															  </#if>
															  			
															  <#if schSelGubun=="ITEM">
                                                                AND DT.ITEM_CD = :edt_item_cd
															  </#if>
                                                              
															  <#if schSelGubun=="CLASS4">
                                                                AND DT.ITEM_CD IN ( SELECT A.ITEM_CODE	 
                                                                                    FROM HLDC_PO_ITEM_MST A
                                                                                    WHERE A.ITEM_CLASS4=:edt_item_cd )
															  </#if>
															  									
												) A WHERE DECODE (SUBSTR (A.STD_DATE1, 1, 6), SUBSTR (A.STD_DATE2, 1, 6), A.STD_DATE1, A.STD_DATE2)  BETWEEN :schFromDate AND :schToDate
 											
 												UNION ALL
	
												SELECT 
													TO_CHAR(B.TRANS_UPJANG) AS TRANS_UPJANG		,B.TRANS_DATE						,B.TRANS_DATE AS MG_DATE
													,B.ITEM_CODE								,B.ITEM_NAME						,B.ITEM_SIZE
													,B.TRANS_UOM								,B.TRANS_TYPE						,B.TRANS_QTY
													,B.UNIT_PRICE								,B.UNIT_AMOUNT AS UNIT_AMOUNT		,B.TAX_CODE
													,B.TRANS_MPRICE								,B.TRANS_MAMOUNT AS TRANS_MAMOUNT	,B.TRANS_MVAT 
													,B.SALE_PRICE								,B.SALE_AMOUNT						,B.SALE_VAT
													,B.SUBINV_CODE								,B.TRANS_DATE AS TRANS_DATE2		,B.CENTER_CODE
													,TO_CHAR(B.CUSTCD) AS CUSTCD				,'2' AS FLAG 
													, 0 AS ITEM_QTY 
													FROM FMS_TRANSACTION B
													
													WHERE 1=1
													--AND SUBSTR(B.SUBINV_CODE, 1, 2) = 'S1'
													AND (B.TRANS_TYPE IN '_002' OR B.TRANS_TYPE = 'I001' )
													<#if schGubun=="1">
														AND B.TRANS_DATE BETWEEN :schFromDate AND :schToDate
													<#else>
														AND B.TRANS_DATE BETWEEN :schFromDate AND :schToDate
												    </#if>
												
													<#if schCenter?has_content>
														<#if schCenter != '*'>
															AND B.CENTER_CODE = :schCenter
												        </#if>
												    </#if>
													 
													<#if schCustCd?has_content>
														AND B.CUSTCD = :schCustCd
												    </#if>
 								) A
                                     											INNER JOIN ST_UPJANG B2 ON 1 = 1
             																									/*검색 조건 : 본사*/
           																										<#if schMainUpjang?has_content>
           																										AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
           																										</#if>
            																									 /*검색 조건 : 사업장*/
           																										<#if schUpjang?has_content>
           																										AND B2.UPJANG = :schUpjang
           																										</#if>
																												 AND A.TRANS_UPJANG = B2.UPJANG
																				INNER JOIN FMS_UPJANG Z ON 1 = 1
            																									 /*검색 조건 : 영업담당*/
           																										<#if schSabun?has_content>
           																		  								 AND Z.PART_SALES_SABUN = :schSabun
																												</#if>
            																									 /*검색 조건 : 세부직군*/
           																										<#if schBizDetail?has_content>
           																		  								AND Z.BIZ_DETAIL = :schBizDetail
																												</#if>
																				  								 AND A.TRANS_UPJANG = Z.UPJANG
																				INNER JOIN HLDC_SC_DEPT_V D ON  1 = 1
           																												/*검색 조건 : 관리부서(팀)*/
           																												<#if schTm?has_content>
           																												AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
           																												</#if>
           																												/*검색 조건 : CC */
           																												<#if schCc?has_content>
           																												AND D.CC_CD = :schCc
           																												</#if>
																														AND  B2.DEPT_ID = D.DEPT_ID
                                        										--LEFT JOIN HLDC_PO_ITEM_MST M ON SUBSTR(M.ITEM_CODE, 1, 1) = 'F'
                                                               					--											 AND A.ITEM_CODE = M.ITEM_CODE
                                                               						LEFT JOIN EPROCUSR.ESMMTGL M ON A.ITEM_CODE = M.ITEM_CD
                                                               																			--M.ITEM_CD LIKE 'F%' 
                                                               																			AND SUBSTR(M.ITEM_CD, 1, 1) = 'F'
                                                               																			AND M.SYS_ID = '100'
                                                               																			AND M.STS <> 'D'
                                   											-- 추가 : 특약사항관련 : 중분류, 소분류
         																	<#if schChk1?has_content>
																			LEFT JOIN FMS_SALE_RATE C1 ON C1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND C1.SUBINV_CODE = A.SUBINV_CODE
																													AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																													--AND M.ITEM_CLASS3 = C1.ITEM_CLASS /* 중분류 */
																													AND M.CATE3_CD = C1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE C2 ON C2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND C2.SUBINV_CODE = A.SUBINV_CODE
																													AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																													AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																													--AND M.ITEM_CLASS4 = C2.ITEM_CLASS	/* 소분류 */
																													AND M.CATE4_CD = C2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk2?has_content>
																			LEFT JOIN FMS_SALE_RATE J1 ON J1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND J1.SUBINV_CODE = A.SUBINV_CODE
																													AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																													--AND M.ITEM_CLASS3 = J1.ITEM_CLASS /* 중분류 */
																													AND M.CATE3_CD = J1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE J2 ON J2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND J2.SUBINV_CODE = A.SUBINV_CODE
																													AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																													AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																													--AND M.ITEM_CLASS4 = J2.ITEM_CLASS	/* 소분류 */
																													AND M.CATE4_CD = J2.ITEM_CLASS	/* 소분류 */
																			</#if>
         																	<#if schChk3?has_content>
																			LEFT JOIN FMS_SALE_RATE S1 ON S1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND S1.SUBINV_CODE = A.SUBINV_CODE
																													AND S1.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																													--AND M.ITEM_CLASS3 = S1.ITEM_CLASS /* 중분류 */
																													AND M.CATE3_CD = S1.ITEM_CLASS /* 중분류 */
																			LEFT JOIN FMS_SALE_RATE S2 ON S2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																													AND S2.SUBINV_CODE = A.SUBINV_CODE
																													AND S2.CASH_CODE = '003'			/* 장려금(003) */
																													AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																													--AND M.ITEM_CLASS4 = S2.ITEM_CLASS /* 소분류 */
																													AND M.CATE4_CD = S2.ITEM_CLASS /* 소분류 */
																			</#if>
									
															  <#if schSelGubun=="ITEM">
                                                                WHERE A.ITEM_CODE = :edt_item_cd
															  </#if>
                                                              
															  <#if schSelGubun=="CLASS4">
                                                                WHERE A.ITEM_CODE IN ( SELECT ITEM.ITEM_CODE	 
                                                                                    FROM HLDC_PO_ITEM_MST ITEM
                                                                                    WHERE ITEM.ITEM_CLASS4=:edt_item_cd )
															  </#if>

<#if newGubun=="Y">
								UNION ALL

                                SELECT
                                          MAIN_UPJANG	
                                        , TRANS_UPJANG AS UPJANG
                  											<#if schGubun=="1">
                  				      			  , TRANS_DATE
                  			      					<#else>
                  									  	, MG_DATE AS TRANS_DATE
                             						</#if>
                                        , ITEM_CODE
                                        , ITEM_NAME
                                        , ITEM_SIZE
                                        , TRANS_UOM
                                        , TRANS_TYPE
                                        , TRANS_QTY
              											    <#if schPrice=="2">
              				      						, NVL(UNIT_PRICE, 0) AS TRANS_MPRICE
              				      						, NVL(UNIT_AMOUNT, 0) AS TRANS_MAMOUNT
              				      						, ROUND(DECODE(TAX_CODE,'100',0.1,0) * NVL(UNIT_AMOUNT, 0)) AS TRANS_MVAT
              			      							<#else>
              				      						, NVL(TRANS_MPRICE, 0) AS TRANS_MPRICE
              				      						, NVL(TRANS_MAMOUNT, 0) AS TRANS_MAMOUNT
              				      						, NVL(TRANS_MVAT, 0) AS TRANS_MVAT
                         								</#if>
                                        , NVL(UNIT_PRICE, 0) AS UNIT_PRICE
                                        , NVL(SALE_PRICE, 0) AS SALE_PRICE
                                        , NVL(SALE_AMOUNT, 0) AS SALE_AMOUNT
                                        , NVL(SALE_VAT, 0) AS SALE_VAT
                                        , TAX_CODE
                                        , '1'
                                        , DEPT_ID
                                        , CC_NM
                                        , UPJANGNM
                                        
                       									/*검색 조건 : CK물류비제외*/
                       									<#if schChk1?has_content>
              				      						, CASE WHEN TAX_CODE = '100' THEN
              													    (CASE WHEN NVL(C2.FM_SALE_RATE, 0) = 0 THEN NVL(C1.FM_SALE_RATE, 0)
              													     ELSE NVL(C2.FM_SALE_RATE, 0)
              													     END)
              									 		      ELSE 
              													    (CASE WHEN NVL(C2.FM_NOSALE_RATE, 0) = 0 THEN NVL(C1.FM_NOSALE_RATE, 0)
              										 			     ELSE NVL(C2.FM_NOSALE_RATE, 0)
              													     END)
              									 		      END AS C1_SALE_RATE							/* 분류 기준 CK 물류비율 */	
              				      			 			, FMS_ITEM_SALE_RATE_CODE_FUN(TAX_CODE, TRANS_UPJANG, SUBINV_CODE, '001', ITEM_CODE, TRANS_DATE) AS C_SALE_RATE		/* 자재별 CK 비율 */
              				      						<#else>
              				      						, 0 AS C1_SALE_RATE								/* 분류 기준 CK 물류비율 */
              				      						, 0 AS C_SALE_RATE									/* 자재 기준 CK 물류비율 */
                  											</#if>
                       									/*검색 조건 : 지급수수료제외*/
                       									<#if schChk2?has_content>
              				      						, CASE WHEN TAX_CODE = '100' THEN
              													    (CASE WHEN NVL(J2.FM_SALE_RATE, 0) = 0 THEN NVL(J1.FM_SALE_RATE, 0)
              													     ELSE NVL(J2.FM_SALE_RATE, 0)
              													     END)
              									  		    ELSE 
              													    (CASE WHEN NVL(J2.FM_NOSALE_RATE, 0) = 0 THEN NVL(J1.FM_NOSALE_RATE, 0)
              										 			     ELSE NVL(J2.FM_NOSALE_RATE, 0)
              													     END)
              									  		    END AS J1_SALE_RATE								/* 분류 기준 지급수수료 비율 */	
              				     				 		  , FMS_ITEM_SALE_RATE_CODE_FUN(TAX_CODE, TRANS_UPJANG, SUBINV_CODE, '002', ITEM_CODE, TRANS_DATE) AS J_SALE_RATE	/* 자재별 지급수수료 비율 */
              				      						<#else>
              				      				 		, 0 AS J1_SALE_RATE									/* 분류 기준 지급수수료 비율 */
              				     				 		  , 0 AS J_SALE_RATE		/* 자재별 지급수수료 비율 */
                  											</#if>
                       									/*검색 조건 : 장려금제외*/
                       									<#if schChk3?has_content>
            				      			    		, CASE WHEN TAX_CODE = '100' THEN
            													      (CASE WHEN NVL(S2.FM_SALE_RATE, 0) < 0 THEN NVL(S1.FM_SALE_RATE, 0)
            										 			       ELSE NVL(S2.FM_SALE_RATE, 0)
            										 		         END)
            									  		      ELSE 
              													    (CASE WHEN NVL(S2.FM_NOSALE_RATE, 0) < 0 THEN NVL(S1.FM_NOSALE_RATE, 0)
              													     ELSE NVL(S2.FM_NOSALE_RATE, 0)
              													     END)
              											      END AS S1_SALE_RATE								/* 분류 기준 장려금 비율 */	
              				     			  		  , FMS_ITEM_SALE_RATE_CODE_FUN(TAX_CODE, TRANS_UPJANG, SUBINV_CODE, '003', ITEM_CODE, TRANS_DATE) AS S_SALE_RATE		/* 자재별 장려금 비율 */
              				      					  <#else>
              								 	 	      , 0 AS S1_SALE_RATE									/* 분류 기준 장려금 비율 */	
              				     			  		  , 0 AS S_SALE_RATE									/* 자재별 장려금 비율 */
              										      </#if>
              										      , NVL(ITEM_QTY, 0) AS ITEM_QTY
                                  FROM (
                                SELECT  A.TRANS_UPJANG	,A.TRANS_DATE		,A.MG_DATE		,A.ITEM_CODE
                                       ,A.ITEM_NAME	    ,A.ITEM_SIZE		,A.TRANS_UOM	,A.TRANS_TYPE
                                       ,A.TRANS_QTY	    ,A.UNIT_PRICE		,A.UNIT_AMOUNT	,A.TAX_CODE
                                       ,A.TRANS_MPRICE	,A.TRANS_MAMOUNT	,A.TRANS_MVAT	,A.SALE_PRICE
                                       ,A.SALE_AMOUNT	,A.SALE_VAT			,A.SUBINV_CODE	,DECODE(SUBSTR(A.TRANS_DATE, 1, 6), SUBSTR(A.MG_DATE, 1, 6), A.TRANS_DATE, A.MG_DATE) AS TRANS_DATE2
                                       ,A.CENTER_CODE	,A.CUSTCD		    ,'1' AS FLAG    ,B2.UPJANGNM
                                       ,B2.DEPT_ID      ,D.CC_NM            ,Z.MAIN_UPJANG, A.ITEM_QTY
                                  FROM  FCUS.VO_PO_TRANSACTION_SALE_HNR A
                                 INNER JOIN ST_UPJANGV B2 
                                   ON 1 = 1
																	/*검색 조건 : 본사*/
																	<#if schMainUpjang?has_content>
																	AND B2.UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE  MAIN_UPJANG = :schMainUpjang)
																	</#if>
																	 /*검색 조건 : 사업장*/
																	<#if schUpjang?has_content>
																	AND B2.UPJANG = :schUpjang
																	</#if>
                                  AND A.TRANS_UPJANG = B2.UPJANG
                                INNER JOIN FMS_UPJANGV Z
                                   ON 1 = 1
															    /*검색 조건 : 영업담당*/
															    <#if schSabun?has_content>
							  								  AND Z.PART_SALES_SABUN = :schSabun
												          </#if>
															    /*검색 조건 : 세부직군*/
															    <#if schBizDetail?has_content>
							  								  AND Z.BIZ_DETAIL = :schBizDetail
												          </#if>
                                  AND A.TRANS_UPJANG = Z.UPJANG
                                INNER JOIN HLDC_SC_DEPT_V D 
                                   ON  1 = 1
																	/*검색 조건 : 관리부서(팀)*/
																	<#if schTm?has_content>
																	AND D.TM_CD IN (SELECT * FROM TABLE(HLDC_SC_DEPT_V_FUN(:schTm)))
																	</#if>
																	/*검색 조건 : CC */
																	<#if schCc?has_content>
																	AND D.CC_CD = :schCc
																	</#if>
                                  AND B2.DEPT_ID = D.DEPT_ID
                                LEFT JOIN EPROCUSR.ESMMTGL M 
                                  ON A.ITEM_CODE = M.ITEM_CD
                                 AND M.SYS_ID = '100'
                                 AND M.STS <> 'D'
           											-- 추가 : 특약사항관련 : 중분류, 소분류
																<#if schChk1?has_content>
																LEFT JOIN FMS_SALE_RATE C1 ON 
																  C1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
 																 AND C1.SUBINV_CODE = A.SUBINV_CODE
																 AND C1.CASH_CODE = '001'			/* CK물류비(001) */
																 AND A.TRANS_DATE BETWEEN C1.SDATE AND C1.EDATE
																 AND M.CATE3_CD = C1.ITEM_CLASS /* 중분류 */
																LEFT JOIN FMS_SALE_RATE C2 
																  ON C2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND C2.SUBINV_CODE = A.SUBINV_CODE
																 AND C2.CASH_CODE = '001'			/* CK물류비(001) */
																 AND A.TRANS_DATE BETWEEN C2.SDATE AND C2.EDATE
																 AND M.CATE4_CD = C2.ITEM_CLASS	/* 소분류 */
																</#if>
																<#if schChk2?has_content>
																LEFT JOIN FMS_SALE_RATE J1 
																  ON J1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND J1.SUBINV_CODE = A.SUBINV_CODE
																 AND J1.CASH_CODE = '002'			/* 지급수수료(002) */
																 AND A.TRANS_DATE BETWEEN J1.SDATE AND J1.EDATE
																 AND M.CATE3_CD = J1.ITEM_CLASS /* 중분류 */
																LEFT JOIN FMS_SALE_RATE J2 
																  ON J2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND J2.SUBINV_CODE = A.SUBINV_CODE
																 AND J2.CASH_CODE = '002'			/* 지급수수료(002) */
																 AND A.TRANS_DATE BETWEEN J2.SDATE AND J2.EDATE
																 AND M.CATE4_CD = J2.ITEM_CLASS	/* 소분류 */
																</#if>
																<#if schChk3?has_content>
																LEFT JOIN FMS_SALE_RATE S1 
																  ON S1.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND S1.SUBINV_CODE = A.SUBINV_CODE
																 AND S1.CASH_CODE = '003'			/* 장려금(003) */
																 AND A.TRANS_DATE BETWEEN S1.SDATE AND S1.EDATE
																 AND M.CATE3_CD = S1.ITEM_CLASS /* 중분류 */
																LEFT JOIN FMS_SALE_RATE S2 
																  ON S2.UPJANG = TO_NUMBER(A.TRANS_UPJANG)
																 AND S2.SUBINV_CODE = A.SUBINV_CODE
																 AND S2.CASH_CODE = '003'			/* 장려금(003) */
																 AND A.TRANS_DATE BETWEEN S2.SDATE AND S2.EDATE
																 AND M.CATE4_CD = S2.ITEM_CLASS /* 소분류 */
																</#if>
                                WHERE A.MG_DATE BETWEEN :schFromDate AND :schToDate
                                   AND ( A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
                                   <#if schSelGubun=="ITEM">
                                   AND A.ITEM_CODE = :edt_item_cd
                                   </#if>
                                   <#if schSelGubun=="CLASS4">
                                   AND A.ITEM_CODE IN ( SELECT A.ITEM_CODE
                                                          FROM HLDC_PO_ITEM_MST A
                                                         WHERE A.ITEM_CLASS4=:edt_item_cd )
                                   </#if>
								)
</#if>

								) T	 INNER JOIN FMS_UPJANG F1 ON T.MAIN_UPJANG = F1.UPJANG
									 INNER JOIN FMS_UPJANG F2 ON T.UPJANG = F2.UPJANG
						) X  
	 					GROUP BY  X.CC_NM, X.MAIN_UPJANG, X.UPJANG, X.UPJANGNM
				) RS
				GROUP BY RS.CC_NM
					, RS.MAIN_UPJANG
					, RS.MAIN_UPJANGNM
					, RS.UPJANG
					, RS.UPJANGNM
					<#if schView == '2'>	
					/* 업장별 집계 */
					, RS.BIZ_DETAIL
					<#else>
					, RS.BIZ_DETAIL_MAIN
					</#if>		
		
		
		]]></statement>


	<!-- 매입매출집계(을)를 등록한다. -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.insert */
		<![CDATA[
		INSERT INTO TABLE_NAME 
		(
		       COLUMN_NAME1,
			   COLUMN_NAME2,
		       CUSER,
		       CDATE
		)
		VALUES
		(
		       :columnName1,
			   <#if columnName2?has_content> :columnName2, <#else> null, </#if>
		       :loginSabun,
		       SYSDATE
		)
		]]>
	</statement>

	<!-- 매입매출집계(을)를 수정한다. -->
	<statement name="update" type="update">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.update */
		<![CDATA[
		UPDATE TABLE_NAME 
		SET    COLUMN_NAME1 = :columnName1,
		       COLUMN_NAME2 = :columnName2,
		       UUSER = :loginSabun,
		       UDATE = SYSDATE
		WHERE  COLUMN_NAME = :columnName
		]]>
	</statement>

	<!-- 매입매출집계(을)를 삭제한다. -->
	<statement name="delete" type="delete">
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.delete */
		<![CDATA[
		DELETE 
		FROM   TABLE_NAME 
		WHERE  COLUMN_NAME = :columnName
		]]>
	</statement>

	<!-- [속도개선 Project 시작] 2017. 8. 24. 최범주 매출집계정보조회 기능 추가 -->
	<!-- 매출집계정보 조회 -->
	<statement name="selectSaleTtzInfo" type="select">
		<![CDATA[
		/*+ com.hwfs.fm.fmf.dao.BuySaleSumDAO.selectSaleTtzInfo */
		SELECT CASE WHEN COUNT(1) > 0 THEN 'Y'
		            ELSE                   'N'
		       END AS SALE_TTZ_INFO_EST_YN  /* 매출집계정보존재여부 */
		  FROM FMS_BUY_SALE_SUM A 
		  --FROM FMS_BUY_SALE_SUM_TEMP A
		 WHERE A.TRANS_DATE BETWEEN substr(:schToDate,0,6) || '01' AND substr(:schToDate,0,6) || '31'  /* 검색 조건 : 기간         */		
		 AND A.UNIT_SUM > 0 -- 클레임 제외(EX.202001)  
	    ]]>
	</statement>
	<!-- [속도개선 Project   끝] 2017. 8. 24. 최범주 -->
</hqml>


