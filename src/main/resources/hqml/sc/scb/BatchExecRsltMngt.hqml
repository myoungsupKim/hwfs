<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="sc.scb.batchExecRsltMngtDAO">
	<desc>배치 Job 실행 결과 HQML Query</desc>

	<!-- 이미 처리된(정지,종료,실패된) JOB 실행 결과 목록을 조회한다. -->
	<statement name="selectJobResultList" type="select">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.selectJobResultList */
		<![CDATA[
	    SELECT
	           A.JOB_EXECUTION_ID             
	         , A.JOB_INSTANCE_ID
	         , B.JOB_NAME
	         , C.SYS_TYPE
	         , C.SYS_ID
	         , A.VERSION
	         , TO_CHAR(A.CREATE_TIME,'YYYY-MM-DD HH24:MI:SS') AS CREATE_TIME
	         , TO_CHAR(A.START_TIME, 'YYYY-MM-DD HH24:MI:SS') AS START_TIME
	         , TO_CHAR(A.END_TIME,   'YYYY-MM-DD HH24:MI:SS') AS END_TIME
	         , A.STATUS
	         , A.EXIT_CODE
	         , A.EXIT_MESSAGE
	         , TO_CHAR(A.LAST_UPDATED,'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATED
	         , EXECUTION_USER_ID
	         , SYNC_YN
	    FROM   BATCH_JOB_EXECUTION A
	         , BATCH_JOB_INSTANCE B 
	           LEFT OUTER JOIN (SELECT JOB_NAME
	           						 , SYS_TYPE
				                     , SYS_ID
				                FROM   BATCH_JOB
				                WHERE  1=1
						        <#if sysType?has_content>
								AND	   SYS_TYPE = :sysType
								</#if>
        						<#if sysId?has_content>
			   					AND	   SYS_ID = :sysId
								</#if>
								) C
			   ON B.JOB_NAME = C.JOB_NAME
	    WHERE  A.JOB_INSTANCE_ID = B.JOB_INSTANCE_ID
	    AND    B.JOB_NAME = C.JOB_NAME
	    <#if condition?has_content && keyword?has_content>
			<#if condition == '1'>        
        AND    B.JOB_NAME LIKE ('%'||:keyword||'%')
        	<#elseif condition == '2'>
        AND    A.JOB_EXECUTION_ID LIKE ('%'||:keyword||'%')
        	</#if>
        </#if>
        <#if status?has_content>        
        AND    A.STATUS = :status
        <#else>
        AND    A.STATUS <> 'STARTED'
        </#if>
        <#if fromDate?has_content>
    	AND    END_TIME >= TO_DATE(:fromDate)
        </#if>
        <#if toDate?has_content>
   		AND    END_TIME <= TO_DATE(CONCAT(:toDate,' 23:59:59'), 'yyyymmdd HH24:MI:SS')
   		</#if>
   		<#if mineYn?has_content && (mineYn == 'true' || mineYn == '1') >
   			<#if executionUserId?has_content>
   		AND    EXECUTION_USER_ID = :executionUserId
            </#if>
        </#if>
        ORDER BY END_TIME DESC
		]]>
	</statement>

	<!-- 현재 실행 중인 배치 Job 목록을 조회한다. -->
	<statement name="selectJobRunningList" type="select">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.selectJobRunningList */
		<![CDATA[
	    SELECT
	           A.JOB_EXECUTION_ID             
	         , A.JOB_INSTANCE_ID
	         , B.JOB_NAME
	         , C.SYS_TYPE
	         , C.SYS_ID
	         , A.VERSION
	         , TO_CHAR(A.CREATE_TIME,'YYYY-MM-DD HH24:MI:SS') AS CREATE_TIME
	         , TO_CHAR(A.START_TIME, 'YYYY-MM-DD HH24:MI:SS') AS START_TIME
	         , TO_CHAR(A.END_TIME,   'YYYY-MM-DD HH24:MI:SS') AS END_TIME
	         , A.STATUS
	         , A.EXIT_CODE
	         , A.EXIT_MESSAGE
	         , TO_CHAR(A.LAST_UPDATED,'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATED
	         , EXECUTION_USER_ID
	         , SYNC_YN
	    FROM   BATCH_JOB_EXECUTION A
	         , BATCH_JOB_INSTANCE B 
	           LEFT OUTER JOIN (SELECT JOB_NAME
	           						 , SYS_TYPE
				                     , SYS_ID
				                FROM   BATCH_JOB
				                WHERE  1=1
						        <#if sysType?has_content>
								AND	   SYS_TYPE = :sysType
								</#if>
        						<#if sysId?has_content>
			   					AND	   SYS_ID = :sysId
								</#if>
								) C
			   ON B.JOB_NAME = C.JOB_NAME
	    WHERE  A.JOB_INSTANCE_ID = B.JOB_INSTANCE_ID
	    AND    B.JOB_NAME = C.JOB_NAME
	    <#if condition?has_content && keyword?has_content>
			<#if condition == '1'>        
        AND    B.JOB_NAME LIKE ('%'||:keyword||'%')
        	<#elseif condition == '2'>
        AND    A.JOB_EXECUTION_ID LIKE ('%'||:keyword||'%')
        	</#if>
        </#if>
        AND    A.STATUS = :status
   		<#if mineYn?has_content && (mineYn == 'true' || mineYn == '1') >
   			<#if executionUserId?has_content>
   		AND    EXECUTION_USER_ID = :executionUserId
            </#if>
        </#if>
        ORDER BY END_TIME DESC
		]]>
	</statement>

	<!-- Job 실행결과 상세정보 목록을 조회한다. -->
	<statement name="selectJobResultDetailList" type="select">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.selectJobResultDetailList */
		<![CDATA[
	    SELECT
	           A.JOB_EXECUTION_ID             
	         , A.JOB_INSTANCE_ID
	         , B.JOB_NAME
	         , A.VERSION
	         , TO_CHAR(A.CREATE_TIME,'YYYY-MM-DD HH24:MI:SS') AS CREATE_TIME
	         , TO_CHAR(A.START_TIME, 'YYYY-MM-DD HH24:MI:SS') AS START_TIME
	         , TO_CHAR(A.END_TIME,   'YYYY-MM-DD HH24:MI:SS') AS END_TIME
	         , TO_CHAR(A.END_TIME-A.START_TIME, 'YYYY-MM-DD HH24:MI:SS') AS ELAPSED_TIME
	         , A.STATUS
	         , A.EXIT_CODE
	         , A.EXIT_MESSAGE
	         , TO_CHAR(A.LAST_UPDATED,'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATED
	         , EXECUTION_USER_ID
	         , SYNC_YN
	    FROM   BATCH_JOB_EXECUTION A
	         , BATCH_JOB_INSTANCE B 
		WHERE  A.JOB_EXECUTION_ID = :jobExecutionId
		AND    A.JOB_INSTANCE_ID = B.JOB_INSTANCE_ID
		]]>
	</statement>

	<!-- Step 실행결과 상세정보 목록을 조회한다. -->
	<statement name="selectStepResultDetailList" type="select">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.selectStepResultDetailList */
		<![CDATA[
	    SELECT
	           STEP_EXECUTION_ID             
	         , VERSION
	         , STEP_NAME
	         , JOB_EXECUTION_ID
	         , TO_CHAR(START_TIME, 'YYYY-MM-DD HH24:MI:SS') AS START_TIME
	         , TO_CHAR(END_TIME,   'YYYY-MM-DD HH24:MI:SS') AS END_TIME
	         , TO_CHAR(END_TIME-START_TIME, 'YYYY-MM-DD HH24:MI:SS') AS ELAPSED_TIME
	         , STATUS
	         , COMMIT_COUNT
	         , READ_COUNT
	         , FILTER_COUNT
	         , WRITE_COUNT
	         , READ_SKIP_COUNT
	         , WRITE_SKIP_COUNT
	         , PROCESS_SKIP_COUNT
	         , (READ_SKIP_COUNT + WRITE_SKIP_COUNT+ PROCESS_SKIP_COUNT) AS TOTAL_SKIP_COUNT
	         , ROLLBACK_COUNT
	         , EXIT_CODE
	         , EXIT_MESSAGE
	         , TO_CHAR(LAST_UPDATED,'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATED
	    FROM   BATCH_STEP_EXECUTION 
		WHERE  JOB_EXECUTION_ID = :jobExecutionId
		]]>
	</statement>

	<!-- 자기가 실행시킨 현재 실행 중인 배치 Job의 상태값을 얻는다. -->
	<statement name="selectAsyncRunningBatchStatus" type="select">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.selectAsyncRunningBatchStatus */
		<![CDATA[
	    SELECT
	           A.JOB_EXECUTION_ID             
	         , A.JOB_INSTANCE_ID
	         , A.STATUS
	    FROM   BATCH_JOB_EXECUTION A
	         , BATCH_JOB_INSTANCE B
	    WHERE  A.JOB_INSTANCE_ID = B.JOB_INSTANCE_ID
	    AND    B.JOB_NAME = :jobName
	    AND    A.STATUS = 'STARTED'
	    <#if executionUserId?has_content>
   		AND    EXECUTION_USER_ID = :executionUserId
        </#if>
		]]>
	</statement>

	<!-- Step 실행 로그 목록을 조회한다. -->
	<statement name="selectJobResultStepLogList" type="select">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.selectJobResultStepLogList */
		<![CDATA[
	    SELECT
	           STEP_EXECUTION_ID             
	         , SP_SEQ
	         , SP_NAME
	         , EXIT_CODE
	         , EXIT_MESSAGE
	         , TO_CHAR(CDATE,'YYYY-MM-DD HH24:MI:SS') AS CDATE
	    FROM   BATCH_SP_EXECUTION
	    WHERE  STEP_EXECUTION_ID = :stepExecutionId
	    ORDER BY SP_SEQ ASC
		]]>
	</statement>

    <!-- Job Instance 결과정보를 삭제 -->
	<statement name="deleteJobInstance" type="delete">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.deleteJobInstance */
		<![CDATA[
        DELETE FROM BATCH_JOB_INSTANCE
        WHERE  JOB_INSTANCE_ID = :jobInstanceId
		]]>
	</statement>

    <!-- Job Params 결과정보를 삭제 -->
	<statement name="deleteJobParams" type="delete">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.deleteJobParams */
		<![CDATA[
        DELETE FROM BATCH_JOB_PARAMS
        WHERE  JOB_INSTANCE_ID = :jobInstanceId
		]]>
	</statement>
    
    <!-- Job Execution 결과정보를 삭제 -->
	<statement name="deleteJobExecution" type="delete">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.deleteJobExecution */
		<![CDATA[
        DELETE FROM BATCH_JOB_EXECUTION
        WHERE  JOB_EXECUTION_ID = :jobExecutionId
		]]>
	</statement>
	
    <!-- Job Execution Context 결과정보를 삭제 -->
	<statement name="deleteJobExecutionContext" type="delete">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.deleteJobExecutionContext */
		<![CDATA[
    	DELETE FROM BATCH_JOB_EXECUTION_CONTEXT
        WHERE  JOB_EXECUTION_ID = :jobExecutionId
		]]>
	</statement>

    <!-- Step Execution 결과정보를 삭제 -->
	<statement name="deleteStepExecution" type="delete">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.deleteStepExecution */
		<![CDATA[
        DELETE FROM BATCH_STEP_EXECUTION
        WHERE  JOB_EXECUTION_ID = :jobExecutionId
		]]>
	</statement>

    <!-- Step Execution Context 결과정보를 삭제 -->
	<statement name="deleteStepExecutionContext" type="delete">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.deleteStepExecutionContext */
		<![CDATA[
        DELETE FROM BATCH_STEP_EXECUTION_CONTEXT
        WHERE  STEP_EXECUTION_ID IN (SELECT STEP_EXECUTION_ID
                                     FROM   BATCH_STEP_EXECUTION
                                     WHERE  JOB_EXECUTION_ID = :jobExecutionId)
		]]>
	</statement>

    <!-- SP Execution 결과정보를 삭제 -->
	<statement name="deleteSpExecution" type="delete">
		/*+ com.hwfs.sc.scb.dao.BatchExecRsltMngtDAO.deleteSpExecution */
		<![CDATA[
        DELETE FROM BATCH_SP_EXECUTION
        WHERE  STEP_EXECUTION_ID IN (SELECT STEP_EXECUTION_ID
                                     FROM   BATCH_STEP_EXECUTION
                                     WHERE  JOB_EXECUTION_ID = :jobExecutionId)
		]]>
	</statement>

</hqml>
