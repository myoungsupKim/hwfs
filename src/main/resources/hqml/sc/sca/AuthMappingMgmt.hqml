<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="sc.sca.authMappingMgmtDAO">
	<desc>권한 부여 HQML Query</desc>

	<!-- 권한목록을 조회한다. -->
	<statement name="selectAuthList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectAuthList */
		<![CDATA[
SELECT SYS_TYPE,
       ROLE,
       ROLE_NAME,
       ROLE_TYPE,
       UPJANG,
       CONTENTS,
       REMARK,
       USE_CD,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'USE_CD' AND CODE = USE_CD) AS USE_NM,
       ATTR01,
       ATTR02,
       ATTR03,
       ATTR04,
       ATTR05,
       ATTR06,
       ATTR07,
       ATTR08,
       ATTR09,
       ATTR10
FROM   SCC_ROLE
WHERE  SYS_TYPE = :sysType
AND    USE_CD = :useCd
AND    USE_YN = 'Y'
AND    ROLE_TYPE = '본부'
		]]>
	</statement>

	<!-- 권한이 부여되지 않는 CC목록을 조회한다. -->
	<statement name="selectAuthDeptUnCcMapList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectAuthDeptUnCcMapList */
		<![CDATA[
SELECT A.CC_CD,
       A.CC_NM
FROM   SCC_CC A,
       HLDC_SC_DEPT_V B
WHERE  B.CC_CD = A.CC_CD
AND    TO_DATE(A.START_DATE) <= SYSDATE
AND    TO_DATE(A.END_DATE) >= SYSDATE
AND    A.CC_CD NOT IN (SELECT CC_CD
                     FROM   SCC_DEPT_ROLE
                     WHERE  SYS_TYPE = :sysType
                     AND    ROLE = :role)
<#if buCd?has_content>
AND    B.BU_CD = :buCd
</#if>
<#if muCd?has_content>
AND    B.MU_CD = :muCd
</#if>
<#if tmCd?has_content>
AND    B.TM_CD = :tmCd
</#if>
ORDER BY A.CC_CD
		]]>
	</statement>

	<!-- 권한이 부여된 CC목록을 조회한다. -->
	<statement name="selectAuthDeptCcMapList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectAuthDeptCcMapList */
		<![CDATA[
SELECT A.SYS_TYPE,
       A.ROLE,
       A.CC_CD,
       B.CC_NM,
       A.REMARK,
       DECODE(A.USE_YN, 'Y', '1', '0') AS USE_YN,
       A.ATTR01,
       A.ATTR02,
       A.ATTR03,
       A.ATTR04,
       A.ATTR05,
       A.ATTR06,
       A.ATTR07,
       A.ATTR08,
       A.ATTR09,
       A.ATTR10
FROM   SCC_DEPT_ROLE A,
       SCC_CC B,
       HLDC_SC_DEPT_V C
WHERE  B.CC_CD = A.CC_CD
AND    C.CC_CD = A.CC_CD
AND    TO_DATE(B.START_DATE) <= SYSDATE
AND    TO_DATE(B.END_DATE) >= SYSDATE
AND    A.SYS_TYPE = :sysType
AND    A.ROLE = :role
<#if buCd?has_content>
AND    C.BU_CD = :buCd
</#if>
<#if muCd?has_content>
AND    C.MU_CD = :muCd
</#if>
<#if tmCd?has_content>
AND    C.TM_CD = :tmCd
</#if>
ORDER BY A.CC_CD
		]]>
	</statement>

	<!-- CC 목록을 조회한다.(CC별 권한관리) -->
	<statement name="selectDeptAuthCcList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectDeptAuthCcList */
		<![CDATA[
SELECT A.CC_CD,
       A.CC_NM,
       A.BU_CD,
       A.MU_CD,
       (SELECT COUNT(*) FROM SCC_DEPT_ROLE WHERE SYS_TYPE = :sysType AND CC_CD = A.CC_CD) AS AUTH_CNT
FROM   SCC_CC A,
       HLDC_SC_DEPT_V B
WHERE  B.CC_CD = A.CC_CD
AND    TO_DATE(A.START_DATE) <= SYSDATE
AND    TO_DATE(A.END_DATE) >= SYSDATE
<#if buCd?has_content>
AND    B.BU_CD = :buCd
</#if>
<#if muCd?has_content>
AND    B.MU_CD = :muCd
</#if>
<#if tmCd?has_content>
AND    B.TM_CD = :tmCd
</#if>
ORDER BY A.CC_CD
		]]>
	</statement>

	<!-- 미 등록된 권한목록을 조회한다.(CC별 권한관리) -->
	<statement name="selectDeptAuthUnAuthMapList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectDeptAuthUnAuthMapList */
		<![CDATA[
SELECT SYS_TYPE,
       ROLE,
       ROLE_NAME,
       REMARK,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'USE_CD' AND CODE = USE_CD) AS USE_NM
FROM   SCC_ROLE
WHERE  (SYS_TYPE, ROLE) NOT IN (SELECT DISTINCT
                                       SYS_TYPE,
                                       ROLE
                                FROM   SCC_DEPT_ROLE
                                WHERE  SYS_TYPE = :sysType
                                AND    CC_CD = :ccCd)
AND    SYS_TYPE = :sysType
AND    USE_CD = :useCd
AND    ROLE_TYPE = '본부'
AND    USE_YN = 'Y'
		]]>
	</statement>

	<!-- 등록된 권한목록을 조회한다.(CC별 권한관리) -->
	<statement name="selectDeptAuthAuthMapList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectDeptAuthAuthMapList */
		<![CDATA[
SELECT B.SYS_TYPE,
       B.ROLE,
       A.ROLE_NAME,
       B.CC_CD,
       B.REMARK,
       DECODE(B.USE_YN, 'Y', '1', '0') AS USE_YN,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'USE_CD' AND CODE = USE_CD) AS USE_NM,
       B.ATTR01,
       B.ATTR02,
       B.ATTR03,
       B.ATTR04,
       B.ATTR05,
       B.ATTR06,
       B.ATTR07,
       B.ATTR08,
       B.ATTR09,
       B.ATTR10
FROM   SCC_ROLE A,
       SCC_DEPT_ROLE B
WHERE  B.SYS_TYPE = A.SYS_TYPE
AND    B.ROLE = A.ROLE
AND    A.SYS_TYPE = :sysType
AND    A.USE_CD = :useCd
AND    A.ROLE_TYPE = '본부'
AND    A.USE_YN = 'Y'
AND    B.CC_CD = :ccCd
		]]>
	</statement>


	<!-- 부서에 대한 권한을 저장한다. -->
	<statement name="insertDeptRole" type="insert">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.insertDeptRole */
		<![CDATA[
INSERT INTO SCC_DEPT_ROLE
(
 SYS_TYPE,
 ROLE,
 CC_CD,
 REMARK,
 USE_YN,
 ATTR01,
 ATTR02,
 ATTR03,
 ATTR04,
 ATTR05,
 ATTR06,
 ATTR07,
 ATTR08,
 ATTR09,
 ATTR10,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :sysType,
 :role,
 :ccCd,
<#if remark?exists> :remark, <#else> null, </#if>
<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if attr01?exists> :attr01, <#else> null, </#if>
<#if attr02?exists> :attr02, <#else> null, </#if>
<#if attr03?exists> :attr03, <#else> null, </#if>
<#if attr04?exists> :attr04, <#else> null, </#if>
<#if attr05?exists> :attr05, <#else> null, </#if>
<#if attr06?exists> :attr06, <#else> null, </#if>
<#if attr07?exists> :attr07, <#else> null, </#if>
<#if attr08?exists> :attr08, <#else> null, </#if>
<#if attr09?exists> :attr09, <#else> null, </#if>
<#if attr10?exists> :attr10, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 권한 부여(을)를 수정한다. -->
	<statement name="updateDeptRole" type="update">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.updateDeptRole */
		<![CDATA[
UPDATE SCC_DEPT_ROLE SET
<#if remark?exists> REMARK = :remark, </#if>
<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
<#if attr01?exists> ATTR01 = :attr01, </#if>
<#if attr02?exists> ATTR02 = :attr02, </#if>
<#if attr03?exists> ATTR03 = :attr03, </#if>
<#if attr04?exists> ATTR04 = :attr04, </#if>
<#if attr05?exists> ATTR05 = :attr05, </#if>
<#if attr06?exists> ATTR06 = :attr06, </#if>
<#if attr07?exists> ATTR07 = :attr07, </#if>
<#if attr08?exists> ATTR08 = :attr08, </#if>
<#if attr09?exists> ATTR09 = :attr09, </#if>
<#if attr10?exists> ATTR10 = :attr10, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SYS_TYPE = :sysType
AND    ROLE = :role
AND    CC_CD = :ccCd
		]]>
	</statement>

	<!-- 권한 부여(을)를 삭제한다. -->
	<statement name="deleteDeptRole" type="delete">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.deleteDeptRole */
		<![CDATA[
DELETE
FROM   SCC_DEPT_ROLE
WHERE  SYS_TYPE = :sysType
AND    ROLE = :role
AND    CC_CD = :ccCd
		]]>
	</statement>

	<!-- 권한이 부여되지 않는 사용자군 목록을 조회한다. -->
	<statement name="selectAuthCustUnCustMapList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectAuthCustUnCustMapList */
		<![CDATA[
SELECT CODE,
       CODE_NAME,
       SORT_SEQ
FROM   SCC_COMMON_CODE
WHERE  GROUP_CODE = '사용자군'
AND    USE_YN = 'Y'
AND    CODE NOT IN (SELECT USER_GROUP
                    FROM   SCC_USER_GROUP_ROLE
                    WHERE  SYS_TYPE = :sysType
                    AND    ROLE = :role)
ORDER BY SORT_SEQ
		]]>
	</statement>

	<!-- 권한이 부여된 사용자군 목록을 조회한다. -->
	<statement name="selectAuthCustCustMapList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectAuthCustCustMapList */
		<![CDATA[
SELECT A.SYS_TYPE,
       A.ROLE,
       A.USER_GROUP,
       B.CODE_NAME,
       A.REMARK,
       DECODE(A.USE_YN, 'Y', 1, 0) AS USE_YN,
       A.ATTR01,
       A.ATTR02,
       A.ATTR03,
       A.ATTR04,
       A.ATTR05,
       A.ATTR06,
       A.ATTR07,
       A.ATTR08,
       A.ATTR09,
       A.ATTR10,
       B.SORT_SEQ
FROM   SCC_USER_GROUP_ROLE A,
       SCC_COMMON_CODE B
WHERE  B.CODE = A.USER_GROUP
AND    B.GROUP_CODE = '사용자군'
AND    B.USE_YN = 'Y'
AND    A.SYS_TYPE = :sysType
AND    A.ROLE = :role
ORDER BY B.SORT_SEQ
		]]>
	</statement>

	<!-- 사용자군에 대한 권한을 저장한다. -->
	<statement name="insertUserGroupRole" type="insert">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.insertUserGroupRole */
		<![CDATA[
INSERT INTO SCC_USER_GROUP_ROLE
(
 SYS_TYPE,
 ROLE,
 USER_GROUP,
 REMARK,
 USE_YN,
 ATTR01,
 ATTR02,
 ATTR03,
 ATTR04,
 ATTR05,
 ATTR06,
 ATTR07,
 ATTR08,
 ATTR09,
 ATTR10,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :sysType,
 :role,
 :userGroup,
<#if remark?exists> :remark, <#else> null, </#if>
<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if attr01?exists> :attr01, <#else> null, </#if>
<#if attr02?exists> :attr02, <#else> null, </#if>
<#if attr03?exists> :attr03, <#else> null, </#if>
<#if attr04?exists> :attr04, <#else> null, </#if>
<#if attr05?exists> :attr05, <#else> null, </#if>
<#if attr06?exists> :attr06, <#else> null, </#if>
<#if attr07?exists> :attr07, <#else> null, </#if>
<#if attr08?exists> :attr08, <#else> null, </#if>
<#if attr09?exists> :attr09, <#else> null, </#if>
<#if attr10?exists> :attr10, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 권한 부여(을)를 수정한다. -->
	<statement name="updateUserGroupRole" type="update">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.updateUserGroupRole */
		<![CDATA[
UPDATE SCC_USER_GROUP_ROLE SET
<#if remark?exists> REMARK = :remark, </#if>
<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
<#if attr01?exists> ATTR01 = :attr01, </#if>
<#if attr02?exists> ATTR02 = :attr02, </#if>
<#if attr03?exists> ATTR03 = :attr03, </#if>
<#if attr04?exists> ATTR04 = :attr04, </#if>
<#if attr05?exists> ATTR05 = :attr05, </#if>
<#if attr06?exists> ATTR06 = :attr06, </#if>
<#if attr07?exists> ATTR07 = :attr07, </#if>
<#if attr08?exists> ATTR08 = :attr08, </#if>
<#if attr09?exists> ATTR09 = :attr09, </#if>
<#if attr10?exists> ATTR10 = :attr10, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SYS_TYPE = :sysType
AND    ROLE = :role
AND    USER_GROUP = :userGroup
		]]>
	</statement>

	<!-- 권한 부여(을)를 삭제한다. -->
	<statement name="deleteUserGroupRole" type="delete">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.deleteUserGroupRole */
		<![CDATA[
DELETE
FROM   SCC_USER_GROUP_ROLE
WHERE  SYS_TYPE = :sysType
AND    ROLE = :role
AND    USER_GROUP = :userGroup
		]]>
	</statement>

	<!-- 사용자군 목록을 조회한다.(사용자군별 권한관리) -->
	<statement name="selectCustAuthUserGroupList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectCustAuthUserGroupList */
		<![CDATA[
SELECT CODE,
       CODE_NAME,
       SORT_SEQ
FROM   SCC_COMMON_CODE
WHERE  GROUP_CODE = '사용자군'
AND    USE_YN = 'Y'
ORDER BY SORT_SEQ
		]]>
	</statement>

	<!-- 미등록된 권한 목록을 조회한다.(사용자군별 권한관리) -->
	<statement name="selectCustAuthUnAuthMapList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectCustAuthUnAuthMapList */
		<![CDATA[
SELECT SYS_TYPE,
       ROLE,
       ROLE_NAME,
       REMARK,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'USE_CD' AND CODE = USE_CD) AS USE_NM
FROM   SCC_ROLE
WHERE  (SYS_TYPE, ROLE) NOT IN (SELECT DISTINCT
                                       SYS_TYPE,
                                       ROLE
                                FROM   SCC_USER_GROUP_ROLE
                                WHERE  SYS_TYPE = :sysType
                                AND    USER_GROUP = :userGroup)
AND    SYS_TYPE = :sysType
AND    USE_CD = :useCd
AND    ROLE_TYPE = '본부'
AND    USE_YN = 'Y'
		]]>
	</statement>


	<!-- 등록된 권한 목록을 조회한다.(사용자군별 권한관리) -->
	<statement name="selectCustAuthAuthMapList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthMappingMgmtDAO.selectCustAuthAuthMapList */
		<![CDATA[
SELECT B.SYS_TYPE,
       B.ROLE,
       A.ROLE_NAME,
       B.USER_GROUP,
       B.REMARK,
       DECODE(B.USE_YN, 'Y', 1, 0) AS USE_YN,
       B.ATTR01,
       B.ATTR02,
       B.ATTR03,
       B.ATTR04,
       B.ATTR05,
       B.ATTR06,
       B.ATTR07,
       B.ATTR08,
       B.ATTR09,
       B.ATTR10,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'USE_CD' AND CODE = A.USE_CD) AS USE_NM
FROM   SCC_ROLE A,
       SCC_USER_GROUP_ROLE B
WHERE  B.SYS_TYPE = A.SYS_TYPE
AND    B.ROLE = A.ROLE
AND    A.SYS_TYPE = :sysType
AND    A.USE_CD = :useCd
AND    A.ROLE_TYPE = '본부'
AND    A.USE_YN = 'Y'
AND    B.USER_GROUP = :userGroup
		]]>
	</statement>



</hqml>
