<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="sc.scz.upjangMgmtNewDAO">
	<desc>업장 마스터 정보 HQML Query</desc>

	<!-- 업장 마스터 정보 목록을 조회한다. -->
	<statement name="selectList" type="select"><![CDATA[
SELECT TO_CHAR(A.UPJANG) AS UPJANG,
       A.CUSTCD,
       A.CUST_CUSTNM,
       A.CUST_CUST_TYPE,
       A.CUST_CUST_GUBUN,
       A.CUST_SAUPNO,
       A.UPJANGNM,
       A.SAUPNO,
       SUBSTR(A.SAUPNO, 1, 10) AS BSN_NO,
       SUBSTR(A.SAUPNO, 11) AS SUB_BSN_NO,
       A.VAT_GUBUN,
       A.VAT_UPJANG,
       A.VAT_UPJANGNM,
       A.CORP_REG_NUM,
       A.UP_JONG,
       A.UP_TAE,
       A.DRNAME,
       A.SHOP_TYP_CD,
       A.SHOP_TYP_NM,
       A.ADDR_KEY,
       A.ADDR,
       A.TEL_NO,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 1) AS TEL_NO1,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 2) AS TEL_NO2,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 3) AS TEL_NO3,
       A.FAX_NO,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 1) AS FAX_NO1,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 2) AS FAX_NO2,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 3) AS FAX_NO3,
       A.TM_NM,
       A.CC_CD,
       A.CC_NM,
       A.ACC_OPENDATE,
       A.ACC_CLOSEDATE,
       A.SCHOOL_YN,
       A.SCHOOL_YN_CUSTCD,
       A.SCHOOL_CUSTNM,
       A.UUSER,
       A.UDATE,
       A.AP_UNITPRICE_UPJANG,
       A.AP_UNITPRICE_UPJANG_NM,
       A.BANK_ACCT_NO_REQUEST_YN,
       NVL(A.BANK_ACCT_NO_REQUEST_YN, 'N') AS OLD_BANK_ACCT_NO_REQUEST_YN,
       A.SAP_CUST_CD,
       A.APPROVAL_STATUS_CD,
       A.APPROVAL_STATUS_NM,
       A.APPROVAL_NM,
       A.APPROVAL_REMARK,
       A.CLASS_CD,
       A.CUSER,
       A.CDATE,
       A.VIRTURE_ACCT_NO,
       A.SIGN_STATUS_NM,
       A.BA_PROC_RESULT,
       A.ATTR01,
       A.ATTR02,
       A.EXP_CD,
       A.USE_YN,
       --매출처정보관리 사용유무(식재만 사용) 20190426 김호석 추가
       A.USE_YN2
FROM   (SELECT DECODE(EXP_CD,'Y','제조','판관') EXP_CD, A.UPJANG,
               NVL(A.CUSTCD, 0) AS CUSTCD,
               B.CUSTNM AS CUST_CUSTNM,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'Z01' AND CODE = B.CUSTTYPE) AS CUST_CUST_TYPE,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'Z02' AND CODE = B.CUSTGUBUN) AS CUST_CUST_GUBUN,
               B.SAUPNO AS CUST_SAUPNO,
               A.UPJANGNM,
               CASE WHEN A.SAUPNO IS NULL THEN NULL ELSE CASE WHEN LENGTH(TRIM(A.SAUPNO)) > 10 THEN A.SAUPNO WHEN LENGTH(TRIM(A.SAUPNO)) <= 10 THEN A.SAUPNO ELSE TRIM(A.SAUPNO) || '0000' END END AS SAUPNO,
               A.CORP_REG_NUM,
               A.UP_JONG,
               A.UP_TAE,
               A.DRNAME,
               A.SHOP_TYP_CD,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'SHOP_TYP_CD' AND CODE = A.SHOP_TYP_CD) AS SHOP_TYP_NM,
               A.VAT_GUBUN,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'VAT_GUBUN' AND CODE = A.VAT_GUBUN) AS VAT_GUBUN_NM,
               A.VAT_UPJANG,
               (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.VAT_UPJANG) AS VAT_UPJANGNM,
               A.ADDR_KEY,
               SCC_ADDR_FUN(A.ADDR_KEY, :loginPersMask, :maskAuth) AS ADDR,
               SCC_CRYPTO.DEC_FUN(A.TEL_NO_ENC) AS TEL_NO,
               SCC_CRYPTO.DEC_FUN(A.FAX_NO_ENC) AS FAX_NO,
               D.TM_NM,
               A.CC_CD,
               CASE WHEN A.CC_CD = 'NO-MAT' THEN '조직 확인필요' ELSE D.CC_NM END AS CC_NM,
               A.ACC_OPENDATE,
               A.ACC_CLOSEDATE,
               A.SCHOOL_YN,
               A.SCHOOL_YN_CUSTCD,
               C.CUSTNM AS SCHOOL_CUSTNM,
               (SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = A.UPDATE_BY) AS UUSER,
               TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UDATE,
               TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CDATE,
               A.AP_UNITPRICE_UPJANG,
               (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.AP_UNITPRICE_UPJANG) AS AP_UNITPRICE_UPJANG_NM,
               CASE WHEN A.BANK_ACCT_NO_REQUEST_YN = 'Y' THEN 'Y' ELSE CASE WHEN (SELECT COUNT(*) FROM SLA_SAP_BANK_ACCT_NO WHERE BANK_ACCT_TYPE = 'V' AND UPJANG_CD = A.UPJANG) > 0 THEN 'Y' ELSE NULL END END BANK_ACCT_NO_REQUEST_YN,
               B.SAP_CUST_CD,
               A.APPROVAL_STATUS_CD,
               (SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = A.APPROVAL_SABUN) AS APPROVAL_NM,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'APPROVAL_STATUS_CD' AND CODE = A.APPROVAL_STATUS_CD) AS APPROVAL_STATUS_NM,
               A.APPROVAL_REMARK,
               (SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = A.CREATE_BY) AS CUSER,
               A.CLASS_CD,
               CASE WHEN (SELECT COUNT(*) FROM SLA_SAP_BANK_ACCT_NO WHERE BANK_ACCT_TYPE = 'V' AND UPJANG_CD = A.UPJANG) > 1 THEN 'N-건의가상계좌존재(확인요망)' ELSE (SELECT SCC_CRYPTO.DEC_FUN(BANK_ACCT_NO) FROM SLA_SAP_BANK_ACCT_NO WHERE BANK_ACCT_TYPE = 'V' AND UPJANG_CD = A.UPJANG) END AS VIRTURE_ACCT_NO,
               CASE NVL(A.SIGN_INSTANCE_ID, -1)
                 WHEN -1 THEN CASE NVL(A.BANK_ACCT_PROC_RESULT, '9')
                                WHEN '9' THEN '결재완료' 
                                WHEN '8' THEN '사용자취소'
                                ELSE '상신대기'
                              END 
                 ELSE CASE WHEN E.SIGN_PROGRESS_STATUS IS NULL THEN '상신중' 
                           ELSE (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'SIGN_PROGRESS_STATUS' AND CODE = E.SIGN_PROGRESS_STATUS)
                      END 
               END AS SIGN_STATUS_NM,
               CASE A.BANK_ACCT_PROC_RESULT
                 WHEN '1' THEN '신청대기'
                 WHEN '2' THEN '신청중'
                 WHEN '9' THEN '신청완료'
                 ELSE CASE WHEN (SELECT COUNT(*) FROM SLA_SAP_BANK_ACCT_NO WHERE BANK_ACCT_TYPE = 'V' AND UPJANG_CD = A.UPJANG) > 0 THEN '신청완료' ELSE '미신청' END
               END AS BA_PROC_RESULT,
               DECODE(A.ATTR01, 'N', 'N', 'Y') AS ATTR01,
               A.ATTR02,
               A.USE_YN,
               G.USE_YN AS USE_YN2
        FROM   ST_UPJANG A,
               ST_CUST B,
               ST_CUST C,
               HLDC_SC_DEPT_V D,
               SCC_SIGN_INFO E
<#if bankAcctNo?has_content>
            ,  SLA_SAP_BANK_ACCT_NO F
</#if>
			, FMS_UPJANG G
        WHERE  B.CUSTCD(+) = A.CUSTCD
        AND    A.UPJANG = G.UPJANG(+)
        AND    C.CUSTCD(+) = A.SCHOOL_YN_CUSTCD
        AND    D.CC_CD(+) = A.CC_CD
        AND    E.SIGN_INSTANCE_ID(+) = A.SIGN_INSTANCE_ID
<#if bankAcctNo?has_content>
        AND    F.UPJANG_CD = A.UPJANG
        AND    F.BANK_ACCT_TYPE = 'V'
        AND    F.BANK_ACCT_NO LIKE '%' || SCC_CRYPTO.ENC_FUN(:bankAcctNo) || '%'
</#if>
<#if upjang?has_content>
        AND    A.UPJANG = :upjang
</#if>
<#if upjangnm?has_content>
        AND    A.UPJANGNM LIKE '%' || :upjangnm || '%'
</#if>
<#if shopTypCd?has_content>
        AND    A.SHOP_TYP_CD = :shopTypCd
</#if>
<#if muCd?has_content>
		--식재사업부 인경우 리조트/외식 업장도 조회되도록 조건 수정 20200121 김호석(매출귀속부서 설정 전까지는 CC정보가 없음)
		<#if muCd == '2004'>
			AND   (D.MU_CD = :muCd OR D.MU_CD IS NULL)
		<#else>
        	AND    D.MU_CD = :muCd
        </#if>
</#if>
<#if tmCd?has_content>
        AND    (D.TM_CD = :tmCd OR D.PT_CD = :tmCd)
</#if>
<#if ccCd?has_content>
        AND    A.CC_CD = :ccCd
</#if>
<#if saupno?has_content>
        AND    A.SAUPNO LIKE :saupno||'%'
</#if>
<#if drname?has_content>
        AND    A.DRNAME LIKE '%' || :drname || '%'
</#if>
<#if approvalStatus?has_content>
        AND    A.APPROVAL_STATUS_CD = :approvalStatus
</#if>
<#if startCdate?has_content>
        AND    TO_CHAR(A.CREATE_DATE, 'YYYYMMDD') >= :startCdate
</#if>
<#if endCdate?has_content>
        AND    TO_CHAR(A.CREATE_DATE, 'YYYYMMDD') <= :endCdate
</#if>
<#if cuser?has_content>
        AND    A.CREATE_BY = :cuser
</#if>
        ) A
ORDER BY A.UPJANG
		]]></statement>

	<!-- 업장 마스터 정보(을)를 등록한다. -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.insert */
		<![CDATA[
INSERT INTO ST_UPJANG
(
 UPJANG,
 CUSTCD,
 UPJANGNM,
 SAUPNO,
 CORP_REG_NUM,
 UP_JONG,
 UP_TAE,
 DRNAME,
 SHOP_TYP_CD,
 VAT_GUBUN,
 VAT_UPJANG,
 ADDR_KEY,
 TEL_NO_ENC,
 FAX_NO_ENC,
 DEPT_ID,
 CC_CD,
 ACC_OPENDATE,
 ACC_CLOSEDATE,
 AP_UNITPRICE_UPJANG,
 SCHOOL_YN,
 SCHOOL_YN_CUSTCD,
 BANK_ACCT_NO_REQUEST_YN,
 APPROVAL_REQ_DATE,
 APPROVAL_REQ_SABUN,
 APPROVAL_STATUS_CD,
 CLASS_CD,
<#if bankAcctProcResult?has_content> BANK_ACCT_PROC_RESULT, </#if>
 USE_YN,
 CREATE_BY,
 CREATE_DATE,
 UPDATE_BY,
 ATTR01,
 UPDATE_DATE
) VALUES (
 :upjang,
<#if custcd?exists> :custcd, <#else> null, </#if>
<#if upjangnm?exists> :upjangnm, <#else> null, </#if>
<#if saupno?exists> :saupno, <#else> null, </#if>
<#if corpRegNum?exists> :corpRegNum, <#else> null, </#if>
<#if upJong?exists> :upJong, <#else> null, </#if>
<#if upTae?exists> :upTae, <#else> null, </#if>
<#if drname?exists> :drname, <#else> null, </#if>
<#if shopTypCd?exists> :shopTypCd, <#else> null, </#if>
<#if vatGubun?exists> :vatGubun, <#else> null, </#if>
<#if vatUpjang?exists> :vatUpjang, <#else> null, </#if>
<#if addrKey?exists> :addrKey, <#else> null, </#if>
<#if telNo1?exists || telNo2?exists || telNo3?exists> SCC_CRYPTO.ENC_FUN(:telNo1||:telNo2||:telNo3), <#else> null, </#if>
<#if faxNo1?exists || faxNo2?exists || faxNo3?exists> SCC_CRYPTO.ENC_FUN(:faxNo1||:faxNo2||:faxNo3), <#else> null, </#if>
<#if ccCd?exists> :ccCd, <#else> null, </#if>
<#if ccCd?exists> :ccCd, <#else> null, </#if>
<#if accOpendate?exists> :accOpendate, <#else> null, </#if>
<#if accClosedate?exists> :accClosedate, <#else> null, </#if>
<#if apUnitpriceUpjang?exists> :apUnitpriceUpjang, <#else> null, </#if>
<#if schoolYn?exists> :schoolYn, <#else> null, </#if>
<#if schoolYnCustcd?exists> :schoolYnCustcd, <#else> null, </#if>
<#if bankAcctNoRequestYn?exists> :bankAcctNoRequestYn, <#else> null, </#if>
 TO_CHAR(SYSDATE, 'YYYYMMDD'),
 :loginSabun,
 'REQ',
<#if classCd?exists> :classCd, <#else> null, </#if>
<#if bankAcctProcResult?has_content> :bankAcctProcResult, </#if>
 :useYn,
 :loginSabun,
 SYSDATE,
 :loginSabun,
 <#if attr01?exists> :attr01, <#else> null, </#if>
 SYSDATE
)
		]]></statement>

	<!-- 업장 마스터 정보(을)를 수정한다. -->
	<statement name="update" type="update">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.update */
		<![CDATA[
UPDATE ST_UPJANG SET
<#if custcd?exists> CUSTCD = :custcd, </#if>
<#if upjangnm?exists> UPJANGNM = :upjangnm, </#if>
<#if saupno?exists> SAUPNO = :saupno, </#if>
<#if corpRegNum?exists> CORP_REG_NUM = :corpRegNum, </#if>
<#if upJong?exists> UP_JONG = :upJong, </#if>
<#if upTae?exists> UP_TAE = :upTae, </#if>
<#if drname?exists> DRNAME = :drname, </#if>
<#if shopTypCd?exists> SHOP_TYP_CD = :shopTypCd, </#if>
<#if vatGubun?exists> VAT_GUBUN = :vatGubun, </#if>
<#if vatUpjang?exists> VAT_UPJANG = :vatUpjang, </#if>
<#if addrKey?exists> ADDR_KEY= :addrKey, </#if>
<#if telNo1?exists || telNo2?exists || telNo3?exists> TEL_NO_ENC = SCC_CRYPTO.ENC_FUN(:telNo1||:telNo2||:telNo3), </#if>
<#if faxNo1?exists || faxNo2?exists || faxNo3?exists> FAX_NO_ENC = SCC_CRYPTO.ENC_FUN(:faxNo1||:faxNo2||:faxNo3), </#if>
<#if ccCd?exists> DEPT_ID = :ccCd, </#if>
<#if ccCd?exists> CC_CD = :ccCd, </#if>
<#if accOpendate?exists> ACC_OPENDATE = :accOpendate, </#if>
<#if accClosedate?exists> ACC_CLOSEDATE = :accClosedate, </#if>
<#if apUnitpriceUpjang?exists> AP_UNITPRICE_UPJANG = :apUnitpriceUpjang, </#if>
<#if schoolYn?exists> SCHOOL_YN = :schoolYn, </#if>
<#if schoolYnCustcd?exists> SCHOOL_YN_CUSTCD = :schoolYnCustcd, </#if>
<#if bankAcctNoRequestYn?exists> BANK_ACCT_NO_REQUEST_YN = :bankAcctNoRequestYn, </#if>
<#if approvalReqDate?has_content> APPROVAL_REQ_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD'), </#if>
<#if approvalReqSabun?has_content> APPROVAL_REQ_SABUN = :loginSabun, </#if>
<#if approvalStatusCd?has_content> APPROVAL_STATUS_CD = 'REQ', </#if>
<#if classCd?has_content> CLASS_CD = :classCd, <#else> CLASS_CD = NULL, </#if>
<#if bankAcctProcResult?has_content> BANK_ACCT_PROC_RESULT = :bankAcctProcResult, </#if>
<#if attr01?exists> ATTR01 = :attr01, <#else> null, </#if>
 USE_YN = :useYn,
 UPDATE_BY = :loginSabun,
 UPDATE_DATE = SYSDATE
WHERE  UPJANG = :upjang
		]]></statement>

	<!-- 업장 마스터 정보(을)를 삭제한다. -->
	<statement name="selectExistsVirtureBankAcctNo" type="select">
		/*+
		com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.selectExistsVirtureBankAcctNo
		*/
		<![CDATA[
SELECT COUNT(*) AS CNT
FROM   SLA_SAP_BANK_ACCT_NO
WHERE  BANK_ACCT_TYPE = 'V'
AND    UPJANG_CD = :upjang
		]]>
	</statement>

	<!-- SCO_UPJANG_MST를 생성한다.(주소처리) -->
	<statement name="insertScoUpjangMst" type="insert">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.insertScoUpjangMst */
		<![CDATA[
INSERT INTO SCO_UPJANG_MST (
  UPJANG,
  OPEN_DATE,
  CUSER, 
  CDATE,
  UUSER,
  UDATE
  ) VALUES (
  :upjang,
<#if accOpendate?exists> :accOpendate, <#else> null, </#if>
  :loginSabun,
  SYSDATE,
  :loginSabun,
  SYSDATE
  )
		]]>
	</statement>

	<!-- SCO_UPJANG_MST를 수정한다. -->
	<statement name="updateScoUpjangMst" type="update">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.updateScoUpjangMst */
		<![CDATA[
UPDATE SCO_UPJANG_MST
SET    UUSER = :loginSabun,
<#if accOpendate?exists> OPEN_DATE = :accOpendate, </#if>
       UDATE = SYSDATE
WHERE  UPJANG = :upjang
		]]>
	</statement>


	<!-- FMS_UPJANG를 생성한다. -->
	<statement name="insertFmsUpjang" type="insert">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.insertFmsUpjang */
		<![CDATA[
INSERT INTO FMS_UPJANG (
  UPJANG,
  MAIN_UPJANG,
  OTCUST_PRICE_UPJANG,
  UPJANGNM_DISP,
  UPJANGNM_DISP2,
  DEPT_ID,
  ADDR_KEY,
  FST_REG_DATE,
  CUSER,
  CDATE,
  UUSER,
  UDATE
  ) VALUES (
  :upjang,
  :upjang,
  :upjang,
  :upjangnm,
  :upjangnm,
  :ccCd,
<#if newAddrKey?exists>  :newAddrKey, <#else>  null, </#if>
  TO_CHAR(SYSDATE, 'YYYYMMDD'),
  :loginSabun,
  SYSDATE,
  :loginSabun,
  SYSDATE
  )
		]]>
	</statement>


	<!-- FMS_UPJANG를 생성한다. -->
	<statement name="insertSccAddrInfo" type="insert">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.insertSccAddrInfo */
		<![CDATA[
INSERT INTO SCC_ADDR_INFO (
    ADDR_KEY
  , ADDR_CLASS
  , CONFIRM_YN
  , ZIP_CODE1
  , BASE_ADDR1
  , DETAIL_ADDR_ENC1
  , ZIP_CODE2
  , BASE_ADDR2
  , DETAIL_ADDR_ENC2
  , ETC_ADDR
  , ATRB01
  , ATRB02
  , ATRB03
  , ATRB04
  , ATRB05
  , ATRB06
  , ATRB07
  , ATRB08
  , ATRB09
  , ATRB10
  , CUSER
  , CDATE
  , UUSER
  , UDATE
  , LON1
  , LAT1
  , LON2
  , LAT2
  , BUILDING_MGMT_NUM
  ) (
SELECT :newAddrKey
     , ADDR_CLASS
     , CONFIRM_YN
     , ZIP_CODE1
     , BASE_ADDR1
     , DETAIL_ADDR_ENC1
     , ZIP_CODE2
     , BASE_ADDR2
     , DETAIL_ADDR_ENC2
     , ETC_ADDR
     , ATRB01
     , ATRB02
     , ATRB03
     , ATRB04
     , ATRB05
     , ATRB06
     , ATRB07
     , ATRB08
     , ATRB09
     , ATRB10
     , :loginSabun
     , SYSDATE
     , :loginSabun
     , SYSDATE
     , LON1
     , LAT1
     , LON2
     , LAT2
     , BUILDING_MGMT_NUM
  FROM SCC_ADDR_INFO
 WHERE ADDR_KEY = :addrKey
  )
		]]>
	</statement>

	<!-- 업장 마스터 정보 목록을 조회한다. -->
	<statement name="selectSaveUpjangList" type="select">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.selectSaveUpjangList */
		<![CDATA[
SELECT TO_CHAR(A.UPJANG) AS UPJANG,
       A.CUSTCD,
       A.CUST_CUSTNM,
       A.CUST_CUST_TYPE,
       A.CUST_CUST_GUBUN,
       A.CUST_SAUPNO,
       A.UPJANGNM,
       A.SAUPNO,
       SUBSTR(A.SAUPNO, 1, 10) AS BSN_NO,
       SUBSTR(A.SAUPNO, 11) AS SUB_BSN_NO,
       A.VAT_GUBUN,
       A.VAT_UPJANG,
       A.VAT_UPJANGNM,
       A.CORP_REG_NUM,
       A.UP_JONG,
       A.UP_TAE,
       A.DRNAME,
       A.SHOP_TYP_CD,
       A.SHOP_TYP_NM,
       A.ADDR_KEY,
       A.ADDR,
       A.TEL_NO,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 1) AS TEL_NO1,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 2) AS TEL_NO2,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 3) AS TEL_NO3,
       A.FAX_NO,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 1) AS FAX_NO1,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 2) AS FAX_NO2,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 3) AS FAX_NO3,
       A.TM_NM,
       A.CC_CD,
       A.CC_NM,
       A.ACC_OPENDATE,
       A.ACC_CLOSEDATE,
       A.SCHOOL_YN,
       A.SCHOOL_YN_CUSTCD,
       A.SCHOOL_CUSTNM,
       A.UUSER,
       A.UDATE,
       A.AP_UNITPRICE_UPJANG,
       A.AP_UNITPRICE_UPJANG_NM,
       A.BANK_ACCT_NO_REQUEST_YN,
       NVL(A.BANK_ACCT_NO_REQUEST_YN, 'N') AS OLD_BANK_ACCT_NO_REQUEST_YN,
       A.SAP_CUST_CD,
       A.APPROVAL_STATUS_CD,
       A.APPROVAL_STATUS_NM,
       A.APPROVAL_NM,
       A.APPROVAL_REMARK,
       A.CLASS_CD,
       A.CUSER,
       A.CDATE,
       A.VIRTURE_ACCT_NO,
       A.SIGN_STATUS_NM,
       A.BA_PROC_RESULT,
       A.ATTR01,
       A.USE_YN
FROM   (SELECT A.UPJANG,
               NVL(A.CUSTCD, 0) AS CUSTCD,
               B.CUSTNM AS CUST_CUSTNM,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'Z01' AND CODE = B.CUSTTYPE) AS CUST_CUST_TYPE,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'Z02' AND CODE = B.CUSTGUBUN) AS CUST_CUST_GUBUN,
               B.SAUPNO AS CUST_SAUPNO,
               A.UPJANGNM,
               CASE WHEN A.SAUPNO IS NULL THEN NULL ELSE CASE WHEN LENGTH(TRIM(A.SAUPNO)) > 10 THEN A.SAUPNO WHEN LENGTH(TRIM(A.SAUPNO)) <= 10 THEN A.SAUPNO ELSE TRIM(A.SAUPNO) || '0000' END END AS SAUPNO,
               A.CORP_REG_NUM,
               A.UP_JONG,
               A.UP_TAE,
               A.DRNAME,
               A.SHOP_TYP_CD,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'SHOP_TYP_CD' AND CODE = A.SHOP_TYP_CD) AS SHOP_TYP_NM,
               A.VAT_GUBUN,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'VAT_GUBUN' AND CODE = A.VAT_GUBUN) AS VAT_GUBUN_NM,
               A.VAT_UPJANG,
               (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.VAT_UPJANG) AS VAT_UPJANGNM,
               A.ADDR_KEY,
               SCC_ADDR_FUN(A.ADDR_KEY, :loginPersMask, :maskAuth) AS ADDR,
               SCC_CRYPTO.DEC_FUN(A.TEL_NO_ENC) AS TEL_NO,
               SCC_CRYPTO.DEC_FUN(A.FAX_NO_ENC) AS FAX_NO,
               D.TM_NM,
               A.CC_CD,
               CASE WHEN A.CC_CD = 'NO-MAT' THEN '조직 확인필요' ELSE D.CC_NM END AS CC_NM,
               A.ACC_OPENDATE,
               A.ACC_CLOSEDATE,
               A.SCHOOL_YN,
               A.SCHOOL_YN_CUSTCD,
               C.CUSTNM AS SCHOOL_CUSTNM,
               (SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = A.UPDATE_BY) AS UUSER,
               TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UDATE,
               TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CDATE,
               A.AP_UNITPRICE_UPJANG,
               (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.AP_UNITPRICE_UPJANG) AS AP_UNITPRICE_UPJANG_NM,
               CASE WHEN A.BANK_ACCT_NO_REQUEST_YN = 'Y' THEN 'Y' ELSE CASE WHEN (SELECT COUNT(*) FROM SLA_SAP_BANK_ACCT_NO WHERE BANK_ACCT_TYPE = 'V' AND UPJANG_CD = A.UPJANG) > 0 THEN 'Y' ELSE NULL END END BANK_ACCT_NO_REQUEST_YN,
               B.SAP_CUST_CD,
               A.APPROVAL_STATUS_CD,
               (SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = A.APPROVAL_SABUN) AS APPROVAL_NM,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'APPROVAL_STATUS_CD' AND CODE = A.APPROVAL_STATUS_CD) AS APPROVAL_STATUS_NM,
               A.APPROVAL_REMARK,
               (SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = A.CREATE_BY) AS CUSER,
               A.CLASS_CD,
               CASE WHEN (SELECT COUNT(*) FROM SLA_SAP_BANK_ACCT_NO WHERE BANK_ACCT_TYPE = 'V' AND UPJANG_CD = A.UPJANG) > 1 THEN 'N-건의가상계좌존재(확인요망)' ELSE (SELECT SCC_CRYPTO.DEC_FUN(BANK_ACCT_NO) FROM SLA_SAP_BANK_ACCT_NO WHERE BANK_ACCT_TYPE = 'V' AND UPJANG_CD = A.UPJANG) END AS VIRTURE_ACCT_NO,
               CASE WHEN A.SIGN_INSTANCE_ID IS NULL THEN CASE WHEN A.BANK_ACCT_PROC_RESULT = '9' OR A.BANK_ACCT_PROC_RESULT IS NULL THEN '결재완료' ELSE '상신대기' END ELSE CASE WHEN E.SIGN_PROGRESS_STATUS IS NULL THEN '상신중' ELSE (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'SIGN_PROGRESS_STATUS' AND CODE = E.SIGN_PROGRESS_STATUS) END END AS SIGN_STATUS_NM,
               CASE A.BANK_ACCT_PROC_RESULT
                 WHEN '1' THEN '신청대기'
                 WHEN '2' THEN '신청중'
                 WHEN '9' THEN '신청완료'
                 ELSE '미신청'
               END AS BA_PROC_RESULT,
               A.ATTR01,
               A.USE_YN
        FROM   ST_UPJANG A,
               ST_CUST B,
               ST_CUST C,
               HLDC_SC_DEPT_V D,
               SCC_SIGN_INFO E
        WHERE  B.CUSTCD(+) = A.CUSTCD
        AND    C.CUSTCD(+) = A.SCHOOL_YN_CUSTCD
        AND    D.CC_CD(+) = A.CC_CD
        AND    E.SIGN_INSTANCE_ID(+) = A.SIGN_INSTANCE_ID
        AND    A.UPJANG IN (:upjangList)) A
ORDER BY A.UPJANG
		]]></statement>

	<!-- 업장의 변경이력을 기록한다. -->
	<statement name="insertUpjangChngLog" type="insert">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.insertUpjangChngLog */
		<![CDATA[
INSERT INTO SCC_UPJANG_CHNG_LOG (
    LOG_KEY
  , ACT_SABUN
  , UPJANG
  , LOG_DDTT
  , COL_ID
  , COL_NM
  , BEFORE_VALUE
  , AFTER_VALUE
) VALUES (
    :logKey
  , :loginSabun
  , :upjang
  , SYSDATE
  , :colId
  , :colNm
  , :beforeValue
  , :afterValue
)
		]]>
	</statement>

	<!-- 제목 정보 -->
	<statement name="selectTitle" type="select">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.selectTitle */
		<![CDATA[
SELECT '매출거래처 가상계좌신청(' || A.UPJANGNM || CASE WHEN A.CNT-1 > 0 THEN '외 ' || TO_CHAR(A.CNT) || '건)' ELSE ')' END AS TITLE
  FROM (SELECT A.UPJANGNM
             , (SELECT COUNT(*) FROM ST_UPJANG WHERE UPJANG IN (:upjangs)) AS CNT
          FROM ST_UPJANG A
         WHERE UPJANG IN (:upjangs)
           AND ROWNUM = 1
         ORDER BY A.UPJANG) A
		]]>
	</statement>

	<!-- 기안자 정보 -->
	<statement name="selectSendUser" type="select">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.selectSendUser */
		<![CDATA[
SELECT A.NM_KOR || '(' || C.CC_NM || ')' AS APPROVAL_USER
  FROM SCC_USERINFO A
     , ST_UPJANG B
     , HLDC_SC_DEPT_V C
 WHERE B.UPJANG = A.UPJANG
   AND C.CC_CD = B.CC_CD
   AND A.SABUN = :sabun
		]]>
	</statement>


	<!-- 신청 정보 -->
	<statement name="selectRequestBankAcctNo" type="select">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.selectRequestBankAcctNo
		*/
		<![CDATA[
SELECT B.CUSTNM
     , B.DRNAME1
     , SUBSTR(B.SAUPNO, 1, 3) || '-' || SUBSTR(B.SAUPNO, 4, 2) || '-' || SUBSTR(B.SAUPNO, 6) || '(' || B.SUB_UPJANG_NUM || ')' AS BSN_NO
     , B.UP_TAE
     , B.UP_JONG
     , SCC_GET_ADDR_FUN('BASE', A.ADDR_KEY, '', '') || ' ' || SCC_GET_ADDR_FUN('DETAIL', A.ADDR_KEY, '111111111111', '0') AS ADDR
     , C.CC_NM
     , A.UPJANGNM || '(업장코드:' || TO_CHAR(A.UPJANG) || ')' AS UPJANGNM 
     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'Z02' AND CODE = B.CUSTGUBUN) AS CUST_CLASS
  FROM ST_UPJANG A
     , ST_CUST B
     , HLDC_SC_DEPT_V C
 WHERE B.CUSTCD = A.CUSTCD
   AND C.CC_CD = A.CC_CD
   AND A.UPJANG IN (:upjangs)
		]]>
	</statement>

	<!-- 결재아이디를 저장한다. -->
	<statement name="updateGwId" type="update">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.updateGwId */
		<![CDATA[
UPDATE ST_UPJANG
   SET SIGN_INSTANCE_ID = :signInstanceId
 WHERE UPJANG IN (:upjangs)
		]]>
	</statement>

	<!-- 가상계좌 신청대상자 리스트 -->
	<statement name="selectSapRequestList" type="select"><![CDATA[
SELECT A.UPJANG AS UPJANG_CD
     , A.UPJANGNM AS UPJANG_NM
     , B.SAP_CUST_CD AS CUST_CD
     , A.CC_CD
     , 'R' AS PISTAT
     , D.DRAFT_USER AS LOGIN_SABUN
     , D.DRAFT_USER AS LOGIN_USERID
     , 'YYYYYYYYYYY' AS LOGIN_PERS_MASK
  FROM ST_UPJANG A
     , ST_CUST B
     , SCC_SIGN_INFO D
 WHERE B.CUSTCD = A.CUSTCD
   AND D.SIGN_INSTANCE_ID = A.SIGN_INSTANCE_ID
   AND D.SIGN_PROGRESS_STATUS IN ( 'DRAFT', 'COMPLETE','APPROVE')
   AND A.BANK_ACCT_PROC_RESULT = '1'
   AND B.CUSTCD IS NOT NULL
   AND B.SAP_CUST_CD IS NOT NULL
		]]></statement>

	<!-- 결재아이디를 저장한다. -->
	<statement name="updateSapRequest" type="update">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtNewDAO.updateSapRequest */
		<![CDATA[
UPDATE ST_UPJANG
   SET BANK_ACCT_PROC_RESULT = '2'
     , SEND_MAIL_STATUS = '1'
 WHERE UPJANG = :upjangCd
		]]>
	</statement>

	<!-- 해당 로그인 사용자가 담당자_CS 권한에 포함되는지를 파악한다. -->
	<statement name="selectIncludeCS" type="select">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtDAO.selectIncludeCS */
		<![CDATA[
SELECT COUNT(DISTINCT A.ROLE) AS CNT
  FROM SCC_USER_ROLE_V A
 WHERE A.SYS_TYPE = 'IFIS'
   AND A.ROLE = '담당자_CS'
   AND A.SABUN = :loginSabun 
		]]>
	</statement>

	<!-- 가상계좌 결과에 대한 메일발송. -->
	<statement name="selectMailContent" type="select">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtDAO.selectMailContent */
		<![CDATA[
SELECT A.UPJANGNM AS UPJANG_NM
     , B.CUSTNM
     , (SELECT CC_CD FROM ST_UPJANG WHERE UPJANG = E.UPJANG) AS CC_CD
     , A.UPJANG
     , NVL(SCC_CRYPTO.DEC_FUN(E.EMAIL_ENC), 'NONE') AS EMAIL_ADDR
     , E.NM_KOR
     , '업장(' || A.UPJANGNM || '[' || TO_CHAR(A.UPJANG) || '])의 가상계좌가 등록되었습니다.' AS MAIL_SUBJECT
     , 
'<html>' ||
'  <head><title>신규 업장에 대한 가상계좌 등록</title></head>' ||
'  <body>' ||
'    <div style="font-size:9pt;">' || A.UPJANGNM || '[' || TO_CHAR(A.UPJANG) || ']업장에 아래와 같이 가상계좌가 등록되었습니다.</div>' ||
'    <br/>' ||
'    <table style="border:1px solid gray;width:600px" cellpadding="0" cellspacing="0" border="0">' ||
'      <tr>' ||
'        <td style="font-size:9pt;padding:5px 5px 0 15px;width:20%">업 장 명</td>' ||
'        <td style="font-size:9pt;padding:5px 5px 0 5px;border-left:1px solid gray;width:80%">' || A.UPJANGNM || '[' || TO_CHAR(A.UPJANG) || ']</td>' ||
'      </tr>' ||
'      <tr>' ||
'        <td style="font-size:9pt;padding:5px 5px 0 15px;border-top:1px solid gray; ">거래처명</td>' ||
'        <td style="font-size:9pt;padding:5px 5px 0 5px;border-top:1px solid gray; border-left:1px solid gray;">' || B.CUSTNM || '[' || TO_CHAR(B.CUSTCD) || ']</td>' ||
'      </tr>' ||
'      <tr>' ||
'        <td style="font-size:9pt;padding:5px 5px 0 15px;border-top:1px solid gray; ">계좌번호</td>' ||
'        <td style="font-size:9pt;padding:5px 5px 0 5px;border-top:1px solid gray; border-left:1px solid gray;">' || SCC_CRYPTO.DEC_FUN(A.BANK_ACCT_NO_ENC) || '</td>' ||
'      </tr>' ||
'    </table>' ||
'  </body>' ||
'</html>' AS MAIL_CONTENT
     , D.DRAFT_USER AS LOGIN_SABUN
     , D.DRAFT_USER AS LOGIN_USERID
     , 'YYYYYYYYYYY' AS LOGIN_PERS_MASK
     , E.SABUN
  FROM ST_UPJANG A
     , ST_CUST B
     , SCC_SIGN_INFO D
     , SCC_USERINFO E
 WHERE B.CUSTCD = A.CUSTCD
   AND D.SIGN_INSTANCE_ID = A.SIGN_INSTANCE_ID
   AND E.SABUN = (CASE WHEN D.DRAFT_USER = '9999999990' THEN SUBSTR(D.DRAFT_USER, 2) ELSE D.DRAFT_USER END)
   AND A.SEND_MAIL_STATUS = '2'
		]]>
	</statement>

	<!-- 메일발송상태를 변경한다. -->
	<statement name="updataMailStatus" type="update">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtDAO.updataMailStatus */
		<![CDATA[
UPDATE ST_UPJANG
   SET SEND_MAIL_STATUS = '9'
 WHERE UPJANG = :upjang
		]]>
	</statement>

	<!-- 사용자 취소. -->
	<statement name="updataUserCancel" type="update">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtDAO.updataUserCancel */
		<![CDATA[
UPDATE ST_UPJANG
   SET BANK_ACCT_NO_REQUEST_YN = NULL
     , BANK_ACCT_PROC_RESULT = '8'
     , UPDATE_BY = :loginSabun
     , UPDATE_DATE = SYSDATE
 WHERE UPJANG IN (:upjangs)
		]]>
	</statement>

	<!-- 입력한 업장명과 비슷한 업장명을 검색한다. -->
	<statement name="selectLikeUpjangNm" type="select">
		/*+ com.hwfs.sc.scz.dao.UpjangMgmtDAO.selectLikeUpjangNm */
		<![CDATA[
SELECT A.UPJANG
     , A.UPJANGNM
     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'SHOP_TYP_CD' AND CODE = A.SHOP_TYP_CD) AS SHOP_TYP_NM
     , A.CUSTCD
     , C.CUSTNM
     , C.SAUPNO
  FROM ST_UPJANG A
     , SCO_UPJANG_MST B
     , ST_CUST C
 WHERE B.UPJANG = A.UPJANG
   AND C.CUSTCD(+) = A.CUSTCD
   AND SCC_UPJANGNM_REPLACE(A.UPJANGNM) = SCC_UPJANGNM_REPLACE(:upjangnm)
		]]>
	</statement>

</hqml>
