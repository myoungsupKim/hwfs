<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="rc.sle.outletMgmtDAO">
	<desc>영업장 등록 관리</desc>


	<!-- 조직도  -->
	<statement name="selectListOrg" type="select">
		/*+ com.hwfs.rc.sle.dao.outletMgmtDAO.selectListOrg */
		<![CDATA[
		SELECT 	 
			''       AS LIST_CD, '' AS HLEVEL_CD, '' AS MU_CD, '' AS MU_NM,  '' AS TM_CD, '' AS TM_NM,
			0	   	 AS UPJANG, 
			'조직도' AS UPJANGNM, 
			 
			0	   	 AS ORG_LEVEL 
            , '' AS DRNAME
            , '' AS TEL_NUM, '' AS TEL_NUM1, '' AS TEL_NUM2, '' AS TEL_NUM3
            , '' AS SAUPNO
            , '' AS ADDR 
            , '' AS START_DATE
            , '' AS END_DATE
		FROM DUAL 
        UNION ALL
		SELECT   LIST_CD, HLEVEL_CD, MU_CD, MU_NM,  TM_CD,  TM_NM,  UPJANG,   UPJANGNM ,LEVEL AS ORG_LEVEL
        		    , DRNAME
                    , TEL_NUM
                    , SCC_TELNO_SPLIT_FUN(TEL_NUM,1)     AS TEL_NUM1
                    , SCC_TELNO_SPLIT_FUN(TEL_NUM,2)     AS TEL_NUM2
                    , SCC_TELNO_SPLIT_FUN(TEL_NUM,3)     AS TEL_NUM3
                    , SAUPNO
                    , ADDR 
                    , START_DATE
                    , END_DATE
		 FROM(
		        
		       
		        
		        SELECT  MU_CD, MU_NM, '' AS TM_CD, '' AS TM_NM, 0 AS UPJANG, MU_NM AS UPJANGNM
                	, '' AS HLEVEL_CD
                    , LPAD(MU_CD,4,0) || '000000000000'|| '0000000000'  AS LIST_CD
                    , '' AS DRNAME
                    , '' AS TEL_NUM
                    , '' AS SAUPNO
                    , '' AS ADDR 
                    , '' AS START_DATE
                    , '' AS END_DATE
                    
		        FROM SCO_UPJANG_V GROUP BY MU_CD ,MU_NM
		        UNION ALL
		        SELECT  MU_CD, MU_NM,  TM_CD,   TM_NM, 0 AS UPJANG, TM_NM AS UPJANGNM
                	,LPAD(MU_CD,4,0) || '000000000000'|| '0000000000' AS HLEVEL_CD
                    ,LPAD(MU_CD,4,0) ||LPAD(TM_CD,12,0)|| '0000000000'  AS LIST_CD
                    
                    , '' AS DRNAME
                    , '' AS TEL_NUM
                    , '' AS SAUPNO
                    , '' AS ADDR 
                    , '' AS START_DATE
                    , '' AS END_DATE
                    
		        FROM SCO_UPJANG_V GROUP BY MU_CD ,MU_NM, TM_CD,   TM_NM
		        UNION ALL
		        SELECT  MU_CD, MU_NM,  TM_CD,   TM_NM,  UPJANG,  UPJANGNM      
                	, LPAD(MU_CD,4,0) ||LPAD(TM_CD,12,0)|| '0000000000' AS HLEVEL_CD
                    , LPAD(MU_CD,4,0) ||LPAD(TM_CD,12,0)|| LPAD(UPJANG,10,0)  AS LIST_CD
                    , DRNAME
                    , SCC_CRYPTO.MASK_FUN(TEL_NO_ENC,9,:loginPersMask) AS TEL_NUM
                    , SAUPNO
                    , ADDR 
                    , ACC_OPENDATE AS START_DATE
                    , ACC_CLOSEDATE AS END_DATE
                  
                  
		         FROM SCO_UPJANG_V  
		        
		   ) DUAL
 
		  START WITH HLEVEL_CD IS NULL
		  CONNECT BY PRIOR LIST_CD = HLEVEL_CD

	
	]]>
	</statement>


	<!-- Mask 한 DATA를 조회한다.   -->
	<!-- 1.업장정보관리 (전달값은 outletCd ='' ,useYn=0,1 임) -->
	<statement name="selectList" type="select"><![CDATA[
	  SELECT
	  	OUTLET_CD, BC_CD, BC_NM,
		OUTLET_NM,
		CEO_NM,
		ADDR,
		SCC_TELNO_SPLIT_FUN(TEL_NUM,1) 
					 || DECODE(NVL(SCC_TELNO_SPLIT_FUN(TEL_NUM,2),''),'','','-') 
					 || SCC_TELNO_SPLIT_FUN(TEL_NUM,2)
					 || DECODE(NVL(SCC_TELNO_SPLIT_FUN(TEL_NUM,3),''),'','','-') 
					 || SCC_TELNO_SPLIT_FUN(TEL_NUM,3)     AS TEL_NUM,
					 
		SCC_TELNO_SPLIT_FUN(TEL_NUM,1)     AS TEL_NUM1,
		SCC_TELNO_SPLIT_FUN(TEL_NUM,2)     AS TEL_NUM2,
		SCC_TELNO_SPLIT_FUN(TEL_NUM,3)     AS TEL_NUM3,
		
		BSN_NO,
		START_DATE,
		END_DATE,
		PIC_PLACE,
		START_TIME,
		END_TIME,
		MAX_PSN,
		OUTLET_TYPE, OUTLET_TYPE_NM,
		SVC,
		SPEC_TAX,
		EDU_TAX,
		FF_TAX,
		VAT,
		FUND,
		CAL_METHOD, CAL_METHOD_NM,
		SESN_TYPE,
		VAT_PRINT, VAT_PRINT_NM,
		SVC_PRINT, SVC_PRINT_NM,
		
		TABLE_QTY,
		SEAT_QTY,
		
		REF1,
		REF2,
		REF3,
		
		OUTLET_GRP,
		OUTLET_BGN,
	    OUTLET_TY,
	    OUTLET_SUM,
	    POS_YN,
	   
		USE_YN,
		CDATE,
		CUSER,
		UDATE,
		UUSER
		 
	FROM (		
			SELECT MST.OUTLET_CD, '' AS BC_CD,  '' AS BC_NM,
					--DECODE(MST.BC_CD, NULL, '전체', CBCL.CODE_NAME)  AS BC_NM,
			       MST.OUTLET_NM,
			       SCC_CRYPTO.MASKAUTH_FUN(MST.CEO_NM,12,:loginPersMask, :maskAuth) AS CEO_NM,
			       MST.ADDR,
			       SCC_CRYPTO.MASKAUTH_FUN(MST.TEL_NUM,9,:loginPersMask, :maskAuth) AS TEL_NUM,
			       MST.BSN_NO,
			       MST.START_DATE,
			       MST.END_DATE,
			       MST.PIC_PLACE,
			       MST.START_TIME,
			       MST.END_TIME,
			       MST.MAX_PSN,
			       MST.OUTLET_TYPE,
			       LOCTYPE.CODE_NAME AS OUTLET_TYPE_NM,
			       MST.SVC,
			       MST.SPEC_TAX,
			       MST.EDU_TAX,
			       MST.FF_TAX,
			       MST.VAT,
			       MST.FUND,
			       MST.CAL_METHOD,
			       CALTYPE.CODE_NAME AS CAL_METHOD_NM,
			       MST.SESN_TYPE,
			       MST.VAT_PRINT,
			       VATTYPE.CODE_NAME AS VAT_PRINT_NM,
			       MST.SVC_PRINT,
			       SVCTYPE.CODE_NAME AS SVC_PRINT_NM,
			       
			       MST.TABLE_QTY,
				   MST.SEAT_QTY,
			       
			       MST.REF1,
			       MST.REF2,
			       MST.REF3,
			       
			       MST.OUTLET_GRP,
			       MST.OUTLET_BGN,
				   DECODE(MST.OUTLET_TY, 'Y', 1, 0) AS OUTLET_TY,
				   MST.OUTLET_SUM,
				   DECODE(MST.POS_YN, 'Y', 1, 0) AS POS_YN,
			       
			       DECODE(MST.USE_YN, 'Y', 1, 0) AS USE_YN,
			       MST.CDATE,
			       MST.CUSER,
			       MST.UDATE,
			       MST.UUSER
			FROM   SLE_OUTLET_MST MST
			--INNER JOIN SCC_COMMON_CODE CBCL    ON CBCL.GROUP_CODE   = 'SLE_0026' AND CBCL.CODE  = MST.BC_CD
			INNER JOIN SCC_COMMON_CODE LOCTYPE ON LOCTYPE.GROUP_CODE ='SLE_0001' AND LOCTYPE.CODE = MST.OUTLET_TYPE
			INNER JOIN SCC_COMMON_CODE CALTYPE ON CALTYPE.GROUP_CODE ='SLE_0002' AND CALTYPE.CODE = MST.CAL_METHOD
			INNER JOIN SCC_COMMON_CODE VATTYPE ON VATTYPE.GROUP_CODE ='SLE_0004' AND VATTYPE.CODE = MST.VAT_PRINT
			INNER JOIN SCC_COMMON_CODE SVCTYPE ON SVCTYPE.GROUP_CODE ='SLE_0004' AND SVCTYPE.CODE = MST.SVC_PRINT
			INNER JOIN  SCO_UPJANG_V   UPJANG ON UPJANG.UPJANG = TO_NUMBER(MST.OUTLET_CD) 
            						<#if muCd?has_content>      AND  UPJANG.MU_CD = :muCd </#if>
                                    <#if tmCd?has_content>      AND  UPJANG.TM_CD = :tmCd </#if>
                                     
			WHERE 1=1
			<#if outletCd?has_content>  AND  MST.OUTLET_CD = :outletCd   </#if>
			<#if outletNm?has_content>  AND  ( MST.OUTLET_CD LIKE  '%' || :outletNm || '%'  OR MST.OUTLET_NM LIKE '%' || :outletNm || '%')  </#if>
			<#if useYn?has_content>  	AND  MST.USE_YN    = DECODE(:useYn, '1', 'Y', MST.USE_YN)  </#if>
			 		
	)
	ORDER BY OUTLET_CD

	]]></statement>

	<!--  DATA를 저장한다. -->
	<statement name="insertData" type="insert"><![CDATA[
	 INSERT INTO SLE_OUTLET_MST
			(
			 OUTLET_CD, BC_CD,
			 OUTLET_NM,
			 CEO_NM,
			 ADDR,
			 TEL_NUM,
			 BSN_NO,
			 START_DATE,
			 END_DATE,
			 PIC_PLACE,
			 START_TIME,
			 END_TIME,
			 MAX_PSN,
			 OUTLET_TYPE,
			 SVC,
			 SPEC_TAX,
			 EDU_TAX,
			 FF_TAX,
			 VAT,
			 FUND,
			 CAL_METHOD,
			 SESN_TYPE,
			 VAT_PRINT,
			 SVC_PRINT,
			 
			 TABLE_QTY,
			 SEAT_QTY,
			 
			 REF1,
			 REF2,
			 REF3,
			 
			 OUTLET_GRP,
			 OUTLET_BGN,
			 OUTLET_TY,
			 OUTLET_SUM,
			 POS_YN,
			
			 USE_YN,
			 CDATE,
			 CUSER,
			 UDATE,
			 UUSER
			) VALUES (
			 :outletCd,
			<#if bcCd?exists> :bcCd, <#else> null, </#if>
			<#if outletNm?exists> :outletNm, <#else> null, </#if>
			<#if ceoNm?exists> :ceoNm, <#else> null, </#if>
			<#if addr?exists>    :addr , <#else> null, </#if>
			<#if telNum?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:telNum,'-','')), <#else> null, </#if>
			<#if bsnNo?exists> :bsnNo, <#else> null, </#if>
			<#if startDate?exists> :startDate, <#else> null, </#if>
			<#if endDate?exists> :endDate, <#else> null, </#if>
			<#if picPlace?exists> :picPlace, <#else> null, </#if>
			<#if startTime?exists> :startTime, <#else> null, </#if>
			<#if endTime?exists> :endTime, <#else> null, </#if>
			<#if maxPsn?exists> :maxPsn, <#else> null, </#if>
			<#if outletType?exists> :outletType, <#else> null, </#if>
			<#if svc?exists> :svc, <#else> null, </#if>
			<#if specTax?exists> :specTax, <#else> null, </#if>
			<#if eduTax?exists> :eduTax, <#else> null, </#if>
			<#if ffTax?exists> :ffTax, <#else> null, </#if>
			<#if vat?exists> :vat, <#else> null, </#if>
			<#if fund?exists> :fund, <#else> null, </#if>
			<#if calMethod?exists> :calMethod, <#else> null, </#if>
			<#if sesnType?exists> :sesnType, <#else> null, </#if>
			<#if vatPrint?exists> :vatPrint, <#else> null, </#if>
			<#if svcPrint?exists> :svcPrint, <#else> null, </#if>
			<#if tableQty?exists> :tableQty, <#else> null, </#if>
			<#if seatQty?exists> :seatQty, <#else> null, </#if>
			<#if ref1?exists> :ref1, <#else> null, </#if>
			<#if ref2?exists> :ref2, <#else> null, </#if>
			<#if ref3?exists> :ref3, <#else> null, </#if>
			
			<#if outletGrp?exists> :outletGrp, <#else> null, </#if>
			<#if outletBgn?exists> :outletBgn, <#else> null, </#if>
		 
			<#if outletTy?exists> DECODE(:outletTy, '1', 'Y', 'N'), <#else> null, </#if>
			<#if outletSum?exists> :outletSum, <#else> null, </#if>
			<#if posYn?exists> DECODE(:posYn, '1', 'Y', 'N'), <#else> null, </#if> 
			
			<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
			 SYSDATE,
			 :loginSabun,
			 SYSDATE,
			 :loginSabun
			)
		
		]]></statement>

	<!--  DATA를 수정한다. -->
	<statement name="updateData" type="update"><![CDATA[
 	UPDATE SLE_OUTLET_MST SET
		<#if bcCd?exists> BC_CD = :bcCd, </#if>
		<#if outletNm?exists> OUTLET_NM = :outletNm, </#if>
		<#if ceoNm?exists> CEO_NM = :ceoNm, </#if>
		<#if addr?exists> ADDR =  :addr , </#if>
		<#if telNum?exists> TEL_NUM = SCC_CRYPTO.ENC_FUN(REPLACE(:telNum,'-','')), </#if>
		<#if bsnNo?exists> BSN_NO = :bsnNo, </#if>
		<#if startDate?exists> START_DATE = :startDate, </#if>
		<#if endDate?exists> END_DATE = :endDate, </#if>
		<#if picPlace?exists> PIC_PLACE = :picPlace, </#if>
		<#if startTime?exists> START_TIME = :startTime, </#if>
		<#if endTime?exists> END_TIME = :endTime, </#if>
		<#if maxPsn?exists> MAX_PSN = :maxPsn, </#if>
		<#if outletType?exists> OUTLET_TYPE = :outletType, </#if>
		<#if svc?exists> SVC = :svc, </#if>
		<#if specTax?exists> SPEC_TAX = :specTax, </#if>
		<#if eduTax?exists> EDU_TAX = :eduTax, </#if>
		<#if ffTax?exists> FF_TAX = :ffTax, </#if>
		<#if vat?exists> VAT = :vat, </#if>
		<#if fund?exists> FUND = :fund, </#if>
		<#if calMethod?exists> CAL_METHOD = :calMethod, </#if>
		<#if sesnType?exists> SESN_TYPE = :sesnType, </#if>
		<#if vatPrint?exists> VAT_PRINT = :vatPrint, </#if>
		<#if svcPrint?exists> SVC_PRINT = :svcPrint, </#if>
		 
		<#if tableQty?exists> TABLE_QTY = :tableQty,  </#if>
		<#if seatQty?exists>  SEAT_QTY  = :seatQty, </#if>
		
		<#if ref1?exists>  REF1  = :ref1, </#if>
		<#if ref2?exists>  REF2  = :ref2, </#if>
		<#if ref3?exists>  REF3  = :ref3, </#if>
		
		<#if outletGrp?exists> OUTLET_GRP = :outletGrp, </#if>
		<#if outletBgn?exists> OUTLET_BGN = :outletBgn, </#if>
 
		<#if outletTy?exists> OUTLET_TY = DECODE(:outletTy, '1', 'Y', 'N'), </#if>
		<#if outletSum?exists> OUTLET_SUM = :outletSum, </#if>
		<#if posYn?exists> POS_YN = DECODE(:posYn, '1', 'Y', 'N'), </#if>
		
		<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
		       UDATE = SYSDATE,
		       UUSER = :loginSabun
		WHERE  OUTLET_CD = :outletCd

	 
 
		]]></statement>



</hqml>
