<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="rc.rrm.saleEstFrmDAO">
	<desc>매출 추정 양식 HQML Query</desc>

	<!-- 매출 정보를 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.rc.rrm.saleEstFrmDAO.selectList	*/
		<![CDATA[
		SELECT V.SAUP_TYPE
     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'MA0001' AND CODE = V.SAUP_TYPE) SAUP_TYPENM
     , V.SYS_CLASS
     , NVL(D.EST_CLASS, :estClass) EST_CLASS
     , V.MU_CD
     , V.TM_CD
     , V.TM_NM
     , V.UPJANG_CD
     , V.UPJANGNM
     
     , V.OCCUR_DATE 
     
     , C.DD
     , C.CD_WEEK
     , B.WDESC
     
     , D.DIV_CLASS
     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'DIV_CLASS' AND CODE =D.DIV_CLASS  ) AS DIV_CLASS_NM
     
     
     , ROUND(SUM(NVL(F_AMT, 0)) + SUM(NVL(S_AMT, 0)) + SUM(NVL(E_AMT, 0))) TOT_AMT -- 전체매출액(일별 매출계)
     , ROUND(SUM(NVL(F_AMT, 0))) F_AMT -- 식단가(일별 식음료 매출)
     
     , ROUND(SUM(NVL(D.MTNC_AMT, 0))) MTNC_AMT
     , ROUND(SUM(NVL(D.EVENT_AMT, 0))) EVENT_AMT
     , ROUND(SUM(NVL(D.CAFE_AMT, 0))) CAFE_AMT
     , ROUND(SUM(NVL(D.CFTR_AMT, 0))) CFTR_AMT
     , ROUND(SUM(NVL(D.PRDT_AMT, 0))) PRDT_AMT
     

     --, SUM(NVL(QTY, 0)) QTY00 -- 식수
     --, SUM(DECODE(V.BLD_TYPE, '1', QTY, 0)) QTY01 --조식
     --, SUM(DECODE(V.BLD_TYPE, '2', QTY, 0)) QTY02 -- 중식
     --, SUM(DECODE(V.BLD_TYPE, '3', QTY, 0)) QTY03 -- 석식
     --, SUM(DECODE(V.BLD_TYPE, '4', QTY, 0)) QTY04 -- 간식
     --, SUM(DECODE(V.BLD_TYPE, '1', 0, '2', 0, '3', 0, '4', 0, NVL(QTY,0))) QTY05 -- 구분1
     
     , DECODE(NVL(D.OCCUR_DATE, 'Z'), 'Z', SUM(NVL(QTY, 0)), D.BRFT_QTY + D.LNCH_QTY + D.DNNR_QTY + D.SNCK_QTY + D.DIV_QTY) QTY00 --총 식수
     , DECODE(NVL(D.BRFT_QTY, 0), 0, SUM(DECODE(V.BLD_TYPE, '1', QTY, 0)), D.BRFT_QTY) QTY01 --조식
     , DECODE(NVL(D.LNCH_QTY, 0), 0, SUM(DECODE(V.BLD_TYPE, '2', QTY, 0)), D.LNCH_QTY) QTY02 -- 중식
     , DECODE(NVL(D.DNNR_QTY, 0), 0, SUM(DECODE(V.BLD_TYPE, '3', QTY, 0)), D.DNNR_QTY) QTY03 -- 석식
     , DECODE(NVL(D.SNCK_QTY, 0), 0, SUM(DECODE(V.BLD_TYPE, '4', QTY, 0)), D.SNCK_QTY) QTY04 -- 간식
     , DECODE(NVL(D.DIV_QTY, 0), 0, SUM(DECODE(V.BLD_TYPE, '1', 0, '2', 0, '3', 0, '4', 0, NVL(QTY,0))), D.DIV_QTY) QTY05 --구분1
     
     
     
     , ROUND(SUM(NVL(S_AMT, 0))) S_AMT -- 상품
     , ROUND(SUM(NVL(E_AMT, 0))) E_AMT --기타
  FROM (



        SELECT T3.SAUP_TYPE 
             , T1.SYS_CLASS
             , T3.MU_CD 
             , T3.TM_CD 
             , T3.TM_NM
             , T2.UPJANG_CD 
             , T3.UPJANGNM
             
             , NVL(SUM((CASE WHEN T2.SALS_CLASS IN ('1103','1104','1603','2001','2002','1108','1109') AND (T2.SUP_AMT_YN <> 'Y' OR T2.SUP_AMT_YN IS NULL) THEN T2.SAL_QUANTITY ELSE 0 END)), 0) QTY
             , NVL(SUM(CASE WHEN SALS_CLASS IN ('1103','1104','1603','2001','2002','1108','1109') THEN T2.NET_AMT ELSE 0 END), 0) F_AMT 
             , NVL(SUM(CASE WHEN SALS_CLASS IN ('1101','1102','1602','1701','2004','1110','1111') THEN T2.NET_AMT ELSE 0 END), 0) S_AMT
             , NVL(SUM(CASE WHEN SALS_CLASS IN ('1105','1106','1901','2003','1112','1113','1114','1901') THEN T2.NET_AMT ELSE 0 END), 0) E_AMT 
             , T2.OCCUR_DATE
             
             , T1.BLD_TYPE
		     
             
             , T2.VAT_CLASS
          FROM SLA_IF_UPJANG_SALS_MST T1, 
               SLA_IF_UPJANG_SALS_DETAIL T2, 
               SCO_UPJANG_MST_V T3 
         WHERE T1.OCCUR_DATE = T2.OCCUR_DATE 
           AND T1.SYS_CLASS = T2.SYS_CLASS 
           AND T1.UPJANG_CD = T2.UPJANG_CD 
           AND T1.UPJANG_CD = T3.UPJANG 
           AND T1.RECEIPT_NUM =T2.RECEIPT_NUM 
           AND T2.SYS_CLASS IN (11,16,17,19,20) 
           AND T2.OCCUR_DATE   BETWEEN :occurDate ||'01' AND :occurDate ||'31' 
           AND T3.UPJANG NOT IN (SELECT Z.CODE FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'MA0048' AND Z.USE_YN = 'Y') 
           AND T3.MU_CD      = :muCd
           AND   (T3.TM_CD      = 'CDHA' OR T3.PT_CD = 'CDHA')
           AND T2.UPJANG_CD      = :upjang
           
           

          GROUP BY T3.SAUP_TYPE, T1.SYS_CLASS, T3.MU_CD, T3.TM_CD, T3.TM_NM, T2.UPJANG_CD, T3.UPJANGNM, T2.OCCUR_DATE, T2.VAT_CLASS, T1.BLD_TYPE
  ) V
  , (SELECT * FROM UPOS_SC_WEATHER_INFO_V WHERE AREA_CODE IN (SELECT LOC_CD FROM SCO_UPJANG_MST WHERE UPJANG = :upjang)) B
  , (
        SELECT CD_SY AS YY
             , CD_SM AS MM
             , CD_SD AS DD
             , CD_WEEK --요일
             , CD_SY || CD_SM || CD_SD AS CD_DATE
             , DECODE(HOLIDAY, 1, 'RED', 2, 'RED', DECODE(CD_WEEK, '일', 'RED', '토', 'BLUE', 'WHITE')) AS CD_COLOR
          FROM SCC_CALENDA_DATA
         WHERE CD_SY||CD_SM = :occurDate
    ) C
   , SLA_IF_UPJANG_SALS_EST_DD D

   WHERE C.CD_DATE = V.OCCUR_DATE(+)
     AND C.CD_DATE = B.CUR_DATE
     AND V.OCCUR_DATE = D.OCCUR_DATE(+)
     AND V.UPJANG_CD = D.UPJANG_CD(+)
     AND D.EST_CLASS(+) = '01'
     AND D.RECD_STATUS(+) <> 'D'
     
    
    
 GROUP BY V.SAUP_TYPE, V.SYS_CLASS, D.EST_CLASS, V.MU_CD, V.TM_CD, V.TM_NM, V.UPJANG_CD, V.UPJANGNM, V.OCCUR_DATE, C.DD, C.CD_WEEK, B.WDESC, D.DIV_CLASS, D.OCCUR_DATE, D.BRFT_QTY, D.LNCH_QTY, D.DNNR_QTY, D.SNCK_QTY, D.DIV_QTY
  ORDER BY  C.DD
 
  

		]]>
	</statement>
	
	<!-- 월별 단가를 조회한다. -->
	<statement name="selectMmPriceList" type="select">
		/*+ com.hwfs.rc.rrm.saleEstFrmDAO.selectMmPriceList	*/
		<![CDATA[
		SELECT *
		  FROM SLA_IF_UPJANG_SALS_EST_MM
		 WHERE OCCUR_MONTH = :occurDate 
		   AND EST_CLASS   = :estClass
           AND MU_CD       = :muCd
           AND TM_CD       = :tmCd
           AND UPJANG_CD   = :upjang
	
		]]>
	</statement>
	
	<!-- 월별 단가를 등록한다. -->
	<statement name="insertMmPrice" type="insert">
		/*+ com.hwfs.rc.rrm.saleEstFrmDAO.insertMmPrice */
		<![CDATA[
		MERGE INTO SLA_IF_UPJANG_SALS_EST_MM A
		USING (
		       SELECT :occurMonth AS OCCUR_MONTH 
		            , :estClass AS EST_CLASS
		            , :upjangCd AS UPJANG_CD
		            , :muCd AS MU_CD
		            , :tmCd AS TM_CD
		            , <#if uprice?exists>    :uprice    <#else> 0 </#if> AS UPRICE
		            , <#if brftPrice?exists> :brftPrice <#else> 0 </#if> AS BRFT_PRICE
		            , <#if lnchPrice?exists> :lnchPrice <#else> 0 </#if> AS LNCH_PRICE
		            , <#if dnnrPrice?exists> :dnnrPrice <#else> 0 </#if> AS DNNR_PRICE
		            , <#if snckPrice?exists> :snckPrice <#else> 0 </#if> AS SNCK_PRICE
		            , <#if divPrice?exists>  :divPrice  <#else> 0 </#if> AS DIV_PRICE
		         FROM DUAL
		      ) B
		   ON (
		           A.OCCUR_MONTH = B.OCCUR_MONTH
		       AND A.UPJANG_CD = B.UPJANG_CD
		       AND A.EST_CLASS = B.EST_CLASS
		      ) 
		 WHEN MATCHED THEN
		      UPDATE
		         SET A.UPRICE     = B.UPRICE
		           , A.BRFT_PRICE = B.BRFT_PRICE
		           , A.LNCH_PRICE = B.LNCH_PRICE
		           , A.DNNR_PRICE = B.DNNR_PRICE
		           , A.SNCK_PRICE = B.SNCK_PRICE
		           , A.DIV_PRICE  = B.DIV_PRICE
		           , A.UUSER      = :loginSabun
		           , A.UDATE      = SYSDATE
		 WHEN NOT MATCHED THEN
		      INSERT (
		                A.OCCUR_MONTH
		              , A.EST_CLASS
		              , A.UPJANG_CD
		              , A.MU_CD
		              , A.TM_CD
		              , A.UPRICE
		              , A.BRFT_PRICE
		              , A.LNCH_PRICE
		              , A.DNNR_PRICE
		              , A.SNCK_PRICE
		              , A.DIV_PRICE
		              , A.RECD_STATUS
		              , A.CUSER
		              , A.CDATE
		              , A.UUSER
		              , A.UDATE
		             )
		      VALUES (
		                B.OCCUR_MONTH
		              , B.EST_CLASS
		              , B.UPJANG_CD
		              , B.MU_CD
		              , B.TM_CD
		              , B.UPRICE
		              , B.BRFT_PRICE
		              , B.LNCH_PRICE
		              , B.DNNR_PRICE
		              , B.SNCK_PRICE
		              , B.DIV_PRICE
		              , 'L'
		              , :loginSabun
		              , SYSDATE
		              , :loginSabun
		              , SYSDATE
		             )
		]]>
	</statement>
	
	<!-- 일별 매출 정보를 등록한다. -->
	<statement name="insertDdPrice" type="insert">
		/*+ com.hwfs.rc.rrm.saleEstFrmDAO.insertDdPrice */
		<![CDATA[
		MERGE INTO SLA_IF_UPJANG_SALS_EST_DD A
		USING (
		       SELECT :occurDate AS OCCUR_DATE
		            , :sysClass AS SYS_CLASS 
		            , :estClass AS EST_CLASS
		            , :upjangCd AS UPJANG_CD
		            , :muCd AS MU_CD
		            , :tmCd AS TM_CD
		            , :divClass AS DIV_CLASS
		            , :qty01 AS BRFT_QTY
		            , :qty02 AS LNCH_QTY
		            , :qty03 AS DNNR_QTY
		            , :qty04 AS SNCK_QTY
		            , :qty05 AS DIV_QTY
		            , :mtncAmt AS MTNC_AMT
		            , :eventAmt AS EVENT_AMT
		            , :cafeAmt AS CAFE_AMT
		            , :cftrAmt AS CFTR_AMT
		            , :prdtAmt AS PRDT_AMT
		         FROM DUAL
		      ) B
		   ON (
		           A.OCCUR_DATE = B.OCCUR_DATE
		       AND A.SYS_CLASS = B.SYS_CLASS
		       AND A.EST_CLASS = B.EST_CLASS
		       AND A.UPJANG_CD = B.UPJANG_CD
		      ) 
		 WHEN MATCHED THEN
		      UPDATE
		         SET A.DIV_CLASS = B.DIV_CLASS
		           , A.MTNC_AMT  = B.MTNC_AMT
		           , A.EVENT_AMT = B.EVENT_AMT
		           , A.CAFE_AMT  = B.CAFE_AMT
		           , A.CFTR_AMT  = B.CFTR_AMT
		           , A.PRDT_AMT  = B.PRDT_AMT
		           , A.BRFT_QTY  = B.BRFT_QTY
		           , A.LNCH_QTY  = B.LNCH_QTY
		           , A.DNNR_QTY  = B.DNNR_QTY
		           , A.SNCK_QTY  = B.SNCK_QTY
		           , A.DIV_QTY   = B.DIV_QTY
		           , A.UUSER     = :loginSabun
		           , A.UDATE     = SYSDATE
		 WHEN NOT MATCHED THEN
		      INSERT (
		                A.OCCUR_DATE
		           	  , A.SYS_CLASS 
		              , A.EST_CLASS
		              , A.UPJANG_CD
		              , A.MU_CD
		              , A.TM_CD
		              , A.DIV_CLASS
		              , A.BRFT_QTY
		              , A.LNCH_QTY
		              , A.DNNR_QTY
		              , A.SNCK_QTY
		              , A.DIV_QTY
		              , A.MTNC_AMT
		              , A.EVENT_AMT
		              , A.CAFE_AMT
		              , A.CFTR_AMT
		              , A.PRDT_AMT
		              , A.RECD_STATUS
		              , A.CUSER
		              , A.CDATE
		              , A.UUSER
		              , A.UDATE
		             )
		      VALUES (
		                B.OCCUR_DATE
		           	  , B.SYS_CLASS 
		              , B.EST_CLASS
		              , B.UPJANG_CD
		              , B.MU_CD
		              , B.TM_CD
		              , B.DIV_CLASS
		              , B.BRFT_QTY
		              , B.LNCH_QTY
		              , B.DNNR_QTY
		              , B.SNCK_QTY
		              , B.DIV_QTY
		              , B.MTNC_AMT
		              , B.EVENT_AMT
		              , B.CAFE_AMT
		              , B.CFTR_AMT
		              , B.PRDT_AMT
		              , 'L'
		              , :loginSabun
		              , SYSDATE
		              , :loginSabun
		              , SYSDATE
		             )
		]]>
	</statement>

</hqml>