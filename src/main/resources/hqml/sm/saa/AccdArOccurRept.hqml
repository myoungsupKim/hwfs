<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="sm.saa.accdArOccurReptDAO">
    <desc>사고채권발생보고 HQML Query</desc>

    <!-- 사고채권발생보고 목록을 조회한다. -->
    <statement name="selectList" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectList */
    <![CDATA[
            SELECT  A.BIZ_CLASS                                                  AS MU_CD                              /* 사업부코드               */
                  , (SELECT MU_NM FROM HLDC_SC_MU WHERE MU_CD = A.BIZ_CLASS)     AS MU_NM                              /* 사업부명                 */
                  , A.SEQ                                                        AS SEQ                                /* 순번                     */
                  , A.TEAM_CD                                                    AS TEAM_CD                            /* 팀_코드                  */
                  , (SELECT TM_NM FROM HLDC_SC_TM WHERE MU_CD = A.BIZ_CLASS AND TM_CD = A.TEAM_CD) AS TEAM_NM          /* 팀명                     */
                  , A.CUST_CD                       AS CUST_CD                                                         /* 업장코드                 */
                  , A.UPJANG_CD
                  , (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.UPJANG_CD) AS UPJANG_NM
                  , DECODE(A.SYS_GB, '004', B.UPJANGNM_DISP, C.CUSTNM)           AS CUST_NM                            /* 업장명                   */
                  , A.SALES_TEAM_MST_SABUN          AS SALES_TEAM_MST_SABUN                                            /* 영업_팀장                */
                  , (SELECT NM_KOR FROM HR_PERSONAL WHERE SABUN = A.SALES_TEAM_MST_SABUN) AS SALES_TEAM_MST_SABUN_NM   /* 영업_팀장명              */
                  , A.SALES_SABUN                   AS SALES_SABUN                                                     /* 영업사원                 */
                  , (SELECT NM_KOR FROM HR_PERSONAL WHERE SABUN = A.SALES_SABUN) AS SALES_SABUN_NM                     /* 영업사원명               */
                  , A.BIZ_NO                        AS BIZ_NO                                                          /* 사업자등록번호           */
                  , DECODE(A.BIZ_NO, NULL, NULL, SUBSTR(A.BIZ_NO, 0, 3) || '-' || SUBSTR(A.BIZ_NO, 4, 2) || '-' || SUBSTR(A.BIZ_NO, 6)) AS BIZ_NUM      /* 사업자등록번호           */
                  , A.CEO_NM                        AS CEO_NM                                                          /* 대표자 명                */
                --  , A.ZIP_CODE                      AS ZIP_CODE                                                        /* 우편번호                 */
                --  , A.ADDR                          AS ADDR                                                            /* 주소                     */
                --  , SCC_CRYPTO.MASKAUTH_FUN(A.ADDR_ENC, 10, :loginPersMask, :maskAuth)             AS ADDR_ENC         /* 주소_암호화              */
                  ,SCC_GET_ADDR_FUN('BASE'  , A.ADDR_KEY, :loginPersMask, :maskAuth)||' '||SCC_GET_ADDR_FUN('DETAIL', A.ADDR_KEY, :loginPersMask, :maskAuth) AS ADDR		/* 결제상신에 들어갈 주소	*/
                  , A.DEAL_SDATE                    AS DEAL_SDATE                                                      /* 거래_시작일              */
                  , A.DEAL_EDATE                    AS DEAL_EDATE                                                      /* 거래_종료일              */
                  , A.ACCD_DAYS                     AS ACCD_DAYS                                                       /* 사고 날짜                */
                  , A.SYS_GB                        AS SYS_GB                                                          /* 시스템_구분              */
                  , D.SEQ                           AS ACCD_AR_SEQ                                                     /* 사고_채권_순번           */
                  , NVL(D.ACCD_AR_NUM, A.SEQ)       AS ACCD_AR_NUM                                                     /* 사고_채권_번호           */
                  , D.INITIAL_OCCUR_DATE            AS INITIAL_OCCUR_DATE                                              /* 최초_발생일              */
              --    , NVL(D.INITIAL_OCCUR_AMT, 0)     AS INITIAL_OCCUR_AMT                                               /* 최초_발생액              */
                  , D.WITHDRAW_POSS_DATE            AS WITHDRAW_POSS_DATE                                              /* 회수_가능일              */
               --   , NVL(D.WITHDRAW_POSS_AMT, 0)     AS WITHDRAW_POSS_AMT                                               /* 회수_가능액              */
                  , D.WITHDRAW_UNBL_DATE            AS WITHDRAW_UNBL_DATE                                              /* 회수_불능일              */
               --   , NVL(D.WITHDRAW_UNBL_AMT, 0)     AS WITHDRAW_UNBL_AMT                                               /* 회수_불능액              */
                  , D.WITHDRAW_POSSAMT_DETAIL_DESC  AS WITHDRAW_POSSAMT_DETAIL_DESC                                    /* 회수 가능금액 상세 내역  */
                  , NVL(D.BASIS_YYMM, TO_CHAR(SYSDATE, 'YYYYMM'))                AS BASIS_YYMM                         /* 기준 년월                */
                  , D.ACCD_OCCUR_REASON             AS ACCD_OCCUR_REASON                                               /* 사고 발생 사유           */
                  , D.WEAL_SURVEY_DESC              AS WEAL_SURVEY_DESC                                                /* 재산 조사 내역           */
                  , D.WITHDRAW_CTSR                 AS WITHDRAW_CTSR                                                   /* 회수 대책                */
                  , D.DEMAND_FACT                   AS DEMAND_FACT                                                     /* 요구 사항                */
                  , D.FILE_ID                       AS FILE_ID                                                         /* 파일_ID                  */
                  , DECODE(D.ACCD_AR_NUM, NULL, 'Y', 'N')                        AS ACCD_AR_REG_YN                     /* 사고채권등록여부         */
                  , D.SIGN_INSTANCE_ID              AS SIGN_INSTANCE_ID                                                /* 결재 INSTANCE_ID         */
                  , SCC_SIGN_STATUS_FUN(D.SIGN_INSTANCE_ID)                      AS SIGN_PROGRESS_STATUS               /* 결재진행상태 공통코드    */
                  , A.ACCD_AMT AS INITIAL_OCCUR_AMT
                  , A.WITHDRAW_AMT AS WITHDRAW_POSS_AMT
                  , A.AR_BAL_AMT AS WITHDRAW_UNBL_AMT
              FROM  SAA_ACCD_CUST_MASTER A
                  , FMS_UPJANG           B
                  , ST_CUST              C
                  , SAA_ACCD_AR          D
             WHERE  A.CUST_CD           = B.UPJANG(+)
               AND  A.CUST_CD           = C.CUSTCD(+)
               AND  A.CUST_CD           = D.CUST_CD(+)
               AND  A.SEQ               = D.ACCD_AR_NUM(+)
               AND  A.USE_YN            = 'Y'
             <#if muCd?has_content>
               AND  A.BIZ_CLASS         = :muCd
             </#if>
             <#if tmCd?has_content>
               AND  A.TEAM_CD           = :tmCd
             </#if>
             <#if custCd?has_content>
               AND  A.CUST_CD           = :custCd
             </#if>
             <#if upjangCd?has_content>
               AND  A.UPJANG_CD           = :upjangCd
             </#if>
             <#if empNo?has_content>
               AND  A.SALES_SABUN       = :empNo
             </#if>
             <#if accdArNum?has_content>
               AND  A.SEQ               = :accdArNum
             </#if>
             <#if accdArSeq?has_content>
               AND  D.SEQ               = :accdArSeq
             </#if>
          ORDER BY  A.BIZ_CLASS, A.CUST_CD, D.ACCD_AR_NUM
        ]]>
    </statement>

    <!-- 업장정보를 조회한다. -->
    <statement name="selectUpjang" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectUpjang */
    <![CDATA[
            SELECT  UPJANG                          AS UPJANG_CD             /* 업장_코드              */
                  , UPJANGNM_DISP                   AS UPJANG_NM             /* 업장_명                */
                  , SAUPNO                          AS BIZ_NO                /* 사업자등록번호         */
                  , DRNAME2                         AS CEO_NM                /* 대표자_명              */
                  , ADDR_KEY                            AS ADDR                  /* 주소                   */
                  , SCC_ADDR_FUN(ADDR_KEY, :loginPersMask, :maskAuth) AS ADDR_INFO  /* 주소_암호화     */
                  , ADDR_KEY 															/* ADDR_KEY		*/
              FROM  FMS_UPJANG
             WHERE  UPJANG      = :upjang
        ]]>
    </statement>
    
    <!-- 거래처 채권 금액을 조회한다(급식). -->
    <statement name="selectCustInfo" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectCustInfo */
    <![CDATA[
           SELECT XX.MU_CD, XX.TM_CD, XX.UPJANG, XX.CUSTCD, xx.CUSTNM, SUM(MI_BOND_AMT+DO_BOND_AMT+AK_BOND_AMT) TOT_AMT
  FROM (
            SELECT 'A' SAUP_TYPE,
                   V.MU_CD,
                   (SELECT MU_NM FROM HLDC_SC_MU WHERE MU_CD = V.MU_CD AND USE_YN = 'Y') MU_NM,
                   V.TM_CD,
                   (SELECT TM_NM FROM HLDC_SC_TM WHERE TM_CD = V.TM_CD AND USE_YN = 'Y') TM_NM,
                   V.UPJANG,
                   (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM,
                   V.CUSTCD,
                   (SELECT CUSTNM FROM HLDC_ST_CUST WHERE CUSTCD = V.CUSTCD) CUSTNM,
                   (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'MA0015' AND CODE = (SELECT PAY_GUBUN_CD FROM SCO_UPJANG_CUST WHERE UPJANG = V.UPJANG AND CUSTCD = V.CUSTCD))||
                   (SELECT PAY_DATE FROM SCO_UPJANG_CUST WHERE UPJANG = V.UPJANG AND CUSTCD = V.CUSTCD)||'일' PAY_GUBUN_CDNM,
                   SUM(V.CURR_TRX_AMT)                                         CURR_TRX_AMT,
                   SUM(v.CURR_RCP_AMT)                                         CURR_RCP_AMT,
                   SUM(DECODE(V.DUE_GUBUN, '미도래채권', V.AMT - V.RCP_AMT, 0))             MI_BOND_AMT,
                   SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - V.RCP_AMT, 0))             DO_BOND_AMT,
                   SUM(DECODE(V.DUE_GUBUN, '악성채권',   V.AMT - V.RCP_AMT, 0))             AK_BOND_AMT,
                   SUM(DECODE(V.DUE_GUBUN, '미수금',     V.AMT - V.RCP_AMT, 0))             MISU_BOND_AMT,
                   SUM(DECODE(V.DUE_GUBUN, '미수금(신용카드)',     V.AMT - V.RCP_AMT, 0))   MISUCARD_BOND_AMT,
                   V.TM_CD||'-'||V.UPJANG||'-'||V.CUSTCD PL_CD,
                   SUM(V.RCP_AMT) RCP_AMT,
                   '1' PL_UP_CD,
                   '0' BL_SHOW,
                   3 LEVEL_NO,
                   '+' BL_PLUS
              FROM (
            
                     SELECT C.MU_CD, C.TM_CD,
                           V.UPJANG_CD UPJANG,
                           V.CUST_CD CUSTCD,
                           NVL(V.AR_AMT, 0) AMT,
                           V.OCCUR_DATE BOND_DATE,
                           (CASE WHEN :dealEdate >  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                                 ) THEN
                                      '악성채권'
                                 WHEN :dealEdate <=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                                 ) AND
                                      :dealEdate > DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                                 ) THEN
                                      '도래채권'
                                 WHEN :dealEdate <=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                                 ) THEN
                                      '미도래채권' END) DUE_GUBUN,
                           NVL(D.RECEIVE_AMT, 0) RCP_AMT,
                           (CASE WHEN D.OCCUR_DATE   BETWEEN SUBSTR(:dealEdate  , 1, 6)||'01' AND SUBSTR(:dealEdate  , 1, 6)||'31' THEN
                                            D.AR_AMT --(V.BILL_AMOUNT + V.BILL_VAT)
                                       ELSE
                                            0
                                  END) CURR_TRX_AMT,
                           (CASE WHEN D.OCCUR_DATE   BETWEEN SUBSTR(:dealEdate  , 1, 6)||'01' AND SUBSTR(:dealEdate  , 1, 6)||'31' THEN
                                            D.RECEIVE_AMT --(V.BILL_AMOUNT + V.BILL_VAT)
                                       ELSE
                                            0
                                  END) CURR_RCP_AMT                      
                      FROM SLA_AR_MST V,
                           SLA_AR_RECEIVE_DETAIL D,
                           SCO_UPJANG_CUST  B,
                           SCO_UPJANG_MST_V C
                    WHERE  V.AR_NUM = D.AR_NUM 
                    AND   (V.UPJANG_CD     = B.UPJANG)
                    AND   (V.CUST_CD     = B.CUSTCD)
                    AND   (V.UPJANG_CD     = C.UPJANG)
                    AND   (V.OCCUR_DATE   BETWEEN '19000101' AND :dealEdate)
            		         <#if muCd?has_content>
            		       		  AND   (C.MU_CD      = :muCd)
                            </#if>
                            <#if tmCd?has_content>     
                                 AND   (C.TM_CD      = :tmCd)
                            </#if>     
                            <#if upjangCd?has_content>
                                 AND   (C.UPJANG     = :upjangCd)
                            </#if>
                             UNION ALL
            		SELECT C.MU_CD,C.TM_CD 
            		 , A.UPJANG_CD UPJANG
            		 , A.CUST_CD CUSTCD
            		 , B.AR_AMT AMT
            		 , A.OCCUR_DATE BOND_DATE
            		 , DECODE(a.ACCT_CD,'11202010','미수금','11204014','미수금(신용카드)') DUE_GUBUN
            		 , B.RECEIVE_AMT RCP_AMT
            		 , 0 CURR_TRX_AMT
                     , 0 CURR_RCP_AMT
            		 FROM SLA_AR_MST A
            		,SLA_AR_RECEIVE_DETAIL B
            		,SCO_UPJANG_CUST  B
            		,SCO_UPJANG_MST_V C
            		WHERE A.AR_NUM = B.AR_NUM
            		AND  A.UPJANG_CD     = B.UPJANG
            		AND  A.CUST_CD     = B.CUSTCD
            		AND  A.UPJANG_CD     = C.UPJANG
                    AND A.ACCT_CD IN ('11202010' , '11204014')
                    	<#if muCd?has_content>
            		         AND   (C.MU_CD      = :muCd)
                        </#if>
                        <#if tmCd?has_content>     
                             AND   (C.TM_CD      = :tmCd)
                        </#if>     
                        <#if upjangCd?has_content>
                             AND   (C.UPJANG     = :upjangCd)
                        </#if>     
                            ) V
            GROUP BY V.MU_CD,
                     V.TM_CD,
                     V.UPJANG,
                     V.CUSTCD
      ) xx
    <#if custCd?has_content>  
 	WHERE XX.CUSTCD = :custCd
    </#if>
  GROUP BY XX.MU_CD, XX.TM_CD, XX.UPJANG, XX.CUSTCD, xx.CUSTNM
  HAVING SUM(XX.MI_BOND_AMT+XX.DO_BOND_AMT+XX.AK_BOND_AMT) <> 0
   
            
        ]]>
    </statement>
    
    <!-- 거래처 채권 금액을 조회한다(식재). -->
    <statement name="selectCustInfoFms" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectCustInfoFms */
    <![CDATA[
           SELECT  A.MAIN_UPJANG, A.MAIN_UPJANGNM, A.UPJANG, A.UPJANGNM,  SUM(A.MI_BOND_AMT+A.DO_BOND_AMT+A.BU_BOND_AMT+A.AK_BOND_AMT) TOT_AMT FROM
(
SELECT /*+ LEADING(B V V1) USE_HASH(V) USE_HASH(V1) */ 
       'B' SAUP_TYPE,
       B.MAIN_UPJANG,
       (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = B.MAIN_UPJANG) MAIN_UPJANGNM,
       V.UPJANG,
       (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM,
       0 CUSTCD,
       '' CUSTNM,       
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'MA0015' AND CODE = (SELECT PAY_GUBUN_CD FROM SCO_UPJANG_CUST WHERE UPJANG = V.UPJANG AND CUSTCD = V.CUSTCD))||
       (SELECT PAY_DATE FROM SCO_UPJANG_CUST WHERE UPJANG = V.UPJANG AND CUSTCD = V.CUSTCD)||'일' PAY_GUBUN_CDNM,
       SUM(V.CURR_MACHUL)                                         CURR_TRX_AMT,
       NVL(MAX(V2.AMOUNT),0) CURR_RCP_AMT,
       SUM(DECODE(V.DUE_GUBUN, '미도래채권', V.AMT - V.RCP_AMT, 0))             MI_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - V.RCP_AMT, 0))             DO_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '부실채권',   V.AMT - V.RCP_AMT, 0))             BU_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '악성채권',   V.AMT - V.RCP_AMT, 0))             AK_BOND_AMT,
       B.MAIN_UPJANG||'-'||V.UPJANG||'-'||V.CUSTCD PL_CD,
       '1' PL_UP_CD,
       '1' BL_SHOW,
       3 LEVEL_NO,
       '+' BL_PLUS
FROM (
      SELECT UPJANG,
             SUM(AMT) AMT,
             BOND_DATE,
             DUE_GUBUN,
             SUM(RCP_AMT) RCP_AMT,
             CUSTCD,
             SUM(CURR_MACHUL) CURR_MACHUL
        FROM (
              SELECT /*+ USE_HASH(V1) */ 
                     B.UPJANG UPJANG,
                     V.AR_AMT AMT,
                     V.OCCUR_DATE                  BOND_DATE,
                     (CASE WHEN :dealEdate >  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),3),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+3), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+3), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) THEN
                                '악성채권'
                           WHEN  :dealEdate >  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) AND
                                 :dealEdate <=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),3),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+3), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+3), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) THEN
                                '부실채권'
                           WHEN :dealEdate  <=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) AND
                                 :dealEdate > DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) THEN
                                '도래채권'
                           WHEN  :dealEdate <=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')||
                                           LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                           ) THEN
                                '미도래채권' END) DUE_GUBUN,
                     NVL((SELECT NVL(SUM(RECEIVE_AMT),0) FROM SLA_AR_RECEIVE_DETAIL WHERE AR_NUM = V.AR_NUM AND RECD_STATUS = 'L' AND SYS_CLASS = '13'),0) RCP_AMT,
                     C.CUSTCD,
                     CASE WHEN V.OCCUR_DATE   BETWEEN SUBSTR(:dealEdate  , 1, 6)||'01' AND SUBSTR(:dealEdate  , 1, 6)||'31' THEN
                               V.AR_AMT
                                ELSE 0 END CURR_MACHUL
                FROM SLA_AR_MST V,
                     FMS_UPJANG B,
                     SCO_UPJANG_CUST C
              WHERE  V.RECD_STATUS  = 'L'
		      AND    V.SYS_CLASS in ('13','14')
              AND    (V.UPJANG_CD                                            = B.UPJANG)
              AND    (B.UPJANG                                               = C.UPJANG)
              AND    (V.OCCUR_DATE  BETWEEN '19000101' AND :dealEdate)
              		<#if tmCd?has_content>
                                AND    (EXISTS (SELECT 'X' FROM SCO_UPJANG_MST_V WHERE SCO_UPJANG_MST_V.UPJANG = B.UPJANG AND SCO_UPJANG_MST_V.TM_CD = :tmCd))
            				    AND C.CUSTCD IN (
			                    SELECT /*+ UNNEST HASH_SJ */ MIN(CUSTCD) CUSTCD
			                    FROM SCO_UPJANG_CUST V
			                    WHERE C.UPJANG = V.UPJANG  )
			         </#if>           
              		<#if mainUpjangNm?has_content>
                             AND    (EXISTS (SELECT 'X' FROM FMS_UPJANG WHERE UPJANG = B.MAIN_UPJANG AND MAIN_UPJANG = UPJANG AND MAIN_UPJANG || UPJANGNM_DISP LIKE '%' || :mainUpjangNm || '%' ))
                    </#if>         
              		<#if upjangNm?has_content>
                             AND (B.UPJANGNM_DISP LIKE '%' || :upjangNm || '%' )
                    </#if>         
                             
              ) 
              GROUP BY UPJANG,BOND_DATE,DUE_GUBUN,CUSTCD              
       ) V,
        FMS_UPJANG B,
       ( SELECT /*+ NO_MERGE */ DECODE(A.HEAD_CREDIT_YN, 'Y', A.MAIN_UPJANG, A.UPJANG) UPJANG, SUM(D.RECEIVE_AMT) AMOUNT
          FROM FMS_UPJANG A,
               SLA_AR_RECEIVE_DETAIL D,
               SLA_AR_MST M  
         WHERE A.UPJANG = M.UPJANG_CD
           AND M.RECD_STATUS  = 'L'
		   AND M.SYS_CLASS in ('13','14') 
           AND M.AR_NUM = D.AR_NUM
           AND D.RECEIVE_DATE BETWEEN SUBSTR(:dealEdate  , 1, 6)||'01' AND SUBSTR( :dealEdate , 1, 6)||'31'
         GROUP BY DECODE(A.HEAD_CREDIT_YN, 'Y', A.MAIN_UPJANG, A.UPJANG) 
       ) V2
WHERE (V.UPJANG = B.UPJANG)
AND V2.UPJANG(+) = V.UPJANG
--AND V.UPJANG = '107207'
GROUP BY B.MAIN_UPJANG, V.UPJANG, V.CUSTCD) A
 WHERE A.CURR_TRX_AMT != 0
    OR A.CURR_RCP_AMT != 0
    OR A.MI_BOND_AMT != 0
    OR A.DO_BOND_AMT != 0
    OR A.BU_BOND_AMT != 0
    OR A.AK_BOND_AMT != 0
GROUP BY A.MAIN_UPJANG, A.MAIN_UPJANGNM, A.UPJANG, A.UPJANGNM
HAVING SUM(A.MI_BOND_AMT+A.DO_BOND_AMT+A.BU_BOND_AMT+A.AK_BOND_AMT) <> 0
            
        ]]>
    </statement>

    <!-- 식재 업장정보를 조회한다. -->
    <statement name="selectSaupNoList" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectUpjang */
    <![CDATA[
            SELECT B.SAUPNO
				  ,B.DRNAME1
			      ,B.ADDR_KEY
			      ,B.CUSTCD
                  ,B.CUSTNM
			FROM ST_UPJANG A INNER JOIN ST_CUST B ON A.CUSTCD = B.CUSTCD
			WHERE UPJANG = :upjang
        ]]>
    </statement>

    <!-- 채무자 목록을 조회한다. -->
    <statement name="selectDebt" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectDebt */
    <![CDATA[
            SELECT  CUST_CD         AS CUST_CD              /* 거래처_코드       */
                  , ACCD_AR_NUM     AS ACCD_AR_NUM          /* 사고_채권_번호    */
                  , SEQ             AS SEQ                  /* 순번              */
                  , DEBTOR_TYPE     AS DEBTOR_TYPE          /* 채무자_유형       */
                  , NAME            AS NAME                 /* 성명              */
                  , RELATION        AS RELATION             /* 관계              */
                  , ADDR_KEY        AS ADDR_KEY             /* 주소              */
                  , SCC_ADDR_FUN(ADDR_KEY, :loginPersMask, :maskAuth) AS ADDR_INFO             
              FROM  SAA_ACCD_AR_DEBTOR
             WHERE  CUST_CD      = :custCd
               AND  ACCD_AR_NUM  = :accdArNum
        ]]>
    </statement>

    <!-- 담보 목록을 조회한다. -->
    <statement name="selectDambo" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectDambo */
    <![CDATA[
       SELECT A.GUBUN, A.SECURE_AMT, A.SETUP_DATE, A.EXPIRE_DATE, A.CANCEL_DATE, '' REMARK
				 FROM (	
				SELECT A.UPJANG
				     , D.UPJANGNM AS UPJANG_NM
				     , '단체급식' AS BIZ_GUBUN
				     , D.DRNAME AS DRNAME1
				     , D.POST_NO
				     , D.ADDR
				     , D.ADDR_GUBUN AS ADDR_GUBUN
				     , E.GUBUN
				     , DECODE(E.GUBUN,'채권양도',E.SETUP_DATE,DECODE(E.SETUP_DATE, NULL, '', TO_CHAR(TO_DATE(E.SETUP_DATE,'YYYYMMDD'),'YYYY-MM-DD'))) AS SETUP_DATE
				     , DECODE(E.GUBUN,'채권양도',E.EXPIRE_DATE,DECODE(E.EXPIRE_DATE, NULL, '', TO_CHAR(TO_DATE(E.EXPIRE_DATE,'YYYYMMDD'),'YYYY-MM-DD'))) AS EXPIRE_DATE
				     , DECODE(E.GUBUN,'채권양도',E.CANCEL_DATE,DECODE(E.CANCEL_DATE, NULL, '', TO_CHAR(TO_DATE(E.CANCEL_DATE,'YYYYMMDD'),'YYYY-MM-DD'))) AS CANCEL_DATE
				     , E.SECURE_AMT
				     , H.SUM_AMT
				     , 0 AS CREDIT_AMOUNT
				     , 0 AS OVER_AMOUNT
				     , '' AS PART_SALES_NAME
				     , '' AS CS_NAME
				     , C.TM_NM
				     , '' AS MAIN_UPJANG_NM
				     , SUBSTR(D.SAUPNO,1, 10) AS SAUPNO
				     , DECODE(D.UP_TAE || D.UP_JONG, NULL, '', D.UP_TAE ||' / '|| D.UP_JONG) AS BIZ_CAT
				     , C.TM_CD
				     , CASE WHEN DECODE(A.CLOSE_DATE, NULL,TO_CHAR(SYSDATE, 'YYYYMMDD'),A.CLOSE_DATE) >= TO_CHAR(SYSDATE, 'YYYYMMDD') THEN 'Y' ELSE 'N' END AS USE_YN
				     , '' AS BGUBUN     
					 , C.MU_CD
					 , C.MU_NM
				  FROM (SELECT * FROM SCO_UPJANG_MST WHERE FICS_YN = 'N') A
				     , HLDC_SC_DEPT_V C
				     , HLDC_ST_UPJANG D
				     , (
				        SELECT A.UPJANG
				             , '부동산' AS GUBUN
				             , A.LAND_SETUP_DATE AS SETUP_DATE
				             , '' AS EXPIRE_DATE
				             , A.LAND_CANCEL_DATE AS CANCEL_DATE
				             , A.LAND_AMT AS SECURE_AMT
				          FROM FMS_SECURE_LAND A
				         UNION ALL
				        SELECT A.UPJANG
				             , '보증보험' AS GUBUN
				             , A.GUARAN_BEGIN_DATE AS SETUP_DATE
				             , A.GUARAN_EXPIRE_DATE AS EXPIRE_DATE
				             , A.GUARAN_CANCEL_DATE AS CANCEL_DATE
				             , A.GUARAN_AMT AS SECURE_AMT
				          FROM FMS_SECURE_GUARANTEE A
				         UNION ALL
				        SELECT A.UPJANG
				             , '인보증' AS GUBUN
				             , A.PERSON_SETUP_DATE AS SETUP_DATE
				             , '' AS EXPIRE_DATE
				             , A.PERSON_CANCEL_DATE AS CANCEL_DATE
				             , A.PERSON_LIMIT_AMT AS SECURE_AMT
				          FROM FMS_SECURE_PERSON A
				         UNION ALL
				        SELECT A.UPJANG
				             , '현금보증' AS GUBUN
				             , A.CASH_DEPOSIT_DATE AS SETUP_DATE
				             , '' AS EXPIRE_DATE
				             , A.CASH_CANCEL_DATE AS CANCEL_DATE
				             , A.CASH_AMT AS SECURE_AMT
				          FROM FMS_SECURE_CASH A
				         UNION ALL
				        SELECT A.UPJANG
				             , '질권' AS GUBUN
				             , A.PLEDGER_BEGIN_DATE AS SETUP_DATE
				             , A.PLEDGER_EXPIRE_DATE AS EXPIRE_DATE
				             , A.PLEDGER_CANCEL_DATE AS CANCEL_DATE
				             , A.PLEDGER_AMT AS SECURE_AMT
				          FROM FMS_SECURE_PLEDGER A
				         UNION ALL
				        SELECT A.UPJANG
				             , '채권양도' AS GUBUN
				             , A.TRAN_COPY AS SETUP_DATE
				             , A.TRAN_DESC AS EXPIRE_DATE
				             , 'N' AS CANCEL_DATE
				             , 0 AS SECURE_AMT
				          FROM FMS_SECURE_TRANSFER A            
						  UNION ALL
				        SELECT A.UPJANG
				             , '예치보증금' AS GUBUN
				             , A.GUARAN_BEGIN_DATE AS SETUP_DATE
				             , A.GUARAN_EXPIRE_DATE AS EXPIRE_DATE
				             , A.GUARAN_CANCEL_DATE AS CANCEL_DATE
				             , A.GUARAN_AMT AS SECURE_AMT
				          FROM FMS_SECURE_DEPO_GUARANTEE A
				       ) E
				     , (SELECT UPJANG, SUM(SUM_AMT) AS SUM_AMT
				          FROM (
				                SELECT UPJANG, SUM(LAND_AMT) AS SUM_AMT FROM FMS_SECURE_LAND WHERE LAND_CANCEL_YN = 'N' GROUP BY UPJANG
				                 UNION ALL
				                SELECT UPJANG, SUM(GUARAN_AMT) AS SUM_AMT FROM FMS_SECURE_GUARANTEE WHERE GUARAN_CANCEL_YN = 'N' GROUP BY UPJANG
				                 UNION ALL
				                SELECT UPJANG, SUM(PERSON_LIMIT_AMT) AS SUM_AMT FROM FMS_SECURE_PERSON WHERE PERSON_CANCEL_YN = 'N' GROUP BY UPJANG
				                 UNION ALL
				                SELECT UPJANG, SUM(CASH_AMT) AS SUM_AMT FROM FMS_SECURE_CASH WHERE CASH_CANCEL_YN = 'N' GROUP BY UPJANG
				                 UNION ALL
				                SELECT UPJANG, SUM(PLEDGER_AMT) AS SUM_AMT FROM FMS_SECURE_PLEDGER WHERE PLEDGER_CANCEL_YN = 'N' GROUP BY UPJANG
				                 UNION ALL
				                SELECT UPJANG, SUM(GUARAN_AMT) AS SUM_AMT FROM FMS_SECURE_DEPO_GUARANTEE WHERE GUARAN_CANCEL_YN = 'N' GROUP BY UPJANG
				               )
				         GROUP BY UPJANG
				       ) H
				 WHERE A.UPJANG = E.UPJANG(+)
				   AND A.UPJANG = H.UPJANG(+)
				   AND D.DEPT_ID = C.DEPT_ID
				   AND A.UPJANG = D.UPJANG
				   AND C.FS_UPJANG = 'Y'
				   ) A
				 WHERE (1=1)  
				  AND A.MU_CD = :muCd
				  AND A.UPJANG = :upjangCd
				 ORDER BY UPJANG_NM, GUBUN
        ]]>
    </statement>

    <!-- 법적조치 목록을 조회한다. -->
    <statement name="selectLegal" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectLegal */
    <![CDATA[
            SELECT  CUST_CD             AS CUST_CD            /* 거래처_코드     */
                  , ACCD_AR_NUM         AS ACCD_AR_NUM        /* 사고_채권_번호  */
                  , SEQ                 AS SEQ                /* 순번            */
                  , CLASS_NM            AS CLASS_NM           /* 구분명          */
                  , COMPETENT_COURT     AS COMPETENT_COURT    /* 관할 법원       */
                  , ACCD_NUM            AS ACCD_NUM           /* 사고 번호       */
                  , DEFENDANT_NM        AS DEFENDANT_NM       /* 피고인 명       */
                  , SUE_AMT             AS SUE_AMT            /* 소송 금액       */
                  , AGNT_NM             AS AGNT_NM            /* 대리인          */
                  , PROGRESS_FACT       AS PROGRESS_FACT      /* 진행현황        */
                  , REMARK              AS REMARK             /* 비고            */
              FROM  SAA_ACCD_AR_LEGAL_MRMT
             WHERE  CUST_CD      = :custCd
               AND  ACCD_AR_NUM  = :accdArNum
        ]]>
    </statement>

    <!-- 거래내역 헤더값을 조회한다. -->
    <statement name="selectHdrDealDesc" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectHdrDealDesc */
    <![CDATA[
         <#if hdrGubun == '1'>
            SELECT  YEAR_MON                    AS YEAR_MON
                  , YEAR || '년' || MON || '월' AS KR_YEAR_MON
         <#elseif hdrGubun == '2'>
            SELECT  WM_CONCAT('''' || YEAR_MON || '''') || ',''' || MIN(YEAR_MON) || ''''   AS YR_MON
         </#if>
              FROM  (
                     SELECT  TO_CHAR(ADD_MONTHS(TO_DATE(:basisSyymm, 'YYYYMM'), LEVEL -1), 'YYYYMM') AS YEAR_MON
                           , TO_CHAR(ADD_MONTHS(TO_DATE(:basisSyymm, 'YYYYMM'), LEVEL -1), 'YY')     AS YEAR
                           , TO_CHAR(ADD_MONTHS(TO_DATE(:basisSyymm, 'YYYYMM'), LEVEL -1), 'MM')     AS MON
                       FROM  DUAL
                 CONNECT BY  ADD_MONTHS(TO_DATE(:basisSyymm, 'YYYYMM'), LEVEL -1) <= TO_DATE(:basisEyymm, 'YYYYMM')
                   ORDER BY  YEAR_MON DESC
                    )
        ]]>
    </statement>

    <!-- 거래내역 목록을 조회한다. -->
    <statement name="selectDealDesc" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectDealDesc */
    <![CDATA[
--            --- 사고채권 발생보고 등록 >>> 거래내영 부분 (식재)

SELECT /*+ NO_MERGE(V) LEADING(V A V2) USE_HASH(V A V2) */ A.MAIN_UPJANG,
       (SELECT UPJANGNM_DISP FROM FMS_UPJANG WHERE UPJANG = A.MAIN_UPJANG) MAIN_UPJANGNM,
       
       V.UPJANG,
       (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM,
       
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_01,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), 0), 'YYYYMM'),                              V.AMT, 0))                        MACHU_AMT_01,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), 0), 'YYYYMM'),                              V.RCP_AMT1, 0))                   RCP_AMT_01,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), 0), 'YYYYMM'),                              V.AMT, 0))                      -
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), 0), 'YYYYMM'),                              V.RCP_AMT1, 0))                   GIMAL_AMT_01,
       
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_02,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_02,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_02,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM'),                              V.AMT, 0))                      -
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_02,
       
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_03,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_03,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_03,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM'),                              V.AMT, 0))                      -
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_03,
       
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_04,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_04,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_04,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM'),                              V.AMT, 0))                      -
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_04,
       
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_05,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_05,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_05,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM'),                              V.AMT, 0))                      -
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_05,
       
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -6), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_06,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_06,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_06,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -6), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM'),                              V.AMT, 0))                      -
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_06
 FROM (
            
            -- 채권
        SELECT 
			   V.UPJANG_CD UPJANG
             , V.AR_AMT AMT
             , V.OCCUR_DATE BOND_DATE
			 , 0 AS RCP_AMT1
             , ( CASE WHEN V.OCCUR_DATE BETWEEN SUBSTR(:basisyymm , 1, 6)||'01' AND SUBSTR(:basisyymm , 1, 6)||'31'
                       THEN V.AR_AMT ELSE 0 END ) CURR_MACHUL
             , 0 MI_BOND_AMT
             , 0 DO_BOND_AMT
             , 0 AK_BOND_AMT
          FROM SLA_AR_MST V INNER JOIN FMS_UPJANG B ON 1 = 1
													AND   (B.MAIN_UPJANG          = :mainUpjangCd)
													AND   (B.UPJANG          = :upjangCd)																			   
													AND V.UPJANG_CD=B.UPJANG
         WHERE V.OCCUR_DATE BETWEEN '19000101' AND :basisyymm
               AND V.SYS_CLASS IN ('13','14')
               AND V.RECD_STATUS='L'
      UNION ALL
		      	-- 입금
		        SELECT 
					   V.UPJANG_CD UPJANG
		             , 0 AS  AMT
		             , V1.RECEIVE_DATE BOND_DATE
					 , NVL(V1.RECEIVE_AMT,0) AS RCP_AMT1
		             , 0 AS CURR_MACHUL
		             , 0 MI_BOND_AMT
		             , 0 DO_BOND_AMT
		             , 0 AK_BOND_AMT
		          FROM SLA_AR_MST V INNER JOIN SLA_AR_RECEIVE_DETAIL V1 ON V1.RECEIVE_DATE BETWEEN '19000101' AND :basisyymm
																		AND V1.RECD_STATUS = 'L'	
																		AND V.AR_NUM = V1.AR_NUM
												 INNER JOIN FMS_UPJANG B ON 1 = 1
																		AND   (B.MAIN_UPJANG          = :mainUpjangCd)
																		AND   (B.UPJANG          = :upjangCd)
																		AND V.UPJANG_CD=B.UPJANG		   
		         WHERE V.SYS_CLASS IN ('13','14')
				 AND    V.RECD_STATUS='L'
      UNION ALL
      			-- 입금(선수금) : +, -  : 일자별 잔액 개념으로 변경, 2015-12-03

		SELECT 
			  X.UPJANG
			, 0 AS AMT
			, X.BOND_DATE
			, SUM(X.RCP_AMT1) - SUM(RCP_AMT2) AS RCP_AMT1
			, 0 AS CURR_MACHUL
			, 0 AS MI_BOND_AMT
			, 0 AS DO_BOND_AMT
			, 0 AS AK_BOND_AMT
		FROM
			(
				-- 선수금 발생금액 
            SELECT 
                   V.UPJANG_CD UPJANG
                 , 0 AS  AMT
                 , V.OCCUR_DATE AS  BOND_DATE
                 , NVL(V.OCCUR_AMT,0) AS RCP_AMT1
                 , 0 AS RCP_AMT2
                 , 0 AS CURR_MACHUL
                 , 0 MI_BOND_AMT
                 , 0 DO_BOND_AMT
                 , 0 AK_BOND_AMT
              FROM SLA_ADVANCE_MST V INNER JOIN FMS_UPJANG B ON 1 = 1
															AND   (B.MAIN_UPJANG          = :mainUpjangCd)
															AND   (B.UPJANG          = :upjangCd)
															AND V.UPJANG_CD = B.UPJANG
			WHERE  V.OCCUR_DATE BETWEEN '19000101' AND :basisyymm
			   AND V.SYS_CLASS IN ('13','14')
			   AND V.RECD_STATUS='L'
      UNION ALL
      	 -- 선수금 대체금액 
	            SELECT 
	                   V.UPJANG_CD UPJANG
	                 , 0 AS  AMT
	                 , V1.ALT_DATE AS  BOND_DATE
	                 , 0 AS RCP_AMT1
	                 , NVL(V1.APPLY_AMT, 0) AS RCP_AMT2
	                 , 0 AS CURR_MACHUL
	                 , 0 MI_BOND_AMT
	                 , 0 DO_BOND_AMT
	                 , 0 AK_BOND_AMT
	              FROM SLA_ADVANCE_MST V 
														INNER JOIN SLA_ADVANCE_ALT_DETAIL V1 ON 1 = 1
																								AND V1.RECD_STATUS = 'L'
																								AND V1.ALT_DATE BETWEEN '19000101' AND :basisyymm
																								AND V.ADVANCE_NUM = V1.ADVANCE_NUM
														INNER JOIN FMS_UPJANG B ON 1 = 1
																				AND   (B.MAIN_UPJANG          = :mainUpjangCd)
																				AND   (B.UPJANG          = :upjangCd)
																				AND V.UPJANG_CD = B.UPJANG
				WHERE  V.OCCUR_DATE BETWEEN '19000101' AND :basisyymm
				   AND V.SYS_CLASS IN ('13','14')
				   AND V.RECD_STATUS='L'
				
				 ) X
			GROUP BY X.UPJANG, X.BOND_DATE
      
      UNION ALL
      	SELECT TO_NUMBER(UPJANG) AS UPJANG,
               0          AMT,
               '20151231' BOND_DATE,
               0          RCP_AMT1,
               0          CURR_MACHUL,
               SUM(DECODE(V.DUE_GUBUN, '미도래채권', V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             MI_BOND_AMT,
               SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             DO_BOND_AMT,
               SUM(DECODE(V.DUE_GUBUN, '악성채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))             AK_BOND_AMT
        FROM (
              SELECT DEPT_ID,
                     PART_SALES_SABUN,
                     MAIN_UPJANG,
                     UPJANG,
                     SUM(AMT) AMT,
                     BOND_DATE,
                     DUE_GUBUN,
                     SUM(RCP_AMT1) RCP_AMT1,
                     SUM(RCP_AMT2) RCP_AMT2
              FROM ( SELECT /*+ NO_MERGE LEADING(B C V V1) USE_HASH(C) USE_HASH(V) USE_HASH(V1) */
                                 B.DEPT_ID, B.PART_SALES_SABUN, B.MAIN_UPJANG, TO_CHAR(B.UPJANG) UPJANG,
								 V.AR_AMT AMT,
								 V.OCCUR_DATE                  BOND_DATE,
                                 (CASE WHEN :basisyymm >  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMM')||
                                                       LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                       ) THEN
                                            '악성채권'
                                       WHEN :basisyymm <=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMM')||
                                                       LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                       ) AND
                                            :basisyymm > DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')||
                                                       LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                       ) THEN
                                            '도래채권'
                                       WHEN :basisyymm <=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')||
                                                       LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                       ) THEN
                                            '미도래채권' END) DUE_GUBUN,
								 (SELECT NVL(SUM(V1.RECEIVE_AMT), 0) FROM SLA_AR_RECEIVE_DETAIL V1 WHERE V1.RECD_STATUS = 'L' AND V1.RECEIVE_DATE BETWEEN '19000101' AND :basisyymm AND V1.AR_NUM = V.AR_NUM) AS RCP_AMT1,
                                 0 RCP_AMT2
                            FROM SLA_AR_MST V,
                                 FMS_UPJANG B,
								 (
									SELECT UPJANG,
										   MAX(PAY_GUBUN_CD) AS PAY_GUBUN_CD,
										   MAX(PAY_DATE) AS PAY_DATE
									FROM SCO_UPJANG_CUST
									GROUP BY UPJANG
								) C ,
								ST_UPJANG S,
								HLDC_SC_DEPT_V D
                          WHERE V.OCCUR_DATE  BETWEEN '19000101' AND :basisyymm
						  AND    (V.SYS_CLASS      IN ('13','14'))
						  AND    (V.RECD_STATUS  = 'L')
					      AND    (V.UPJANG_CD = B.UPJANG)
						  AND    (B.UPJANG       = C.UPJANG)
						  AND    (B.UPJANG       = S.UPJANG)
						  AND    (S.DEPT_ID       = D.DEPT_ID)
                      	  AND   (B.MAIN_UPJANG          = :mainUpjangCd)
                      	  AND   (B.UPJANG          = :upjangCd)
                             
                     )
                     GROUP BY DEPT_ID, PART_SALES_SABUN, MAIN_UPJANG, UPJANG,BOND_DATE,DUE_GUBUN
               ) V
        GROUP BY DEPT_ID, PART_SALES_SABUN, MAIN_UPJANG, UPJANG
        ) V,
        FMS_UPJANG A,
		ST_UPJANG S,
        ( SELECT TO_CHAR(V.UPJANG) UPJANG, SUM(V.CREDIT_EXT_DAYS) CREDIT_EXT_DAYS
            FROM FMS_CREDIT_EXT V
           WHERE :basisyymm BETWEEN V.SUPPLY_START AND V.SUPPLY_END
             AND V.APPR_YN = 'Y'
           GROUP BY V.UPJANG
        ) V2
	WHERE V.UPJANG = A.UPJANG
	AND V.UPJANG = S.UPJANG
	AND V2.UPJANG(+) = A.UPJANG
  AND A.MAIN_UPJANG = :mainUpjangCd
  AND A.UPJANG = :upjangCd
GROUP BY A.MAIN_UPJANG,
         V.UPJANG,
         A.DEPT_ID,
         A.PART_SALES_SABUN
        ]]>
    </statement>

    <!-- 거래내역 헤더값을 조회한다. -->
    <statement name="selectHdrDealDescFs" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectHdrDealDesc */
    <![CDATA[
         <#if hdrGubun == '1'>
            SELECT  YEAR_MON                    AS YEAR_MON
                  , YEAR || '년' || MON || '월' AS KR_YEAR_MON
         <#elseif hdrGubun == '2'>
            SELECT  WM_CONCAT('''' || YEAR_MON || '''') || ',''' || MIN(YEAR_MON) || ''''   AS YR_MON
         </#if>
              FROM  (
                     SELECT  TO_CHAR(ADD_MONTHS(TO_DATE(:basisSyymm, 'YYYYMM'), LEVEL -1), 'YYYYMM') AS YEAR_MON
                           , TO_CHAR(ADD_MONTHS(TO_DATE(:basisSyymm, 'YYYYMM'), LEVEL -1), 'YY')     AS YEAR
                           , TO_CHAR(ADD_MONTHS(TO_DATE(:basisSyymm, 'YYYYMM'), LEVEL -1), 'MM')     AS MON
                       FROM  DUAL
                 CONNECT BY  ADD_MONTHS(TO_DATE(:basisSyymm, 'YYYYMM'), LEVEL -1) <= TO_DATE(:basisEyymm, 'YYYYMM')
                   ORDER BY  YEAR_MON DESC
                    )
        ]]>
    </statement>

    <!-- 거래내역 목록을 조회한다. -->
    <statement name="selectDealDescFs" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectDealDescFs */
    <![CDATA[
SELECT V.TM_CD MAIN_UPJANG,
       (SELECT TM_NM FROM HLDC_SC_TM WHERE TM_CD = V.TM_CD) MAIN_UPJANGNM,
       V.UPJANG,
       (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM, 
       V.CUSTCD,
       --(SELECT CUSTNM FROM HLDC_ST_CUST WHERE CUSTCD = V.CUSTCD) CUSTNM,  /*주석 : 윤혜선 20150731*/
       (SELECT B.CUSTNM FROM SCO_UPJANG_CUST  A, 
                             HLDC_ST_CUST     B    
                       WHERE A.CUSTCD = B.CUSTCD(+) 
                         AND A.UPJANG = V.UPJANG 
                         AND A.CUSTCD = V.CUSTCD ) CUSTNM ,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_01,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), 0), 'YYYYMM'),                              V.AMT, 0))                        MACHU_AMT_01,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), 0), 'YYYYMM'),                              V.RCP_AMT1, 0))                   RCP_AMT_01,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), 0), 'YYYYMM'),                              V.AMT, 0))                      -  
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), 0), 'YYYYMM'),                              V.RCP_AMT1, 0))                   GIMAL_AMT_01,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_02,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_02,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_02,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM'),                              V.AMT, 0))                      -  
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -1), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_02,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_03,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_03,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_03,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM'),                              V.AMT, 0))                      -  
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -2), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_03,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_04,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_04,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_04,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM'),                              V.AMT, 0))                      -  
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -3), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_04,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_05,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_05,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_05,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM'),                              V.AMT, 0))                      -  
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -4), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_05,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -6), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END))   GICHO_AMT_06,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM'),                              V.AMT, 0))                       MACHU_AMT_06,
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM'),                              V.RCP_AMT1, 0))                  RCP_AMT_06,
       SUM((CASE WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -6), 'YYYYMM')  THEN V.AMT - V.RCP_AMT1 ELSE 0 END)) +
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM'),                              V.AMT, 0))                      -  
       SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6),  TO_CHAR(ADD_MONTHS(TO_DATE(:basisyymm, 'YYYYMMDD'), -5), 'YYYYMM'),                              V.RCP_AMT1, 0))                  GIMAL_AMT_06
  FROM (  	
  			--  채권 
        SELECT C.TM_CD,
               V.UPJANG_CD UPJANG,
               V.CUST_CD CUSTCD,
               NVL(V.AR_AMT, 0) AMT,
               V.OCCUR_DATE BOND_DATE,
               0 RCP_AMT1,
               0 MI_BOND_AMT,
               0 DO_BOND_AMT,
               0 AK_BOND_AMT,
               C.CHARGE_SABUN 
          FROM SLA_AR_MST V
             , SLA_AR_RECEIVE_DETAIL V1
             , SCO_UPJANG_MST_V C
        WHERE  V.UPJANG_CD     = C.UPJANG
        AND    V.AR_NUM=V1.AR_NUM
        AND    V.SYS_CLASS='11'
        AND    V.AR_TYPE_CD <> 'A03'
        AND    V.RECD_STATUS='L'        
        AND    V.OCCUR_DATE   BETWEEN '19000101' AND :basisyymm
        AND   (C.UPJANG     = :upjangCd)   
       UNION ALL
          --  선수금 
        SELECT C.TM_CD,
               V.UPJANG_CD UPJANG,
               V.CUST_CD CUSTCD,
               0 OCCUR_AMT,
               V.OCCUR_DATE BOND_DATE,
               V1.APPLY_AMT RCP_AMT1,
               0 MI_BOND_AMT,
               0 DO_BOND_AMT,
               0 AK_BOND_AMT,
               C.CHARGE_SABUN
          FROM SLA_ADVANCE_MST V
             , SLA_ADVANCE_ALT_DETAIL V1
             , SCO_UPJANG_MST_V C
        WHERE  V.ADVANCE_NUM=V1.ADVANCE_NUM
        AND V.SYS_CLASS = '11'
        AND V.RECD_STATUS = 'L'
        AND V.UPJANG_CD     = C.UPJANG
        AND V.OCCUR_DATE   BETWEEN '19000101' AND :basisyymm    
        AND (C.UPJANG     = :upjangCd)
   --     AND   ('1'     = 'Y')  --선수포함여부
        
        UNION ALL
        SELECT V.TM_CD,
               V.UPJANG,
               V.CUSTCD,
               0 AMT,
               V.BOND_DATE,
               0 RCP_AMT1,
               DECODE(V.DUE_GUBUN, '미도래채권', V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0)   MI_BOND_AMT,
               DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0)   DO_BOND_AMT,
               DECODE(V.DUE_GUBUN, '악성채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0)   AK_BOND_AMT,
               V.CHARGE_SABUN
        FROM (                     
                SELECT C.TM_CD,
                       V.UPJANG_CD UPJANG,
                       V.CUST_CD CUSTCD,
                       NVL(V.AR_AMT, 0) AMT,
                       V.OCCUR_DATE BOND_DATE,
                       (CASE WHEN :basisyymm >  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                             LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                             ) THEN
                                  '악성채권'
                             WHEN :basisyymm <=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                             LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                             ) AND
                                  :basisyymm > DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
                                             LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                             ) THEN
                                  '도래채권'
                             WHEN :basisyymm <=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
                                             LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                             ) THEN
                                  '미도래채권' END) DUE_GUBUN,
                       NVL(V1.RECEIVE_AMT, 0) RCP_AMT1,
                       0 RCP_AMT2,
                       C.CHARGE_SABUN
                  FROM SLA_AR_MST V , SLA_AR_RECEIVE_DETAIL V1,
                       SCO_UPJANG_CUST  B,
                       SCO_UPJANG_MST_V C
                WHERE (V.UPJANG_CD(+)         = B.UPJANG)
                AND    (B.UPJANG            = C.UPJANG)
                AND    (V.OCCUR_DATE(+)  BETWEEN '19000101' AND :basisyymm)
                AND    (V.AR_NUM 			= V1.AR_NUM)
                AND     V.AR_TYPE_CD <> 'A03'
                AND    (V.SYS_CLASS(+)           = '11')
                AND    (V.RECD_STATUS(+)         = 'L')
                AND    (V1.RECD_STATUS(+)        = 'L')     
                AND   (C.UPJANG     = :upjangCd)
            ) V    
       ) V
       WHERE V.CUSTCD = :custCd
GROUP BY V.TM_CD,
         V.UPJANG,
         V.CUSTCD,
         V.CHARGE_SABUN
        ]]>
    </statement>

    <!-- 순번을 조회한다. -->
    <statement name="selectAccdCustMstSeq" type="select">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.selectAccdCustMstSeq */
    <![CDATA[
            SELECT NVL(MAX(SEQ), 0) + 1 AS SEQ
              FROM SAA_ACCD_CUST_MASTER
             WHERE CUST_CD = :custCd
        ]]>
    </statement>

    <!-- 사고업장관리(을)를 등록한다. -->
    <statement name="insertAccdCustMst" type="insert">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.insertAccdCustMst */
    <![CDATA[
            INSERT INTO SAA_ACCD_CUST_MASTER (
                      CUST_CD                       /*  거래처_코드      */
                    , UPJANG_CD					/* 업장코드, 식재일경우 본사코드	*/
                    , SEQ                           /*  순번             */
                    , SYS_GB                        /*  시스템_구분      */
                    , BIZ_CLASS                     /*  사업부 코드      */
                    , TEAM_CD                       /*  팀_코드          */
                    , ACCD_DAYS                     /*  사고 날짜        */
                    , DEAL_SDATE                    /*  거래_시작일      */
                    , DEAL_EDATE                    /*  거래_종료일      */
                    , SALES_SABUN                   /*  영업_사번        */
                    , SALES_TEAM_MST_SABUN          /*  영업_팀장        */
                    , BIZ_NO                        /*  사업자등록번호   */
                    , CEO_NM                        /*  대표자 명        */
                    , ADDR_KEY                      /*  주소_암호화      */
                    , USE_YN                        /*  사용여부         */
                    , CUSER                         /*  생성자           */
                    , CDATE                         /*  생성일           */
                    , ACCD_AMT                      /*  사고 금액        */
                    , WITHDRAW_AMT                  /*  회수 금액        */
                    , AR_BAL_AMT                    /*  채권 잔액        */
            ) VALUES (
            		<#if custCd?has_content>
                      :custCd <#else> null
                    </#if>  
                    , :upjangCd
                    , :seq
                    , :sysGb
                    , :muCd
                    , :teamCd
                    , <#if accdDays?has_content> :accdDays <#else> null </#if>
                    , <#if dealSdate?has_content> :dealSdate <#else> null </#if>
                    , <#if dealEdate?has_content> :dealEdate <#else> null </#if>
                    , <#if salesSabun?has_content> :salesSabun <#else> null </#if>
                    , <#if salesTeamMstSabun?has_content> :salesTeamMstSabun <#else> null </#if>
                    , <#if bizNo?has_content> :bizNo <#else> null </#if>
                    , <#if ceoNm?has_content> :ceoNm <#else> null </#if>
                    , <#if addrKey?has_content> :addrKey <#else> null </#if>
                    , 'Y'
                    , :loginSabun
                    , SYSDATE
                    , <#if initialOccurAmt?has_content> :initialOccurAmt <#else> null </#if>
                    , <#if withdrawPossAmt?has_content> :withdrawPossAmt <#else> null </#if>
                    , <#if withdrawUnblAmt?has_content> :withdrawUnblAmt <#else> null </#if>
            )
        ]]>
    </statement>

    <!-- 사고채권(을)를 등록한다. -->
    <statement name="insertAccdAr" type="insert">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.insertAccdAr */
    <![CDATA[
            INSERT INTO SAA_ACCD_AR (
                       CUST_CD                              /*  거래처_코드               */
                     , ACCD_AR_NUM                          /*  사고_채권_번호            */
                     , SEQ                                  /*  순번                      */
                     , INITIAL_OCCUR_DATE                   /*  최초_발생일               */
                     , INITIAL_OCCUR_AMT                    /*  최초_발생액               */
                     , WITHDRAW_POSS_DATE                   /*  회수_가능일               */
                     , WITHDRAW_POSS_AMT                    /*  회수_가능액               */
                     , WITHDRAW_UNBL_DATE                   /*  회수_불능일               */
                     , WITHDRAW_UNBL_AMT                    /*  회수_불능액               */
                     , WITHDRAW_POSSAMT_DETAIL_DESC         /*  회수 가능금액 상세 내역   */
                     , BASIS_YYMM                           /*  기준 년월                 */
                     , ACCD_OCCUR_REASON                    /*  사고 발생 사유            */
                     , WEAL_SURVEY_DESC                     /*  재산 조사 내역            */
                     , WITHDRAW_CTSR                        /*  회수 대책                 */
                     , DEMAND_FACT                          /*  요구 사항                 */
                     , FILE_ID                              /*  파일_ID                   */
                     , CUSER                                /*  생성자                    */
                     , CDATE                                /*  생성일                    */
            ) VALUES (
                      :custCd
                    , :accdArNum
                    , (SELECT NVL(MAX(SEQ), 0) + 1 FROM SAA_ACCD_AR WHERE CUST_CD = :custCd AND ACCD_AR_NUM = :accdArNum)
                    , <#if initialOccurDate?has_content> :initialOccurDate <#else> null </#if>
                    , <#if initialOccurAmt?has_content> :initialOccurAmt <#else> null </#if>
                    , <#if withdrawPossDate?has_content> :withdrawPossDate <#else> null </#if>
                    , <#if withdrawPossAmt?has_content> :withdrawPossAmt <#else> null </#if>
                    , <#if withdrawUnblDate?has_content> :withdrawUnblDate <#else> null </#if>
                    , <#if withdrawUnblAmt?has_content> :withdrawUnblAmt <#else> null </#if>
                    , <#if withdrawPossamtDetailDesc?has_content> :withdrawPossamtDetailDesc <#else> null </#if>
                    , <#if basisYymm?has_content> :basisYymm <#else> null </#if>
                    , <#if accdOccurReason?has_content> :accdOccurReason <#else> null </#if>
                    , <#if wealSurveyDesc?has_content> :wealSurveyDesc <#else> null </#if>
                    , <#if withdrawCtsr?has_content> :withdrawCtsr <#else> null </#if>
                    , <#if demandFact?has_content> :demandFact <#else> null </#if>
                    , <#if fileId?has_content> :fileId <#else> null </#if>
                    , :loginSabun
                    , SYSDATE
            )
        ]]>
    </statement>

    <!-- 채무자(을)를 등록한다. -->
    <statement name="insertAccdArDebtor" type="insert">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.insertAccdArDebtor */
    <![CDATA[
            INSERT INTO SAA_ACCD_AR_DEBTOR (
                       CUST_CD                              /*  거래처_코드               */
                     , ACCD_AR_NUM                          /*  사고_채권_번호            */
                     , SEQ                                  /*  순번                      */
                     , DEBTOR_TYPE                          /*  채무자_유형               */
                     , NAME                                 /*  성명                      */
                     , RELATION                             /*  관계                      */
                     , ADDR_KEY                             /*  주소_암호화               */
                     , CUSER                                /*  생성자                    */
                     , CDATE                                /*  생성일                    */
            ) VALUES (
                      :custCd
                    , :accdArNum
                    , (SELECT NVL(MAX(SEQ), 0) + 1 FROM SAA_ACCD_AR_DEBTOR WHERE CUST_CD = :custCd AND ACCD_AR_NUM = :accdArNum)
                    , <#if debtorType?has_content> :debtorType <#else> null </#if>
                    , <#if name?has_content> :name <#else> null </#if>
                    , <#if relation?has_content> :relation <#else> null </#if>
                    , <#if addrKey?has_content> :addrKey <#else> null </#if>
                    , :loginSabun
                    , SYSDATE
            )
        ]]>
    </statement>

    <!-- 법적조치(을)를 등록한다. -->
    <statement name="insertAccdArLegalMrmt" type="insert">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.insertAccdArLegalMrmt */
    <![CDATA[
            INSERT INTO SAA_ACCD_AR_LEGAL_MRMT (
                       CUST_CD                              /*  거래처_코드               */
                     , ACCD_AR_NUM                          /*  사고_채권_번호            */
                     , SEQ                                  /*  순번                      */
                     , CLASS_NM                             /*  구분명                    */
                     , COMPETENT_COURT                      /*  관할 법원                 */
                     , ACCD_NUM                             /*  사고 번호                 */
                     , DEFENDANT_NM                         /*  피고인 명                 */
                     , SUE_AMT                              /*  소송 금액                 */
                     , AGNT_NM                              /*  대리인                    */
                     , PROGRESS_FACT                        /*  진행현황                  */
                     , REMARK                               /*  비고                      */
                     , CUSER                                /*  생성자                    */
                     , CDATE                                /*  생성일                    */
            ) VALUES (
                      :custCd
                    , :accdArNum
                    , (SELECT NVL(MAX(SEQ), 0) + 1 FROM SAA_ACCD_AR_LEGAL_MRMT WHERE CUST_CD = :custCd AND ACCD_AR_NUM = :accdArNum)
                    , <#if classNm?has_content> :classNm <#else> null </#if>
                    , <#if competentCourt?has_content> :competentCourt <#else> null </#if>
                    , <#if accdNum?has_content> :accdNum <#else> null </#if>
                    , <#if defendantNm?has_content> :defendantNm <#else> null </#if>
                    , <#if sueAmt?has_content> :sueAmt <#else> null </#if>
                    , <#if agntNm?has_content> :agntNm <#else> null </#if>
                    , <#if progressFact?has_content> :progressFact <#else> null </#if>
                    , <#if remark?has_content> :remark <#else> null </#if>
                    , :loginSabun
                    , SYSDATE
            )
        ]]>
    </statement>

    <!-- 사고업장관리(을)를 수정한다. -->
    <statement name="updateAccdCustMst" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateAccdCustMst */
    <![CDATA[
            UPDATE SAA_ACCD_CUST_MASTER
               SET BIZ_CLASS               = :muCd
                 , TEAM_CD                 = :teamCd
                 , ACCD_DAYS               = <#if accdDays?has_content> :accdDays <#else> null </#if>
                 , DEAL_SDATE              = <#if dealSdate?has_content> :dealSdate <#else> null </#if>
                 , DEAL_EDATE              = <#if dealEdate?has_content> :dealEdate <#else> null </#if>
                 , SALES_SABUN             = <#if salesSabun?has_content> :salesSabun <#else> null </#if>
                 , SALES_TEAM_MST_SABUN    = <#if salesTeamMstSabun?has_content> :salesTeamMstSabun <#else> null </#if>
                 , ACCD_AMT                = <#if initialOccurAmt?has_content> :initialOccurAmt <#else> null </#if>
                 , WITHDRAW_AMT            = <#if withdrawPossAmt?has_content> :withdrawPossAmt <#else> null </#if>
                 , AR_BAL_AMT              = <#if withdrawUnblAmt?has_content> :withdrawUnblAmt <#else> null </#if>
                 , UUSER                   = :loginSabun
                 , UDATE                   = SYSDATE
            WHERE  CUST_CD   = :custCd
              AND  SEQ       = :seq
        ]]>
    </statement>

    <!-- 사고채권(을)를 수정한다. -->
    <statement name="updateAccdAr" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateAccdAr */
    <![CDATA[
            UPDATE SAA_ACCD_AR
               SET INITIAL_OCCUR_DATE             = <#if initialOccurDate?has_content> :initialOccurDate <#else> null </#if>
                 , INITIAL_OCCUR_AMT              = <#if initialOccurAmt?has_content> :initialOccurAmt <#else> null </#if>
                 , WITHDRAW_POSS_DATE             = <#if withdrawPossDate?has_content> :withdrawPossDate <#else> null </#if>
                 , WITHDRAW_POSS_AMT              = <#if withdrawPossAmt?has_content> :withdrawPossAmt <#else> null </#if>
                 , WITHDRAW_UNBL_DATE             = <#if withdrawUnblDate?has_content> :withdrawUnblDate <#else> null </#if>
                 , WITHDRAW_UNBL_AMT              = <#if withdrawUnblAmt?has_content> :withdrawUnblAmt <#else> null </#if>
                 , WITHDRAW_POSSAMT_DETAIL_DESC   = <#if withdrawPossamtDetailDesc?has_content> :withdrawPossamtDetailDesc <#else> null </#if>
                 , BASIS_YYMM                     = <#if basisYymm?has_content> :basisYymm <#else> null </#if>
                 , ACCD_OCCUR_REASON              = <#if accdOccurReason?has_content> :accdOccurReason <#else> null </#if>
                 , WEAL_SURVEY_DESC               = <#if wealSurveyDesc?has_content> :wealSurveyDesc <#else> null </#if>
                 , WITHDRAW_CTSR                  = <#if withdrawCtsr?has_content> :withdrawCtsr <#else> null </#if>
                 , DEMAND_FACT                    = <#if demandFact?has_content> :demandFact <#else> null </#if>
                 , FILE_ID                        = <#if fileId?has_content> :fileId <#else> null </#if>
                 , UUSER                          = :loginSabun
                 , UDATE                          = SYSDATE
            WHERE  CUST_CD     = :custCd
              AND  ACCD_AR_NUM = :accdArNum
              AND  SEQ         = :accdArSeq
        ]]>
    </statement>

    <!-- 채무자(을)를 수정한다. -->
    <statement name="updateAccdArDebtor" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateAccdArDebtor */
    <![CDATA[
            UPDATE SAA_ACCD_AR_DEBTOR
               SET DEBTOR_TYPE                    = <#if debtorType?has_content> :debtorType <#else> null </#if>
                 , NAME                           = <#if name?has_content> :name <#else> null </#if>
                 , RELATION                       = <#if relation?has_content> :relation <#else> null </#if>
                 , ADDR_KEY                       = <#if addrKey?has_content> :addrKey <#else> null </#if>
                 , UUSER                          = :loginSabun
                 , UDATE                          = SYSDATE
            WHERE  CUST_CD     = :custCd
              AND  ACCD_AR_NUM = :accdArNum
              AND  SEQ         = :seq
        ]]>
    </statement>

    <!-- 법적조치(을)를 수정한다. -->
    <statement name="updateAccdarlegalMrmt" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateAccdarlegalMrmt */
    <![CDATA[
            UPDATE SAA_ACCD_AR_LEGAL_MRMT
               SET CLASS_NM                       = <#if classNm?has_content> :classNm <#else> null </#if>
                 , COMPETENT_COURT                = <#if competentCourt?has_content> :competentCourt <#else> null </#if>
                 , ACCD_NUM                       = <#if accdNum?has_content> :accdNum <#else> null </#if>
                 , DEFENDANT_NM                   = <#if defendantNm?has_content> :defendantNm <#else> null </#if>
                 , SUE_AMT                        = <#if sueAmt?has_content> :sueAmt <#else> null </#if>
                 , AGNT_NM                        = <#if agntNm?has_content> :agntNm <#else> null </#if>
                 , PROGRESS_FACT                  = <#if progressFact?has_content> :progressFact <#else> null </#if>
                 , REMARK                         = <#if remark?has_content> :remark <#else> null </#if>
                 , UUSER                          = :loginSabun
                 , UDATE                          = SYSDATE
            WHERE  CUST_CD     = :custCd
              AND  ACCD_AR_NUM = :accdArNum
              AND  SEQ         = :seq
        ]]>
    </statement>

    <!-- 부동산정보(을)를 수정한다. -->
    <statement name="updateRealEstate" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateRealEstate */
    <![CDATA[
            UPDATE SAA_CUST_DAMBO_RE_MASTER
               SET OCCUR_CHOICE_YN      = <#if occurChoiceYn?has_content> :occurChoiceYn <#else> null </#if>
                 , UUSER                = :loginSabun
                 , UDATE                = SYSDATE
            WHERE  CUST_CD   = :custCd
              AND  DAMBO_ID  = :damboId
              AND  SEQ       = :seq
        ]]>
    </statement>

    <!-- 보증보험정보(을)를 수정한다. -->
    <statement name="updateGuaranteeInsur" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateGuaranteeInsur */
    <![CDATA[
            UPDATE SAA_CUST_DAMBO_SI_MASTER
               SET OCCUR_CHOICE_YN      = <#if occurChoiceYn?has_content> :occurChoiceYn <#else> null </#if>
                 , UUSER                = :loginSabun
                 , UDATE                = SYSDATE
            WHERE  CUST_CD   = :custCd
              AND  DAMBO_ID  = :damboId
              AND  SEQ       = :seq
        ]]>
    </statement>

    <!-- 인보증정보(을)를 수정한다. -->
    <statement name="updateGuarantor" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateGuarantor */
    <![CDATA[
            UPDATE SAA_CUST_DAMBO_HS_MASTER
               SET OCCUR_CHOICE_YN      = <#if occurChoiceYn?has_content> :occurChoiceYn <#else> null </#if>
                 , UUSER                = :loginSabun
                 , UDATE                = SYSDATE
            WHERE  CUST_CD   = :custCd
              AND  DAMBO_ID  = :damboId
              AND  SEQ       = :seq
        ]]>
    </statement>

    <!-- 현금보증정보(을)를 수정한다. -->
    <statement name="updateCashGuarantee" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateCashGuarantee */
    <![CDATA[
            UPDATE SAA_CUST_DAMBO_CS_MASTER
               SET OCCUR_CHOICE_YN      = <#if occurChoiceYn?has_content> :occurChoiceYn <#else> null </#if>
                 , UUSER                = :loginSabun
                 , UDATE                = SYSDATE
            WHERE  CUST_CD   = :custCd
              AND  DAMBO_ID  = :damboId
              AND  SEQ       = :seq
        ]]>
    </statement>

    <!-- 질권정보(을)를 수정한다. -->
    <statement name="updatePledge" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updatePledge */
    <![CDATA[
            UPDATE SAA_CUST_DAMBO_RP_MASTER
               SET OCCUR_CHOICE_YN      = <#if occurChoiceYn?has_content> :occurChoiceYn <#else> null </#if>
                 , UUSER                = :loginSabun
                 , UDATE                = SYSDATE
            WHERE  CUST_CD   = :custCd
              AND  DAMBO_ID  = :damboId
              AND  SEQ       = :seq
        ]]>
    </statement>

    <!-- 채권양도정보(을)를 수정한다. -->
    <statement name="updateAccRcvAlnt" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateAccRcvAlnt */
    <![CDATA[
            UPDATE SAA_CUST_DAMBO_TC_MASTER
               SET OCCUR_CHOICE_YN      = <#if occurChoiceYn?has_content> :occurChoiceYn <#else> null </#if>
                 , UUSER                = :loginSabun
                 , UDATE                = SYSDATE
            WHERE  CUST_CD   = :custCd
              AND  DAMBO_ID  = :damboId
              AND  SEQ       = :seq
        ]]>
    </statement>

    <!-- 전자결재정보를 Update한다. -->
    <statement name="updateSign" type="update">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.updateSign */
    <![CDATA[
            UPDATE SAA_ACCD_AR
               SET SIGN_INSTANCE_ID     = :signInstanceId
                 , UUSER                = :loginSabun
                 , UDATE                = SYSDATE
            WHERE  CUST_CD     = :custCd
              AND  ACCD_AR_NUM = :accdArNum
              AND  SEQ         = :accdArSeq
        ]]>
    </statement>

    <!-- 사고업장관리(을)를 삭제한다. -->
    <statement name="deleteAccdCustMst" type="delete">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.deleteAccdCustMst */
    <![CDATA[
            UPDATE SAA_ACCD_CUST_MASTER
               SET USE_YN    = 'N'
                 , UUSER     = :loginSabun
                 , UDATE     = SYSDATE
            WHERE  CUST_CD   = :custCd
              AND  SEQ       = :seq
        ]]>
    </statement>

    <!-- 사고채권(을)를 삭제한다. -->
    <statement name="deleteAccdAr" type="delete">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.deleteAccdAr */
    <![CDATA[
            DELETE  FROM SAA_ACCD_AR
             WHERE  CUST_CD     = :custCd
               AND  ACCD_AR_NUM = :accdArNum
               AND  SEQ         = :seq
        ]]>
    </statement>

    <!-- 채무자(을)를 삭제한다. -->
    <statement name="deleteAccdArDebtor" type="delete">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.deleteAccdArDebtor */
    <![CDATA[
            DELETE  FROM SAA_ACCD_AR_DEBTOR
             WHERE  CUST_CD     = :custCd
               AND  ACCD_AR_NUM = :accdArNum
               AND  SEQ         = :seq
        ]]>
    </statement>

    <!-- 법적조치(을)를 삭제한다. -->
    <statement name="deleteAccdarlegalMrmt" type="delete">
    /*+ com.hwfs.sm.saa.dao.AccdArOccurReptDAO.deleteAccdarlegalMrmt */
    <![CDATA[
            DELETE  FROM SAA_ACCD_AR_LEGAL_MRMT
             WHERE  CUST_CD     = :custCd
               AND  ACCD_AR_NUM = :accdArNum
               AND  SEQ         = :seq
        ]]>
    </statement>

</hqml>
