<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="fs.fsl.upjangSaleRegMgntDAO">
	<desc>매출등록 HQML Query</desc>

	<!-- 매출등록 목록을 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectList */
		<![CDATA[
			        SELECT A.OCCUR_DATE
		                 ,0 SUM_ADVANCE_AMT
		                 ,0 MINUS_ADVANCE_AMT
		                 ,NULL TYPE_CD
		                 , A.SYS_CLASS
		                 , (SELECT K.SET2 
		                    FROM SCC_COMMON_CODE K 
		                    WHERE K.GROUP_CODE = 'SYS_CLASS' 
		                    AND K.CODE = A.SYS_CLASS
		                    AND K.USE_YN = 'Y') SYS_CLASS_NM
		                 , A.UPJANG_CD
		                 , (SELECT TM_CD FROM SCO_UPJANG_MST_V  WHERE UPJANG = A.UPJANG_CD) TM_CD
		                 , A.RECEIPT_NUM
		                 , A.MU_CD
		                 , A.CC_CD
		                 , A.POS_NUM
		                 , A.CUST_CD
		                 , (SELECT X.CUSTNM FROM ST_CUST X WHERE X.CUSTCD = A.CUST_CD AND USE_YN = 'Y') CUST_NM
		                 , A.TOT_PSN
		                 , NVL2(A.TOT_PSN,'true','false') TOT_PSN_YN
		                 , A.SALE_GUBUN
		                 , E.CODE_NAME AS SALE_GUBUN_NM
		                 , A.AGES_BY_PSN
		                 , A.GENDER_PSN
		                 , A.GUEST_TYPE_BY_PSN
		                 , A.BLD_TYPE
		                 , (SELECT CODE_NAME 
		                    FROM SCC_COMMON_CODE  
		                    WHERE GROUP_CODE = 'FS0023' 
		                    AND SET1 = A.BLD_TYPE 
		                    AND USE_YN = 'Y') BLD_TYPE_NM                 
		                 , A.INTERNAL_USE_CLASS
		                 , A.WON_OCCUR_DATE
		                 , A.WON_RECEIPT_NUM
		                 , TO_CHAR(A.LINK_OCCUR_DATE,'YYYYMMDD') LINK_OCCUR_DATE
		                 , A.LINK_RECEIPT_NUM
		                 , B.SEQ
		                 , B.SALS_CLASS
		                 , (SELECT X.SALS_TYPE_NM 
                            FROM SLA_SALES_SALS_TYPE X
                                ,SLA_TYPE_CD_MST Y 
                            WHERE X.TYPE_GRP_CD = Y.TYPE_GRP_CD
                            AND X.TYPE_CD = Y.TYPE_CD
                            AND X.SALS_TYPE = B.SALS_CLASS) SALS_CLASS_NM      
		                 , B.MATERIAL_CLASS
		                 , B.MATERIAL_CD
		                 , B.SAL_QUANTITY
		                 , B.UPRICE
		                 , B.NET_AMT
		                 , B.SVC_AMT
		                 , B.VAT_AMT
		                 , B.SAL_AMT
		                 , B.VAT_CLASS
		                 , (SELECT VAT_NM  CODE_NAME FROM SLA_VAT_CD_MST WHERE VAT_CD = B.VAT_CLASS)VAT_CLASS_NM
		                 , C.PAY_CD
		                 , C.PAY_CD_NM
		                 , C.EVIDENCE_6 AS PAY_CD_NM_INFO
		                 , DECODE(SUBSTR(C.PAY_CD,1,1),'P', C.EVIDENCE_1, null) AS ADVANCE_NUM
		                 , C.EVIDENCE_1
		                 , C.EVIDENCE_2
		                 , C.EVIDENCE_3
		                 , C.EVIDENCE_4
		                 , C.EVIDENCE_5
		                 , C.EVIDENCE_6
		                 , C.ENC_EVIDENCE_NUM
		                 , C.REMARK 
		                 , D.CARD_COM_CD
		                 , D.BUYCPNY_CD
		                 , D.FRNC_STOR_NUM
		           , (SELECT W.ITEM_NAME || '; '  || W.ITEM_SIZE || '; ' || W.PO_UOM 
		                FROM HLDC_PO_ITEM_MST W 
		               WHERE W.ITEM_CODE = B.MATERIAL_CD) AS MATERIAL_NM 
		           , (SELECT SUBINV_NAME FROM HLDC_PO_SUBINVENTORY WHERE UPJANG= A.UPJANG_CD AND SUBINV_CODE = A.POS_NUM) POS_NM   
                   , (SELECT OUTVAT_FLAG FROM HLDC_PO_SUBINVENTORY WHERE UPJANG= A.UPJANG_CD AND SUBINV_CODE = A.POS_NUM) POS_OUTVAT_FLAG 
                   , NULL TMP_SEQ
              --     , (SELECT DISTINCT X.UPJANG_SALS_NUM 
              --             FROM SLA_TAX_SHET_OCCUR_OBJ X 
              --            WHERE X.UPJANG_SALS_NUM = B.UPJANG_SALS_NUM
              --             AND X.RECD_STATUS = 'L') AS UPJANG_SALS_NUM /*업장매출번호*/
              	   , B.UPJANG_SALS_NUM
                   , B.TAX_SHET_PUBLISH_YN /* 세금계산서 발행 여부 */
                   , B.TAX_SHET_YN /*세금계산서 발행할수 있는지 여부*/
                   , DECODE(SUBSTR(C.PAY_CD,1,1),'P', 'Y', 'N') AS ADVANCE_YN
                    , CASE C.PAY_CD WHEN '2' THEN (SELECT M.AR_NUM
                                                    FROM SLA_AR_MST M, 
                                                         SLA_CARD_APPRV_INFO C, 
                                                         SLA_AR_RECEIVE_DETAIL D
                                                    WHERE M.AR_NUM = C.AR_NUM
                                                        AND M.AR_NUM = D.AR_NUM
                                                        AND M.RECD_STATUS='L'
                                                        AND D.RECD_STATUS='L'
                                                        AND M.OCCUR_DATE = A.OCCUR_DATE
                                                        AND M.SYS_CLASS = A.SYS_CLASS
                                                        AND M.UPJANG_CD = A.UPJANG_CD
                                                        AND C.RECEIPT_NUM = A.RECEIPT_NUM
                                                        AND ROWNUM = 1 )
                                   WHEN '7' THEN (SELECT M.AR_NUM
                                                    FROM SLA_AR_MST M, 
                                                     SLA_AR_RECEIVE_DETAIL D
                                                    WHERE M.AR_NUM = D.AR_NUM
                                                    AND M.RECD_STATUS='L'
                                                    AND D.RECD_STATUS='L'
                                                    AND M.OCCUR_DATE = A.OCCUR_DATE
                                                    AND M.SYS_CLASS = A.SYS_CLASS
                                                    AND M.UPJANG_CD = A.UPJANG_CD
                                                    AND M.RECEIPT_NUM = A.RECEIPT_NUM
                                                    AND ROWNUM = 1)
                    END AR_NUM
                   , CASE C.PAY_CD WHEN '2' THEN NVL2((SELECT M.AR_NUM
                                                        FROM SLA_AR_MST M, 
                                                             SLA_CARD_APPRV_INFO C, 
                                                             SLA_AR_RECEIVE_DETAIL D
                                                        WHERE M.AR_NUM = C.AR_NUM
                                                            AND M.AR_NUM = D.AR_NUM
                                                            AND M.RECD_STATUS='L'
                                                            AND D.RECD_STATUS='L'
                                                            AND M.OCCUR_DATE = A.OCCUR_DATE
                                                            AND M.SYS_CLASS = A.SYS_CLASS
                                                            AND M.UPJANG_CD = A.UPJANG_CD
                                                            AND C.RECEIPT_NUM = A.RECEIPT_NUM
                                                            AND ROWNUM = 1 ),'Y','N')
                                   WHEN '7' THEN NVL2((SELECT M.AR_NUM
                                                        FROM SLA_AR_MST M, 
                                                         SLA_AR_RECEIVE_DETAIL D
                                                        WHERE M.AR_NUM = D.AR_NUM
                                                        AND M.RECD_STATUS='L'
                                                        AND D.RECD_STATUS='L'
                                                        AND M.OCCUR_DATE = A.OCCUR_DATE
                                                        AND M.SYS_CLASS = A.SYS_CLASS
                                                        AND M.UPJANG_CD = A.UPJANG_CD
                                                        AND M.RECEIPT_NUM = A.RECEIPT_NUM
                                                        AND ROWNUM = 1),'Y','N')
                                   ELSE 'N'
                    END AR_YN
                   , NVL2((SELECT DISTINCT X.UPJANG_SALS_NUM 
                           FROM SLA_TAX_SHET_OCCUR_OBJ X 
                          WHERE X.UPJANG_SALS_NUM = B.UPJANG_SALS_NUM AND X.RECD_STATUS='L'),'Y','N') PUBLISH_YN
                   , A.DDDD_CLOSE_YN  /* 일일마감여부 */
                   , NVL(DECODE(B.JOURNALZ_YN,'N','N','Y'),'N') JOURNALZ_YN
                   , B.JOURNALZ_NUM
                   , C.DENOM_AMT
                   , C.EXCH_AMT
                   , A.MODIFY_SALS_YN
                FROM SLA_IF_UPJANG_SALS_MST A 
                   , SLA_IF_UPJANG_SALS_DETAIL B 
                   , SLA_IF_UPJANG_PAYMENT C
                   , SLA_IF_CARD_APPRV_INFO D
                   , SCC_COMMON_CODE E
		      WHERE A.RECD_STATUS = 'L'
			    AND B.RECD_STATUS = 'L'
                AND C.RECD_STATUS = 'L'
			    AND A.OCCUR_DATE = B.OCCUR_DATE
			    AND A.SYS_CLASS = B.SYS_CLASS
		        AND A.UPJANG_CD = B.UPJANG_CD
		        AND A.SALE_GUBUN = E.CODE(+)
		        AND E.GROUP_CODE(+) = 'FS0046'
			    AND A.RECEIPT_NUM = B.RECEIPT_NUM
			    AND A.OCCUR_DATE = C.OCCUR_DATE
			    AND A.SYS_CLASS = C.SYS_CLASS
		        AND A.UPJANG_CD = C.UPJANG_CD
			    AND A.RECEIPT_NUM = C.RECEIPT_NUM
			    AND B.SEQ = C.SEQ  --선수금 수 
			    AND C.OCCUR_DATE = D.OCCUR_DATE(+)
			    AND C.SYS_CLASS = D.SYS_CLASS(+)
		        AND C.UPJANG_CD = D.UPJANG_CD(+)
		    	AND C.RECEIPT_NUM = D.RECEIPT_NUM(+)
		        AND C.SEQ = D.SEQ(+)
		        AND A.OCCUR_DATE = :occurDate
		        AND A.SYS_CLASS = :sysClass /*단체급식 11, 컨세션 12 (하단 그리드는 sysClass가 다른 것)*/
		        AND A.UPJANG_CD = :upjangCd
		        <#if posNum != ""> AND A.POS_NUM = :posNum AND A.SYS_CLASS = :sysClass</#if>
		     -- ORDER BY B.SALS_CLASS, A.POS_NUM, A.CUST_CD, C.PAY_CD
		     ORDER BY A.UDATE DESC
		]]>
	</statement>
	
	
	
	<!-- 취식율 목록을 조회한다. -->
	<statement name="selectSgList" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectSgList */
		<![CDATA[
	
            select 
                B.OCCUR_DATE, 
                CASE    
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '1' THEN '일'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '2' THEN '월'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '3' THEN '화'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '4' THEN '수'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '5' THEN '목'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '6' THEN '금'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '7' THEN '토'
                 END WEEK_KOR,
                 TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') AS WEEK_CD,
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'1',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P01, --조식 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'2',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P02, --중식 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'3',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P03, --석식 식수 
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'4',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P04, --간식 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'5',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P05, --야식 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'6',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P06, --종일식 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'1',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'2',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'3',NVL(B.SAL_QUANTITY,0),0) +
                 DECODE(A.BLD_TYPE,'4',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'5',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END)  AS P_TOT, --식음료 식수
                 --SUM(DECODE(B.SALS_CLASS,'1103',NVL(B.NET_AMT,0),0)) AS TOT_NET,
                 CASE WHEN (SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'1',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'2',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'3',NVL(B.SAL_QUANTITY,0),0) +
                 	  DECODE(A.BLD_TYPE,'4',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'5',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END)) = 0 THEN 0
                 ELSE
                      ROUND((SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'01',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'01',NVL(B.NET_AMT,0),0),0))) / (SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'1',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'2',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'3',NVL(B.SAL_QUANTITY,0),0) +
                 	  DECODE(A.BLD_TYPE,'4',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'5',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END)),0)                    
                 END  M_PRICE, --객단가
                 SUM(CASE WHEN A.SYS_CLASS = '11' THEN DECODE(A.SALE_GUBUN,'02',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS M02, --행사 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' THEN DECODE(A.SALE_GUBUN,'03',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS M03, --부가매출 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' THEN DECODE(A.SALE_GUBUN,'05',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS M04, --기타 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' THEN DECODE(A.SALE_GUBUN,'06',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS M05, --카페 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'1',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'2',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'3',NVL(B.SAL_QUANTITY,0),0) +
                 DECODE(A.BLD_TYPE,'4',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'5',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) + SUM(CASE WHEN A.SYS_CLASS = '11' THEN DECODE(A.SALE_GUBUN,'02',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) + SUM(CASE WHEN A.SYS_CLASS = '11' THEN DECODE(A.SALE_GUBUN,'03',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) +
                 SUM(CASE WHEN A.SYS_CLASS = '11' THEN DECODE(A.SALE_GUBUN,'05',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) + SUM(CASE WHEN A.SYS_CLASS = '11' THEN DECODE(A.SALE_GUBUN,'06',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS M_TOT, --총 식수
                 SUM(DECODE(A.BLD_TYPE,'1',NVL(B.SAL_QUANTITY,0),0)) + SUM(DECODE(A.BLD_TYPE,'2',NVL(B.SAL_QUANTITY,0),0)) + SUM(DECODE(A.BLD_TYPE,'3',NVL(B.SAL_QUANTITY,0),0)) +
                 SUM(DECODE(A.BLD_TYPE,'4',NVL(B.SAL_QUANTITY,0),0)) + SUM(DECODE(A.BLD_TYPE,'5',NVL(B.SAL_QUANTITY,0),0)) + SUM(DECODE(A.BLD_TYPE,'6',NVL(B.SAL_QUANTITY,0),0)) +
                 SUM(DECODE(A.SALE_GUBUN,'02',NVL(B.SAL_QUANTITY,0),0)) + SUM(DECODE(A.SALE_GUBUN,'03',NVL(B.SAL_QUANTITY,0),0)) +
                 SUM(DECODE(A.SALE_GUBUN,'05',NVL(B.SAL_QUANTITY,0),0)) AS TOT_PSN, --총 식수
                 SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'01',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'01',NVL(B.NET_AMT,0),0),0)) AS TOT_NET01, --식음료매출(FS)(식음료)
                 SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'02',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'02',NVL(B.NET_AMT,0),0),0)) AS TOT_NET02, --식음료매출(FS)(행사)
                 SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'03',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'03',NVL(B.NET_AMT,0),0),0)) AS TOT_NET03, --식음료매출(FS)(부가매출)
                 SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'04',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'04',NVL(B.NET_AMT,0),0),0)) AS TOT_NET04, --식음료매출(FS)(관리비)
                 SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'05',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'05',NVL(B.NET_AMT,0),0),0)) AS TOT_NET05, --식음료매출(FS)(기타)
                 SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'06',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'06',NVL(B.NET_AMT,0),0),0)) AS TOT_NET06, --식음료매출(FS)(카페)
                 --SUM(DECODE(B.SALS_CLASS,'2001',NVL(B.NET_AMT,0),0) + SUM(DECODE(B.SALS_CLASS,'2002',NVL(B.NET_AMT,0),0) AS TOT_NET07, --식음료매출(FS)(POS)
                 SUM((CASE WHEN A.INTERNAL_USE_CLASS = 'N' AND B.SALS_CLASS IN ('2001','2002') THEN NVL(B.NET_AMT,0) ELSE 0 END)) AS TOT_NET07, --식음료매출(FS)(POS)
                 --SUM(DECODE(B.SALS_CLASS,'1103',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',NVL(B.NET_AMT,0),0)) AS FS_NET, --식음료매출(FS)
                 SUM((CASE WHEN A.INTERNAL_USE_CLASS = 'N' AND B.SALS_CLASS IN ('1103','1603','2001','2002','1108') THEN NVL(B.NET_AMT,0) ELSE 0 END)) AS FS_NET, --식음료매출(FS)             
                 --SUM(DECODE(B.SALS_CLASS,'1101',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1110',NVL(B.NET_AMT,0),0)) AS G1_NET, --상품매출(일반)
                 SUM((CASE WHEN B.SALS_CLASS IN ('1101','1701','1110') THEN NVL(B.NET_AMT,0) ELSE 0 END)) AS G1_NET, --상품매출(일반)                 
                 SUM(DECODE(B.SALS_CLASS,'1102',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1111',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1602',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'2004',NVL(B.NET_AMT,0),0)) AS G2_NET, --상품매출(슈퍼)
                 SUM(DECODE(B.SALS_CLASS,'1105',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1112',NVL(B.NET_AMT,0),0)) AS E1_NET, --기타매출(임대)
                 --SUM(DECODE(B.SALS_CLASS,'1106',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1113',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1901',NVL(B.NET_AMT,0),0) AS E2_NET, --기타매출(기타)
                 SUM((CASE WHEN B.SALS_CLASS IN ('1106','1901','2003','1113') THEN NVL(B.NET_AMT,0) ELSE 0 END))  AS E2_NET, --기타매출(기타)
                 SUM(DECODE(B.SALS_CLASS,'1114',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1115',NVL(B.NET_AMT,0),0)) + SUM((CASE WHEN A.INTERNAL_USE_CLASS = 'Y' THEN NVL(B.NET_AMT,0) ELSE 0 END)) AS IN_NET, --내부매출(기타)
                 SUM(NVL(B.NET_AMT,0)) AS TOT_NET --총매출(NET)    
                  
                 --SUM(DECODE(B.SALS_CLASS,'1103',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',NVL(B.NET_AMT,0),0)) + 
                 --SUM(DECODE(B.SALS_CLASS,'1101',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1110',NVL(B.NET_AMT,0),0)) + 
                 --SUM(DECODE(B.SALS_CLASS,'1102',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1111',NVL(B.NET_AMT,0),0)) +
                 --SUM(DECODE(B.SALS_CLASS,'1105',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1112',NVL(B.NET_AMT,0),0)) +
                 --SUM(DECODE(B.SALS_CLASS,'1106',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1113',NVL(B.NET_AMT,0),0)) +
                 --SUM(DECODE(B.SALS_CLASS,'1114',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1115',NVL(B.NET_AMT,0),0)) AS TOT_NET2 --총매출(NET)
                                      
                FROM SLA_IF_UPJANG_SALS_MST A,
                     SLA_IF_UPJANG_SALS_DETAIL B,
                     ST_UPJANGV C,
               		 MAC_UPJANG_V F
                     
                WHERE A.UPJANG_CD = B.UPJANG_CD
                    AND A.OCCUR_DATE = B.OCCUR_DATE
                    AND A.RECEIPT_NUM = B.RECEIPT_NUM
                    AND A.UPJANG_CD = C.UPJANG
                    AND A.CC_CD = F.CC_CD
                    AND A.MU_CD = :muCd
                    --AND A.SYS_CLASS = '11'
                    <#if tmCd != "">
                       	AND (F.TM_CD LIKE '%' || :tmCd || '%' OR F.PT_CD LIKE '%' || :tmCd || '%')
                    </#if> 
                    <#if upjangCd != ""> 
                    	AND A.UPJANG_CD = :upjangCd 
                    </#if>
                    AND A.OCCUR_DATE like :month || '%'
                	
                    GROUP BY B.OCCUR_DATE
                    ORDER BY B.OCCUR_DATE
	
	
	
		]]>
	</statement>
	
	
	<!-- 주별 식수 목록을 조회한다. -->
	<statement name="selectSgListStat" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectSgListStat*/
		<![CDATA[
		
                select 
                    C.WEEK2 AS WEEK,
                    --계
                    <#if mealCd == "ma"> 
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P_TOT,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P_TOT,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P_TOT,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P_TOT,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P_TOT,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P_TOT,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P_TOT,0))) AS A7 --토
                    </#if>
                    --조식
                    <#if mealCd == "m1"> 
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P01,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P01,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P01,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P01,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P01,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P01,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P01,0))) AS A7 --토
                    </#if>
                    --중식
                    <#if mealCd == "m2"> 
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P02,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P02,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P02,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P02,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P02,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P02,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P02,0))) AS A7 --토    
                    </#if>
                    --석식
                    <#if mealCd == "m3">
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P03,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P03,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P03,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P03,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P03,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P03,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P03,0))) AS A7 --토    
                    </#if>
                   
                     --간식
                    <#if mealCd == "m5">
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P04,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P04,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P04,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P04,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P04,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P04,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P04,0))) AS A7 --토
                    </#if>
                    
                     --야식
                    <#if mealCd == "m4">
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P05,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P05,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P05,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P05,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P05,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P05,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P05,0))) AS A7 --토
                    </#if>      
                         
                   
                    FROM (
					SELECT
                     B.OCCUR_DATE, 
                CASE    
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '1' THEN '일'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '2' THEN '월'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '3' THEN '화'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '4' THEN '수'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '5' THEN '목'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '6' THEN '금'
                            WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '7' THEN '토'
                 END WEEK_KOR,
                 TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') AS WEEK_CD,
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'1',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P01, --조식 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'2',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P02, --중식 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'3',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P03, --석식 식수 
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'4',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P04, --간식 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'5',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P05, --야식 식수
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'6',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END) AS P06, --종일식 식수 
                 SUM(CASE WHEN A.SYS_CLASS = '11' AND A.SALE_GUBUN IS NOT NULL THEN DECODE(A.BLD_TYPE,'1',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'2',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'3',NVL(B.SAL_QUANTITY,0),0) +
                 DECODE(A.BLD_TYPE,'4',NVL(B.SAL_QUANTITY,0),0) + DECODE(A.BLD_TYPE,'5',NVL(B.SAL_QUANTITY,0),0) ELSE 0 END)  AS P_TOT --식음료 식수
                                  
                        FROM SLA_IF_UPJANG_SALS_MST A,
                             SLA_IF_UPJANG_SALS_DETAIL B,
               				 MAC_UPJANG_V F
                     
                        WHERE A.UPJANG_CD = B.UPJANG_CD
                            AND A.OCCUR_DATE = B.OCCUR_DATE
                            AND A.RECEIPT_NUM = B.RECEIPT_NUM
                            AND A.CC_CD = F.CC_CD
                            AND A.MU_CD = :muCd
                    		AND A.SYS_CLASS = '11'  --매출등록
                    		AND A.SALE_GUBUN IS NOT NULL --매출구분
                            <#if saleGubun != "">
                            AND A.SALE_GUBUN = :saleGubun
                            </#if> 
                            <#if mealCd == "m1">
                            	AND A.BLD_TYPE = '1'
                            </#if>
                            <#if mealCd == "m2">
                            	AND A.BLD_TYPE = '2' 
                            </#if>
                            <#if mealCd == "m3">
                            	AND A.BLD_TYPE = '3'
                            </#if>                            
                            <#if mealCd == "m4">
                            	--야식 
                            	AND A.BLD_TYPE = '5'
                            </#if>
                            <#if mealCd == "m5">
                            	--간식
                            	AND A.BLD_TYPE = '4'
                            </#if>
                            <#if mealCd == "ma">
                            	<#if saleGubun == "01"> 
                            		AND A.BLD_TYPE IN ('1','2','3','4','5')
                            	</#if>                            	
                            </#if>
                            <#if tmCd != "">
                            	AND (F.TM_CD LIKE '%' || :tmCd || '%' OR F.PT_CD LIKE '%' || :tmCd || '%')
                            </#if> 
                            <#if upjangCd != ""> 
                    			AND A.UPJANG_CD = :upjangCd 
                    		</#if>
                    		AND A.OCCUR_DATE like :month || '%'
                            GROUP BY B.OCCUR_DATE
                    ) A, 
                     --일자별 WEEK 확인
                     (select substr(a.week || c.week,2,3) as week2
                             ,to_char(d.dt-to_char(d.dt,'D')-7+(c.week)*7+a.week,'YYYYMMDD') as OCCUR_DATE
                             from (select level as week from dual connect by level <= 7) a,
                                  (select level as week from dual connect by level <= 6) c,
                                  (select to_date(:month || '01','YYYYMMDD') as dt from dual) d
                             where to_char(d.dt-to_char(d.dt,'D')-7+(c.week)*7+a.week,'YYYYMMDD') between :month || '01' and :month || '31'
                    ) C
                    WHERE 1=1
                    AND A.OCCUR_DATE = C.OCCUR_DATE
                    
                    GROUP BY WEEK2  
                    ORDER BY C.WEEK2
		]]>
	</statement>
	
	<!-- 주별 식수 목록을 조회한다.(차트용) -->
	<statement name="selectSgListStat2" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectSgListStat2*/
		<![CDATA[
		select 
			*			
			from (
  				select * 
  				from (
         		select 
                    C.WEEK2 AS WEEK,
                    --계
                    <#if mealCd == "ma"> 
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P_TOT,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P_TOT,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P_TOT,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P_TOT,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P_TOT,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P_TOT,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P_TOT,0))) AS A7 --토
                    </#if>
                    --조식
                    <#if mealCd == "m1"> 
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P01,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P01,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P01,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P01,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P01,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P01,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P01,0))) AS A7 --토
                    </#if>
                    --중식
                    <#if mealCd == "m2"> 
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P02,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P02,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P02,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P02,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P02,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P02,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P02,0))) AS A7 --토    
                    </#if>
                    --석식
                    <#if mealCd == "m3">
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P03,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P03,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P03,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P03,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P03,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P03,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P03,0))) AS A7 --토    
                    </#if>
                          
                    --야식
                    <#if mealCd == "m4">
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P05,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P05,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P05,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P05,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P05,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P05,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P05,0))) AS A7 --토
                    </#if>        
                    
                     --간식
                    <#if mealCd == "m5">
                    SUM(DECODE(A.WEEK_CD,'1',NVL(A.P04,0))) AS A1, --일
                    SUM(DECODE(A.WEEK_CD,'2',NVL(A.P04,0))) AS A2, --월
                    SUM(DECODE(A.WEEK_CD,'3',NVL(A.P04,0))) AS A3, --화
                    SUM(DECODE(A.WEEK_CD,'4',NVL(A.P04,0))) AS A4, --수
                    SUM(DECODE(A.WEEK_CD,'5',NVL(A.P04,0))) AS A5, --목
                    SUM(DECODE(A.WEEK_CD,'6',NVL(A.P04,0))) AS A6, --금
                    SUM(DECODE(A.WEEK_CD,'7',NVL(A.P04,0))) AS A7 --토
                    </#if>  
                   
                    FROM (

                    select 
                        B.OCCUR_DATE, 
                        --C.WEEK2,    
                        CASE    
                                    WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '1' THEN '일'
                                    WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '2' THEN '월'
                                    WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '3' THEN '화'
                                    WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '4' THEN '수'
                                    WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '5' THEN '목'
                                    WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '6' THEN '금'
                                    WHEN    TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') = '7' THEN '토'
                         END WEEK_KOR,
                         TO_CHAR(TO_DATE(B.OCCUR_DATE, 'YYYYMMDD') ,'d') AS WEEK_CD,
                         SUM(DECODE(A.BLD_TYPE,'1',NVL(A.TOT_PSN,0),0)) AS P01, --조식 식수
                         SUM(DECODE(A.BLD_TYPE,'2',NVL(A.TOT_PSN,0),0)) AS P02, --중식 식수
                         SUM(DECODE(A.BLD_TYPE,'3',NVL(A.TOT_PSN,0),0)) AS P03, --석식 식수 
                         SUM(DECODE(A.BLD_TYPE,'4',NVL(A.TOT_PSN,0),0)) AS P04, --간식 식수
                         SUM(DECODE(A.BLD_TYPE,'5',NVL(A.TOT_PSN,0),0)) AS P05, --야식 식수
                         SUM(DECODE(A.BLD_TYPE,'6',NVL(A.TOT_PSN,0),0)) AS P06, --종일식 식수
                         SUM(DECODE(A.BLD_TYPE,'1',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'2',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'3',NVL(A.TOT_PSN,0),0)) +
                         SUM(DECODE(A.BLD_TYPE,'4',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'5',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'6',NVL(A.TOT_PSN,0),0)) AS P_TOT, --식음료 식수
                         --SUM(DECODE(B.SALS_CLASS,'1103',NVL(B.NET_AMT,0),0)) AS TOT_NET,
                         CASE WHEN (SUM(DECODE(A.BLD_TYPE,'1',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'2',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'3',NVL(A.TOT_PSN,0),0)) +
                         SUM(DECODE(A.BLD_TYPE,'4',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'5',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'6',NVL(A.TOT_PSN,0),0))) = 0 THEN 0
                         ELSE
                            ROUND((SUM(DECODE(B.SALS_CLASS,'1103',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',NVL(B.NET_AMT,0),0))) / (SUM(DECODE(A.BLD_TYPE,'1',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'2',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'3',NVL(A.TOT_PSN,0),0)) +
                            SUM(DECODE(A.BLD_TYPE,'4',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'5',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'6',NVL(A.TOT_PSN,0),0))),0)
                         END  M_PRICE, --객단가
                         SUM(DECODE(A.SALE_GUBUN,'02',NVL(A.TOT_PSN,0),0)) AS M02, --행사 식수
                         SUM(DECODE(A.SALE_GUBUN,'03',NVL(A.TOT_PSN,0),0)) AS M03, --부가매출 식수
                         SUM(DECODE(A.SALE_GUBUN,'05',NVL(A.TOT_PSN,0),0)) AS M04, --기타 식수
                         SUM(DECODE(A.BLD_TYPE,'1',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'2',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'3',NVL(A.TOT_PSN,0),0)) +
                         SUM(DECODE(A.BLD_TYPE,'4',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'5',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.BLD_TYPE,'6',NVL(A.TOT_PSN,0),0)) +
                         SUM(DECODE(A.SALE_GUBUN,'02',NVL(A.TOT_PSN,0),0)) + SUM(DECODE(A.SALE_GUBUN,'03',NVL(A.TOT_PSN,0),0)) +
                         SUM(DECODE(A.SALE_GUBUN,'05',NVL(A.TOT_PSN,0),0)) AS TOT_PSN, --총 식수
                         SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'01',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'01',NVL(B.NET_AMT,0),0),0)) AS TOT_NET01, --식음료매출(FS)(식음료)
                         SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'02',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'02',NVL(B.NET_AMT,0),0),0)) AS TOT_NET02, --식음료매출(FS)(행사)
                         SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'03',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'03',NVL(B.NET_AMT,0),0),0)) AS TOT_NET03, --식음료매출(FS)(부가매출)
                         SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'04',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'04',NVL(B.NET_AMT,0),0),0)) AS TOT_NET04, --식음료매출(FS)(관리비)
                         SUM(DECODE(B.SALS_CLASS,'1103',DECODE(A.SALE_GUBUN,'05',NVL(B.NET_AMT,0),0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',DECODE(A.SALE_GUBUN,'05',NVL(B.NET_AMT,0),0),0)) AS TOT_NET05, --식음료매출(FS)(기타)
                         SUM(DECODE(B.SALS_CLASS,'1103',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',NVL(B.NET_AMT,0),0)) AS FS_NET, --식음료매출(FS) 
                         SUM(DECODE(B.SALS_CLASS,'1101',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1110',NVL(B.NET_AMT,0),0)) AS G1_NET, --상품매출(일반)
                         SUM(DECODE(B.SALS_CLASS,'1102',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1111',NVL(B.NET_AMT,0),0)) AS G2_NET, --상품매출(슈퍼)
                         SUM(DECODE(B.SALS_CLASS,'1105',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1112',NVL(B.NET_AMT,0),0)) AS E1_NET, --기타매출(임대)
                         SUM(DECODE(B.SALS_CLASS,'1106',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1113',NVL(B.NET_AMT,0),0)) AS E2_NET, --기타매출(기타)
                         SUM(DECODE(B.SALS_CLASS,'1114',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1115',NVL(B.NET_AMT,0),0)) AS IN_NET, --내부매출(기타)     
                         SUM(DECODE(B.SALS_CLASS,'1103',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1108',NVL(B.NET_AMT,0),0)) + 
                         SUM(DECODE(B.SALS_CLASS,'1101',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1110',NVL(B.NET_AMT,0),0)) + 
                         SUM(DECODE(B.SALS_CLASS,'1102',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1111',NVL(B.NET_AMT,0),0)) +
                         SUM(DECODE(B.SALS_CLASS,'1105',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1112',NVL(B.NET_AMT,0),0)) +
                         SUM(DECODE(B.SALS_CLASS,'1106',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1113',NVL(B.NET_AMT,0),0)) +
                         SUM(DECODE(B.SALS_CLASS,'1114',NVL(B.NET_AMT,0),0)) + SUM(DECODE(B.SALS_CLASS,'1115',NVL(B.NET_AMT,0),0)) AS TOT_NET --총매출(NET)
                              
                        
                        FROM SLA_IF_UPJANG_SALS_MST A,
                             SLA_IF_UPJANG_SALS_DETAIL B,
               				 MAC_UPJANG_V F
                     
                        WHERE A.UPJANG_CD = B.UPJANG_CD
                            AND A.OCCUR_DATE = B.OCCUR_DATE
                            AND A.RECEIPT_NUM = B.RECEIPT_NUM
                            AND A.CC_CD = F.CC_CD
                            AND A.MU_CD = :muCd
                    		AND A.SYS_CLASS = '11'
                            <#if saleGubun != "">
                            AND A.SALE_GUBUN = :saleGubun
                            </#if> 
                            <#if tmCd != "">
                            	AND (F.TM_CD LIKE '%' || :tmCd || '%' OR F.PT_CD LIKE '%' || :tmCd || '%')
                            </#if> 
                            <#if upjangCd != ""> 
                    			AND A.UPJANG_CD = :upjangCd 
                    		</#if>
                    		AND A.OCCUR_DATE like :month || '%'
                            GROUP BY B.OCCUR_DATE
                            --GROUP BY B.UPJANG_CD, B.OCCUR_DATE--, C.WEEK2
                            --ORDER BY B.UPJANG_CD, B.OCCUR_DATE
                    ) A, 
                     --일자별 WEEK 확인
                     (select substr(a.week || c.week,2,3) as week2
                             ,to_char(d.dt-to_char(d.dt,'D')-7+(c.week)*7+a.week,'YYYYMMDD') as OCCUR_DATE
                             from (select level as week from dual connect by level <= 7) a,
                                  (select level as week from dual connect by level <= 6) c,
                                  (select to_date(:month || '01','YYYYMMDD') as dt from dual) d
                             where to_char(d.dt-to_char(d.dt,'D')-7+(c.week)*7+a.week,'YYYYMMDD') between :month || '01' and :month || '31'
                    ) C
                    WHERE 1=1
                    AND A.OCCUR_DATE = C.OCCUR_DATE
                    
                    GROUP BY WEEK2  
                    ORDER BY C.WEEK2
		)
  		unpivot include nulls
  		(val for WEEK_CD in (A2,A3,A4,A5,A6,A7,A1))
  		)
	pivot (max(val) for WEEK in (1,2,3,4,5))
	order by WEEK_CD                 
		]]>
	</statement>
		
	<!-- 매출등록 목록을 조회한다. -->
	<statement name="selectListSysClass" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectListSysClass
		*/
		<![CDATA[
			     SELECT * FROM
			        (
					        SELECT A.OCCUR_DATE
				                 ,0 SUM_ADVANCE_AMT
				                 ,0 MINUS_ADVANCE_AMT
				                 ,NULL TYPE_CD
				                 , A.SYS_CLASS
				                 , (SELECT K.SET2 
				                    FROM SCC_COMMON_CODE K 
				                    WHERE K.GROUP_CODE = 'SYS_CLASS' 
				                    AND K.CODE = A.SYS_CLASS
				                    AND K.USE_YN = 'Y') SYS_CLASS_NM
				                 , A.UPJANG_CD
				                 , A.RECEIPT_NUM
				                 , A.MU_CD
				                 , A.CC_CD
				                 , A.POS_NUM
				                 , A.CUST_CD
				                 , (SELECT X.CUSTNM FROM ST_CUST X WHERE X.CUSTCD = A.CUST_CD AND USE_YN = 'Y') CUST_NM
				                 , A.TOT_PSN
				                 , A.AGES_BY_PSN
				                 , A.GENDER_PSN
				                 , A.GUEST_TYPE_BY_PSN
				                 , A.BLD_TYPE
				                 , (SELECT CODE_NAME 
				                    FROM SCC_COMMON_CODE  
				                    WHERE GROUP_CODE = 'FS0023' 
				                    AND SET1 = A.BLD_TYPE 
				                    AND USE_YN = 'Y') BLD_TYPE_NM                 
				                 , A.INTERNAL_USE_CLASS
				                 , A.WON_OCCUR_DATE
				                 , A.WON_RECEIPT_NUM
				                 , TO_CHAR(A.LINK_OCCUR_DATE,'YYYYMMDD') LINK_OCCUR_DATE
				                 , A.LINK_RECEIPT_NUM
				                 , B.SEQ
				                 , B.SALS_CLASS
				                 , (SELECT X.SALS_TYPE_NM 
		                            FROM SLA_SALES_SALS_TYPE X
		                                ,SLA_TYPE_CD_MST Y 
		                            WHERE X.TYPE_GRP_CD = Y.TYPE_GRP_CD
		                            AND X.TYPE_CD = Y.TYPE_CD
		                            AND X.SALS_TYPE = B.SALS_CLASS) SALS_CLASS_NM     
				                 , B.MATERIAL_CLASS
				                 , B.MATERIAL_CD
				                 , B.SAL_QUANTITY
				                 , B.UPRICE
				                 , B.NET_AMT
				                 , B.SVC_AMT
				                 , B.VAT_AMT
				                 , B.SAL_AMT
				                 , B.VAT_CLASS
				                 , (SELECT VAT_NM  CODE_NAME FROM SLA_VAT_CD_MST WHERE VAT_CD = B.VAT_CLASS)VAT_CLASS_NM
				                 , C.PAY_CD
				                 , C.PAY_CD_NM
				                 , C.EVIDENCE_6 AS PAY_CD_NM_INFO
				                 , DECODE(SUBSTR(C.PAY_CD,1,1),'P', C.EVIDENCE_1, null) AS ADVANCE_NUM
				                 , C.EVIDENCE_1
				                 , C.EVIDENCE_2
				                 , C.EVIDENCE_3
				                 , C.EVIDENCE_4
				                 , C.EVIDENCE_5
				                 , C.EVIDENCE_6
				                 , C.ENC_EVIDENCE_NUM
				                 , C.REMARK 
				                 , D.CARD_COM_CD
				                 , D.BUYCPNY_CD
				                 , D.FRNC_STOR_NUM
				           , (SELECT W.ITEM_NAME || '; '  || W.ITEM_SIZE || '; ' || W.PO_UOM 
				                FROM HLDC_PO_ITEM_MST W 
				               WHERE W.ITEM_CODE = B.MATERIAL_CD) AS MATERIAL_NM 
				           , (SELECT SUBINV_NAME FROM HLDC_PO_SUBINVENTORY WHERE UPJANG= A.UPJANG_CD AND SUBINV_CODE = A.POS_NUM) POS_NM
				           , CASE C.PAY_CD WHEN '2' THEN NVL2((SELECT M.AR_NUM
                                                       FROM SLA_AR_MST M, 
                                                            SLA_CARD_APPRV_INFO C, 
                                                            SLA_AR_RECEIVE_DETAIL D
                                                       WHERE M.AR_NUM = C.AR_NUM
                                                           AND M.AR_NUM = D.AR_NUM
                                                           AND M.OCCUR_DATE = A.OCCUR_DATE
                                                           AND M.UPJANG_CD = A.UPJANG_CD
                                                           AND M.SYS_CLASS = A.SYS_CLASS
                                                           AND M.RECEIPT_NUM = A.RECEIPT_NUM
                                                           AND C.RECEIPT_NUM = A.RECEIPT_NUM
                                                           AND M.RECD_STATUS='L'
                                                           AND D.RECD_STATUS='L'
                                                           AND ROWNUM = 1 ),'Y','N')
                                  WHEN '7' THEN NVL2((SELECT M.AR_NUM
                                                       FROM SLA_AR_MST M, 
                                                        SLA_AR_RECEIVE_DETAIL D
                                                       WHERE M.AR_NUM = D.AR_NUM
                                                           AND M.OCCUR_DATE = A.OCCUR_DATE
                                                           AND M.UPJANG_CD = A.UPJANG_CD
	                                                       AND M.RECEIPT_NUM = A.RECEIPT_NUM
                                                           AND M.SYS_CLASS = A.SYS_CLASS
                                                           AND C.RECEIPT_NUM = A.RECEIPT_NUM
	                                                       AND M.RECD_STATUS='L'
	                                                       AND D.RECD_STATUS='L'
	                                                       AND ROWNUM = 1),'Y','N')
                                  ELSE 'N'
                    		END AR_YN
				           , NVL((SELECT V.TAX_SHET_PUBLISH_YN 
				         		FROM MAS_TICKET_STD V 
				               WHERE V.ITEM_CODE = B.MATERIAL_CD
				                 AND V.UPJANG = B.UPJANG_CD), 'N') AS TAX_SHET_PUBLISH_YN  /* 식권선수금 선발행 여부 */
				           , NVL(B.TAX_SHET_PUBLISH_YN, 'N') AS PUBLISH_YN /* 세금계산서 발행 여부 */
				           , NVL(A.DDDD_CLOSE_YN,'N') AS DDDD_CLOSE_YN  /* 일일마감여부 */
				           , DECODE(B.JOURNALZ_YN,'J','Y','N') AS JOURNALZ_YN /* 회계마감여부 */
				           , DECODE(SUBSTR(C.PAY_CD,1,1),'P', 'Y', 'N') AS ADVANCE_YN
				      FROM SLA_IF_UPJANG_SALS_MST A 
				         , SLA_IF_UPJANG_SALS_DETAIL B 
				      	 , SLA_IF_UPJANG_PAYMENT C
				         , SLA_IF_CARD_APPRV_INFO D
				      WHERE A.RECD_STATUS = 'L'
				        AND B.RECD_STATUS = 'L'
				        AND C.RECD_STATUS = 'L'
					    AND A.OCCUR_DATE = B.OCCUR_DATE
					    AND A.SYS_CLASS = B.SYS_CLASS
				        AND A.UPJANG_CD = B.UPJANG_CD
					    AND A.RECEIPT_NUM = B.RECEIPT_NUM
					    AND A.OCCUR_DATE = C.OCCUR_DATE
					    AND A.SYS_CLASS = C.SYS_CLASS
				        AND A.UPJANG_CD = C.UPJANG_CD
					    AND A.RECEIPT_NUM = C.RECEIPT_NUM
					    AND B.SEQ = C.SEQ  --선수금 수 
					    AND C.OCCUR_DATE = D.OCCUR_DATE(+)
					    AND C.SYS_CLASS = D.SYS_CLASS(+)
				        AND C.UPJANG_CD = D.UPJANG_CD(+)
				    	AND C.RECEIPT_NUM = D.RECEIPT_NUM(+)
				        AND C.SEQ = D.SEQ(+)
				        AND A.OCCUR_DATE = :occurDate
				        AND A.UPJANG_CD = :upjangCd
				        <#if muCd == "2005"> 
				        	AND A.SYS_CLASS IN ('17','18','19')
				        </#if>
				        <#if muCd == "2003"> 
				        	AND A.SYS_CLASS IN ('17','19')
				        </#if>
				        <#if muCd == "2002"> 
				        	AND A.SYS_CLASS IN ('16','17','19')
				        </#if>
				        <#if muCd == "2004"> 
				        	AND A.SYS_CLASS NOT IN ('17','11','12','20','21','18','15','23')
				        </#if>
				        <#if muCd == "2001"> 
				        	AND A.SYS_CLASS IN ('17','22')
				        </#if>
				        --
				        <#if posNum != ""> AND A.POS_NUM = :posNum </#if>
				--      ORDER BY B.SALS_CLASS, A.POS_NUM, A.CUST_CD, C.PAY_CD
					UNION ALL
		              
		              SELECT MAX(A.OCCUR_DATE) OCCUR_DATE
		                     ,0 SUM_ADVANCE_AMT
		                     ,0 MINUS_ADVANCE_AMT
		                     ,NULL TYPE_CD
		                     , MAX(A.SYS_CLASS) SYS_CLASS
		                     , MAX((SELECT K.SET2 
		                        FROM SCC_COMMON_CODE K 
		                        WHERE K.GROUP_CODE = 'SYS_CLASS' 
		                        AND K.CODE = A.SYS_CLASS
		                        AND K.USE_YN = 'Y')) SYS_CLASS_NM
		                     , MAX(A.UPJANG_CD) UPJANG_CD
		                     , MAX(A.RECEIPT_NUM) RECEIPT_NUM
		                     , MAX(A.MU_CD) MU_CD
		                     , MAX(A.CC_CD) CC_CD
		                     , NULL POS_NUM
		                     , NULL CUST_CD
		                     , NULL CUST_NM
		                     , NULL TOT_PSN
		                     , NULL AGES_BY_PSN
		                     , NULL GENDER_PSN
		                     , NULL GUEST_TYPE_BY_PSN
		                     , NULL BLD_TYPE
		                     , NULL BLD_TYPE_NM                 
		                     , NULL INTERNAL_USE_CLASS
		                     , NULL WON_OCCUR_DATE
		                     , NULL WON_RECEIPT_NUM
		                     , NULL LINK_OCCUR_DATE
		                     , NULL LINK_RECEIPT_NUM
		                     , NULL SEQ
		                     , A.SALS_CLASS
		                     , MAX((SELECT X.SALS_TYPE_NM 
		                        FROM SLA_SALES_SALS_TYPE X
		                            ,SLA_TYPE_CD_MST Y 
		                        WHERE X.TYPE_GRP_CD = Y.TYPE_GRP_CD
		                        AND X.TYPE_CD = Y.TYPE_CD
		                        AND X.SALS_TYPE = A.SALS_CLASS)) SALS_CLASS_NM     
		                     , NULL MATERIAL_CLASS
		                     , NULL MATERIAL_CD
		                     , SUM(A.SAL_QUANTITY) SAL_QUANTITY
		                     , NULL UPRICE
		                     , SUM(A.NET_AMT) NET_AMT
		                     , SUM(A.SVC_AMT) SVC_AMT
		                     , SUM(A.VAT_AMT) VAT_AMT
		                     , SUM(A.SAL_AMT) SAL_AMT
		                     , A.VAT_CLASS VAT_CLASS
		                     , MAX((SELECT VAT_NM  CODE_NAME FROM SLA_VAT_CD_MST WHERE VAT_CD = A.VAT_CLASS))VAT_CLASS_NM
		                     , NULL PAY_CD
		                     , NULL PAY_CD_NM
		                     , NULL PAY_CD_NM_INFO
		                     , NULL ADVANCE_NUM
		                     , NULL EVIDENCE_1
		                     , NULL EVIDENCE_2
		                     , NULL EVIDENCE_3
		                     , NULL EVIDENCE_4
		                     , NULL EVIDENCE_5
		                     , NULL EVIDENCE_6
		                     , NULL ENC_EVIDENCE_NUM
		                     , NULL REMARK 
		                     , NULL CARD_COM_CD
		                     , NULL BUYCPNY_CD
		                     , NULL FRNC_STOR_NUM
		                     , NULL MATERIAL_NM 
		                     , NULL POS_NM   
		                     , 'N' AR_YN
		                     , 'N' TAX_SHET_PUBLISH_YN  /* 식권선수금 선발행 여부 */
		                     , 'N' PUBLISH_YN /* 세금계산서 발행 여부 */
		                     , MAX(A.DDDD_CLOSE_YN) DDDD_CLOSE_YN /* 일일마감여부 */
		                     , DECODE(MAX(A.JOURNALZ_YN),'J','Y','N') AS JOURNALZ_YN /* 회계마감여부 */
		                     , 'N' AS ADVANCE_YN
		              FROM SLA_IF_UPJANG_SALS_DETAIL A
		              WHERE A.RECD_STATUS = 'L' 
		              AND A.UPJANG_CD = :upjangCd 
		              AND A.OCCUR_DATE = :occurDate
		              AND A.SYS_CLASS IN ('20','21')
		              GROUP BY SALS_CLASS, A.VAT_CLASS
              )
              WHERE SAL_AMT <> 0
		]]>
	</statement>

	<!-- 영수증 번호을 조회한다. -->
	<statement name="receiptNum" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.receiptNum */
		<![CDATA[
   			SELECT 'S' || '-' || :sysClass || '-' || :occurDate || '-' || :upjangCd || '-' || 
			       LPAD(NVL(TO_NUMBER(MAX(SUBSTR(A.RECEIPT_NUM, INSTR(A.RECEIPT_NUM,'-',1,4)+1,4))), 0)+1, '4', 0)
			  FROM SLA_IF_UPJANG_SALS_MST A
			 WHERE 1=1
			   AND A.OCCUR_DATE = :occurDate
			   AND A.SYS_CLASS = :sysClass
			   AND A.UPJANG_CD = :upjangCd
		]]>
	</statement>

	<!-- 마지막 순번 번호을 조회한다. -->
	<statement name="seqValue" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.seqValue */
		<![CDATA[
	SELECT TRIM(NVL(MAX(B.SEQ)+1,1)) AS SEQ 
		  FROM SLA_IF_UPJANG_SALS_MST A 
		     , SLA_IF_UPJANG_SALS_DETAIL B 
		     , SLA_IF_UPJANG_PAYMENT C 
		 WHERE A.MU_CD=B.MU_CD 
		       AND A.UPJANG_CD=B.UPJANG_CD 
		       AND A.SYS_CLASS=B.SYS_CLASS 
		       AND A.OCCUR_DATE=B.OCCUR_DATE 
		       AND A.RECEIPT_NUM=B.RECEIPT_NUM 
		       AND B.MU_CD=C.MU_CD 
		       AND B.UPJANG_CD=C.UPJANG_CD 
		       AND B.SYS_CLASS=C.SYS_CLASS 
		       AND B.RECEIPT_NUM=C.RECEIPT_NUM 
		       AND B.SEQ=C.SEQ 
			   AND A.RECD_STATUS = 'L'
               AND B.RECD_STATUS = 'L'
               AND C.RECD_STATUS = 'L'		       
		       AND A.MU_CD=:muCd
		       AND A.UPJANG_CD=:upjangCd 
		       AND A.OCCUR_DATE=:occurDate 
		       AND A.CUST_CD=:custCd 
		ORDER BY A.CUST_CD,B.SEQ
	]]>
	</statement>

	<!-- 마스터 등록 여부를 확인 한다. -->
	<statement name="mstReceipt" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.mstReceipt */
		<![CDATA[
		SELECT RECEIPT_NUM 
	  	  FROM SLA_IF_UPJANG_SALS_MST A 
	     WHERE A.MU_CD=:muCd
	       AND A.UPJANG_CD=:upjangCd 
	       AND A.OCCUR_DATE=:occurDate 
	       AND A.CUST_CD=:custCd 
	       AND A.RECD_STATUS = 'L'
	]]>
	</statement>

	<!-- 매출등록(을)를 등록한다. -->
	<statement name="mst_insert" type="insert">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.mst_insert */
		<![CDATA[
		INSERT INTO SLA_IF_UPJANG_SALS_MST
					(
					 OCCUR_DATE,
					 SYS_CLASS,
					 UPJANG_CD,
					 RECEIPT_NUM,
					 MU_CD,
					 CC_CD,
					 POS_NUM,
					 CUST_CD,
					 TOT_PSN,
					 AGES_BY_PSN,
					 GENDER_PSN,
					 GUEST_TYPE_BY_PSN,
					 BLD_TYPE,
					 INTERNAL_USE_CLASS,
					 REMARK,
					 SALS_UUSER,
					 SALE_GUBUN,
					 LINK_OCCUR_DATE,
				     LINK_RECEIPT_NUM,							 
					 WON_OCCUR_DATE,
					 WON_RECEIPT_NUM,
					 DDDD_CLOSE_YN,
					 DDDD_CLOSE_DATE,
					 MODIFY_SALS_YN,
					 RECD_STATUS,
					 CDATE,
					 CUSER,
					 UDATE,
					 UUSER
					) VALUES (
					 :occurDate,
					 :sysClass,
					 :upjangCd,
					 :receiptNum,
					 :muCd,
					 (SELECT CC_CD FROM ST_UPJANG WHERE UPJANG = :upjangCd AND ROWNUM = 1),
					<#if posNum?has_content> :posNum, <#else> null, </#if>
					<#if custCd?has_content> :custCd, <#else> null, </#if>
					<#if totPsn?has_content> :totPsn, <#else> null, </#if>
					<#if agesByPsn?has_content> :agesByPsn, <#else> null, </#if>
					<#if genderPsn?has_content> :genderPsn, <#else> null, </#if>
					<#if guestTypeByPsn?has_content> :guestTypeByPsn, <#else> null, </#if>
					<#if bldType?has_content> :bldType, <#else> null, </#if>
					<#if internalUseClass?has_content> :internalUseClass, <#else> null, </#if>
					<#if remark?has_content> :remark, <#else> null, </#if>
					<#if salsUuser?has_content> :salsUuser, <#else> null, </#if>
					<#if saleGubun?has_content> :saleGubun, <#else> null, </#if>
					<#if linkOccurDate?has_content> TO_DATE(:linkOccurDate,'YYYYMMDD'), <#else> null, </#if>
					<#if linkReceiptNum?has_content> :linkReceiptNum, <#else> null, </#if>
					<#if wonOccurDate?has_content> :wonOccurDate, <#else> null, </#if>
					<#if wonReceiptNum?has_content> :wonReceiptNum, <#else> null, </#if>
					 'N',
					<#if ddddCloseDate?has_content> :ddddCloseDate, <#else> null, </#if>
					<#if modifySalsYn?has_content> :modifySalsYn, <#else> 'N', </#if> 
					 'L',
					 SYSDATE,
					 :loginSabun,
					 SYSDATE,
					 :loginSabun
					)
		]]>
	</statement>

	<!-- 매출등록(을)를 삭제한다. -->
	<statement name="mst_delete" type="delete">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.mst_delete */
		<![CDATA[
			DELETE
			FROM   SLA_IF_UPJANG_SALS_MST
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    UPJANG_CD = :upjangCd
			AND    MU_CD = :muCd
			AND    RECEIPT_NUM = :receiptNum
 		]]>
	</statement>

	<!-- 매출등록(을)를 수정한다. -->
	<statement name="mst_update" type="update">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.mst_update */
		<![CDATA[
		UPDATE SLA_IF_UPJANG_SALS_MST SET
      		<#if ccCd?has_content> CC_CD = :ccCd, </#if>
			<#if posNum?has_content> POS_NUM = :posNum, </#if>
			<#if custCd?has_content> CUST_CD = :custCd, </#if>
			<#if totPsn?has_content> TOT_PSN = :totPsn, </#if>
			<#if agesByPsn?has_content> AGES_BY_PSN = :agesByPsn, </#if>
			<#if genderPsn?has_content> GENDER_PSN = :genderPsn, </#if>
			<#if guestTypeByPsn?has_content> GUEST_TYPE_BY_PSN = :guestTypeByPsn, </#if>
			<#if bldType?has_content> BLD_TYPE = :bldType, </#if>
			<#if internalUseClass?has_content> INTERNAL_USE_CLASS = :internalUseClass, </#if>
			<#if remark?has_content> REMARK = :remark, </#if>
			<#if salsUuser?has_content> SALS_UUSER = :salsUuser, </#if>
			<#if saleGubun?has_content> SALE_GUBUN = :saleGubun, </#if>
			<#if wonOccurDate?has_content> WON_OCCUR_DATE = :wonOccurDate, </#if>
			<#if wonReceiptNum?has_content> WON_RECEIPT_NUM = :wonReceiptNum, </#if>
			<#if linkOccurDate?has_content> LINK_OCCUR_DATE = TO_DATE(:linkOccurDate,'YYYYMMDD'), </#if>
			<#if linkReceiptNum?has_content> LINK_RECEIPT_NUM = :linkReceiptNum, </#if>
			       UDATE = SYSDATE,
			       UUSER = :loginSabun
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    UPJANG_CD = :upjangCd
			AND    MU_CD = :muCd
			AND    RECEIPT_NUM = :receiptNum

		]]>
	</statement>

	<!-- 매출등록(을)를 등록한다. -->
	<statement name="detail_insert" type="insert">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.detail_insert */
		<![CDATA[
		INSERT INTO SLA_IF_UPJANG_SALS_DETAIL
					(
					 OCCUR_DATE,
					 SYS_CLASS,
					 UPJANG_CD,
					 RECEIPT_NUM,
					 SEQ,
					 MU_CD,
					 CC_CD,
					 SALS_CLASS,
					 MENU_MGRP,
					 MENU_MCALSS,
					 MENU_SCLASS,
					 MENU_CD,
					 MENU_NM,
					 MATERIAL_CLASS,
					 MATERIAL_CD,
					 SAL_QUANTITY,
					 UPRICE,
					 NET_AMT,
					 SVC_AMT,
					 VAT_AMT,
					 SAL_AMT,
					 VAT_CLASS,
					 SALS_UUSER,
					 TAX_SHET_PUBLISH_YN,
					 DDDD_CLOSE_YN,
					 DDDD_CLOSE_DATE,
					 MODIFY_SALS_YN,
					 RECD_STATUS,
					 CUSER,
					 CDATE,
					 UUSER,
					 UDATE,
					 TAX_SHET_YN 
					) VALUES (
					 :occurDate,
					 :sysClass,
					 :upjangCd,
					 :receiptNum,
					 (SELECT COUNT(RECEIPT_NUM)+1 FROM SLA_IF_UPJANG_SALS_DETAIL WHERE RECEIPT_NUM = :receiptNum),
					<#if muCd?has_content> :muCd, <#else> null, </#if>
					(SELECT CC_CD FROM ST_UPJANG WHERE UPJANG = :upjangCd AND ROWNUM = 1),
					 :salsClass,
					<#if menuMgrp?has_content> :menuMgrp, <#else> null, </#if>
					<#if menuMcalss?has_content> :menuMcalss, <#else> null, </#if>
					<#if menuSclass?has_content> :menuSclass, <#else> null, </#if>
					<#if menuCd?has_content> :menuCd, <#else> null, </#if>
					<#if menuNm?has_content> :menuNm, <#else> null, </#if>
					<#if materialCd?has_content> '1', <#else> null, </#if>
					<#if materialCd?has_content> :materialCd, <#else> null, </#if>
					<#if salQuantity?has_content> :salQuantity, <#else> null, </#if>
					<#if uprice?has_content> :uprice, <#else> null, </#if>
					<#if netAmt?has_content> :netAmt, <#else> null, </#if>
					<#if svcAmt?has_content> :svcAmt, <#else> null, </#if>
					<#if vatClass == "13"> null, <#else> :vatAmt, </#if>
					<#if salAmt?has_content> :salAmt, <#else> null, </#if>
					<#if vatClass?has_content> :vatClass, <#else> null, </#if>
					<#if salsUuser?has_content> :salsUuser, <#else> null, </#if>
					<#if taxShetPublishYn?has_content> :taxShetPublishYn, <#else> null, </#if>
					'N',
					<#if ddddCloseDate?has_content> :ddddCloseDate, <#else> null, </#if>
					<#if modifySalsYn?has_content> :modifySalsYn, <#else> 'N', </#if>
					'L',
					 :loginSabun,
					 SYSDATE,
					 :loginSabun,
					 SYSDATE,
					 <#if taxShetYn?has_content> :taxShetYn <#else> null </#if>
					)
		]]>
	</statement>

	<!-- 매출등록(을)를 수정한다. -->
	<statement name="detail_update" type="update">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.detail_update */
		<![CDATA[
		UPDATE SLA_IF_UPJANG_SALS_DETAIL SET
			<#if muCd?has_content> MU_CD = :muCd, </#if>
			<#if ccCd?has_content> CC_CD = :ccCd, </#if>
			       SALS_CLASS = :salsClass,
			<#if menuMgrp?has_content> MENU_MGRP = :menuMgrp, </#if>
			<#if menuMcalss?has_content> MENU_MCALSS = :menuMcalss, </#if>
			<#if menuSclass?has_content> MENU_SCLASS = :menuSclass, </#if>
			<#if menuCd?has_content> MENU_CD = :menuCd, </#if>
			<#if menuNm?has_content> MENU_NM = :menuNm, </#if>
			<#if materialCd?has_content> MATERIAL_CLASS = '1',<#else>MATERIAL_CLASS = null,</#if>
			<#if materialCd?has_content> MATERIAL_CD = :materialCd, </#if>
			<#if salQuantity?has_content> SAL_QUANTITY = :salQuantity, </#if>
			<#if uprice?has_content> UPRICE = :uprice, </#if>
			<#if netAmt?has_content> NET_AMT = :netAmt, </#if>
			<#if svcAmt?has_content> SVC_AMT = :svcAmt, </#if>
			<#if vatClass == "13">VAT_AMT = NULL, <#else> VAT_AMT = :vatAmt, </#if>
			<#if salAmt?has_content> SAL_AMT = :salAmt, </#if>
			<#if vatClass?has_content> VAT_CLASS = :vatClass, </#if>
			<#if taxShetPublishYn?has_content> TAX_SHET_PUBLISH_YN = :taxShetPublishYn, <#else>TAX_SHET_PUBLISH_YN = null, </#if>
			<#if taxShetYn?has_content> TAX_SHET_YN = :taxShetYn, <#else>TAX_SHET_YN = null, </#if>
			       UUSER = :loginSabun,
			       UDATE = SYSDATE
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    UPJANG_CD = :upjangCd
			AND    RECEIPT_NUM = :receiptNum
			AND    SEQ = :seq

		]]>
	</statement>

	<!-- 매출등록(을)를 삭제한다. -->
	<statement name="detail_delete" type="delete">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.detail_delete */
		<![CDATA[
			DELETE
			FROM   SLA_IF_UPJANG_SALS_DETAIL
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    UPJANG_CD = :upjangCd
			AND    RECEIPT_NUM = :receiptNum
			AND    SEQ = :seq

		]]>
	</statement>

	<!-- 매출등록(을)를 등록한다. -->
	<statement name="payment_insert" type="insert">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.payment_insert */
		<![CDATA[
		INSERT INTO SLA_IF_UPJANG_PAYMENT
					(
					 OCCUR_DATE,
					 SYS_CLASS,
					 UPJANG_CD,
					 RECEIPT_NUM,
					 SEQ,
					 MU_CD,
					 CC_CD,
					 PAY_CD,
					 PAY_CD_NM,
					 EVIDENCE_1,
					 EVIDENCE_2,
					 EVIDENCE_3,
					 EVIDENCE_4,
					 EVIDENCE_5,
					 EVIDENCE_6,
					 ENC_EVIDENCE_NUM,
					 AMT,
					 EXCH_AMT,
					 NET_AMT,
					 VAT_AMT,
					 SALS_UUSER,
					 REMARK,
					 DDDD_CLOSE_YN,
					 DDDD_CLOSE_DATE,
					 DENOM_AMT,
					 MODIFY_SALS_YN,
					 RECD_STATUS,
					 CUSER,
					 CDATE,
					 UUSER,
					 UDATE
					) VALUES (
					 :occurDate,
					 :sysClass,
					 :upjangCd,
					 :receiptNum,
					 (SELECT COUNT(RECEIPT_NUM)+1 FROM SLA_IF_UPJANG_PAYMENT WHERE RECEIPT_NUM = :receiptNum),
					<#if muCd?has_content> :muCd, <#else> null, </#if>
					(SELECT CC_CD FROM ST_UPJANG WHERE UPJANG = :upjangCd AND ROWNUM = 1),
					<#if payCd?has_content> :payCd, <#else> null, </#if>
					<#if payCdNm?has_content> :payCdNm, <#else> null, </#if>
					<#if evidence1?has_content> :evidence1, <#else> null, </#if>
					<#if evidence2?has_content> :evidence2, <#else> null, </#if>
					<#if evidence3?has_content> :evidence3, <#else> null, </#if>
					<#if evidence4?has_content> :evidence4, <#else> null, </#if>
					<#if evidence5?has_content> :evidence5, <#else> null, </#if>
					<#if evidence6?has_content> :evidence6, <#else> null, </#if>
					<#if encEvidenceNum?has_content> :encEvidenceNum, <#else> null, </#if>
					<#if salAmt?has_content> :salAmt, <#else> null, </#if>
					<#if exchAmt?has_content> :exchAmt, <#else> null, </#if>
					<#if netAmt?has_content> :netAmt, <#else> null, </#if>
					<#if vatClass == "13"> null, <#else> :vatAmt, </#if>
					<#if salsUuser?has_content> :salsUuser, <#else> null, </#if>
					<#if remark?has_content> :remark, <#else> null, </#if>
					'N',
					<#if ddddCloseDate?has_content> :ddddCloseDate, <#else> null, </#if>
					<#if denomAmt?has_content> :denomAmt, <#else> null, </#if>
					<#if modifySalsYn?has_content> :modifySalsYn, <#else> 'N', </#if>
					'L',
					 :loginSabun,
					 SYSDATE,
					 :loginSabun,
					 SYSDATE
					)
		]]>
	</statement>

	<!-- 매출등록(을)를 수정한다. -->
	<statement name="payment_update" type="update">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.payment_update */
		<![CDATA[
		UPDATE SLA_IF_UPJANG_PAYMENT SET
			<#if muCd?has_content> MU_CD = :muCd, </#if>
			<#if ccCd?has_content> CC_CD = :ccCd, </#if>
			<#if payCd?has_content> PAY_CD = :payCd, </#if>
			<#if payCdNm?has_content> PAY_CD_NM = :payCdNm, </#if>
			<#if evidence1?has_content> EVIDENCE_1 = :evidence1, </#if>
			<#if evidence2?has_content> EVIDENCE_2 = :evidence2, </#if>
			<#if evidence3?has_content> EVIDENCE_3 = :evidence3, </#if>
			<#if evidence4?has_content> EVIDENCE_4 = :evidence4, </#if>
			<#if evidence5?has_content> EVIDENCE_5 = :evidence5, </#if>
			<#if evidence6?has_content> EVIDENCE_6 = :evidence6, </#if>
			<#if netAmt?has_content> NET_AMT = :netAmt, </#if>
			<#if exchAmt?has_content> EXCH_AMT = :exchAmt, </#if>
			<#if denomAmt?has_content> DENOM_AMT = :denomAmt, </#if>
			<#if vatClass == "13">VAT_AMT = NULL, <#else> VAT_AMT = :vatAmt, </#if>
			<#if salAmt?has_content> AMT = :salAmt, </#if>
			<#if encEvidenceNum?has_content> ENC_EVIDENCE_NUM = :encEvidenceNum, </#if>
			<#if remark?has_content> REMARK = :remark, </#if>
			       UUSER = :loginSabun,
			       UDATE = SYSDATE
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    UPJANG_CD = :upjangCd
			AND    RECEIPT_NUM = :receiptNum
			AND    SEQ = :seq
		]]>
	</statement>

	<!-- 매출등록(을)를 삭제한다. -->
	<statement name="payment_delete" type="delete"><![CDATA[
			DELETE
			FROM   SLA_IF_UPJANG_PAYMENT
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    UPJANG_CD = :upjangCd
			AND    RECEIPT_NUM = :receiptNum
			--AND    SEQ = :seq
		]]></statement>

	<!-- 매출등록(을)를 삭제한다. -->
	<statement name="paymentAdvance_delete" type="delete">
		/*+
		com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.paymentAdvance_delete
		*/
		<![CDATA[
			DELETE
			FROM   SLA_IF_UPJANG_PAYMENT
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    UPJANG_CD = :upjangCd
			AND    RECEIPT_NUM = :receiptNum
		]]>
	</statement>


	<!-- 카드승인 정보(을)를 등록한다. -->
	<statement name="card_insert" type="insert">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.card_insert */
		<![CDATA[
			INSERT 
			  INTO SLA_IF_CARD_APPRV_INFO 
			       ( 
			           OCCUR_DATE
			         , SYS_CLASS
			         , SEQ
			         , POS_NUM
			         , RECEIPT_NUM
			         , CARD_CLASS
			         , CARD_NUM_VIEW
			         , ENC_CARD_NUM
			         , BUYCPNY_CD
			         , CARD_COM_CD
			         , APPRV_NUM
			         , APPRV_DATE
			         , APPRV_TIME
			         , USE_AMT
			         , ALLT_TERM
			         , VALID_YYMM
			         , MU_CD
			         , CC_CD
			         , UPJANG_CD
			         , FRNC_STOR_NUM
			         , VOID_YN
			         , RESERV_NUM
			         , REMARK
			         , DEAL_TYPE
			         , SALS_UUSER
			         , DDDD_CLOSE_YN
			         , DDDD_CLOSE_DATE
			         , MODIFY_SALS_YN
			         , DATA_CLASS
			         , RECD_STATUS
			         , CUSER
			         , CDATE
			         , UUSER
			         , UDATE 
			       ) VALUES (
			         :occurDate,
			         :sysClass,
			         (SELECT COUNT(RECEIPT_NUM)+1 FROM SLA_IF_CARD_APPRV_INFO WHERE RECEIPT_NUM = :receiptNum),
			        <#if posNum?has_content> :posNum, <#else> null, </#if>
			        :receiptNum,
			        'N',
			        <#if cardNumView?has_content> :cardNumView, <#else> null, </#if>
			        <#if encCardNum?has_content> :encCardNum, <#else> null, </#if>
			        <#if buycpnyCd?has_content> :buycpnyCd, <#else> null, </#if>
			        <#if cardComCd?has_content> :cardComCd, <#else> null, </#if>
			        <#if apprvNum?has_content> :apprvNum, <#else> null, </#if>
			        <#if apprvDate?has_content> :apprvDate, <#else> null, </#if>
			        <#if apprvTime?has_content> :apprvTime, <#else> null, </#if>
			        <#if salAmt?has_content> :salAmt, <#else> null, </#if>
			        <#if alltTerm?has_content> :alltTerm, <#else> null, </#if>
			        <#if validYymm?has_content> :validYymm, <#else> null, </#if>
			        :muCd,
			        (SELECT CC_CD FROM ST_UPJANG WHERE UPJANG = :upjangCd AND ROWNUM = 1),
			        :upjangCd,
			        <#if frncStorNum?has_content> :frncStorNum, <#else> null, </#if>
			        <#if voidYn?has_content> DECODE(:voidYn, '1', 'Y', 'N'), <#else> null, </#if>
			        <#if reservNum?has_content> :reservNum, <#else> null, </#if>
			        <#if remark?has_content> :remark, <#else> null, </#if>
			        '1',
			        <#if salsUuser?has_content> :salsUuser, <#else> null, </#if>
			        'N',
			        <#if ddddCloseDate?has_content> :ddddCloseDate, <#else> null, </#if>
			        <#if modifySalsYn?has_content> :modifySalsYn, <#else> 'N', </#if>
			        '1',
			        'L',
			         :loginSabun,
			         SYSDATE,
			         :loginSabun,
			         SYSDATE
					)
		]]>
	</statement>

	<!-- 카드승인 정보(을)를 수정한다. -->
	<statement name="card_update" type="update">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.card_update */
		<![CDATA[
		UPDATE SLA_IF_CARD_APPRV_INFO SET
			<#if posNum?has_content> POS_NUM = :posNum, </#if>
			<#if cardClass?has_content> CARD_CLASS = :cardClass, </#if>
			<#if cardNumView?has_content> CARD_NUM_VIEW = :cardNumView, </#if>
			<#if encCardNum?has_content> ENC_CARD_NUM = :encCardNum, </#if>
			<#if buycpnyCd?has_content> BUYCPNY_CD = :buycpnyCd, </#if>
			<#if cardComCd?has_content> CARD_COM_CD = :cardComCd, </#if>
			<#if apprvNum?has_content> APPRV_NUM = :apprvNum, </#if>
			<#if apprvDate?has_content> APPRV_DATE = :apprvDate, </#if>
			<#if apprvTime?has_content> APPRV_TIME = :apprvTime, </#if>
			<#if salAmt?has_content> USE_AMT = :salAmt, </#if>
			<#if alltTerm?has_content> ALLT_TERM = :alltTerm, </#if>
			<#if validYymm?has_content> VALID_YYMM = :validYymm, </#if>
			<#if frncStorNum?has_content> FRNC_STOR_NUM = :frncStorNum, </#if>
			<#if voidYn?has_content> VOID_YN = DECODE(:voidYn, '1', 'Y', 'N'), </#if>
			<#if reservNum?has_content> RESERV_NUM = :reservNum, </#if>
			<#if remark?has_content> REMARK = :remark, </#if>
			<#if salsUuser?has_content> SALS_UUSER = :salsUuser, </#if>
			       UUSER = :loginSabun,
			       UDATE = SYSDATE
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    SEQ = :seq
			AND    RECEIPT_NUM = :receiptNum
			AND    MU_CD = :muCd
			AND    UPJANG_CD = :upjangCd
		]]>
	</statement>

	<!-- 카드승인 정보(을)를 삭제한다. -->
	<statement name="card_delete" type="delete">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.card_delete */
		<![CDATA[
			DELETE
			FROM   SLA_IF_CARD_APPRV_INFO
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    SEQ = :seq
			AND    RECEIPT_NUM = :receiptNum
			AND    MU_CD = :muCd
			AND    UPJANG_CD = :upjangCd
		]]>
	</statement>

	<!-- 식권팝업용 번호를  생성한다. -->
	<statement name="selectTmpSeq" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectTmpSeq */
		<![CDATA[
			SELECT TRIM(TO_CHAR(FSL_SLA_IF_UPJANG_S.NEXTVAL,'0000000')) TMP_SEQ FROM DUAL
		]]>
	</statement>

	<!-- 식권 팝업 정보(을)를 삭제한다. -->
	<statement name="ticket_delete" type="delete">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.ticket_delete */
		<![CDATA[
		DELETE 
		FROM   MAS_TICKET_MST 
		WHERE  RECEIPT_NUM = :receiptNum
		AND    UPJANG =  :upjangCd
		AND    TRANS_TYPE = 'W'
		]]>
	</statement>

	<!-- 식권 판매 관리(을)를 등록한다. -->
	<statement name="ticket_insert" type="insert">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.ticket_insert */
		<![CDATA[
		INSERT INTO MAS_TICKET_MST(
		                    TICKET_SEQ, 
		                    TICKET_GROUP_SEQ, 
		                    UPJANG, 
		                    ITEM_TYPE, 
		                    ITEM_CODE, 
		                    TRANS_DD, 
		                    TRANS_TYPE, 
		                    TRANS_GUBUN, 
		                    UPRICE, 
		                    QTY, 
		                    TICKET_STARTNUM, 
		                    TICKET_ENDNUM, 
		                    REMARK_DESC, 
		                    AUTO_GUBUN, 
		                    AUTO_KIND, 
		                    SOURCE_ID, 
		                    RECEIPT_NUM,
		                    CUSER,
		                    CDATE                                 
		                  ) 
		SELECT MAS_TICKET_MST_S.NEXTVAL,
		       :ticketGroupSeq,
		       :upjangCd,
		       :itemType,
		       :itemCode,
		       :occurDate,
		       'W',
		       'WW',
		       NVL(:uprice, 0),
		       NVL(:wwQty, 0),
		       NULL TICKET_STARTNUM, 
		       NULL TICKET_ENDNUM,   
		       <#if remarkDesc?has_content> :remarkDesc <#else> NULL </#if>,
		       'N',
		       NULL,
		       NULL,
		       :receiptNum,
		       :loginSabun,
			    SYSDATE                                   
		FROM DUAL V
		]]>
	</statement>

	<!-- 식권 판매 관리(을)를 수정한다. -->
	<statement name="ticket_update" type="update">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.ticket_update */
		<![CDATA[
			UPDATE MAS_TICKET_MST
			SET QTY = :sQty
			,REMARK_DESC = <#if remarkDesc?has_content> :remarkDesc <#else> NULL </#if>
			,TRANS_DD = :transDd
			WHERE TRANS_TYPE = 'O'
			AND TRANS_GUBUN = 'OO'
			AND RECEIPT_NUM = :receiptNum
			AND TICKET_SEQ = :ticketSeq
			AND   UPJANG =  :upjang 
			]]>
	</statement>

	<!-- 식권 판매 관리 그룹키(을)를 생성한다. -->
	<statement name="ticketMstGroupSeq" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.ticketMstGroupSeq
		*/
		<![CDATA[
		SELECT TO_CHAR(MAS_TICKET_MST_GROUP_S.NEXTVAL) MAS_TICKET_MST_GROUP_S FROM DUAL
		]]>
	</statement>

	<!-- 업장 CC_CD를 조회한다.. -->
	<statement name="selectUpjangCcCdInfo" type="select">
		/*+
		com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectUpjangCcCdInfo */
		<![CDATA[
	    SELECT  A.CC_CD
	 			 , A.CC_NM  
  			    , NVL(B.SET1,'N') as VAT_CTRL_YN 
	  FROM  SCO_UPJANG_MST_V A
	      , (SELECT CODE, SET1
	           FROM SCC_COMMON_CODE 
	          WHERE GROUP_CODE = 'VAT_CTRL_YN'
	        ) B
	 WHERE  1=1
	   --AND  A.UPJANG LIKE '%' || <#if upjangCd?has_content> :upjangCd<#else> null </#if> || '%'
	   --속도개선 적용 2017.09.06 김호석
	   <#if upjangCd?has_content>
          AND  A.UPJANG = :upjangCd
       </#if>	   
	   AND  A.UPJANG = B.CODE(+)
		]]>
	</statement>

	<!-- 창고 목록을 조회한다. -->
	<statement name="posClassList" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.posClassList */
		<![CDATA[
		SELECT  
		        CODE
		       ,CODE_NAME
		       ,CASE WHEN CODE IS NULL THEN 1 ELSE 
		        CASE WHEN CODE = DECODE(SUBSTR(CODE,0,1),'C',CODE) THEN 2 ELSE 3 END
		        END ORD
		FROM
				(SELECT ''  CODE
				       ,'전체' CODE_NAME
				FROM DUAL
				UNION ALL
				SELECT SUBINV_CODE CODE    
			    	   ,SUBINV_NAME CODE_NAME
				  FROM HLDC_PO_SUBINVENTORY 
				 WHERE 1=1
			     AND  USE_YN='Y'  
				 AND  (SUBSTR(SUBINV_CODE,0,1) = 'A' OR SUBSTR(SUBINV_CODE,0,1) = 'C')
			   --AND  SALE_FLAG='Y'
				 AND  UPJANG= :upjangCd)
	    ORDER BY ORD 
		]]>
	</statement>

	<!-- 회수예정일을 조회한다. -->
	<statement name="selectExpDt" type="select"><![CDATA[
		SELECT B.CODE_NAME || A.PAY_DATE||'일' AS PAY_CD_NM1, 
		    --   CASE B.SORT_SEQ WHEN 999 THEN TO_CHAR(SYSDATE,'YYYYMM')||SUBSTR('0' || DECODE(A.PAY_DATE, '0', TO_CHAR(SYSDATE,'DD'), A.PAY_DATE), -2) 
		    --                 ELSE TO_CHAR(ADD_MONTHS(SYSDATE, B.SET1),'YYYYMM')||SUBSTR('0' || A.PAY_DATE, -2) 
		       --PAY_DATE NULL인 경우 처리추가
               CASE B.SORT_SEQ WHEN 999 THEN TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD'),'YYYYMM')||SUBSTR('0' || DECODE(A.PAY_DATE, '0', TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD'),'DD'), NVL(A.PAY_DATE,substr(:occurDate,7,2))), -2)
               --계산식 오류(2번 더하는문제) 수정 20190509 김호석(정재호과장 요청)
                 ELSE 
                 	--TO_CHAR(ADD_MONTHS(SYSDATE, B.SET1),'YYYYMM')||SUBSTR('0' || A.PAY_DATE, -2)
                 	--대금결재일이 30,31일인 경우 해당월의 마지막날로 설정 20190510 김호석
                 	CASE WHEN (SUBSTR('0' || A.PAY_DATE, -2) = '30' OR SUBSTR('0' || A.PAY_DATE, -2) = '31')
                    	THEN
                     		TO_CHAR(LAST_DAY(TO_DATE(ADD_MONTHS(TO_DATE(:occurDate,'YYYYMMDD'), B.SET1))),'YYYYMMDD')
                   	    ELSE
               				TO_CHAR(ADD_MONTHS(TO_DATE(:occurDate,'YYYYMMDD'), B.SET1),'YYYYMM')||SUBSTR('0' || A.PAY_DATE, -2)
                    END
               END AS PAY_CD_NM
		FROM SCO_UPJANG_CUST A,
		     SCC_COMMON_CODE B
		WHERE 1=1
		AND A.PAY_GUBUN_CD = B.CODE
		AND UPJANG = :upjangCd
		AND CUSTCD = :custCd
		AND B.GROUP_CODE = 'MA0015'
		]]></statement>

	<!-- 마감여부를 조회한다.. -->
	<statement name="dtCnt" type="select"><![CDATA[
		SELECT DDDD_CLOSE_YN DT_CNT 
			FROM SLA_IF_UPJANG_SALS_DETAIL
			WHERE UPJANG_CD = :upjangCd
			--AND DDDD_CLOSE_YN = 'N'
			<#if sysClass == '11'> AND SYS_CLASS IN ('11') </#if>
			<#if sysClass == '12'> AND SYS_CLASS = '12' </#if>
			<#if sysClass == '15'> AND SYS_CLASS = '15' </#if>
			AND OCCUR_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD'),'YYYYMMDD')
		UNION ALL
		SELECT DDDD_CLOSE_YN DT_CNT 
				FROM SLA_IF_ADVANCE_OCCUR
				WHERE UPJANG_CD = :upjangCd
				--AND DDDD_CLOSE_YN = 'N'
				<#if sysClass == '11'> AND SYS_CLASS IN ('11') </#if>
			    <#if sysClass == '12'> AND SYS_CLASS = '12' </#if>
			    <#if sysClass == '15'> AND SYS_CLASS = '15' </#if>
				AND OCCUR_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD'),'YYYYMMDD')
		UNION ALL
		SELECT DDDD_CLOSE_YN DT_CNT 
				FROM SLA_IF_MEAL_TICKET_SAL_MST
				WHERE UPJANG_CD = :upjangCd
				--AND DDDD_CLOSE_YN = 'N'
				<#if sysClass == '11'> AND SYS_CLASS IN ('11') </#if>
			    <#if sysClass == '12'> AND SYS_CLASS = '12' </#if>
			    <#if sysClass == '15'> AND SYS_CLASS = '15' </#if>
				AND SALE_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD'),'YYYYMMDD')
		UNION ALL
		SELECT DECODE(COUNT(1), 0, 'N', 'Y') DT_CNT 
				FROM MAS_CLOSE_MGMT
				WHERE UPJANG = :upjangCd
				--AND DDDD_CLOSE_YN = 'N'
				AND CLOSE_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD'),'YYYYMMDD')
				<#if sysClass == '11'> 
	            AND CLOSE_GUBUN = '001'
				</#if>
				<#if sysClass == '12'> 
	            AND CLOSE_GUBUN = '012'
				</#if>
				<#if sysClass == '15'> 
	            AND CLOSE_GUBUN = '001'
				</#if>
		]]></statement>
		
	<!-- 마감여부를 조회한다.. -->
	<statement name="dtCnty" type="select"><![CDATA[
		SELECT DECODE(COUNT(1), 0, 'N', 'Y') DT_CNT 
				FROM MAS_CLOSE_MGMT
				WHERE UPJANG = :upjangCd
				--AND DDDD_CLOSE_YN = 'N'
				AND CLOSE_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD'),'YYYYMMDD')
				<#if sysClass == '11'> 
	            AND CLOSE_GUBUN = '001'
				</#if>
				<#if sysClass == '12'> 
	            AND CLOSE_GUBUN = '012'
				</#if>
				<#if sysClass == '15'> 
	            AND CLOSE_GUBUN = '001'
				</#if>
		]]></statement>

	<!-- 마감여부(전일자)를 조회한다.. -->
	<statement name="dtCnt2" type="select"><![CDATA[
		SELECT DDDD_CLOSE_YN DT_CNT 
			FROM SLA_IF_UPJANG_SALS_DETAIL
			WHERE UPJANG_CD = :upjangCd
			--AND DDDD_CLOSE_YN = 'N'
			<#if sysClass == '11'> AND SYS_CLASS IN ('11') </#if>
			<#if sysClass == '12'> AND SYS_CLASS = '12' </#if>
            <#if sysClass == '15'> AND SYS_CLASS = '15' </#if>
			AND OCCUR_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD')-1,'YYYYMMDD')
		UNION ALL
		SELECT DDDD_CLOSE_YN DT_CNT 
				FROM SLA_IF_ADVANCE_OCCUR
				WHERE UPJANG_CD = :upjangCd
				--AND DDDD_CLOSE_YN = 'N'
				<#if sysClass == '11'> AND SYS_CLASS IN ('11') </#if>
			    <#if sysClass == '12'> AND SYS_CLASS = '12' </#if>
                <#if sysClass == '15'> AND SYS_CLASS = '15' </#if>
				AND OCCUR_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD')-1,'YYYYMMDD')
		UNION ALL
		SELECT DDDD_CLOSE_YN DT_CNT 
				FROM SLA_IF_MEAL_TICKET_SAL_MST
				WHERE UPJANG_CD = :upjangCd
				--AND DDDD_CLOSE_YN = 'N'
				<#if sysClass == '11'> AND SYS_CLASS IN ('11') </#if>
			    <#if sysClass == '12'> AND SYS_CLASS = '12' </#if>
                <#if sysClass == '15'> AND SYS_CLASS = '15' </#if>
				AND SALE_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD')-1,'YYYYMMDD')
		<#if sysClass == '11'>
		UNION ALL
		SELECT DT_CNT FROM
		(
		SELECT 'N' AS DT_CNT FROM DUAL
		
		MINUS
		
		SELECT NVL2(UPJANG,'N','Y') DT_CNT 
				FROM MAS_CLOSE_MGMT
				WHERE UPJANG = :upjangCd
				--AND DDDD_CLOSE_YN = 'N'
				AND CLOSE_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD')-1,'YYYYMMDD')
				<#if sysClass == '11'> 
	            AND CLOSE_GUBUN = '001'
				</#if>
		)
		</#if>
		<#if sysClass == '12'>
		UNION ALL
		SELECT DT_CNT FROM
		(
		SELECT 'N' AS DT_CNT FROM DUAL
		
		MINUS
		
		SELECT NVL2(UPJANG,'N','Y') DT_CNT 
				FROM MAS_CLOSE_MGMT
				WHERE UPJANG = :upjangCd
				AND CLOSE_DATE = TO_CHAR(TO_DATE(:occurDate,'YYYYMMDD')-1,'YYYYMMDD')
	            AND CLOSE_GUBUN = '012'
		)
		</#if>		
]]></statement>

	<!-- 전일 마감여부를 조회한다.(전일매출복사용). -->
	<statement name="dtCntCopy" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.dtCntCopy */
		<![CDATA[
		SELECT DDDD_CLOSE_YN DT_CNT_COPY 
			FROM SLA_IF_UPJANG_SALS_DETAIL
			WHERE UPJANG_CD = :upjangCd
			--AND DDDD_CLOSE_YN = 'N'
			<#if sysClass == '11'> AND SYS_CLASS IN ('11') </#if>
			<#if sysClass == '12'> AND SYS_CLASS = '12' </#if>
			AND OCCUR_DATE = TO_CHAR(TO_DATE(:occurCopyDate,'YYYYMMDD'),'YYYYMMDD')
			AND ROWNUM = 1
		]]>
	</statement>

	<!-- 상품권 조회한다. -->
	<statement name="evCnt" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.evCnt */
		<![CDATA[
		SELECT DECODE(COUNT(A.RECEIPT_NUM),0,'N','Y') EV_CNT
		FROM 
		(SELECT RECEIPT_NUM
		FROM SLA_GIFT_WITHDRAW_INFO
		WHERE GIFT_NUM = :evidence2
		AND GIFT_KIND_CD = :evidence1
		AND RECD_STATUS = 'L'
		UNION ALL
		SELECT RECEIPT_NUM
		FROM SLA_IF_UPJANG_PAYMENT
		WHERE PAY_CD = '6' 
		AND EVIDENCE_2 = :evidence2 
		AND EVIDENCE_1 = :evidence1 
		AND DDDD_CLOSE_YN='N'
		AND RECD_STATUS = 'L')A
		]]>
	</statement>


	<!-- 선수금잔액합계를 조회한다(선수식권).. -->
	<statement name="selectSumAdvanceAmtTicketP2" type="select">
		/*+
		com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectSumAdvanceAmtTicketP2
		*/
		<![CDATA[
		SELECT NVL(SUM(BAN_AMT),0) SUM_ADVANCE_AMT FROM
        (
                    SELECT  M.ADVANCE_NUM                   -- 선수금 번호

                            ,M.OCCUR_AMT AS 선수금금액

                            ,      (SELECT  NVL(SUM(DD.APPLY_AMT),0)
                                      FROM    SLA_ADVANCE_ALT_DETAIL DD
                                      WHERE   DD.RECD_STATUS = 'L'
                                      		AND     DD.ADVANCE_NUM = M.ADVANCE_NUM     ) AS 회계대체금액

                            ,      (SELECT  NVL(SUM(DD.AMT),0)
                                      FROM    SLA_IF_UPJANG_PAYMENT DD
                                      WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD = 'P2' AND DD.DDDD_CLOSE_YN = 'N'
                                      		AND     DD.EVIDENCE_1 = M.ADVANCE_NUM     ) AS 지불대체금액

                            ,M.OCCUR_AMT - (
                                      SELECT  NVL(SUM(DD.APPLY_AMT),0) AS BAL_AMT
                                      FROM    SLA_ADVANCE_ALT_DETAIL DD
                                      WHERE   DD.RECD_STATUS = 'L'
                                      		AND     DD.ADVANCE_NUM = M.ADVANCE_NUM
                           )-(
                                      SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
                                      FROM    SLA_IF_UPJANG_PAYMENT DD
                                      WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD= 'P2' AND DD.DDDD_CLOSE_YN = 'N'
                                      		AND     DD.EVIDENCE_1 = M.ADVANCE_NUM
                            ) BAN_AMT

                    FROM    SLA_ADVANCE_MST M
                    WHERE   M.RECD_STATUS = 'L'
                    AND     M.MU_CD = :muCd
                    AND     M.CC_CD = :ccCd
                    AND     M.ACCT_CD = (SELECT ACCT_CD FROM SLA_TYPE_CD_MST WHERE TYPE_CD = 'F05')
                    AND     M.TAX_SHET_PUBLISH_YN = :taxShetPublishYn
                    AND     M.OCCUR_DATE <= :occurDate
                    
                    UNION ALL

                    SELECT M.OCCUR_ADVANCE_NUM AS ADVANCE_NUM                   -- 선수금 번호
                            ,DECODE(M.TAX_SHET_PUBLISH_YN, 'Y', M.SUPPLY_AMT , M.MEAL_TICKET_AMT) AS 선수금금액
                            , 0 AS 회계대체금액
                            ,      (SELECT  NVL(SUM(DD.AMT),0)
                                      FROM    SLA_IF_UPJANG_PAYMENT DD
                                      WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD='P2' AND DD.DDDD_CLOSE_YN = 'N'
                                      		AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM     ) AS 지불대체금액
                            ,DECODE(M.TAX_SHET_PUBLISH_YN, 'Y', M.SUPPLY_AMT , M.MEAL_TICKET_AMT) - (
                                      SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
                                      FROM    SLA_IF_UPJANG_PAYMENT DD
                                      WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD='P2' AND DD.DDDD_CLOSE_YN = 'N'
                                      		AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM
                            ) BAN_AMT
                    FROM    SLA_IF_MEAL_TICKET_SAL_MST M
                    WHERE   M.DDDD_CLOSE_YN = 'N'
                    AND     M.MU_CD = :muCd
                    AND     M.CC_CD = :ccCd
                    AND     M.ADVANCE_CLASS = '001'
                    AND     M.TAX_SHET_PUBLISH_YN = :taxShetPublishYn
                    AND     M.SALE_DATE <= :occurDate
         )
                    WHERE  BAN_AMT > 0
		]]>
	</statement>

	<!-- 선수금 차감 잔액을 조회한다(선수식권).. -->
	<statement name="selectMinusAdvanceAmtTicketP2" type="select">
		/*+
		com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectMinusAdvanceAmtTicketP2
		*/
		<![CDATA[
		SELECT * FROM
		(
				SELECT  M.ADVANCE_NUM                   -- 선수금 번호
		
		                            ,M.OCCUR_AMT AS 선수금금액
		
		                            ,      (SELECT  NVL(SUM(DD.APPLY_AMT),0)
		                                      FROM    SLA_ADVANCE_ALT_DETAIL DD
		                                      WHERE   DD.RECD_STATUS = 'L'
		                                      		AND     DD.ADVANCE_NUM = M.ADVANCE_NUM     ) AS 회계대체금액
		
		                            ,      (SELECT  NVL(SUM(DD.AMT),0)
		                                      FROM    SLA_IF_UPJANG_PAYMENT DD
		                                      WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD = 'P2' AND DD.DDDD_CLOSE_YN = 'N'
		                                      		AND     DD.EVIDENCE_1 = M.ADVANCE_NUM     ) AS 지불대체금액
		
		                            ,M.OCCUR_AMT - (
		                                      SELECT  NVL(SUM(DD.APPLY_AMT),0) AS BAL_AMT
		                                      FROM    SLA_ADVANCE_ALT_DETAIL DD
		                                      WHERE   DD.RECD_STATUS = 'L'
		                                      		AND     DD.ADVANCE_NUM = M.ADVANCE_NUM
		                           )-(
		                                      SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
		                                      FROM    SLA_IF_UPJANG_PAYMENT DD
		                                      WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD= 'P2' AND DD.DDDD_CLOSE_YN = 'N'
		                                      		AND     DD.EVIDENCE_1 = M.ADVANCE_NUM
		                            ) MINUS_ADVANCE_AMT
		
		                    FROM    SLA_ADVANCE_MST M
		                    WHERE   M.RECD_STATUS = 'L'
		                    AND     M.MU_CD = :muCd
		                    AND     M.CC_CD = :ccCd
		                    AND     M.ACCT_CD = (SELECT ACCT_CD FROM SLA_TYPE_CD_MST WHERE TYPE_CD = 'F05')
		                    AND     M.TAX_SHET_PUBLISH_YN = :taxShetPublishYn
		                    AND     M.OCCUR_DATE <= :occurDate
		                    
		                    UNION ALL

		                    SELECT M.OCCUR_ADVANCE_NUM AS ADVANCE_NUM                   -- 선수금 번호
		                            ,DECODE(M.TAX_SHET_PUBLISH_YN, 'Y', M.SUPPLY_AMT , M.MEAL_TICKET_AMT) AS 선수금금액
		                            , 0 AS 회계대체금액
		                            ,      (SELECT  NVL(SUM(DD.AMT),0)
		                                      FROM    SLA_IF_UPJANG_PAYMENT DD
		                                      WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD='P2' AND DD.DDDD_CLOSE_YN = 'N'
		                                      		AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM     ) AS 지불대체금액
		                            ,DECODE(M.TAX_SHET_PUBLISH_YN, 'Y', M.SUPPLY_AMT , M.MEAL_TICKET_AMT) - (
		                                      SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
		                                      FROM    SLA_IF_UPJANG_PAYMENT DD
		                                      WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD='P2' AND DD.DDDD_CLOSE_YN = 'N'
		                                      		AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM
		                            ) MINUS_ADVANCE_AMT
		                    FROM    SLA_IF_MEAL_TICKET_SAL_MST M
		                    WHERE   M.DDDD_CLOSE_YN = 'N'
		                    AND     M.MU_CD = :muCd
		                    AND     M.CC_CD = :ccCd
		                    AND     M.ADVANCE_CLASS IN ('001','004')
		                    AND     M.TAX_SHET_PUBLISH_YN = :taxShetPublishYn
		                    AND     M.SALE_DATE <= :occurDate
		 )
		                    WHERE  MINUS_ADVANCE_AMT > 0
		 ORDER BY ADVANCE_NUM ASC
		]]>
	</statement>

	<!-- 선수금잔액합계를 조회한다(외상식권).. -->
	<statement name="selectSumAdvanceAmtTicketP3" type="select">
		/*+
		com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectSumAdvanceAmtTicketP3
		*/
		<![CDATA[
		SELECT NVL(SUM(BAN_AMT),0) SUM_ADVANCE_AMT FROM
        (
                    SELECT  M.ADVANCE_NUM                   -- 선수금 번호

                            ,M.OCCUR_AMT AS 선수금금액

                            ,      (SELECT  NVL(SUM(DD.APPLY_AMT),0)
                                      FROM    SLA_ADVANCE_ALT_DETAIL DD
                                      WHERE   DD.RECD_STATUS = 'L'
                                      		AND     DD.ADVANCE_NUM = M.ADVANCE_NUM     ) AS 회계대체금액

                            ,      (SELECT  NVL(SUM(DD.AMT),0)
                                      FROM    SLA_IF_UPJANG_PAYMENT DD
                                      WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD = 'P3' AND DD.DDDD_CLOSE_YN = 'N'
                                      		AND     DD.EVIDENCE_1 = M.ADVANCE_NUM     ) AS 지불대체금액

                            ,M.OCCUR_AMT - (
                                      SELECT  NVL(SUM(DD.APPLY_AMT),0) AS BAL_AMT
                                      FROM    SLA_ADVANCE_ALT_DETAIL DD
                                      WHERE   DD.RECD_STATUS = 'L'
                                      		AND     DD.ADVANCE_NUM = M.ADVANCE_NUM
                           )-(
                                      SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
                                      FROM    SLA_IF_UPJANG_PAYMENT DD
                                      WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD= 'P3' AND DD.DDDD_CLOSE_YN = 'N'
                                      		AND     DD.EVIDENCE_1 = M.ADVANCE_NUM
                            ) BAN_AMT

                    FROM    SLA_ADVANCE_MST M
                    WHERE   M.RECD_STATUS = 'L'
                    AND     M.MU_CD = :muCd
                    AND     M.CC_CD = :ccCd
                    AND     M.ACCT_CD = (SELECT ACCT_CD FROM SLA_TYPE_CD_MST WHERE TYPE_CD = 'F10')
                    AND     M.TAX_SHET_PUBLISH_YN = :taxShetPublishYn
                    AND     M.OCCUR_DATE <= :occurDate
                    
                    UNION ALL

                    SELECT M.OCCUR_ADVANCE_NUM AS ADVANCE_NUM                   -- 선수금 번호
                            ,DECODE(M.TAX_SHET_PUBLISH_YN, 'Y', M.SUPPLY_AMT , M.MEAL_TICKET_AMT) AS 선수금금액
                            , 0 AS 회계대체금액
                            ,      (SELECT  NVL(SUM(DD.AMT),0)
                                      FROM    SLA_IF_UPJANG_PAYMENT DD
                                      WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD='P3' AND DD.DDDD_CLOSE_YN = 'N'
                                      		AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM     ) AS 지불대체금액
                            ,DECODE(M.TAX_SHET_PUBLISH_YN, 'Y', M.SUPPLY_AMT , M.MEAL_TICKET_AMT) - (
                                      SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
                                      FROM    SLA_IF_UPJANG_PAYMENT DD
                                      WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD='P3' AND DD.DDDD_CLOSE_YN = 'N'
                                      		AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM
                            ) BAN_AMT
                    FROM    SLA_IF_MEAL_TICKET_SAL_MST M
                    WHERE   M.DDDD_CLOSE_YN = 'N'
                    AND     M.MU_CD = :muCd
                    AND     M.CC_CD = :ccCd
                    AND     M.ADVANCE_CLASS = '002'
                    AND     M.TAX_SHET_PUBLISH_YN = :taxShetPublishYn
                    AND     M.SALE_DATE <= :occurDate
         )
                    WHERE  BAN_AMT > 0
		]]>
	</statement>

	<!-- 선수금 차감 잔액을 조회한다(외상식권).. -->
	<statement name="selectMinusAdvanceAmtTicketP3" type="select">
		/*+
		com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectMinusAdvanceAmtTicketP3
		*/
		<![CDATA[
		SELECT * FROM
		(
				SELECT  M.ADVANCE_NUM                   -- 선수금 번호
		
		                            ,M.OCCUR_AMT AS 선수금금액
		
		                            ,      (SELECT  NVL(SUM(DD.APPLY_AMT),0)
		                                      FROM    SLA_ADVANCE_ALT_DETAIL DD
		                                      WHERE   DD.RECD_STATUS = 'L'
		                                      		AND     DD.ADVANCE_NUM = M.ADVANCE_NUM     ) AS 회계대체금액
		
		                            ,      (SELECT  NVL(SUM(DD.AMT),0)
		                                      FROM    SLA_IF_UPJANG_PAYMENT DD
		                                      WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD = 'P3' AND DD.DDDD_CLOSE_YN = 'N'
		                                      		AND     DD.EVIDENCE_1 = M.ADVANCE_NUM     ) AS 지불대체금액
		
		                            ,M.OCCUR_AMT - (
		                                      SELECT  NVL(SUM(DD.APPLY_AMT),0) AS BAL_AMT
		                                      FROM    SLA_ADVANCE_ALT_DETAIL DD
		                                      WHERE   DD.RECD_STATUS = 'L'
		                                      		AND     DD.ADVANCE_NUM = M.ADVANCE_NUM
		                           )-(
		                                      SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
		                                      FROM    SLA_IF_UPJANG_PAYMENT DD
		                                      WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD= 'P3' AND DD.DDDD_CLOSE_YN = 'N'
		                                      		AND     DD.EVIDENCE_1 = M.ADVANCE_NUM
		                            ) MINUS_ADVANCE_AMT
		
		                    FROM    SLA_ADVANCE_MST M
		                    WHERE   M.RECD_STATUS = 'L'
		                    AND     M.MU_CD = :muCd
		                    AND     M.CC_CD = :ccCd
		                    AND     M.ACCT_CD = (SELECT ACCT_CD FROM SLA_TYPE_CD_MST WHERE TYPE_CD = 'F10')
		                    AND     M.TAX_SHET_PUBLISH_YN = :taxShetPublishYn
		                    AND     M.OCCUR_DATE <= :occurDate
		                    
		                    UNION ALL

		                    SELECT M.OCCUR_ADVANCE_NUM AS ADVANCE_NUM                   -- 선수금 번호
		                            ,DECODE(M.TAX_SHET_PUBLISH_YN, 'Y', M.SUPPLY_AMT , M.MEAL_TICKET_AMT) AS 선수금금액
		                            , 0 AS 회계대체금액
		                            ,      (SELECT  NVL(SUM(DD.AMT),0)
		                                      FROM    SLA_IF_UPJANG_PAYMENT DD
		                                      WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD='P3' AND DD.DDDD_CLOSE_YN = 'N'
		                                      		AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM     ) AS 지불대체금액
		                            ,DECODE(M.TAX_SHET_PUBLISH_YN, 'Y', M.SUPPLY_AMT , M.MEAL_TICKET_AMT) - (
		                                      SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
		                                      FROM    SLA_IF_UPJANG_PAYMENT DD
		                                      WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD='P3' AND DD.DDDD_CLOSE_YN = 'N'
		                                      		AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM
		                            ) MINUS_ADVANCE_AMT
		                    FROM    SLA_IF_MEAL_TICKET_SAL_MST M
		                    WHERE   M.DDDD_CLOSE_YN = 'N'
		                    AND     M.MU_CD = :muCd
		                    AND     M.CC_CD = :ccCd
		                    AND     M.ADVANCE_CLASS = '002'
		                    AND     M.TAX_SHET_PUBLISH_YN = :taxShetPublishYn
		                    AND     M.SALE_DATE <= :occurDate
		 )
		                    WHERE  MINUS_ADVANCE_AMT > 0
		 ORDER BY ADVANCE_NUM ASC
		]]>
	</statement>

	<!-- 건별등록 권한을 체크 한다. -->
	<statement name="selectCloseModifyreq" type="select">
		/*+
		com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.selectCloseModifyreq */
		<![CDATA[
			SELECT DECODE(NVL(COUNT(*),0),0,'N','Y') AS APPRV_FLAG
			, TO_CHAR(APPRV_DATE, 'YYYYMMDD') AS APPRV_DATE
			  FROM MAS_CLOSE_MODIFYREQ
			WHERE UPJANG = :upjangCd
			AND CLOSE_GUBUN = '011'
			AND APPRV_GUBUN = 'Y'
			AND CLOSE_DATEFR <= :occurDate
			AND CLOSE_DATETO >= :occurDate
			GROUP BY TO_CHAR(APPRV_DATE, 'YYYYMMDD')
			ORDER BY APPRV_DATE DESC
		]]>
	</statement>

	<!-- 식권 판매 여부를 확인한다. -->
	<statement name="selectTicketMst" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO."selectTicketMst"
		*/
		<![CDATA[
			  SELECT COUNT(*)
          FROM   MAS_TICKET_MST 
          WHERE UPJANG = :upjangCd 
             AND TRANS_DD > :occurDate  
             AND ITEM_CODE = :materialCd
             AND TRANS_GUBUN = 'WW' 
		]]>
	</statement>

	<!-- 사업장별 오픈일자 조회. -->
	<statement name="selectOpenDate" type="select">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO."selectOpenDate" */
		<![CDATA[
		SELECT OPEN_DATE
		FROM SCO_UPJANG_MST
		WHERE UPJANG = :upjangCd
		]]>
	</statement>

	<!-- 선수금 선택 목록을 조회한다. -->
	<statement name="selectAdvanceAmtList" type="select">
		/*+ com.hwfs.fs.fsl.dao.AdvanceAmtPopupDAO.selectAdvanceAmtList
		*/
		<![CDATA[
		SELECT * FROM
        (
                SELECT  M.ADVANCE_NUM                   -- 선수금 번호
        
                       ,M.OCCUR_AMT AS 선수금금액

                       ,      (SELECT  NVL(SUM(DD.APPLY_AMT),0)
                                 FROM    SLA_ADVANCE_ALT_DETAIL DD
                                 WHERE   DD.RECD_STATUS = 'L'
                                         AND     DD.ADVANCE_NUM = M.ADVANCE_NUM     ) AS 회계대체금액

                       ,      (SELECT  NVL(SUM(DD.AMT),0)
                                 FROM    SLA_IF_UPJANG_PAYMENT DD
                                 WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD = 'P1' AND DD.DDDD_CLOSE_YN = 'N'
                                         AND     DD.EVIDENCE_1 = M.ADVANCE_NUM     ) AS 지불대체금액

                       ,M.OCCUR_AMT - (
                                 SELECT  NVL(SUM(DD.APPLY_AMT),0) AS BAL_AMT
                                 FROM    SLA_ADVANCE_ALT_DETAIL DD
                                 WHERE   DD.RECD_STATUS = 'L'
                                         AND     DD.ADVANCE_NUM = M.ADVANCE_NUM
                      )-(
                                 SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
                                 FROM    SLA_IF_UPJANG_PAYMENT DD
                                 WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD= 'P1'
                                         AND     DD.EVIDENCE_1 = M.ADVANCE_NUM
                                         AND DD.DDDD_CLOSE_YN = 'N'
                       ) MINUS_ADVANCE_AMT
                       ,M.OCCUR_DATE
                       ,M.CUST_CD
                       ,M.MU_CD
                       ,M.CC_CD
                       ,M.REMARK
                       ,M.WH_NUM POS_NUM
                       ,'선수일반' GUBUN
                       ,'0' CHK
                       , 0 SUM_AMT
               FROM    SLA_ADVANCE_MST M
               WHERE   M.RECD_STATUS = 'L'
               AND     M.ACCT_CD =(SELECT ACCT_CD FROM SLA_TYPE_CD_MST WHERE TYPE_CD = 'F02')
               <#if advanceNum?has_content>AND    M.ADVANCE_NUM = :advanceNum </#if>
               UNION ALL

               SELECT M.OCCUR_ADVANCE_NUM AS ADVANCE_NUM                   -- 선수금 번호
                       ,M.AMT AS 선수금금액
                       , 0 AS 회계대체금액
                       ,      (SELECT  NVL(SUM(DD.AMT),0)
                                 FROM    SLA_IF_UPJANG_PAYMENT DD
                                 WHERE   DD.RECD_STATUS = 'L' AND DD.PAY_CD='P1' AND DD.DDDD_CLOSE_YN = 'N'
                                         AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM     ) AS 지불대체금액
                       ,M.AMT - (
                                 SELECT  NVL(SUM(DD.AMT),0) AS BAL_AMT
                                 FROM    SLA_IF_UPJANG_PAYMENT DD
                                 WHERE   DD.RECD_STATUS = 'L'  AND DD.PAY_CD='P1'
                                         AND     DD.EVIDENCE_1 = M.OCCUR_ADVANCE_NUM
                                         AND DD.DDDD_CLOSE_YN = 'N'
                       ) MINUS_ADVANCE_AMT
                       ,M.OCCUR_DATE
                       ,M.CUST_CD
                       ,M.MU_CD
                       ,M.CC_CD
                       ,M.REMARK
                       ,M.POS_GUESTINFO POS_NUM
                       ,'선수일반' GUBUN
                       ,'0' CHK
                       , 0 SUM_AMT
               FROM    SLA_IF_ADVANCE_OCCUR M
               WHERE   M.DDDD_CLOSE_YN = 'N'
               AND     M.ADVANCE_CLASS = '003'
<#if advanceNum?has_content>AND    M.OCCUR_ADVANCE_NUM = :advanceNum </#if>               
         )
                            WHERE  MINUS_ADVANCE_AMT > 0
         ORDER BY ADVANCE_NUM ASC

		]]>
	</statement>
	
	
	<!-- 채권마스터의 적요를 수정한다. -->
	<statement name="ar_update" type="update">
		/*+ com.hwfs.fs.fsl.dao.UpjangSaleRegMgntDAO.ar_update */
		<![CDATA[
		UPDATE SLA_AR_MST SET
			<#if remark?has_content> REMARK = :remark, </#if>
			       UDATE = SYSDATE,
			       UUSER = :loginSabun
			WHERE  OCCUR_DATE = :occurDate
			AND    SYS_CLASS = :sysClass
			AND    UPJANG_CD = :upjangCd
			AND    MU_CD = :muCd
			AND	   RECEIPT_NUM IS NOT NULL
			AND    RECEIPT_NUM = :receiptNum
		]]>
	</statement>

</hqml>
