<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="ls.lrm.testRegInqueryDAO">
	<desc>시험목록 조회/취소</desc>

	<!-- 시험접수목록 DATA를 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestRegInqueryDAO.selectList */
		<![CDATA[
/* 접수검체목록 조회 */
SELECT A.REQ_NUM
     , A.REQ_DATE
     , A.ACCEPTNM
     , A.UPJANG_NM
     , A.ORG_NM
     , (SELECT COUNT(1)
          FROM LRM_SPECM_INFO B
         WHERE A.REQ_NUM = B.REQ_NUM) AS SPECM_CNT		/* 검체목록건수 */
     , (
        SELECT NVL(SUM(DECODE(Y.COMM_1_USE_YN, 'Y', SUM(Y.COMM_1), 0)) +
                   SUM(DECODE(Y.COMM_2_USE_YN, 'Y', SUM(Y.COMM_2), 0)) +
                   SUM(DECODE(Y.COMM_3_USE_YN, 'Y', SUM(Y.COMM_3), 0)) +
                   SUM(DECODE(Y.COMM_4_USE_YN, 'Y', SUM(Y.COMM_4), 0)) +
                   SUM(DECODE(Y.COMM_5_USE_YN, 'Y', SUM(Y.COMM_5), 0)), 0)
          FROM LRM_SPECM_INFO X
             , LRM_TEST_INFO Y
         WHERE 1 = 1
           AND X.REQ_NUM = A.REQ_NUM
           AND X.REQ_NUM = Y.REQ_NUM
           AND X.ACCEPT_NUM = Y.ACCEPT_NUM
           --AND X.COST_CLASS = '102' -- 유상
         GROUP BY Y.COMM_1_USE_YN, Y.COMM_2_USE_YN, Y.COMM_3_USE_YN, Y.COMM_4_USE_YN, Y.COMM_5_USE_YN
       ) AS COMM_TOT_AMT
     , (SELECT X.NM_KOR
          FROM SCC_USERINFO X
         WHERE X.SABUN = A.CUSER) AS USER_NM		/* 접수자 */
     , (SELECT MAX(ACCEPTDD)
          FROM LRM_SPECM_INFO B
         WHERE A.REQ_NUM = B.REQ_NUM) AS ACCEPTDD		/* 접수일자 */
     , U.PROC_CLASS AS PROGRESS_STATUS	/* 진행상태 */
     , U.PROC_REASON  /* 취소/반려사유 */
     , (SELECT X.NM_KOR
          FROM SCC_USERINFO X
         WHERE X.SABUN = U.PROC_USER) AS PROC_USER_NM  /* 처리자 */
     , U.PROCDD  /* 처리일자 */
  FROM LRM_TEST_REQ_ACCEPT A
     , (
        SELECT PD.REQ_NUM
             , PD.PROC_USER
             , PD.PROCDD
             , PD.PROC_REASON
             , PD.PROC_CLASS
             , PD.SEQ
          FROM (
                SELECT Y.REQ_NUM
                     , Y.PROC_USER
                     , Y.PROCDD
                     , Y.PROC_REASON
                     , Y.PROC_CLASS
                     , Y.SEQ
                     , ROW_NUMBER() OVER (PARTITION BY Y.REQ_NUM ORDER BY Y.REQ_NUM, Y.SEQ DESC) AS RN
                  FROM LRM_PROC_DESC Y
               ) PD
         WHERE RN = 1
       ) U
 WHERE 1 = 1
   AND A.REQ_NUM = U.REQ_NUM(+)
<#if toDay?has_content> AND A.REQ_DATE BETWEEN :fromDay AND :toDay </#if>
<#if acceptNm?has_content> AND A.ACCEPTNM LIKE '%' || :acceptNm || '%' </#if>
<#if progressStatus?has_content> AND U.PROC_CLASS = :progressStatus </#if>
 ORDER BY A.REQ_NUM DESC
        ]]>
	</statement>

	<!-- 접수검체목록 DATA를 조회한다. -->
	<statement name="selectAcceptSpecmList" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestRegInqueryDAO.selectAcceptSpecmList
		*/
		<![CDATA[
/* 접수검체목록 조회 */
SELECT A.REQ_NUM,
       A.ACCEPT_NUM,
       A.ACCEPTDD,
       A.SPECM_CD,						/* 검체 코드 */
       A.SPECM_CLASS,					/* 검체 분류 */
       A.SPECM_NM,						/* 검체명 */
       A.SPECM_TYPE,					/* 검체유형(공전유형) */
       A.MGRP_CD,						/* 검체유형 대분류 */
       A.MCALSS_CD,						/* 검체유형 중분류 */
       A.SCLASS_CD,						/* 검체유형 소분류 */
       ((SELECT X.MGRP_NM FROM LCM_SPECM_TYPE_MGRP X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MGRP_CD = A.MGRP_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MCALSS_CD = A.MCALSS_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.SCLASS_NM FROM LCM_SPECM_TYPE_SCLASS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.SCLASS_CD = A.SCLASS_CD AND X.USE_YN = 'Y'))
       AS SPECM_TYPE_NM,				/* 검체 유형명 ( 대분류명 / 중분류명 / 소분류명 ) */
       A.SPECM_TYPE_PCLS,
       SCC_CODE_NM('SPECM_TYPE_PCLS', A.SPECM_TYPE_PCLS) AS SPECM_TYPE_PCLS_NM,	/* 세부 검체 유형 */
       A.COST_CLASS,					/* 비용 */
       SCC_CODE_NM('COST_CLASS', A.COST_CLASS) AS COST_CLASS_NM,
       A.INSPT_MTOD,					/* 검사방법 */
       SCC_CODE_NM('INSPT_MTOD', A.INSPT_MTOD) AS INSPT_MTOD_NM,
       A.INSPT_CLASS,					/* 검사구분 */
       SCC_CODE_NM('INSPT_CLASS', A.INSPT_CLASS) AS INSPT_CLASS_NM,
       A.INSPT_PURP_1,					/* 검사목적1 */
       SCC_CODE_NM('INSPT_PURP_1', A.INSPT_PURP_1) AS INSPT_PURP_1_NM,
       A.INSPT_PURP_2,					/* 검사목적2 */
       SCC_CODE_NM('INSPT_PURP_2', A.INSPT_PURP_2) AS INSPT_PURP_2_NM,
       A.INSPT_PURP_3,					/* 검사목적3 */
       SCC_CODE_NM('INSPT_PURP_3', A.INSPT_PURP_3) AS INSPT_PURP_3_NM,
       A.SPECM_WTRLST_NM,               /* 검체물성 */
       SCC_CODE_NM('SPECM_WTRLST_NM', A.SPECM_WTRLST_NM) SPECM_WTRLST_NM_NM,
       A.LONGSTORAGE_YN,                /* 장기보존여부 */
       SCC_CODE_NM('LONGSTORAGE_YN', A.LONGSTORAGE_YN) AS LONGSTORAGE_YN_NM,
       A.INSPTBEFORE_SPECM_STATUS,      /* 검사전검체상태 */
       SCC_CODE_NM('INSPTBEFORE_SPECM_STATUS', A.INSPTBEFORE_SPECM_STATUS) AS INSPTBEFORE_SPECM_STATUS_NM,
       A.PICK_STATUS,                   /* 채취상태 */
       SCC_CODE_NM('PICK_STATUS', A.PICK_STATUS) AS PICK_STATUS_NM,
       A.INSPT_OBJ_1,                   /* 검사대상1 */
       SCC_CODE_NM('INSPT_OBJ_1', INSPT_OBJ_1) AS INSPT_OBJ_1_NM,
       A.INSPT_OBJ_2,                   /* 검사대상2 */
       SCC_CODE_NM('INSPT_OBJ_2', A.INSPT_OBJ_2) AS INSPT_OBJ_2_NM,
       A.INSPT_OBJ_3,                   /* 검사대상3 */
       SCC_CODE_NM('INSPT_OBJ_3', A.INSPT_OBJ_3) AS INSPT_OBJ_3_NM,
       A.INSPT_OBJ_4,                   /* 검사대상4 */
       SCC_CODE_NM('INSPT_OBJ_4', A.INSPT_OBJ_4) AS INSPT_OBJ_4_NM,
       A.MFGWON,                        /* 제조원 */
       A.DTR_VENDOR,                    /* 유통업체 */
       A.ACCEPTCITY_TEMPR,              /* 접수시품온 */
       A.STAND,                         /* 규격 */
       A.UNIT,                          /* 단위 */
       A.ORIGIN,                        /* 원산지 */
       A.CHARG_BASIS,                   /* 보관기준 */
       SCC_CODE_NM('CHARG_BASIS', A.CHARG_BASIS) AS CHARG_BASIS_NM,
       A.MFGDD,                         /* 제조일자 */
       A.DTRLIMT,                       /* 유통기한 */
       A.DTRLIMT_MTS,                   /* 유통기한 월 */
       A.DTRLIMT_DD,                    /* 유통기한 일 */
       A.SPECM_DELIVER_PCLSFACT,        /* 검체입고시 세부사항 */
       A.CUSER,                         /*  */
       A.CDATE,                         /*  */
       A.UUSER,                         /*  */
       A.UDATE                          /*  */
FROM   LRM_SPECM_INFO A
WHERE  A.REQ_NUM = :reqNum
ORDER  BY A.ACCEPT_NUM, A.SPECM_NM
        ]]>
	</statement>

	<!-- 접수내역을 상태를 저장 한다. -->
	<statement name="saveTestReqStatus" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestRegInqueryDAO.saveTestReqStatus */
		<![CDATA[
/* 접수내역을 상태를 저장 한다. */
UPDATE LRM_TEST_REQ_ACCEPT SET
       PROGRESS_STATUS = :procClass,
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  REQ_NUM = :reqNum
        ]]>
	</statement>

	<!-- 검체내역을 상태를 저장 한다. -->
	<statement name="saveSpecmInfoStatus" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestRegInqueryDAO.saveSpecmInfoStatus */
		<![CDATA[
/* 검체내역을 상태를 저장 한다. */
UPDATE LRM_SPECM_INFO SET
       PROGRESS_STATUS = :procClass,
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  REQ_NUM = :reqNum
        ]]>
	</statement>

	<!-- 시험내역을 상태를 저장 한다. -->
	<statement name="saveTestInfoStatus" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestRegInqueryDAO.saveTestInfoStatus */
		<![CDATA[
/* 시험내역을 상태를 저장 한다. */
UPDATE LRM_TEST_INFO SET
       PROGRESS_STATUS = :procClass,
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  REQ_NUM = :reqNum
        ]]>
	</statement>

	<!-- 라벨출력 대상 목록을 조회한다. -->
	<statement name="selectSpecmLabelPrtList" type="select">
		/*+
		com.hwfs.ls.lrm.dao.TestRegInqueryDAO.selectSpecmLabelPrtList */
		<![CDATA[
/* 라벨출력 대상 목록 조회 */
SELECT '0' AS CHK,
       B.REQ_DATE,
       A.REQ_NUM,
       B.ACCEPTNM,
       A.ACCEPT_NUM,
       A.ACCEPTDD,
       A.SPECM_CD,                      /* 검체 코드 */
       A.SPECM_CLASS,                   /* 검체 분류 */
       A.SPECM_NM,                      /* 검체명 */
       A.SPECM_TYPE,                    /* 검체유형(공전유형) */
       SCC_CODE_NM('SPECM_TYPE', A.SPECM_TYPE) AS SPECM_TYPE_NM,    /* 검체유형(공전유형)명 */
       A.MGRP_CD,                       /* 검체유형 대분류 */
       A.MCALSS_CD,                     /* 검체유형 중분류 */
       A.SCLASS_CD,                     /* 검체유형 소분류 */
       ((SELECT X.MGRP_NM FROM LCM_SPECM_TYPE_MGRP X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MGRP_CD = A.MGRP_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MCALSS_CD = A.MCALSS_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.SCLASS_NM FROM LCM_SPECM_TYPE_SCLASS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.SCLASS_CD = A.SCLASS_CD AND X.USE_YN = 'Y'))
       AS SPECM_TYPE_DESC,              /* 검체 유형명 ( 대분류명 / 중분류명 / 소분류명 ) */
       A.INSPT_MTOD,                    /* 검사방법 */
       SCC_CODE_NM('INSPT_MTOD', A.INSPT_MTOD) AS INSPT_MTOD_NM,
       A.INSPT_CLASS,                   /* 검사구분 */
       SCC_CODE_NM('INSPT_CLASS', A.INSPT_CLASS) AS INSPT_CLASS_NM,
       A.INSPT_PURP_1,                  /* 검사목적1 */
       SCC_CODE_NM('INSPT_PURP_1', A.INSPT_PURP_1) AS INSPT_PURP_1_NM,
       A.INSPT_PURP_2,                  /* 검사목적2 */
       SCC_CODE_NM('INSPT_PURP_2', A.INSPT_PURP_2) AS INSPT_PURP_2_NM,
       A.INSPT_PURP_3,                  /* 검사목적3 */
       SCC_CODE_NM('INSPT_PURP_3', A.INSPT_PURP_3) AS INSPT_PURP_3_NM,
       A.LONGSTORAGE_YN,                /* 장기보존여부 */
       SCC_CODE_NM('LONGSTORAGE_YN', A.LONGSTORAGE_YN) AS LONGSTORAGE_YN_NM,
       A.INSPT_OBJ_1,                   /* 검사대상1 */
       SCC_CODE_NM('INSPT_OBJ_1', A.INSPT_OBJ_1) AS INSPT_OBJ_1_NM,
       A.INSPT_OBJ_2,                   /* 검사대상2 */
       SCC_CODE_NM('INSPT_OBJ_2', A.INSPT_OBJ_2) AS INSPT_OBJ_2_NM,
       A.INSPT_OBJ_3,                   /* 검사대상3 */
       SCC_CODE_NM('INSPT_OBJ_3', A.INSPT_OBJ_3) AS INSPT_OBJ_3_NM,
       A.INSPT_OBJ_4,                   /* 검사대상4 */
       SCC_CODE_NM('INSPT_OBJ_4', A.INSPT_OBJ_4) AS INSPT_OBJ_4_NM,
       A.ORIGIN                        /* 원산지 */
     , CASE WHEN (SELECT COUNT(1) FROM LRM_TEST_INFO WHERE REQ_NUM = A.REQ_NUM) =
                 (SELECT COUNT(1) FROM LTM_TEST_DIARY WHERE REQ_NUM = A.REQ_NUM AND LAST_DECISION IS NOT NULL)
            THEN
              (SELECT TO_CHAR(MAX(UDATE), 'YYYYMMDD')
                 FROM LTM_TEST_DIARY
                WHERE REQ_NUM = A.REQ_NUM)
            ELSE
              ''
       END AS COMPLETE_DD   /* 시험완료일자 */
     , B.UPJANG_NM
     , SCC_CODE_NM('ACCEPT_CLASS', B.ACCEPT_CLASS) AS ACCEPT_CLASS
     , U.PROC_CLASS AS PROGRESS_STATUS  /* 진행상태 */
     , SCC_CODE_NM('PROGRESS_STATUS', U.PROC_CLASS) AS PROGRESS_STATUS_NM   /* 진행상황 */
     , CASE WHEN U.PROC_CLASS >= '200' THEN /* 시험완료 승인 */
          'Y'
       ELSE
          'N'
       END AS COMPLETE_YN   /* 시험완료승인 */
     , (
         SELECT COUNT(1)
           FROM LEM_INSPECT_RPT_ISSUE_LOG
          WHERE REQ_NUM = A.REQ_NUM
            AND PUBLISHDD IS NOT NULL
       ) AS PUBLISH_CNT /* 발급횟수 */
     , DECODE(B.INSPECT_RPT_ISSUE, NULL, 'N', B.INSPECT_RPT_ISSUE) AS INSPECT_RPT_ISSUE    /* 성적서 발급 여부 */
     , H.INSPT_FLD_NM || '/' || H.NOT_FIT_CLSFI_NM AS NOT_FIT_CLSFI_NM    /* 검사분야 / 부적합분류 */
FROM   LRM_SPECM_INFO A
     , LRM_TEST_REQ_ACCEPT B
     , (
        SELECT PD.REQ_NUM
             , PD.PROC_USER
             , PD.PROCDD
             , PD.PROC_REASON
             , PD.PROC_CLASS
             , PD.SEQ
          FROM (
                SELECT Y.REQ_NUM
                     , Y.PROC_USER
                     , Y.PROCDD
                     , Y.PROC_REASON
                     , Y.PROC_CLASS
                     , Y.SEQ
                     , ROW_NUMBER() OVER (PARTITION BY Y.REQ_NUM ORDER BY Y.REQ_NUM, Y.SEQ DESC) AS RN
                  FROM LRM_PROC_DESC Y
               ) PD
         WHERE RN = 1
       ) U
     , (
        SELECT NF.REQ_NUM
             , NF.ACCEPT_NUM
             , NF.INSPT_FLD_NM
             , NF.NOT_FIT_CLSFI_NM
          FROM (
                 SELECT /*+ INDEX_FFS(Y) */
                        Y.REQ_NUM
                      , Y.ACCEPT_NUM
                      , P.INSPT_FLD
                      , SCC_CODE_NM('INSPT_FLD', P.INSPT_FLD) AS INSPT_FLD_NM
                      , Y.LAST_DECISION
                      , P.ARTICLE_NM
                      , P.NOT_FIT_CLSFI
                      , SCC_CODE_NM('NOT_FIT_CLSFI', P.NOT_FIT_CLSFI) AS NOT_FIT_CLSFI_NM
                      , ROW_NUMBER() OVER(PARTITION BY Y.REQ_NUM, Y.ACCEPT_NUM ORDER BY Y.REQ_NUM, Y.ACCEPT_NUM, P.NOT_FIT_CLSFI DESC) AS RN
                   FROM LTM_TEST_DIARY Y
                      , LCM_TEST_ARTICLE P
                  WHERE 1 = 1
                    AND Y.ARTICLE_CD = P.ARTICLE_CD
                    AND Y.LAST_DECISION <> '101'
               ) NF
         WHERE NF.RN = 1
       ) H
WHERE  1 = 1
  AND  A.REQ_NUM = B.REQ_NUM
  AND  A.REQ_NUM = U.REQ_NUM(+)
  AND  A.REQ_NUM = H.REQ_NUM(+)
  AND  A.ACCEPT_NUM = H.ACCEPT_NUM(+)
<#if toDay?has_content> AND B.REQ_DATE BETWEEN :fromDay AND :toDay </#if>
<#if specmNm?has_content> AND A.SPECM_NM LIKE '%' || :specmNm || '%' </#if>
ORDER  BY A.REQ_NUM, A.ACCEPT_NUM
        ]]>
	</statement>

	<!-- 시험결과 구매 전송 대상 목록을 조회한다. -->
	<statement name="testResultItemSendMgmtList" type="select">
		/*+
		com.hwfs.ls.lrm.dao.TestRegInqueryDAO.testResultItemSendMgmtList
		*/
		<![CDATA[
/* 시험결과 구매 전송 대상 목록을 조회 */
SELECT B.REQ_DATE,
       A.REQ_NUM,
       B.ACCEPTNM,
       A.ACCEPT_NUM,
       A.ACCEPTDD,
       A.SPECM_CD,                      /* 검체 코드 */
       A.SPECM_CLASS,                   /* 검체 분류 */
       A.SPECM_NM,                      /* 검체명 */
       A.SPECM_TYPE,                    /* 검체유형(공전유형) */
       SCC_CODE_NM('SPECM_TYPE', A.SPECM_TYPE) AS SPECM_TYPE_NM,    /* 검체유형(공전유형)명 */
       A.MGRP_CD,                       /* 검체유형 대분류 */
       A.MCALSS_CD,                     /* 검체유형 중분류 */
       A.SCLASS_CD,                     /* 검체유형 소분류 */
       ((SELECT X.MGRP_NM FROM LCM_SPECM_TYPE_MGRP X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MGRP_CD = A.MGRP_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MCALSS_CD = A.MCALSS_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.SCLASS_NM FROM LCM_SPECM_TYPE_SCLASS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.SCLASS_CD = A.SCLASS_CD AND X.USE_YN = 'Y'))
       AS SPECM_TYPE_DESC,              /* 검체 유형명 ( 대분류명 / 중분류명 / 소분류명 ) */
       A.INSPT_MTOD,                    /* 검사방법 */
       SCC_CODE_NM('INSPT_MTOD', A.INSPT_MTOD) AS INSPT_MTOD_NM,
       A.INSPT_CLASS,                   /* 검사구분 */
       SCC_CODE_NM('INSPT_CLASS', A.INSPT_CLASS) AS INSPT_CLASS_NM,
       A.INSPT_PURP_1,                  /* 검사목적1 */
       SCC_CODE_NM('INSPT_PURP_1', A.INSPT_PURP_1) AS INSPT_PURP_1_NM,
       A.INSPT_PURP_2,                  /* 검사목적2 */
       SCC_CODE_NM('INSPT_PURP_2', A.INSPT_PURP_2) AS INSPT_PURP_2_NM,
       A.INSPT_PURP_3,                  /* 검사목적3 */
       SCC_CODE_NM('INSPT_PURP_3', A.INSPT_PURP_3) AS INSPT_PURP_3_NM,
       A.LONGSTORAGE_YN,                /* 장기보존여부 */
       SCC_CODE_NM('LONGSTORAGE_YN', A.LONGSTORAGE_YN) AS LONGSTORAGE_YN_NM,
       A.INSPT_OBJ_1,                   /* 검사대상1 */
       SCC_CODE_NM('INSPT_OBJ_1', A.INSPT_OBJ_1) AS INSPT_OBJ_1_NM,
       A.INSPT_OBJ_2,                   /* 검사대상2 */
       SCC_CODE_NM('INSPT_OBJ_2', A.INSPT_OBJ_2) AS INSPT_OBJ_2_NM,
       A.INSPT_OBJ_3,                   /* 검사대상3 */
       SCC_CODE_NM('INSPT_OBJ_3', A.INSPT_OBJ_3) AS INSPT_OBJ_3_NM,
       A.INSPT_OBJ_4,                   /* 검사대상4 */
       SCC_CODE_NM('INSPT_OBJ_4', A.INSPT_OBJ_4) AS INSPT_OBJ_4_NM,
       A.ORIGIN                        /* 원산지 */
     , CASE WHEN (SELECT COUNT(1) FROM LRM_TEST_INFO WHERE REQ_NUM = A.REQ_NUM) =
                 (SELECT COUNT(1) FROM LTM_TEST_DIARY WHERE REQ_NUM = A.REQ_NUM AND LAST_DECISION IS NOT NULL)
            THEN
              (SELECT TO_CHAR(MAX(UDATE), 'YYYYMMDD')
                 FROM LTM_TEST_DIARY
                WHERE REQ_NUM = A.REQ_NUM)
            ELSE
              ''
       END AS COMPLETE_DD   /* 시험완료일자 */
     , B.UPJANG_NM
     , SCC_CODE_NM('ACCEPT_CLASS', B.ACCEPT_CLASS) AS ACCEPT_CLASS
     , U.PROC_CLASS AS PROGRESS_STATUS  /* 진행상태 */
     , SCC_CODE_NM('PROGRESS_STATUS', U.PROC_CLASS) AS PROGRESS_STATUS_NM   /* 진행상황 */
     , CASE WHEN U.PROC_CLASS >= '200' THEN /* 시험완료 승인 */
          'Y'
       ELSE
          'N'
       END AS COMPLETE_YN   /* 시험완료승인 */
     , (
         SELECT COUNT(1)
           FROM LEM_INSPECT_RPT_ISSUE_LOG
          WHERE REQ_NUM = A.REQ_NUM
            AND PUBLISHDD IS NOT NULL
       ) AS PUBLISH_CNT /* 발급횟수 */
     , DECODE(B.INSPECT_RPT_ISSUE, NULL, 'N', B.INSPECT_RPT_ISSUE) AS INSPECT_RPT_ISSUE    /* 성적서 발급 여부 */
     , H.INSPT_FLD_NM || '/' || H.NOT_FIT_CLSFI_NM AS NOT_FIT_CLSFI_NM    /* 검사분야 / 부적합분류 */

     , I.MATERIAL_SEND_RESULT      /* 전송결과 (S:STOP, P:PASS) */
     , DECODE(I.MATERIAL_UPJANG_SEND_RESULT, '102', '102', '103', '103', '101') AS MATERIAL_UPJANG_SEND_RESULT      /* 업장구분전송결과 */
     , I.UDATE AS SEND_DATE    /* 전송 일자 */
     , (SELECT NM_KOR
          FROM SCC_USERINFO
         WHERE SABUN = I.UUSER) AS SEND_USER
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '01'), 'TK', 'S', 'P') AS MATERIAL_STATUS_1 /* 자재쪽 직영 실제 중지/사용 상태 */
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '01'), 'TK', '중지', '사용') AS MATERIAL_STATUS_NM_1 /* 자재쪽 직영 실제 중지/사용 상태명 */
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '02'), 'TK', 'S', 'P') AS MATERIAL_STATUS_2 /* 자재쪽 식재 실제 중지/사용 상태 */
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '02'), 'TK', '중지', '사용') AS MATERIAL_STATUS_NM_2 /* 자재쪽 식재 실제 중지/사용 상태명 */

     , CASE WHEN DECODE(I.MATERIAL_UPJANG_SEND_RESULT, '102', '102', '101') = '101' THEN   /* 직영 자재 상태 상이 체크 */
                 CASE WHEN DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '01'), 'TK', 'S', 'P') != I.MATERIAL_SEND_RESULT THEN
                           'Y'
                 ELSE
                           'N'
                 END
       END AS MATERIAL_STATUS_DIP_1 /* LIMS의 최종상태와 자재 직영 상태 상이 여부 체크 */
     , CASE WHEN DECODE(I.MATERIAL_UPJANG_SEND_RESULT, '102', '102', '101') = '102' THEN     /* 식재 자재 상태 상이 체크 */
                 CASE WHEN DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '02'), 'TK', 'S', 'P') != I.MATERIAL_SEND_RESULT THEN
                           'Y'
                 ELSE
                           'N'
                 END
       END AS MATERIAL_STATUS_DIP_2 /* LIMS의 최종상태와 자재 식재 상태 상이 여부 체크 */

     , EPROCUSR.FN_ITEM_PROCURE_MTG_UNS('100', A.SPECM_CD) AS ITEM_UNS /* 불용자재 상태(UP:가용, 나머지:불용) */
     , (
         SELECT MAX(SIGN_INSTANCE_ID)
           FROM LRM_ELCTNSIGN_INFO
          WHERE REQ_NUM = A.REQ_NUM
            AND ACCEPT_NUM = A.ACCEPT_NUM
            AND SEQ = 5 /* 1:최종결재, 2:부적합결재, 3:성적서발급결재, 4:성적서재발급결재, 5:시험결과 구매 전송 */
       ) AS SIGN_INSTANCE_ID    /* 전자결재 ID */
     , CASE WHEN EXISTS (
                        SELECT 1
                          FROM LRM_ELCTNSIGN_INFO
                         WHERE REQ_NUM = A.REQ_NUM
                           AND ACCEPT_NUM = A.ACCEPT_NUM
                           AND SEQ = 5 /* 1:최종결재, 2:부적합결재, 3:성적서발급결재, 4:성적서재발급결재, 5:시험결과 구매 전송 */
                        ) THEN
                 (SELECT NVL(SCC_SIGN_STATUS_FUN(MAX(SIGN_INSTANCE_ID)), 'DRAFT')   /* 결재상태가 1분정도 걸리기때문에 */
                    FROM LRM_ELCTNSIGN_INFO
                   WHERE REQ_NUM = A.REQ_NUM
                     AND ACCEPT_NUM = A.ACCEPT_NUM
                     AND SEQ = 5) /* 1:최종결재, 2:부적합결재, 3:성적서발급결재, 4:성적서재발급결재, 5:시험결과 구매 전송 */
       END AS SIGN_PROGRESS_STATUS    /* 전자결재 상태 */
     , DECODE(B.ACCEPT_CLASS, '102', '식재', '직영') AS UPJANG_ACCEPT_CLASS_NM
     , DECODE(B.ACCEPT_CLASS, '102', '102', '101') AS UPJANG_ACCEPT_CLASS
     , H.TRANS_YN   /* 전송가능여부(공통코드:부적합분류[NOT_FIT_CLSFI] 에서 체크) */
FROM   LRM_SPECM_INFO A
     , LRM_TEST_REQ_ACCEPT B
     , (
        SELECT PD.REQ_NUM
             , PD.PROC_USER
             , PD.PROCDD
             , PD.PROC_REASON
             , PD.PROC_CLASS
             , PD.SEQ
          FROM (
                SELECT Y.REQ_NUM
                     , Y.PROC_USER
                     , Y.PROCDD
                     , Y.PROC_REASON
                     , Y.PROC_CLASS
                     , Y.SEQ
                     , ROW_NUMBER() OVER (PARTITION BY Y.REQ_NUM ORDER BY Y.REQ_NUM, Y.SEQ DESC) AS RN
                  FROM LRM_PROC_DESC Y
               ) PD
         WHERE RN = 1
       ) U
     , (
        SELECT NF.REQ_NUM
             , NF.ACCEPT_NUM
             , NF.INSPT_FLD_NM
             , NF.NOT_FIT_CLSFI_NM
             , NF.INSPT_FLD
             , NF.NOT_FIT_CLSFI
             , (
                SELECT CASE WHEN COUNT(1) > 0 THEN 'Y'
                            ELSE 'N'
                       END
                  FROM SCC_COMMON_CODE
                 WHERE GROUP_CODE = 'NOT_FIT_CLSFI'
                   AND CODE = NF.NOT_FIT_CLSFI
                   AND SET1 = '1'
                   AND (('101' = NF.INSPT_FLD AND SET2 = '1')  -- 미생물
                     OR ('102' = NF.INSPT_FLD AND SET3 = '1'))  -- 이화학
               ) AS TRANS_YN
          FROM (
                 SELECT /*+ INDEX_FFS(Y) */
                        Y.REQ_NUM
                      , Y.ACCEPT_NUM
                      , P.INSPT_FLD
                      , SCC_CODE_NM('INSPT_FLD', P.INSPT_FLD) AS INSPT_FLD_NM
                      , Y.LAST_DECISION
                      , P.ARTICLE_NM
                      , P.NOT_FIT_CLSFI
                      , SCC_CODE_NM('NOT_FIT_CLSFI', P.NOT_FIT_CLSFI) AS NOT_FIT_CLSFI_NM
                      , ROW_NUMBER() OVER(PARTITION BY Y.REQ_NUM, Y.ACCEPT_NUM ORDER BY Y.REQ_NUM, Y.ACCEPT_NUM, P.NOT_FIT_CLSFI ,Y.LAST_DECISION DESC) AS RN
                   FROM LTM_TEST_DIARY Y
                      , LCM_TEST_ARTICLE P
                  WHERE 1 = 1
                    AND Y.ARTICLE_CD = P.ARTICLE_CD
                    AND Y.LAST_DECISION IS NOT NULL
                    --AND Y.LAST_DECISION <> '101'    /* 적합은 제외 */
               ) NF
         WHERE NF.RN = 1
       ) H
     , LRM_MATERIAL_INFO I
WHERE  1 = 1
  AND  A.REQ_NUM = B.REQ_NUM
  AND  A.REQ_NUM = U.REQ_NUM
  AND  A.REQ_NUM = H.REQ_NUM
  AND  A.ACCEPT_NUM = H.ACCEPT_NUM
  AND  A.REQ_NUM = I.REQ_NUM
  AND  A.ACCEPT_NUM = I.ACCEPT_NUM
  AND  A.SPECM_CD = I.SPECM_CD
  --AND  SUBSTR(A.SPECM_CD, 1, 1) != 'C'
  AND  A.SPECM_CLASS = '101'    /* 등록제품(거래중인 식재료) */
  AND  U.PROC_CLASS >= '200'    /* 시험완료승인 이후의 데이터 조회 */
<#if toDay?has_content> AND B.REQ_DATE BETWEEN :fromDay AND :toDay </#if>
<#if sendResult?has_content>
    AND EXISTS (
                SELECT 1
                  FROM LRM_MATERIAL_INFO LM
                 WHERE LM.REQ_NUM = A.REQ_NUM
                   AND LM.ACCEPT_NUM = A.ACCEPT_NUM
                   AND LM.MATERIAL_SEND_RESULT = :sendResult
               )
</#if>
<#if specmNm?has_content> AND A.SPECM_NM LIKE '%' || :specmNm || '%' </#if>
<#if upjangNm?has_content> AND B.UPJANG_NM LIKE '%' || :upjangNm || '%' </#if>
--부적합 구매전송 대상이 아닌것도 구매로 전송되어 수정  처리일 : 20160323 맹수영  요청자 :최준열
--AND H.TRANS_YN = 'Y'
ORDER  BY A.REQ_NUM DESC, A.ACCEPT_NUM
        ]]>
	</statement>

	<!-- Q-Stop 시험결과 마스터 조회 -->
	<statement name="testResultItemSendMasterList" type="select">
		/*+
		com.hwfs.ls.lrm.dao.TestRegInqueryDAO.testResultItemSendMasterList
		*/
		<![CDATA[
SELECT A.UPJANG_NM || ' > ' ||
       B.INSPT_OBJ_1_NM || ' > ' || B.INSPT_OBJ_2_NM || ' > ' || B.INSPT_OBJ_3_NM AS INSPT_OBJ /* 검사분류 */
     , TO_CHAR(TO_DATE(B.ACCEPTDD, 'YYYYMMDD'), 'YYYY. MM. DD') AS ACCEPTDD    /* 접수일자 */
     , CASE WHEN (SELECT COUNT(1) FROM LRM_TEST_INFO WHERE REQ_NUM = A.REQ_NUM) =
                 (SELECT COUNT(1) FROM LTM_TEST_DIARY WHERE REQ_NUM = A.REQ_NUM AND LAST_DECISION IS NOT NULL)
            THEN
              TO_CHAR(TO_DATE((SELECT TO_CHAR(MAX(UDATE), 'YYYYMMDD')
                 FROM LTM_TEST_DIARY
                WHERE REQ_NUM = A.REQ_NUM), 'YYYYMMDD'), 'YYYY. MM. DD')
            ELSE
              TO_CHAR(TO_DATE((SELECT TO_CHAR(MAX(UDATE), 'YYYYMMDD')
                 FROM LTM_TEST_DIARY
                WHERE REQ_NUM = A.REQ_NUM), 'YYYYMMDD'), 'YYYY. MM. DD')    /* 부적합상신때문에 추가 */
       END AS COMPLETE_DD    /* 시험완료일자 */
     , A.UPJANG
     , B.SPECM_CD
  FROM LRM_TEST_REQ_ACCEPT A
     , (
         SELECT *
           FROM (
                 SELECT SCC_CODE_NM('INSPT_OBJ_1', INSPT_OBJ_1) AS INSPT_OBJ_1_NM
                      , SCC_CODE_NM('INSPT_OBJ_2', INSPT_OBJ_2) AS INSPT_OBJ_2_NM
                      , SCC_CODE_NM('INSPT_OBJ_3', INSPT_OBJ_3) AS INSPT_OBJ_3_NM
                      , SCC_CODE_NM('INSPT_OBJ_4', INSPT_OBJ_4) AS INSPT_OBJ_4_NM
                      , SPECM_CD
                      , SPECM_NM
                      , ACCEPTDD
                      , REQ_NUM
                      , INSPT_OBJ_3
                      , INSPT_OBJ_4
                      , ACCEPT_NUM
                      , ROW_NUMBER() OVER(PARTITION BY REQ_NUM ORDER BY ACCEPT_NUM) AS RN
                   FROM LRM_SPECM_INFO
                  WHERE REQ_NUM = :reqNum
                    AND ACCEPT_NUM = :acceptNum
                ) X
          WHERE X.RN = 1
       ) B
 WHERE A.REQ_NUM = :reqNum
   AND B.ACCEPT_NUM = :acceptNum
   AND A.REQ_NUM = B.REQ_NUM
        ]]>
	</statement>

	<!--Q-Stop 검체정보 조회 -->
	<statement name="testResultItemSendSpecmInfoList" type="select">
		/*+
		com.hwfs.ls.lrm.dao.TestRegInqueryDAO.testResultItemSendSpecmInfoList
		*/
		<![CDATA[
SELECT A.SPECM_CD,
       A.SPECM_NM,
       ((SELECT X.MGRP_NM FROM LCM_SPECM_TYPE_MGRP X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MGRP_CD = A.MGRP_CD) || ' / ' ||
        (SELECT X.MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MCALSS_CD = A.MCALSS_CD) || ' / ' ||
        (SELECT X.SCLASS_NM FROM LCM_SPECM_TYPE_SCLASS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.SCLASS_CD = A.SCLASS_CD))
       AS SPECM_TYPE_NM,                /* 검체 유형명 ( 대분류명 / 중분류명 / 소분류명 ) */
       A.MFGWON,                        /* 제조원 */
       A.DTR_VENDOR,                    /* 유통업체 */
       TO_CHAR(TO_DATE(A.MFGDD, 'YYYYMMDD'), 'YYYY. MM. DD') AS MFGDD,  /* 제조일자 */
       TO_CHAR(TO_DATE(A.DTRLIMT, 'YYYYMMDD'), 'YYYY. MM. DD') ||
       CASE WHEN A.DTRLIMT_MTS IS NOT NULL THEN
                 ' ' || A.DTRLIMT_MTS || '개월'
       END ||
       CASE WHEN A.DTRLIMT_DD IS NOT NULL THEN
                 ' ' || A.DTRLIMT_DD || '일'
       END
       AS DTRLIMT   /* 유통기한 */
  FROM LRM_SPECM_INFO A
 WHERE A.REQ_NUM = :reqNum
   AND A.ACCEPT_NUM = :acceptNum
        ]]>
	</statement>

	<!--Q-Stop 시험정보 조회 -->
	<statement name="testResultItemSendTestInfoList" type="select">
		/*+
		com.hwfs.ls.lrm.dao.TestRegInqueryDAO.testResultItemSendTestInfoList
		*/
		<![CDATA[
SELECT A.ARTICLE_CD   /* 시험항목 */
     , (SELECT ARTICLE_NM FROM LCM_TEST_ARTICLE WHERE A.ARTICLE_CD = ARTICLE_CD) AS ARTICLE_NM  /* 시험항목명 */
     , SCC_CODE_NM('INSPT_METHOD', A.INSPT_METHOD) AS INSPT_METHOD               /* 검사방법 */
     , DECODE(NVL(A.LEGAL_BASIS, 'N'), 'Y', '법적', '내부') AS BASIS_GUBUN           /* 기준구분 */
     , A.BASIS_STAND             /* 기준규격 */
     , B.RESULT   /* 결과 */
     , SCC_CODE_NM('LAST_DECISION', B.LAST_DECISION) AS LAST_DECISION  /* 최종 판정 */
     , CASE WHEN B.LAST_DECISION = '101' THEN
                 ''
            ELSE
                 (SELECT SCC_CODE_NM('NOT_FIT_CLSFI', NOT_FIT_CLSFI) FROM LCM_TEST_ARTICLE WHERE A.ARTICLE_CD = ARTICLE_CD) || '(' ||
                 SCC_CODE_NM('INSPT_FLD', A.INSPT_FLD) || ')'
       END AS NOT_FIT_CLSFI_NM /* 부적합분류명 */
  FROM LRM_TEST_INFO A
     , LTM_TEST_DIARY B
 WHERE 1 = 1
   AND A.REQ_NUM = B.REQ_NUM(+)
   AND A.ACCEPT_NUM = B.ACCEPT_NUM(+)
   AND A.REQ_NUM = :reqNum
   AND A.ACCEPT_NUM = :acceptNum
   AND A.ARTICLE_CD = B.ARTICLE_CD(+)
   AND A.SABUN = B.SABUN(+)
 ORDER BY A.ACCEPT_NUM
        ]]>
	</statement>

	<!--Q-Pass 검체정보 조회 -->
	<statement name="testResultItemSendSpecmInfoPassList"
		type="select">
		/*+
		com.hwfs.ls.lrm.dao.TestRegInqueryDAO.testResultItemSendSpecmInfoPassList
		*/
		<![CDATA[
SELECT *
  FROM (
        SELECT TR.REQ_NUM
             , SI.ACCEPTDD
             , SI.SPECM_CD
             , SI.SPECM_NM
             , ((SELECT X.MGRP_NM FROM LCM_SPECM_TYPE_MGRP X WHERE X.SPECM_TYPE = SI.SPECM_TYPE AND X.MGRP_CD = SI.MGRP_CD) || ' / ' ||
                (SELECT X.MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS X WHERE X.SPECM_TYPE = SI.SPECM_TYPE AND X.MCALSS_CD = SI.MCALSS_CD) || ' / ' ||
                (SELECT X.SCLASS_NM FROM LCM_SPECM_TYPE_SCLASS X WHERE X.SPECM_TYPE = SI.SPECM_TYPE AND X.SCLASS_CD = SI.SCLASS_CD))
               AS SPECM_TYPE_NM                  /* 검체 유형명 ( 대분류명 / 중분류명 / 소분류명 ) */
             , SI.MFGWON                         /* 제조원 */
             , SI.DTR_VENDOR                     /* 유통업체 */
             , TO_CHAR(TO_DATE(SI.MFGDD, 'YYYYMMDD'), 'YYYY. MM. DD') AS MFGDD   /* 제조일자 */
             , TO_CHAR(TO_DATE(SI.DTRLIMT, 'YYYYMMDD'), 'YYYY. MM. DD') ||
               CASE WHEN SI.DTRLIMT_MTS IS NOT NULL THEN
                         ' ' || SI.DTRLIMT_MTS || '개월'
               END ||
               CASE WHEN SI.DTRLIMT_DD IS NOT NULL THEN
                         ' ' || SI.DTRLIMT_DD || '일'
               END AS DTRLIMT   /* 유통기한 */

             , Y.ARTICLE_NM /* 검사항목 */
             , Y.INSPT_METHOD
             , Y.BASIS_GUBUN
             , Y.BASIS_STAND
             , Y.RESULT
             , Y.LAST_DECISION
             , Y.LAST_DECITION_DATE
             , Y.NOT_FIT_CLSFI_NM
             , (SELECT MATERIAL_UPJANG_SEND_RESULT FROM LRM_MATERIAL_INFO WHERE REQ_NUM = SI.REQ_NUM AND ACCEPT_NUM = SI.ACCEPT_NUM) AS STOP_HISTORY
             , (SELECT TO_CHAR(UDATE, 'YYYY. MM. DD') FROM LRM_MATERIAL_INFO WHERE REQ_NUM = SI.REQ_NUM AND ACCEPT_NUM = SI.ACCEPT_NUM) AS STOP_DATE
             , (SELECT MATERIAL_SEND_RESULT FROM LRM_MATERIAL_INFO WHERE REQ_NUM = SI.REQ_NUM AND ACCEPT_NUM = SI.ACCEPT_NUM) AS MATERIAL_SEND_RESULT
             , SI.INSPT_PURP_3
             , SCC_CODE_NM('INSPT_PURP_3', SI.INSPT_PURP_3) AS INSPT_PURP_3_NM
          FROM LRM_TEST_REQ_ACCEPT TR
             , LRM_SPECM_INFO SI
             , (
                SELECT X.REQ_NUM
                     , X.ACCEPT_NUM
                     , LISTAGG(NVL(X.ARTICLE_NM, ' '), ' / ') WITHIN GROUP(ORDER BY X.ARTICLE_CD) AS ARTICLE_NM
                     , LISTAGG(NVL(X.INSPT_METHOD, ' '), ' / ') WITHIN GROUP(ORDER BY X.ARTICLE_CD) AS INSPT_METHOD
                     , LISTAGG(NVL(X.BASIS_GUBUN, ' '), ' / ') WITHIN GROUP(ORDER BY X.ARTICLE_CD) AS BASIS_GUBUN
                     , LISTAGG(NVL(X.BASIS_STAND, ' '), ' / ') WITHIN GROUP(ORDER BY X.ARTICLE_CD) AS BASIS_STAND
                     , LISTAGG(NVL(X.RESULT, ' '), ' / ') WITHIN GROUP(ORDER BY X.ARTICLE_CD) AS RESULT
                     , LISTAGG(NVL(X.LAST_DECISION, ' '), ' / ') WITHIN GROUP(ORDER BY X.ARTICLE_CD) AS LAST_DECISION
                     , LISTAGG(NVL(X.NOT_FIT_CLSFI_NM, ' '), ' / ') WITHIN GROUP(ORDER BY X.ARTICLE_CD) AS NOT_FIT_CLSFI_NM
                     , LISTAGG(NVL(X.LAST_DECITION_DATE, ' '), ' / ') WITHIN GROUP(ORDER BY X.ARTICLE_CD) AS LAST_DECITION_DATE
                  FROM (
                        SELECT A.ARTICLE_CD   /* 시험항목 */
                             , (SELECT ARTICLE_NM FROM LCM_TEST_ARTICLE WHERE A.ARTICLE_CD = ARTICLE_CD) AS ARTICLE_NM  /* 시험항목명 */
                             , SCC_CODE_NM('INSPT_METHOD', A.INSPT_METHOD) AS INSPT_METHOD               /* 검사방법 */
                             , DECODE(NVL(A.LEGAL_BASIS, 'N'), 'Y', '법적', '내부') AS BASIS_GUBUN           /* 기준구분 */
                             , A.BASIS_STAND             /* 기준규격 */
                             , B.RESULT   /* 결과 */
                             , SCC_CODE_NM('LAST_DECISION', B.LAST_DECISION) AS LAST_DECISION  /* 최종 판정 */
                             , CASE WHEN B.LAST_DECISION = '101' THEN
                                         ''
                                    ELSE
                                         (SELECT SCC_CODE_NM('NOT_FIT_CLSFI', NOT_FIT_CLSFI) FROM LCM_TEST_ARTICLE WHERE A.ARTICLE_CD = ARTICLE_CD) || '(' ||
                                         SCC_CODE_NM('INSPT_FLD', A.INSPT_FLD) || ')'
                               END AS NOT_FIT_CLSFI_NM /* 부적합분류명 */
                             , A.REQ_NUM
                             , A.ACCEPT_NUM
                             , TO_CHAR(B.UDATE, 'YYYY. MM. DD') AS LAST_DECITION_DATE
                          FROM LRM_TEST_INFO A
                             , LTM_TEST_DIARY B
                         WHERE 1 = 1
                           AND A.REQ_NUM = B.REQ_NUM(+)
                           AND A.ACCEPT_NUM = B.ACCEPT_NUM(+)
                           AND A.ARTICLE_CD = B.ARTICLE_CD(+)
                           AND A.SABUN = B.SABUN(+)
                         ORDER BY A.ACCEPT_NUM
                       ) X
                 GROUP BY X.REQ_NUM
                        , X.ACCEPT_NUM
               ) Y
         WHERE 1 = 1
           AND TR.UPJANG = :upjang
           AND SI.SPECM_CD = :specmCd
           AND TR.REQ_NUM = SI.REQ_NUM
           AND SI.REQ_NUM = Y.REQ_NUM
           AND SI.ACCEPT_NUM = Y.ACCEPT_NUM
         ORDER BY SI.INSPT_PURP_3 DESC
       ) RE
 WHERE ROWNUM <= 2
 ORDER BY RE.INSPT_PURP_3 ASC, RE.ACCEPTDD DESC
        ]]>
	</statement>

	<!-- 기 접수내역 목록을 조회한다. -->
	<statement name="preAcceptReqInfoList" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestRegInqueryDAO."preAcceptReqInfoList"
		*/
		<![CDATA[
/* 기 접수내역 목록을 조회 */
SELECT B.REQ_DATE,
       A.REQ_NUM,
       B.ACCEPTNM,
       A.ACCEPT_NUM,
       A.ACCEPTDD,
       A.SPECM_CD,                      /* 검체 코드 */
       A.SPECM_CLASS,                   /* 검체 분류 */
       A.SPECM_NM,                      /* 검체명 */
       A.SPECM_TYPE,                    /* 검체유형(공전유형) */
       SCC_CODE_NM('SPECM_TYPE', A.SPECM_TYPE) AS SPECM_TYPE_NM,    /* 검체유형(공전유형)명 */
       A.MGRP_CD,                       /* 검체유형 대분류 */
       A.MCALSS_CD,                     /* 검체유형 중분류 */
       A.SCLASS_CD,                     /* 검체유형 소분류 */
       ((SELECT X.MGRP_NM FROM LCM_SPECM_TYPE_MGRP X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MGRP_CD = A.MGRP_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MCALSS_CD = A.MCALSS_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.SCLASS_NM FROM LCM_SPECM_TYPE_SCLASS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.SCLASS_CD = A.SCLASS_CD AND X.USE_YN = 'Y'))
       AS SPECM_TYPE_DESC,              /* 검체 유형명 ( 대분류명 / 중분류명 / 소분류명 ) */
       A.INSPT_MTOD,                    /* 검사방법 */
       SCC_CODE_NM('INSPT_MTOD', A.INSPT_MTOD) AS INSPT_MTOD_NM,
       A.INSPT_CLASS,                   /* 검사구분 */
       SCC_CODE_NM('INSPT_CLASS', A.INSPT_CLASS) AS INSPT_CLASS_NM,
       A.INSPT_PURP_1,                  /* 검사목적1 */
       SCC_CODE_NM('INSPT_PURP_1', A.INSPT_PURP_1) AS INSPT_PURP_1_NM,
       A.INSPT_PURP_2,                  /* 검사목적2 */
       SCC_CODE_NM('INSPT_PURP_2', A.INSPT_PURP_2) AS INSPT_PURP_2_NM,
       A.INSPT_PURP_3,                  /* 검사목적3 */
       SCC_CODE_NM('INSPT_PURP_3', A.INSPT_PURP_3) AS INSPT_PURP_3_NM,
       A.LONGSTORAGE_YN,                /* 장기보존여부 */
       SCC_CODE_NM('LONGSTORAGE_YN', A.LONGSTORAGE_YN) AS LONGSTORAGE_YN_NM,
       A.INSPT_OBJ_1,                   /* 검사대상1 */
       SCC_CODE_NM('INSPT_OBJ_1', A.INSPT_OBJ_1) AS INSPT_OBJ_1_NM,
       A.INSPT_OBJ_2,                   /* 검사대상2 */
       SCC_CODE_NM('INSPT_OBJ_2', A.INSPT_OBJ_2) AS INSPT_OBJ_2_NM,
       A.INSPT_OBJ_3,                   /* 검사대상3 */
       SCC_CODE_NM('INSPT_OBJ_3', A.INSPT_OBJ_3) AS INSPT_OBJ_3_NM,
       A.INSPT_OBJ_4,                   /* 검사대상4 */
       SCC_CODE_NM('INSPT_OBJ_4', A.INSPT_OBJ_4) AS INSPT_OBJ_4_NM,
       A.ORIGIN                        /* 원산지 */
     , CASE WHEN (SELECT COUNT(1) FROM LRM_TEST_INFO WHERE REQ_NUM = A.REQ_NUM) =
                 (SELECT COUNT(1) FROM LTM_TEST_DIARY WHERE REQ_NUM = A.REQ_NUM AND LAST_DECISION IS NOT NULL)
            THEN
              (SELECT TO_CHAR(MAX(UDATE), 'YYYYMMDD')
                 FROM LTM_TEST_DIARY
                WHERE REQ_NUM = A.REQ_NUM)
            ELSE
              ''
       END AS COMPLETE_DD   /* 시험완료일자 */
     , B.UPJANG_NM
     , SCC_CODE_NM('ACCEPT_CLASS', B.ACCEPT_CLASS) AS ACCEPT_CLASS
     , U.PROC_CLASS AS PROGRESS_STATUS  /* 진행상태 */
     , SCC_CODE_NM('PROGRESS_STATUS', U.PROC_CLASS) AS PROGRESS_STATUS_NM   /* 진행상황 */
     , CASE WHEN U.PROC_CLASS >= '200' THEN /* 시험완료 승인 */
          'Y'
       ELSE
          'N'
       END AS COMPLETE_YN   /* 시험완료승인 */
     , (
         SELECT COUNT(1)
           FROM LEM_INSPECT_RPT_ISSUE_LOG
          WHERE REQ_NUM = A.REQ_NUM
            AND PUBLISHDD IS NOT NULL
       ) AS PUBLISH_CNT /* 발급횟수 */
     , DECODE(B.INSPECT_RPT_ISSUE, NULL, 'N', B.INSPECT_RPT_ISSUE) AS INSPECT_RPT_ISSUE    /* 성적서 발급 여부 */
     , H.INSPT_FLD_NM || '/' || H.NOT_FIT_CLSFI_NM AS NOT_FIT_CLSFI_NM    /* 검사분야 / 부적합분류 */

     , I.MATERIAL_SEND_RESULT      /* 전송결과 (S:STOP, P:PASS) */
     , DECODE(I.MATERIAL_UPJANG_SEND_RESULT, '102', '102', '103', '103', '101') AS MATERIAL_UPJANG_SEND_RESULT      /* 업장구분전송결과 */
     , I.UDATE AS SEND_DATE    /* 전송 일자 */
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '01'), 'TK', 'S', 'P') AS MATERIAL_STATUS_1 /* 자재쪽 직영 실제 중지/사용 상태 */
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '01'), 'TK', '중지', '사용') AS MATERIAL_STATUS_NM_1 /* 자재쪽 직영 실제 중지/사용 상태명 */
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '02'), 'TK', 'S', 'P') AS MATERIAL_STATUS_2 /* 자재쪽 식재 실제 중지/사용 상태 */
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '02'), 'TK', '중지', '사용') AS MATERIAL_STATUS_NM_2 /* 자재쪽 식재 실제 중지/사용 상태명 */

     , CASE WHEN DECODE(I.MATERIAL_UPJANG_SEND_RESULT, '102', '102', '101') = '101' THEN   /* 직영 자재 상태 상이 체크 */
                 CASE WHEN DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '01'), 'TK', 'S', 'P') != I.MATERIAL_SEND_RESULT THEN
                           'Y'
                 ELSE
                           'N'
                 END
       END AS MATERIAL_STATUS_DIP_1 /* LIMS의 최종상태와 자재 직영 상태 상이 여부 체크 */
     , CASE WHEN DECODE(I.MATERIAL_UPJANG_SEND_RESULT, '102', '102', '101') = '102' THEN     /* 식재 자재 상태 상이 체크 */
                 CASE WHEN DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '02'), 'TK', 'S', 'P') != I.MATERIAL_SEND_RESULT THEN
                           'Y'
                 ELSE
                           'N'
                 END
       END AS MATERIAL_STATUS_DIP_2 /* LIMS의 최종상태와 자재 식재 상태 상이 여부 체크 */

     , CASE WHEN A.SPECM_TYPE = '101' THEN
            EPROCUSR.FN_ITEM_PROCURE_MTG_UNS('100', A.SPECM_CD)
       ELSE
            'UP'
       END AS ITEM_UNS /* 불용자재 상태(UP:가용, 나머지:불용) */
     , (
         SELECT MAX(SIGN_INSTANCE_ID)
           FROM LRM_ELCTNSIGN_INFO
          WHERE REQ_NUM = A.REQ_NUM
            AND ACCEPT_NUM = A.ACCEPT_NUM
            AND SEQ = 5 /* 1:최종결재, 2:부적합결재, 3:성적서발급결재, 4:성적서재발급결재, 5:시험결과 구매 전송 */
       ) AS SIGN_INSTANCE_ID    /* 전자결재 ID */
     , CASE WHEN EXISTS (
                        SELECT 1
                          FROM LRM_ELCTNSIGN_INFO
                         WHERE REQ_NUM = A.REQ_NUM
                           AND ACCEPT_NUM = A.ACCEPT_NUM
                           AND SEQ = 5 /* 1:최종결재, 2:부적합결재, 3:성적서발급결재, 4:성적서재발급결재, 5:시험결과 구매 전송 */
                        ) THEN
                 (SELECT NVL(SCC_SIGN_STATUS_FUN(MAX(SIGN_INSTANCE_ID)), 'DRAFT')   /* 결재상태가 1분정도 걸리기때문에 */
                    FROM LRM_ELCTNSIGN_INFO
                   WHERE REQ_NUM = A.REQ_NUM
                     AND ACCEPT_NUM = A.ACCEPT_NUM
                     AND SEQ = 5) /* 1:최종결재, 2:부적합결재, 3:성적서발급결재, 4:성적서재발급결재, 5:시험결과 구매 전송 */
       END AS SIGN_PROGRESS_STATUS    /* 전자결재 상태 */
     , DECODE(B.ACCEPT_CLASS, '102', '식재', '직영') AS UPJANG_ACCEPT_CLASS_NM
     , DECODE(B.ACCEPT_CLASS, '102', '102', '101') AS UPJANG_ACCEPT_CLASS
     , H.TRANS_YN   /* 전송가능여부(공통코드:부적합분류[NOT_FIT_CLSFI] 에서 체크) */
FROM   LRM_SPECM_INFO A
     , LRM_TEST_REQ_ACCEPT B
     , (
        SELECT PD.REQ_NUM
             , PD.PROC_USER
             , PD.PROCDD
             , PD.PROC_REASON
             , PD.PROC_CLASS
             , PD.SEQ
          FROM (
                SELECT Y.REQ_NUM
                     , Y.PROC_USER
                     , Y.PROCDD
                     , Y.PROC_REASON
                     , Y.PROC_CLASS
                     , Y.SEQ
                     , ROW_NUMBER() OVER (PARTITION BY Y.REQ_NUM ORDER BY Y.REQ_NUM, Y.SEQ DESC) AS RN
                  FROM LRM_PROC_DESC Y
               ) PD
         WHERE RN = 1
       ) U
     , (
        SELECT NF.REQ_NUM
             , NF.ACCEPT_NUM
             , NF.INSPT_FLD_NM
             , NF.NOT_FIT_CLSFI_NM
             , NF.INSPT_FLD
             , NF.NOT_FIT_CLSFI
             , (
                SELECT CASE WHEN COUNT(1) > 0 THEN 'Y'
                            ELSE 'N'
                       END
                  FROM SCC_COMMON_CODE
                 WHERE GROUP_CODE = 'NOT_FIT_CLSFI'
                   AND CODE = NF.NOT_FIT_CLSFI
                   AND SET1 = '1'
                   AND (('101' = NF.INSPT_FLD AND SET2 = '1')  -- 미생물
                     OR ('102' = NF.INSPT_FLD AND SET3 = '1'))  -- 이화학
               ) AS TRANS_YN
          FROM (
                 SELECT /*+ INDEX_FFS(Y) */
                        Y.REQ_NUM
                      , Y.ACCEPT_NUM
                      , P.INSPT_FLD
                      , SCC_CODE_NM('INSPT_FLD', P.INSPT_FLD) AS INSPT_FLD_NM
                      , Y.LAST_DECISION
                      , P.ARTICLE_NM
                      , P.NOT_FIT_CLSFI
                      , SCC_CODE_NM('NOT_FIT_CLSFI', P.NOT_FIT_CLSFI) AS NOT_FIT_CLSFI_NM
                      , ROW_NUMBER() OVER(PARTITION BY Y.REQ_NUM, Y.ACCEPT_NUM ORDER BY Y.REQ_NUM, Y.ACCEPT_NUM, P.NOT_FIT_CLSFI DESC) AS RN
                   FROM LTM_TEST_DIARY Y
                      , LCM_TEST_ARTICLE P
                  WHERE 1 = 1
                    AND Y.ARTICLE_CD = P.ARTICLE_CD
                    AND Y.LAST_DECISION IS NOT NULL
               ) NF
         WHERE NF.RN = 1
       ) H
     , LRM_MATERIAL_INFO I
WHERE  1 = 1
  AND  A.REQ_NUM = B.REQ_NUM
  AND  A.REQ_NUM = U.REQ_NUM
  AND  A.REQ_NUM = H.REQ_NUM(+)
  AND  A.ACCEPT_NUM = H.ACCEPT_NUM(+)
  AND  A.REQ_NUM = I.REQ_NUM(+)
  AND  A.ACCEPT_NUM = I.ACCEPT_NUM(+)
  AND  A.SPECM_CD = I.SPECM_CD(+)
  --AND  U.PROC_CLASS >= '200'    /* 시험완료승인 이후의 데이터 조회 */
<#if toDay?has_content> AND B.REQ_DATE BETWEEN :fromDay AND :toDay </#if>
<#if specmNm?has_content> AND A.SPECM_NM LIKE '%' || :specmNm || '%' </#if>
<#if upjangNm?has_content> AND B.UPJANG_NM LIKE '%' || :upjangNm || '%' </#if>
ORDER  BY A.REQ_NUM DESC, A.ACCEPT_NUM
        ]]>
	</statement>

</hqml>
