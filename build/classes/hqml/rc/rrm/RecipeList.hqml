<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="rc.rrm.recipeListDAO">
	<desc>레시피 검색 HQML Query</desc>

	<!-- 표준레시피 목록을 조회한다. -->
	<statement name="selectStdRecipeList" type="select">
		/*+ com.hwfs.rc.rrm.dao.recipeListDAO.selectStdRecipeList	*/
		<![CDATA[ 
		SELECT GUBUN, STD_RECIPE_CD, RECIPE_NM, UPJANG_CD, UPJANG_NM, UPJANG_TYPE, CNT, CUISINE_YN, STAND_NM
       		   , SUM(NEED_QTY) AS NEED_QTY
		FROM (
				SELECT :gubun AS GUBUN
				     , A.STD_RECIPE_CD
				     , A.RECIPE_NM
				     , '' AS UPJANG_CD
				     , '' AS UPJANG_NM
				     , A.UPJANG_TYPE
				     , (SELECT COUNT(*)
						  FROM RSS_STD_RECIPE_CD_DETAIL Z
						 WHERE Z.STD_RECIPE_CD = A.STD_RECIPE_CD
						   AND Z.UPJANG_TYPE = A.UPJANG_TYPE
						   --2017.04.17 CH201703_00534 김호석 상세에서는 기간제한 업이 조회 가능하도록 수정
						   --AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN Z.SDATE AND Z.EDATE
						   ) AS CNT
				     , (SELECT DECODE(COUNT(*), 0, 'N', 'Y')
				          FROM RSS_STD_RECIPE_CUISINE Z
				         WHERE Z.UPJANG_TYPE = A.UPJANG_TYPE
				           AND Z.STD_RECIPE_CD = A.STD_RECIPE_CD) AS CUISINE_YN
				     --2017.04.17 CH201703_00534 김호석 레시피구분, 투입재료량 필드 추가
		         	 , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'STAND_TYPE' AND CODE = A.STAND) AS STAND_NM
		         	 , B.NEED_QTY AS NEED_QTY	--투입재료량
				  FROM RSS_STD_RECIPE_CD_MST A
				   , RSS_STD_RECIPE_CD_DETAIL B
				 WHERE A.MU_CD = '2003' 
       			   AND A.STD_RECIPE_CD = B.STD_RECIPE_CD 
				   AND NVL(A.SML_YN, 'N') = 'N'
				<#if recipe?has_content>
				   AND (A.STD_RECIPE_CD LIKE '%' || :recipe || '%' OR A.RECIPE_NM LIKE '%' || :recipe || '%')
				</#if>
		 		--ORDER BY A.STD_RECIPE_CD
		 	)
			GROUP BY GUBUN, STD_RECIPE_CD, RECIPE_NM, UPJANG_CD, UPJANG_NM, UPJANG_TYPE, CNT, CUISINE_YN, STAND_NM
			ORDER BY STD_RECIPE_CD			
		]]>
	</statement>

	<!-- 표준레시피 상세 목록을 조회한다. -->
	<statement name="selectStdRecipeDetail" type="select">
		/*+ com.hwfs.rc.rrm.dao.recipeListDAO.selectStdRecipeDetail	*/
		<![CDATA[
		SELECT '0' AS CHK
		     , X.MU_CD
		     , (SELECT MU_NM FROM SCC_MU WHERE MU_CD = X.MU_CD) AS MU_NM
		     , :orgUpjangType AS UPJANG_TYPE
		     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'UPJANG_TYPE' AND CODE = X.UPJANG_TYPE) AS UPJANG_TYPE_NM
		     , :orgStdRecipeCd AS STD_RECIPE_CD
		     , X.RECIPE_NM
		     , X.RECIPE_NM_BYNM
		     , X.COOK_UNIT
		     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'STAND_TYPE' AND CODE = X.STAND) STAND_NM
		     , X.UPJANG_MODIFY_ALLOW_YN
		     , X.MATERIAL_CD
		     , X.MATERIAL_CD_NM
		     , DECODE(X.SEMI_GOODS_YN, 'Y', ROUND(G_PRICE, 2), ROUND(X.CONTRACT_PRICE / X.KG_CONVERT_RATE / 1000, 2)) AS GRAM_PRICE  --g단가
		     , CASE WHEN X.SEMI_GOODS_YN = 'Y'
		            THEN CASE WHEN X.LOSS_RATE > 100
		                      THEN ROUND((X.NEED_QTY * (X.LOSS_RATE / 100)) * G_PRICE, 3)
		                      ELSE ROUND((X.NEED_QTY *(X.LOSS_RATE / 100)) * G_PRICE, 3)
		                  END
		            ELSE NVL(ROUND(X.NEED_QTY * (X.CONTRACT_PRICE / X.KG_CONVERT_RATE / 1000), 3), 0)  
		             END AS INVEST_AMT	--투입재료비
		     , X.SDATE
		     , X.EDATE
		     --, X.NEED_QTY
		     , CASE WHEN  (TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN X.SDATE AND X.EDATE) THEN 
				      	X.NEED_QTY
		        ELSE 
		          0
		        END AS NEED_QTY
		     , CASE WHEN X.LOSS_RATE > 100
		            THEN ROUND(X.NEED_QTY * (X.LOSS_RATE / 100), 3)
		            ELSE ROUND(X.NEED_QTY * (X.LOSS_RATE / 100), 3)
		         END AS SUM_NEED_QTY
		     , X.ITEM_SIZE
		     , X.MAKER
		     , X.ORIGIN_TYPE
		     , X.COOK_UNIT_ITEM
		     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'OFFER_UNIT' AND CODE = X.OFFER_UNIT_ITEM) AS OFFER_UNIT_NM
		     , X.BASIS_UNIT_CD
		     , X.PO_UNIT
		     , X.RECIPE_APPLY_UNIT
		     , X.LOSS_RATE
		     , X.YIELD
		     , X.SEMI_GOODS_YN
		     , X.PRVS_MATERIAL_CD
		     , X.SORT_ORDER
		     , X.CHG_REASON
		     , X.REMARK
		     , X.ITEM_UPJANG
		     , X.REL_PATH
		     , X.SAVE_FILE_NM
		     , X.CUSER
		     , X.CDATE
		     , X.UUSER
		     , X.UDATE
		     , X.CONTRACT_START
		     , X.CONTRACT_END		
		     , X.REF_SEQ
		     , X.APPEND_SEQ            	
		     , X.STD_SEQ
		  FROM (
		        SELECT /*+ PUSH_PRED(D) */ A.MU_CD
		             , A.UPJANG_TYPE
		             , A.STD_RECIPE_CD
		             , B.RECIPE_NM
		             , B.RECIPE_NM_BYNM
		             , B.COOK_UNIT
		             , B.STAND
		             , B.UPJANG_MODIFY_ALLOW_YN
		             , A.MATERIAL_CD
		             , DECODE(A.SEMI_GOODS_YN, 'Y', E.RECIPE_NM, C.ITEM_NAME) AS MATERIAL_CD_NM
		             , A.SDATE
		             , A.EDATE
		             , A.CST_AMT
		             , NVL(A.NEED_QTY, 0) AS NEED_QTY			      
		             , NVL(D.CONTRACT_PRICE, 0) AS CONTRACT_PRICE 
		             , DECODE(C.KG_CONVERT_RATE, 0, 1, C.KG_CONVERT_RATE) AS KG_CONVERT_RATE
		             , C.ITEM_SIZE
		             , C.MAKER
		             , C.ORIGIN_TYPE
		             , E.COOK_UNIT COOK_UNIT_ITEM
		             , E.OFFER_UNIT OFFER_UNIT_ITEM			       
		             , A.BASIS_UNIT_CD
		             , A.PO_UNIT
		             , A.RECIPE_APPLY_UNIT
		             , A.LOSS_RATE
		             , A.YIELD
		             , A.SEMI_GOODS_YN
		             , A.PRVS_MATERIAL_CD
		             , A.SORT_ORDER
		             , A.CHG_REASON
		             , A.REMARK
		             , A.ITEM_UPJANG
		             , F.REL_PATH
		             , F.SAVE_FILE_NM
		             , A.CUSER
		             , A.CDATE
		             , A.UUSER
		             , A.UDATE
		             , D.CONTRACT_START
		             , D.CONTRACT_END
		             , B.REF_SEQ
		             , B.APPEND_SEQ
		             , A.STD_SEQ
		             --, DECODE(A.SEMI_GOODS_YN, 'Y', FN_RECIPE_AMT_FUN('', A.MATERIAL_CD, :stdDate, '2'), 0) AS G_PRICE
		             , DECODE(A.SEMI_GOODS_YN, 'Y', (SELECT FN_RECIPE_AMT_FUN('', A.MATERIAL_CD, :stdDate, '2') FROM DUAL), 0) AS G_PRICE
		          FROM RSS_STD_RECIPE_CD_DETAIL A
		             , RSS_STD_RECIPE_CD_MST B
		             , HLDC_PO_ITEM_MST C
		             , (
		                SELECT /*+ LEADING(A.UP) INDEX(A.MR IX_ESPSSGPITM_03)  */ 
		                       ITEM_CODE
		                     , MAX(CONTRACT_START) AS CONTRACT_START
		                     , MAX(CONTRACT_END) AS CONTRACT_END
		                     , AVG(CONTRACT_PRICE) AS CONTRACT_PRICE
		                  ---FROM HLDC_PO_CONTRACT_F A
		                  FROM	EPROCUSR.VO_CONTRACT_F_RCP A -- 논리적 분사이후 단가불러오는 뷰 변경 20200309
		                 WHERE 1 = 1
                   		   AND UPJANG = '217840' --FC 외식 메뉴개발실 단가 연결  2017.10.31 이다미 요청
		                   AND :stdDate BETWEEN CONTRACT_START AND CONTRACT_END
		                 GROUP BY ITEM_CODE
		               ) D
		             , RSS_STD_RECIPE_CD_MST E
		             , SCC_APPEND_FILE F
		         WHERE A.STD_RECIPE_CD = B.STD_RECIPE_CD(+)
		           AND A.MATERIAL_CD = C.ITEM_CODE(+)
		           AND A.MATERIAL_CD = D.ITEM_CODE(+)
		           AND A.MATERIAL_CD = E.STD_RECIPE_CD(+)
		           AND E.REF_SEQ = F.REF_SEQ(+)
		           AND E.APPEND_SEQ = F.APPEND_SEQ(+)
		           AND A.MU_CD = '2003'
		           AND A.UPJANG_TYPE = :upjangType
		           AND A.STD_RECIPE_CD = :stdRecipeCd
		           --2017.04.17 CH201703_00534 김호석 상세에서는 기간제한 업이 조회 가능하도록 수정
		           --AND :stdDate BETWEEN A.SDATE AND A.EDATE
		           AND A.SET_RECIPE_CD IS NULL
		           AND NOT EXISTS(
		                          SELECT 'X'
		                            FROM RSS_STD_RECIPE_CD_DETAIL Z
		                           WHERE Z.MATERIAL_CD = A.MATERIAL_CD
		                             AND Z.UPJANG_TYPE = :orgUpjangType
		                             AND Z.STD_RECIPE_CD = :orgStdRecipeCd
		                             AND Z.MU_CD = '2003'
		                             --2017.04.17 CH201703_00534 김호석 상세에서는 기간제한 업이 조회 가능하도록 수정
		                             --AND :stdDate BETWEEN Z.SDATE AND Z.EDATE
		                         )
		       ) X
		 ORDER BY X.STD_RECIPE_CD ASC, X.SORT_ORDER ASC
		]]>
	</statement>

	<!-- 업장레시피 목록을 조회한다. -->
	<statement name="selectUpjangRecipeList" type="select">
		/*+ com.hwfs.rc.rrm.dao.recipeListDAO.selectUpjangRecipeList	*/
		<![CDATA[
		
		SELECT GUBUN, STD_RECIPE_CD, RECIPE_NM, UPJANG_CD, UPJANG_NM, UPJANG_TYPE, CNT, CUISINE_YN, STAND_NM
       		   , SUM(NEED_QTY) AS NEED_QTY
		FROM (
				SELECT :gubun AS GUBUN
				     , A.STD_RECIPE_CD
				     , A.RECIPE_NM
				     , A.UPJANG_CD
				     , (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.UPJANG_CD) AS UPJANG_NM
				     , A.UPJANG_TYPE
				     , (SELECT COUNT(*)
						  FROM RSS_UPJANG_RECIPE_CD_DETAIL Z
						 WHERE Z.UPJANG_CD = A.UPJANG_CD
						   AND Z.STD_RECIPE_CD = A.STD_RECIPE_CD
						   AND Z.UPJANG_TYPE = A.UPJANG_TYPE
						   --2017.04.17 CH201703_00534 김호석 상세에서는 기간제한 업이 조회 가능하도록 수정
						   --AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN Z.SDATE AND Z.EDATE
						   ) AS CNT
				     , (SELECT DECODE(COUNT(*), 0, 'N', 'Y')
				          FROM RSS_STD_RECIPE_CUISINE Z
				         WHERE Z.UPJANG_TYPE = A.UPJANG_TYPE
				           AND Z.STD_RECIPE_CD = A.STD_RECIPE_CD) AS CUISINE_YN
				     --2017.04.17 CH201703_00534 김호석 레시피구분, 투입재료량 필드 추가		
		         	 , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'STAND_TYPE' AND CODE = A.STAND) AS STAND_NM
		         	 , B.NEED_QTY AS NEED_QTY	--투입재료량
				  FROM RSS_UPJANG_RECIPE_CD_MST A
					   , RSS_UPJANG_RECIPE_CD_DETAIL B
				 WHERE 1 = 1
				   AND A.MU_CD = '2003'
		       	   AND A.STD_RECIPE_CD = B.STD_RECIPE_CD 
				<#if upjang?has_content>
				   AND A.UPJANG_CD = :upjang
				</#if>
				<#if recipe?has_content>
				   AND (A.STD_RECIPE_CD LIKE '%' || :recipe || '%' OR A.RECIPE_NM LIKE '%' || :recipe || '%')
				</#if>
		 )
		 GROUP BY GUBUN, STD_RECIPE_CD, RECIPE_NM, UPJANG_CD, UPJANG_NM, UPJANG_TYPE, CNT, CUISINE_YN, STAND_NM
		 ORDER BY UPJANG_CD, STD_RECIPE_CD 
		]]>
	</statement>

	<!-- 업장레시피 상세 목록을 조회한다. -->
	<statement name="selectUpjangRecipeDetail" type="select">
		/*+ com.hwfs.rc.rrm.dao.recipeListDAO.selectUpjangRecipeDetail	*/
		<![CDATA[
		SELECT '0' AS CHK
		     , A.MU_CD
			 , (SELECT MU_NM FROM SCC_MU WHERE MU_CD = A.MU_CD) AS MU_NM
			 , :orgUpjangType AS UPJANG_TYPE
			 , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'UPJANG_TYPE' AND CODE = A.UPJANG_TYPE) AS UPJANG_TYPE_NM
			 , :orgStdRecipeCd AS STD_RECIPE_CD
			 , A.RECIPE_NM
			 , A.RECIPE_NM_BYNM
			 , A.COOK_UNIT
			 , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'STAND_TYPE' AND CODE = A.STAND) STAND_NM
			 , A.UPJANG_MODIFY_ALLOW_YN
			 , A.MATERIAL_CD
			 , DECODE(A.SEMI_GOODS_YN, 'Y', A.SUB_RECIPE_NM, A.ITEM_NAME) AS MATERIAL_CD_NM
			 , DECODE(A.SEMI_GOODS_YN, 'Y', ROUND(A.G_PRICE, 2), ROUND(A.CONTRACT_PRICE / A.KG_CONVERT_RATE / 1000, 2)) AS GRAM_PRICE
			 , CASE WHEN A.SEMI_GOODS_YN = 'Y'
					THEN CASE WHEN A.LOSS_RATE > 100
							  THEN ROUND((A.NEED_QTY * (A.LOSS_RATE / 100)) * A.G_PRICE, 3)
							  ELSE ROUND((A.NEED_QTY * (A.LOSS_RATE / 100)) * A.G_PRICE, 3)
						  END
					ELSE ROUND(A.NEED_QTY * (A.CONTRACT_PRICE / A.KG_CONVERT_RATE / 1000), 3)
				END AS INVEST_AMT
			 , A.SDATE
			 , A.EDATE
			 , A.NEED_QTY
			 , CASE WHEN A.LOSS_RATE > 100
					THEN ROUND(A.NEED_QTY * (A.LOSS_RATE / 100), 3)
					ELSE ROUND(A.NEED_QTY * (A.LOSS_RATE / 100), 3)
				END AS SUM_NEED_QTY
			 , A.ITEM_SIZE
			 , A.MAKER
			 , A.ORIGIN_TYPE
			 , A.COOK_UNIT_ITEM
			 , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'OFFER_UNIT' AND CODE = A.OFFER_UNIT_ITEM) AS OFFER_UNIT_NM
			 , A.BASIS_UNIT_CD
			 , A.PO_UNIT
			 , A.RECIPE_APPLY_UNIT
			 , A.LOSS_RATE
			 , A.YIELD
			 , A.SEMI_GOODS_YN
			 , A.PRVS_MATERIAL_CD
			 , A.SORT_ORDER
			 , A.CHG_REASON
			 , A.REMARK
			 , A.ITEM_UPJANG
			 , A.REL_PATH
			 , A.SAVE_FILE_NM
			 , A.CUSER
			 , A.CDATE
			 , A.UUSER
			 , A.UDATE
			 , A.CONTRACT_START
			 , A.CONTRACT_END
			 , A.REF_SEQ
			 , A.APPEND_SEQ
			 , A.STD_SEQ
		  FROM (
				SELECT /*+ PUSH_PRED(G) */
					   A.UPJANG_CD
					 , D.UPJANGNM AS UPJANG_NM
					 , A.UPJANG_TYPE
					 , A.STD_RECIPE_CD
					 , B.MU_CD
					 , B.RECIPE_NM
					 , B.RECIPE_NM_BYNM
					 , B.COOK_UNIT
					 , B.STAND
					 , B.UPJANG_MODIFY_ALLOW_YN
					 , A.MATERIAL_CD
					 , E.RECIPE_NM AS SUB_RECIPE_NM
					 , SEMI_GOODS_YN
					 , G.CONTRACT_PRICE
					 , DECODE(C.KG_CONVERT_RATE, 0, 1, C.KG_CONVERT_RATE) AS KG_CONVERT_RATE
					 , A.LOSS_RATE
					 , NVL(A.NEED_QTY, 0) AS NEED_QTY
					 , A.SDATE
					 , A.EDATE
					 , C.ITEM_SIZE
					 , C.MAKER
					 , C.ORIGIN_TYPE
					 , E.COOK_UNIT AS COOK_UNIT_ITEM
					 , E.OFFER_UNIT AS OFFER_UNIT_ITEM
					 , A.BASIS_UNIT_CD
					 , A.PO_UNIT
					 , A.RECIPE_APPLY_UNIT
					 , A.YIELD
					 , A.PRVS_MATERIAL_CD
					 , A.SORT_ORDER
					 , A.CHG_REASON
					 , A.REMARK
					 , A.ITEM_UPJANG
					 , F.REL_PATH
					 , F.SAVE_FILE_NM
					 , A.CUSER
					 , A.CDATE
					 , A.UUSER
					 , A.UDATE
					 , (SELECT COUNT(*)
						  FROM RSS_UPJANG_RECIPE_CD_DETAIL X
						 WHERE X.UPJANG_CD = A.UPJANG_CD
						   AND X.STD_RECIPE_CD = A.STD_RECIPE_CD
						   AND X.PRVS_MATERIAL_CD = A.MATERIAL_CD) AS PRVS_CNT
					 , G.CONTRACT_START
					 , G.CONTRACT_END
					 , DECODE(A.SEMI_GOODS_YN, 'Y', FN_RECIPE_AMT_FUN(A.UPJANG_CD, A.MATERIAL_CD, :stdDate, '1'), 0) AS G_PRICE
					 , C.ITEM_NAME
					 , E.REF_SEQ
					 , E.APPEND_SEQ
					 , '' AS STD_SEQ
				  FROM RSS_UPJANG_RECIPE_CD_DETAIL A
					 , RSS_UPJANG_RECIPE_CD_MST B
					 , HLDC_PO_ITEM_MST C
					 , SCO_UPJANG_MST_V D
					 , RSS_UPJANG_RECIPE_CD_MST E
					 , SCC_APPEND_FILE F
					 , (SELECT /*+ LEADING(A.UP) INDEX(A.MR IX_ESPSSGPITM_03)  */
							   ITEM_CODE
							 , UPJANG
							 , MAX(CONTRACT_START) AS CONTRACT_START
							 , MAX(CONTRACT_END) AS CONTRACT_END
							 , AVG(CONTRACT_PRICE) AS CONTRACT_PRICE
		                     --, AVG(CONTRACT_PRICE_M) AS CONTRACT_PRICE -- 업장레시피 관리단가로 변경요청 2017.11.01 이다미 선조치
						  --FROM HLDC_PO_CONTRACT_F A
						  FROM EPROCUSR.VO_CONTRACT_F_RCP A -- 논리적 분사이후 단가불러오는 뷰 변경 20200309	   
						 WHERE  1 = 1
						   AND :stdDate BETWEEN CONTRACT_START AND CONTRACT_END
						   AND UPJANG = :upjangCd
						 GROUP BY UPJANG, ITEM_CODE) G
				 WHERE A.UPJANG_CD = B.UPJANG_CD(+)
				   AND A.STD_RECIPE_CD = B.STD_RECIPE_CD(+)
				   AND A.MATERIAL_CD = C.ITEM_CODE(+)
				   AND A.UPJANG_CD = D.UPJANG(+)
				   AND A.UPJANG_CD = E.UPJANG_CD(+)
				   AND A.MATERIAL_CD = E.STD_RECIPE_CD(+)
				   AND E.REF_SEQ = F.REF_SEQ(+)
				   AND E.APPEND_SEQ = F.APPEND_SEQ(+)
				   AND A.MATERIAL_CD = G.ITEM_CODE(+)
				   AND A.UPJANG_CD = G.UPJANG(+)
				   AND A.UPJANG_CD = :upjangCd
				   AND A.STD_RECIPE_CD = :stdRecipeCd
				   --2017.04.17 CH201703_00534 김호석 상세에서는 기간제한 업이 조회 가능하도록 수정
				   --AND :stdDate BETWEEN A.SDATE AND A.EDATE 
				   AND A.SET_RECIPE_CD IS NULL  -- 반찬세트 제외
			   ) A
		 ORDER BY A.STD_RECIPE_CD ASC, A.SORT_ORDER ASC
		]]>
	</statement>

	<!-- 가상레시피 목록을 조회한다. -->
	<statement name="selectSmlRecipeList" type="select">
		/*+ com.hwfs.rc.rrm.dao.recipeListDAO.selectSmlRecipeList	*/
		<![CDATA[
		
		SELECT GUBUN, STD_RECIPE_CD, RECIPE_NM, UPJANG_CD, UPJANG_NM, UPJANG_TYPE, CNT, CUISINE_YN, STAND_NM
       		   , SUM(NEED_QTY) AS NEED_QTY
		FROM (
				SELECT :gubun AS GUBUN
				     , A.STD_RECIPE_CD
				     , A.RECIPE_NM
				     , A.SML_UPJANG AS UPJANG_CD
				     , (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.SML_UPJANG) AS UPJANG_NM
				     , A.UPJANG_TYPE
				     , (SELECT COUNT(*)
						  FROM RSS_STD_RECIPE_CD_DETAIL Z
						 WHERE Z.STD_RECIPE_CD = A.STD_RECIPE_CD
						   AND Z.UPJANG_TYPE = A.UPJANG_TYPE
						   --2017.04.17 CH201703_00534 김호석 상세에서는 기간제한 업이 조회 가능하도록 수정
						   --AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN Z.SDATE AND Z.EDATE
						   ) AS CNT
				     , (SELECT DECODE(COUNT(*), 0, 'N', 'Y')
				          FROM RSS_STD_RECIPE_CUISINE Z
				         WHERE Z.UPJANG_TYPE = A.UPJANG_TYPE
				           AND Z.STD_RECIPE_CD = A.STD_RECIPE_CD) AS CUISINE_YN
				     --2017.04.17 CH201703_00534 김호석 레시피구분, 투입재료량 필드 추가
		         	 , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'STAND_TYPE' AND CODE = A.STAND) AS STAND_NM
		         	 , B.NEED_QTY AS NEED_QTY	--투입재료량
				  FROM RSS_STD_RECIPE_CD_MST A
				       , RSS_STD_RECIPE_CD_DETAIL B
				 WHERE A.MU_CD = '2003' 
       			   AND A.STD_RECIPE_CD = B.STD_RECIPE_CD 
				<#if recipe?has_content>
				   AND (A.STD_RECIPE_CD LIKE '%' || :recipe || '%' OR A.RECIPE_NM LIKE '%' || :recipe || '%')
				</#if>
				<#if upjang?has_content>
				   --AND SML_UPJANG = :smlUpjang
				   --2017.04.17 CH201703_00534 김호석 업장코드 잘못가져오는 오류 수정
				   AND SML_UPJANG = :upjang
				</#if> 
				   AND NVL(A.SML_YN, 'N') = 'Y'
	     )
		 GROUP BY GUBUN, STD_RECIPE_CD, RECIPE_NM, UPJANG_CD, UPJANG_NM, UPJANG_TYPE, CNT, CUISINE_YN, STAND_NM
		 ORDER BY STD_RECIPE_CD			
		]]>
	</statement>

	<!-- 가상레시피 상세 목록을 조회한다. -->
	<statement name="selectSmlRecipeDetail" type="select">
		/*+ com.hwfs.rc.rrm.dao.recipeListDAO.selectSmlRecipeDetail	*/
		<![CDATA[
		SELECT '0' AS CHK
		     , X.MU_CD
		     , (SELECT MU_NM FROM SCC_MU WHERE MU_CD = X.MU_CD) AS MU_NM
		     , :orgUpjangType AS UPJANG_TYPE
		     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'UPJANG_TYPE' AND CODE = X.UPJANG_TYPE) AS UPJANG_TYPE_NM
		     , :orgStdRecipeCd AS STD_RECIPE_CD
		     , X.RECIPE_NM
		     , X.RECIPE_NM_BYNM
		     , X.COOK_UNIT
		     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'STAND_TYPE' AND CODE = X.STAND) STAND_NM
		     , X.UPJANG_MODIFY_ALLOW_YN
		     , X.MATERIAL_CD
		     , X.MATERIAL_CD_NM
		     , DECODE(X.SEMI_GOODS_YN, 'Y', ROUND(G_PRICE, 2), ROUND(X.CONTRACT_PRICE / X.KG_CONVERT_RATE / 1000, 2)) AS GRAM_PRICE  --g단가
		     , CASE WHEN X.SEMI_GOODS_YN = 'Y'
		            THEN CASE WHEN X.LOSS_RATE > 100
		                      THEN ROUND((X.NEED_QTY * (X.LOSS_RATE / 100)) * G_PRICE, 3)
		                      ELSE ROUND((X.NEED_QTY *(X.LOSS_RATE / 100)) * G_PRICE, 3)
		                  END
		            ELSE NVL(ROUND(X.NEED_QTY * (X.CONTRACT_PRICE / X.KG_CONVERT_RATE / 1000), 3), 0)  
		             END AS INVEST_AMT	--투입재료비
		     , X.SDATE
		     , X.EDATE
		     , X.NEED_QTY
		     , CASE WHEN X.LOSS_RATE > 100
		            THEN ROUND(X.NEED_QTY * (X.LOSS_RATE / 100), 3)
		            ELSE ROUND(X.NEED_QTY * (X.LOSS_RATE / 100), 3)
		         END AS SUM_NEED_QTY
		     , X.ITEM_SIZE
		     , X.MAKER
		     , X.ORIGIN_TYPE
		     , X.COOK_UNIT_ITEM
		     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'OFFER_UNIT' AND CODE = X.OFFER_UNIT_ITEM) AS OFFER_UNIT_NM
		     , X.BASIS_UNIT_CD
		     , X.PO_UNIT
		     , X.RECIPE_APPLY_UNIT
		     , X.LOSS_RATE
		     , X.YIELD
		     , X.SEMI_GOODS_YN
		     , X.PRVS_MATERIAL_CD
		     , X.SORT_ORDER
		     , X.CHG_REASON
		     , X.REMARK
		     , X.ITEM_UPJANG
		     , X.REL_PATH
		     , X.SAVE_FILE_NM
		     , X.CUSER
		     , X.CDATE
		     , X.UUSER
		     , X.UDATE
		     , X.CONTRACT_START
		     , X.CONTRACT_END		
		     , X.REF_SEQ
		     , X.APPEND_SEQ            	
		     , X.STD_SEQ
		  FROM (
		        SELECT /*+ PUSH_PRED(D) */ A.MU_CD
		             , A.UPJANG_TYPE
		             , A.STD_RECIPE_CD
		             , B.RECIPE_NM
		             , B.RECIPE_NM_BYNM
		             , B.COOK_UNIT
		             , B.STAND
		             , B.UPJANG_MODIFY_ALLOW_YN
		             , A.MATERIAL_CD
		             , DECODE(A.SEMI_GOODS_YN, 'Y', E.RECIPE_NM, C.ITEM_NAME) AS MATERIAL_CD_NM
		             , A.SDATE
		             , A.EDATE
		             , A.CST_AMT
		             , NVL(A.NEED_QTY, 0) AS NEED_QTY			      
		             , NVL(D.CONTRACT_PRICE, 0) AS CONTRACT_PRICE 
		             , DECODE(C.KG_CONVERT_RATE, 0, 1, C.KG_CONVERT_RATE) AS KG_CONVERT_RATE
		             , C.ITEM_SIZE
		             , C.MAKER
		             , C.ORIGIN_TYPE
		             , E.COOK_UNIT COOK_UNIT_ITEM
		             , E.OFFER_UNIT OFFER_UNIT_ITEM			       
		             , A.BASIS_UNIT_CD
		             , A.PO_UNIT
		             , A.RECIPE_APPLY_UNIT
		             , A.LOSS_RATE
		             , A.YIELD
		             , A.SEMI_GOODS_YN
		             , A.PRVS_MATERIAL_CD
		             , A.SORT_ORDER
		             , A.CHG_REASON
		             , A.REMARK
		             , A.ITEM_UPJANG
		             , F.REL_PATH
		             , F.SAVE_FILE_NM
		             , A.CUSER
		             , A.CDATE
		             , A.UUSER
		             , A.UDATE
		             , D.CONTRACT_START
		             , D.CONTRACT_END
		             , B.REF_SEQ
		             , B.APPEND_SEQ
		             , A.STD_SEQ
		             , DECODE(A.SEMI_GOODS_YN, 'Y', FN_RECIPE_AMT_FUN('', A.MATERIAL_CD, :stdDate, '2'), 0) AS G_PRICE
		          FROM RSS_STD_RECIPE_CD_DETAIL A
		             , RSS_STD_RECIPE_CD_MST B
		             , HLDC_PO_ITEM_MST C
		             , (
		                SELECT /*+ LEADING(A.UP) INDEX(A.MR IX_ESPSSGPITM_03)  */ 
		                       ITEM_CODE
		                     , MAX(CONTRACT_START) AS CONTRACT_START
		                     , MAX(CONTRACT_END) AS CONTRACT_END
		                     , AVG(CONTRACT_PRICE) AS CONTRACT_PRICE
		                  --FROM HLDC_PO_CONTRACT_F A
		                  FROM	EPROCUSR.VO_CONTRACT_F_RCP A -- 논리적 분사이후 단가불러오는 뷰 변경 20200309
		                 WHERE 1 = 1
                   		   AND UPJANG = '217840' --FC 외식 메뉴개발실 단가 연결  2017.10.31 이다미 요청
		                   AND :stdDate BETWEEN CONTRACT_START AND CONTRACT_END
		                 GROUP BY ITEM_CODE
		               ) D
		             , RSS_STD_RECIPE_CD_MST E
		             , SCC_APPEND_FILE F
		         WHERE A.STD_RECIPE_CD = B.STD_RECIPE_CD(+)
		           AND A.MATERIAL_CD = C.ITEM_CODE(+)
		           AND A.MATERIAL_CD = D.ITEM_CODE(+)
		           AND A.MATERIAL_CD = E.STD_RECIPE_CD(+)
		           AND E.REF_SEQ = F.REF_SEQ(+)
		           AND E.APPEND_SEQ = F.APPEND_SEQ(+)
		           AND A.MU_CD = '2003'
		           AND A.UPJANG_TYPE = :upjangType
		           AND A.STD_RECIPE_CD = :stdRecipeCd
		           --2017.04.17 CH201703_00534 김호석 상세에서는 기간제한 업이 조회 가능하도록 수정
		           --AND :stdDate BETWEEN A.SDATE AND A.EDATE
		           AND A.SET_RECIPE_CD IS NULL
		           AND NOT EXISTS(
		                          SELECT 'X'
		                            FROM RSS_STD_RECIPE_CD_DETAIL Z
		                           WHERE Z.MATERIAL_CD = A.MATERIAL_CD
		                             AND Z.UPJANG_TYPE = :orgUpjangType
		                             AND Z.STD_RECIPE_CD = :orgStdRecipeCd
		                             AND Z.MU_CD = '2003'
		                             --2017.04.17 CH201703_00534 김호석 상세에서는 기간제한 업이 조회 가능하도록 수정
		                             --AND :stdDate BETWEEN Z.SDATE AND Z.EDATE
		                         )
		       ) X
		 ORDER BY X.STD_RECIPE_CD ASC, X.SORT_ORDER ASC
		]]>
	</statement>

	<!-- 표준레시피 조리법을 삭제한다. -->
	<statement name="deleteList" type="delete">
		/*+ com.hwfs.rc.rrm.dao.recipeListDAO.deleteList	*/
		<![CDATA[
		DELETE FROM RSS_STD_RECIPE_CUISINE
		 WHERE UPJANG_TYPE = :orgUpjangType
		   AND STD_RECIPE_CD = :orgStdRecipeCd
		]]>
	</statement>

	<!-- 표준레시피 조리법을 저장한다. -->
	<statement name="saveList" type="insert">
		/*+ com.hwfs.rc.rrm.dao.recipeListDAO.saveList	*/
		<![CDATA[
		INSERT INTO RSS_STD_RECIPE_CUISINE
		(
		   UPJANG_TYPE
		 , STD_RECIPE_CD
		 , SRLNUM
		 , MU_CD
		 , CUISINE
		 , REF_SEQ
		 , APPEND_SEQ
		 , COOK_SEQ
		 , CUSER
		 , CDATE
		 , UUSER
		 , UDATE
		)
		SELECT :orgUpjangType
		     , :orgStdRecipeCd
		     , SRLNUM
		     , MU_CD
		     , CUISINE
		     , REF_SEQ
		     , APPEND_SEQ
		     , COOK_SEQ
		     , :loginSabun
		     , SYSDATE
		     , :loginSabun
		     , SYSDATE
		  FROM RSS_STD_RECIPE_CUISINE
		 WHERE UPJANG_TYPE = :upjangType
		   AND STD_RECIPE_CD = :stdRecipeCd
		]]>
	</statement>
</hqml>