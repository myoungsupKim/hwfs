<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="rc.rrm.recipeCostReportDAO">
	<desc>표준 vs 실제 원가 대비 보고서 HQML Query</desc>

	<!-- 표준 vs 실제 원가 대비 보고서 목록을 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.rc.rrm.dao.RecipeCostReportDAO.selectList */
		<![CDATA[
SELECT DENSE_RANK() OVER(ORDER BY A.ITEM_CODE) AS ROW_NUM
     , A.ITEM_CODE
     , A.ITEM_NAME
     , DECODE(A.LVL, '1', ROUND(A.MARGIN_PRICE), NULL) AS MARGIN_PRICE
     , A.MENU_CD
     , A.MENU_NM
     , A.SAL_QUANTITY
     , A.PO_UOM
     , A.NEED_QTY
     , ROUND(A.NEED_AMT) AS NEED_AMT
     , DECODE(A.LVL, '1', A.USE_QTY, NULL) AS USE_QTY
     , DECODE(A.LVL, '1', ROUND(A.USE_AMT), NULL) AS USE_AMT
     , A.LVL
     , '1' AS TREE_STATUS --트리 펼침상태(0:닫힘, 1:펼침)
  FROM (
        SELECT A.ITEM_CODE
             , B.ITEM_NAME
             , A.MARGIN_PRICE
             , '' AS MENU_CD
             , '' AS MENU_NM
             , A.SAL_QUANTITY AS SAL_QUANTITY
             , B.PO_UOM
             , NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0) AS NEED_QTY
             , (A.MARGIN_PRICE * NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)) AS NEED_AMT
             , A.USE_QTY
             , A.USE_AMT
             , '1' AS LVL
          FROM (
                SELECT A.UPJANG_CD
                     , A.ITEM_CODE
                     , SUM(A.SAL_QUANTITY) AS SAL_QUANTITY
                     , SUM(A.APPLY_QTY) AS APPLY_QTY
                     , SUM(A.NEED_QTY) AS NEED_QTY
                     , SUM(A.MARGIN_PRICE) AS MARGIN_PRICE
                     , SUM(A.USE_QTY) AS USE_QTY
                     , SUM(A.USE_AMT) AS USE_AMT
                  FROM (
                        SELECT A.UPJANG_CD
                             , A.MATERIAL_CD AS ITEM_CODE
                             , SUM(A.SAL_QUANTITY) AS SAL_QUANTITY
                             , SUM(A.APPLY_QTY) AS APPLY_QTY
                             , SUM(A.NEED_QTY) AS NEED_QTY
                             , 0 AS MARGIN_PRICE
                             , 0 AS USE_QTY
                             , 0 AS USE_AMT
                          FROM (
                                SELECT A.UPJANG_CD
                                     , A.STD_RECIPE_CD
                                     , B.MATERIAL_CD
                                     , A.SAL_QUANTITY AS SAL_QUANTITY
                                     , NVL(B.APPLY_QTY, 0) AS APPLY_QTY
                                     , (A.SAL_QUANTITY * NVL(B.APPLY_QTY, 0)) AS NEED_QTY
                                  FROM (
                                        SELECT T.UPJANG_CD
                                             , R.STD_RECIPE_CD
                                             , SUM(T.SAL_QUANTITY) AS SAL_QUANTITY
                                          FROM (
                                                SELECT A.UPJANG_CD
                                                     , A.MENU_CD
                                                     , A.OCCUR_DATE
                                                     , SUM(NVL(D.EXPECT_QTY, A.SAL_QUANTITY)) AS SAL_QUANTITY
                                                  FROM SLA_IF_UPJANG_SALS_DETAIL A
                                                     , SLA_IF_UPJANG_SALS_MST B
                                                     , SCO_UPJANG_V C
                                                     , RSS_UPJANG_MENU_MGMT D
                                                 WHERE A.OCCUR_DATE = B.OCCUR_DATE(+)
                                                   AND A.SYS_CLASS = B.SYS_CLASS(+)
                                                   AND A.UPJANG_CD = B.UPJANG_CD(+)
                                                   AND A.RECEIPT_NUM = B.RECEIPT_NUM(+)
                                                   AND A.UPJANG_CD = C.UPJANG(+)
                                                   AND A.UPJANG_CD = D.UPJANG_CD(+)
                                                   AND A.MENU_CD = D.MENU_CD(+)
                                                   AND A.MENU_CD IS NOT NULL
                                                   AND A.MU_CD = :muCd
                                                   AND A.OCCUR_DATE BETWEEN :schFrDate AND :schToDate
                                                   AND C.TM_CD = :tmCd
                                                   AND A.UPJANG_CD = :upjang
                                                 GROUP BY A.UPJANG_CD, A.MENU_CD, A.OCCUR_DATE
                                                HAVING SUM(NVL(D.EXPECT_QTY, A.SAL_QUANTITY)) <> 0
                                               ) T
                                             , SLE_OUTLET_MENU S
                                             , RSS_UPJANG_RECIPE_CD_MST R
                                         WHERE T.UPJANG_CD = S.OUTLET_CD
                                           AND T.MENU_CD = S.MENU_CD
                                           AND S.OUTLET_CD = R.UPJANG_CD
                                           AND S.RECP_CD = R.STD_RECIPE_CD
                                           AND S.USE_YN = 'Y'
                                         GROUP BY T.UPJANG_CD, R.STD_RECIPE_CD
                                       ) A
                                     , (
                                        SELECT UPJANG_CD
                                             , MAIN_RECIPE_CD
                                             , MATERIAL_CD
                                             , APPLY_QTY
                                          FROM RSS_UPJANG_RECIPE_DAILY_DTL
                                         WHERE UPJANG_CD = :upjang                                         	
                                           --AND STD_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
                                           AND STD_DATE = :schBtDate                                        
                                           AND SEMI_GOODS_YN = 'N'
                                       ) B
                                   WHERE A.UPJANG_CD = B.UPJANG_CD(+)
                                     AND A.STD_RECIPE_CD = B.MAIN_RECIPE_CD(+)
                               ) A
                         GROUP BY A.UPJANG_CD, A.MATERIAL_CD
                         UNION ALL
                        SELECT TO_NUMBER(:upjang) AS UPJANG_CD
                             , A.ITEM_CODE
                             , 0 AS SAL_QUANTITY
                             , 0 AS APPLY_QTY
                             , 0 AS NEED_QTY
                             , AVG(ROUND(A.MARGIN_PRICE * B.UOM_CONVERT_RATE)) AS MARGIN_PRICE
                             , ROUND(SUM(A.LOSS_QTY / B.UOM_CONVERT_RATE), 6) AS USE_QTY
                             , ROUND(SUM(A.LOSS_MAMOUNT), 6) AS USE_AMT
                          FROM HLDC_PO_PHYSICAL_INVENTORY A
                             , HLDC_PO_ITEM_MST B
                             , (SELECT DISTINCT A.*
                                  FROM HLDC_PO_PHYSICAL_INVENTORY A
                                     , (SELECT PHYSIC_DATE, SUBINV_CODE, ITEM_CODE, MAX(UPDATE_DATE) AS UPDATE_DATE
                                          FROM HLDC_PO_PHYSICAL_INVENTORY
                                         WHERE PHYSIC_DATE BETWEEN :schFrDate AND :schToDate
                                           AND SUBINV_CODE IN (SELECT SUBINV_CODE FROM HLDC_PO_SUBINVENTORY
                                           WHERE CC_CD = (SELECT C.N_CC_CD
                                        					FROM ST_UPJANGV B, SAP_IF.SAP_IFC_CC_MAP C
                                         						WHERE B.UPJANG = :upjang AND B.CC_CD = C.O_CC_CD)) 
                                           --WHERE UPJANG = :upjang)
                                         GROUP BY PHYSIC_DATE, SUBINV_CODE, ITEM_CODE) B
                                 WHERE A.PHYSIC_DATE = B.PHYSIC_DATE
                                   AND A.SUBINV_CODE = B.SUBINV_CODE
                                   AND A.ITEM_CODE = B.ITEM_CODE
                                   AND A.UPDATE_DATE = B.UPDATE_DATE
                               ) C
                         WHERE A.PHYSIC_ID = C.PHYSIC_ID
                           AND A.ITEM_CODE = B.ITEM_CODE
                           AND A.PHYSIC_DATE BETWEEN :schFrDate AND :schToDate
                           AND A.SUBINV_CODE IN (SELECT SUBINV_CODE FROM HLDC_PO_SUBINVENTORY
                                           			WHERE CC_CD = (SELECT C.N_CC_CD
                                        					FROM ST_UPJANGV B, SAP_IF.SAP_IFC_CC_MAP C
                                         						WHERE B.UPJANG = :upjang AND B.CC_CD = C.O_CC_CD))
                           -- WHERE UPJANG = :upjang)
                           AND C.CANCEL_YN = 'N'
                           AND (A.MARGIN_PRICE <> 0 OR A.MARGIN_PRICE * B.UOM_CONVERT_RATE <> 0 OR A.ONHAND_QTY <> 0
                                OR A.ONHAND_QTY / B.UOM_CONVERT_RATE <> 0 OR A.ONHAND_MAMOUNT <> 0 OR A.PHYSIC_QTY <> 0
                                OR A.PHYSIC_QTY / B.UOM_CONVERT_RATE <> 0 OR ROUND(A.ONHAND_MAMOUNT - A.LOSS_MAMOUNT) <> 0
                                OR A.LOSS_QTY <> 0 OR A.LOSS_QTY / B.UOM_CONVERT_RATE <> 0 OR ROUND(A.LOSS_MAMOUNT) <> 0 )
                           AND (A.PHYSIC_QTY + A.ONHAND_QTY + A.LOSS_QTY) != 0
                         GROUP BY A.ITEM_CODE
                       ) A
                 GROUP BY A.UPJANG_CD, A.ITEM_CODE
                HAVING A.ITEM_CODE IS NOT NULL
               ) A
             , HLDC_PO_ITEM_MST B
         WHERE A.ITEM_CODE = B.ITEM_CODE(+)
         <#if schType2 == '1' > AND B.ITEM_CLASS2 != 'F20' </#if>
         <#if schType2 == '2' > AND B.ITEM_CLASS2 = 'F20' </#if>
         /* 편차범위 내외로 조회할때 */    
		<#if schType3 == '1' > AND (ROUND(A.USE_AMT) / DECODE((A.MARGIN_PRICE * NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)),0,1,ROUND((A.MARGIN_PRICE * NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)))))*100 >= (100-to_number(:devRate)) 
		                       AND (ROUND(A.USE_AMT) / DECODE((A.MARGIN_PRICE * NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)),0,1,ROUND((A.MARGIN_PRICE * NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)))))*100 <= (100+to_number(:devRate)) </#if>
		<#if schType3 == '2' > AND ((ROUND(A.USE_AMT) / DECODE((A.MARGIN_PRICE * NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)),0,1,ROUND((A.MARGIN_PRICE * NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)))))*100 < (100-to_number(:devRate)) 
		                         OR (ROUND(A.USE_AMT) / DECODE((A.MARGIN_PRICE * NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)),0,1,ROUND((A.MARGIN_PRICE * NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)))))*100 > (100+to_number(:devRate))) </#if>
                  
      /* 전체 트리를 조회할때 */   
      <#if schType == '1' >
        UNION ALL
        SELECT A.MATERIAL_CD AS ITEM_CODE
             , B.ITEM_NAME AS ITEM_NAME
             , 0 AS MARGIN_PRICE
             , A.MENU_CD
             , (SELECT Z.MENU_NM FROM SLE_OUTLET_MENU Z WHERE Z.OUTLET_CD = A.UPJANG_CD AND Z.MENU_CD = A.MENU_CD) AS MENU_NM
             , A.SAL_QUANTITY AS SAL_QUANTITY
             , B.PO_UOM AS PO_UOM
             , NVL(ROUND((A.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0) AS NEED_QTY
		     , 0 AS NEED_AMT
             , 0 AS USE_QTY
             , 0 AS USE_AMT
             , '2' AS LVL
          FROM (
                SELECT A.UPJANG_CD
                     , A.MATERIAL_CD
                     , A.MENU_CD
                     , SUM(A.SAL_QUANTITY) AS SAL_QUANTITY
                     , SUM(A.NEED_QTY) AS NEED_QTY
                  FROM (
                        SELECT A.UPJANG_CD
                             , B.MATERIAL_CD
                             , A.MENU_CD
                             , A.SAL_QUANTITY AS SAL_QUANTITY
                             , NVL(B.APPLY_QTY, 0) AS APPLY_QTY
                             , (A.SAL_QUANTITY * NVL(B.APPLY_QTY, 0)) AS NEED_QTY
                          FROM (
                                SELECT T.UPJANG_CD
                                     , R.STD_RECIPE_CD
                                     , T.MENU_CD
                                     , SUM(T.SAL_QUANTITY) AS SAL_QUANTITY
                                  FROM (
                                        SELECT A.UPJANG_CD
                                             , A.MENU_CD
                                             , A.OCCUR_DATE
                                             , SUM(NVL(D.EXPECT_QTY, A.SAL_QUANTITY)) AS SAL_QUANTITY
                                          FROM SLA_IF_UPJANG_SALS_DETAIL A
                                             , SLA_IF_UPJANG_SALS_MST B
                                             , SCO_UPJANG_V C
                                             , RSS_UPJANG_MENU_MGMT D
                                         WHERE A.OCCUR_DATE = B.OCCUR_DATE(+)
                                           AND A.SYS_CLASS = B.SYS_CLASS(+)
                                           AND A.UPJANG_CD = B.UPJANG_CD(+)
                                           AND A.RECEIPT_NUM = B.RECEIPT_NUM(+)
                                           AND A.UPJANG_CD = C.UPJANG(+)
                                           AND A.UPJANG_CD = D.UPJANG_CD(+)
                                           AND A.MENU_CD = D.MENU_CD(+)
                                           AND A.MENU_CD IS NOT NULL
                                           AND A.MU_CD = :muCd
                                           AND A.OCCUR_DATE BETWEEN :schFrDate AND :schToDate
                                           AND C.TM_CD = :tmCd
                                           AND A.UPJANG_CD = :upjang
                                         GROUP BY A.UPJANG_CD, A.MENU_CD, A.OCCUR_DATE
                                         HAVING SUM(NVL(D.EXPECT_QTY, A.SAL_QUANTITY)) <> 0
                                       ) T
                                     , SLE_OUTLET_MENU S
                                     , RSS_UPJANG_RECIPE_CD_MST R
                                 WHERE T.UPJANG_CD = S.OUTLET_CD
                                   AND T.MENU_CD = S.MENU_CD
                                   AND S.OUTLET_CD = R.UPJANG_CD
                                   AND S.RECP_CD = R.STD_RECIPE_CD
                                   AND S.USE_YN = 'Y'
                                 GROUP BY T.UPJANG_CD, T.MENU_CD, R.STD_RECIPE_CD
                               ) A
                             , (
                                SELECT UPJANG_CD
                                     , MAIN_RECIPE_CD
                                     , MATERIAL_CD
                                     , APPLY_QTY
                                  FROM RSS_UPJANG_RECIPE_DAILY_DTL
                                 WHERE UPJANG_CD = :upjang
                                   --AND STD_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
                                   AND STD_DATE = :schBtDate                                        
                                   AND SEMI_GOODS_YN = 'N'
                               ) B
                           WHERE A.UPJANG_CD = B.UPJANG_CD(+)
                             AND A.STD_RECIPE_CD = B.MAIN_RECIPE_CD(+)
                       ) A
                 GROUP BY A.UPJANG_CD, A.MENU_CD, A.MATERIAL_CD
               ) A
             , HLDC_PO_ITEM_MST B
         WHERE A.MATERIAL_CD = B.ITEM_CODE(+)
         <#if schType2 == '1' > AND B.ITEM_CLASS2 != 'F20' </#if>
         <#if schType2 == '2' > AND B.ITEM_CLASS2 = 'F20' </#if>
         	/* 전체 트리를 조회 시 편차범위구분 조건 추가 시 편차범위 구분 조건에 해당되는 자재코드만 가져옴 */   
	         <#if schType3 != '0' >
	         AND A.MATERIAL_CD IN (
						            SELECT Z.ITEM_CODE					           
						          FROM (
						                SELECT W.UPJANG_CD
						                     , W.ITEM_CODE
						                     , SUM(W.SAL_QUANTITY) AS SAL_QUANTITY
						                     , SUM(W.APPLY_QTY) AS APPLY_QTY
						                     , SUM(W.NEED_QTY) AS NEED_QTY
						                     , SUM(W.MARGIN_PRICE) AS MARGIN_PRICE
						                     , SUM(W.USE_QTY) AS USE_QTY
						                     , SUM(W.USE_AMT) AS USE_AMT
						                  FROM (
						                        SELECT Y.UPJANG_CD
						                             , Y.MATERIAL_CD AS ITEM_CODE
						                             , SUM(Y.SAL_QUANTITY) AS SAL_QUANTITY
						                             , SUM(Y.APPLY_QTY) AS APPLY_QTY
						                             , SUM(Y.NEED_QTY) AS NEED_QTY
						                             , 0 AS MARGIN_PRICE
						                             , 0 AS USE_QTY
						                             , 0 AS USE_AMT
						                          FROM (
						                                SELECT R.UPJANG_CD
						                                     , R.STD_RECIPE_CD
						                                     , T.MATERIAL_CD
						                                     , R.SAL_QUANTITY AS SAL_QUANTITY
						                                     , NVL(T.APPLY_QTY, 0) AS APPLY_QTY
						                                     , (R.SAL_QUANTITY * NVL(T.APPLY_QTY, 0)) AS NEED_QTY
						                                  FROM (
						                                        SELECT T.UPJANG_CD
						                                             , R.STD_RECIPE_CD
						                                             , SUM(T.SAL_QUANTITY) AS SAL_QUANTITY
						                                          FROM (
						                                                SELECT A.UPJANG_CD
						                                                     , A.MENU_CD
						                                                     , A.OCCUR_DATE
						                                                     , SUM(NVL(D.EXPECT_QTY, A.SAL_QUANTITY)) AS SAL_QUANTITY
						                                                  FROM SLA_IF_UPJANG_SALS_DETAIL A
						                                                     , SLA_IF_UPJANG_SALS_MST B
						                                                     , SCO_UPJANG_V C
						                                                     , RSS_UPJANG_MENU_MGMT D
						                                                 WHERE A.OCCUR_DATE = B.OCCUR_DATE(+)
						                                                   AND A.SYS_CLASS = B.SYS_CLASS(+)
						                                                   AND A.UPJANG_CD = B.UPJANG_CD(+)
						                                                   AND A.RECEIPT_NUM = B.RECEIPT_NUM(+)
						                                                   AND A.UPJANG_CD = C.UPJANG(+)
						                                                   AND A.UPJANG_CD = D.UPJANG_CD(+)
						                                                   AND A.MENU_CD = D.MENU_CD(+)
						                                                   AND A.MENU_CD IS NOT NULL
						                                                   AND A.MU_CD = :muCd
						                                                   AND A.OCCUR_DATE BETWEEN :schFrDate AND :schToDate
						                                                   AND C.TM_CD = :tmCd
						                                                   AND A.UPJANG_CD = :upjang
						                                                 GROUP BY A.UPJANG_CD, A.MENU_CD, A.OCCUR_DATE
						                                                HAVING SUM(NVL(D.EXPECT_QTY, A.SAL_QUANTITY)) <> 0
						                                               ) T
						                                             , SLE_OUTLET_MENU S
						                                             , RSS_UPJANG_RECIPE_CD_MST R
						                                         WHERE T.UPJANG_CD = S.OUTLET_CD
						                                           AND T.MENU_CD = S.MENU_CD
						                                           AND S.OUTLET_CD = R.UPJANG_CD
						                                           AND S.RECP_CD = R.STD_RECIPE_CD
						                                           AND S.USE_YN = 'Y'
						                                         GROUP BY T.UPJANG_CD, R.STD_RECIPE_CD
						                                       ) R
						                                     , (
						                                        SELECT UPJANG_CD
						                                             , MAIN_RECIPE_CD
						                                             , MATERIAL_CD
						                                             , APPLY_QTY
						                                          FROM RSS_UPJANG_RECIPE_DAILY_DTL
						                                         WHERE UPJANG_CD = :upjang
						                                           --AND STD_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
						                                           AND STD_DATE = :schBtDate                                        
						                                           AND SEMI_GOODS_YN = 'N'
						                                       ) T
						                                   WHERE R.UPJANG_CD = T.UPJANG_CD(+)
						                                     AND R.STD_RECIPE_CD = T.MAIN_RECIPE_CD(+)
						                               ) Y
						                         GROUP BY Y.UPJANG_CD, Y.MATERIAL_CD
						                         UNION ALL
						                        SELECT TO_NUMBER(:upjang) AS UPJANG_CD
						                             , U.ITEM_CODE
						                             , 0 AS SAL_QUANTITY
						                             , 0 AS APPLY_QTY
						                             , 0 AS NEED_QTY
						                             , AVG(ROUND(U.MARGIN_PRICE * B.UOM_CONVERT_RATE)) AS MARGIN_PRICE
						                             , ROUND(SUM(U.LOSS_QTY / B.UOM_CONVERT_RATE), 6) AS USE_QTY
						                             , ROUND(SUM(U.LOSS_MAMOUNT), 6) AS USE_AMT
						                          FROM HLDC_PO_PHYSICAL_INVENTORY U
						                             , HLDC_PO_ITEM_MST B
						                             , (SELECT DISTINCT A.*
						                                  FROM HLDC_PO_PHYSICAL_INVENTORY A
						                                     , (SELECT PHYSIC_DATE, SUBINV_CODE, ITEM_CODE, MAX(UPDATE_DATE) AS UPDATE_DATE
						                                          FROM HLDC_PO_PHYSICAL_INVENTORY
						                                         WHERE PHYSIC_DATE BETWEEN :schFrDate AND :schToDate
						                                           AND SUBINV_CODE IN (SELECT SUBINV_CODE FROM HLDC_PO_SUBINVENTORY
                                           												WHERE CC_CD = (SELECT C.N_CC_CD
                                        																FROM ST_UPJANGV B, SAP_IF.SAP_IFC_CC_MAP C
                                         																	WHERE B.UPJANG = :upjang AND B.CC_CD = C.O_CC_CD)) 
						                                           --WHERE UPJANG = :upjang)
						                                         GROUP BY PHYSIC_DATE, SUBINV_CODE, ITEM_CODE) B
						                                 WHERE A.PHYSIC_DATE = B.PHYSIC_DATE
						                                   AND A.SUBINV_CODE = B.SUBINV_CODE
						                                   AND A.ITEM_CODE = B.ITEM_CODE
						                                   AND A.UPDATE_DATE = B.UPDATE_DATE
						                               ) C
						                         WHERE U.PHYSIC_ID = C.PHYSIC_ID
						                           AND U.ITEM_CODE = B.ITEM_CODE
						                           AND U.PHYSIC_DATE BETWEEN :schFrDate AND :schToDate
						                           AND U.SUBINV_CODE IN (SELECT SUBINV_CODE FROM HLDC_PO_SUBINVENTORY
                                           									WHERE CC_CD = (SELECT C.N_CC_CD
                                        													FROM ST_UPJANGV B, SAP_IF.SAP_IFC_CC_MAP C
                                         														WHERE B.UPJANG = :upjang AND B.CC_CD = C.O_CC_CD))
						                           -- WHERE UPJANG = :upjang)
						                           AND C.CANCEL_YN = 'N'
						                           AND (U.MARGIN_PRICE <> 0 OR U.MARGIN_PRICE * B.UOM_CONVERT_RATE <> 0 OR U.ONHAND_QTY <> 0
						                                OR U.ONHAND_QTY / B.UOM_CONVERT_RATE <> 0 OR U.ONHAND_MAMOUNT <> 0 OR U.PHYSIC_QTY <> 0
						                                OR U.PHYSIC_QTY / B.UOM_CONVERT_RATE <> 0 OR ROUND(U.ONHAND_MAMOUNT - U.LOSS_MAMOUNT) <> 0
						                                OR U.LOSS_QTY <> 0 OR U.LOSS_QTY / B.UOM_CONVERT_RATE <> 0 OR ROUND(U.LOSS_MAMOUNT) <> 0 )
						                           AND (U.PHYSIC_QTY + U.ONHAND_QTY + U.LOSS_QTY) != 0
						                         GROUP BY U.ITEM_CODE
						                       ) W
						                 GROUP BY W.UPJANG_CD, W.ITEM_CODE
						                HAVING W.ITEM_CODE IS NOT NULL
						               ) Z
						             , HLDC_PO_ITEM_MST B
						         WHERE Z.ITEM_CODE = B.ITEM_CODE(+)
						         <#if schType2 == '1' > AND B.ITEM_CLASS2 != 'F20' </#if>
						         <#if schType2 == '2' > AND B.ITEM_CLASS2 = 'F20' </#if>
						         /* 편차범위 내외로 조회할때 */    
									<#if schType3 == '1' > AND (ROUND(Z.USE_AMT) / DECODE((Z.MARGIN_PRICE * NVL(ROUND((Z.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)),0,1,ROUND((Z.MARGIN_PRICE * NVL(ROUND((Z.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)))))*100 >= (100-to_number(:devRate)) 
								                           AND (ROUND(Z.USE_AMT) / DECODE((Z.MARGIN_PRICE * NVL(ROUND((Z.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)),0,1,ROUND((Z.MARGIN_PRICE * NVL(ROUND((Z.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)))))*100 <= (100+to_number(:devRate)) </#if>
									<#if schType3 == '2' > AND ((ROUND(Z.USE_AMT) / DECODE((Z.MARGIN_PRICE * NVL(ROUND((Z.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)),0,1,ROUND((Z.MARGIN_PRICE * NVL(ROUND((Z.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)))))*100 < (100-to_number(:devRate)) 
			                        					     OR (ROUND(Z.USE_AMT) / DECODE((Z.MARGIN_PRICE * NVL(ROUND((Z.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)),0,1,ROUND((Z.MARGIN_PRICE * NVL(ROUND((Z.NEED_QTY / B.KG_CONVERT_RATE / 1000), 2), 0)))))*100 > (100+to_number(:devRate))) </#if>
	          
	         
	         )         
	         </#if>
         </#if>
       ) A
ORDER BY ITEM_CODE, LVL
		]]>
	</statement>

</hqml>
