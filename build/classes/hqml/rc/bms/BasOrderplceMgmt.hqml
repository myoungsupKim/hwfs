<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="rc.bms.basOrderplceMgmtDAO">
	<desc>연회 예약에서 사용되는 외부 거래처를 관리한다.</desc>

	<!--  DATA를 조회한다. -->
	<statement name="selectOrderplceList" type="select">
		<![CDATA[

			SELECT  OUTLET_CD, 		OUTLET_NM ,
			 		VENDOR_CLASS, 	VENDOR_CLASS_NM ,
			 		VENDOR_CD,		VENDOR_NM,
					
					CASE  LENGTH(LTRIM(RTRIM(BSN_NO)))
					WHEN 10 THEN SUBSTR(BSN_NO,1,3) || '-' || SUBSTR(BSN_NO,4,2) || '-' || SUBSTR(BSN_NO,6,5)
					ELSE BSN_NO END    AS BSN_NO,  
					 
					
					CORP_NUM,
					CEO_NM,		
					BIZ_TYPE,
					BIZ_CAT,
					
					MU,
                    TM_CD,
                    TM_NM, 
					
					--핸드폰번호 - 넣기
					CASE  LENGTH(LTRIM(RTRIM(HAND_PHONE))) 
                    WHEN  9 THEN SUBSTR(HAND_PHONE,1,2) || '-' || SUBSTR(HAND_PHONE,3,3) || '-' || SUBSTR(HAND_PHONE,6,4)
                    WHEN 10 THEN SUBSTR(HAND_PHONE,1,2) || '-' || SUBSTR(HAND_PHONE,3,4) || '-' || SUBSTR(HAND_PHONE,7,4)
                    WHEN 11 THEN SUBSTR(HAND_PHONE,1,3) || '-' || SUBSTR(HAND_PHONE,4,4) || '-' || SUBSTR(HAND_PHONE,8,4)
                    ELSE '' END    AS HAND_PHONE,  
								 
					SCC_TELNO_SPLIT_FUN(HAND_PHONE,1)     AS HAND_PHONE1,
					SCC_TELNO_SPLIT_FUN(HAND_PHONE,2)     AS HAND_PHONE2,
					SCC_TELNO_SPLIT_FUN(HAND_PHONE,3)     AS HAND_PHONE3,
					
					--전화번호 - 넣기		   
					CASE  LENGTH(LTRIM(RTRIM(TEL_NUM))) 
                    WHEN  9 THEN SUBSTR(TEL_NUM,1,2) || '-' || SUBSTR(TEL_NUM,3,3) || '-' || SUBSTR(TEL_NUM,6,4)
                    WHEN 10 THEN SUBSTR(TEL_NUM,1,2) || '-' || SUBSTR(TEL_NUM,3,4) || '-' || SUBSTR(TEL_NUM,7,4)
                    WHEN 11 THEN SUBSTR(TEL_NUM,1,3) || '-' || SUBSTR(TEL_NUM,4,4) || '-' || SUBSTR(TEL_NUM,8,4)
                    ELSE '' END    AS TEL_NUM,  
								 
					SCC_TELNO_SPLIT_FUN(TEL_NUM,1)     AS TEL_NUM1,
					SCC_TELNO_SPLIT_FUN(TEL_NUM,2)     AS TEL_NUM2,
					SCC_TELNO_SPLIT_FUN(TEL_NUM,3)     AS TEL_NUM3,
					
					--FAX번호 
					CASE  LENGTH(LTRIM(RTRIM(FAX_NUM))) 
                    WHEN  9 THEN SUBSTR(FAX_NUM,1,2) || '-' || SUBSTR(FAX_NUM,3,3) || '-' || SUBSTR(FAX_NUM,6,4)
                    WHEN 10 THEN SUBSTR(FAX_NUM,1,2) || '-' || SUBSTR(FAX_NUM,3,4) || '-' || SUBSTR(FAX_NUM,7,4)
                    WHEN 11 THEN SUBSTR(FAX_NUM,1,3) || '-' || SUBSTR(FAX_NUM,4,4) || '-' || SUBSTR(FAX_NUM,8,4)
                    ELSE '' END    AS FAX_NUM,  
				 
			 		SCC_TELNO_SPLIT_FUN(FAX_NUM,1)     AS FAX_NUM1,
			 		SCC_TELNO_SPLIT_FUN(FAX_NUM,2)     AS FAX_NUM2,
			 		SCC_TELNO_SPLIT_FUN(FAX_NUM,3)     AS FAX_NUM3,
					 
					 
					PRCG_NM,
					
					
					--핸드폰번호 - 넣기
					CASE  LENGTH(LTRIM(RTRIM(PRCG_HAND_PHONE))) 
                    WHEN  9 THEN SUBSTR(PRCG_HAND_PHONE,1,2) || '-' || SUBSTR(PRCG_HAND_PHONE,3,3) || '-' || SUBSTR(PRCG_HAND_PHONE,6,4)
                    WHEN 10 THEN SUBSTR(PRCG_HAND_PHONE,1,2) || '-' || SUBSTR(PRCG_HAND_PHONE,3,4) || '-' || SUBSTR(PRCG_HAND_PHONE,7,4)
                    WHEN 11 THEN SUBSTR(PRCG_HAND_PHONE,1,3) || '-' || SUBSTR(PRCG_HAND_PHONE,4,4) || '-' || SUBSTR(PRCG_HAND_PHONE,8,4)
                    ELSE '' END    AS PRCG_HAND_PHONE,  
								 
					SCC_TELNO_SPLIT_FUN(PRCG_HAND_PHONE,1)     AS PRCG_HAND_PHONE1,
			 		SCC_TELNO_SPLIT_FUN(PRCG_HAND_PHONE,2)     AS PRCG_HAND_PHONE2,
			 		SCC_TELNO_SPLIT_FUN(PRCG_HAND_PHONE,3)     AS PRCG_HAND_PHONE3,
					
					--전화번호 - 넣기		   
					CASE  LENGTH(LTRIM(RTRIM(PRCG_TEL_NUM))) 
                    WHEN  9 THEN SUBSTR(PRCG_TEL_NUM,1,2) || '-' || SUBSTR(PRCG_TEL_NUM,3,3) || '-' || SUBSTR(PRCG_TEL_NUM,6,4)
                    WHEN 10 THEN SUBSTR(PRCG_TEL_NUM,1,2) || '-' || SUBSTR(PRCG_TEL_NUM,3,4) || '-' || SUBSTR(PRCG_TEL_NUM,7,4)
                    WHEN 11 THEN SUBSTR(PRCG_TEL_NUM,1,3) || '-' || SUBSTR(PRCG_TEL_NUM,4,4) || '-' || SUBSTR(PRCG_TEL_NUM,8,4)
                    ELSE '' END    AS PRCG_TEL_NUM,  
			 
			 		SCC_TELNO_SPLIT_FUN(PRCG_TEL_NUM,1)     AS PRCG_TEL_NUM1,
			 		SCC_TELNO_SPLIT_FUN(PRCG_TEL_NUM,2)     AS PRCG_TEL_NUM2,
			 		SCC_TELNO_SPLIT_FUN(PRCG_TEL_NUM,3)     AS PRCG_TEL_NUM3,
			 		
					EMAIL_ADDR,
					 
					ADDR_KEY,
					ADDR_INFO,
					 
					REMARK,
					USE_YN,
					CDATE,
					CUSER,
					UDATE,
					UUSER
						
			FROM ( SELECT 	 
				 		MGMT.OUTLET_CD, 		OUTLET.OUTLET_NM AS OUTLET_NM ,
				 		MGMT.VENDOR_CLASS, 		CLASS.CODE_NAME  AS VENDOR_CLASS_NM ,
				 		MGMT.VENDOR_CD,			MGMT.VENDOR_NM,
						MGMT.BSN_NO,
						MGMT.CORP_NUM,
						MGMT.CEO_NM,
						MGMT.BIZ_TYPE,
						MGMT.BIZ_CAT,
						
						OUTLET.MU_CD AS MU,
                        OUTLET.TM_CD AS TM_CD,
                        OUTLET.TM_NM AS TM_NM, 
						
						SCC_CRYPTO.MASKAUTH_FUN(MGMT.TEL_NUM,9,:loginPersMask,:maskAuth)    AS TEL_NUM,
				 		SCC_CRYPTO.MASKAUTH_FUN(MGMT.HAND_PHONE,8,:loginPersMask,:maskAuth) AS HAND_PHONE,
						SCC_CRYPTO.MASKAUTH_FUN(MGMT.FAX_NUM,9,:loginPersMask,:maskAuth)    AS FAX_NUM,
						
						MGMT.PRCG_NM,
						
						SCC_CRYPTO.MASKAUTH_FUN(MGMT.PRCG_TEL_NUM,9,:loginPersMask,:maskAuth)    AS PRCG_TEL_NUM,
				 		SCC_CRYPTO.MASKAUTH_FUN(MGMT.PRCG_HAND_PHONE,8,:loginPersMask,:maskAuth) AS PRCG_HAND_PHONE,
				 		
				 		SCC_CRYPTO.MASKAUTH_FUN(MGMT.EMAIL_ADDR,7,:loginPersMask,:maskAuth) AS EMAIL_ADDR,
						
						MGMT.ADDR_KEY,
						SCC_ADDR_FUN(MGMT.ADDR_KEY, :loginPersMask, :maskAuth) AS ADDR_INFO,
						 
						MGMT.REMARK,
						DECODE(NVL(MGMT.USE_YN, '0'), 'Y', '1', '0') AS USE_YN,
						MGMT.CDATE,
						MGMT.CUSER,
						MGMT.UDATE,
						MGMT.UUSER
				       	
					FROM   	BMS_ORDERPLCE_MST MGMT
					INNER JOIN ( SELECT MST.OUTLET_CD, MST.OUTLET_NM ,  UPJANG.MU_CD,  UPJANG.TM_CD,  UPJANG.TM_NM
		                           FROM SLE_OUTLET_MST MST
		                         INNER JOIN  SCO_UPJANG_V   UPJANG ON  UPJANG.UPJANG = TO_NUMBER(MST.OUTLET_CD) 
		                                         <#if muCd?has_content> AND  UPJANG.MU_CD = :muCd </#if>
		                                         <#if tmCd?has_content> AND  UPJANG.TM_CD = :tmCd </#if>
		              			 ) OUTLET ON OUTLET.OUTLET_CD = MGMT.OUTLET_CD 
					INNER JOIN SCC_COMMON_CODE CLASS  ON CLASS.GROUP_CODE = 'BMS_0004'    AND CLASS.CODE = MGMT.VENDOR_CLASS	-- 외부거래처 구분(종류)
					WHERE  	MGMT.USE_YN = MGMT.USE_YN
					<#if outletCd?has_content> AND MGMT.OUTLET_CD = :outletCd   		 </#if>
					<#if vendorNm?has_content> AND MGMT.VENDOR_NM LIKE :vendorNm || '%'  </#if>
					<#if prcgNm?has_content>   AND MGMT.PRCG_NM   LIKE :prcgNm || '%'  	 </#if>
					
				) 
				ORDER BY  OUTLET_CD,
					  	  VENDOR_CD,
					  	  VENDOR_CLASS,
						  VENDOR_NM

		]]>
	</statement>
		
	<!--  DATA를 저장한다. -->
	<statement name="insertOrderplceMgmt" type="insert">
		<![CDATA[
 INSERT INTO BMS_ORDERPLCE_MST
		(
			
			OUTLET_CD,
		  	VENDOR_CD,
		  	VENDOR_CLASS,
			VENDOR_NM,
			BSN_NO,
			CORP_NUM,
			CEO_NM,
			BIZ_TYPE,
			BIZ_CAT,
			TEL_NUM,
			HAND_PHONE,
			FAX_NUM,
			PRCG_NM,
			PRCG_TEL_NUM,
			PRCG_HAND_PHONE,
			EMAIL_ADDR,
			ADDR_KEY,
			REMARK,
			USE_YN,
			CDATE,
			CUSER,
			UDATE,
			UUSER
		) VALUES (
 		
		:outletCd,
 		:vendorCd,
 		<#if vendorClass?exists> :vendorClass, <#else> null, </#if>
		<#if vendorNm?exists> :vendorNm, <#else> null, </#if>
		<#if bsnNo?exists> :bsnNo, <#else> null, </#if>
		<#if corpNum?exists> :corpNum, <#else> null, </#if>
		<#if ceoNm?exists> :ceoNm, <#else> null, </#if>
		<#if bizType?exists> :bizType, <#else> null, </#if>
		<#if bizCat?exists> :bizCat, <#else> null, </#if>
		<#if telNum?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:telNum,'-','')), <#else> null, </#if>
		<#if handPhone?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:handPhone,'-','')), <#else> null, </#if>
		<#if faxNum?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:faxNum,'-','')), <#else> null, </#if>
		<#if prcgNm?exists> :prcgNm, <#else> null, </#if>
		<#if prcgTelNum?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:prcgTelNum,'-','')), <#else> null, </#if>
		<#if prcgHandPhone?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:prcgHandPhone,'-','')), <#else> null, </#if>
		<#if emailAddr?exists> SCC_CRYPTO.ENC_FUN(:emailAddr), <#else> null, </#if>
		<#if addrKey?exists> :addrKey, <#else> null, </#if>
		<#if remark?exists> :remark, <#else> null, </#if>
 		'Y',
		SYSDATE,
		:loginSabun,
		SYSDATE,
		:loginSabun
		)
 
		]]>
	</statement>
	
	<!--  DATA를 수정한다. -->
	<statement name="updateOrderplceMgmt" type="update">
		<![CDATA[
 UPDATE BMS_ORDERPLCE_MST SET
			<#if vendorClass?exists> VENDOR_CLASS = :vendorClass, </#if>
			<#if vendorNm?exists> VENDOR_NM = :vendorNm, </#if>
			<#if bsnNo?exists> BSN_NO = :bsnNo, </#if>
			<#if corpNum?exists> CORP_NUM = :corpNum, </#if>
			<#if ceoNm?exists> CEO_NM = :ceoNm, </#if>
			<#if bizType?exists> BIZ_TYPE = :bizType, </#if>
			<#if bizCat?exists> BIZ_CAT = :bizCat, </#if>
			<#if telNum?exists> TEL_NUM = SCC_CRYPTO.ENC_FUN(REPLACE(:telNum,'-','')), </#if>
			<#if handPhone?exists> HAND_PHONE = SCC_CRYPTO.ENC_FUN(REPLACE(:handPhone,'-','')), </#if>
			<#if faxNum?exists> FAX_NUM = SCC_CRYPTO.ENC_FUN(REPLACE(:faxNum,'-','')), </#if>
			<#if prcgNm?exists> PRCG_NM = :prcgNm, </#if>
			<#if prcgTelNum?exists> PRCG_TEL_NUM = SCC_CRYPTO.ENC_FUN(REPLACE(:prcgTelNum,'-','')), </#if>
			<#if prcgHandPhone?exists> PRCG_HAND_PHONE = SCC_CRYPTO.ENC_FUN(REPLACE(:prcgHandPhone,'-','')), </#if>
			<#if emailAddr?exists> EMAIL_ADDR = SCC_CRYPTO.ENC_FUN(:emailAddr), </#if>
			<#if addrKey?exists> ADDR_KEY = :addrKey, </#if>
    
			<#if remark?exists> REMARK = :remark, </#if>
			<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
			 
			UDATE = SYSDATE,
			UUSER = :loginSabun
			
		WHERE  OUTLET_CD = :outletCd
		AND    VENDOR_CD = :vendorCd
		]]>
	</statement>
	
	<!-- AM 코드를 생성한다. -->
	<statement name="maxOrderplceCodeCreate" type="select">
		<![CDATA[
 		 
		SELECT  TO_CHAR(SYSDATE,'YYYY') || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(VENDOR_CD,5,4))),'0') + 1,4,'0')  AS MAX_VNDOR_CD 
 		FROM BMS_ORDERPLCE_MST
 		WHERE OUTLET_CD = :outletCd   
 		  AND SUBSTR(VENDOR_CD,1,4) = TO_CHAR(SYSDATE,'YYYY')
        
 		
		]]>
	</statement>
	
	
</hqml>	