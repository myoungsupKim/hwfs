<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="rc.bms.tmMgmtDAO">
	<desc>연회웨딩 실적/목표 관리</desc>
	
	<!--  DATA를 조회한다. -->
	<statement name="selectGoalList" type="select">
		<![CDATA[

			SELECT 
				   MAST.UPJANG_CD,
				   MAST.GOAL_YEAR,
			       SHOP.OUTLET_NM AS UPJANG_NM,  --업장명
			       MAST.GUBUN01,
			       MAST.CNT01,
			       MAST.CNT02,
			       MAST.CNT03,
			       MAST.CNT04,
			       MAST.CNT05,
			       MAST.CNT06,
			       MAST.CNT07,
			       MAST.CNT08,
			       MAST.CNT09,
			       MAST.CNT10,
			       MAST.CNT11,
			       MAST.CNT12,
			       MAST.AMT01,
			       MAST.AMT02,
			       MAST.AMT03,
			       MAST.AMT04,
			       MAST.AMT05,
			       MAST.AMT06,
			       MAST.AMT07,
			       MAST.AMT08,
			       MAST.AMT09,
			       MAST.AMT10,
			       MAST.AMT11,
			       MAST.AMT12,
			       
			       DECODE(MAST.USE_YN, 'Y', 1, 0) AS USE_YN,
			       MAST.CDATE,
			       MAST.CUSER,
			       MAST.UDATE,
			       MAST.UUSER
			       
			FROM   BMS_TM_GOAL         MAST
			INNER JOIN SLE_OUTLET_MST  SHOP ON SHOP.OUTLET_CD  = MAST.UPJANG_CD
			WHERE  1=1
			<#if upjangCd?has_content> 
			AND    MAST.UPJANG_CD = :upjangCd
			</#if>
			AND    MAST.GOAL_YEAR = :goalYear
			ORDER BY UPJANG_CD, GOAL_YEAR, GUBUN01


		]]>
	</statement>
	
	<!--  DATA를 조회한다. -->
	<statement name="selectTmGoalChk" type="select">
		<![CDATA[

			SELECT 
				   MAST.UPJANG_CD,
				   MAST.GOAL_YEAR,
			       SHOP.OUTLET_NM AS UPJANG_NM,  --업장명
			       MAST.GUBUN01
			       
			FROM   BMS_TM_GOAL         MAST
			INNER JOIN SLE_OUTLET_MST  SHOP ON SHOP.OUTLET_CD  = MAST.UPJANG_CD
			WHERE  1=1
			<#if upjangCd?has_content> 
			AND    MAST.UPJANG_CD = :upjangCd
			</#if>
			AND    MAST.GOAL_YEAR = :goalYear
			AND    MAST.GUBUN01   = :gubun01


		]]>
	</statement>
	
	
	<!--  DATA를 조회한다. -->
	<statement name="selectApproveSale" type="select">
		<![CDATA[

			SELECT NVL2(TEAM_MST_DATE,'Y','N') APPV_YN    
			FROM MAS_CLOSE_MODIFYREQ A,
		  		SCC_COMMON_CODE B
			 WHERE A.CLOSE_GUBUN = B.CODE
			  	AND A.UPJANG = :upjangCd
			  	AND :occurDate BETWEEN CLOSE_DATEFR AND CLOSE_DATETO
			  	--승인한지 7일 일주일 지나면 재승인 필요 (공통코드 마감구분(MA0035) 코드 013 속성1 값)  
			  	AND A.TEAM_MST_DATE > sysdate - (SELECT ATTR01 FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'MA0035' AND CODE = '013')  
			 	AND A.CLOSE_GUBUN = '013'
        		AND A.TEAM_MST_CONGUBN = 'Y'
			 	AND B.GROUP_CODE = 'MA0035'

		]]>
	</statement>
	
	<!--  DATA를 조회한다. -->
	<statement name="selectApproveGoal" type="select">
		<![CDATA[

			SELECT SET3 AS LIMIT_DATE
			     , SET4 AS LIMIT_YN
			     , SET5 AS ADMIN_USER
			     , ATTR01 AS PERIOD      
				FROM SCC_COMMON_CODE
				
				 WHERE GROUP_CODE = 'MA0035'
				 	AND CODE = '013'

		]]>
	</statement>
	
	
	<!--  DATA를 조회한다. -->
	<statement name="selectSaleList" type="select">
		<![CDATA[

			SELECT 
				   MAST.TM_SALES_SEQ,
				   MAST.UPJANG_CD,
				   MAST.OCCUR_DATE,
			       SHOP.OUTLET_NM AS UPJANG_NM,  --업장명
			       MAST.DAY,
			       MAST.CUST_NAME,
	               MAST.GUBUN01,
	               MAST.GUBUN02,
	               MAST.CHANNEL,
			       MAST.BANQUET_CD,
			       (SELECT CODE2.CODE_NAME FROM FCUS.SCC_COMMON_CODE CODE2 
             		 WHERE CODE2.GROUP_CODE = 'BMS_0035' AND MAST.BANQUET_CD = CODE2.CODE) AS BANQUET_NM,
			       MAST.DC,
			       MAST.STIME,
			       MAST.ETIME,
			       MAST.BEF_PRICE,
			       MAST.BEF_PSN,
			       MAST.BEF_FAMT,
			       MAST.BEF_SAMT,
			       MAST.BEF_BAMT,
			       MAST.BEF_EAMT,
			       MAST.CON_PRICE,
			       MAST.CON_PSN,
			       MAST.CON_FAMT,
			       MAST.CON_SAMT,
			       MAST.CON_BAMT,
			       MAST.CON_EAMT,
			       MAST.ADD_PRICE,
			       MAST.ADD_PSN,
			       MAST.ADD_FAMT,
			       MAST.ADD_SAMT,
			       MAST.ADD_BAMT,
			       MAST.ADD_EAMT,
			       MAST.BEF_SUM,
			       MAST.CON_SUM,
			       MAST.ADD_SUM,
			       DECODE(MAST.DEL_YN, 'Y', 1, 0) AS DEL_YN,
			       MAST.CDATE,
			       MAST.CUSER,
			       MAST.UDATE,
			       MAST.UUSER
			       
			FROM   BMS_TM_SALES   MAST
		         , SLE_OUTLET_MST SHOP
		        
			WHERE  1=1
		      AND MAST.UPJANG_CD = SHOP.OUTLET_CD
		      AND MAST.DEL_YN = 'N'
		      AND MAST.SALE_TYPE = '1'
			  <#if upjangCd?has_content> 
				AND MAST.UPJANG_CD = :upjangCd
			  </#if>
			  AND MAST.OCCUR_DATE between :mon || '01' AND :mon || '31' 
			  ORDER BY UPJANG_CD, OCCUR_DATE 


		]]>
	</statement>
	
	
	<!--  DATA를 조회한다. -->
	<statement name="selectSaleSumList" type="select">
		<![CDATA[

		SELECT *
		
		
			FROM (
		
			SELECT 'AA' AS SEQ  ,GUBUN1, GUBUN2,
			MON01, MON02, MON03, MON04, MON05, MON06, MON01+MON02+MON03+MON04+MON05+MON06 AS SUBSUM1,
			MON07, MON08, MON09, MON10, MON11, MON12, MON07+MON08+MON09+MON10+MON11+MON12 AS SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS TOTSUM
			FROM (
						SELECT
						'현재 확정실적' AS GUBUN1,
						'건수' AS GUBUN2,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',1,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',1,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',1,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',1,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',1,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',1,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',1,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',1,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',1,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',1,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',1,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',1,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.SALE_TYPE = '1'
			      		AND A.DEL_YN = 'N'
			)
		
			UNION ALL
		
			SELECT 'AB' AS SEQ, GUBUN1, GUBUN2,
			MON01, MON02, MON03, MON04, MON05, MON06, MON01+MON02+MON03+MON04+MON05+MON06 AS SUBSUM1,
			MON07, MON08, MON09, MON10, MON11, MON12, MON07+MON08+MON09+MON10+MON11+MON12 AS SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS TOTSUM
			FROM (
						SELECT
						'현재 확정실적' AS GUBUN1,
						'매출' AS GUBUN2,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12', DECODE(SIGN(A.OCCUR_DATE - TO_CHAR(SYSDATE,'YYYYMMDD')), -1, A.CON_FAMT+A.CON_BAMT+A.CON_EAMT, A.BEF_FAMT+A.BEF_BAMT+A.BEF_EAMT),0)),0) AS MON12
						
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.SALE_TYPE = '1'
			      		AND A.DEL_YN = 'N'
			)
		
			UNION ALL
		
			SELECT 'AC' AS SEQ,GUBUN1, GUBUN2,
			MON01, MON02, MON03, MON04, MON05, MON06, MON01+MON02+MON03+MON04+MON05+MON06 AS SUBSUM1,
			MON07, MON08, MON09, MON10, MON11, MON12, MON07+MON08+MON09+MON10+MON11+MON12 AS SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS TOTSUM
			FROM (
						SELECT
						'예상 추가실적' AS GUBUN1,
						'건수' AS GUBUN2,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',1,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',1,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',1,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',1,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',1,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',1,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',1,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',1,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',1,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',1,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',1,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',1,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.SALE_TYPE = '2'
			      		AND A.DEL_YN = 'N'
			)
		
			UNION ALL
		
			SELECT 'AD' AS SEQ, GUBUN1, GUBUN2,
			MON01, MON02, MON03, MON04, MON05, MON06, MON01+MON02+MON03+MON04+MON05+MON06 AS SUBSUM1,
			MON07, MON08, MON09, MON10, MON11, MON12, MON07+MON08+MON09+MON10+MON11+MON12 AS SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS TOTSUM
			FROM (
						SELECT
						'예상 추가실적' AS GUBUN1,
						'매출' AS GUBUN2,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12', A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.SALE_TYPE = '2'
			      		AND A.DEL_YN = 'N'
			      
			)
		
		
			UNION ALL
		
			SELECT 'AE' AS SEQ, GUBUN1, GUBUN2,
			MON01, MON02, MON03, MON04, MON05, MON06, MON01+MON02+MON03+MON04+MON05+MON06 AS SUBSUM1,
			MON07, MON08, MON09, MON10, MON11, MON12, MON07+MON08+MON09+MON10+MON11+MON12 AS SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS TOTSUM
			FROM (
						SELECT
						:goalYear || '년 예상실적' AS GUBUN1,
						'건수' AS GUBUN2,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',1,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',1,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',1,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',1,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',1,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',1,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',1,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',1,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',1,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',1,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',1,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',1,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.DEL_YN = 'N'
			)
		
			UNION ALL
		
			SELECT 'AF' AS SEQ, GUBUN1, GUBUN2,
			MON01, MON02, MON03, MON04, MON05, MON06, MON01+MON02+MON03+MON04+MON05+MON06 AS SUBSUM1,
			MON07, MON08, MON09, MON10, MON11, MON12, MON07+MON08+MON09+MON10+MON11+MON12 AS SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS TOTSUM
			FROM (
						SELECT
						:goalYear || '년 예상실적' AS GUBUN1,
						'매출' AS GUBUN2,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.DEL_YN = 'N'
			)
		
			UNION ALL
		
			SELECT
						'AG' AS SEQ, :goalYear || '년 목표' AS GUBUN1,
						'건수' AS GUBUN2,
			      SUM(NVL(CNT01,0)) AS MON01,SUM(NVL(CNT02,0)) AS MON02,SUM(NVL(CNT03,0)) AS MON03,SUM(NVL(CNT04,0)) AS MON04,SUM(NVL(CNT05,0)) AS MON05,SUM(NVL(CNT06,0)) AS MON06,
			      SUM(NVL(CNT01+CNT02+CNT03+CNT04+CNT05+CNT06,0)) AS SUBSUM1,
			      SUM(NVL(CNT07,0)) AS MON07,SUM(NVL(CNT08,0)) AS MON08,SUM(NVL(CNT09,0)) AS MON09,SUM(NVL(CNT10,0)) AS MON10,SUM(NVL(CNT11,0)) AS MON11,SUM(NVL(CNT12,0)) AS MON12,
			      SUM(NVL(CNT07+CNT08+CNT09+CNT10+CNT11+CNT12,0)) AS SUBSUM2,
			      SUM(NVL(CNT01+CNT02+CNT03+CNT04+CNT05+CNT06+CNT07+CNT08+CNT09+CNT10+CNT11+CNT12,0)) AS TOTSUM
			
			FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
      		  BMS_TM_GOAL A ON B.OUTLET_CD = A.UPJANG_CD AND A.GOAL_YEAR = :goalYear AND A.GUBUN01 = :gubun01		
      		  
			WHERE 1=1						
			<#if upjangCd?has_content>
				AND B.OUTLET_CD = :upjangCd
			</#if>
			AND A.USE_YN = 'Y'
		
		UNION ALL
		
		
		-- 차이
		SELECT
		   'AH' AS SEQ,
			 :goalYear || '년 목표' AS GUBUN1,
			 '차이' AS GUBUN2,
			 SUM(MON01 - CNT01) ASMON01,
		   SUM(MON02 - CNT02) ASMON02,
		   SUM(MON03 - CNT03) ASMON03,
		   SUM(MON04 - CNT04) ASMON04,
		   SUM(MON05 - CNT05) ASMON05,
		   SUM(MON06 - CNT06) ASMON06,
		   SUM((SUBSUM1-CNT01-CNT02-CNT03-CNT04-CNT05-CNT06)) AS SUBSUM1,
		   SUM(MON07 - CNT07) ASMON07,
		   SUM(MON08 - CNT08) ASMON08,
		   SUM(MON09 - CNT09) ASMON09,
		   SUM(MON10 - CNT10) ASMON10,
		   SUM(MON11 - CNT11) ASMON11,
		   SUM(MON12 - CNT12) ASMON12,
		   SUM((SUBSUM2-CNT07-CNT08-CNT09-CNT10-CNT11-CNT12)) AS SUBSUM2,
		   SUM((TOTSUM-CNT01-CNT02-CNT03-CNT04-CNT05-CNT06-CNT07-CNT08-CNT09-CNT10-CNT11-CNT12)) AS TOTSUM
		
			FROM (
		
			SELECT
			
		   
				SUM(NVL(MON01,0)) AS MON01,SUM(NVL(MON02,0)) AS MON02,SUM(NVL(MON03,0)) AS MON03,SUM(NVL(MON04,0)) AS MON04,SUM(NVL(MON05,0)) AS MON05,SUM(NVL(MON06,0)) AS MON06,
      		SUM(NVL(MON01+MON02+MON03+MON04+MON05+MON06,0)) AS SUBSUM1,
			SUM(NVL(MON07,0)) AS MON07,SUM(NVL(MON08,0)) AS MON08,SUM(NVL(MON09,0)) AS MON09,SUM(NVL(MON10,0)) AS MON10,SUM(NVL(MON11,0)) AS MON11,SUM(NVL(MON12,0)) AS MON12,
      		SUM(NVL(MON07+MON08+MON09+MON10+MON11+MON12,0)) AS SUBSUM2,
			SUM(NVL(MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12,0)) AS TOTSUM,
      SUM(NVL(CNT01,0)) AS CNT01,SUM(NVL(CNT02,0)) AS CNT02,SUM(NVL(CNT03,0)) AS CNT03,SUM(NVL(CNT04,0)) AS CNT04,SUM(NVL(CNT05,0)) AS CNT05,SUM(NVL(CNT06,0)) AS CNT06,
			SUM(NVL(CNT07,0)) AS CNT07,SUM(NVL(CNT08,0)) AS CNT08,SUM(NVL(CNT09,0)) AS CNT09,SUM(NVL(CNT10,0)) AS CNT10,SUM(NVL(CNT11,0)) AS CNT11,SUM(NVL(CNT12,0)) AS CNT12
			
			FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
      		   (
						SELECT
		        		A.UPJANG_CD,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',1,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',1,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',1,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',1,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',1,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',1,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',1,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',1,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',1,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',1,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',1,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',1,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.DEL_YN = 'N'
		        GROUP BY A.UPJANG_CD
				) A ON B.OUTLET_CD = A.UPJANG_CD
			LEFT OUTER JOIN 
			  (SELECT
							B.OUTLET_CD ,
				      SUM(NVL(CNT01,0)) AS CNT01,SUM(NVL(CNT02,0)) AS CNT02,SUM(NVL(CNT03,0)) AS CNT03,SUM(NVL(CNT04,0)) AS CNT04,SUM(NVL(CNT05,0)) AS CNT05,SUM(NVL(CNT06,0)) AS CNT06,			      
				      SUM(NVL(CNT07,0)) AS CNT07,SUM(NVL(CNT08,0)) AS CNT08,SUM(NVL(CNT09,0)) AS CNT09,SUM(NVL(CNT10,0)) AS CNT10,SUM(NVL(CNT11,0)) AS CNT11,SUM(NVL(CNT12,0)) AS CNT12			      
				FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
	      		  BMS_TM_GOAL A ON B.OUTLET_CD = A.UPJANG_CD AND A.GOAL_YEAR = :goalYear AND A.GUBUN01 = :gubun01						
				WHERE 1=1 						
				<#if upjangCd?has_content>
					AND B.OUTLET_CD = :upjangCd
				</#if>		
			     AND A.USE_YN = 'Y'
	     		 GROUP BY OUTLET_CD
			   ) C ON B.OUTLET_CD = C.OUTLET_CD
		WHERE 1=1			
		<#if upjangCd?has_content>
			AND B.OUTLET_CD = :upjangCd
		</#if>		
		
    )
		
		  UNION ALL
		
		-- 대비(%)
		SELECT
		   'AI' AS SEQ,
			 :goalYear || '년 목표' AS GUBUN1,
			 '대비(%)' AS GUBUN2,
			 DECODE(CNT01,0,0,ROUND(MON01*100/CNT01,0)) AS MON01,
			 DECODE(CNT02,0,0,ROUND(MON02*100/CNT02,0)) AS MON02,
			 DECODE(CNT03,0,0,ROUND(MON03*100/CNT03,0)) AS MON03,
			 DECODE(CNT04,0,0,ROUND(MON04*100/CNT04,0)) AS MON04,
			 DECODE(CNT05,0,0,ROUND(MON05*100/CNT05,0)) AS MON05,
			 DECODE(CNT06,0,0,ROUND(MON06*100/CNT06,0)) AS MON06,
			 DECODE((CNT01+CNT02+CNT03+CNT04+CNT05+CNT06),0,0,ROUND((SUBSUM1*100/(CNT01+CNT02+CNT03+CNT04+CNT05+CNT06)),0)) AS SUBSUM1,
			 DECODE(CNT07,0,0,ROUND(MON07*100/CNT07,0)) AS MON07,
			 DECODE(CNT08,0,0,ROUND(MON08*100/CNT08,0)) AS MON08,
			 DECODE(CNT09,0,0,ROUND(MON09*100/CNT09,0)) AS MON09,
			 DECODE(CNT10,0,0,ROUND(MON10*100/CNT10,0)) AS MON10,
			 DECODE(CNT11,0,0,ROUND(MON11*100/CNT11,0)) AS MON11,
			 DECODE(CNT12,0,0,ROUND(MON12*100/CNT12,0)) AS MON12,
			 DECODE((CNT07+CNT08+CNT09+CNT10+CNT11+CNT12),0,0,ROUND((SUBSUM2*100/(CNT07+CNT08+CNT09+CNT10+CNT11+CNT12)),0)) AS SUBSUM2,
			 DECODE((CNT01+CNT02+CNT03+CNT04+CNT05+CNT06+CNT07+CNT08+CNT09+CNT10+CNT11+CNT12),0,0,ROUND((TOTSUM*100/(CNT01+CNT02+CNT03+CNT04+CNT05+CNT06+CNT07+CNT08+CNT09+CNT10+CNT11+CNT12)),0)) AS TOTSUM
			
		
			FROM (
		
			SELECT
			
		   
				SUM(NVL(MON01,0)) AS MON01,SUM(NVL(MON02,0)) AS MON02,SUM(NVL(MON03,0)) AS MON03,SUM(NVL(MON04,0)) AS MON04,SUM(NVL(MON05,0)) AS MON05,SUM(NVL(MON06,0)) AS MON06,
      		SUM(NVL(MON01+MON02+MON03+MON04+MON05+MON06,0)) AS SUBSUM1,
			SUM(NVL(MON07,0)) AS MON07,SUM(NVL(MON08,0)) AS MON08,SUM(NVL(MON09,0)) AS MON09,SUM(NVL(MON10,0)) AS MON10,SUM(NVL(MON11,0)) AS MON11,SUM(NVL(MON12,0)) AS MON12,
      		SUM(NVL(MON07+MON08+MON09+MON10+MON11+MON12,0)) AS SUBSUM2,
			SUM(NVL(MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12,0)) AS TOTSUM,
      SUM(NVL(CNT01,0)) AS CNT01,SUM(NVL(CNT02,0)) AS CNT02,SUM(NVL(CNT03,0)) AS CNT03,SUM(NVL(CNT04,0)) AS CNT04,SUM(NVL(CNT05,0)) AS CNT05,SUM(NVL(CNT06,0)) AS CNT06,
			SUM(NVL(CNT07,0)) AS CNT07,SUM(NVL(CNT08,0)) AS CNT08,SUM(NVL(CNT09,0)) AS CNT09,SUM(NVL(CNT10,0)) AS CNT10,SUM(NVL(CNT11,0)) AS CNT11,SUM(NVL(CNT12,0)) AS CNT12
			
			FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
      		   (
						SELECT
		        		A.UPJANG_CD,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',1,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',1,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',1,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',1,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',1,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',1,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',1,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',1,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',1,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',1,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',1,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',1,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.DEL_YN = 'N'
		        GROUP BY A.UPJANG_CD
				) A ON B.OUTLET_CD = A.UPJANG_CD
			LEFT OUTER JOIN 
			  (SELECT
							B.OUTLET_CD ,
				      SUM(NVL(CNT01,0)) AS CNT01,SUM(NVL(CNT02,0)) AS CNT02,SUM(NVL(CNT03,0)) AS CNT03,SUM(NVL(CNT04,0)) AS CNT04,SUM(NVL(CNT05,0)) AS CNT05,SUM(NVL(CNT06,0)) AS CNT06,			      
				      SUM(NVL(CNT07,0)) AS CNT07,SUM(NVL(CNT08,0)) AS CNT08,SUM(NVL(CNT09,0)) AS CNT09,SUM(NVL(CNT10,0)) AS CNT10,SUM(NVL(CNT11,0)) AS CNT11,SUM(NVL(CNT12,0)) AS CNT12			      
				FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
	      		  BMS_TM_GOAL A ON B.OUTLET_CD = A.UPJANG_CD AND A.GOAL_YEAR = :goalYear AND A.GUBUN01 = :gubun01						
				WHERE 1=1 						
				<#if upjangCd?has_content>
					AND B.OUTLET_CD = :upjangCd
				</#if>		
			     AND A.USE_YN = 'Y'
	     		 GROUP BY OUTLET_CD
			   ) C ON B.OUTLET_CD = C.OUTLET_CD
		WHERE 1=1			
		<#if upjangCd?has_content>
			AND B.OUTLET_CD = :upjangCd
		</#if>
		
    )
		
			UNION ALL
			
			SELECT
						'AJ' AS SEQ, :goalYear || '년 목표' AS GUBUN1,
						'매출' AS GUBUN2,
			       SUM(NVL(AMT01,0)) AS MON01,SUM(NVL(AMT02,0)) AS MON02,SUM(NVL(AMT03,0)) AS MON03,SUM(NVL(AMT04,0)) AS MON04,SUM(NVL(AMT05,0)) AS MON05,SUM(NVL(AMT06,0)) AS MON06,
			      SUM(NVL(AMT01+AMT02+AMT03+AMT04+AMT05+AMT06,0)) AS SUBSUM1,
			      SUM(NVL(AMT07,0)) AS MON07,SUM(NVL(AMT08,0)) AS MON08,SUM(NVL(AMT09,0)) AS MON09,SUM(NVL(AMT10,0)) AS MON10,SUM(NVL(AMT11,0)) AS MON11,SUM(NVL(AMT12,0)) AS MON12,
			      SUM(NVL(AMT07+AMT08+AMT09+AMT10+AMT11+AMT12,0)) AS SUBSUM2,
			      SUM(NVL(AMT01+AMT02+AMT03+AMT04+AMT05+AMT06+AMT07+AMT08+AMT09+AMT10+AMT11+AMT12,0)) AS TOTSUM
		
			FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
      		  BMS_TM_GOAL A ON B.OUTLET_CD = A.UPJANG_CD AND A.GOAL_YEAR = :goalYear AND A.GUBUN01 = :gubun01		
      		  
			WHERE 1=1						
			<#if upjangCd?has_content>
				AND B.OUTLET_CD = :upjangCd
			</#if>		
			AND A.USE_YN = 'Y'
		
		UNION ALL
		
		
		-- 차이
		SELECT
		   'AK' AS SEQ,
			 :goalYear || '년 목표' AS GUBUN1,
			 '차이' AS GUBUN2,
			 MON01 - AMT01 AS MON01,
		   MON02 - AMT02 AS MON02,
		   MON03 - AMT03 AS MON03,
		   MON04 - AMT04 AS MON04,
		   MON05 - AMT05 AS MON05,
		   MON06 - AMT06 AS MON06,
		   (SUBSUM1-AMT01-AMT02-AMT03-AMT04-AMT05-AMT06) AS SUBSUM1,
		   MON07 - AMT07 AS MON07,
		   MON08 - AMT08 AS MON08,
		   MON09 - AMT09 AS MON09,
		   MON10 - AMT10 AS MON10,
		   MON11 - AMT11 AS MON11,
		   MON12 - AMT12 AS MON12,
		   (SUBSUM2-AMT07-AMT08-AMT09-AMT10-AMT11-AMT12) AS SUBSUM2,
		   (TOTSUM-AMT01-AMT02-AMT03-AMT04-AMT05-AMT06-AMT07-AMT08-AMT09-AMT10-AMT11-AMT12) AS TOTSUM
		
			
	FROM (
			
				SELECT
				
			  
			SUM(NVL(MON01,0)) AS MON01,SUM(NVL(MON02,0)) AS MON02,SUM(NVL(MON03,0)) AS MON03,SUM(NVL(MON04,0)) AS MON04,SUM(NVL(MON05,0)) AS MON05,SUM(NVL(MON06,0)) AS MON06,
      		SUM(NVL(MON01+MON02+MON03+MON04+MON05+MON06,0)) AS SUBSUM1,
			SUM(NVL(MON07,0)) AS MON07,SUM(NVL(MON08,0)) AS MON08,SUM(NVL(MON09,0)) AS MON09,SUM(NVL(MON10,0)) AS MON10,SUM(NVL(MON11,0)) AS MON11,SUM(NVL(MON12,0)) AS MON12,
      		SUM(NVL(MON07+MON08+MON09+MON10+MON11+MON12,0)) AS SUBSUM2,
			SUM(NVL(MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12,0)) AS TOTSUM,
      SUM(NVL(AMT01,0)) AS AMT01,SUM(NVL(AMT02,0)) AS AMT02,SUM(NVL(AMT03,0)) AS AMT03,SUM(NVL(AMT04,0)) AS AMT04,SUM(NVL(AMT05,0)) AS AMT05,SUM(NVL(AMT06,0)) AS AMT06,
			SUM(NVL(AMT07,0)) AS AMT07,SUM(NVL(AMT08,0)) AS AMT08,SUM(NVL(AMT09,0)) AS AMT09,SUM(NVL(AMT10,0)) AS AMT10,SUM(NVL(AMT11,0)) AS AMT11,SUM(NVL(AMT12,0)) AS AMT12
			
				
				FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
	      		   (
							SELECT
			        		A.UPJANG_CD,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON01,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON02,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON03,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON04,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON05,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON06,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON07,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON08,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON09,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON10,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON11,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON12
							FROM BMS_TM_SALES A
							WHERE 1=1
							AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
							<#if upjangCd?has_content>
								AND A.UPJANG_CD = :upjangCd
							</#if>
							AND A.GUBUN01 = :gubun01
			      			AND A.DEL_YN = 'N'
			        GROUP BY A.UPJANG_CD
					) A ON B.OUTLET_CD = A.UPJANG_CD
	      LEFT OUTER JOIN 
		  (SELECT
						B.OUTLET_CD ,
			      SUM(NVL(AMT01,0)) AS AMT01,SUM(NVL(AMT02,0)) AS AMT02,SUM(NVL(AMT03,0)) AS AMT03,SUM(NVL(AMT04,0)) AS AMT04,SUM(NVL(AMT05,0)) AS AMT05,SUM(NVL(AMT06,0)) AS AMT06,			      
			      SUM(NVL(AMT07,0)) AS AMT07,SUM(NVL(AMT08,0)) AS AMT08,SUM(NVL(AMT09,0)) AS AMT09,SUM(NVL(AMT10,0)) AS AMT10,SUM(NVL(AMT11,0)) AS AMT11,SUM(NVL(AMT12,0)) AS AMT12			      
			FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
      		  BMS_TM_GOAL A ON B.OUTLET_CD = A.UPJANG_CD AND A.GOAL_YEAR = :goalYear  AND A.GUBUN01 = :gubun01					
			WHERE 1=1 							
			<#if upjangCd?has_content>
				AND B.OUTLET_CD = :upjangCd
			</#if>
			    AND A.USE_YN = 'Y'
     		 GROUP BY OUTLET_CD
		   ) C ON B.OUTLET_CD = C.OUTLET_CD
	)
		
		  UNION ALL
		
		-- 대비(%)
		SELECT
		   'AL' AS SEQ,
			 :goalYear || '년 목표' AS GUBUN1,
			 '대비(%)' AS GUBUN2,
			 DECODE(AMT01,0,0,ROUND(MON01*100/AMT01,0)) AS MON01,
			 DECODE(AMT02,0,0,ROUND(MON02*100/AMT02,0)) AS MON02,
			 DECODE(AMT03,0,0,ROUND(MON03*100/AMT03,0)) AS MON03,
			 DECODE(AMT04,0,0,ROUND(MON04*100/AMT04,0)) AS MON04,
			 DECODE(AMT05,0,0,ROUND(MON05*100/AMT05,0)) AS MON05,
			 DECODE(AMT06,0,0,ROUND(MON06*100/AMT06,0)) AS MON06,
			 DECODE((AMT01+AMT02+AMT03+AMT04+AMT05+AMT06),0,0,ROUND((SUBSUM1*100/(AMT01+AMT02+AMT03+AMT04+AMT05+AMT06)),0)) AS SUBSUM1,
			 DECODE(AMT07,0,0,ROUND(MON07*100/AMT07,0)) AS MON07,
			 DECODE(AMT08,0,0,ROUND(MON08*100/AMT08,0)) AS MON08,
			 DECODE(AMT09,0,0,ROUND(MON09*100/AMT09,0)) AS MON09,
			 DECODE(AMT10,0,0,ROUND(MON10*100/AMT10,0)) AS MON10,
			 DECODE(AMT11,0,0,ROUND(MON11*100/AMT11,0)) AS MON11,
			 DECODE(AMT12,0,0,ROUND(MON12*100/AMT12,0)) AS MON12,
			 DECODE((AMT07+AMT08+AMT09+AMT10+AMT11+AMT12),0,0,ROUND((SUBSUM2*100/(AMT07+AMT08+AMT09+AMT10+AMT11+AMT12)),0)) AS SUBSUM2,
			 DECODE((AMT01+AMT02+AMT03+AMT04+AMT05+AMT06+AMT07+AMT08+AMT09+AMT10+AMT11+AMT12),0,0,ROUND((TOTSUM*100/(AMT01+AMT02+AMT03+AMT04+AMT05+AMT06+AMT07+AMT08+AMT09+AMT10+AMT11+AMT12)),0)) AS TOTSUM
		
			FROM (
			
				SELECT
				
			SUM(NVL(MON01,0)) AS MON01,SUM(NVL(MON02,0)) AS MON02,SUM(NVL(MON03,0)) AS MON03,SUM(NVL(MON04,0)) AS MON04,SUM(NVL(MON05,0)) AS MON05,SUM(NVL(MON06,0)) AS MON06,
      		SUM(NVL(MON01+MON02+MON03+MON04+MON05+MON06,0)) AS SUBSUM1,
			SUM(NVL(MON07,0)) AS MON07,SUM(NVL(MON08,0)) AS MON08,SUM(NVL(MON09,0)) AS MON09,SUM(NVL(MON10,0)) AS MON10,SUM(NVL(MON11,0)) AS MON11,SUM(NVL(MON12,0)) AS MON12,
      		SUM(NVL(MON07+MON08+MON09+MON10+MON11+MON12,0)) AS SUBSUM2,
			SUM(NVL(MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12,0)) AS TOTSUM,
      SUM(NVL(AMT01,0)) AS AMT01,SUM(NVL(AMT02,0)) AS AMT02,SUM(NVL(AMT03,0)) AS AMT03,SUM(NVL(AMT04,0)) AS AMT04,SUM(NVL(AMT05,0)) AS AMT05,SUM(NVL(AMT06,0)) AS AMT06,
			SUM(NVL(AMT07,0)) AS AMT07,SUM(NVL(AMT08,0)) AS AMT08,SUM(NVL(AMT09,0)) AS AMT09,SUM(NVL(AMT10,0)) AS AMT10,SUM(NVL(AMT11,0)) AS AMT11,SUM(NVL(AMT12,0)) AS AMT12
				
				FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
	      		   (
							SELECT
			        		A.UPJANG_CD,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON01,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON02,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON03,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON04,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON05,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON06,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON07,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON08,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON09,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON10,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON11,
							NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON12
							FROM BMS_TM_SALES A
							WHERE 1=1
							AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
							<#if upjangCd?has_content>
								AND A.UPJANG_CD = :upjangCd
							</#if>
							AND A.GUBUN01 = :gubun01
			      			AND A.DEL_YN = 'N'
			        GROUP BY A.UPJANG_CD
					) A ON B.OUTLET_CD = A.UPJANG_CD
	      LEFT OUTER JOIN 	      		
			  (SELECT
							B.OUTLET_CD ,
				      SUM(NVL(AMT01,0)) AS AMT01,SUM(NVL(AMT02,0)) AS AMT02,SUM(NVL(AMT03,0)) AS AMT03,SUM(NVL(AMT04,0)) AS AMT04,SUM(NVL(AMT05,0)) AS AMT05,SUM(NVL(AMT06,0)) AS AMT06,			      
				      SUM(NVL(AMT07,0)) AS AMT07,SUM(NVL(AMT08,0)) AS AMT08,SUM(NVL(AMT09,0)) AS AMT09,SUM(NVL(AMT10,0)) AS AMT10,SUM(NVL(AMT11,0)) AS AMT11,SUM(NVL(AMT12,0)) AS AMT12			      
				FROM  SLE_OUTLET_MST B LEFT OUTER JOIN 
      		  BMS_TM_GOAL A ON B.OUTLET_CD = A.UPJANG_CD AND A.GOAL_YEAR = :goalYear  AND A.GUBUN01 = :gubun01					
			WHERE 1=1 							
			<#if upjangCd?has_content>
				AND B.OUTLET_CD = :upjangCd
			</#if>
			    AND A.USE_YN = 'Y'
      	GROUP BY OUTLET_CD
		    ) C ON B.OUTLET_CD = C.OUTLET_CD
      )
		
			UNION ALL
			
			SELECT 'AM' AS SEQ  ,GUBUN1, GUBUN2,
			MON01, MON02, MON03, MON04, MON05, MON06, MON01+MON02+MON03+MON04+MON05+MON06 AS SUBSUM1,
			MON07, MON08, MON09, MON10, MON11, MON12, MON07+MON08+MON09+MON10+MON11+MON12 AS SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS TOTSUM
			FROM (
						SELECT
						:goalYear-1 || '년 실적' AS GUBUN1,
						'건수' AS GUBUN2,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',1,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',1,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',1,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',1,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',1,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',1,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',1,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',1,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',1,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',1,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',1,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',1,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear-1  || '0101' AND :goalYear-1  || '1231'					
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.DEL_YN = 'N'
			      AND A.SALE_TYPE = '1'
			)
		
		UNION ALL
		
		-- 차이
		SELECT
		   'AN' AS SEQ,
			 :goalYear-1 || '년 실적' AS GUBUN1,
			 '차이' AS GUBUN2,
			 SUM(MON01) AS MON01,
		   SUM(MON02) AS MON02,
		   SUM(MON03) AS MON03,
		   SUM(MON04) AS MON04,
		   SUM(MON05) AS MON05,
		   SUM(MON06) AS MON06,
		   SUM(MON01+MON02+MON03+MON04+MON05+MON06) AS SUBSUM1,
		   SUM(MON07) AS MON07,
		   SUM(MON08) AS MON08,
		   SUM(MON09) AS MON09,
		   SUM(MON10) AS MON10,
		   SUM(MON11) AS MON11,
		   SUM(MON12) AS MON12,
		   SUM(MON07+MON08+MON09+MON10+MON11+MON12) AS SUBSUM2,
		   SUM(MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12) AS TOTSUM
       
       FROM (
						SELECT
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,1,-1),0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear-1  || '0101' AND :goalYear || '1231'							
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.SALE_TYPE = '1'
			      		AND A.DEL_YN = 'N'
			)
		
		  UNION ALL
		
		-- 대비(%)
		SELECT
		   'AO' AS SEQ,
			 :goalYear-1 || '년 실적' AS GUBUN1,
			 '대비(%)' AS GUBUN2,
		
			 SUM(NVL(DECODE(LAST01,0,0,ROUND(THIS01*100/LAST01,0)),0)) AS MON01,
		   SUM(NVL(DECODE(LAST02,0,0,ROUND(THIS02*100/LAST02,0)),0)) AS MON02,
		   SUM(NVL(DECODE(LAST03,0,0,ROUND(THIS03*100/LAST03,0)),0)) AS MON03,
		   SUM(NVL(DECODE(LAST04,0,0,ROUND(THIS04*100/LAST04,0)),0)) AS MON04,
		   SUM(NVL(DECODE(LAST05,0,0,ROUND(THIS05*100/LAST05,0)),0)) AS MON05,
		   SUM(NVL(DECODE(LAST06,0,0,ROUND(THIS06*100/LAST06,0)),0)) AS MON06,
		   SUM(NVL(DECODE(L_SUBSUM1,0,0,ROUND(T_SUBSUM1*100/L_SUBSUM1,0)),0)) AS SUBSUM1,
		   SUM(NVL(DECODE(LAST07,0,0,ROUND(THIS07*100/LAST07,0)),0)) AS MON07,
		   SUM(NVL(DECODE(LAST08,0,0,ROUND(THIS08*100/LAST08,0)),0)) AS MON08,
		   SUM(NVL(DECODE(LAST09,0,0,ROUND(THIS09*100/LAST09,0)),0)) AS MON09,
		   SUM(NVL(DECODE(LAST10,0,0,ROUND(THIS10*100/LAST10,0)),0)) AS MON10,
		   SUM(NVL(DECODE(LAST11,0,0,ROUND(THIS11*100/LAST11,0)),0)) AS MON11,
		   SUM(NVL(DECODE(LAST12,0,0,ROUND(THIS12*100/LAST12,0)),0)) AS MON12,
		   SUM(NVL(DECODE(L_SUBSUM2,0,0,ROUND(T_SUBSUM2*100/L_SUBSUM2,0)),0)) AS SUBSUM2,
		   SUM(NVL(DECODE(L_TOTSUM,0,0,ROUND(T_TOTSUM*100/L_TOTSUM,0)),0)) AS TOTSUM
		
				FROM  SLE_OUTLET_MST A LEFT OUTER JOIN 
      		(
		
			SELECT
		        UPJANG_CD, GUBUN01,
			MON01 AS THIS01, MON02 AS THIS02, MON03 AS THIS03, MON04 AS THIS04, MON05 AS THIS05, MON06 AS THIS06, MON01+MON02+MON03+MON04+MON05+MON06 AS T_SUBSUM1,
			MON07 AS THIS07, MON08 AS THIS08, MON09 AS THIS09, MON10 AS THIS10, MON11 AS THIS11, MON12 AS THIS12, MON07+MON08+MON09+MON10+MON11+MON12 AS T_SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS T_TOTSUM
			FROM (
						SELECT
		        A.UPJANG_CD, A.GUBUN01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',1,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',1,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',1,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',1,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',1,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',1,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',1,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',1,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',1,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',1,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',1,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',1,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.DEL_YN = 'N'
		        GROUP BY A.UPJANG_CD, A.GUBUN01
			   )
		   ) B ON A.OUTLET_CD = B.UPJANG_CD 
       	   LEFT OUTER JOIN
		   (
			SELECT
		        UPJANG_CD, GUBUN01,
			MON01 AS LAST01, MON02 AS LAST02, MON03 AS LAST03, MON04 AS LAST04, MON05 AS LAST05, MON06 AS LAST06, MON01+MON02+MON03+MON04+MON05+MON06 AS L_SUBSUM1,
			MON07 AS LAST07, MON08 AS LAST08, MON09 AS LAST09, MON10 AS LAST10, MON11 AS LAST11, MON12 AS LAST12, MON07+MON08+MON09+MON10+MON11+MON12 AS L_SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS L_TOTSUM
			FROM (
						SELECT
		        A.UPJANG_CD, A.GUBUN01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',1,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',1,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',1,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',1,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',1,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',1,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',1,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',1,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',1,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',1,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',1,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',1,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear-1 || '0101' AND :goalYear-1 || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.SALE_TYPE = '1'
			      		AND A.DEL_YN = 'N'
		        GROUP BY A.UPJANG_CD, A.GUBUN01
			  	)
		   ) C ON A.OUTLET_CD = C.UPJANG_CD 
		<#if upjangCd?has_content>
			WHERE A.OUTLET_CD = :upjangCd
		</#if>
		
			UNION ALL
			
			SELECT 'AP' AS SEQ  ,GUBUN1, GUBUN2,
			MON01, MON02, MON03, MON04, MON05, MON06, MON01+MON02+MON03+MON04+MON05+MON06 AS SUBSUM1,
			MON07, MON08, MON09, MON10, MON11, MON12, MON07+MON08+MON09+MON10+MON11+MON12 AS SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS TOTSUM
			FROM (
						SELECT
						:goalYear-1 || '년 실적' AS GUBUN1,
						'매출' AS GUBUN2,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear-1  || '0101' AND :goalYear-1  || '1231'					
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.DEL_YN = 'N'
			      AND A.SALE_TYPE = '1'
			)
			
		
		
		UNION ALL
		
		
		-- 차이
		SELECT
		   'AQ' AS SEQ,
			 :goalYear-1 || '년 실적' AS GUBUN1,
			 '차이' AS GUBUN2,
			 SUM(MON01) AS MON01,
		   SUM(MON02) AS MON02,
		   SUM(MON03) AS MON03,
		   SUM(MON04) AS MON04,
		   SUM(MON05) AS MON05,
		   SUM(MON06) AS MON06,
		   SUM(MON01+MON02+MON03+MON04+MON05+MON06) AS SUBSUM1,
		   SUM(MON07) AS MON07,
		   SUM(MON08) AS MON08,
		   SUM(MON09) AS MON09,
		   SUM(MON10) AS MON10,
		   SUM(MON11) AS MON11,
		   SUM(MON12) AS MON12,
		   SUM(MON07+MON08+MON09+MON10+MON11+MON12) AS SUBSUM2,
		   SUM(MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12) AS TOTSUM
		
			FROM (
						SELECT
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',DECODE(SUBSTR(A.OCCUR_DATE,0,4),:goalYear,(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+ADD_BAMT+A.ADD_EAMT),-1*(A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT)),0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear-1  || '0101' AND :goalYear || '1231'							
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.SALE_TYPE = '1'
			      		AND A.DEL_YN = 'N'
			)
		
		
		  UNION ALL
		
		-- 대비(%)
		SELECT
		   'AR' AS SEQ,
			 :goalYear-1 || '년 실적' AS GUBUN1,
			 '대비(%)' AS GUBUN2,
		
			 SUM(NVL(DECODE(LAST01,0,0,ROUND(THIS01*100/LAST01,0)),0)) AS MON01,
		   SUM(NVL(DECODE(LAST02,0,0,ROUND(THIS02*100/LAST02,0)),0)) AS MON02,
		   SUM(NVL(DECODE(LAST03,0,0,ROUND(THIS03*100/LAST03,0)),0)) AS MON03,
		   SUM(NVL(DECODE(LAST04,0,0,ROUND(THIS04*100/LAST04,0)),0)) AS MON04,
		   SUM(NVL(DECODE(LAST05,0,0,ROUND(THIS05*100/LAST05,0)),0)) AS MON05,
		   SUM(NVL(DECODE(LAST06,0,0,ROUND(THIS06*100/LAST06,0)),0)) AS MON06,
		   SUM(NVL(DECODE(L_SUBSUM1,0,0,ROUND(T_SUBSUM1*100/L_SUBSUM1,0)),0)) AS SUBSUM1,
		   SUM(NVL(DECODE(LAST07,0,0,ROUND(THIS07*100/LAST07,0)),0)) AS MON07,
		   SUM(NVL(DECODE(LAST08,0,0,ROUND(THIS08*100/LAST08,0)),0)) AS MON08,
		   SUM(NVL(DECODE(LAST09,0,0,ROUND(THIS09*100/LAST09,0)),0)) AS MON09,
		   SUM(NVL(DECODE(LAST10,0,0,ROUND(THIS10*100/LAST10,0)),0)) AS MON10,
		   SUM(NVL(DECODE(LAST11,0,0,ROUND(THIS11*100/LAST11,0)),0)) AS MON11,
		   SUM(NVL(DECODE(LAST12,0,0,ROUND(THIS12*100/LAST12,0)),0)) AS MON12,
		   SUM(NVL(DECODE(L_SUBSUM2,0,0,ROUND(T_SUBSUM2*100/L_SUBSUM2,0)),0)) AS SUBSUM2,
		   SUM(NVL(DECODE(L_TOTSUM,0,0,ROUND(T_TOTSUM*100/L_TOTSUM,0)),0)) AS TOTSUM
		
			 		FROM  SLE_OUTLET_MST A LEFT OUTER JOIN 
      (
			SELECT
		        UPJANG_CD, GUBUN01,
			MON01 AS THIS01, MON02 AS THIS02, MON03 AS THIS03, MON04 AS THIS04, MON05 AS THIS05, MON06 AS THIS06, MON01+MON02+MON03+MON04+MON05+MON06 AS T_SUBSUM1,
			MON07 AS THIS07, MON08 AS THIS08, MON09 AS THIS09, MON10 AS THIS10, MON11 AS THIS11, MON12 AS THIS12, MON07+MON08+MON09+MON10+MON11+MON12 AS T_SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS T_TOTSUM
			FROM (
						SELECT
		        A.UPJANG_CD, A.GUBUN01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear || '0101' AND :goalYear || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.DEL_YN = 'N'
		        GROUP BY A.UPJANG_CD, A.GUBUN01
			   )
		   ) B ON A.OUTLET_CD = B.UPJANG_CD 
       LEFT OUTER JOIN 
		   (
			SELECT
		        UPJANG_CD, GUBUN01,
			MON01 AS LAST01, MON02 AS LAST02, MON03 AS LAST03, MON04 AS LAST04, MON05 AS LAST05, MON06 AS LAST06, MON01+MON02+MON03+MON04+MON05+MON06 AS L_SUBSUM1,
			MON07 AS LAST07, MON08 AS LAST08, MON09 AS LAST09, MON10 AS LAST10, MON11 AS LAST11, MON12 AS LAST12, MON07+MON08+MON09+MON10+MON11+MON12 AS L_SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS L_TOTSUM
			FROM (
						SELECT
		        A.UPJANG_CD, A.GUBUN01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12', A.CON_FAMT+A.CON_BAMT+A.CON_EAMT+A.ADD_FAMT+A.ADD_BAMT+A.ADD_EAMT,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear-1 || '0101' AND :goalYear-1 || '1231'						
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.SALE_TYPE = '1'
			      		AND A.DEL_YN = 'N'
		        GROUP BY A.UPJANG_CD, A.GUBUN01
			  	)		   
		   ) C ON A.OUTLET_CD = C.UPJANG_CD 
		<#if upjangCd?has_content>
			WHERE A.OUTLET_CD = :upjangCd
		</#if>
		
		
		
			UNION ALL
		
			SELECT 'AS' AS SEQ, GUBUN1, GUBUN2,
			MON01, MON02, MON03, MON04, MON05, MON06, MON01+MON02+MON03+MON04+MON05+MON06 AS SUBSUM1,
			MON07, MON08, MON09, MON10, MON11, MON12, MON07+MON08+MON09+MON10+MON11+MON12 AS SUBSUM2,
			MON01+MON02+MON03+MON04+MON05+MON06+MON07+MON08+MON09+MON10+MON11+MON12 AS TOTSUM
			FROM (
						SELECT
						:goalYear+1 || '년 확정 건수' AS GUBUN1,
						'건수' AS GUBUN2,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'01',1,0)),0) AS MON01,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'02',1,0)),0) AS MON02,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'03',1,0)),0) AS MON03,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'04',1,0)),0) AS MON04,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'05',1,0)),0) AS MON05,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'06',1,0)),0) AS MON06,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'07',1,0)),0) AS MON07,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'08',1,0)),0) AS MON08,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'09',1,0)),0) AS MON09,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'10',1,0)),0) AS MON10,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'11',1,0)),0) AS MON11,
						NVL(SUM(DECODE(SUBSTR(A.OCCUR_DATE,5,2),'12',1,0)),0) AS MON12
						FROM BMS_TM_SALES A
						WHERE 1=1
						AND A.OCCUR_DATE BETWEEN :goalYear+1 || '0101' AND :goalYear+1 || '1231'
						<#if upjangCd?has_content>
							AND A.UPJANG_CD = :upjangCd
						</#if>
						AND A.GUBUN01 = :gubun01
			      		AND A.DEL_YN = 'N'
			)
		)



		]]>
	</statement>
	
	<!--  DATA를 조회한다. -->
	<statement name="selectAddSaleList" type="select">
		<![CDATA[

			SELECT 
				   MAST.TM_SALES_SEQ,
				   MAST.UPJANG_CD,
				   MAST.OCCUR_DATE,
			       SHOP.OUTLET_NM AS UPJANG_NM,  --업장명
			       MAST.DAY,
			       MAST.CUST_NAME,
	               MAST.GUBUN01,
	               MAST.GUBUN02,
	               MAST.CHANNEL,
	               MAST.BANQUET_CD, 
			       (SELECT CODE2.CODE_NAME FROM FCUS.SCC_COMMON_CODE CODE2 
             		 WHERE CODE2.GROUP_CODE = 'BMS_0035' AND MAST.BANQUET_CD = CODE2.CODE) AS BANQUET_NM,
	               MAST.DC,
			       MAST.STIME,
			       MAST.ETIME,
			       MAST.BEF_PRICE,
			       MAST.BEF_PSN,
			       MAST.BEF_FAMT,
			       MAST.BEF_SAMT,
			       MAST.BEF_BAMT,
			       MAST.BEF_EAMT,
			       MAST.CON_PRICE,
			       MAST.CON_PSN,
			       MAST.CON_FAMT,
			       MAST.CON_SAMT,
			       MAST.CON_BAMT,
			       MAST.CON_EAMT,
			       MAST.ADD_PRICE,
			       MAST.ADD_PSN,
			       MAST.ADD_FAMT,
			       MAST.ADD_SAMT,
			       MAST.ADD_BAMT,
			       MAST.ADD_EAMT,
			       MAST.BEF_SUM,
			       MAST.CON_SUM,
			       MAST.ADD_SUM,
			       DECODE(MAST.DEL_YN, 'Y', 1, 0) AS DEL_YN,
			       MAST.CDATE,
			       MAST.CUSER,
			       MAST.UDATE,
			       MAST.UUSER
			       
			FROM   BMS_TM_SALES   MAST
		         , SLE_OUTLET_MST SHOP
		        
			WHERE  1=1
		      AND MAST.UPJANG_CD = SHOP.OUTLET_CD
		      AND MAST.DEL_YN = 'N'
		      AND MAST.SALE_TYPE = '2'
			  <#if upjangCd?has_content> 
				AND MAST.UPJANG_CD = :upjangCd
			  </#if>
			  AND MAST.OCCUR_DATE between :mon || '01' AND :mon || '31' 
			  ORDER BY UPJANG_CD, OCCUR_DATE 


		]]>
	</statement>
		
	<!--  DATA를 저장한다. -->
	<statement name="insertGoalData" type="insert">
		<![CDATA[
	 	INSERT INTO BMS_TM_GOAL
			(
			  GOAL_YEAR,
              UPJANG_CD,
              GUBUN01,
              CNT01,
              CNT02,
              CNT03,
              CNT04,
              CNT05,
              CNT06,
              CNT07,
              CNT08,
              CNT09,
              CNT10,
              CNT11,
              CNT12,
              AMT01,
              AMT02,
              AMT03,
              AMT04,
              AMT05,
              AMT06,
              AMT07,
              AMT08,
              AMT09,
              AMT10,
              AMT11,
              AMT12,
              USE_YN,
              CDATE,
              CUSER,
              UDATE,
              UUSER
              
			) VALUES (
			:goalYear,
			:upjangCd, 
			:gubun01,
			<#if cnt01?exists> :cnt01, <#else> 0, </#if>
			<#if cnt02?exists> :cnt02, <#else> 0, </#if>
			<#if cnt03?exists> :cnt03, <#else> 0, </#if>
			<#if cnt04?exists> :cnt04, <#else> 0, </#if>
			<#if cnt05?exists> :cnt05, <#else> 0, </#if>
			<#if cnt06?exists> :cnt06, <#else> 0, </#if>
			<#if cnt07?exists> :cnt07, <#else> 0, </#if>
			<#if cnt08?exists> :cnt08, <#else> 0, </#if>
			<#if cnt09?exists> :cnt09, <#else> 0, </#if>
			<#if cnt10?exists> :cnt10, <#else> 0, </#if>
			<#if cnt11?exists> :cnt11, <#else> 0, </#if>
			<#if cnt12?exists> :cnt12, <#else> 0, </#if>
			<#if amt01?exists> :amt01, <#else> 0, </#if>
			<#if amt02?exists> :amt02, <#else> 0, </#if>
			<#if amt03?exists> :amt03, <#else> 0, </#if>
			<#if amt04?exists> :amt04, <#else> 0, </#if>
			<#if amt05?exists> :amt05, <#else> 0, </#if>
			<#if amt06?exists> :amt06, <#else> 0, </#if>
			<#if amt07?exists> :amt07, <#else> 0, </#if>
			<#if amt08?exists> :amt08, <#else> 0, </#if>
			<#if amt09?exists> :amt09, <#else> 0, </#if>
			<#if amt10?exists> :amt10, <#else> 0, </#if>
			<#if amt11?exists> :amt11, <#else> 0, </#if>
			<#if amt12?exists> :amt12, <#else> 0, </#if>
			<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
			SYSDATE,
			:loginSabun,
			SYSDATE,
			:loginSabun
			 
			)
	 
 
		]]>
	</statement>
	
	<!--  DATA를 저장한다. -->
	<statement name="insertSaleData" type="insert">
		<![CDATA[
	 	INSERT INTO BMS_TM_SALES
			(
			  TM_SALES_SEQ,
              UPJANG_CD,
              OCCUR_DATE,
              DAY,
              CUST_NAME,
              GUBUN01,
              GUBUN02,
              CHANNEL,
			  BANQUET_CD,
              DC,
              STIME,
              ETIME,    
		      BEF_PRICE,
		      BEF_PSN,
		      BEF_FAMT,
		      BEF_SAMT,
		      BEF_BAMT,
		      BEF_EAMT,
		      CON_PRICE,
		      CON_PSN,
		      CON_FAMT,
		      CON_SAMT,
		      CON_BAMT,
		      CON_EAMT,
		      ADD_PRICE,
		      ADD_PSN,
		      ADD_FAMT,
		      ADD_SAMT,
		      ADD_BAMT,
		      ADD_EAMT,
		      BEF_SUM,
		      CON_SUM,
		      ADD_SUM,
              DEL_YN,
              CDATE,
              CUSER,
              UDATE,
              UUSER,
              SALE_TYPE
              
			) VALUES (
			BMS_TM_SALES_SEQ.NEXTVAL,
			:upjangCd,
			:occurDate,
			to_char(TO_DATE(:occurDate,'YYYY-MM-DD'),'dy'),
			:custName,
			:gubun01,
			:gubun02,
			<#if channel?exists> :channel, <#else> null, </#if>
			<#if banquetCd?exists> :banquetCd, <#else> null, </#if>
			<#if dc?exists> :dc, <#else> null, </#if>
			:stime,
			:etime,
			<#if befPrice?exists> :befPrice, <#else> 0, </#if>
			<#if befPsn?exists> :befPsn, <#else> 0, </#if>
			<#if befFamt?exists> :befFamt, <#else> 0, </#if>
			<#if befSamt?exists> :befSamt, <#else> 0, </#if>
			<#if befBamt?exists> :befBamt, <#else> 0, </#if>
			<#if befEamt?exists> :befEamt, <#else> 0, </#if>
			<#if conPrice?exists> :conPrice, <#else> 0, </#if>
			<#if conPsn?exists> :conPsn, <#else> 0, </#if>
			<#if conFamt?exists> :conFamt, <#else> 0, </#if>
			<#if conSamt?exists> :conSamt, <#else> 0, </#if>
			<#if conBamt?exists> :conBamt, <#else> 0, </#if>
			<#if conEamt?exists> :conEamt, <#else> 0, </#if>
			<#if addPrice?exists> :addPrice, <#else> 0, </#if>
			<#if addPsn?exists> :addPsn, <#else> 0, </#if>
			<#if addFamt?exists> :addFamt, <#else> 0, </#if>
			<#if addSamt?exists> :addSamt, <#else> 0, </#if>
			<#if addBamt?exists> :addBamt, <#else> 0, </#if>
			<#if addEamt?exists> :addEamt, <#else> 0, </#if>
			<#if befSum?exists> :befSum, <#else> 0, </#if>
			<#if conSum?exists> :conSum, <#else> 0, </#if>
			<#if addSum?exists> :addSum, <#else> 0, </#if>
			'N', 
			SYSDATE,
			:loginSabun,
			SYSDATE,
			:loginSabun,
			'1'
			)
	 
 
		]]>
	</statement>
	
	
	<!--  DATA를 저장한다. -->
	<statement name="insertAddSaleData" type="insert">
		<![CDATA[
	 	INSERT INTO BMS_TM_SALES
			(
			  TM_SALES_SEQ,
              UPJANG_CD,
              OCCUR_DATE,
              DAY,
              CUST_NAME,
              GUBUN01,
              GUBUN02,
              CHANNEL,
              BANQUET_CD,
              DC,
              STIME,
              ETIME,       
		      BEF_PRICE,
		      BEF_PSN,
		      BEF_FAMT,
		      BEF_SAMT,
		      BEF_BAMT,
		      BEF_EAMT,
		      CON_PRICE,
		      CON_PSN,
		      CON_FAMT,
		      CON_SAMT,
		      CON_BAMT,
		      CON_EAMT,
		      ADD_PRICE,
		      ADD_PSN,
		      ADD_FAMT,
		      ADD_SAMT,
		      ADD_BAMT,
		      ADD_EAMT,
		      BEF_SUM,
		      CON_SUM,
		      ADD_SUM,
              DEL_YN,
              CDATE,
              CUSER,
              UDATE,
              UUSER,
              SALE_TYPE
              
			) VALUES (
			BMS_TM_SALES_SEQ.NEXTVAL,
			:upjangCd,
			:occurDate,
			to_char(TO_DATE(:occurDate,'YYYY-MM-DD'),'dy'),
			:custName,
			:gubun01,
			:gubun02,
			<#if channel?exists> :channel, <#else> null, </#if>
			<#if banquetCd?exists> :banquetCd, <#else> null, </#if>	
			<#if dc?exists> :dc, <#else> null, </#if>		
			:stime,
			:etime,
			<#if befPrice?exists> :befPrice, <#else> 0, </#if>
			<#if befPsn?exists> :befPsn, <#else> 0, </#if>
			<#if befFamt?exists> :befFamt, <#else> 0, </#if>
			<#if befSamt?exists> :befSamt, <#else> 0, </#if>
			<#if befBamt?exists> :befBamt, <#else> 0, </#if>
			<#if befEamt?exists> :befEamt, <#else> 0, </#if>
			<#if conPrice?exists> :conPrice, <#else> 0, </#if>
			<#if conPsn?exists> :conPsn, <#else> 0, </#if>
			<#if conFamt?exists> :conFamt, <#else> 0, </#if>
			<#if conSamt?exists> :conSamt, <#else> 0, </#if>
			<#if conBamt?exists> :conBamt, <#else> 0, </#if>
			<#if conEamt?exists> :conEamt, <#else> 0, </#if>
			<#if addPrice?exists> :addPrice, <#else> 0, </#if>
			<#if addPsn?exists> :addPsn, <#else> 0, </#if>
			<#if addFamt?exists> :addFamt, <#else> 0, </#if>
			<#if addSamt?exists> :addSamt, <#else> 0, </#if>
			<#if addBamt?exists> :addBamt, <#else> 0, </#if>
			<#if addEamt?exists> :addEamt, <#else> 0, </#if>
			:befFamt + :befBamt +:befEamt,
			:conFamt + :conBamt +:conEamt,
			:addFamt + :addBamt +:addEamt,
			'N', 
			SYSDATE,
			:loginSabun,
			SYSDATE,
			:loginSabun,
			'2'
			)
	 
 
		]]>
	</statement>
	
	<!--  DATA를 수정한다. -->
	<statement name="updateGoalData" type="update">
		<![CDATA[
		 UPDATE BMS_TM_GOAL SET
		 	<#if gubun01?exists> GUBUN01 = :gubun01, </#if>
	 		<#if cnt01?exists> CNT01 = :cnt01, </#if>
			<#if cnt02?exists> CNT02 = :cnt02, </#if>
			<#if cnt03?exists> CNT03 = :cnt03, </#if>
			<#if cnt04?exists> CNT04 = :cnt04, </#if>
			<#if cnt05?exists> CNT05 = :cnt05, </#if>
			<#if cnt06?exists> CNT06 = :cnt06, </#if>
			<#if cnt07?exists> CNT07 = :cnt07, </#if>
			<#if cnt08?exists> CNT08 = :cnt08, </#if>
			<#if cnt09?exists> CNT09 = :cnt09, </#if>
			<#if cnt10?exists> CNT10 = :cnt10, </#if>
			<#if cnt11?exists> CNT11 = :cnt11, </#if>
			<#if cnt12?exists> CNT12 = :cnt12, </#if>
			<#if amt01?exists> AMT01 = :amt01, </#if>
			<#if amt02?exists> AMT02 = :amt02, </#if>
			<#if amt03?exists> AMT03 = :amt03, </#if>
			<#if amt04?exists> AMT04 = :amt04, </#if>
			<#if amt05?exists> AMT05 = :amt05, </#if>
			<#if amt06?exists> AMT06 = :amt06, </#if>
			<#if amt07?exists> AMT07 = :amt07, </#if>
			<#if amt08?exists> AMT08 = :amt08, </#if>
			<#if amt09?exists> AMT09 = :amt09, </#if>
			<#if amt10?exists> AMT10 = :amt10, </#if>
			<#if amt11?exists> AMT11 = :amt11, </#if>
			<#if amt12?exists> AMT12 = :amt12, </#if>
			<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
			UDATE = SYSDATE,
			UUSER = :loginSabun
		
		WHERE  UPJANG_CD = :upjangCd
		AND    GOAL_YEAR = :goalYear
		AND    GUBUN01   = :gubun01		
		]]>
	</statement>
	
	<statement name="deleteGoalData" type="update">
		<![CDATA[
		DELETE BMS_TM_GOAL 
		WHERE  UPJANG_CD = :upjangCd
		AND    GOAL_YEAR = :goalYear
		AND    GUBUN01   = :gubun01		
		]]>
	</statement>
	
	<!--  DATA를 수정한다. -->
	<statement name="updateSaleData" type="update">
		<![CDATA[
		 UPDATE BMS_TM_SALES SET
		 
	 		<#if upjangCd?exists> UPJANG_CD = :upjangCd, </#if>
	 		<#if custName?exists> CUST_NAME = :custName, </#if>
			<#if occurDate?exists> OCCUR_DATE = :occurDate, </#if>
			<#if occurDate?exists> DAY = to_char(TO_DATE(:occurDate,'YYYY-MM-DD'),'dy'), </#if>
			<#if gubun01?exists> GUBUN01 = :gubun01, </#if>
			<#if gubun02?exists> GUBUN02 = :gubun02, </#if>
			<#if channel?exists> CHANNEL = :channel, </#if>
		 	<#if banquetCd?exists> BANQUET_CD = :banquetCd, </#if>
		 	<#if dc?exists> DC = :dc, </#if>
			<#if stime?exists> STIME = :stime, </#if>
			<#if etime?exists> ETIME = :etime, </#if>
			<#if befPrice?exists> BEF_PRICE = :befPrice, </#if>
			<#if befPsn?exists> BEF_PSN = :befPsn, </#if>
			<#if befFamt?exists> BEF_FAMT = :befFamt, </#if>
			<#if befSamt?exists> BEF_SAMT = :befSamt, </#if>
			<#if befBamt?exists> BEF_BAMT = :befBamt, </#if>
			<#if befEamt?exists> BEF_EAMT = :befEamt, </#if>
			<#if conPrice?exists> CON_PRICE = :conPrice, </#if>
			<#if conPsn?exists> CON_PSN = :conPsn, </#if>
			<#if conFamt?exists> CON_FAMT = :conFamt, </#if>
			<#if conSamt?exists> CON_SAMT = :conSamt, </#if>
			<#if conBamt?exists> CON_BAMT = :conBamt, </#if>
			<#if conEamt?exists> CON_EAMT = :conEamt, </#if>
			<#if addPrice?exists> ADD_PRICE = :addPrice, </#if>
			<#if addPsn?exists> ADD_PSN = :addPsn, </#if>
			<#if addFamt?exists> ADD_FAMT = :addFamt, </#if>
			<#if addSamt?exists> ADD_SAMT = :addSamt, </#if>
			<#if addBamt?exists> ADD_BAMT = :addBamt, </#if>
			<#if addEamt?exists> ADD_EAMT = :addEamt, </#if>
			BEF_SUM = :befFamt + :befBamt +:befEamt,
			CON_SUM = :conFamt + :conBamt +:conEamt,
			ADD_SUM = :addFamt + :addBamt +:addEamt,
			<#if delYn?exists> DEL_YN = DECODE(:delYn, 1, 'Y', 'N'), </#if>
			UDATE = SYSDATE,
			UUSER = :loginSabun
		
		WHERE  UPJANG_CD = :upjangCd
		AND    TM_SALES_SEQ = :tmSalesSeq
		]]>
	</statement>
	
	<!--  DATA를 수정한다. -->
	<statement name="updateAddSaleData" type="update">
		<![CDATA[
		 UPDATE BMS_TM_SALES SET
		 
	 		<#if upjangCd?exists> UPJANG_CD = :upjangCd, </#if>
	 		<#if custName?exists> CUST_NAME = :custName, </#if>
			<#if occurDate?exists> OCCUR_DATE = :occurDate, </#if>
			<#if occurDate?exists> DAY = to_char(TO_DATE(:occurDate,'YYYY-MM-DD'),'dy'), </#if>
			<#if gubun01?exists> GUBUN01 = :gubun01, </#if>
			<#if gubun02?exists> GUBUN02 = :gubun02, </#if>
			<#if channel?exists> CHANNEL = :channel, </#if>
		 	<#if banquetCd?exists> BANQUET_CD = :banquetCd, </#if>
		 	<#if dc?exists> DC = :dc, </#if>
			<#if stime?exists> STIME = :stime, </#if>
			<#if etime?exists> ETIME = :etime, </#if>
			<#if befPrice?exists> BEF_PRICE = :befPrice, </#if>
			<#if befPsn?exists> BEF_PSN = :befPsn, </#if>
			<#if befFamt?exists> BEF_FAMT = :befFamt, </#if>
			<#if befSamt?exists> BEF_SAMT = :befSamt, </#if>
			<#if befBamt?exists> BEF_BAMT = :befBamt, </#if>
			<#if befEamt?exists> BEF_EAMT = :befEamt, </#if>
			<#if conPrice?exists> CON_PRICE = :conPrice, </#if>
			<#if conPsn?exists> CON_PSN = :conPsn, </#if>
			<#if conFamt?exists> CON_FAMT = :conFamt, </#if>
			<#if conSamt?exists> CON_SAMT = :conSamt, </#if>
			<#if conBamt?exists> CON_BAMT = :conBamt, </#if>
			<#if conEamt?exists> CON_EAMT = :conEamt, </#if>
			<#if addPrice?exists> ADD_PRICE = :addPrice, </#if>
			<#if addPsn?exists> ADD_PSN = :addPsn, </#if>
			<#if addFamt?exists> ADD_FAMT = :addFamt, </#if>
			<#if addSamt?exists> ADD_SAMT = :addSamt, </#if>
			<#if addBamt?exists> ADD_BAMT = :addBamt, </#if>
			<#if addEamt?exists> ADD_EAMT = :addEamt, </#if>
			BEF_SUM = :befFamt + :befBamt +:befEamt,
			CON_SUM = :conFamt + :conBamt +:conEamt,
			ADD_SUM = :addFamt + :addBamt +:addEamt,
			<#if delYn?exists> DEL_YN = DECODE(:delYn, 1, 'Y', 'N'), </#if>
			UDATE = SYSDATE,
			UUSER = :loginSabun
		
		WHERE  UPJANG_CD = :upjangCd
		AND    TM_SALES_SEQ = :tmSalesSeq
		]]>
	</statement>
	
	
	<!--  DATA를 조회한다. -->
	<statement name="selectBCodeList" type="select">
		<![CDATA[

			SELECT 
				   CODE.CODE,
				   CODE.CODE_NAME 
			  FROM FCUS.SCC_COMMON_CODE CODE 
              	WHERE 1=1
                	AND GROUP_CODE = 'BMS_0035'
              	<#if upjangCd?has_content> 
					AND CODE.SET1 = :upjangCd
			 	</#if>
			  		AND CODE.USE_YN = 'Y'
			  		ORDER BY CODE	]]>
	</statement>
	
</hqml>	