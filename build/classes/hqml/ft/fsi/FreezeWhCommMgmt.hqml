<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="ft.fsi.freezeWhCommMgmtDAO">
    <desc>냉동창고수수료 관리 HQML Query</desc>

    <!-- 냉동창고수수료 내역을 조회한다. -->
    <statement name="selectList" type="select">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.selectList */
        <![CDATA[
SELECT '0' AS CHK,
       A.SEQ,                                                                       /* 순번 */
       A.WRITE_DATE,                                                                /* 작성일자 */
       A.RCVR,                                                                      /* 공급받는자 : 부가세 신고 업장 : 종사업자번호 */
       A.RCVR_BSN_NO,                                                               /* 공급받는자 사업자번호 */
       A.SUPPLIER,                                                                  /* 공급자 : 매입처(냉동창고) */
       A.SUPPLIER_NM,                                                               /* 공급자 명 */
       A.SUPPLIER_ADDR,                                                             /* 공급자 주소 */
       A.SUPPLIER_BSN_NO,                                                           /* 공급자 사업자번호 */
       SCC_TELNO_SAUPNO_EXPR('SAUPNO', A.SUPPLIER_BSN_NO) AS SUPPLIER_BSN_NO_MASK,  /* 공급자사업자번호 */
       A.SUPPLIER_RESPNM,                                                           /* 공급자대표명 */
       A.SLIP_PUBLISH_DATE,                                                         /* 전표발행일자 */
       A.PAY_SCHD_DATE,                                                             /* 지불예정일 */
       A.REMARKS,                                                                   /* 적요 */
       A.FISCAL_SLIP_NUM,                                                           /* 회계전표번호 */
       A.ATTACH_DEPT,                                                               /* 귀속부서 */
       A.NON_DEDUC_YN,                                                              /* 불공제여부 */
       A.JOURNALZ_ACCT,                                                             /* 분개 계정 */
       A.AMT,                                                                       /* 금액 */
       A.SUPPLY_AMT,                                                                /* 공급금액 */
       A.VAT_AMT,                                                                   /* 부가세 */
       A.TAX_BILL_NUM,                                                              /* 세금 계산서 번호 */
       A.UPLOAD_DATE,                                                               /* 업로드일자 */
       A.SIGN_INSTANCE_ID,                                                          /* 결재ID */
       SCC_SIGN_STATUS_FUN(A.SIGN_INSTANCE_ID) AS SIGN_PROGRESS_STATUS,             /* 결재상태코드 */
       CASE WHEN A.SIGN_INSTANCE_ID IS NOT NULL AND SCC_SIGN_STATUS_FUN(A.SIGN_INSTANCE_ID) IS NULL THEN
                 (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'PO_PROPOSAL_STATUS' AND CODE='20')
       ELSE
           CASE WHEN SCC_SIGN_STATUS_FUN(A.SIGN_INSTANCE_ID) = 'COMPLETE' THEN
                   (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'PO_PROPOSAL_STATUS' AND CODE='30')
                WHEN SCC_SIGN_STATUS_FUN(A.SIGN_INSTANCE_ID) = 'REJECT' THEN
                   (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'PO_PROPOSAL_STATUS' AND CODE='40')
                WHEN SCC_SIGN_STATUS_FUN(A.SIGN_INSTANCE_ID) = 'CANCEL' THEN
                   (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'PO_PROPOSAL_STATUS' AND CODE='50')
                WHEN SCC_SIGN_STATUS_FUN(A.SIGN_INSTANCE_ID) = 'DRAFT' THEN
                   (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'PO_PROPOSAL_STATUS' AND CODE='20')
                ELSE
                   (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'PO_PROPOSAL_STATUS' AND CODE = H.SLIP_STATUS )
           END
       END AS SIGN_PROGRESS_STATUS_NM,                                              /* 결재상태 */
       A.CUSER,
       A.CDATE,
       A.UUSER,
       A.UDATE,
       H.SLIP_STATUS,                                                               /* 전표상태코드 */
       SCC_CODE_NM('SLIP_STATUS', H.SLIP_STATUS) AS SLIP_STATUS_NM,                 /* 전표상태 */
       (
        SELECT SET1
          FROM SCC_COMMON_CODE
         WHERE GROUP_CODE = 'ATTACH_DEPT'
           AND CODE = A.ATTACH_DEPT
       ) AS COST_CENTER_CD,                                                         /* CC_CD */
       (
        SELECT SET1
          FROM SCC_COMMON_CODE
         WHERE GROUP_CODE = 'ATTACH_DEPT'
           AND CODE = A.MGMT_DEPT
       ) AS MGMT_CC_CD,                                                             /* 관리부서 CC_CD */   
       H.FISCAL_YEAR,                                                               /* 회계연도 */
       SCC_CRYPTO.MASKAUTH_FUN(A.BANK_ACCT_NO, 6, :loginPersMask, :maskAuth) AS BANK_ACCT_NO,            /* 계좌번호 */
       --SCC_CRYPTO.ENC_FUN(REPLACE(SCC_CRYPTO.DEC_FUN(A.BANK_ACCT_NO), '-', '')) AS BANK_ACCT_NO_ENC,   /* 계좌번호 - 암호화 */
       A.BANK_ACCT_NO AS BANK_ACCT_NO_ENC,   /* 계좌번호 - 암호화 */
       --SCC_CRYPTO.MASKAUTH_FUN(A.BANK_ACCT_OWNR, 12, :loginPersMask, :maskAuth) AS BANK_ACCT_OWNR,       /* 예금주 */
       A.BANK_ACCT_OWNR,                                                             /* 예금주 */
       A.BANK_CD,                                                                   /* 은행코드 */
       SCC_CODE_NM('FM0005', A.BANK_CD) AS BANK_NM,                                 /* 은행명 */
       DECODE(A.SNGLFOOTLST_NM_YN, 'Y', '1', '0') AS SNGLFOOTLST_NM_YN,              /* 불공제여부 */
       A.BANK_TYPE,																	  /* 은행유형 */
       A.MGMT_DEPT                                                                 /* 관리부서(예산부서) */
  FROM FSI_FREEZE_WH_COMM A
     , FT_SAP_INTERFACE H
 WHERE 1 = 1
   AND A.FISCAL_SLIP_NUM = H.SLIP_NUM(+)
  <#if actStatus?has_content>
      <#if actStatus == 'Y'>
      AND A.FISCAL_SLIP_NUM IS NOT NULL
      <#else>
      AND A.FISCAL_SLIP_NUM IS NULL
      </#if>
  </#if>
  <#if startTerm?has_content>    AND A.WRITE_DATE BETWEEN :startTerm AND :endTerm </#if>
  <#if slipPublishDate?has_content>    AND A.SLIP_PUBLISH_DATE = :slipPublishDate </#if>
  <#if attachDept?has_content>    AND A.ATTACH_DEPT = :attachDept </#if>
  <#if taxBillNum?has_content>    AND A.TAX_BILL_NUM = :taxBillNum </#if>
  <#if deliverWhCd?has_content>    AND A.SUPPLIER = :deliverWhCd </#if>
 ORDER BY A.SEQ
        ]]>
    </statement>

    <!-- 팝업에서 사용하는 거래처 계좌번호 조회 -->
    <statement name="selectSuplierAcctNoList" type="select">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.selectSuplierAcctNoList */
        <![CDATA[
SELECT A.VD_CD
     --, SCC_CRYPTO.DEC_FUN(A.ACC_NO) AS BANK_ACCT_NO
     , SCC_CRYPTO.MASKAUTH_FUN(A.ACC_NO, 6, :loginPersMask, :maskAuth) AS BANK_ACCT_NO
     , A.ACC_HOL AS BANK_ACCT_OWNR
     --, SCC_CRYPTO.MASKAUTH_FUN(A.ACC_HOL, 12, :loginPersMask, :maskAuth) AS BANK_ACCT_OWNR       /* 예금주 */
     , A.BANK_CD
     , SCC_CODE_NM('FM0005', A.BANK_CD) AS BANK_NM
     ,A.BANK_TYP
  FROM EPROCUSR.ESMVACC A
 WHERE 1 = 1
   AND A.STS <> 'D'
   AND A.BANK_TYP IS NOT NULL    --은행코드(E909) 있는것만 조회되게
   /* 2015.08.27 현재 구매쪽에 계좌정보가 등록이 안돼서 테스트용으로 계좌전체를 가져옴 */
   /* X_FSI::AcctNoInqueryPop.xfdl 104 line Y:전체계좌 조회, N:거래처별 계좌조회 */
   /* 테스트 끝나면 Parameter 값을 반듯이 N로 변경해야 한다. */
   <#if acctNoAllTest?has_content && acctNoAllTest == 'N'>
   AND A.VD_CD = (
                  SELECT DISTINCT(A.VD_CD)
                    FROM EPROCUSR.ESMVDFW A
                   WHERE 1 = 1
                     --AND A.CUS_VD_CLS = '50'
                     AND A.VD_CD IS NOT NULL
                      AND A.VD_STS = 'C'
                     AND A.BIZ_REG_NO = <#if supplierBsnNo?has_content> REPLACE(:supplierBsnNo,'-','')<#else>''</#if>
                 )
   </#if>
 ORDER BY A.ACC_NO
        ]]>
    </statement>

    <!-- 국세청번호 조회한다. -->
    <statement name="selectTaxBillNum" type="select">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.selectTaxBillNum */
        <![CDATA[
SELECT
     SUM(CNT) AS CNT
FROM
(
  SELECT COUNT(1) AS CNT
    FROM FSI_FREEZE_WH_COMM
   WHERE TAX_BILL_NUM = :taxBillNum
  UNION ALL

  SELECT COUNT(A.ELCTN_TAX_BILL_NUM) CNT  FROM GDSPAYM_MST A
  WHERE A.ELCTN_TAX_BILL_NUM = :taxBillNum

  UNION ALL

  SELECT COUNT(A.TAX_BILL_NUM) CNT  FROM PO_ORDER_OTHER_AMT A
  WHERE A.TAX_BILL_NUM = :taxBillNum
)
        ]]>
    </statement>

    <!-- 냉동창고수수료 내역을 등록한다. -->
    <statement name="insert" type="insert">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.insert */
        <![CDATA[
INSERT INTO FSI_FREEZE_WH_COMM
(
 SEQ,
 WRITE_DATE,
 RCVR,
 RCVR_BSN_NO,
 SUPPLIER,
 SUPPLIER_NM,
 SUPPLIER_ADDR,
 SUPPLIER_BSN_NO,
 SUPPLIER_RESPNM,
 SLIP_PUBLISH_DATE,
 PAY_SCHD_DATE,
 REMARKS,
 FISCAL_SLIP_NUM,
 ATTACH_DEPT,
 NON_DEDUC_YN,
 JOURNALZ_ACCT,
 AMT,
 SUPPLY_AMT,
 VAT_AMT,
 TAX_BILL_NUM,
 UPLOAD_DATE,
 BANK_ACCT_NO,
 BANK_ACCT_OWNR,
 BANK_CD,
 SNGLFOOTLST_NM_YN,
 BANK_TYPE,
 MGMT_DEPT,
 CUSER,
 CDATE,
 UUSER,
 UDATE
)
SELECT (SELECT NVL(MAX(SEQ), 0) + 1 FROM FSI_FREEZE_WH_COMM),
      <#if writeDate?exists> :writeDate, <#else> null, </#if>
       (
        SELECT NVL(T2.SUB_UPJANG_NUM,'0000')
          FROM SCC_COMMON_CODE T, SCC_CC T2
         WHERE T.SET1= T2.CC_CD
         AND GROUP_CODE = 'ATTACH_DEPT'
           AND CODE = :attachDept
       ),
      :rcvrBsnNo,
      <#if supplierBsnNo?exists>
      (
       SELECT MAX(A.VD_CD)
         FROM EPROCUSR.ESMVDFW A
        WHERE 1 = 1
          AND A.CUS_VD_CLS IN ('10', '50')
          AND A.BIZ_REG_NO = :supplierBsnNo
          AND A.VD_STS = 'C'
      ),
      <#else> null,
      </#if>
      <#if supplierNm?exists> :supplierNm, <#else> null, </#if>
      <#if supplierAddr?exists> :supplierAddr, <#else> null, </#if>
      <#if supplierBsnNo?exists> :supplierBsnNo, <#else> null, </#if>
      <#if supplierRespnm?exists> :supplierRespnm, <#else> null, </#if>
      <#if slipPublishDate?exists> :slipPublishDate, <#else> null, </#if>
      <#if paySchdDate?exists> :paySchdDate, <#else> null, </#if>
      <#if remarks?exists> :remarks, <#else> null, </#if>
      <#if fiscalSlipNum?exists> :fiscalSlipNum, <#else> null, </#if>
      <#if attachDept?exists> :attachDept, <#else> null, </#if>
      <#if nonDeducYn?exists> :nonDeducYn, <#else> null, </#if>
      <#if journalzAcct?exists> :journalzAcct, <#else> null, </#if>
      <#if amt?exists> :amt, <#else> null, </#if>
      <#if supplyAmt?exists> :supplyAmt, <#else> null, </#if>
      <#if vatAmt?exists> :vatAmt, <#else> null, </#if>
      <#if taxBillNum?exists> :taxBillNum, <#else> null, </#if>
      TO_CHAR(SYSDATE, 'YYYYMMDD'),
      <#if bankAcctNo?exists> SCC_CRYPTO.ENC_FUN(:bankAcctNo), <#else> null, </#if>
      <#if bankAcctOwnr?exists> :bankAcctOwnr, <#else> null, </#if>
      <#if bankCd?exists> :bankCd, <#else> null, </#if>
      <#if snglfootlstNmYn?exists> DECODE(:snglfootlstNmYn, '1', 'Y', 'N'), <#else> null, </#if>
      <#if bankType?exists> :bankType, <#else> null, </#if>
      <#if mgmtDept?exists> :mgmtDept, <#else> null, </#if>
       :loginSabun,
       SYSDATE,
       :loginSabun,
       SYSDATE
  FROM DUAL
        ]]>
    </statement>

    <!-- 냉동창고수수료 내역을 수정한다. -->
    <statement name="update" type="update">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.update */
        <![CDATA[
UPDATE FSI_FREEZE_WH_COMM SET
<#if nonDeducYn?exists> NON_DEDUC_YN = :nonDeducYn, </#if>
<#if slipPublishDate?exists> SLIP_PUBLISH_DATE = :slipPublishDate, </#if>
<#if paySchdDate?exists> PAY_SCHD_DATE = :paySchdDate, </#if>
<#if remarks?exists> REMARKS = :remarks, </#if>
<#if attachDept?exists> ATTACH_DEPT = :attachDept, </#if>
<#if supplierNm?exists> SUPPLIER_NM = :supplierNm, </#if>
<#if snglfootlstNmYn?exists> SNGLFOOTLST_NM_YN = DECODE(:snglfootlstNmYn, '1', 'Y', 'N'), </#if>
<#if bankAcctNo?exists> BANK_ACCT_NO = SCC_CRYPTO.ENC_FUN(:bankAcctNo), </#if>
<#if bankAcctOwnr?exists> BANK_ACCT_OWNR = :bankAcctOwnr, </#if>
<#if bankCd?exists> BANK_CD = :bankCd, </#if>
<#if bankType?exists> BANK_TYPE = :bankType, </#if>
<#if mgmtDept?exists> MGMT_DEPT = :mgmtDept, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SEQ = :seq
        ]]>
    </statement>

    <!-- 냉동창고수수료 전표번호를 등록한다. -->
    <statement name="slipNumUpdate" type="update">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.slipNumUpdate */
        <![CDATA[
UPDATE FSI_FREEZE_WH_COMM SET
       FISCAL_SLIP_NUM = :fiscalSlipNum,
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SEQ = :seq
        ]]>
    </statement>

    <!-- 전자결재 결과를 등록한다. -->
    <statement name="saveDraft" type="update">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.saveDraft */
        <![CDATA[
UPDATE FSI_FREEZE_WH_COMM SET
       SIGN_INSTANCE_ID = :signInstanceId,
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SEQ = :seq
        ]]>
    </statement>

    <!-- 냉동창고수수료 내역을 삭제한다. -->
    <statement name="delete" type="delete">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.delete */
        <![CDATA[
DELETE
FROM   FSI_FREEZE_WH_COMM
WHERE  SEQ = :seq
        ]]>
    </statement>

    <!-- 암호화된 주소를 복호화 한다. -->
    <statement name="selectDecAddr" type="select">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.selectDecAddr */
        <![CDATA[
SELECT NVL(SCC_CRYPTO.DEC_FUN(:suAddr), '') AS DEC_SU_ADDR
     , NVL(SCC_CRYPTO.DEC_FUN(:suTelno), '') AS DEC_SU_TELNO
     , NVL(SCC_CRYPTO.DEC_FUN(:suHpno), '') AS DEC_SU_HPNO
     , NVL(SCC_CRYPTO.DEC_FUN(:suEmail), '') AS DEC_SU_EMAIL
  FROM DUAL
        ]]>
    </statement>

    <!-- 귀속부서 CC Code 조회 -->
    <statement name="selectCcCd" type="select">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.selectCcCd */
        <![CDATA[
SELECT SET1
  FROM SCC_COMMON_CODE
 WHERE GROUP_CODE = 'ATTACH_DEPT'
   AND CODE = :attachDept
   AND USE_YN = 'Y'
        ]]>
    </statement>

    <!-- 예산부서 CC Code 조회 -->
    <statement name="selectMgmtCcCd" type="select">
        /*+ com.hwfs.ft.fsi.dao.FreezeWhCommMgmtDAO.selectMgmtCcCd */
        <![CDATA[
SELECT SET1
  FROM SCC_COMMON_CODE
 WHERE GROUP_CODE = 'ATTACH_DEPT'
   AND CODE = :mgmtDept
   AND USE_YN = 'Y'
        ]]>
    </statement>
</hqml>
