<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="sc.scz.custMgmtDAO">
	<desc>거래처 정보 HQML Query</desc>

	<!-- 거래처 정보 목록을 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.selectList */
		<![CDATA[
SELECT /*+ NO_MERGE(A) */ A.CUSTCD,
       A.CUST_GRP_CD,
       A.CUST_GRP_NM,
       A.CUSTTYPE,
       A.CUST_TYPE_NM,
       A.CUSTGUBUN,
       A.CUST_GUBUN_NM,
       A.CUSTNM,
       A.TEL_NO,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 1) AS TEL_NO1,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 2) AS TEL_NO2,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 3) AS TEL_NO3,
       A.HAND_PHONE,
       SCC_TELNO_SPLIT_FUN(A.HAND_PHONE, 1) AS HP_NO1,
       SCC_TELNO_SPLIT_FUN(A.HAND_PHONE, 2) AS HP_NO2,
       SCC_TELNO_SPLIT_FUN(A.HAND_PHONE, 3) AS HP_NO3,
       A.FAX_NO,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 1) AS FAX_NO1,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 2) AS FAX_NO2,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 3) AS FAX_NO3,
       A.EMAIL_ADDR,
       A.SAUPNO,
       A.SUB_UPJANG_NUM,
       A.CUST_CORP_NM,
       A.BUBINNO,
       A.DRNAME1,
       A.DRNAME2,
       A.UP_JONG,
       A.UP_TAE,
       A.ELCTN_TAX_BILL_YN,
       A.VAT_CUSTGUBUN,
       A.ADDR_KEY,
       A.ADDR,
       A.DETAIL_ADDR,
       A.NATION_CD,
       A.CURRENCY_CD,
       A.AR_PAY_POSS_YN,
       A.USE_YN,
       A.INSPECT_TYPE,
       A.PROC_RESULT_NM,
       A.CUST_ACCT_CD,
       A.CUST_PAY_COND,
       A.CHG_REASON,
       A.PROC_RESULT_MSG,
       A.RTN_REASON,
       A.SAP_CUST_CD,
       A.FRGN_CUST_CD,
       A.HR_SOSOK,
       A.SABUN,
       A.PROC_RESULT,
       A.HLEVEL_CUST_CD,
       A.CUST_REQUEST_SYS_CD,
       A.CUST_REQUEST_NUM,
       A.CEO_ID_NO_ENC,
       A.ID_NO_ENC,
       A.REQUEST_SAP_YN,
       A.ZIP_CODE,
       A.MST_ADDR,
       A.DTL_ADDR,
       A.ETC_ADDR
FROM   (SELECT A.CUSTCD,
               A.CUST_GRP_CD,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'CUST_GRP_CD' AND CODE = A.CUST_GRP_CD) AS CUST_GRP_NM,
               A.CUSTTYPE,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'Z01' AND CODE = A.CUSTTYPE) AS CUST_TYPE_NM,
               A.CUSTGUBUN,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'Z02' AND CODE = A.CUSTGUBUN) AS CUST_GUBUN_NM,
               A.CUSTNM,
               SCC_CRYPTO.MASKAUTH_FUN(A.TEL_NO_ENC, 9, :loginPersMask, :maskAuth) AS TEL_NO,
               SCC_CRYPTO.MASKAUTH_FUN(A.FAX_NO_ENC, 9, :loginPersMask, :maskAuth) AS FAX_NO,
               SCC_CRYPTO.MASKAUTH_FUN(A.HAND_PHONE_ENC, 8, :loginPersMask, :maskAuth) AS HAND_PHONE,
               SCC_CRYPTO.MASKAUTH_FUN(EMAIL_ADDR_ENC, 7, :loginPersMask, :maskAuth) AS EMAIL_ADDR,
               A.SAUPNO,
               NVL(A.SUB_UPJANG_NUM, '0000') AS SUB_UPJANG_NUM,
               A.CUST_CORP_NM,
               A.BUBINNO,
               A.DRNAME1,
               A.DRNAME2,
               A.UP_JONG,
               A.UP_TAE,
               A.ELCTN_TAX_BILL_YN,
               A.VAT_CUSTGUBUN,
               A.ADDR_KEY,
               SCC_ADDR_FUN(A.ADDR_KEY, :loginPersMask, :maskAuth) AS ADDR,
               SCC_CRYPTO.MASKAUTH_FUN(A.DETAIL_ADDR_ENC, 10, :loginPersMask, :maskAuth) AS DETAIL_ADDR,
               A.NATION_CD,
               A.CURRENCY_CD,
               A.AR_PAY_POSS_YN,
               A.USE_YN,
               A.INSPECT_TYPE,
               CASE A.PROC_RESULT WHEN 'S' THEN '성공' WHEN 'E' THEN '실패' WHEN 'B' THEN '부결' WHEN 'R' THEN '요청' WHEN 'D' THEN '요청대기' ELSE '' END AS PROC_RESULT_NM,
               A.PROC_RESULT,
               A.CUST_ACCT_CD,
               A.CUST_PAY_COND,
               A.CHG_REASON,
               A.PROC_RESULT_MSG,
               A.RTN_REASON,
               A.SAP_CUST_CD,
               A.FRGN_CUST_CD,
               B.ORG_PATH AS HR_SOSOK,
               A.SABUN,
               A.HLEVEL_CUST_CD,
               A.CUST_REQUEST_SYS_CD,
               A.CUST_REQUEST_NUM,
               SCC_CRYPTO.MASKAUTH_FUN(A.CEO_ID_NO_ENC, 1, :loginPersMask, :maskAuth) AS CEO_ID_NO_ENC,
               SCC_CRYPTO.MASKAUTH_FUN(A.ID_NO_ENC, 1, :loginPersMask, :maskAuth) AS ID_NO_ENC,
               CASE WHEN A.CUSTCD = A.HLEVEL_CUST_CD OR A.HLEVEL_CUST_CD IS NULL THEN 'Y'
                 ELSE
                   CASE WHEN A.CUSTCD <> A.HLEVEL_CUST_CD AND A.SAP_CUST_CD <> (SELECT SAP_CUST_CD FROM ST_CUST WHERE CUSTCD = A.HLEVEL_CUST_CD) THEN 'Y'
                     ELSE 'N'
                   END
               END AS REQUEST_SAP_YN,
               SCC_GET_ADDR_FUN('ZIP', A.ADDR_KEY, '', '') AS ZIP_CODE,
               SCC_GET_ADDR_FUN('BASE', A.ADDR_KEY, '', '') AS MST_ADDR,
               SCC_GET_ADDR_FUN('DETAIL', A.ADDR_KEY, :loginPersMask, :maskAuth) AS DTL_ADDR,
               SCC_GET_ADDR_FUN('ETC', A.ADDR_KEY, '', '') AS ETC_ADDR
        FROM   ST_CUST A,
               (SELECT B.SABUN
                     , C.ORG_PATH 
                  FROM HR_PERSONAL B,
                       SCC_TREE_ORG_V C
                 WHERE C.ORG_CD(+) = B.CC_CD
                   AND C.CC_YN(+) = 'Y'
                 GROUP BY B.SABUN, C.ORG_PATH) B               
        WHERE  B.SABUN(+) = A.SABUN
<#if custGrpCd?has_content>
        AND    A.CUST_GRP_CD = :custGrpCd
</#if>
<#if custtype?has_content>
        AND    A.CUSTTYPE = :custtype
</#if>
<#if custnm?has_content>
        AND    A.CUSTNM LIKE '%'|| :custnm ||'%'
</#if>
<#if custcds?has_content>
        AND    A.CUSTCD IN (:custcds)
</#if>
<#if useYn?has_content>
        AND    A.USE_YN = :useYn
</#if>
<#if bsnNo?has_content>
        AND    A.SAUPNO = :bsnNo
</#if>
<#if upjang?has_content>
        AND    A.CUSTCD IN (SELECT CUSTCD FROM ST_UPJANG WHERE UPJANG = :upjang)
</#if>
       ) A
ORDER BY A.CUSTCD
		]]>
	</statement>

	<!-- 거래처 담당자 정보(을)를 조회한다. -->
	<statement name="selectCustInchargeList" type="select">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.selectCustInchargeList */
		<![CDATA[
SELECT A.CUSTCD,
       A.MGMT_NUM,
       A.INCHARGE_NAME,
       A.INCHARGE_DEPT_NM,
       CASE WHEN A.INCHARGE_TEL_NUM_ENC IS NULL THEN '' ELSE SCC_TELNO_SPLIT_FUN(A.INCHARGE_TEL_NUM_ENC, 1) || '-' || SCC_TELNO_SPLIT_FUN(A.INCHARGE_TEL_NUM_ENC, 2) || '-' || SCC_TELNO_SPLIT_FUN(A.INCHARGE_TEL_NUM_ENC, 3) END AS INCHARGE_TEL_NUM_ENC,
       CASE WHEN A.INCHARGE_FAX_NUM_ENC IS NULL THEN '' ELSE SCC_TELNO_SPLIT_FUN(A.INCHARGE_FAX_NUM_ENC, 1) || '-' || SCC_TELNO_SPLIT_FUN(A.INCHARGE_FAX_NUM_ENC, 2) || '-' || SCC_TELNO_SPLIT_FUN(A.INCHARGE_FAX_NUM_ENC, 3) END AS INCHARGE_FAX_NUM_ENC,
       CASE WHEN A.INCHARGE_HANDPHONE_NUM_ENC IS NULL THEN '' ELSE SCC_TELNO_SPLIT_FUN(A.INCHARGE_HANDPHONE_NUM_ENC, 1) || '-' || SCC_TELNO_SPLIT_FUN(A.INCHARGE_HANDPHONE_NUM_ENC, 2) || '-' || SCC_TELNO_SPLIT_FUN(A.INCHARGE_HANDPHONE_NUM_ENC, 3) END AS INCHARGE_HANDPHONE_NUM_ENC,
       A.INCHARGE_EMAIL_ADDR_ENC,
       A.INCHARGE_ZIP_CODE,
       A.INCHARGE_ADDR,
       A.INCHARGE_DETAIL_ADDR_ENC,
       A.INCHARGE_EXPL
FROM   (SELECT CUSTCD,
               MGMT_NUM,
               SCC_CRYPTO.MASKAUTH_FUN(INCHARGE_NAME,12, :loginPersMask, :maskAuth) AS INCHARGE_NAME,
               INCHARGE_DEPT_NM,
               SCC_CRYPTO.MASKAUTH_FUN(INCHARGE_TEL_NUM_ENC, 9, :loginPersMask, :maskAuth) AS INCHARGE_TEL_NUM_ENC,
               SCC_CRYPTO.MASKAUTH_FUN(INCHARGE_FAX_NUM_ENC, 9, :loginPersMask, :maskAuth) AS INCHARGE_FAX_NUM_ENC,
               SCC_CRYPTO.MASKAUTH_FUN(INCHARGE_HANDPHONE_NUM_ENC, 8, :loginPersMask, :maskAuth) AS INCHARGE_HANDPHONE_NUM_ENC,
               SCC_CRYPTO.MASKAUTH_FUN(INCHARGE_EMAIL_ADDR_ENC, 7, :loginPersMask,:maskAuth) AS INCHARGE_EMAIL_ADDR_ENC,
               INCHARGE_ZIP_CODE,
               INCHARGE_ADDR,
               SCC_CRYPTO.MASKAUTH_FUN(INCHARGE_DETAIL_ADDR_ENC, 10, :loginPersMask, :maskAuth) AS INCHARGE_DETAIL_ADDR_ENC,
               INCHARGE_EXPL
        FROM   SCC_CUST_INCHARGE
        WHERE  CUSTCD = :custcd) A
		]]>
	</statement>

	<!-- Full 사업자번호에 대하여 거래처 정보(을)를 조회한다. -->
	<statement name="selectStCust" type="select">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.selectStCust */
		<![CDATA[
SELECT 'ST_CUST' AS GUBUN,
       A.CUSTCD,
       A.CUSTTYPE,
       A.CUSTGUBUN,
       A.CUSTNM,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 1) AS TEL_NO1,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 2) AS TEL_NO2,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 3) AS TEL_NO3,
       SCC_TELNO_SPLIT_FUN(A.HAND_PHONE, 1) AS HP_NO1,
       SCC_TELNO_SPLIT_FUN(A.HAND_PHONE, 2) AS HP_NO2,
       SCC_TELNO_SPLIT_FUN(A.HAND_PHONE, 3) AS HP_NO3,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 1) AS FAX_NO1,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 2) AS FAX_NO2,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 3) AS FAX_NO3,
       A.EMAIL_ADDR,
       A.SAUPNO,
       A.SUB_UPJANG_NUM,
       A.CUST_CORP_NM,
       A.BUBINNO,
       A.DRNAME1,
       A.DRNAME2,
       A.UP_JONG,
       A.UP_TAE,
       A.ELCTN_TAX_BILL_YN,
       A.VAT_CUSTGUBUN,
       A.POST_NO,
       A.ADDR,
       A.DETAIL_ADDR,
       A.NATION_CD,
       A.CURRENCY_CD,
       A.AR_PAY_POSS_YN,
       A.USE_YN,
       A.INSPECT_TYPE,
       A.PROC_RESULT_NM,
       A.CUST_ACCT_CD,
       A.CUST_PAY_COND,
       A.CHG_REASON,
       A.PROC_RESULT_MSG,
       A.RTN_REASON,
       CASE WHEN A.SAP_CUST_CD IS NULL THEN 'NVL' ELSE A.SAP_CUST_CD END SAP_CUST_CD,
       A.FRGN_CUST_CD,
       A.PROC_RESULT,
       A.CUST_REQUEST_SYS_CD,
       A.CUST_REQUEST_NUM
FROM   (SELECT A.CUSTCD,
               A.CUSTTYPE,
               A.CUSTGUBUN,
               A.CUSTNM,
               SCC_CRYPTO.MASKAUTH_FUN(A.TEL_NO_ENC, 9, :loginPersMask, :maskAuth) AS TEL_NO,
               SCC_CRYPTO.MASKAUTH_FUN(A.FAX_NO_ENC, 9, :loginPersMask, :maskAuth) AS FAX_NO,
               SCC_CRYPTO.MASKAUTH_FUN(A.HAND_PHONE_ENC, 8, :loginPersMask, :maskAuth) AS HAND_PHONE,
               SCC_CRYPTO.MASKAUTH_FUN(EMAIL_ADDR_ENC, 7, :loginPersMask, :maskAuth) AS EMAIL_ADDR,
               A.SAUPNO,
               NVL(A.SUB_UPJANG_NUM, '0000') AS SUB_UPJANG_NUM,
               A.CUST_CORP_NM,
               A.BUBINNO,
               A.DRNAME1,
               A.DRNAME2,
               A.UP_JONG,
               A.UP_TAE,
               A.ELCTN_TAX_BILL_YN,
               A.VAT_CUSTGUBUN,
               A.POST_NO,
               A.ADDR,
               SCC_CRYPTO.MASKAUTH_FUN(A.DETAIL_ADDR_ENC, 10, :loginPersMask, :maskAuth) AS DETAIL_ADDR,
               A.NATION_CD,
               A.CURRENCY_CD,
               A.AR_PAY_POSS_YN,
               A.USE_YN,
               A.INSPECT_TYPE,
               CASE A.PROC_RESULT WHEN 'S' THEN '성공' WHEN 'E' THEN '실패' WHEN 'B' THEN '부결' WHEN 'R' THEN '요청' WHEN 'D' THEN '요청대기' ELSE '' END AS PROC_RESULT_NM,
               A.CUST_ACCT_CD,
               A.CUST_PAY_COND,
               A.CHG_REASON,
               A.PROC_RESULT_MSG,
               A.RTN_REASON,
               A.SAP_CUST_CD,
               A.FRGN_CUST_CD,
               A.PROC_RESULT,
               A.CUST_REQUEST_SYS_CD,
               A.CUST_REQUEST_NUM
        FROM   ST_CUST A
        WHERE  A.FULL_BSN_NO = :fullBsnNo) A
WHERE ROWNUM = 1
ORDER BY A.CUSTCD
		]]>
	</statement>

	<!-- Full 사업자번호에 대하여 SAP 거래처 정보(을)를 조회한다. -->
	<statement name="selectSapCust" type="select">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.selectSapCust */
		<![CDATA[
SELECT 'SAP_CUST' AS GUBUN,
       A.CUSTCD,
       A.CUSTTYPE,
       A.CUSTGUBUN,
       A.CUSTNM,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 1) AS TEL_NO1,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 2) AS TEL_NO2,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 3) AS TEL_NO3,
       SCC_TELNO_SPLIT_FUN(A.HAND_PHONE, 1) AS HP_NO1,
       SCC_TELNO_SPLIT_FUN(A.HAND_PHONE, 2) AS HP_NO2,
       SCC_TELNO_SPLIT_FUN(A.HAND_PHONE, 3) AS HP_NO3,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 1) AS FAX_NO1,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 2) AS FAX_NO2,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 3) AS FAX_NO3,
       A.EMAIL_ADDR,
       A.SAUPNO,
       A.SUB_UPJANG_NUM,
       A.CUST_CORP_NM,
       A.BUBINNO,
       A.DRNAME1,
       A.DRNAME2,
       A.UP_JONG,
       A.UP_TAE,
       A.ELCTN_TAX_BILL_YN,
       A.VAT_CUSTGUBUN,
       A.POST_NO,
       A.ADDR,
       A.DETAIL_ADDR,
       A.NATION_CD,
       A.USE_YN,
       A.INSPECT_TYPE,
       A.PROC_RESULT_NM,
       A.CUST_ACCT_CD,
       A.CUST_PAY_COND,
       A.CHG_REASON,
       A.PROC_RESULT_MSG,
       A.RTN_REASON,
       CASE WHEN A.SAP_CUST_CD IS NULL THEN 'NVL' ELSE A.SAP_CUST_CD END SAP_CUST_CD,
       A.FRGN_CUST_CD,
       A.PROC_RESULT,
       A.CUST_REQUEST_SYS_CD,
       A.CUST_REQUEST_NUM
FROM   (SELECT DISTINCT 'NVL' CUSTCD,
               '' AS CUSTTYPE,
               '' AS CUSTGUBUN,
               A.CUST_NM AS CUSTNM,
               '' AS TEL_NO,
               SCC_CRYPTO.MASKAUTH_FUN(A.FAX_NUM_ENC, 9, :loginPersMask, :maskAuth) AS FAX_NO,
               '' AS HAND_PHONE,
               SCC_CRYPTO.MASKAUTH_FUN(EMAIL_ADDR_ENC, 7, :loginPersMask, :maskAuth) AS EMAIL_ADDR,
               A.BSN_NO AS SAUPNO,
               NVL(A.SUB_UPJANG_NUM, '0000') AS SUB_UPJANG_NUM,
               A.CUST_NM AS CUST_CORP_NM,
               A.CORP_NUM AS BUBINNO,
               A.CEO_NAME_HANGUL AS DRNAME1,
               A.CEO_NAME_ENGLISH AS DRNAME2,
               A.BIZ_CAT AS UP_JONG,
               A.BIZ_TYPE AS UP_TAE,
               A.ELCTN_TAX_BILL_YN,
               A.VAT_TYPE AS VAT_CUSTGUBUN,
               A.ZIP_CODE AS POST_NO,
               A.ADDR,
               SCC_CRYPTO.MASKAUTH_FUN(A.DETAIL_ADDR_ENC, 10, :loginPersMask, :maskAuth) AS DETAIL_ADDR,
               A.NATION_CD,
               A.DEL_YN AS USE_YN,
               A.INSPECT_TYPE,
               CASE A.PROC_RESULT WHEN 'S' THEN '성공' WHEN 'E' THEN '실패' WHEN 'B' THEN '부결' WHEN 'R' THEN '요청' WHEN 'D' THEN '요청대기' ELSE '' END AS PROC_RESULT_NM,
               A.CUST_ACCT_CD,
               A.CUST_PAY_COND,
               A.CHG_REASON,
               A.PROC_RESULT_MSG,
               A.RTN_REASON,
               A.SAP_CUST_CD,
               A.FRGN_CUST_NUM AS FRGN_CUST_CD,
               A.PROC_RESULT,
               A.REQUEST_SYS_CD AS CUST_REQUEST_SYS_CD,
               A.REQUEST_NUM AS CUST_REQUEST_NUM
        FROM   SCC_SAP_CUST A
        WHERE A.FULL_BSN_NO = :fullBsnNo) A
		]]>
	</statement>

	<!-- Full 사업자번호에 대하여 SAP 거래처 정보(을)를 조회한다. -->
	<statement name="selectHlevelCust" type="select">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.selectHlevelCust */
		<![CDATA[
SELECT 'ST_CUST' AS GUBUN,
       CUSTCD,
       CUST_CORP_NM
FROM   ST_CUST
WHERE  FULL_BSN_NO = SUBSTR(:fullBsnNo, 1, 10) || '0000'
		]]>
	</statement>

	<!-- Full 사업자번호에 대하여 SAP 거래처 정보(을)를 조회한다. -->
	<statement name="searchAddrCnt" type="select">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.searchAddrCnt */
		<![CDATA[
SELECT ADDR_KEY, COUNT(*) AS ADDR_CNT
  FROM FCUS.ST_CUST
 WHERE ADDR_KEY = :addrKey
 GROUP BY ADDR_KEY
		]]>
	</statement>

	<!-- SAP에 요청할 정보를 조회한다. -->
	<statement name="selectSapRequestData" type="select">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.selectSapRequestData */
		<![CDATA[
SELECT A.CUST_REQUEST_SYS_CD AS SYS_CD,
       A.CUST_REQUEST_NUM AS REQUEST_NUM,
       A.INSPECT_TYPE,
       A.PROC_TYPE,
       A.CUST_GRP_CD AS CUST_GRP,
       A.CUST_CORP_NM AS CUST_NM,
       A.FULL_BSN_NO,
       A.SAUPNO AS BSN_NO,
       A.SUB_UPJANG_NUM,
       A.BUBINNO AS CORP_NUM,
       A.FRGN_CUST_CD AS FRGN_CUST_NUM,
       A.ADDR,
       SCC_CRYPTO.DEC_FUN(A.DETAIL_ADDR_ENC) AS DETAIL_ADDR,
       A.POST_NO AS ZIP_CODE,
       SCC_CRYPTO.DEC_FUN(A.TEL_NO_ENC) AS TEL_NUM,
       SCC_CRYPTO.DEC_FUN(A.FAX_NO_ENC) AS FAX_NUM,
       SCC_CRYPTO.DEC_FUN(A.EMAIL_ADDR_ENC) AS EMAIL_ADDR,
       A.DRNAME1 AS CEO_NAME_HANGUL,
       A.DRNAME2 AS CEO_NAME_ENGLISH,
       A.UP_JONG AS BIZ_CAT,
       A.UP_TAE AS BIZ_TYPE,
       A.NATION_CD,
       A.ELCTN_TAX_BILL_YN,
       A.VAT_CUSTGUBUN AS VAT_TYPE,
       :loginSabun AS REQUEST_SABUN,
       TO_CHAR(SYSDATE, 'YYYYMMDD') AS REQUEST_DATE,
       TO_CHAR(SYSDATE, 'HH24MISS') AS REQUEST_TIME,
       A.DEL_YN,
       A.CHG_REASON,
       A.CUST_CREATION_YN,
       A.CUST_ACCT_CD,
       A.CUST_PAY_COND,
       'FI-002-02' AS PICODE,
       'R' AS PISTAT
FROM   ST_CUST A
WHERE  A.CUSTCD = TO_NUMBER(LPAD(:custRequestNum, 20, '0'))
		]]>
	</statement>

	<!-- SAP요청건에 대하여 요청대기에서 요청으로 상태를 변경한다. -->
	<statement name="updateStCustRequestStatus" type="update">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.updateStCustRequestStatus */
		<![CDATA[
UPDATE ST_CUST
SET    PROC_RESULT = 'R'
WHERE  CUSTCD = :custcd
		]]>
	</statement>


	<!-- 거래처 정보(을)를 등록한다. -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.insert */
		<![CDATA[
INSERT INTO ST_CUST
(
 CUSTCD,
 SAP_CUST_CD,
 CUST_GRP_CD,
 CUSTTYPE,
 CUSTGUBUN,
 CUSTNM,
 CUST_CORP_NM,
 TEL_NO_ENC,
 HAND_PHONE_ENC,
 FAX_NO_ENC,
 EMAIL_ADDR_ENC,
 ADDR_KEY,
 DETAIL_ADDR_ENC,
 FULL_BSN_NO,
 SABUN,
 FRGN_CUST_CD,
 SAUPNO,
 SUB_UPJANG_NUM,
 BUBINNO,
 DRNAME1,
 DRNAME2,
 UP_JONG,
 UP_TAE,
 NATION_CD,
 CURRENCY_CD,
 ELCTN_TAX_BILL_YN,
 VAT_CUSTGUBUN,
 AR_PAY_POSS_YN,
 C_PER_NAME,
 INCHARGE_DEPT_NM,
 C_PER_TELNO_ENC,
 C_PART_FAX_ENC,
 C_PER_HPNO_ENC,
 C_PER_EMAIL_ENC,
 PO_TYPE,
 PO_CENTER_YN,
 PO_USEYN,
 SUBINV_CODE,
 SUBINV_CODE_OUTVAT,
 MRO_FLAG,
 CUST_CREATION_YN,
 CUST_ACCT_CD,
 CUST_PAY_COND,
 VENDOR_CREATION_YN,
 VENDOR_ACCT_CD,
 VENDOR_PAY_COND,
 DEL_YN,
 RTN_REASON,
 PROC_RESULT,
 PROC_RESULT_MSG,
 CHG_REASON,
 CUST_REQUEST_SYS_CD,
 CUST_REQUEST_NUM,
 INSPECT_TYPE,
 PROC_TYPE,
 HLEVEL_CUST_CD,
 OLD_CUST_CD,
 USE_YN,
 CREATE_BY,
 CREATE_DATE,
 UPDATE_BY,
 UPDATE_DATE
) VALUES (
 :custcd,
<#if sapCustCd?exists> :sapCustCd, <#else> null, </#if>
<#if custGrpCd?exists> :custGrpCd, <#else> null, </#if>
<#if custtype?exists> :custtype, <#else> null, </#if>
<#if custgubun?exists> :custgubun, <#else> null, </#if>
<#if custnm?exists> :custnm, <#else> null, </#if>
<#if custCorpNm?exists> :custCorpNm, <#else> null, </#if>
<#if telNoEnc?exists> SCC_CRYPTO.ENC_FUN(:telNoEnc), <#else> null, </#if>
<#if handPhoneEnc?exists> SCC_CRYPTO.ENC_FUN(:handPhoneEnc), <#else> null, </#if>
<#if faxNoEnc?exists> SCC_CRYPTO.ENC_FUN(:faxNoEnc), <#else> null, </#if>
<#if emailAddr?exists> SCC_CRYPTO.ENC_FUN(:emailAddr), <#else> null, </#if>
<#if addrKey?exists> :addrKey, <#else> null, </#if>
<#if detailAddr?exists> SCC_CRYPTO.ENC_FUN(:detailAddr), <#else> null, </#if>
<#if fullBsnNo?exists> :fullBsnNo, <#else> null, </#if>
<#if sabun?exists> :sabun, <#else> null, </#if>
<#if frgnCustCd?exists> :frgnCustCd, <#else> null, </#if>
<#if saupno?exists> :saupno, <#else> null, </#if>
<#if subUpjangNum?exists> :subUpjangNum, <#else> null, </#if>
<#if bubinno?exists> :bubinno, <#else> null, </#if>
<#if drname1?exists> :drname1, <#else> null, </#if>
<#if drname2?exists> :drname2, <#else> null, </#if>
<#if upJong?exists> :upJong, <#else> null, </#if>
<#if upTae?exists> :upTae, <#else> null, </#if>
<#if nationCd?exists> :nationCd, <#else> null, </#if>
<#if currencyCd?exists> :currencyCd, <#else> null, </#if>
<#if elctnTaxBillYn?exists> :elctnTaxBillYn, <#else> null, </#if>
<#if vatCustgubun?exists> :vatCustgubun, <#else> null, </#if>
<#if arPayPossYn?exists> :arPayPossYn, <#else> null, </#if>
<#if cPerName?exists> :cPerName, <#else> null, </#if>
<#if inchargeDeptNm?exists> :inchargeDeptNm, <#else> null, </#if>
<#if cPerTelnoEnc?exists> :cPerTelnoEnc, <#else> null, </#if>
<#if cPartFaxEnc?exists> :cPartFaxEnc, <#else> null, </#if>
<#if cPerHpnoEnc?exists> :cPerHpnoEnc, <#else> null, </#if>
<#if cPerEmailEnc?exists> :cPerEmailEnc, <#else> null, </#if>
<#if poType?exists> :poType, <#else> null, </#if>
<#if poCenterYn?exists> DECODE(:poCenterYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if poUseyn?exists> :poUseyn, <#else> null, </#if>
<#if subinvCode?exists> :subinvCode, <#else> null, </#if>
<#if subinvCodeOutvat?exists> :subinvCodeOutvat, <#else> null, </#if>
<#if mroFlag?exists> :mroFlag, <#else> null, </#if>
<#if custCreationYn?exists> DECODE(:custCreationYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if custAcctCd?exists> :custAcctCd, <#else> null, </#if>
<#if custPayCond?exists> :custPayCond, <#else> null, </#if>
<#if vendorCreationYn?exists> DECODE(:vendorCreationYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if vendorAcctCd?exists> :vendorAcctCd, <#else> null, </#if>
<#if vendorPayCond?exists> :vendorPayCond, <#else> null, </#if>
<#if delYn?exists> DECODE(:delYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if rtnReason?exists> :rtnReason, <#else> null, </#if>
<#if procResult?exists> :procResult, <#else> null, </#if>
<#if procResultMsg?exists> :procResultMsg, <#else> null, </#if>
<#if chgReason?exists> :chgReason, <#else> null, </#if>
<#if custRequestSysCd?exists> :custRequestSysCd, <#else> 'IFC', </#if>
<#if custRequestNum?exists> :custRequestNum, <#else> LPAD(:custcd, 20, '0'), </#if>
<#if inspectType?exists> :inspectType, <#else> null, </#if>
<#if procType?exists> :procType, <#else> null, </#if>
<#if hlevelCustCd?exists> :hlevelCustCd, <#else> null, </#if>
<#if oldCustCd?exists> :oldCustCd, <#else> null, </#if>
<#if useYn?exists> :useYn, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 거래처 정보(을)를 수정한다. -->
	<statement name="update" type="update">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.update */
		<![CDATA[
UPDATE ST_CUST SET
<#if sapCustCd?exists> SAP_CUST_CD = :sapCustCd, </#if>
<#if custGrpCd?exists> CUST_GRP_CD = :custGrpCd, </#if>
<#if custtype?exists> CUSTTYPE = :custtype, </#if>
<#if custgubun?exists> CUSTGUBUN = :custgubun, </#if>
<#if custnm?exists> CUSTNM = :custnm, </#if>
<#if custCorpNm?exists> CUST_CORP_NM = :custCorpNm, </#if>
<#if telNoEnc?exists> TEL_NO_ENC = SCC_CRYPTO.ENC_FUN(:telNoEnc), </#if>
<#if handPhoneEnc?exists> HAND_PHONE_ENC = SCC_CRYPTO.ENC_FUN(:handPhoneEnc), </#if>
<#if faxNoEnc?exists> FAX_NO_ENC = SCC_CRYPTO.ENC_FUN(:faxNoEnc), </#if>
<#if emailAddr?exists> EMAIL_ADDR_ENC = SCC_CRYPTO.ENC_FUN(:emailAddr), </#if>
<#if addrKey?exists> ADDR_KEY = :addrKey, </#if>
<#if detailAddr?exists> DETAIL_ADDR_ENC = SCC_CRYPTO.ENC_FUN(:detailAddr), </#if>
<#if fullBsnNo?exists> FULL_BSN_NO = :fullBsnNo, </#if>
<#if sabun?exists> SABUN = :sabun, </#if>
<#if frgnCustCd?exists> FRGN_CUST_CD = :frgnCustCd, </#if>
<#if saupno?exists> SAUPNO = :saupno, </#if>
<#if subUpjangNum?exists> SUB_UPJANG_NUM = :subUpjangNum, </#if>
<#if bubinno?exists> BUBINNO = :bubinno, </#if>
<#if drname1?exists> DRNAME1 = :drname1, </#if>
<#if drname2?exists> DRNAME2 = :drname2, </#if>
<#if upJong?exists> UP_JONG = :upJong, </#if>
<#if upTae?exists> UP_TAE = :upTae, </#if>
<#if nationCd?exists> NATION_CD = :nationCd, </#if>
<#if currencyCd?exists> CURRENCY_CD = :currencyCd, </#if>
<#if elctnTaxBillYn?exists> ELCTN_TAX_BILL_YN = :elctnTaxBillYn, </#if>
<#if vatCustgubun?exists> VAT_CUSTGUBUN = :vatCustgubun, </#if>
<#if arPayPossYn?exists> AR_PAY_POSS_YN = :arPayPossYn, </#if>
<#if cPerName?exists> C_PER_NAME = :cPerName, </#if>
<#if inchargeDeptNm?exists> INCHARGE_DEPT_NM = :inchargeDeptNm, </#if>
<#if cPerTelnoEnc?exists> C_PER_TELNO_ENC = :cPerTelnoEnc, </#if>
<#if cPartFaxEnc?exists> C_PART_FAX_ENC = :cPartFaxEnc, </#if>
<#if cPerHpnoEnc?exists> C_PER_HPNO_ENC = :cPerHpnoEnc, </#if>
<#if cPerEmailEnc?exists> C_PER_EMAIL_ENC = :cPerEmailEnc, </#if>
<#if poType?exists> PO_TYPE = :poType, </#if>
<#if poCenterYn?exists> PO_CENTER_YN = DECODE(:poCenterYn, '1', 'Y', 'N'), </#if>
<#if poUseyn?exists> PO_USEYN = :poUseyn, </#if>
<#if subinvCode?exists> SUBINV_CODE = :subinvCode, </#if>
<#if subinvCodeOutvat?exists> SUBINV_CODE_OUTVAT = :subinvCodeOutvat, </#if>
<#if mroFlag?exists> MRO_FLAG = :mroFlag, </#if>
<#if custCreationYn?exists> CUST_CREATION_YN = DECODE(:custCreationYn, '1', 'Y', 'N'), </#if>
<#if custAcctCd?exists> CUST_ACCT_CD = :custAcctCd, </#if>
<#if custPayCond?exists> CUST_PAY_COND = :custPayCond, </#if>
<#if vendorCreationYn?exists> VENDOR_CREATION_YN = DECODE(:vendorCreationYn, '1', 'Y', 'N'), </#if>
<#if vendorAcctCd?exists> VENDOR_ACCT_CD = :vendorAcctCd, </#if>
<#if vendorPayCond?exists> VENDOR_PAY_COND = :vendorPayCond, </#if>
<#if delYn?exists> DEL_YN = DECODE(:delYn, '1', 'Y', 'N'), </#if>
<#if rtnReason?exists> RTN_REASON = :rtnReason, </#if>
<#if procResult?exists> PROC_RESULT = :procResult, </#if>
<#if procResultMsg?exists> PROC_RESULT_MSG = :procResultMsg, </#if>
<#if chgReason?exists> CHG_REASON = :chgReason, </#if>
<#if custRequestSysCd?exists> CUST_REQUEST_SYS_CD = 'IFC', </#if>
<#if custRequestNum?exists> CUST_REQUEST_NUM = :custRequestNum, </#if>
<#if inspectType?exists> INSPECT_TYPE = :inspectType, </#if>
<#if procType?exists> PROC_TYPE = :procType, </#if>
<#if hlevelCustCd?exists> HLEVEL_CUST_CD = :hlevelCustCd, </#if>
<#if oldCustCd?exists> OLD_CUST_CD = :oldCustCd, </#if>
<#if useYn?exists> USE_YN = :useYn, </#if>
 UPDATE_BY = :loginSabun,
 UPDATE_DATE = SYSDATE
WHERE  CUSTCD = :custcd
		]]>
	</statement>

	<!-- 거래처 정보(을)를 삭제한다. -->
	<statement name="delete" type="update">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.delete */
		<![CDATA[
UPDATE ST_CUST
SET    USE_YN = 'N',
       UPDATE_BY = :loginSabun,
       UPDATE_DATE = SYSDATE
WHERE  CUSTCD = :custcd
		]]>
	</statement>

	<!-- 거래처 담당자 정보(을)를 추가한다. -->
	<statement name="insertSccCustIncharge" type="insert">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.insertSccCustIncharge */
		<![CDATA[
INSERT INTO SCC_CUST_INCHARGE
(
 CUSTCD,
 MGMT_NUM,
 INCHARGE_NAME,
 INCHARGE_DEPT_NM,
 INCHARGE_TEL_NUM_ENC,
 INCHARGE_FAX_NUM_ENC,
 INCHARGE_HANDPHONE_NUM_ENC,
 INCHARGE_EMAIL_ADDR_ENC,
 INCHARGE_ZIP_CODE,
 INCHARGE_ADDR,
 INCHARGE_DETAIL_ADDR_ENC,
 INCHARGE_EXPL,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) (
SELECT :custcd,
       NVL(MAX(MGMT_NUM), 0) + 1,
<#if inchargeName?exists> :inchargeName, <#else> null, </#if>
<#if inchargeDeptNm?exists> :inchargeDeptNm, <#else> null, </#if>
<#if inchargeTelNumEnc?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:inchargeTelNumEnc, '-', '')), <#else> null, </#if>
<#if inchargeFaxNumEnc?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:inchargeFaxNumEnc, '-', '')), <#else> null, </#if>
<#if inchargeHandphoneNumEnc?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:inchargeHandphoneNumEnc, '-', '')), <#else> null, </#if>
<#if inchargeEmailAddrEnc?exists> SCC_CRYPTO.ENC_FUN(:inchargeEmailAddrEnc), <#else> null, </#if>
<#if inchargeZipCode?exists> :inchargeZipCode, <#else> null, </#if>
<#if inchargeAddr?exists> :inchargeAddr, <#else> null, </#if>
<#if inchargeDetailAddrEnc?exists> SCC_CRYPTO.ENC_FUN(:inchargeDetailAddrEnc), <#else> null, </#if>
<#if inchargeExpl?exists> :inchargeExpl, <#else> null, </#if>
      :loginSabun,
      SYSDATE,
      :loginSabun,
      SYSDATE
FROM  SCC_CUST_INCHARGE
WHERE CUSTCD = :custcd
)
		]]>
	</statement>

	<!-- 거래처 담당자 정보(을)를 변경한다. -->
	<statement name="updateSccCustIncharge" type="update">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.updateSccCustIncharge */
		<![CDATA[
UPDATE SCC_CUST_INCHARGE SET
<#if inchargeName?exists> INCHARGE_NAME = :inchargeName, </#if>
<#if inchargeDeptNm?exists> INCHARGE_DEPT_NM = :inchargeDeptNm, </#if>
<#if inchargeTelNumEnc?exists> INCHARGE_TEL_NUM_ENC = SCC_CRYPTO.ENC_FUN(REPLACE(:inchargeTelNumEnc, '-', '')), </#if>
<#if inchargeFaxNumEnc?exists> INCHARGE_FAX_NUM_ENC = SCC_CRYPTO.ENC_FUN(REPLACE(:inchargeFaxNumEnc, '-', '')), </#if>
<#if inchargeHandphoneNumEnc?exists> INCHARGE_HANDPHONE_NUM_ENC = SCC_CRYPTO.ENC_FUN(REPLACE(:inchargeHandphoneNumEnc, '-', '')), </#if>
<#if inchargeEmailAddrEnc?exists> INCHARGE_EMAIL_ADDR_ENC = SCC_CRYPTO.ENC_FUN(:inchargeEmailAddrEnc), </#if>
<#if inchargeZipCode?exists> INCHARGE_ZIP_CODE = :inchargeZipCode, </#if>
<#if inchargeAddr?exists> INCHARGE_ADDR = :inchargeAddr, </#if>
<#if inchargeDetailAddrEnc?exists> INCHARGE_DETAIL_ADDR_ENC = SCC_CRYPTO.ENC_FUN(:inchargeDetailAddrEnc), </#if>
<#if inchargeExpl?exists> INCHARGE_EXPL = :inchargeExpl, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  CUSTCD = :custcd
AND    MGMT_NUM = :mgmtNum
		]]>
	</statement>

	<!-- 거래처 담당자 정보(을)를 삭제한다. -->
	<statement name="deleteSccCustIncharge" type="delete">
		/*+ com.hwfs.sc.scz.dao.CustMgmtDAO.updateSccCustIncharge */
		<![CDATA[
DELETE
FROM   SCC_CUST_INCHARGE
WHERE  CUSTCD = :custcd
AND    MGMT_NUM = :mgmtNum
		]]>
	</statement>

</hqml>
