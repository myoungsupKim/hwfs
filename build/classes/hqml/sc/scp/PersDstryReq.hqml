<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="sc.scp.persDstryReqDAO">
	<desc>개인정보 파기요청 HQML Query</desc>

	<!-- 개인정보 파기요청 목록을 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.sc.scp.dao.PersDstryReqDAO.selectList */
		<![CDATA[
		SELECT TO_CHAR(O.DSTRY_REQ_DATE,'yyyy-mm-dd') AS DSTRY_REQ_DATE,
		       A.USERID AS DSTRY_USERID,
		       O.SABUN AS DSTRY_USER,
		       SCC_CRYPTO.MASKAUTH_FUN (A.NM_KOR,12,:loginPersMask,:maskAuth) AS DSTRY_USER_NM,
		       A.USER_TYPE AS DSTRY_USER_TYPE,
		       Y.CC_NM AS DSTRY_USER_CC_NM,
		       O.DSTRY_REQ_USER,
		       SCC_CRYPTO.MASKAUTH_FUN ((SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = O.DSTRY_REQ_USER),12,:loginPersMask,:maskAuth) AS DSTRY_REQ_USER_NM,
		       O.DSTRY_REASON,
		       O.SIGN_INSTANCE_ID,
		       TO_CHAR(Z.DRAFT_DATE,'yyyy-mm-dd') AS DRAFT_DATE,
		       Z.DRAFT_USER,
		       CASE WHEN Z.DRAFT_USER IS NULL THEN ''
			        ELSE SCC_CRYPTO.MASKAUTH_FUN ((SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = Z.DRAFT_USER),12,:loginPersMask,:maskAuth)
			   END  AS DRAFT_USER_NM,
		       TO_CHAR(Z.APPROV_DATE,'yyyy-mm-dd') AS APPROV_DATE,
		       Z.APPROV_USER,
		       CASE WHEN Z.APPROV_USER IS NULL THEN ''
			        ELSE SCC_CRYPTO.MASKAUTH_FUN ((SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = Z.APPROV_USER),12,:loginPersMask,:maskAuth)
			   END  AS APPROV_USER_NM,
			   Z.SIGN_PROGRESS_STATUS
		FROM   SCC_PERS_INFO_DSTRY_REQ O,
			   SCC_USERINFO A,
			   ST_UPJANG X,
			   HLDC_SC_DEPT_V Y,
			   SCC_SIGN_INFO Z
		WHERE  1=1
		AND    O.DSTRY_REQ_DATE >= TO_DATE(:fromDate,'yyyymmdd')
		AND    O.DSTRY_REQ_DATE <  TO_DATE(:toDate, 'yyyymmdd') + 1
		AND    O.SABUN  = A.SABUN
		AND    X.UPJANG = A.UPJANG
    	AND    Y.CC_CD  = X.CC_CD
		AND    O.SIGN_INSTANCE_ID = Z.SIGN_INSTANCE_ID(+)
		<#if signStatus?has_content>
			<#if signStatus == 'NODRAFT'>
		AND    Z.SIGN_PROGRESS_STATUS IS NULL
			<#else>
		AND    Z.SIGN_PROGRESS_STATUS = :signStatus
			</#if>
		</#if>
		<#if userType?has_content>
		AND    A.USER_TYPE = :userType
		</#if>
		<#if ccCd?has_content>
		AND    Y.CC_CD = :ccCd
		</#if>
		ORDER BY O.DSTRY_REQ_DATE ASC
		]]>
	</statement>

	<!-- 개인정보 파기요청에 이미 등록된 건수를 조회한다. -->
	<statement name="selectAlreadyExistsCnt" type="select">
		/*+ com.hwfs.sc.scp.dao.PersDstryReqDAO.selectAlreadyExistsCnt */
		<![CDATA[
		SELECT COUNT(1) AS CNT
		FROM   SCC_PERS_INFO_DSTRY_REQ O,
			   SCC_SIGN_INFO Z
		--WHERE  DSTRY_REQ_DATE = TO_DATE(:dstryReqDate, 'yyyy-mm-dd')
		WHERE  1=1
		AND    O.SABUN = :dstryUser
		AND    O.SIGN_INSTANCE_ID = Z.SIGN_INSTANCE_ID(+)
		AND   (Z.SIGN_PROGRESS_STATUS IS NULL OR Z.SIGN_PROGRESS_STATUS IN ('DRAFT', 'APPROVE', 'COMPLETE'))
		]]>
	</statement>

	<!-- 개인정보 파기요청(을)를 등록한다. -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.sc.scp.dao.PersDstryReqDAO.insert */
		<![CDATA[
		INSERT INTO SCC_PERS_INFO_DSTRY_REQ
		(
		 DSTRY_REQ_DATE,
		 SABUN,
		 DSTRY_REQ_USER,
		 DSTRY_REASON,
		 SIGN_INSTANCE_ID,
		 LOG_PROC_YN,
		 CUSER,
		 CDATE
		) VALUES (
		 TO_DATE(:dstryReqDate, 'yyyymmdd'),
		 :dstryUser,
		<#if dstryReqUser?exists> :dstryReqUser, <#else> null, </#if>
		<#if dstryReason?exists> :dstryReason, <#else> null, </#if>
		 null,
		 null,
		 :loginSabun,
		 SYSDATE
		)
		]]>
	</statement>
	
	<!-- 개인정보 파기요청(을)를 수정한다. -->
	<statement name="update" type="update">
		/*+ com.hwfs.sc.scp.dao.PersDstryReqDAO.update */
		<![CDATA[
		UPDATE SCC_PERS_INFO_DSTRY_REQ SET
		<#if dstryReqUser?exists> DSTRY_REQ_USER = :dstryReqUser, </#if>
		<#if dstryReason?exists> DSTRY_REASON = :dstryReason, </#if>
		       UUSER = :loginSabun,
		       UDATE = SYSDATE
		WHERE  DSTRY_REQ_DATE = TO_DATE(:dstryReqDate, 'yyyy-mm-dd')
		AND    SABUN = :dstryUser
		]]>
	</statement>

	<!-- 개인정보 파기요청(을)를 삭제한다. -->
	<statement name="delete" type="delete">
		/*+ com.hwfs.sc.scp.dao.PersDstryReqDAO.delete */
		<![CDATA[
		DELETE
		FROM   SCC_PERS_INFO_DSTRY_REQ
		WHERE  DSTRY_REQ_DATE = TO_DATE (:dstryReqDate, 'yyyy-mm-dd')
		AND    SABUN = :dstryUser
		]]>
	</statement>

	<!-- 개인정보 파기요청 상신 목록을 조회한다. -->
	<statement name="selectGwDraftList" type="select">
		/*+ com.hwfs.sc.scp.dao.PersDstryReqDAO.selectGwDraftList */
		<![CDATA[
		SELECT TO_CHAR(O.DSTRY_REQ_DATE,'yyyy-mm-dd') AS DSTRY_REQ_DATE,
		       A.USERID AS DSTRY_USERID,
		       O.SABUN AS DSTRY_USER,
		       A.NM_KOR AS DSTRY_USER_NM,
		       A.USER_TYPE AS DSTRY_USER_TYPE,
		       Y.CC_NM AS DSTRY_USER_CC_NM,
		       O.DSTRY_REQ_USER,
		       (SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = O.DSTRY_REQ_USER) AS DSTRY_REQ_USER_NM,
		       O.DSTRY_REASON
		FROM   SCC_PERS_INFO_DSTRY_REQ O,
			   SCC_USERINFO A,
			   ST_UPJANG X,
			   HLDC_SC_DEPT_V Y
		WHERE  1=1
		AND    O.DSTRY_REQ_DATE = TO_DATE(:dstryReqDate,'yyyy-mm-dd')
		AND    O.SABUN  = :dstryUser
		AND    O.SABUN  = A.SABUN
		AND    X.UPJANG = A.UPJANG
    	AND    Y.CC_CD  = X.CC_CD
		]]>
	</statement>

	<!-- 전자결재정보를 Update한다. -->
	<statement name="updateSign" type="update">
		/*+ com.hwfs.sc.scp.dao.PersDstryReqDAO.updateSign */
		<![CDATA[
		UPDATE SCC_PERS_INFO_DSTRY_REQ
		SET
			   SIGN_INSTANCE_ID=:signInstanceId,
		<#if loginSabun?has_content >
		       UUSER = :loginSabun,
		</#if>
		       UDATE = SYSDATE
		WHERE  DSTRY_REQ_DATE = TO_DATE(:dstryReqDate, 'yyyy-mm-dd')
		AND    SABUN = :dstryUser
		]]>
	</statement>
	
	<!-- 개인정보파기요청이 결재승인이 난 건 중 개인정보파기이력에 Insert하지 않은 건을 조회한다. 개인정보파기이력에 Insert하기 위한 형태로 조회 -->
	<statement name="selectPersDstryReqApprovForLogIns" type="select">
		/*+ com.hwfs.sc.scp.dao.PersDstryReqDAO.selectPersDstryReqApprovForLogIns */
		<![CDATA[
		SELECT 
		       TO_CHAR(O.DSTRY_REQ_DATE,'yyyy-mm-dd') AS DSTRY_REQ_DATE,
		       O.SABUN,
		       Z.APPROV_USER,
		       TO_CHAR(Z.APPROV_DATE+(SELECT ENV_INFO_VALUE FROM SCC_PERS_INFO_MGMT_ENV WHERE ENV_INFO_ID='DSTRY_APPROV_PROC_DAY'),'yyyy-mm-dd') AS DSTRY_SCHD_DATE,
		       'PLANNED' AS DSTRY_STATUS,
		       'DESTROY_REQ' AS DSTRY_CLASS
		FROM   SCC_PERS_INFO_DSTRY_REQ O,
			   SCC_SIGN_INFO Z
		WHERE  1=1
	    AND   (O.LOG_PROC_YN IS NULL 
    	OR     O.LOG_PROC_YN <> 'Y')
		AND    O.SIGN_INSTANCE_ID = Z.SIGN_INSTANCE_ID
		AND    Z.SIGN_PROGRESS_STATUS = 'COMPLETE'
		]]>
	</statement>
	
	<!-- 파기이력처리여부 'Y'로 Update한다. -->
	<statement name="updateLogProcYn" type="update">
		/*+ com.hwfs.sc.scp.dao.PersDstryReqDAO.updateSign */
		<![CDATA[
		UPDATE SCC_PERS_INFO_DSTRY_REQ
		SET
			   LOG_PROC_YN='Y'
		WHERE  DSTRY_REQ_DATE = TO_DATE(:dstryReqDate, 'yyyy-mm-dd')
		AND    SABUN = :sabun
		]]>
	</statement>
	
</hqml>
