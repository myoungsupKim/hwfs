<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="sm.saa.riskArListDAO">
	<desc>부실채권 발생처 조회 HQML Query</desc>

	<!-- 부실채권 발생처 조회 목록을 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.sm.saa.dao.RiskArListDAO.selectList */
		<![CDATA[
		
		SELECT  MU_CD
      , MU_NM
      , TM_CD
      , TM_NM             AS TEAM_NM
      , UPJANG
      , UPJANGNM			AS UPJANG_NM
      , B.CUSTCD
      , B.CUSTNM			AS CUST_NM
      , AK_BOND_AMT
      , SCC_GET_ADDR_FUN('BASE', C.ADDR_KEY, :loginPersMask, :maskAuth) AS BASE_ADDR
      , SCC_GET_ADDR_FUN('DETAIL', C.ADDR_KEY, :loginPersMask, :maskAuth) AS DETAIL_ADDR
      , SCC_GET_ADDR_FUN('ZIP', C.ADDR_KEY, :loginPersMask, :maskAuth) AS ZIP_CODE
FROM
         (   SELECT  --'A' SAUP_TYPE,
                   V.MU_CD,
                   (SELECT MU_NM FROM HLDC_SC_MU WHERE MU_CD = V.MU_CD AND USE_YN = 'Y') MU_NM,
                   V.TM_CD,
                   (SELECT TM_NM FROM HLDC_SC_TM WHERE TM_CD = V.TM_CD AND USE_YN = 'Y') TM_NM,
                   V.UPJANG,
                   (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM,
                   V.CUSTCD,
                   (SELECT CUSTNM FROM HLDC_ST_CUST WHERE CUSTCD = V.CUSTCD) CUSTNM,
                   SUM(DECODE(V.DUE_GUBUN, '악성채권',   V.AMT - V.RCP_AMT, 0))             AK_BOND_AMT
                   --'1' PL_UP_CD,
                   --'0' BL_SHOW,
                   --3 LEVEL_NO,
                   --'+' BL_PLUS
              FROM (
            
                           SELECT C.MU_CD, C.TM_CD,
                                 V.UPJANG_CD UPJANG,
                                 V.CUST_CD CUSTCD,
                                 NVL(V.AR_AMT, 0) AMT,
                                 V.OCCUR_DATE BOND_DATE,
                                 (CASE WHEN :fromDay >  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                                       LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                                       ) THEN
                                            '악성채권'
                                       WHEN :fromDay <=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                                       LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                                       ) AND
                                            :fromDay > DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
                                                       LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                                       ) THEN
                                            '도래채권'
                                       WHEN :fromDay <=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
                                                       LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
                                                       ) THEN
                                            '미도래채권' END) DUE_GUBUN,
                                 NVL(D.RECEIVE_AMT, 0) RCP_AMT,
                                 (CASE WHEN D.OCCUR_DATE   BETWEEN SUBSTR(:fromDay  , 1, 6)||'01' AND SUBSTR('20150807'  , 1, 6)||'31' THEN
                                                  D.AR_AMT --(V.BILL_AMOUNT + V.BILL_VAT)
                                             ELSE
                                                  0
                                        END) CURR_TRX_AMT,
                                 (CASE WHEN D.OCCUR_DATE   BETWEEN SUBSTR(:fromDay  , 1, 6)||'01' AND SUBSTR('20150807'  , 1, 6)||'31' THEN
                                                  D.RECEIVE_AMT --(V.BILL_AMOUNT + V.BILL_VAT)
                                             ELSE
                                                  0
                                        END) CURR_RCP_AMT                      
                            FROM SLA_AR_MST V,
                                 SLA_AR_RECEIVE_DETAIL D,
                                 SCO_UPJANG_CUST  B,
                                 SCO_UPJANG_MST_V C
                          WHERE  V.AR_NUM = D.AR_NUM 
                          AND   (V.UPJANG_CD     = B.UPJANG)
                          AND   (V.CUST_CD     = B.CUSTCD)
                          AND   (V.UPJANG_CD     = C.UPJANG)
                          AND   (V.OCCUR_DATE   BETWEEN '19000101' AND :fromDay)
                  		   <#if muCd?has_content>
			              		 AND  C.MU_CD         = :muCd
			               </#if>
                          <#if tmCd?has_content>
			              		 AND  C.TM_CD         = :tmCd
			               </#if>
                          <#if upjangCd?has_content>
			              		 AND  V.UPJANG_CD         = :upjangCd
			               </#if>
                          <#if custCd?has_content>
			              		 AND  V.CUST_CD         = :custCd
			               </#if>
            UNION ALL
                      		SELECT C.MU_CD,C.TM_CD 
                      		 , A.UPJANG_CD UPJANG
                      		 , A.CUST_CD CUSTCD
                      		 , B.AR_AMT AMT
                      		 , A.OCCUR_DATE BOND_DATE
                      		 , DECODE(a.ACCT_CD,'11202010','미수금','11204014','미수금(신용카드)') DUE_GUBUN
                      		 , B.RECEIVE_AMT RCP_AMT
                      		 , 0 CURR_TRX_AMT
                               , 0 CURR_RCP_AMT
                      		 FROM SLA_AR_MST A
                      		,SLA_AR_RECEIVE_DETAIL B
                      		,SCO_UPJANG_CUST  B
                      		,SCO_UPJANG_MST_V C
                      		WHERE A.AR_NUM = B.AR_NUM
                      		AND  A.UPJANG_CD     = B.UPJANG
                      		AND  A.CUST_CD     = B.CUSTCD
                      		AND  A.UPJANG_CD     = C.UPJANG
                          AND A.ACCT_CD IN ('11202010' , '11204014')
                          <#if muCd?has_content>
			              		 AND  C.MU_CD         = :muCd
			               </#if>
                          <#if tmCd?has_content>
			              		 AND  C.TM_CD         = :tmCd
			               </#if>
                          <#if upjangCd?has_content>
			              		 AND  A.UPJANG_CD         = :upjangCd
			               </#if>
                          <#if custCd?has_content>
			              		 AND  A.CUST_CD         = :custCd
			               </#if>
                    ) V 
             GROUP BY V.MU_CD,
                     V.TM_CD,
                     V.UPJANG,
                     V.CUSTCD
) B
, ST_CUST C
WHERE B.CUSTCD = C.CUSTCD
AND B.AK_BOND_AMT != 0 
ORDER BY MU_CD,TM_CD,UPJANGNM,CUSTCD
		]]>
	</statement>
	
	<!-- 부실채권 발생처 조회 목록(식재)을 조회한다. -->
	<statement name="selectListFms" type="select">
		/*+ com.hwfs.sm.saa.dao.RiskArListDAO.selectListFms */
		<![CDATA[
		
		--------------- 식재 ------------------

SELECT A.MAIN_UPJANG, A.MAIN_UPJANGNM AS UPJANG_NM, A.UPJANG, A.UPJANGNM AS CUST_NM, A.BU_BOND_AMT
		, T.ADDR_KEY
        , SCC_GET_ADDR_FUN('BASE', T.ADDR_KEY, :loginPersMask, :maskAuth) AS BASE_ADDR
      , SCC_GET_ADDR_FUN('DETAIL', T.ADDR_KEY, :loginPersMask, '0') AS DETAIL_ADDR
      , SCC_GET_ADDR_FUN('ZIP', T.ADDR_KEY, :loginPersMask, :maskAuth) AS ZIP_CODE
 FROM
(
      SELECT /*+ LEADING(B V V1) USE_HASH(V) USE_HASH(V1) */ 
             'B' SAUP_TYPE,
             B.MAIN_UPJANG,
             (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = B.MAIN_UPJANG) MAIN_UPJANGNM,
             V.UPJANG,
             (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM,
             0 CUSTCD,
             '' CUSTNM,       
             (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'MA0015' AND CODE = (SELECT PAY_GUBUN_CD FROM SCO_UPJANG_CUST WHERE UPJANG = V.UPJANG AND CUSTCD = V.CUSTCD))||
             (SELECT PAY_DATE FROM SCO_UPJANG_CUST WHERE UPJANG = V.UPJANG AND CUSTCD = V.CUSTCD)||'일' PAY_GUBUN_CDNM,
             SUM(V.CURR_MACHUL)                                         CURR_TRX_AMT,
             NVL(MAX(V2.AMOUNT),0) CURR_RCP_AMT,
             SUM(DECODE(V.DUE_GUBUN, '미도래채권', V.AMT - V.RCP_AMT, 0))             MI_BOND_AMT,
             SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - V.RCP_AMT, 0))             DO_BOND_AMT,
             SUM(DECODE(V.DUE_GUBUN, '부실채권',   V.AMT - V.RCP_AMT, 0))             BU_BOND_AMT,
             SUM(DECODE(V.DUE_GUBUN, '악성채권',   V.AMT - V.RCP_AMT, 0))             AK_BOND_AMT,
             B.MAIN_UPJANG||'-'||V.UPJANG||'-'||V.CUSTCD PL_CD,
             '1' PL_UP_CD,
             '1' BL_SHOW,
             3 LEVEL_NO,
             '+' BL_PLUS
      FROM (
            SELECT UPJANG,
                   SUM(AMT) AMT,
                   BOND_DATE,
                   DUE_GUBUN,
                   SUM(RCP_AMT) RCP_AMT,
                   CUSTCD,
                   SUM(CURR_MACHUL) CURR_MACHUL
              FROM (
                    SELECT /*+ USE_HASH(V1) */ 
                           B.UPJANG UPJANG,
                           V.AR_AMT AMT,
                           --(V.BILL_AMOUNT + V.BILL_VAT) AMT,
                           V.OCCUR_DATE                  BOND_DATE,
                           (CASE WHEN :fromDay >  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),3),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+3), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+3), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                 ) THEN
                                      '악성채권'
                                 WHEN  :fromDay >  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                 ) AND
                                       :fromDay <=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),3),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+3), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+3), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                 ) THEN
                                      '부실채권'
                                 WHEN :fromDay  <=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+1), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                 ) AND
                                       :fromDay > DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                 ) THEN
                                      '도래채권'
                                 WHEN  :fromDay <=  DECODE(C.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')||
                                                 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0'))
                                                 ) THEN
                                      '미도래채권' END) DUE_GUBUN,
                           NVL(D.RECEIVE_AMT,0) RCP_AMT,
                           C.CUSTCD,
                           (CASE WHEN V.OCCUR_DATE   BETWEEN SUBSTR('20150807'  , 1, 6)||'01' AND SUBSTR('20150807'  , 1, 6)||'31' THEN
                                      V.AR_AMT --(V.BILL_AMOUNT + V.BILL_VAT)
                                 ELSE
                                      0
                            END) CURR_MACHUL
                      FROM SLA_AR_MST V,
                           FMS_UPJANG B,
                           SCO_UPJANG_CUST C,
                           SLA_AR_RECEIVE_DETAIL D
                    WHERE  V.AR_NUM = D.AR_NUM 
                    AND    V.RECD_STATUS  = 'L'
      		      AND    V.SYS_CLASS = '13'
                    AND    (V.UPJANG_CD                                            = B.UPJANG)
                    AND    (B.UPJANG                                               = C.UPJANG)
                    AND    (V.OCCUR_DATE  BETWEEN '19000101' AND :fromDay)
                    <#if tmCd?has_content>
                    	AND  (EXISTS (SELECT 'X' FROM SCO_UPJANG_MST_V WHERE SCO_UPJANG_MST_V.UPJANG = B.UPJANG AND SCO_UPJANG_MST_V.TM_CD = :tmCd))
                    	AND C.CUSTCD IN (
			                    SELECT /*+ UNNEST HASH_SJ */ MIN(CUSTCD) CUSTCD
			                    FROM SCO_UPJANG_CUST V
			                    WHERE C.UPJANG = V.UPJANG  )
			         </#if>
                    <#if mainUpjangCd?has_content>
                    		AND    (EXISTS (SELECT 'X' FROM FMS_UPJANG WHERE UPJANG = B.MAIN_UPJANG AND MAIN_UPJANG = UPJANG AND MAIN_UPJANG || UPJANGNM_DISP LIKE '%' || :mainUpjangNm || '%' ))
			         </#if>
                    <#if upjangCd?has_content>
                    		AND (B.UPJANG || B.UPJANGNM_DISP LIKE '%' || :upjangNm || '%' )
			         </#if>
                    --AND    (V.CANCEL_FLAG    = 'N')
                    --AND    (V.DCGUBUN        = '1')
                    --AND    (V.ACCTCD         = '1110411')    
                  --  AND   C.CUSTCD = '110820'       
                                   
                    ) 
                    GROUP BY UPJANG,BOND_DATE,DUE_GUBUN,CUSTCD              
                   ) V,
                    FMS_UPJANG B,
                   ( SELECT /*+ NO_MERGE */ DECODE(A.HEAD_CREDIT_YN, 'Y', A.MAIN_UPJANG, A.UPJANG) UPJANG, SUM(D.RECEIVE_AMT) AMOUNT
                      FROM FMS_UPJANG A,
                           SLA_AR_RECEIVE_DETAIL D,
                           SLA_AR_MST M  
                     WHERE A.UPJANG = M.UPJANG_CD
                       AND M.RECD_STATUS  = 'L'
            		   AND M.SYS_CLASS = '13'
                       AND M.AR_NUM = D.AR_NUM
                       AND D.RECEIVE_DATE BETWEEN SUBSTR( :fromDay , 1, 6)||'01' AND SUBSTR( :fromDay , 1, 6)||'31'
                       --AND B.DCGUBUN = '2'
                       --AND B.ACCTCD = '1110411'
                     GROUP BY DECODE(A.HEAD_CREDIT_YN, 'Y', A.MAIN_UPJANG, A.UPJANG)
                   ) V2
            WHERE (V.UPJANG = B.UPJANG)
            AND V2.UPJANG(+) = V.UPJANG
            GROUP BY B.MAIN_UPJANG, V.UPJANG, V.CUSTCD
) A ,
(
  SELECT HSU.UPJANG, CUST_V.POST_NO, CUST_V.ADDR AS CUST_ADDR -- 소재지 주소 1
         ,SCC_CRYPTO.MASKAUTH_FUN(CUST_V.DETAIL_ADDR_ENC, 10,:loginPersMask, '0') CUST_ADDR_DETAIL -- 소재지 주소 2
         , CUST_V.ADDR_KEY
    FROM HLDC_ST_UPJANG HSU, 
         HLDC_ST_CUST   CUST_V  
   WHERE HSU.CUSTCD = CUST_V.CUSTCD(+) 
) T
WHERE A.UPJANG = T.UPJANG
 AND    A.BU_BOND_AMT != 0
 ORDER BY A.MAIN_UPJANG, A.UPJANG, A.CUSTCD    

		]]>
	</statement>
	
</hqml>
