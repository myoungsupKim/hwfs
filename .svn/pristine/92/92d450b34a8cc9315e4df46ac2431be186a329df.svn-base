<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="sc.scu.userMngtDAO">
	<desc>사용자 정보 HQML Query</desc>

	<!-- 선택된 사원의 등록여부를 확인한다. -->
	<statement name="selectExistsUser" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectExistsUser */
		<![CDATA[
SELECT A.CNT,
       A.SABUN,
       A.USERID,
       A.NM_KOR,
       A.USE_YN,
       A.USER_TYPE,
       A.USER_GROUP,
       A.UPJANG,
       A.UPJANGNM,
       A.PWD_CHG_DATE,
       A.JOIN_DATE,
       A.SDATE,
       A.EDATE,
       A.PERS_INFO_AGREE_YN,
       A.PERS_INFO_PROC_GRADE,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 1) AS TEL_NO1,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 2) AS TEL_NO2,
       SCC_TELNO_SPLIT_FUN(A.TEL_NO, 3) AS TEL_NO3,
       SCC_TELNO_SPLIT_FUN(A.HP_NO, 1) AS HP_NO1,
       SCC_TELNO_SPLIT_FUN(A.HP_NO, 2) AS HP_NO2,
       SCC_TELNO_SPLIT_FUN(A.HP_NO, 3) AS HP_NO3,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 1) AS FAX_NO1,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 2) AS FAX_NO2,
       SCC_TELNO_SPLIT_FUN(A.FAX_NO, 3) AS FAX_NO3,
       A.EMAIL,
       A.CTI_USE_YN,
       A.CTI_USER_ID,
       A.MAIN_TYPE,
       A.SYSTEM_MST,
       A.BOARD_MST,
       A.TEMP_SABUN_MANAGE_SABUN,
       A.MANAGE_ALLOW_IP,
       A.ATTR06,
       A.SIMPLE_PO_YN,
       A.ACCT_STATUS,
       A.ACCT_LK_DD,
       A.REMARK,
       A.PWD_ERR_CNT,
       A.EMAIL_YN,
       A.CUSTCD,
       A.OTCUSTNM,
       A.CUSTNM,
       A.SYS_MENU_YN,
       A.SMS_YN,
       A.OTCUSTCD,
       A.PERS_INFO_PROC_LEVEL,
       A.PERSON_CERN_NUM
FROM   (SELECT NVL(B.CNT, 0) AS CNT,
               A.SABUN,
               A.SABUN AS USERID,
               A.NM_KOR,
               'Y' AS USE_YN,
               '내부' AS USER_TYPE,
               CASE C.BU_CD WHEN '1000' THEN '리조트' WHEN '2000' THEN 'FC' ELSE NULL END AS USER_GROUP,
               C.UPJANG,
               C.UPJANGNM,
               '1900-01-01' AS PWD_CHG_DATE,
               TO_CHAR(SYSDATE, 'YYYYMMDD') AS JOIN_DATE,
               TO_CHAR(SYSDATE, 'YYYYMMDD') AS SDATE,
               '21001231' AS EDATE,
               'N' AS PERS_INFO_AGREE_YN,
               'C' AS PERS_INFO_PROC_GRADE,
               CASE WHEN LENGTH(SCC_CRYPTO.DEC_FUN(OFFICE_TEL_NUM)) > 8 THEN SCC_CRYPTO.DEC_FUN(OFFICE_TEL_NUM) ELSE NULL END AS TEL_NO,
               SCC_CRYPTO.DEC_FUN(HP_NUM) AS HP_NO,
               SCC_CRYPTO.DEC_FUN(FAX_NUM) AS FAX_NO,
               SCC_CRYPTO.DEC_FUN(COMM_EMAIL_ENC) AS EMAIL,
               'N' AS CTI_USE_YN,
               NULL AS CTI_USER_ID,
               'INTRO_01' AS MAIN_TYPE,
               NULL AS SYSTEM_MST,
               '일반' AS BOARD_MST,
               NULL AS TEMP_SABUN_MANAGE_SABUN,
               NULL AS MANAGE_ALLOW_IP,
               'N' AS ATTR06,
               'N' AS SIMPLE_PO_YN,
               'NORMAL' AS ACCT_STATUS,
               NULL AS ACCT_LK_DD,
               NULL AS REMARK,
               0 AS PWD_ERR_CNT,
               'N' AS EMAIL_YN,
               NULL AS CUSTCD,
               NULL AS OTCUSTNM,
               NULL AS CUSTNM,
               NULL AS SYS_MENU_YN,
               'N' AS SMS_YN,
               NULL AS OTCUSTCD,
               NULL AS PERS_INFO_PROC_LEVEL,
               NULL AS PERSON_CERN_NUM
        FROM   HR_PERSONAL A,
               (SELECT SABUN, COUNT(*) CNT
                FROM   SCC_USERINFO
                WHERE  SABUN = :sabun
                GROUP BY SABUN) B,
               (SELECT AA.BU_CD,
                       AA.CC_CD,
                       BB.UPJANG,
                       BB.UPJANGNM
                FROM   HLDC_SC_DEPT_V AA,
                       ST_UPJANG BB
                WHERE  BB.CC_CD = AA.CC_CD) C
        WHERE  B.SABUN(+) = A.SABUN
        AND    C.CC_CD(+) = A.CC_CD
        AND    A.SABUN = :sabun
        AND    A.GB_JAEJIK = 'AA') A
		]]>
	</statement>


	<!-- 사용자권한레벨 목록을 조회한다. -->
	<statement name="selectAuthLevelList" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectAuthLevelList */
		<![CDATA[
SELECT :sabun AS SABUN,
       DECODE(NVL(B.AUTHLEVEL, 'NVL'), 'NVL', '0', '1') AS CHK,
       DECODE(NVL(B.AUTHLEVEL, 'NVL'), 'NVL', '0', '1') AS OLD_CHK,
       A.CODE AS AUTHLEVEL,
       A.CODE_NAME
FROM   SCC_COMMON_CODE A,
       (SELECT SABUN,
               AUTHLEVEL
        FROM   SCC_USER_AUTHLEVEL
        WHERE  SABUN = :sabun) B
WHERE  B.AUTHLEVEL(+) = A.CODE
AND    A.GROUP_CODE = 'SC0003'
<#if userType?has_content>
AND    (A.SET1 = :userType OR A.SET2 = :userType)
</#if>
AND    A.USE_YN = 'Y'
ORDER BY A.SORT_SEQ
		]]>
	</statement>

	<!-- 사용자 정보을 조회한다. -->
	<statement name="select" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.select */
		<![CDATA[
SELECT A.SABUN,
       A.USERID,
       A.USERID AS OLD_USER_ID,
       A.NM_KOR,
       A.USER_GROUP,
       A.USER_TYPE,
       A.UPJANG,
       (SELECT CC_CD FROM ST_UPJANG WHERE UPJANG = A.UPJANG) AS CC_CD,
       A.UPJANGNM,
       A.CUSTCD,
       A.CUSTNM,
       A.OTCUSTCD,
       A.OTCUSTNM,
       A.SMS_YN,
       A.EMAIL_YN,
       A.SDATE,
       A.EDATE,
       A.JOIN_DATE,
       A.PWD_CHG_DATE,
       A.REMARK,
       A.USE_YN,
       A.ATTR01,
       A.ATTR02,
       A.ATTR03,
       A.ATTR04,
       A.ATTR05,
       A.ATTR06,
       A.ATTR07,
       A.ATTR08,
       A.ATTR09,
       A.ATTR10,
       A.SYSTEM_MST,
       A.BOARD_MST,
       A.SIMPLE_PO_YN,
       SCC_TELNO_SPLIT_FUN(TEL_NO, 1) AS TEL_NO1,
       SCC_TELNO_SPLIT_FUN(TEL_NO, 2) AS TEL_NO2,
       SCC_TELNO_SPLIT_FUN(TEL_NO, 3) AS TEL_NO3,
       SCC_TELNO_SPLIT_FUN(HP_NO, 1) AS HP_NO1,
       SCC_TELNO_SPLIT_FUN(HP_NO, 2) AS HP_NO2,
       SCC_TELNO_SPLIT_FUN(HP_NO, 3) AS HP_NO3,
       SCC_TELNO_SPLIT_FUN(FAX_NO, 1) AS FAX_NO1,
       SCC_TELNO_SPLIT_FUN(FAX_NO, 2) AS FAX_NO2,
       SCC_TELNO_SPLIT_FUN(FAX_NO, 3) AS FAX_NO3,
       EMAIL,
       A.MANAGE_ALLOW_IP,
       A.TEMP_SABUN_MANAGE_SABUN,
       (SELECT NM_KOR FROM HR_PERSONAL WHERE SABUN = A.TEMP_SABUN_MANAGE_SABUN) AS TEMP_SABUN_MANAGE_NM_KOR,
       A.PERS_INFO_PROC_LEVEL,
       A.PERS_INFO_PROC_GRADE,
       A.PWD_ERR_CNT,
       A.ACCT_STATUS,
       A.ACCT_LK_DD,
       A.ACCT_LK_REASON_NM,
       A.SYS_MENU_YN,
       A.MAIN_TYPE,
       A.CTI_USE_YN,
       A.CTI_USER_ID,
       A.PERSON_CERN_NUM,
       A.PERS_INFO_AGREE_YN,
       A.AUTHLEVEL,
       NVL(A.Y1, 'N') AS Y1,
       NVL(A.Y2, 'N') AS Y2,
       NVL(A.N1, 'N') AS N1,
       NVL(A.N2, 'N') AS N2,
       (SELECT X.CC_CD || ' ( ' || Y.CC_NM || ' )' FROM HR_PERSONAL X, SCC_CC Y WHERE X.SABUN = A.SABUN AND X.CC_CD = Y.CC_CD) AS CC_HR,
       (SELECT X.CC_CD || ' ( ' || Y.CC_NM || ' )' FROM ST_UPJANG X, SCC_CC Y WHERE X.UPJANG = A.UPJANG AND X.CC_CD = Y.CC_CD) AS CC_UPJANG,
       ( SELECT DECODE(UPJANG, MAIN_UPJANG, 'Y', 'N') FROM FMS_UPJANG WHERE UPJANG = A.UPJANG ) AS MAIN_YN  
FROM   (SELECT A.SABUN,
               A.USERID,
               SCC_CRYPTO.MASKAUTH_FUN(A.NM_KOR, 12, :loginPersMask, :maskAuth) AS NM_KOR,
               A.USER_GROUP,
               A.USER_TYPE,
               A.UPJANG,
               (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.UPJANG) AS UPJANGNM,
               A.CUSTCD,
               (SELECT CUSTNM FROM ST_CUST WHERE CUSTCD = A.CUSTCD) AS CUSTNM,
               A.OTCUSTCD,
               (SELECT OTCUSTNM FROM FMP_OTHER_CUST WHERE OTCUSTCD = A.OTCUSTCD) AS OTCUSTNM,
               A.SMS_YN,
               A.EMAIL_YN,
               A.SDATE,
               A.EDATE,
               A.JOIN_DATE,
               TO_CHAR(TO_DATE(A.PWD_CHG_DATE), 'YYYY-MM-DD') AS PWD_CHG_DATE,
               A.REMARK,
               A.USE_YN,
               A.ATTR01,
               A.ATTR02,
               A.ATTR03,
               A.ATTR04,
               A.ATTR05,
               LTRIM(RTRIM(A.ATTR06)) AS ATTR06,
               A.ATTR07,
               A.ATTR08,
               A.ATTR09,
               A.ATTR10,
               A.SYSTEM_MST,
               A.BOARD_MST,
               A.SIMPLE_PO_YN,
               SCC_CRYPTO.MASKAUTH_FUN(A.TEL_NO_ENC, 9, :loginPersMask, :maskAuth) AS TEL_NO,
               SCC_CRYPTO.MASKAUTH_FUN(A.HP_NO_ENC, 8, :loginPersMask, :maskAuth) AS HP_NO,
               SCC_CRYPTO.MASKAUTH_FUN(A.FAX_NO_ENC, 9, :loginPersMask, :maskAuth) AS FAX_NO,
               SCC_CRYPTO.MASKAUTH_FUN(A.EMAIL_ENC, 7, :loginPersMask, :maskAuth) AS EMAIL,
               A.MANAGE_ALLOW_IP,
               A.TEMP_SABUN_MANAGE_SABUN,
               A.PERS_INFO_PROC_LEVEL,
               A.PERS_INFO_PROC_GRADE,
               A.PWD_ERR_CNT,
               A.ACCT_STATUS,
               TO_CHAR(A.ACCT_LK_DD, 'YYYY-MM-DD HH24:MI:SS') AS ACCT_LK_DD,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'ACCT_LK_REASON_CD' AND CODE = A.ACCT_LK_REASON_CD) AS ACCT_LK_REASON_NM,
               A.SYS_MENU_YN,
               A.MAIN_TYPE,
               A.CTI_USE_YN,
               A.CTI_USER_ID,
               A.PERSON_CERN_NUM,
               A.PERS_INFO_AGREE_YN,
               (SELECT CC_CD FROM ST_UPJANG WHERE UPJANG = A.UPJANG) AS CC_CD,
               B.AUTHLEVEL,
               (SELECT ESST_ARTICLE_AGREE_YN FROM SCC_PERS_INFO_AGREE WHERE SABUN = A.SABUN) AS Y1,
               (SELECT CHOICE_ARTICLE_AGREE_YN FROM SCC_PERS_INFO_AGREE WHERE SABUN = A.SABUN) AS N1,
               (SELECT ESST_ARTICLE_AGREE_YN FROM SCC_PERS_INFO_AGREE WHERE SABUN = A.SABUN) AS Y2,
               (SELECT CHOICE_ARTICLE_AGREE_YN FROM SCC_PERS_INFO_AGREE WHERE SABUN = A.SABUN) AS N2
        FROM   SCC_USERINFO A,
               (SELECT SABUN, MAX(AUTHLEVEL) AS AUTHLEVEL FROM SCC_USER_AUTHLEVEL GROUP BY SABUN) B
        WHERE  B.SABUN(+) = A.SABUN
        AND    A.SABUN = :sabun) A
		]]>
	</statement>

	<!-- 사용자 정보(을)를 등록한다. -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.insert */
		<![CDATA[
INSERT INTO SCC_USERINFO
(
 SABUN,
 USERID,
 PASSWORD,
 NM_KOR,
 USER_GROUP,
 USER_TYPE,
 UPJANG,
 CUSTCD,
 OTCUSTCD,
 SMS_YN,
 EMAIL_YN,
 LICEN_POPC_DATE,
 SDATE,
 EDATE,
 JOIN_DATE,
 PWD_CHG_DATE,
 REMARK,
 USE_YN,
 ATTR01,
 ATTR02,
 ATTR03,
 ATTR04,
 ATTR05,
 ATTR06,
 ATTR07,
 ATTR08,
 ATTR09,
 ATTR10,
 SYSTEM_MST,
 BOARD_MST,
 SIMPLE_PO_YN,
 TEL_NO_ENC,
 HP_NO_ENC,
 FAX_NO_ENC,
 EMAIL_ENC,
 MANAGE_ALLOW_IP,
 TEMP_SABUN_MANAGE_SABUN,
 PERS_INFO_PROC_LEVEL,
 PERS_INFO_PROC_GRADE,
 PWD_ERR_CNT,
 ACCT_STATUS,
 ACCT_LK_DD,
 ACCT_LK_REASON_CD,
 SYS_MENU_YN,
 MAIN_TYPE,
 CTI_USE_YN,
 CTI_USER_ID,
 PERSON_CERN_NUM,
 CUSER,
 CDATE,
 UUSER,
 UDATE,
 PERS_INFO_AGREE_YN
) VALUES (
 :sabun,
 :userid,
 SCC_CRYPTO.ONEWAY_ENC_FUN(:password),
<#if nmKor?exists> :nmKor, <#else> null, </#if>
<#if userGroup?exists> :userGroup, <#else> null, </#if>
<#if userType?exists> :userType, <#else> null, </#if>
<#if upjang?exists> :upjang, <#else> null, </#if>
<#if custcd?exists> :custcd, <#else> null, </#if>
<#if otcustcd?exists> :otcustcd, <#else> null, </#if>
<#if smsYn?exists> :smsYn, <#else> null, </#if>
<#if emailYn?exists> :emailYn, <#else> null, </#if>
<#if licenPopcDate?exists> :licenPopcDate, <#else> null, </#if>
<#if sdate?exists> :sdate, <#else> null, </#if>
<#if edate?exists> :edate, <#else> null, </#if>
<#if joinDate?exists> :joinDate, <#else> null, </#if>
 '19000101',
<#if remark?exists> :remark, <#else> null, </#if>
<#if useYn?exists> :useYn, <#else> null, </#if>
<#if attr01?exists> :attr01, <#else> null, </#if>
<#if attr02?exists> :attr02, <#else> null, </#if>
<#if attr03?exists> :attr03, <#else> null, </#if>
<#if attr04?exists> :attr04, <#else> null, </#if>
<#if attr05?exists> :attr05, <#else> null, </#if>
<#if attr06?exists> :attr06, <#else> null, </#if>
<#if attr07?exists> :attr07, <#else> null, </#if>
<#if attr08?exists> :attr08, <#else> null, </#if>
<#if attr09?exists> :attr09, <#else> null, </#if>
<#if attr10?exists> :attr10, <#else> null, </#if>
<#if systemMst?exists> :systemMst, <#else> null, </#if>
<#if boardMst?exists> :boardMst, <#else> null, </#if>
<#if simplePoYn?exists> :simplePoYn, <#else> null, </#if>
<#if telNo1?exists || telNo2?exists || telNo3?exists> SCC_CRYPTO.ENC_FUN(:telNo1||:telNo2||:telNo3), <#else> null, </#if>
<#if hpNo1?exists || hpNo2?exists || hpNo3?exists> SCC_CRYPTO.ENC_FUN(:hpNo1||:hpNo2||:hpNo3), <#else> null, </#if>
<#if faxNo1?exists || faxNo2?exists || faxNo3?exists> SCC_CRYPTO.ENC_FUN(:faxNo1||:faxNo2||:faxNo3), <#else> null, </#if>
<#if email?exists> SCC_CRYPTO.ENC_FUN(:email), <#else> null, </#if>
<#if manageAllowIp?exists> :manageAllowIp, <#else> null, </#if>
<#if tempSabunManageSabun?exists> :tempSabunManageSabun, <#else> null, </#if>
<#if persInfoProcLevel?exists> :persInfoProcLevel, <#else> null, </#if>
<#if persInfoProcGrade?exists> :persInfoProcGrade, <#else> null, </#if>
<#if pwdErrCnt?exists> :pwdErrCnt, <#else> null, </#if>
<#if acctStatus?exists> :acctStatus, <#else> null, </#if>
<#if acctLkDd?exists> TO_DATE(:acctLkDd, 'YYYY-MM-DD HH24:MI:SS'), <#else> null, </#if>
<#if acctLkReasonCd?exists> :acctLkReasonCd, <#else> null, </#if>
<#if sysMenuYn?exists> :sysMenuYn, <#else> null, </#if>
<#if mainType?exists> :mainType, <#else> null, </#if>
<#if ctiUseYn?exists> :ctiUseYn, <#else> null, </#if>
<#if ctiUserId?exists> :ctiUserId, <#else> null, </#if>
<#if personCernNum?exists> :personCernNum, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE,
<#if persInfoAgreeYn?exists> :persInfoAgreeYn <#else> null </#if>
)
		]]>
	</statement>

	<!-- 사용자 정보(을)를 수정한다. -->
	<statement name="update" type="update">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.update */
		<![CDATA[
UPDATE SCC_USERINFO SET
       USERID = :userid,
<#if nmKor?exists> NM_KOR = :nmKor, </#if>
<#if userGroup?exists> USER_GROUP = :userGroup, </#if>
<#if userType?exists> USER_TYPE = :userType, </#if>
<#if upjang?exists> UPJANG = :upjang, </#if>
<#if custcd?exists> CUSTCD = :custcd, </#if>
<#if otcustcd?exists> OTCUSTCD = :otcustcd, </#if>
<#if smsYn?exists> SMS_YN = :smsYn, </#if>
<#if emailYn?exists> EMAIL_YN = :emailYn, </#if>
<#if licenPopcDate?exists> LICEN_POPC_DATE = :licenPopcDate, </#if>
<#if sdate?exists> SDATE = :sdate, </#if>
<#if edate?exists> EDATE = :edate, </#if>
<#if joinDate?exists> JOIN_DATE = :joinDate, </#if>
<#if remark?exists> REMARK = :remark, </#if>
<#if useYn?exists> USE_YN = :useYn, </#if>
<#if attr01?exists> ATTR01 = :attr01, </#if>
<#if attr02?exists> ATTR02 = :attr02, </#if>
<#if attr03?exists> ATTR03 = :attr03, </#if>
<#if attr04?exists> ATTR04 = :attr04, </#if>
<#if attr05?exists> ATTR05 = :attr05, </#if>
<#if attr06?exists> ATTR06 = :attr06, </#if>
<#if attr07?exists> ATTR07 = :attr07, </#if>
<#if attr08?exists> ATTR08 = :attr08, </#if>
<#if attr09?exists> ATTR09 = :attr09, </#if>
<#if attr10?exists> ATTR10 = :attr10, </#if>
<#if systemMst?exists> SYSTEM_MST = :systemMst, </#if>
<#if boardMst?exists> BOARD_MST = :boardMst, </#if>
<#if simplePoYn?exists> SIMPLE_PO_YN = :simplePoYn, </#if>
<#if telNo1?exists || telNo2?exists || telNo3?exists> TEL_NO_ENC = SCC_CRYPTO.ENC_FUN(:telNo1||:telNo2||:telNo3), </#if>
<#if hpNo1?exists || hpNo2?exists || hpNo3?exists> HP_NO_ENC = SCC_CRYPTO.ENC_FUN(:hpNo1||:hpNo2||:hpNo3), </#if>
<#if faxNo1?exists || faxNo2?exists || faxNo3?exists> FAX_NO_ENC = SCC_CRYPTO.ENC_FUN(:faxNo1||:faxNo2||:faxNo3), </#if>
<#if email?exists> EMAIL_ENC = SCC_CRYPTO.ENC_FUN(:email), </#if>
<#if manageAllowIp?exists> MANAGE_ALLOW_IP = :manageAllowIp, </#if>
<#if tempSabunManageSabun?exists> TEMP_SABUN_MANAGE_SABUN = :tempSabunManageSabun, </#if>
<#if persInfoProcLevel?exists> PERS_INFO_PROC_LEVEL = :persInfoProcLevel, </#if>
<#if persInfoProcGrade?exists> PERS_INFO_PROC_GRADE = :persInfoProcGrade, </#if>
<#if pwdErrCnt?exists> PWD_ERR_CNT = :pwdErrCnt, </#if>
<#if acctStatus?exists> ACCT_STATUS = :acctStatus, </#if>
<#if acctLkDd?exists> ACCT_LK_DD = TO_DATE(:acctLkDd, 'YYYY-MM-DD HH24:MI:SS'), </#if>
<#if acctLkReasonCd?exists> ACCT_LK_REASON_CD = :acctLkReasonCd, </#if>
<#if sysMenuYn?exists> SYS_MENU_YN = :sysMenuYn, </#if>
<#if mainType?exists> MAIN_TYPE = :mainType, </#if>
<#if ctiUseYn?exists> CTI_USE_YN = :ctiUseYn, </#if>
<#if ctiUserId?exists> CTI_USER_ID = :ctiUserId, </#if>
<#if personCernNum?exists> PERSON_CERN_NUM = :personCernNum, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SABUN = :sabun
		]]>
	</statement>

	<!-- 사용자 정보(을)를 삭제한다. -->
	<statement name="delete" type="delete">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.delete */
		<![CDATA[
DELETE
FROM   SCC_USERINFO
WHERE  SABUN = :sabun
		]]>
	</statement>


	<!-- 사용자 권한레벨(을)를 등록한다. -->
	<statement name="insertAuthLevel" type="insert">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.insertAuthLevel */
		<![CDATA[
INSERT INTO SCC_USER_AUTHLEVEL
(
 SABUN,
 AUTHLEVEL,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :sabun,
 :authlevel,
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 사용자 권한레벨(을)를 삭제한다. -->
	<statement name="deleteAuthLevel" type="delete">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.deleteAuthLevel */
		<![CDATA[
DELETE
FROM   SCC_USER_AUTHLEVEL
WHERE  SABUN = :sabun
		]]>
	</statement>

	<!-- 미등록된 사용자권한을 조회한다. -->
	<statement name="selectUnUserAuth" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectUnUserAuth */
		<![CDATA[
SELECT A.SYS_TYPE,
       A.ROLE,
       A.ROLE_NAME,
       A.REMARK
FROM   SCC_ROLE A
WHERE  (A.SYS_TYPE, A.ROLE) NOT IN (SELECT SYS_TYPE,
                                           ROLE
                                    FROM   SCC_USER_ROLE
                                    WHERE  SYS_TYPE = :sysType
                                    AND    SABUN = :sabun)
AND    A.SYS_TYPE = :sysType
AND    NVL(A.ATTR01, ' ') LIKE CASE WHEN :sysType = 'FSMOBILE' THEN CASE WHEN :systemMst = 'ADMIN' THEN '%' ELSE :userType END ELSE '%' END
AND    A.USE_YN = 'Y'
AND    A.USE_CD = 'USER'
AND    A.ROLE_TYPE = '본부'
ORDER BY A.ROLE_NAME
		]]>
	</statement>

	<!-- 등록된 사용자권한을 조회한다. -->
	<statement name="selectUserAuth" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectUserAuth */
		<![CDATA[
SELECT A.SYS_TYPE,
       A.ROLE,
       A.ROLE_NAME,
       B.SABUN,
       B.REMARK,
       DECODE(B.USE_YN, 'Y', '1', '0') AS USE_YN,
       B.ATTR01,
       B.ATTR02,
       B.ATTR03,
       B.ATTR04,
       B.ATTR05,
       B.ATTR06,
       B.ATTR07,
       B.ATTR08,
       B.ATTR09,
       B.ATTR10
FROM   SCC_ROLE A,
       SCC_USER_ROLE B
WHERE  B.SYS_TYPE = A.SYS_TYPE
AND    B.ROLE = A.ROLE
AND    A.SYS_TYPE = :sysType
AND    A.USE_YN = 'Y'
AND    A.USE_CD = 'USER'
AND    B.SABUN = :sabun
ORDER BY A.ROLE_NAME
		]]>
	</statement>

	<!-- 사용자권한을 등록한다. -->
	<statement name="insertUserAuth" type="insert">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.insertUserAuth */
		<![CDATA[
INSERT INTO SCC_USER_ROLE
(
 SYS_TYPE,
 SABUN,
 ROLE,
 REMARK,
 USE_YN,
 ATTR01,
 ATTR02,
 ATTR03,
 ATTR04,
 ATTR05,
 ATTR06,
 ATTR07,
 ATTR08,
 ATTR09,
 ATTR10,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :sysType,
 :sabun,
 :role,
<#if remark?exists> :remark, <#else> null, </#if>
<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if attr01?exists> :attr01, <#else> null, </#if>
<#if attr02?exists> :attr02, <#else> null, </#if>
<#if attr03?exists> :attr03, <#else> null, </#if>
<#if attr04?exists> :attr04, <#else> null, </#if>
<#if attr05?exists> :attr05, <#else> null, </#if>
<#if attr06?exists> :attr06, <#else> null, </#if>
<#if attr07?exists> :attr07, <#else> null, </#if>
<#if attr08?exists> :attr08, <#else> null, </#if>
<#if attr09?exists> :attr09, <#else> null, </#if>
<#if attr10?exists> :attr10, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 사용자권한을 수정한다. -->
	<statement name="updateUserAuth" type="update">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.updateUserAuth */
		<![CDATA[
UPDATE SCC_USER_ROLE SET
<#if remark?exists> REMARK = :remark, </#if>
<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
<#if attr01?exists> ATTR01 = :attr01, </#if>
<#if attr02?exists> ATTR02 = :attr02, </#if>
<#if attr03?exists> ATTR03 = :attr03, </#if>
<#if attr04?exists> ATTR04 = :attr04, </#if>
<#if attr05?exists> ATTR05 = :attr05, </#if>
<#if attr06?exists> ATTR06 = :attr06, </#if>
<#if attr07?exists> ATTR07 = :attr07, </#if>
<#if attr08?exists> ATTR08 = :attr08, </#if>
<#if attr09?exists> ATTR09 = :attr09, </#if>
<#if attr10?exists> ATTR10 = :attr10, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SYS_TYPE = :sysType
AND    SABUN = :sabun
AND    ROLE = :role
		]]>
	</statement>

	<!-- 사용자권한을 삭제한다. -->
	<statement name="deleteUserAuth" type="delete">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.deleteUserAuth */
		<![CDATA[
DELETE
FROM   SCC_USER_ROLE
WHERE  SYS_TYPE = :sysType
AND    SABUN = :sabun
AND    ROLE = :role
		]]>
	</statement>

	<!-- 사용자 예외권한을 조회한다. -->
	<statement name="selectExptAuthList" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectExptAuthList */
		<![CDATA[
SELECT :sabun AS SABUN,
       CASE WHEN D.MENU_ID IS NULL THEN '' ELSE '0' END AS CHK,
       A.MENU_ID,
       NVL(D.MENU_ID, 0) AS U_MENU_ID,
       A.MENU_NAME,
       CASE WHEN NVL(C.SRC_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.SRC_YN, 'NVL'), 'NVL', B.SRC_YN, DECODE(D.USE_YN, 'Y', D.SRC_YN, B.SRC_YN)), 'Y', '1', '') END AS SRC_YN,
       CASE WHEN NVL(C.PRT_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.PRT_YN, 'NVL'), 'NVL', B.PRT_YN, DECODE(D.USE_YN, 'Y', D.PRT_YN, B.PRT_YN)), 'Y', '1', '') END AS PRT_YN,
       CASE WHEN NVL(C.EXL_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.EXL_YN, 'NVL'), 'NVL', B.EXL_YN, DECODE(D.USE_YN, 'Y', D.EXL_YN, B.EXL_YN)), 'Y', '1', '') END AS EXL_YN,
       CASE WHEN NVL(C.INS_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.INS_YN, 'NVL'), 'NVL', B.INS_YN, DECODE(D.USE_YN, 'Y', D.INS_YN, B.INS_YN)), 'Y', '1', '') END AS INS_YN,
       CASE WHEN NVL(C.DEL_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.DEL_YN, 'NVL'), 'NVL', B.DEL_YN, DECODE(D.USE_YN, 'Y', D.DEL_YN, B.DEL_YN)), 'Y', '1', '') END AS DEL_YN,
       CASE WHEN NVL(C.SAV_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.SAV_YN, 'NVL'), 'NVL', B.SAV_YN, DECODE(D.USE_YN, 'Y', D.SAV_YN, B.SAV_YN)), 'Y', '1', '') END AS SAV_YN,
       CASE WHEN NVL(C.SRC_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.SRC_YN, 'NVL'), 'NVL', B.SRC_YN, DECODE(D.USE_YN, 'Y', D.SRC_YN, B.SRC_YN)), 'Y', '1', '') END AS OLD_SRC_YN,
       CASE WHEN NVL(C.PRT_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.PRT_YN, 'NVL'), 'NVL', B.PRT_YN, DECODE(D.USE_YN, 'Y', D.PRT_YN, B.PRT_YN)), 'Y', '1', '') END AS OLD_PRT_YN,
       CASE WHEN NVL(C.EXL_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.EXL_YN, 'NVL'), 'NVL', B.EXL_YN, DECODE(D.USE_YN, 'Y', D.EXL_YN, B.EXL_YN)), 'Y', '1', '') END AS OLD_EXL_YN,
       CASE WHEN NVL(C.INS_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.INS_YN, 'NVL'), 'NVL', B.INS_YN, DECODE(D.USE_YN, 'Y', D.INS_YN, B.INS_YN)), 'Y', '1', '') END AS OLD_INS_YN,
       CASE WHEN NVL(C.DEL_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.DEL_YN, 'NVL'), 'NVL', B.DEL_YN, DECODE(D.USE_YN, 'Y', D.DEL_YN, B.DEL_YN)), 'Y', '1', '') END AS OLD_DEL_YN,
       CASE WHEN NVL(C.SAV_YN, 'N') = 'N' THEN '' ELSE DECODE(DECODE(NVL(D.SAV_YN, 'NVL'), 'NVL', B.SAV_YN, DECODE(D.USE_YN, 'Y', D.SAV_YN, B.SAV_YN)), 'Y', '1', '') END AS OLD_SAV_YN,
       D.REMARK,
       DECODE(D.USE_YN, 'Y', '1', '') AS USE_YN,
       DECODE(D.USE_YN, 'Y', '1', '') AS OLD_USE_YN,
       D.ATTR01,
       D.ATTR02,
       D.ATTR03,
       D.ATTR04,
       D.ATTR05,
       D.ATTR06,
       D.ATTR07,
       D.ATTR08,
       D.ATTR09,
       D.ATTR10,
       DECODE(C.SRC_YN, 'Y', '1', '') AS P_SRC_YN,
       DECODE(C.PRT_YN, 'Y', '1', '') AS P_PRT_YN,
       DECODE(C.EXL_YN, 'Y', '1', '') AS P_EXL_YN,
       DECODE(C.INS_YN, 'Y', '1', '') AS P_INS_YN,
       DECODE(C.DEL_YN, 'Y', '1', '') AS P_DEL_YN,
       DECODE(C.SAV_YN, 'Y', '1', '') AS P_SAV_YN,
       LEVEL-1 AS LEVELS,
       CONNECT_BY_ISLEAF AS IS_LEAF
FROM   (SELECT DISTINCT
               A.SYS_ID*999999 AS SYS_ID,
               A.MENU_ID,
               A.MENU_NAME,
               DECODE(NVL(A.PARENT_MENU_ID, ''), '', A.SYS_ID*999999, A.PARENT_MENU_ID) AS PARENT_MENU_ID,
               A.PRG_ID,
               A.SORT_SEQ
        FROM   SCC_MENU A
        WHERE  A.SYS_ID IN (SELECT SYS_ID FROM SCC_SYSTEM WHERE SYS_TYPE = :sysType)
        AND    A.USE_YN = 'Y'
<#if sysId?has_content>
        AND    A.SYS_ID = :sysId
</#if>
        START WITH A.MENU_ID IN (SELECT MENU_ID FROM SCC_USER_ROLE_V WHERE SYS_TYPE = :sysType AND SABUN = :sabun AND ROLE_YN = 'Y' AND ROLE_MENU_YN = 'Y' AND MENU_YN = 'Y')
        CONNECT BY PRIOR A.PARENT_MENU_ID = A.MENU_ID
        UNION ALL
        SELECT DISTINCT 
               A.SYS_ID*999999 AS SYS_ID,
               A.SYS_ID*999999 AS MENU_ID,
               A.SYS_NAME AS MENU_NAME,
               NULL AS PARENT_MENU_ID,
               NULL AS PRG_ID,
               A.SORT_SEQ
        FROM  SCC_SYSTEM A,
              SCC_USER_ROLE_V B
        WHERE B.SYS_ID = A.SYS_ID
        AND   A.SYS_TYPE = :sysType
        AND   A.USE_YN = 'Y'
        AND   B.SABUN = :sabun
        AND   B.SYS_TYPE = :sysType
        AND   B.ROLE_YN = 'Y'
        AND   B.ROLE_MENU_YN = 'Y' 
        AND   B.MENU_YN = 'Y'
<#if sysId?has_content>
        AND   A.SYS_ID = :sysId
</#if>
        ) A,
        (SELECT MENU_ID,
                SYS_ID*999999 AS SYS_ID,
                MAX(SRC_YN) AS SRC_YN,
                MAX(INS_YN) AS INS_YN,
                MAX(SAV_YN) AS SAV_YN,
                MAX(DEL_YN) AS DEL_YN,
                MAX(PRT_YN) AS PRT_YN,
                MAX(EXL_YN) AS EXL_YN
         FROM   SCC_USER_ROLE_V
         WHERE  SABUN = :sabun
         AND    SYS_TYPE = :sysType
         AND    ROLE_YN = 'Y'
         AND    ROLE_MENU_YN = 'Y'
         AND    MENU_YN = 'Y'
<#if sysId?has_content>
         AND    SYS_ID = :sysId
</#if>
         GROUP BY MENU_ID, SYS_ID) B,
         (SELECT PRG_ID,
                 SRC_YN,
                 INS_YN,
                 SAV_YN,
                 DEL_YN,
                 PRT_YN,
                 EXL_YN
          FROM   SCC_PRG
          WHERE  SYS_TYPE = :sysType
          AND    USE_YN = 'Y') C,
         (SELECT MENU_ID,
                 SRC_YN,
                 INS_YN,
                 SAV_YN,
                 DEL_YN,
                 PRT_YN,
                 EXL_YN,
                 USE_YN,
                 REMARK,
                 ATTR01,
                 ATTR02,
                 ATTR03,
                 ATTR04,
                 ATTR05,
                 ATTR06,
                 ATTR07,
                 ATTR08,
                 ATTR09,
                 ATTR10
          FROM   SCC_USER_MENU
          WHERE  SABUN = :sabun) D
WHERE   B.SYS_ID(+) = A.SYS_ID
AND     B.MENU_ID(+) = A.MENU_ID
AND     C.PRG_ID(+) = A.PRG_ID
AND     D.MENU_ID(+) = A.MENU_ID
START WITH A.PARENT_MENU_ID IS NULL
CONNECT BY PRIOR A.MENU_ID = A.PARENT_MENU_ID
ORDER SIBLINGS BY A.SORT_SEQ
		]]>
	</statement>

	<!-- 사용자 예외권한을 등록한다. -->
	<statement name="insertExptAuth" type="insert">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.insertExptAuth */
		<![CDATA[
INSERT INTO SCC_USER_MENU
(
 SABUN,
 MENU_ID,
 SRC_YN,
 PRT_YN,
 EXL_YN,
 INS_YN,
 DEL_YN,
 SAV_YN,
 REMARK,
 USE_YN,
 ATTR01,
 ATTR02,
 ATTR03,
 ATTR04,
 ATTR05,
 ATTR06,
 ATTR07,
 ATTR08,
 ATTR09,
 ATTR10,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :sabun,
 :menuId,
<#if srcYn?exists> DECODE(:srcYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if prtYn?exists> DECODE(:prtYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if exlYn?exists> DECODE(:exlYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if insYn?exists> DECODE(:insYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if delYn?exists> DECODE(:delYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if savYn?exists> DECODE(:savYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if remark?exists> :remark, <#else> null, </#if>
<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if attr01?exists> :attr01, <#else> null, </#if>
<#if attr02?exists> :attr02, <#else> null, </#if>
<#if attr03?exists> :attr03, <#else> null, </#if>
<#if attr04?exists> :attr04, <#else> null, </#if>
<#if attr05?exists> :attr05, <#else> null, </#if>
<#if attr06?exists> :attr06, <#else> null, </#if>
<#if attr07?exists> :attr07, <#else> null, </#if>
<#if attr08?exists> :attr08, <#else> null, </#if>
<#if attr09?exists> :attr09, <#else> null, </#if>
<#if attr10?exists> :attr10, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 사용자 예외권한을 수정한다. -->
	<statement name="updateExptAuth" type="update">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.updateExptAuth */
		<![CDATA[
UPDATE SCC_USER_MENU SET
<#if srcYn?exists> SRC_YN = DECODE(:srcYn, '1', 'Y', 'N'), </#if>
<#if prtYn?exists> PRT_YN = DECODE(:prtYn, '1', 'Y', 'N'), </#if>
<#if exlYn?exists> EXL_YN = DECODE(:exlYn, '1', 'Y', 'N'), </#if>
<#if insYn?exists> INS_YN = DECODE(:insYn, '1', 'Y', 'N'), </#if>
<#if delYn?exists> DEL_YN = DECODE(:delYn, '1', 'Y', 'N'), </#if>
<#if savYn?exists> SAV_YN = DECODE(:savYn, '1', 'Y', 'N'), </#if>
<#if remark?exists> REMARK = :remark, </#if>
<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
<#if attr01?exists> ATTR01 = :attr01, </#if>
<#if attr02?exists> ATTR02 = :attr02, </#if>
<#if attr03?exists> ATTR03 = :attr03, </#if>
<#if attr04?exists> ATTR04 = :attr04, </#if>
<#if attr05?exists> ATTR05 = :attr05, </#if>
<#if attr06?exists> ATTR06 = :attr06, </#if>
<#if attr07?exists> ATTR07 = :attr07, </#if>
<#if attr08?exists> ATTR08 = :attr08, </#if>
<#if attr09?exists> ATTR09 = :attr09, </#if>
<#if attr10?exists> ATTR10 = :attr10, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SABUN = :sabun
AND    MENU_ID = :menuId
		]]>
	</statement>

	<!-- 사용자 예외권한을 삭제한다. -->
	<statement name="deleteExptAuth" type="delete">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.deleteExptAuth */
		<![CDATA[
DELETE
FROM   SCC_USER_MENU
WHERE  SABUN = :sabun
AND    MENU_ID = :menuId
		]]>
	</statement>

	<!-- 미등록 게시판 권한을 조회한다. -->
	<statement name="selectUnBbsAuthList" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectUnBbsAuthList */
		<![CDATA[
SELECT DISTINCT
       A.BBSROLE,
       A.ROLE_NAME,
       A.REMARK
FROM   SCC_BBSROLE A,
       SCC_BBS B,
       SCC_BBSROLE_BBS C
WHERE  C.BBSROLE = A.BBSROLE
AND    B.BBS_ID = C.BBS_ID
AND    A.BBSROLE NOT IN (SELECT BBSROLE
                         FROM   SCC_USER_BBSROLE
                         WHERE  SABUN = :sabun)
AND    A.USE_YN = 'Y'
AND    B.BBS_TYPE = :bbsType
ORDER BY A.ROLE_NAME
		]]>
	</statement>

	<!-- 등록 게시판 권한을 조회한다. -->
	<statement name="selectBbsAuthList" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectBbsAuthList */
		<![CDATA[
SELECT DISTINCT
       B.BBSROLE,
       B.ROLE_NAME,
       A.SABUN,
       A.REMARK,
       DECODE(A.USE_YN, 'Y', '1', '0') AS USE_YN,
       A.ATTR01,
       A.ATTR02,
       A.ATTR03,
       A.ATTR04,
       A.ATTR05,
       A.ATTR06,
       A.ATTR07,
       A.ATTR08,
       A.ATTR09,
       A.ATTR10
FROM   SCC_USER_BBSROLE A,
       SCC_BBSROLE B,
       SCC_BBSROLE_BBS C,
       SCC_BBS D
WHERE  B.BBSROLE = A.BBSROLE
AND    B.BBSROLE=C.BBSROLE
AND    C.BBS_ID =D.BBS_ID
AND    A.SABUN = :sabun
AND    D.BBS_TYPE = :bbsType
AND    B.USE_YN = 'Y'
		]]>
	</statement>

	<!-- 게시판 권한을 등록한다. -->
	<statement name="insertBbsAuth" type="insert">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.insertBbsAuth */
		<![CDATA[
INSERT INTO SCC_USER_BBSROLE
(
 SABUN,
 BBSROLE,
 REMARK,
 USE_YN,
 ATTR01,
 ATTR02,
 ATTR03,
 ATTR04,
 ATTR05,
 ATTR06,
 ATTR07,
 ATTR08,
 ATTR09,
 ATTR10,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :sabun,
 :bbsrole,
<#if remark?exists> :remark, <#else> null, </#if>
<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if attr01?exists> :attr01, <#else> null, </#if>
<#if attr02?exists> :attr02, <#else> null, </#if>
<#if attr03?exists> :attr03, <#else> null, </#if>
<#if attr04?exists> :attr04, <#else> null, </#if>
<#if attr05?exists> :attr05, <#else> null, </#if>
<#if attr06?exists> :attr06, <#else> null, </#if>
<#if attr07?exists> :attr07, <#else> null, </#if>
<#if attr08?exists> :attr08, <#else> null, </#if>
<#if attr09?exists> :attr09, <#else> null, </#if>
<#if attr10?exists> :attr10, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 게시판 권한을 수정한다. -->
	<statement name="updateBbsAuth" type="update">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.updateBbsAuth */
		<![CDATA[
UPDATE SCC_USER_BBSROLE SET
<#if remark?exists> REMARK = :remark, </#if>
<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
<#if attr01?exists> ATTR01 = :attr01, </#if>
<#if attr02?exists> ATTR02 = :attr02, </#if>
<#if attr03?exists> ATTR03 = :attr03, </#if>
<#if attr04?exists> ATTR04 = :attr04, </#if>
<#if attr05?exists> ATTR05 = :attr05, </#if>
<#if attr06?exists> ATTR06 = :attr06, </#if>
<#if attr07?exists> ATTR07 = :attr07, </#if>
<#if attr08?exists> ATTR08 = :attr08, </#if>
<#if attr09?exists> ATTR09 = :attr09, </#if>
<#if attr10?exists> ATTR10 = :attr10, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SABUN = :sabun
AND    BBSROLE = :bbsrole
		]]>
	</statement>

	<!-- 게시판 권한을 삭제한다. -->
	<statement name="deleteBbsAuth" type="delete">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.deleteBbsAuth */
		<![CDATA[
DELETE
FROM   SCC_USER_BBSROLE
WHERE  SABUN = :sabun
AND    BBSROLE = :bbsrole
		]]>
	</statement>

	<!-- 복수업장을 조회한다. -->
	<statement name="selectDualUpjang" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectDualUpjang */
		<![CDATA[
SELECT B.SABUN,
       TO_CHAR(B.UPJANG) AS UPJANG,
       A.UPJANGNM,
       DECODE(B.USE_YN, 'Y', '1', '0') AS USE_YN,
       B.REMARK AS REMARK_DESC,
       B.ATTR01 AS USE_DATE_FROM,
       B.ATTR02 AS USE_DATE_TO,
       B.ATTR03,
       B.ATTR04,
       B.ATTR05,
       B.ATTR06,
       B.ATTR07,
       B.ATTR08,
       B.ATTR09,
       B.ATTR10
FROM   ST_UPJANG A,
       FMS_USER_UPJANG B
WHERE  B.UPJANG = A.UPJANG
AND    B.SABUN = :sabun
<#if useYn?has_content>
	<#if useYn == "Y">
AND    B.USE_YN = 'Y'
	</#if>
<#else>
AND    B.USE_YN = 'Y'
</#if>
		]]>
	</statement>

	<!-- 복수업장을 등록한다. -->
	<statement name="insertDualUpjang" type="insert">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.insertDualUpjang */
		<![CDATA[
INSERT INTO FMS_USER_UPJANG
(
  SABUN,
  UPJANG,
  REMARK,
  USE_YN,
  ATTR01,
  ATTR02,
  ATTR03,
  ATTR04,
  ATTR05,
  ATTR06,
  ATTR07,
  ATTR08,
  ATTR09,
  ATTR10,
  CUSER,
  CDATE,
  UUSER,
  UDATE
)
VALUES
(
  :sabun,
  :upjang,
<#if remarkDesc?exists> :remarkDesc, <#else> null, </#if>
<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if useDateFrom?exists> :useDateFrom, <#else> null, </#if>
<#if useDateTo?exists> :useDateTo, <#else> null, </#if>
<#if attr03?exists> :attr03, <#else> null, </#if>
<#if attr04?exists> :attr04, <#else> null, </#if>
<#if attr05?exists> :attr05, <#else> null, </#if>
<#if attr06?exists> :attr06, <#else> null, </#if>
<#if attr07?exists> :attr07, <#else> null, </#if>
<#if attr08?exists> :attr08, <#else> null, </#if>
<#if attr09?exists> :attr09, <#else> null, </#if>
<#if attr10?exists> :attr10, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 복수업장을 수정한다. -->
	<statement name="updateDualUpjang" type="update">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.updateDualUpjang */
		<![CDATA[
UPDATE FMS_USER_UPJANG SET
<#if remarkDesc?exists> REMARK = :remarkDesc, </#if>
<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
<#if useDateFrom?exists> ATTR01 = :useDateFrom, </#if>
<#if useDateTo?exists> ATTR02 = :useDateTo, </#if>
<#if attr03?exists> ATTR03 = :attr03, </#if>
<#if attr04?exists> ATTR04 = :attr04, </#if>
<#if attr05?exists> ATTR05 = :attr05, </#if>
<#if attr06?exists> ATTR06 = :attr06, </#if>
<#if attr07?exists> ATTR07 = :attr07, </#if>
<#if attr08?exists> ATTR08 = :attr08, </#if>
<#if attr09?exists> ATTR09 = :attr09, </#if>
<#if attr10?exists> ATTR10 = :attr10, </#if>
       UDATE = SYSDATE,
       UUSER = :loginSabun
WHERE  SABUN = :sabun
AND    UPJANG = :upjang
		]]>
	</statement>

	<!-- 복수업장을 삭제한다. -->
	<statement name="deleteDualUpjang" type="delete">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.deleteDualUpjang */
		<![CDATA[
DELETE FROM FMS_USER_UPJANG
WHERE  SABUN = :sabun
AND    UPJANG = :upjang
		]]>
	</statement>

	<!-- 계정잠김을 해제한다. -->
	<statement name="updateUnLock" type="update">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.updateUnLock */
		<![CDATA[
UPDATE SCC_USERINFO
SET    ACCT_STATUS = 'NORMAL',
       REMARK = REMARK || chr(13) || '[' || TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') || '] - ' || <#if acctLkReasonNm?exists> :acctLkReasonNm || '을(를)' <#else> '' </#if> || (SELECT NM_KOR||'('||:loginSabun||')' FROM SCC_USERINFO WHERE SABUN = :loginSabun) || '에 의해 잠금 해제됨.',
       ACCT_LK_DD = NULL,
       ACCT_LK_REASON_CD = NULL,
       PWD_ERR_CNT = 0,
       UDATE = SYSDATE,
       UUSER = :loginSabun
WHERE  SABUN = :sabun
		]]>
	</statement>

	<!-- 비밀번호를 초기화 한다. -->
	<statement name="updatePwd" type="update">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.updatePwd */
		<![CDATA[
UPDATE SCC_USERINFO
SET    PASSWORD = SCC_CRYPTO.ONEWAY_ENC_FUN(:pwd),
       PWD_CHG_DATE = '19000101',
       REMARK = REMARK || chr(13) || '[' || TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') || '] - ' || (SELECT NM_KOR||'('||:loginSabun||')' FROM SCC_USERINFO WHERE SABUN = :loginSabun) || '에 의해 암호가 초기화됨.',
       PWD_ERR_CNT = 0,
       UDATE = SYSDATE,
       UUSER = :loginSabun
WHERE  SABUN = :sabun
		]]>
	</statement>

	<!-- 접속이력을 조회한다. -->
	<statement name="selectLoginHistory" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectLoginHistory */
		<![CDATA[
SELECT A.APP_ID,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'APP_ID' AND CODE = A.APP_ID) AS APP_NM,
       TO_CHAR(A.LOGIN_DDTT, 'YYYY-MM-DD HH24:MI:SS') AS LOGIN_DDTT,
       TO_CHAR(A.LOGOUT_DDTT, 'YYYY-MM-DD HH24:MI:SS') AS LOGOUT_DDTT,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = '시스템구분' AND CODE = A.SYS_TYPE) AS SYS_NAME,
       (SELECT PRG_NM FROM SCC_PRG WHERE SYS_TYPE = A.SYS_TYPE AND PRG_ID = A.PRG_ID) AS PRG_NM
FROM   SCC_CONN_USER A
WHERE  SABUN = :sabun
		]]>
	</statement>
	
	<!-- 비밀번호 발급(식재고객에 한하여 임시 번호를 생성한다.) -->
	<statement name="selectRandom" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectLoginHistory */
		<![CDATA[
SELECT TO_CHAR(ROUND(DBMS_RANDOM.VALUE(1001, 9999), 0)) AS RDM_NUM
FROM   DUAL

		]]>
	</statement>

	<!-- 사용자 정보 변경이력을 조회한다. -->
	<statement name="selectHistory" type="select">
		/*+ com.hwfs.sc.scu.dao.UserMngtDAO.selectHistory */
		<![CDATA[
SELECT A.LOG_DDTT
     , A.LOG_TYPE
     , A.CHNG_USER
     , A.CHNG_USER_NM
     , A.SABUN
     , A.NM
     , TRIM(CASE WHEN A.USERID IS NOT NULL THEN A.USERID || '|' ELSE '' END  || 
            CASE WHEN A.PASSWORD IS NOT NULL THEN A.PASSWORD || '|' ELSE '' END  ||
            CASE WHEN A.NM_KOR IS NOT NULL THEN A.NM_KOR || '|' ELSE '' END  ||
            CASE WHEN A.USER_GROUP IS NOT NULL THEN A.USER_GROUP || '|' ELSE '' END  ||
            CASE WHEN A.USER_TYPE IS NOT NULL THEN A.USER_TYPE || '|' ELSE '' END  ||
            CASE WHEN A.UPJANG IS NOT NULL THEN TO_CHAR(A.UPJANG) || '|' ELSE '' END  ||
            CASE WHEN A.CUSTCD IS NOT NULL THEN TO_CHAR(A.CUSTCD) || '|' ELSE '' END  ||
            CASE WHEN A.SDATE IS NOT NULL THEN A.SDATE || '|' ELSE '' END  ||
            CASE WHEN A.EDATE IS NOT NULL THEN A.EDATE || '|' ELSE '' END  ||
            CASE WHEN A.JOIN_DATE IS NOT NULL THEN A.JOIN_DATE || '|' ELSE '' END  ||
            CASE WHEN A.PWD_CHG_DATE IS NOT NULL THEN A.PWD_CHG_DATE || '|' ELSE '' END  ||
            CASE WHEN A.USE_YN IS NOT NULL THEN A.USE_YN || '|' ELSE '' END  ||
            CASE WHEN A.SYSTEM_MST IS NOT NULL THEN A.SYSTEM_MST || '|' ELSE '' END  ||
            CASE WHEN A.BOARD_MST IS NOT NULL THEN A.BOARD_MST || '|' ELSE '' END  ||
            CASE WHEN A.ATTR06 IS NOT NULL THEN A.ATTR06 || '|' ELSE '' END  ||
            CASE WHEN A.SIMPLE_PO_YN IS NOT NULL THEN A.SIMPLE_PO_YN || '|' ELSE '' END  ||
            CASE WHEN A.TEL_NO_ENC IS NOT NULL THEN A.TEL_NO_ENC || '|' ELSE '' END  ||
            CASE WHEN A.HP_NO_ENC IS NOT NULL THEN A.HP_NO_ENC || '|' ELSE '' END  ||
            CASE WHEN A.EMAIL_ENC IS NOT NULL THEN A.EMAIL_ENC || '|' ELSE '' END  ||
            CASE WHEN A.MANAGE_ALLOW_IP IS NOT NULL THEN A.MANAGE_ALLOW_IP || '|' ELSE '' END  ||
            CASE WHEN A.TEMP_SABUN_MANAGE_SABUN IS NOT NULL THEN A.TEMP_SABUN_MANAGE_SABUN || '|' ELSE '' END  ||
            CASE WHEN A.PERS_INFO_PROC_LEVEL IS NOT NULL THEN A.PERS_INFO_PROC_LEVEL || '|' ELSE '' END  ||
            CASE WHEN A.PERS_INFO_PROC_GRADE IS NOT NULL THEN A.PERS_INFO_PROC_GRADE || '|' ELSE '' END  ||
            CASE WHEN A.PWD_ERR_CNT IS NOT NULL THEN TO_CHAR(A.PWD_ERR_CNT) || '|' ELSE '' END  ||
            CASE WHEN A.ACCT_STATUS IS NOT NULL THEN A.ACCT_STATUS || '|' ELSE '' END  ||
            CASE WHEN A.ACCT_LK_DD IS NOT NULL THEN A.ACCT_LK_DD || '|' ELSE '' END  ||
            CASE WHEN A.ACCT_LK_REASON_CD IS NOT NULL THEN A.ACCT_LK_REASON_CD || '|' ELSE '' END  ||
            CASE WHEN A.MAIN_TYPE IS NOT NULL THEN A.MAIN_TYPE || '|' ELSE '' END  ||
            CASE WHEN A.CTI_USE_YN IS NOT NULL THEN A.CTI_USE_YN || '|' ELSE '' END  ||
            CASE WHEN A.CTI_USER_ID IS NOT NULL THEN A.CTI_USER_ID || '|' ELSE '' END  ||
            CASE WHEN A.CC_CD IS NOT NULL THEN A.CC_CD || '|' ELSE '' END  ||
            CASE WHEN A.PERSON_CERN_NUM IS NOT NULL THEN A.PERSON_CERN_NUM || '|' ELSE '' END  ||
            CASE WHEN A.REMARK IS NOT NULL THEN A.REMARK || '' ELSE '' END) AS CHNG_HISTORY
  FROM (SELECT TO_CHAR(A.LOG_DDTT, 'YYYY-MM-DD HH24:MI:SS') AS LOG_DDTT
             , A.LOG_TYPE
             , A.UUSER AS CHNG_USER
             , B.NM_KOR AS CHNG_USER_NM
             , A.SABUN
             , A.NM_KOR AS NM
             , CASE WHEN NVL(A.USERID, '-1') = NVL(LEAD(A.USERID) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '사용자아이디(' || LEAD(A.USERID) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.USERID || ')' END AS USERID
             , CASE WHEN NVL(A.PASSWORD, '-1') = NVL(LEAD(A.PASSWORD) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '비밀번호변경함.' END AS PASSWORD
             , CASE WHEN NVL(A.NM_KOR, '-1') = NVL(LEAD(A.NM_KOR) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '성명(' || LEAD(A.NM_KOR) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.NM_KOR || ')' END AS NM_KOR
             , CASE WHEN NVL(A.USER_GROUP, '-1') = NVL(LEAD(A.USER_GROUP) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '그룹(' || LEAD(A.USER_GROUP) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.USER_GROUP || ')' END AS USER_GROUP
             , CASE WHEN NVL(A.USER_TYPE, '-1') = NVL(LEAD(A.USER_TYPE) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '유형(' || LEAD(A.USER_TYPE) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.USER_TYPE || ')' END AS USER_TYPE
             , CASE WHEN NVL(A.UPJANG, -1) = NVL(LEAD(A.UPJANG) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '업장(' || LEAD(A.UPJANG) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.UPJANG || ')' END AS UPJANG
             , CASE WHEN NVL(A.CUSTCD, -1) = NVL(LEAD(A.CUSTCD) OVER (ORDER BY A.LOG_DDTT DESC), -1) THEN NULL ELSE '공급업체(' || LEAD(A.CUSTCD) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.CUSTCD || ')' END AS CUSTCD
             , CASE WHEN NVL(A.SDATE, '-1') = NVL(LEAD(A.SDATE) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '유효기간(시작)(' || LEAD(A.SDATE) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.SDATE || ')' END AS SDATE
             , CASE WHEN NVL(A.EDATE, '-1') = NVL(LEAD(A.EDATE) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '유효기간(종료)(' || LEAD(A.EDATE) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.EDATE || ')' END AS EDATE
             , CASE WHEN NVL(A.JOIN_DATE, '-1') = NVL(LEAD(A.JOIN_DATE) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '가입일자(' || LEAD(A.JOIN_DATE) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.JOIN_DATE || ')' END AS JOIN_DATE
             , CASE WHEN NVL(A.PWD_CHG_DATE, '-1') = NVL(LEAD(A.PWD_CHG_DATE) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '비밀번호변경일(' || LEAD(A.PWD_CHG_DATE) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.PWD_CHG_DATE || ')' END AS PWD_CHG_DATE
             , CASE WHEN NVL(A.USE_YN, '-1') = NVL(LEAD(A.USE_YN) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '사용여부(' || LEAD(A.USE_YN) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.USE_YN || ')' END AS USE_YN
             , CASE WHEN NVL(A.SYSTEM_MST, '-1') = NVL(LEAD(A.SYSTEM_MST) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '관리자권한(' || LEAD(A.SYSTEM_MST) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.SYSTEM_MST || ')' END AS SYSTEM_MST
             , CASE WHEN NVL(A.BOARD_MST, '-1') = NVL(LEAD(A.BOARD_MST) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '게시판권한(' || LEAD(A.BOARD_MST) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.BOARD_MST || ')' END AS BOARD_MST
             , CASE WHEN NVL(A.ATTR06, '-1') = NVL(LEAD(A.ATTR06) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '거래실적운용율(' || LEAD(A.ATTR06) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.ATTR06 || ')' END AS ATTR06
             , CASE WHEN NVL(A.SIMPLE_PO_YN, '-1') = NVL(LEAD(A.SIMPLE_PO_YN) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '여신/공급업체표시(' || LEAD(A.SIMPLE_PO_YN) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.SIMPLE_PO_YN || ')' END AS SIMPLE_PO_YN
             , CASE WHEN NVL(A.TEL_NO_ENC, '-1') = NVL(LEAD(A.TEL_NO_ENC) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '전화번호(' || LEAD(A.TEL_NO_ENC) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || SCC_CRYPTO.MASKAUTH_FUN(A.TEL_NO_ENC, 9, :loginPersMask, :maskAuth) || ')' END AS TEL_NO_ENC
             , CASE WHEN NVL(A.HP_NO_ENC, '-1') = NVL(LEAD(A.HP_NO_ENC) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '휴대전화(' || LEAD(A.HP_NO_ENC) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || SCC_CRYPTO.MASKAUTH_FUN(A.HP_NO_ENC, 8, :loginPersMask, :maskAuth) || ')' END AS HP_NO_ENC
             , CASE WHEN NVL(A.EMAIL_ENC, '-1') = NVL(LEAD(A.EMAIL_ENC) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE 'E-Mail(' || LEAD(A.EMAIL_ENC) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || SCC_CRYPTO.MASKAUTH_FUN(A.EMAIL_ENC, 7, :loginPersMask, :maskAuth) || ')' END AS EMAIL_ENC
             , CASE WHEN NVL(A.MANAGE_ALLOW_IP, '-1') = NVL(LEAD(A.MANAGE_ALLOW_IP) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '관리자접속IP(' || LEAD(A.MANAGE_ALLOW_IP) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.MANAGE_ALLOW_IP || ')' END AS MANAGE_ALLOW_IP
             , CASE WHEN NVL(A.TEMP_SABUN_MANAGE_SABUN, '-1') = NVL(LEAD(A.TEMP_SABUN_MANAGE_SABUN) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '가사번관리자(' || LEAD(A.TEMP_SABUN_MANAGE_SABUN) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.TEMP_SABUN_MANAGE_SABUN || ')' END AS TEMP_SABUN_MANAGE_SABUN
             , CASE WHEN NVL(A.PERS_INFO_PROC_LEVEL, '-1') = NVL(LEAD(A.PERS_INFO_PROC_LEVEL) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '개인정보처리레벨(' || LEAD(A.PERS_INFO_PROC_LEVEL) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.PERS_INFO_PROC_LEVEL || ')' END AS PERS_INFO_PROC_LEVEL
             , CASE WHEN NVL(A.PERS_INFO_PROC_GRADE, '-1') = NVL(LEAD(A.PERS_INFO_PROC_GRADE) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '개인정보처리등급(' || LEAD(A.PERS_INFO_PROC_GRADE) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.PERS_INFO_PROC_GRADE || ')' END AS PERS_INFO_PROC_GRADE
             , CASE WHEN NVL(A.PWD_ERR_CNT, -1) = NVL(LEAD(A.PWD_ERR_CNT) OVER (ORDER BY A.LOG_DDTT DESC), -1) THEN NULL ELSE '비밀번호오류횟수(' || LEAD(A.PWD_ERR_CNT) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.PWD_ERR_CNT || ')' END AS PWD_ERR_CNT
             , CASE WHEN NVL(A.ACCT_STATUS, '-1') = NVL(LEAD(A.ACCT_STATUS) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '계정상태(' || LEAD(A.ACCT_STATUS) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.ACCT_STATUS || ')' END AS ACCT_STATUS
             , CASE WHEN NVL(A.ACCT_LK_DD, TO_DATE('19000101', 'YYYYMMDD')) = NVL(LEAD(A.ACCT_LK_DD) OVER (ORDER BY A.LOG_DDTT DESC), TO_DATE('19000101', 'YYYYMMDD')) THEN NULL ELSE '계정잠금일자(' || LEAD(A.ACCT_LK_DD) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.ACCT_LK_DD || ')' END AS ACCT_LK_DD
             , CASE WHEN NVL(A.ACCT_LK_REASON_CD, '-1') = NVL(LEAD(A.ACCT_LK_REASON_CD) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '계정잠금사유(' || LEAD(A.ACCT_LK_REASON_CD) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.ACCT_LK_REASON_CD || ')' END AS ACCT_LK_REASON_CD
             , CASE WHEN NVL(A.MAIN_TYPE, '-1') = NVL(LEAD(A.MAIN_TYPE) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '메인화면(' || LEAD(A.MAIN_TYPE) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.MAIN_TYPE || ')' END AS MAIN_TYPE
             , CASE WHEN NVL(A.CTI_USE_YN, '-1') = NVL(LEAD(A.CTI_USE_YN) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE 'CTI사용여부(' || LEAD(A.CTI_USE_YN) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.CTI_USE_YN || ')' END AS CTI_USE_YN
             , CASE WHEN NVL(A.CTI_USER_ID, '-1') = NVL(LEAD(A.CTI_USER_ID) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE 'CTI아이디(' || LEAD(A.CTI_USER_ID) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.CTI_USER_ID || ')' END AS CTI_USER_ID
             , CASE WHEN NVL(A.CC_CD, '-1') = NVL(LEAD(A.CC_CD) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '발령조직(' || LEAD(A.CC_CD) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.CC_CD || ')' END AS CC_CD
             , CASE WHEN NVL(A.REMARK, '-1') = NVL(LEAD(A.REMARK) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '기타정보(' || LEAD(A.REMARK) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.REMARK || ')' END AS REMARK
             , CASE WHEN NVL(A.PERSON_CERN_NUM, '-1') = NVL(LEAD(A.PERSON_CERN_NUM) OVER (ORDER BY A.LOG_DDTT DESC), '-1') THEN NULL ELSE '본인인증번호(' || LEAD(A.PERSON_CERN_NUM) OVER (ORDER BY A.LOG_DDTT DESC) || ' -> ' || A.PERSON_CERN_NUM || ')' END AS PERSON_CERN_NUM
          FROM SCC_USERINFO_LOG A
             , SCC_USERINFO B
         WHERE B.SABUN = A.UUSER
           AND A.SABUN = :sabun
         ORDER BY A.SABUN, A.LOG_DDTT DESC) A
		]]>
	</statement>
</hqml>
