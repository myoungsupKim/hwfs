<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="fm.fmf.noSaleCloseDescDAO">
	<desc>(미)매출마감내역 HQML Query</desc>

	<!-- (미)매출마감내역 목록을 조회한다. -->
	<statement name="selectList_Old" type="select">
		/*+ com.hwfs.fm.fmf.dao.NoSaleCloseDescDAO.selectList_Old */
		<![CDATA[
		SELECT B.MAIN_UPJANG                                                                                           /*메인업장*/
		     , (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = B.MAIN_UPJANG) AS MAIN_UPJANGNM                    /*메인업장명*/
		     , B.UPJANG                                                                                                /*사업장*/
		     , (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = B.UPJANG) AS UPJANGNM                              /*사업장명*/
		     , (SELECT Z.SABUN||' '||Z.NM_KOR FROM HR_PERSONAL Z WHERE Z.SABUN = B.PART_SALES_SABUN) AS SALE_NM_KOR    /*영업담당자 사번+이름*/
		     , (SELECT Z.SABUN||' '||Z.NM_KOR FROM HR_PERSONAL Z WHERE Z.SABUN = B.CS_SABUN) AS CS_NM_KOR              /* CS 담당자 사번+이름*/
             , ROUND(SUM(SAL_AMT)) AS SALE_AMOUNT                     /*매출액*/
             , ROUND(SUM( CASE WHEN TRANS_YN = 'Y' THEN SAL_AMT ELSE 0 END)) AS CLS_AMOUNT   /*마감금액*/
             , ROUND(SUM( CASE WHEN TRANS_YN = 'N' THEN SAL_AMT ELSE 0 END)) AS UNCLS_AMOUNT /*미마감금액*/
          --FROM PO_TRANSACTION A, HWFS_FMS_UPJANG B
		  FROM FMS_SALES A, FMS_UPJANG B  
		 WHERE A.UPJANG = B.UPJANG
		   --AND (A.TRANS_TYPE = 'I001' OR (A.TRANS_TYPE LIKE '_002' AND A.SOURCE_TYPE = 'PO'))
		   AND A.SALE_DATE BETWEEN :schFromDate AND :schToDate
		   AND SUBSTR(A.SUBINV_CODE,1,2) = 'S1'
		   <#if schMainUpjang?has_content>
		   AND B.MAIN_UPJANG = :schMainUpjang
		   </#if>
		   <#if schUpjang?has_content>
		   AND (A.UPJANG = :schUpjang OR A.UPJANG2 = :schUpjang)
		   </#if>
		    <#if schCcCd?has_content>
		   AND B.DEPT_ID = :schCcCd
		   </#if>
		    <#if schSawon?has_content>
		   AND B.PART_SALES_SABUN = :schSawon
		   </#if>
		    <#if schCsSawon?has_content>
		   AND B.CS_SABUN = :schCsSawon
		   </#if>
		 GROUP BY B.MAIN_UPJANG, B.UPJANG, B.PART_SALES_SABUN, B.CS_SABUN
		]]>
	</statement>

	<!-- (미)매출마감내역 목록을 조회한다. -->

	<statement name="selectList" type="select"><![CDATA[
		SELECT
		  	 A.MAIN_UPJANG		/* 메인업장 */
			, (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = A.MAIN_UPJANG) AS MAIN_UPJANGNM      /*메인업장명*/
			, A.UPJANG				/* 사업장 */
			, (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = A.UPJANG) AS UPJANGNM                         /*사업장명*/
			, (SELECT Z.SABUN||' '||Z.NM_KOR FROM HR_PERSONAL Z WHERE Z.SABUN = A.PART_SALES_SABUN) AS SALE_NM_KOR    /*영업담당자 사번+이름*/
			, (SELECT Z.SABUN||' '||Z.NM_KOR FROM HR_PERSONAL Z WHERE Z.SABUN = A.CS_SABUN) AS CS_NM_KOR              		/* CS 담당자 사번+이름*/
			, NVL(B.SALE_AMOUNT,0) AS SALE_AMOUNT												/*매출액*/
			, NVL(B.CLS_AMOUNT,0) AS CLS_AMOUNT													/*마감금액*/
			, NVL(B.UNCLS_AMOUNT,0) AS UNCLS_AMOUNT											/*미마감금액*/
			, NVL(C.SALE_SUM ,0) AS SALE_SUM 															/*수불금액*/
			, NVL(C.SALE_SUM ,0) - NVL(B.SALE_AMOUNT,0)  AS DIFF_AMT						/*미집계금액*/
		FROM FMS_UPJANG A LEFT JOIN (
														/* 매출집계 테이블 연계 */
														SELECT
								  							  A.UPJANG
															, ROUND(SUM(SAL_AMT)) AS SALE_AMOUNT                     /*매출액*/
															, ROUND(SUM( CASE WHEN TRANS_YN = 'Y' THEN SAL_AMT ELSE 0 END)) AS CLS_AMOUNT   /*마감금액*/
															, ROUND(SUM( CASE WHEN TRANS_YN = 'N' THEN SAL_AMT ELSE 0 END)) AS UNCLS_AMOUNT /*미마감금액*/
														FROM FMS_SALES A INNER JOIN FMS_UPJANG B ON 1 = 1
		   																												<#if schMainUpjang?has_content>
		   																												 AND B.MAIN_UPJANG = TO_NUMBER(:schMainUpjang)
		   																												</#if>
		   																												<#if schUpjang?has_content>
		   																												 AND B.UPJANG = :schUpjang
		   																												</#if>
															 															  AND  A.UPJANG = B.UPJANG
		   												WHERE A.SALE_DATE BETWEEN :schFromDate AND :schToDate
														AND     SUBSTR(A.SUBINV_CODE,1,2) = 'S1'
														GROUP BY A.UPJANG
														
														--매출보정 미마감내역 누락된 부분 나오도록 추가 20180410 김호석 추가 Start
							                            UNION ALL
							
							                            SELECT
															  							  A.TRANS_UPJANG
																						, ROUND(SUM(SALE_AMOUNT)) AS SALE_AMOUNT                     /*매출액*/
																						, 0 AS CLS_AMOUNT   /*마감금액*/
																						, ROUND(SUM( CASE WHEN TRANS_YN = 'N' THEN SALE_AMOUNT ELSE 0 END)) AS UNCLS_AMOUNT /*미마감금액*/
																					FROM FMS_TRANSACTION A INNER JOIN FMS_UPJANG B ON 1 = 1
									   												AND  A.TRANS_UPJANG = B.UPJANG
									   												WHERE A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
							                              AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
							                              AND TRANS_YN = 'N'
														GROUP BY A.TRANS_UPJANG
														--매출보정 미마감내역 누락된 부분 나오도록 추가 20180410 김호석 추가 End
														
														) B ON A.UPJANG = B.UPJANG
									LEFT JOIN (
													/*+ PUSH_PRED(A) */
													SELECT
															A.TRANS_UPJANG
		 												 -- , SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))) AS SALE_SUM 
                                                          , SUM( CASE WHEN SUBSTR(A.ITEM_CODE, 1, 1) = 'F' THEN 
                                                                DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY)) 
                                                           ELSE
                                                                DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * A.TRANS_QTY) + A.SALE_VAT 
                                                           END) AS SALE_SUM 
													FROM (
																									
															SELECT 
																	<#if schMainUpjang?has_content>
																	/*+ INDEX(DT ESIMGDT_IDX05) */
																	</#if>
																	DT.MG_DATE AS MG_DATE,  /* 수불일자*/
															       CASE
															         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NULL THEN 'O002'         /* 재고이동 - 이동출고   */
															         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NOT NULL THEN 'I002'      /*재고이동 - 이동입고  */
															         WHEN DT.MOVEMENT_TYP = '251'OR DT.MOVEMENT_TYP = '252' THEN 'O001'      /* POS 매출 유형  */
															         WHEN DT.MOVEMENT_TYP = '701' OR DT.MOVEMENT_TYP = '702' THEN 'O004'      /* 재고실사 */
															         ELSE 'I001'
															       END AS TRANS_TYPE,
															       CASE
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)
															       END AS TRANS_QTY,             /* 수량 */
															       SL.SHOP_CD AS TRANS_UPJANG,    /* 업장코드 */
															       SL.CUST_WH_CD AS SUBINV_CODE,     /* 창고코드*/
															       DT.ITEM_CD AS ITEM_CODE,                                  /* 품목코드 */
															       DECODE(PO.DUTY_FREE_YN,'1','100','3','210','220') AS TAX_CODE,             /* 과면세 코드 */
															       SL.SAL_PRICE AS SALE_PRICE,                               /* 외부판매단가 */
															       CASE WHEN PO.DUTY_FREE_YN ='1' THEN
															         CASE
															           WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN SL.SAL_PRICE_AMT * 0.1 * -1
															           ELSE SL.SAL_PRICE_AMT * 0.1
															         END
															       ELSE 0
															       END AS SALE_VAT                                        /*  외부판매금액 * 10% */
															 FROM 
															 	  EPROCUSR.ESIMGDT DT,                                               /* 수불상세 */
															      EPROCUSR.ESPPODT PO,                                              /* 발주 상세 */
															      EPROCUSR.ESISALP SL                                               /* 판매단가 */
															WHERE 
															  DT.MOVEMENT_TYP NOT IN ('561','562','998','999','901','902','801','802','111','112','211','212')   /* 기초 , 기말 재고,배송입출고, 직송 가상입출고  제외 */
															  AND DT.SYS_ID = PO.SYS_ID
															  AND DT.COMP_CD = PO.COMP_CD
															  AND DT.PO_NO = PO.PO_NO
															  AND DT.PO_LNO = PO.PO_LNO
															  AND DT.SYS_ID = SL.SYS_ID
															  AND DT.COMP_CD = SL.COMP_CD
															  AND DT.MG_NO = SL.MG_NO
															  AND DT.STS <> 'D'
															  AND SL.CUST_WH_CD LIKE 'S1%'
															  AND DT.MG_DATE BETWEEN :schFromDate AND :schToDate 
															  <#if schSawon?has_content>
																  AND TO_NUMBER(SL.SHOP_CD) IN (SELECT UPJANG FROM FMS_UPJANG WHERE PART_SALES_SABUN = :schSawon)
																</#if>
																<#if schCsSawon?has_content>
																  AND TO_NUMBER(SL.SHOP_CD) IN (SELECT UPJANG FROM FMS_UPJANG WHERE CS_SABUN = :schCsSawon)
																</#if>
																<#if schMainUpjang?has_content>
																AND SL.SHOP_CD IN (SELECT UPJANG FROM FMS_UPJANG WHERE MAIN_UPJANG = TO_NUMBER(:schMainUpjang))
																  AND DT.WH_CD IN (
																  	SELECT DISTINCT HD.WH_CD
																  		FROM EPROCUSR.ESIMGHD HD
																  		WHERE HD.SYS_ID = '100'
																  		AND HD.COMP_CD = 'HFC'
																  		AND HD.BU_CD = '2000'
																  		AND HD.MU_CD IN ('2001','2002','2003','2004','2005')
																  		AND HD.ITEM_CD LIKE 'F%'
																  		AND HD.STS <> 'D'
																  )
																</#if>
															  -- 속도 누락된 코드 
															  AND SL.SYS_ID = '100'  
                                                              AND SL.COMP_CD = 'HFC'
															  AND DT.SYS_ID = '100'  
                                                              AND DT.COMP_CD = 'HFC' 
                                                              AND PO.SYS_ID = '100'  
                                                              AND PO.COMP_CD = 'HFC' 
                                                               
													
													
													UNION ALL
													
													
													SELECT 
																	<#if schMainUpjang?has_content>
																	/*+ INDEX(DT ESIMGDT_IDX05) */
																	</#if>
																	DT.MG_DATE AS MG_DATE,  /* 수불일자*/
															       CASE
															         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NULL THEN 'O002'         /* 재고이동 - 이동출고   */
															         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NOT NULL THEN 'I002'      /*재고이동 - 이동입고  */
															         WHEN DT.MOVEMENT_TYP = '251'OR DT.MOVEMENT_TYP = '252' THEN 'O001'      /* POS 매출 유형  */
															         WHEN DT.MOVEMENT_TYP = '701' OR DT.MOVEMENT_TYP = '702' THEN 'O004'      /* 재고실사 */
															         ELSE 'I001'
															       END AS TRANS_TYPE,
															       CASE
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)
															         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)
															       END AS TRANS_QTY,             /* 수량 */
															       SL.SHOP_CD AS TRANS_UPJANG,    /* 업장코드 */
															       SL.CUST_WH_CD AS SUBINV_CODE,     /* 창고코드*/
															       DT.ITEM_CD AS ITEM_CODE,                                  /* 품목코드 */
															       DECODE(RO.DUTY_FREE_YN,'1','100','3','210','220') AS TAX_CODE,             /* 과면세 코드 */
															      
															       CASE
            														WHEN DT.MOVEMENT_TYP = '667' THEN 0
            														ELSE SL.SAL_PRICE
         														   END AS SALE_PRICE , /* 외부판매단가 (증정의 경우 0원처리) */
															       -- SL.SAL_PRICE AS SALE_PRICE,                               /* 외부판매단가 */
															      
															       CASE WHEN RO.DUTY_FREE_YN ='1' AND DT.MOVEMENT_TYP != '667' THEN
															         CASE
															           WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN SL.SAL_PRICE_AMT * 0.1 * -1
															           ELSE SL.SAL_PRICE_AMT * 0.1
															         END
															       ELSE 0
															       END AS SALE_VAT                                        /*  외부판매금액 * 10% */
															 FROM 
															 	  EPROCUSR.ESIMGDT DT,                                               /* 수불상세 */
															      EPROCUSR.ESPRODT RO,                                              /* 발주 상세 */
															      EPROCUSR.ESISALP SL                                               /* 판매단가 */
															WHERE 
															  DT.MOVEMENT_TYP NOT IN ('561','562','998','999','901','902','801','802','111','112','211','212')   /* 기초 , 기말 재고,배송입출고, 직송 가상입출고  제외 */
															  AND DT.SYS_ID = RO.SYS_ID
															  AND DT.COMP_CD = RO.COMP_CD
															  AND DT.PO_NO = RO.RO_NO
															  AND DT.PO_LNO = RO.RO_LNO
															  AND DT.SYS_ID = SL.SYS_ID
															  AND DT.COMP_CD = SL.COMP_CD
															  AND DT.MG_NO = SL.MG_NO
															  AND DT.STS <> 'D'
															  AND SL.CUST_WH_CD LIKE 'S1%'
															  AND DT.MG_DATE BETWEEN :schFromDate AND :schToDate 
															  <#if schSawon?has_content>
																  AND TO_NUMBER(SL.SHOP_CD) IN (SELECT UPJANG FROM FMS_UPJANG WHERE PART_SALES_SABUN = :schSawon)
																</#if>
																<#if schCsSawon?has_content>
																  AND TO_NUMBER(SL.SHOP_CD) IN (SELECT UPJANG FROM FMS_UPJANG WHERE CS_SABUN = :schCsSawon)
																</#if>
																<#if schMainUpjang?has_content>
																AND SL.SHOP_CD IN (SELECT UPJANG FROM FMS_UPJANG WHERE MAIN_UPJANG = TO_NUMBER(:schMainUpjang))
																  AND DT.WH_CD IN (
																  	SELECT DISTINCT HD.WH_CD
																  		FROM EPROCUSR.ESIMGHD HD
																  		WHERE HD.SYS_ID = '100'
																  		AND HD.COMP_CD = 'HFC'
																  		AND HD.BU_CD = '2000'
																  		AND HD.MU_CD IN ('2001','2002','2003','2004','2005')
																  		AND HD.ITEM_CD LIKE 'F%'
																  		AND HD.STS <> 'D'
																  )
																</#if>
															  -- 속도 누락된 코드 
															  AND SL.SYS_ID = '100'  
                                                              AND SL.COMP_CD = 'HFC'
															  AND DT.SYS_ID = '100'  
                                                              AND DT.COMP_CD = 'HFC' 
                                                              AND RO.SYS_ID = '100'  
                                                              AND RO.COMP_CD = 'HFC' 
                                                              
                                                              
                                                     UNION ALL
													
													
													
													
													
															  
													SELECT
														B.TRANS_DATE,
														B.TRANS_TYPE,
														B.TRANS_QTY,
														TO_CHAR (B.TRANS_UPJANG) AS TRANS_UPJANG,
														B.SUBINV_CODE,
														B.ITEM_CODE,
														B.TAX_CODE,
														B.SALE_PRICE,
														B.SALE_VAT
													FROM FMS_TRANSACTION B
													WHERE 1=1
														AND B.SUBINV_CODE LIKE 'S1%'
														AND B.TRANS_DATE BETWEEN :schFromDate AND :schToDate	  
														--매출보정 미마감내역 누락된 부분 나오도록 추가 20180410 김호석 추가 Start
                            							--위에 매출 미마감내역 나오기 때문에 수불에 미반영된걸로 보여야함(재집계를 안한것) 
                            							AND B.TRANS_YN = 'Y'	  
													
													) A INNER JOIN FMS_UPJANG B ON  1 = 1
		   																												<#if schMainUpjang?has_content>
		   																												 AND B.MAIN_UPJANG = TO_NUMBER(:schMainUpjang)
		   																												</#if>
		   																												<#if schUpjang?has_content>
		   																												 AND B.UPJANG = TO_NUMBER(:schUpjang)
		   																												</#if>
															 															 AND  A.TRANS_UPJANG = TO_CHAR(B.UPJANG)
													WHERE (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		   											GROUP BY A.TRANS_UPJANG
													) C ON A.UPJANG = C.TRANS_UPJANG
		WHERE 1 = 1
		AND A.USE_YN = 'Y'
		--매출은 없는데 현지구매가 있는 경우 안나오는 문제 수정 20181030 김호석(문재현대리 요청)
        AND NOT (NVL(B.SALE_AMOUNT,0) = 0 AND NVL(C.SALE_SUM,0) = 0) 
		<#if schMainUpjang?has_content>
		 AND A.MAIN_UPJANG = TO_NUMBER(:schMainUpjang)
		</#if>
		<#if schUpjang?has_content>
		 AND A.UPJANG = :schUpjang
		 </#if>
		<#if schCcCd?has_content>
		 AND A.DEPT_ID = :schCcCd
		</#if>
		<#if schSawon?has_content>
		 AND A.PART_SALES_SABUN = :schSawon
		</#if>
		<#if schCsSawon?has_content>
		AND A.CS_SABUN = :schCsSawon
		</#if>
		-- 수불금액이 존재하는 업장만 조회
--       AND (NVL(C.SALE_SUM ,0) <> 0
--      OR NVL(B.SALE_AMOUNT,0) <> 0        
--       OR NVL(B.CLS_AMOUNT,0) <> 0   
--       OR NVL(B.UNCLS_AMOUNT,0) <> 0
--       )     
		ORDER BY A.MAIN_UPJANG, A.UPJANG
		]]></statement>


	<statement name="selectList_old_20170220" type="select"><![CDATA[
		SELECT
		  	 A.MAIN_UPJANG		/* 메인업장 */
			, (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = A.MAIN_UPJANG) AS MAIN_UPJANGNM      /*메인업장명*/
			, A.UPJANG				/* 사업장 */
			, (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = A.UPJANG) AS UPJANGNM                         /*사업장명*/
			, (SELECT Z.SABUN||' '||Z.NM_KOR FROM HR_PERSONAL Z WHERE Z.SABUN = A.PART_SALES_SABUN) AS SALE_NM_KOR    /*영업담당자 사번+이름*/
			, (SELECT Z.SABUN||' '||Z.NM_KOR FROM HR_PERSONAL Z WHERE Z.SABUN = A.CS_SABUN) AS CS_NM_KOR              		/* CS 담당자 사번+이름*/
			, NVL(B.SALE_AMOUNT,0) AS SALE_AMOUNT												/*매출액*/
			, NVL(B.CLS_AMOUNT,0) AS CLS_AMOUNT													/*마감금액*/
			, NVL(B.UNCLS_AMOUNT,0) AS UNCLS_AMOUNT											/*미마감금액*/
			, NVL(C.SALE_SUM ,0) AS SALE_SUM 															/*수불금액*/
			, NVL(C.SALE_SUM ,0) - NVL(B.SALE_AMOUNT,0)  AS DIFF_AMT						/*미집계금액*/
		FROM FMS_UPJANG A LEFT JOIN (
														/* 매출집계 테이블 연계 */
														SELECT
								  							  A.UPJANG
															, ROUND(SUM(SAL_AMT)) AS SALE_AMOUNT                     /*매출액*/
															, ROUND(SUM( CASE WHEN TRANS_YN = 'Y' THEN SAL_AMT ELSE 0 END)) AS CLS_AMOUNT   /*마감금액*/
															, ROUND(SUM( CASE WHEN TRANS_YN = 'N' THEN SAL_AMT ELSE 0 END)) AS UNCLS_AMOUNT /*미마감금액*/
														FROM FMS_SALES A INNER JOIN FMS_UPJANG B ON 1 = 1
		   																												<#if schMainUpjang?has_content>
		   																												 AND B.MAIN_UPJANG = :schMainUpjang
		   																												</#if>
		   																												<#if schUpjang?has_content>
		   																												 AND B.UPJANG = :schUpjang
		   																												</#if>
															 															  AND  A.UPJANG = B.UPJANG
		   												WHERE A.SALE_DATE BETWEEN :schFromDate AND :schToDate
														AND     SUBSTR(A.SUBINV_CODE,1,2) = 'S1'
														GROUP BY A.UPJANG
														) B ON A.UPJANG = B.UPJANG
									LEFT JOIN (
													/* 수불 테이블 연계 */
													SELECT
															/*+ PUSH_PRED(A) */
								  							A.TRANS_UPJANG
		 												 -- , SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))) AS SALE_SUM 
                                                          , SUM( CASE WHEN SUBSTR(A.ITEM_CODE, 1, 1) = 'F' THEN 
                                                                DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY)) 
                                                           ELSE
                                                                DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * A.TRANS_QTY) + A.SALE_VAT 
                                                           END) AS SALE_SUM 
													FROM FMS_TRANSACTION_V A INNER JOIN FMS_UPJANG B ON  1 = 1
		   																												<#if schMainUpjang?has_content>
		   																												 AND B.MAIN_UPJANG = :schMainUpjang
		   																												</#if>
		   																												<#if schUpjang?has_content>
		   																												 AND B.UPJANG = :schUpjang
		   																												</#if>
															 															 AND  A.TRANS_UPJANG = B.UPJANG
													WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
													AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
		   											AND  A.MG_DATE BETWEEN :schFromDate AND :schToDate
													GROUP BY A.TRANS_UPJANG
													) C ON A.UPJANG = C.TRANS_UPJANG
		WHERE 1 = 1
		AND A.USE_YN = 'Y'
        AND NVL(B.SALE_AMOUNT,0) <> 0 
		<#if schMainUpjang?has_content>
		 AND A.MAIN_UPJANG = :schMainUpjang
		</#if>
		<#if schUpjang?has_content>
		 AND A.UPJANG = :schUpjang
		 </#if>
		<#if schCcCd?has_content>
		 AND A.DEPT_ID = :schCcCd
		</#if>
		<#if schSawon?has_content>
		 AND A.PART_SALES_SABUN = :schSawon
		</#if>
		<#if schCsSawon?has_content>
		AND A.CS_SABUN = :schCsSawon
		</#if>
		-- 수불금액이 존재하는 업장만 조회
--       AND (NVL(C.SALE_SUM ,0) <> 0
--      OR NVL(B.SALE_AMOUNT,0) <> 0        
--       OR NVL(B.CLS_AMOUNT,0) <> 0   
--       OR NVL(B.UNCLS_AMOUNT,0) <> 0
--       )     
		ORDER BY A.MAIN_UPJANG, A.UPJANG
		]]></statement>


	<!-- (미)매출마감내역 목록을 조회한다.: 상세정보 -->
	<statement name="selectDetail" type="select">
		/*+ com.hwfs.fm.fmf.dao.NoSaleCloseDescDAO.selectDetail */
		<![CDATA[
		SELECT
			  TO_CHAR(TO_DATE(X.SALE_DATE,'YYYYMMDD'),'YYYY-MM-DD') SALE_DATE
			, X.UPJANG				/* 사업장 */
			, (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = X.UPJANG) AS UPJANGNM                         /*사업장명*/
			, NVL(X.SALE_AMOUNT,0) AS SALE_AMOUNT												/*매출액*/
			, NVL(X.CLS_AMOUNT,0) AS CLS_AMOUNT													/*마감금액*/
			, NVL(X.UNCLS_AMOUNT,0) AS UNCLS_AMOUNT											/*미마감금액*/
			, NVL(X.SALE_SUM ,0) AS SALE_SUM 															/*수불금액*/
			, NVL(X.SALE_SUM ,0) - NVL(X.SALE_AMOUNT,0) AS DIFF_AMT						/*미집계금액*/
		FROM 	(
							SELECT
								 S.UPJANG
								, S.SALE_DATE
								, SUM(S.SALE_AMOUNT) AS SALE_AMOUNT
								, SUM(S.CLS_AMOUNT) AS CLS_AMOUNT
								, SUM(S.UNCLS_AMOUNT) AS UNCLS_AMOUNT
								, SUM(S.SALE_SUM) AS SALE_SUM  
							FROM 
									(
											/* 매출집계 테이블 연계 */
											SELECT
					  							  TO_CHAR(A.UPJANG) AS UPJANG
					  						    , A.SALE_DATE	  
												, ROUND(SUM(SAL_AMT)) AS SALE_AMOUNT                     /*매출액*/
												, ROUND(SUM( CASE WHEN TRANS_YN = 'Y' THEN SAL_AMT ELSE 0 END)) AS CLS_AMOUNT   /*마감금액*/
												, ROUND(SUM( CASE WHEN TRANS_YN = 'N' THEN SAL_AMT ELSE 0 END)) AS UNCLS_AMOUNT /*미마감금액*/
												, 0 AS SALE_SUM
											FROM FMS_SALES A INNER JOIN FMS_UPJANG B ON 1 = 1
																											 AND B.UPJANG = :schUpjang
												 															  AND  A.UPJANG = B.UPJANG
											WHERE A.SALE_DATE BETWEEN :schDate1 AND :schDate2
											AND     SUBSTR(A.SUBINV_CODE,1,2) = 'S1'
											GROUP BY A.UPJANG, A.SALE_DATE
														
											UNION ALL
														
											/* 수불 테이블 연계 */
											SELECT
													/*+ PUSH_PRED(A) */
					  								A.TRANS_UPJANG
						  						  , A.MG_DATE	
						  						  , 0 AS SALE_AMOUNT
						  						  , 0 AS CLS_AMOUNT
						  						  , 0 AS UNCLS_AMOUNT
 												  --, SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))) AS SALE_SUM 
                                                 -- , SUM( CASE WHEN SUBSTR(A.ITEM_CODE, 1, 1) = 'F' THEN 
                                                 --           	DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY)) 
                                                 --          ELSE
                                                 --               DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * A.TRANS_QTY) + A.SALE_VAT 
                                                 --          END) AS SALE_SUM
                                                  , SUM( CASE WHEN SUBSTR(A.ITEM_CODE, 1, 1) = 'F' THEN
                                                                CASE WHEN A.PO_TYPE IN ('71','72') THEN -- 증정
                                                                    DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * 0))
                                                                ELSE
                                                                    DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))
                                                                END
                                                           ELSE
                                                                CASE WHEN A.PO_TYPE IN ('71','72') THEN -- 증정
                                                                    DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * 0) + 0
                                                                ELSE
                                                                    DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * A.TRANS_QTY) + A.SALE_VAT
                                                                END
                                                           END) AS SALE_SUM
											--FROM FMS_TRANSACTION_V A INNER JOIN FMS_UPJANG B ON  1 = 1
											FROM FMS_TRANSACTION_RTN_V A INNER JOIN FMS_UPJANG B ON  1 = 1
		   																												 AND B.UPJANG = :schUpjang
															 															 AND  A.TRANS_UPJANG = B.UPJANG
											WHERE SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
											AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
											AND  A.MG_DATE BETWEEN :schDate1 AND :schDate2
											GROUP BY A.TRANS_UPJANG, A.MG_DATE
										) S
								GROUP BY S.SALE_DATE, S.UPJANG	
						) X	
		ORDER BY X.UPJANG, X.SALE_DATE
		]]>
	</statement>



	<!-- (미)매출마감내역(을)를 등록한다. -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.fm.fmf.dao.NoSaleCloseDescDAO.insert */
		<![CDATA[
		INSERT INTO TABLE_NAME 
		(
		       COLUMN_NAME1,
			   COLUMN_NAME2,
		       CUSER,
		       CDATE
		)
		VALUES
		(
		       :columnName1,
			   <#if columnName2?has_content> :columnName2, <#else> null, </#if>
		       :loginSabun,
		       SYSDATE
		)
		]]>
	</statement>

	<!-- (미)매출마감내역(을)를 수정한다. -->
	<statement name="update" type="update">
		/*+ com.hwfs.fm.fmf.dao.NoSaleCloseDescDAO.update */
		<![CDATA[
		UPDATE TABLE_NAME 
		SET    COLUMN_NAME1 = :columnName1,
		       COLUMN_NAME2 = :columnName2,
		       UUSER = :loginSabun,
		       UDATE = SYSDATE
		WHERE  COLUMN_NAME = :columnName
		]]>
	</statement>

	<!-- (미)매출마감내역(을)를 삭제한다. -->
	<statement name="delete" type="delete">
		/*+ com.hwfs.fm.fmf.dao.NoSaleCloseDescDAO.delete */
		<![CDATA[
		DELETE 
		FROM   TABLE_NAME 
		WHERE  COLUMN_NAME = :columnName
		]]>
	</statement>



	<statement name="selectListTest" type="select"><![CDATA[
	/* 2018.08.30 김명섭 성능개선위해조회쿼리변경 */
		SELECT MAIN_UPJANG,                                   /* 메인업장             */
		       MAIN_UPJANGNM,                                 /* 메인업명             */
		       UPJANG,                                        /* 사업장               */
		       UPJANGNM,                                      /* 사업장명             */
		       SALE_NM_KOR,                                   /* 영업담당자 사번+이름 */
		       CS_NM_KOR,                                     /* CS담당자 사번+이름   */
		       SALE_AMOUNT,                                   /* 매출액               */
		       CLS_AMOUNT,                                    /* 마감금액             */
		       UNCLS_AMOUNT,                                  /* 미마감금액           */
		       SALE_SUM + SALE_SUM2 AS SALE_SUM,              /* 수불금액             */
		       SALE_SUM + SALE_SUM2 - SALE_AMOUNT AS DIFF_AMT /* 미집계금액           */
		  FROM (
		SELECT /*+ use_hash(T1) */
		       MAIN_UPJANG,
		       MAIN_UPJANGNM,
		       UPJANG,UPJANGNM,
		       SALE_NM_KOR,
		       CS_NM_KOR,
		       SALE_AMOUNT,
		       CLS_AMOUNT,
		       UNCLS_AMOUNT,
		       SALE_SUM,
		       (SELECT /*+ use_hash(SL) */
		               NVL(SUM(
		               CASE WHEN DT.MOVEMENT_TYP NOT IN ('561', '562', '998', '999', '901', '902', '801', '802', '111', '112', '211', '212', '251', '252', '701', '702') AND SUBSTRB(DT.MOVEMENT_TYP,1,1) <> '3' AND DT.STS <> 'D' THEN
		               CASE WHEN SUBSTR(DT.ITEM_CD, 1, 1) = 'F' THEN
		                    ROUND(DECODE(PO.DUTY_FREE_YN,'1',1.1,1) *
		                    ROUND(SL.SAL_PRICE * CASE
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)
		                                         END))
		               ELSE
		                    ROUND(SL.SAL_PRICE * CASE
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)
		                                         END) +
		                    CASE WHEN PO.DUTY_FREE_YN ='1' THEN
		                         CASE WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN SL.SAL_PRICE_AMT * 0.1 * -1
		                         ELSE SL.SAL_PRICE_AMT * 0.1
		                         END
		                    ELSE 0
		                    END
		               END
		               ELSE 0
		               END),0) AS SALE_SUM
		          FROM EPROCUSR.ESISALP SL,
		               EPROCUSR.ESIMGDT DT,
		               EPROCUSR.ESPPODT PO
		         WHERE SL.SYS_ID = '100'
		           AND SL.COMP_CD = 'HFC'
		           AND SL.MG_NO LIKE (SELECT '%' FROM DUAL)
		           AND SL.SHOP_CD = T1.UPJANG
		           AND SL.CUST_GR_DATE >= TO_CHAR(ADD_MONTHS(TO_DATE(:schFromDate,'YYYYMMDD'),-1),'YYYYMM')||'01'
		           AND SL.CUST_WH_CD LIKE 'S1%'
		           AND SL.SYS_ID = DT.SYS_ID
		           AND SL.COMP_CD = DT.COMP_CD
		           AND SL.MG_NO = DT.MG_NO
		           AND DT.MG_DATE BETWEEN :schFromDate AND :schToDate
		           AND DT.SYS_ID = PO.SYS_ID(+)
		           AND DT.COMP_CD = PO.COMP_CD(+)
		           AND DT.PO_NO = PO.PO_NO(+)
		           AND DT.PO_LNO = PO.PO_LNO(+)) +

               (SELECT 
                    NVL(SUM(DECODE(SUBSTR(TRANS_TYPE,1,1),'I',1,-1) * ROUND(SALE_PRICE * TRANS_QTY)),0) +
                    NVL(SUM(DECODE(SUBSTR(TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(TAX_CODE,'100',0.1,0) * ROUND(SALE_PRICE * TRANS_QTY))),0)
                  FROM FCUS.VO_PO_TRANSACTION_SALE_HNR SALEHNR
                INNER JOIN ST_UPJANGV UPJANGV
                   ON 1 = 1
                  AND UPJANGV.UPJANG LIKE (SELECT '%' FROM DUAL)
                  AND UPJANGV.UPJANG = SALEHNR.TRANS_UPJANG
                 WHERE MG_DATE BETWEEN :schFromDate AND :schToDate
                   AND ( TRANS_TYPE IN '_002' OR TRANS_TYPE = 'I001' )
                   AND TRANS_UPJANG = T1.UPJANG) AS SALE_SUM2

		  FROM (
		      SELECT
				  	  A.MAIN_UPJANG		                                                                                      /* 메인업장 */
					, (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = A.MAIN_UPJANG) AS MAIN_UPJANGNM                    /*메인업장명*/
					, A.UPJANG				                                                                                  /* 사업장 */
					, (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = A.UPJANG) AS UPJANGNM                              /*사업장명*/
					, (SELECT Z.SABUN||' '||Z.NM_KOR FROM HR_PERSONAL Z WHERE Z.SABUN = A.PART_SALES_SABUN) AS SALE_NM_KOR    /*영업담당자 사번+이름*/
					, (SELECT Z.SABUN||' '||Z.NM_KOR FROM HR_PERSONAL Z WHERE Z.SABUN = A.CS_SABUN) AS CS_NM_KOR              /* CS 담당자 사번+이름*/
					, NVL(B.SALE_AMOUNT,0) AS SALE_AMOUNT												                      /*매출액*/
					, NVL(B.CLS_AMOUNT,0) AS CLS_AMOUNT													                      /*마감금액*/
					, NVL(B.UNCLS_AMOUNT,0) AS UNCLS_AMOUNT											                          /*미마감금액*/
					, NVL(B.SALE_SUM,0) AS SALE_SUM
				FROM FMS_UPJANG A LEFT JOIN (
		                                      SELECT UPJANG,
		                                             NVL(SUM(SALE_AMOUNT),0) AS SALE_AMOUNT,
		                                             NVL(SUM(CLS_AMOUNT),0) AS CLS_AMOUNT,
		                                             NVL(SUM(UNCLS_AMOUNT),0) AS UNCLS_AMOUNT,
		                                             NVL(SUM(SALE_SUM),0) AS SALE_SUM
		                                        FROM (
																/* 매출집계 테이블 연계 */
																SELECT
										  							    A.UPJANG
																 	  , ROUND(SUM(SAL_AMT)) AS SALE_AMOUNT                                            /*매출액*/
																	  , ROUND(SUM( CASE WHEN TRANS_YN = 'Y' THEN SAL_AMT ELSE 0 END)) AS CLS_AMOUNT   /*마감금액*/
																	  , ROUND(SUM( CASE WHEN TRANS_YN = 'N' THEN SAL_AMT ELSE 0 END)) AS UNCLS_AMOUNT /*미마감금액*/
																	  , 0 AS SALE_SUM
																  FROM FMS_SALES A INNER JOIN FMS_UPJANG B ON 1=1 AND A.UPJANG = B.UPJANG
																										<#if schMainUpjang?has_content>
																										  AND B.MAIN_UPJANG = TO_NUMBER(:schMainUpjang)
																										</#if>
																										<#if schUpjang?has_content>
																										  AND B.UPJANG = :schUpjang
																										</#if>
				   												 WHERE A.SALE_DATE BETWEEN :schFromDate AND :schToDate
																 /*  AND SUBSTR(A.SUBINV_CODE,1,2) = 'S1'  */
																GROUP BY A.UPJANG
									                            UNION ALL
									                            SELECT
											  						    A.TRANS_UPJANG
																	  , ROUND(SUM( DECODE(TRANS_YN, 'N',SALE_AMOUNT,0))) AS SALE_AMOUNT               /*매출액*/
																	  , 0 AS CLS_AMOUNT                                                               /*마감금액*/
																	  , ROUND(SUM( DECODE(TRANS_YN, 'N', SALE_AMOUNT, 0))) AS UNCLS_AMOUNT            /*미마감금액*/
		                                                              , NVL(SUM(
		                                                                CASE WHEN A.SUBINV_CODE LIKE 'S1%' THEN
		                                                                       CASE WHEN SUBSTR(A.ITEM_CODE, 1, 1) = 'F' THEN
		                                                                            DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))
		                                                                       ELSE
		                                                                            DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * A.TRANS_QTY) + A.SALE_VAT
		                                                                       END
		                                                                ELSE 0
		                                                                END),0) AS SALE_SUM
																  FROM FMS_TRANSACTION A INNER JOIN FMS_UPJANG B ON 1=1 AND A.TRANS_UPJANG = B.UPJANG
																										<#if schMainUpjang?has_content>
																										  AND B.MAIN_UPJANG = TO_NUMBER(:schMainUpjang)
																										</#if>
																										<#if schUpjang?has_content>
																										  AND B.UPJANG = :schUpjang
																										</#if>
					   											 WHERE A.TRANS_DATE BETWEEN :schFromDate AND :schToDate
									                               AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
																GROUP BY A.TRANS_UPJANG)
		                                      GROUP BY UPJANG
											) B ON A.UPJANG = B.UPJANG
			   WHERE 1 = 1
				 AND A.USE_YN = 'Y'
		         --매출은 없는데 현지구매가 있는 경우 안나오는 문제 수정 20181030 김호석(문재현대리 요청)
				 --AND NVL(B.SALE_AMOUNT,0) <> 0		         
				<#if schMainUpjang?has_content>
				 AND A.MAIN_UPJANG = TO_NUMBER(:schMainUpjang)
				</#if>
				<#if schUpjang?has_content>
				 AND A.UPJANG = :schUpjang
				 </#if>
				<#if schCcCd?has_content>
				 AND A.DEPT_ID = :schCcCd
				</#if>
				<#if schSawon?has_content>
				 AND A.PART_SALES_SABUN = :schSawon
				</#if>
				<#if schCsSawon?has_content>
				AND A.CS_SABUN = :schCsSawon
				</#if>
		) T1)
    	--매출은 없는데 현지구매가 있는 경우 안나오는 문제 수정 20181226 김호석(문재현대리 요청)		     
    	WHERE  (NVL(SALE_AMOUNT,0) <> 0 AND NVL(SALE_SUM + SALE_SUM2,0) <> 0)
    
    ]]></statement>

	<!-- (미)매출마감내역 목록을 조회한다.: 상세정보 -->
	<statement name="selectDetailTest" type="select"><![CDATA[
	/* 2018.08.30 김명섭 성능개선위해조회쿼리변경 */
		SELECT TO_CHAR(TO_DATE(SALE_DATE,'YYYYMMDD'),'YYYY-MM-DD') SALE_DATE,  /* 일자                 */
		       UPJANG,                                        /* 사업장               */
		       UPJANGNM,                                      /* 사업장명             */
		       SALE_AMOUNT,                                   /* 매출액               */
		       CLS_AMOUNT,                                    /* 마감금액             */
		       UNCLS_AMOUNT,                                  /* 미마감금액           */
		       SALE_SUM + SALE_SUM2 AS SALE_SUM,              /* 수불금액             */
		       SALE_SUM + SALE_SUM2 - SALE_AMOUNT AS DIFF_AMT /* 미집계금액           */
		  FROM (
		SELECT /*+ use_hash(T1) */
		       SALE_DATE,
		       UPJANG,
		       UPJANGNM,
		       SALE_AMOUNT,
		       CLS_AMOUNT,
		       UNCLS_AMOUNT,
		       SALE_SUM,
		       (SELECT /*+ use_hash(SL) */
		               NVL(SUM(
		               CASE WHEN DT.MOVEMENT_TYP NOT IN ('561', '562', '998', '999', '901', '902', '801', '802', '111', '112', '211', '212', '251', '252', '701', '702') AND SUBSTRB(DT.MOVEMENT_TYP,1,1) <> '3' AND DT.STS <> 'D' THEN
		               CASE WHEN SUBSTR(DT.ITEM_CD, 1, 1) = 'F' THEN
		                    ROUND(DECODE(PO.DUTY_FREE_YN,'1',1.1,1) *
		                    ROUND(SL.SAL_PRICE * CASE
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)
		                                         END))
		               ELSE
		                    ROUND(SL.SAL_PRICE * CASE
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)
		                                             WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)
		                                         END) +
		                    CASE WHEN PO.DUTY_FREE_YN ='1' THEN
		                         CASE WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 THEN SL.SAL_PRICE_AMT * 0.1 * -1
		                         ELSE SL.SAL_PRICE_AMT * 0.1
		                         END
		                    ELSE 0
		                    END
		               END
		               ELSE 0
		               END),0) AS SALE_SUM
		          FROM EPROCUSR.ESISALP SL,
		               EPROCUSR.ESIMGDT DT,
		               EPROCUSR.ESPPODT PO
		         WHERE SL.SYS_ID = '100'
		           AND SL.COMP_CD = 'HFC'
		           AND SL.MG_NO LIKE (SELECT '%' FROM DUAL)
		           AND SL.SHOP_CD = T1.UPJANG
		           AND SL.CUST_GR_DATE >= TO_CHAR(ADD_MONTHS(TO_DATE(:schDate1,'YYYYMMDD'),-1),'YYYYMM')||'01'
		           AND SL.CUST_WH_CD LIKE 'S1%'
		           AND SL.SYS_ID = DT.SYS_ID
		           AND SL.COMP_CD = DT.COMP_CD
		           AND SL.MG_NO = DT.MG_NO
		           AND DT.MG_DATE = T1.SALE_DATE
		           AND DT.SYS_ID = PO.SYS_ID(+)
		           AND DT.COMP_CD = PO.COMP_CD(+)
		           AND DT.PO_NO = PO.PO_NO(+)
		           AND DT.PO_LNO = PO.PO_LNO(+)) +

               (SELECT 
                    NVL(SUM(DECODE(SUBSTR(TRANS_TYPE,1,1),'I',1,-1) * ROUND(SALE_PRICE * TRANS_QTY)),0) +
                    NVL(SUM(DECODE(SUBSTR(TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(TAX_CODE,'100',0.1,0) * ROUND(SALE_PRICE * TRANS_QTY))),0)
                  FROM FCUS.VO_PO_TRANSACTION_SALE_HNR SALEHNR
                INNER JOIN ST_UPJANGV UPJANGV
                   ON 1 = 1
                  AND UPJANGV.UPJANG LIKE (SELECT '%' FROM DUAL)
                  AND UPJANGV.UPJANG = SALEHNR.TRANS_UPJANG
                 WHERE MG_DATE = T1.SALE_DATE
                   AND ( TRANS_TYPE IN '_002' OR TRANS_TYPE = 'I001' )
                   AND TRANS_UPJANG = T1.UPJANG) AS SALE_SUM2

		  FROM (
		      SELECT
		              A.BASE_DD AS SALE_DATE
					, :schUpjang AS UPJANG				                                                                      /* 사업장 */
					, (SELECT Z.UPJANGNM FROM ST_UPJANG Z WHERE Z.UPJANG = :schUpjang) AS UPJANGNM                            /*사업장명*/
					, NVL(B.SALE_AMOUNT,0) AS SALE_AMOUNT												                      /*매출액*/
					, NVL(B.CLS_AMOUNT,0) AS CLS_AMOUNT													                      /*마감금액*/
					, NVL(B.UNCLS_AMOUNT,0) AS UNCLS_AMOUNT											                          /*미마감금액*/
					, NVL(B.SALE_SUM,0) AS SALE_SUM
				FROM (SELECT TO_CHAR(TO_DATE(:schDate1, 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS BASE_DD
		                FROM DUAL
		              CONNECT BY LEVEL <= TO_DATE(:schDate2, 'YYYYMMDD') - TO_DATE(:schDate1, 'YYYYMMDD') + 1) A,
		             (SELECT UPJANG,
		                     SALE_DATE,
		                     NVL(SUM(SALE_AMOUNT),0) AS SALE_AMOUNT,
		                     NVL(SUM(CLS_AMOUNT),0) AS CLS_AMOUNT,
		                     NVL(SUM(UNCLS_AMOUNT),0) AS UNCLS_AMOUNT,
		                     NVL(SUM(SALE_SUM),0) AS SALE_SUM
		                FROM (
										/* 매출집계 테이블 연계 */
										SELECT
				  							    A.UPJANG
		                                      , A.SALE_DATE
										 	  , ROUND(SUM(SAL_AMT)) AS SALE_AMOUNT                                            /*매출액*/
											  , ROUND(SUM( CASE WHEN TRANS_YN = 'Y' THEN SAL_AMT ELSE 0 END)) AS CLS_AMOUNT   /*마감금액*/
											  , ROUND(SUM( CASE WHEN TRANS_YN = 'N' THEN SAL_AMT ELSE 0 END)) AS UNCLS_AMOUNT /*미마감금액*/
											  , 0 AS SALE_SUM
										  FROM FMS_SALES A INNER JOIN FMS_UPJANG B ON 1=1 AND A.UPJANG = B.UPJANG
																							AND B.UPJANG = :schUpjang
										 WHERE A.SALE_DATE BETWEEN :schDate1 AND :schDate2
										 /*  AND SUBSTR(A.SUBINV_CODE,1,2) = 'S1' */
										GROUP BY A.UPJANG, A.SALE_DATE
			                            UNION ALL
			                            SELECT
					  						    A.TRANS_UPJANG
		                                      , A.TRANS_DATE
											  , ROUND(SUM( DECODE(TRANS_YN, 'N',SALE_AMOUNT,0))) AS SALE_AMOUNT               /*매출액*/
											  , 0 AS CLS_AMOUNT                                                               /*마감금액*/
											  , ROUND(SUM( DECODE(TRANS_YN, 'N', SALE_AMOUNT, 0))) AS UNCLS_AMOUNT            /*미마감금액*/
		                                      , NVL(SUM(
		                                        CASE WHEN A.SUBINV_CODE LIKE 'S1%' THEN
		                                               CASE WHEN SUBSTR(A.ITEM_CODE, 1, 1) = 'F' THEN
		                                                    DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))
		                                               ELSE
		                                                    DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(A.SALE_PRICE * A.TRANS_QTY) + A.SALE_VAT
		                                               END
		                                        ELSE 0
		                                        END),0) AS SALE_SUM
										  FROM FMS_TRANSACTION A INNER JOIN FMS_UPJANG B ON 1=1 AND A.TRANS_UPJANG = B.UPJANG
																				  AND B.UPJANG = :schUpjang
										 WHERE A.TRANS_DATE BETWEEN :schDate1 AND :schDate2
			                               AND (A.TRANS_TYPE IN '_002' OR A.TRANS_TYPE = 'I001' )
										GROUP BY A.TRANS_UPJANG, A.TRANS_DATE)
		              GROUP BY UPJANG, SALE_DATE) B
			   WHERE 1 = 1
		         AND A.BASE_DD = B.SALE_DATE(+)
		) T1)
		ORDER BY SALE_DATE
		]]></statement>


</hqml>
