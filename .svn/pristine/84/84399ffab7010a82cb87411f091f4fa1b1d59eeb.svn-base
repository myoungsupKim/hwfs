<?xml version="1.0" encoding="euc-kr"?>
<query dynamic="true">
	<type>select</type>
	<description><![CDATA[]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>
<isEqual col="GUBUN" value="1">  
SELECT V.UPJANG,
       (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM,
       V.CUSTCD,
       (SELECT CUSTNM FROM HLDC_ST_CUST WHERE CUSTCD = V.CUSTCD) CUSTNM,
       V.BOND_DATE,
       SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), '악성채권', V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))       DO_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '도래채권',   (V.RCP_AMT_STD1 + V.RCP_AMT_STD2), '악성채권', (V.RCP_AMT_STD1 + V.RCP_AMT_STD2), 0))       DO_BOND_AMT_RCP,
       SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT_END1 + V.RCP_AMT_END2), '악성채권',  V.AMT - (V.RCP_AMT_END1 + V.RCP_AMT_END2), 0))      DO_BOND_AMT_JAN
  FROM (
			SELECT
					V.UPJANG_CD AS UPJANG,
					V.CUST_CD AS CUSTCD,
					NVL(V.AR_AMT, 0)  AS AMT,
					V.OCCUR_DATE AS  BOND_DATE,
				   (CASE WHEN #TRX_DATE# &gt;  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
										 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
										 ) THEN
							  '악성채권'
						 WHEN #TRX_DATE# &lt;=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
										 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
										 ) AND
							  #TRX_DATE# &gt; DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
										 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
										 ) THEN
							  '도래채권'
						 WHEN #TRX_DATE# &lt;=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
										 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
										 ) THEN
							  '미도래채권' END) DUE_GUBUN,
				   NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL   WHERE AR_NUM  = V.AR_NUM AND RECD_STATUS  = 'L' AND RECEIVE_DATE BETWEEN '19000101' AND #TRX_DATE#), 0) RCP_AMT1,
				   0 AS  RCP_AMT2,
				   NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL   WHERE AR_NUM  = V.AR_NUM AND RECD_STATUS  = 'L' AND RECEIVE_DATE BETWEEN TO_CHAR(TO_DATE(#TRX_DATE#, 'YYYYMMDD') + 1, 'YYYYMMDD') AND #RCP_END_DATE#), 0) RCP_AMT_STD1,
				   0 AS  RCP_AMT_STD2,
				   NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL   WHERE AR_NUM  = V.AR_NUM AND RECD_STATUS  = 'L' AND RECEIVE_DATE BETWEEN '19000101' AND #RCP_END_DATE#), 0) RCP_AMT_END1,
				   0 AS  RCP_AMT_END2
			FROM SLA_AR_MST V  INNER JOIN SCO_UPJANG_CUST B ON V.UPJANG_CD = B.UPJANG
																						AND V.CUST_CD = B.CUSTCD
											INNER JOIN SCO_UPJANG_MST_V C ON V.UPJANG_CD = C.UPJANG
			WHERE  (V.OCCUR_DATE   BETWEEN '19000101' AND #TRX_DATE#)
			AND    V.RECD_STATUS = 'L'
			AND     V.SYS_CLASS NOT IN ('13')			-- 식재제외(13)
			<isNotNull col="UPJANG">
			AND   (V.UPJANG_CD = #UPJANG#)
			</isNotNull>
			<isNotNull col="CUSTCD">
			AND   (V.CUST_CD  = #CUSTCD#)
			</isNotNull>
       ) V
GROUP BY V.UPJANG,
         V.CUSTCD,
         V.BOND_DATE
HAVING NVL(SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), '악성채권', V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0)), 0) &lt;&gt; 0          
</isEqual>

<isEqual col="GUBUN" value="2">  
SELECT V.UPJANG,
       (SELECT UPJANGNM FROM SCO_UPJANG_MST_V WHERE UPJANG = V.UPJANG) UPJANGNM,
       V.CUSTCD,
       (SELECT CUSTNM FROM HLDC_ST_CUST WHERE CUSTCD = V.CUSTCD) CUSTNM,
       V.BOND_DATE,
       SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), '악성채권', V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0))       DO_BOND_AMT,
       SUM(DECODE(V.DUE_GUBUN, '도래채권',   (V.RCP_AMT_STD1 + V.RCP_AMT_STD2), '악성채권', (V.RCP_AMT_STD1 + V.RCP_AMT_STD2), 0))       DO_BOND_AMT_RCP,
       SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT_END1 + V.RCP_AMT_END2), '악성채권',  V.AMT - (V.RCP_AMT_END1 + V.RCP_AMT_END2), 0))      DO_BOND_AMT_JAN
  FROM (
			SELECT
					V.UPJANG_CD AS UPJANG,
					V.CUST_CD AS CUSTCD,
					NVL(V.AR_AMT, 0)  AS AMT,
					V.OCCUR_DATE AS  BOND_DATE,
				   (CASE WHEN #TRX_DATE# &gt;  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
										 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
										 ) THEN
							  '악성채권'
						 WHEN #TRX_DATE# &lt;=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMM')||
										 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)+1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
										 ) AND
							  #TRX_DATE# &gt; DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
										 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
										 ) THEN
							  '도래채권'
						 WHEN #TRX_DATE# &lt;=  DECODE(B.PAY_GUBUN_CD, '999', TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD'), TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMM')||
										 LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(B.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(B.PAY_DATE, 2, '0'))
										 ) THEN
							  '미도래채권' END) DUE_GUBUN,
				   NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL   WHERE AR_NUM  = V.AR_NUM AND RECD_STATUS  = 'L' AND RECEIVE_DATE BETWEEN '19000101' AND #TRX_DATE#), 0) RCP_AMT1,
				   0 AS  RCP_AMT2,
				   NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL   WHERE AR_NUM  = V.AR_NUM AND RECD_STATUS  = 'L' AND RECEIVE_DATE BETWEEN TO_CHAR(TO_DATE(#TRX_DATE#, 'YYYYMMDD') + 1, 'YYYYMMDD') AND #RCP_END_DATE#), 0) RCP_AMT_STD1,
				   0 AS  RCP_AMT_STD2,
				   NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL   WHERE AR_NUM  = V.AR_NUM AND RECD_STATUS  = 'L' AND RECEIVE_DATE BETWEEN '19000101' AND #RCP_END_DATE#), 0) RCP_AMT_END1,
				   0 AS  RCP_AMT_END2
			FROM SLA_AR_MST V  INNER JOIN (
															SELECT UPJANG,
																   MAX(PAY_GUBUN_CD) AS PAY_GUBUN_CD,
																   MAX(PAY_DATE) AS PAY_DATE
															FROM SCO_UPJANG_CUST
															GROUP BY UPJANG
															)  B ON V.UPJANG_CD = B.UPJANG
											INNER JOIN SCO_UPJANG_MST_V C ON V.UPJANG_CD = C.UPJANG
			WHERE  (V.OCCUR_DATE   BETWEEN '19000101' AND #TRX_DATE#)
			AND    V.RECD_STATUS = 'L'
			AND     V.SYS_CLASS  IN ('13')			-- 식재(13)
			<isNotNull col="UPJANG">
			AND   (V.UPJANG_CD = #UPJANG#)
			</isNotNull>
			<isNotNull col="CUSTCD">
			AND   (V.CUST_CD  = #CUSTCD#)
			</isNotNull>
       ) V
GROUP BY V.UPJANG,
         V.CUSTCD,
         V.BOND_DATE
HAVING NVL(SUM(DECODE(V.DUE_GUBUN, '도래채권',   V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), '악성채권', V.AMT - (V.RCP_AMT1 + V.RCP_AMT2), 0)), 0) &lt;&gt; 0          
</isEqual>


</statement>
	<input default-name="ds_cond">
		<col name="UPJANG" size="256" type="VARCHAR" description="업장코드" /> 
		<col name="CUSTCD" size="256" type="VARCHAR" description="거래처코드" /> 
		<col name="TRX_DATE" size="255" type="VARCHAR" description="" /> 
		<col name="RCP_END_DATE" size="255" type="VARCHAR" description="" /> 				
		<col name="GUBUN" size="255" type="VARCHAR" description="" /> 				
	</input>
<output default-name="ds_listDetailTrx">           	
<col name="UPJANG" size="" type="NUMERIC" description="" />
<col name="UPJANGNM" size="255" type="VARCHAR" description="" />
<col name="CUSTCD" size="" type="NUMERIC" description="" />
<col name="CUSTNM" size="255" type="VARCHAR" description="" />
<col name="BOND_DATE" size="255" type="VARCHAR" description="" />
<col name="DO_BOND_AMT" size="" type="NUMERIC" description="" />
<col name="DO_BOND_AMT_RCP" size="" type="NUMERIC" description="" />
<col name="DO_BOND_AMT_JAN" size="" type="NUMERIC" description="" />
</output>
</query>