<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
    name="ft.fdm.inventoryMgmtDeliverDAO">
    <desc>입고정보를 등록 관리한다. HQML Query</desc>

    <!-- 입고정보를 등록 관리한다. 목록을 조회한다. -->
    <statement name="selectList" type="select">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectList */
        <![CDATA[
      SELECT A.DELIVER_NUM,
               DELIVER_TYPE,
               DELIVER_STATUS,
               FIRST_DELIVER_DATE,
               CURRENT_WH_DELIVER_DATE,
               A.SALE_TYPE,
               A.PO_TYPE,
               A.ATTACH_DEPT,
               ENTRY_NUM,
               ENTRY_ITEM_SEQ,
               PO_ORDER_NUM,
               ITEM_SEQ,
               ITEM_CD,
               ITEM_NM,
               HS_CD,
               A.SPLR_CD,
               A.SPLR_NM,
               A.SALSPLCE_CD,
               A.SALSPLCE_NM,
               WH_CD,
               WH_NM,
               UNIT,
               (SELECT SET1 FROM   SCC_COMMON_CODE A WHERE  A.GROUP_CODE = 'ITEM_UNIT' AND    A.USE_YN = 'Y' AND A.CODE = UNIT ) SET1,
               LSHIP_EXCHANGE_RATE,
               SIGN_EXCHANGE_RATE,
               A.INT_RATE,
               EXPECT_SALS_GAINRAT,
               DELIVER_UPRICE_FOREIGN_CURRENC,
               DELIVER_UPRICE_KRW,
               DELIVER_QUANTITY,
               DELIVER_WGT,
               DELIVER_AMT,
               --DELIVER_AMT AS REAL_DELIVER_AMT,
               NVL(A.DELIVER_AMT,0) + NVL(X.DIV_AMT,0)  AS REAL_DELIVER_AMT,
               RELEASE_WAIT_QUANTITY,
               RELEASE_WAIT_WGT,
               RELEASE_END_QUANTITY,
               RELEASE_END_WGT,
               RMA_QUANTITY,
               RMA_WGT,
               WH_MOVE_QUANTITY,
               WH_MOVE_WGT,
               ORDER_REMAIN_QUANTITY,
               ORDER_REMAIN_WGT,
               A.PO_PROPOSAL_NUM,
               INCOME_DTR_DSCT_NUM,
               EST_NO,
               DECODE(WONWTRLRG_NONARRIV_ALT_YN, 'Y', 1, 0) AS WONWTRLRG_NONARRIV_ALT_YN,
               LAST_RELEASE_DATE,
               DTR_LIMT,
               NONARRIV_ALT_DATE,
               MFG_DATE,
               LAST_SALE_EDATE,
               INVENTORY_CONTROL_QUANTITY,
               INVENTORY_CONTROL_WGT,
               DELIVER_AMT_KRW,
               A.CUSER,
               A.CDATE,
               A.UUSER,
               A.UDATE,
               (SELECT T.CHARG_COST FROM PO_ORDER_ITEM_DETAIL T WHERE T.PO_ORDER_NUM = A.PO_ORDER_NUM AND T.ITEM_CD=A.ITEM_CD AND T.ITEM_SEQ = A.ITEM_SEQ) CHARG_COST,
               (SELECT T.IOUT_COST FROM PO_ORDER_ITEM_DETAIL T WHERE T.PO_ORDER_NUM = A.PO_ORDER_NUM AND T.ITEM_CD=A.ITEM_CD AND T.ITEM_SEQ = A.ITEM_SEQ) IOUT_COST,
               A.DELIVER_NUM AS INITIAL_DELIVER_NUM,
               NULL WONWTR_AMT
        FROM   INVENTORY_MGMT_DELIVER A,
               PO_PROPOSAL_MST B,
               (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                   GROUP BY T.DELIVER_NUM
                 ) X
        WHERE  1=1
        AND    A.PO_PROPOSAL_NUM = B.PO_PROPOSAL_NUM
        AND  A.DELIVER_NUM = X.DELIVER_NUM(+)
        AND  A.DELIVER_NUM = :deliverNum


        ]]>
    </statement>

    <!-- 입고정보를 등록 관리한다.(을)를 등록한다. -->
    <statement name="insert" type="insert">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.insert */
        <![CDATA[
        INSERT INTO INVENTORY_MGMT_DELIVER
        (
         DELIVER_NUM,
         DELIVER_TYPE,
         DELIVER_STATUS,
         FIRST_DELIVER_DATE,
         CURRENT_WH_DELIVER_DATE,
         SALE_TYPE,
         PO_TYPE,
         ATTACH_DEPT,
         ENTRY_NUM,
         ENTRY_ITEM_SEQ,
         PO_ORDER_NUM,
         ITEM_SEQ,
         ITEM_CD,
         ITEM_NM,
         HS_CD,
         SPLR_CD,
         SPLR_NM,
         SALSPLCE_CD,
         SALSPLCE_NM,
         WH_CD,
         WH_NM,
         UNIT,
         LSHIP_EXCHANGE_RATE,
         SIGN_EXCHANGE_RATE,
         INT_RATE,
         EXPECT_SALS_GAINRAT,
         DELIVER_UPRICE_FOREIGN_CURRENC,
         DELIVER_UPRICE_KRW,
         DELIVER_QUANTITY,
         DELIVER_WGT,
         DELIVER_AMT,
         DELIVER_AMT_KRW,
         RELEASE_WAIT_QUANTITY,
         RELEASE_WAIT_WGT,
         RELEASE_END_QUANTITY,
         RELEASE_END_WGT,
         RMA_QUANTITY,
         RMA_WGT,
         WH_MOVE_QUANTITY,
         WH_MOVE_WGT,
         ORDER_REMAIN_QUANTITY,
         ORDER_REMAIN_WGT,
         PO_PROPOSAL_NUM,
         INCOME_DTR_DSCT_NUM,
         EST_NO,
         WONWTRLRG_NONARRIV_ALT_YN,
         LAST_RELEASE_DATE,
         DTR_LIMT,
         LAST_SALE_EDATE,
         INITIAL_DELIVER_NUM,
         ORG_DELIVER_NUM,
         ORG_RELEASE_NUM,
         CUSER,
         CDATE,
         UUSER,
         UDATE
        ) VALUES (
         :deliverNum,	--'ST'||TO_CHAR(SYSDATE, 'YYMM')||LPAD(INVENTORY_MGMT_DELIVER_S.NEXTVAL,6,'000000') ,
        <#if deliverType?exists> :deliverType, <#else> null, </#if>
        <#if deliverStatus?exists> :deliverStatus, <#else> null, </#if>
        <#if firstDeliverDate?exists> :firstDeliverDate, <#else> null, </#if>
        <#if currentWhDeliverDate?exists> :currentWhDeliverDate, <#else> null, </#if>
        <#if saleType?exists> :saleType, <#else> null, </#if>
        <#if poType?exists> :poType, <#else> null, </#if>
        <#if attachDept?exists> :attachDept, <#else> null, </#if>
        <#if entryNum?exists> :entryNum, <#else> null, </#if>
        <#if entryItemSeq?exists> :entryItemSeq, <#else> null, </#if>
         :poOrderNum,
         :itemSeq,
        <#if itemCd?exists> :itemCd, <#else> null, </#if>
        <#if itemNm?exists> :itemNm, <#else> null, </#if>
        <#if hsCd?exists> :hsCd, <#else> null, </#if>
        <#if splrCd?exists> :splrCd, <#else> null, </#if>
        <#if splrNm?exists> :splrNm, <#else> null, </#if>
        <#if salsplceCd?exists> :salsplceCd, <#else> null, </#if>
        <#if salsplceNm?exists> :salsplceNm, <#else> null, </#if>
        <#if whCd?exists> :whCd, <#else> null, </#if>
        <#if whNm?exists> :whNm, <#else> null, </#if>
        <#if unit?exists> :unit, <#else> null, </#if>
        <#if lshipExchangeRate?exists> :lshipExchangeRate, <#else> null, </#if>
        <#if signExchangeRate?exists> :signExchangeRate, <#else> null, </#if>
        <#if intRate?exists> :intRate, <#else> null, </#if>
        <#if expectSalsGainrat?exists> :expectSalsGainrat, <#else> null, </#if>
        <#if deliverUpriceForeignCurrenc?exists> :deliverUpriceForeignCurrenc, <#else> null, </#if>
        <#if deliverUpriceKrw?exists> :deliverUpriceKrw, <#else> null, </#if>
        <#if deliverQuantity?exists> :deliverQuantity, <#else> null, </#if>
        <#if deliverWgt?exists> :deliverWgt, <#else> null, </#if>
        <#if deliverAmt?exists> :deliverAmt, <#else> null, </#if>
        <#if krwWonwtrAmt?exists> :krwWonwtrAmt, <#else> null, </#if>

        <#if releaseWaitQuantity?exists> :releaseWaitQuantity, <#else> null, </#if>
        <#if releaseWaitWgt?exists> :releaseWaitWgt, <#else> null, </#if>
        <#if releaseEndQuantity?exists> :releaseEndQuantity, <#else> null, </#if>
        <#if releaseEndWgt?exists> :releaseEndWgt, <#else> null, </#if>
        <#if rmaQuantity?exists> :rmaQuantity, <#else> null, </#if>
        <#if rmaWgt?exists> :rmaWgt, <#else> null, </#if>
        <#if whMoveQuantity?exists> :whMoveQuantity, <#else> null, </#if>
        <#if whMoveWgt?exists> :whMoveWgt, <#else> null, </#if>
        <#if orderRemainQuantity?exists> :orderRemainQuantity, <#else> null, </#if>
        <#if orderRemainWgt?exists> :orderRemainWgt, <#else> null, </#if>
        <#if poProposalNum?exists> :poProposalNum, <#else> null, </#if>
        <#if incomeDtrDsctNum?exists> :incomeDtrDsctNum, <#else> null, </#if>
        <#if estNo?exists> :estNo, <#else> null, </#if>
        <#if wonwtrlrgNonarrivAltYn?exists> DECODE(:wonwtrlrgNonarrivAltYn, '1', 'Y', 'N'), <#else> null, </#if>
        <#if lastReleaseDate?exists> :lastReleaseDate, <#else> null, </#if>
        <#if dtrLimt?exists> :dtrLimt, <#else> null, </#if>
        <#if lastSaleEdate?exists> :lastSaleEdate, <#else> null, </#if>
        <#if initialDeliverNum?exists> :initialDeliverNum, <#else> null, </#if>
        <#if orgDeliverNum?exists> :orgDeliverNum, <#else> null, </#if>
        <#if orgReleaseNum?exists> :orgReleaseNum, <#else> null, </#if>
         :loginSabun,
         SYSDATE,
         :loginSabun,
         SYSDATE
        )
        ]]>
    </statement>

    <!-- 입고정보를 등록 관리한다.(을)를 수정한다. -->
    <statement name="update" type="update">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.update */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
        <#if deliverType?exists> DELIVER_TYPE = :deliverType, </#if>
        <#if deliverStatus?exists> DELIVER_STATUS = :deliverStatus, </#if>
        <#if firstDeliverDate?exists> FIRST_DELIVER_DATE = :firstDeliverDate, </#if>
        <#if currentWhDeliverDate?exists> CURRENT_WH_DELIVER_DATE = :currentWhDeliverDate, </#if>
        <#if saleType?exists> SALE_TYPE = :saleType, </#if>
        <#if poType?exists> PO_TYPE = :poType, </#if>
        <#if attachDept?exists> ATTACH_DEPT = :attachDept, </#if>


        <#if entryNum?exists> ENTRY_NUM = :entryNum, </#if>
        <#if entryItemSeq?exists> ENTRY_ITEM_SEQ = :entryItemSeq, </#if>
        <#if poOrderNum?exists> PO_ORDER_NUM = :poOrderNum, </#if>
        <#if itemSeq?exists> ITEM_SEQ = :itemSeq, </#if>

        <#if itemCd?exists> ITEM_CD = :itemCd, </#if>
        <#if itemNm?exists> ITEM_NM = :itemNm, </#if>
        <#if hsCd?exists> HS_CD = :hsCd, </#if>
        <#if splrCd?exists> SPLR_CD = :splrCd, </#if>
        <#if splrNm?exists> SPLR_NM = :splrNm, </#if>
        <#if salsplceCd?exists> SALSPLCE_CD = :salsplceCd, </#if>
        <#if salsplceNm?exists> SALSPLCE_NM = :salsplceNm, </#if>
        <#if whCd?exists> WH_CD = :whCd, </#if>
        <#if whNm?exists> WH_NM = :whNm, </#if>
        <#if unit?exists> UNIT = :unit, </#if>
        <#if lshipExchangeRate?exists> LSHIP_EXCHANGE_RATE = :lshipExchangeRate, </#if>
        <#if signExchangeRate?exists> SIGN_EXCHANGE_RATE = :signExchangeRate, </#if>
        <#if intRate?exists> INT_RATE = :intRate, </#if>
        <#if expectSalsGainrat?exists> EXPECT_SALS_GAINRAT = :expectSalsGainrat, </#if>
        <#if deliverUpriceForeignCurrenc?exists> DELIVER_UPRICE_FOREIGN_CURRENC = :deliverUpriceForeignCurrenc, </#if>
        <#if deliverUpriceKrw?exists> DELIVER_UPRICE_KRW = :deliverUpriceKrw, </#if>
        <#if deliverQuantity?exists> DELIVER_QUANTITY = :deliverQuantity, </#if>
        <#if deliverWgt?exists> DELIVER_WGT = :deliverWgt, </#if>
        <#if deliverAmt?exists> DELIVER_AMT = :deliverAmt, </#if>
        <#if krwWonwtrAmt?exists> DELIVER_AMT_KRW = :krwWonwtrAmt, </#if>
        <#if releaseWaitQuantity?exists> RELEASE_WAIT_QUANTITY = :releaseWaitQuantity, </#if>
        <#if releaseWaitWgt?exists> RELEASE_WAIT_WGT = :releaseWaitWgt, </#if>
        <#if releaseEndQuantity?exists> RELEASE_END_QUANTITY = :releaseEndQuantity, </#if>
        <#if releaseEndWgt?exists> RELEASE_END_WGT = :releaseEndWgt, </#if>
        <#if rmaQuantity?exists> RMA_QUANTITY = :rmaQuantity, </#if>
        <#if rmaWgt?exists> RMA_WGT = :rmaWgt, </#if>
        <#if whMoveQuantity?exists> WH_MOVE_QUANTITY = :whMoveQuantity, </#if>
        <#if whMoveWgt?exists> WH_MOVE_WGT = :whMoveWgt, </#if>
        <#if orderRemainQuantity?exists> ORDER_REMAIN_QUANTITY = :orderRemainQuantity, </#if>
        <#if orderRemainWgt?exists> ORDER_REMAIN_WGT = :orderRemainWgt, </#if>
        <#if poProposalNum?exists> PO_PROPOSAL_NUM = :poProposalNum, </#if>
        <#if estNo?exists> EST_NO = :estNo, </#if>
        <#if incomeDtrDsctNum?exists> INCOME_DTR_DSCT_NUM = :incomeDtrDsctNum, </#if>
        <#if estNum?exists> EST_NUM = :estNum, </#if>
        <#if wonwtrlrgNonarrivAltYn?exists> WONWTRLRG_NONARRIV_ALT_YN = DECODE(:wonwtrlrgNonarrivAltYn, '1', 'Y', 'N'), </#if>
        <#if lastReleaseDate?exists> LAST_RELEASE_DATE = :lastReleaseDate, </#if>
        <#if lastSaleEdate?exists> LAST_SALE_EDATE = :lastSaleEdate, </#if>
        <#if mfgDate?exists> MFG_DATE = :mfgDate, </#if>
        <#if dtrLimt?exists> DTR_LIMT = :dtrLimt, </#if>
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum

        ]]>
    </statement>

    <!-- 창고이동 정보를 등록 관리한다.(을)를 수정한다. -->
    <statement name="updateWhMoveData" type="update">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateWhMoveData
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
        <#if deliverQuantity?exists> DELIVER_QUANTITY = NVL(DELIVER_QUANTITY,0) + :deliverQuantity, </#if>
        <#if deliverWgt?exists> DELIVER_WGT = NVL(DELIVER_WGT,0) + :deliverWgt, </#if>
        <#if deliverAmt?exists> DELIVER_AMT = NVL(DELIVER_AMT,0) + :deliverAmt, </#if>

        <#if whMoveQuantity?exists> WH_MOVE_QUANTITY = NVL(WH_MOVE_QUANTITY,0) + :whMoveQuantity, </#if>
        <#if whMoveWgt?exists> WH_MOVE_WGT = NVL(WH_MOVE_WGT,0) + :whMoveWgt, </#if>
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum

        ]]>
    </statement>

    <!-- 반품 정보를 등록 관리한다.(을)를 수정한다. -->
    <statement name="updateRmaData" type="update">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateRmaData
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
        <#if rmaQuantity?exists> RMA_QUANTITY = NVL(RMA_QUANTITY,0) + :rmaQuantity, </#if>
        <#if rmaWgt?exists> RMA_WGT = NVL(RMA_WGT,0) + :rmaWgt, </#if>
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum

        ]]>
    </statement>

    <!-- 창고이동 정보를 등록 관리한다.(을)를 수정한다. -->
    <statement name="updateDeliverAmt" type="update">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateDeliverAmt
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
        <#if deliverAmt?exists> DELIVER_AMT = NVL(DELIVER_AMT,0) +:deliverAmt, </#if>
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum

        ]]>
    </statement>

    <!-- 창고이동 정보를 등록 관리한다.(을)를 수정한다. -->
    <statement name="updateMoveDeliverAmt" type="update">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateMoveDeliverAmt
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
        <#if deliverAmt?exists> DELIVER_AMT = :deliverAmt, </#if>
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum

        ]]>
    </statement>

    <!-- 입고정보를 등록 관리한다.(을)를 삭제한다. -->
    <statement name="delete" type="delete">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.delete */
        <![CDATA[
        DELETE
        FROM   INVENTORY_MGMT_DELIVER
        WHERE  DELIVER_NUM = :deliverNum

        ]]>
    </statement>

    <!-- 입고정보를 삭제 관리한다.(을)를 삭제한다. -->
    <statement name="cancelDeliver" type="delete">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.cancelDeliver */
        <![CDATA[
        DELETE
        FROM   INVENTORY_MGMT_DELIVER
        WHERE  ENTRY_NUM = :entryNum
        AND DELIVER_STATUS ='20'	--입고

        ]]>
    </statement>

    <!-- 입고(내수)정보를 삭제 관리한다.(을)를 삭제한다. -->
    <statement name="deleteDmtDeliver" type="delete">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.deleteDmtDeliver
        */
        <![CDATA[
        DELETE
        FROM   INVENTORY_MGMT_DELIVER
        WHERE  PO_ORDER_NUM = :poOrderNum
        AND PO_TYPE ='20'	--내수

        ]]>
    </statement>

    <!-- 가입고 삭제 관리한다.(을)를 삭제한다. -->
    <statement name="deleteGaDeliver" type="delete">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.deleteGaDeliver
        */
        <![CDATA[
        DELETE
        FROM   INVENTORY_MGMT_DELIVER
        WHERE  PO_ORDER_NUM = :poOrderNum
        ]]>
    </statement>

    <!-- 구매 품의 마스터 시퀀스 조회 한다. -->
    <statement name="getInventoryMgmtDeliverS" type="select">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.getInventoryMgmtDeliverS
        */
        <![CDATA[
            select LPAD(INVENTORY_MGMT_DELIVER_S.NEXTVAL,6,'000000') AS DELIVER_NUM FROM DUAL
        ]]>
    </statement>

    <!-- 가입고 목록을 조회한다. -->
    <statement name="selectReceiveRegList" type="select">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO."selectReceiveRegList"
        */
        <![CDATA[
        SELECT 0 CHK,
               A.DELIVER_NUM,
               A.DELIVER_TYPE,
               A.DELIVER_STATUS,
               A.FIRST_DELIVER_DATE,
               A.CURRENT_WH_DELIVER_DATE,
               A.SALE_TYPE,
               A.PO_TYPE,
               A.ATTACH_DEPT,
               (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'ATTACH_DEPT' AND CODE = A.ATTACH_DEPT ) AS ATTACH_DEPT_NM,--추가
               B.BL_NUM,
               A.ENTRY_NUM,
               A.ENTRY_ITEM_SEQ,
               A.PO_ORDER_NUM,
               A.ITEM_SEQ,
               A.ITEM_CD,
               A.ITEM_NM,
               A.HS_CD,
               A.SPLR_CD,
               A.SPLR_NM,
               A.SALSPLCE_CD,
               A.SALSPLCE_NM,
               A.WH_CD,
               A.WH_NM,
               A.UNIT,
               A.LSHIP_EXCHANGE_RATE EXCHANGE_RATE,
               A.SIGN_EXCHANGE_RATE,
               A.INT_RATE,
               A.EXPECT_SALS_GAINRAT,
               A.DELIVER_UPRICE_FOREIGN_CURRENC UPRICE,
               A.DELIVER_UPRICE_KRW KRW_UPRICE,
               A.DELIVER_QUANTITY ENTRY_REQ_QUANTITY,
               A.DELIVER_WGT ENTRY_REQ_WGT,
               A.DELIVER_AMT,
               A.RELEASE_WAIT_QUANTITY,
               A.RELEASE_WAIT_WGT,
               A.RELEASE_END_QUANTITY,
               A.RELEASE_END_WGT,
               A.RMA_QUANTITY,
               A.RMA_WGT,
               A.WH_MOVE_QUANTITY,
               A.WH_MOVE_WGT,
               A.ORDER_REMAIN_QUANTITY,
               A.ORDER_REMAIN_WGT,
               A.PO_PROPOSAL_NUM,
               A.INCOME_DTR_DSCT_NUM,
               A.EST_NO,
               A.WONWTRLRG_NONARRIV_ALT_YN,
               A.LAST_RELEASE_DATE,
               A.DTR_LIMT,
               C.KG_CONVERT_RATE,
               A.CUSER,
               A.CDATE,
               A.UUSER,
               A.UDATE,
               (
                   SELECT
                    --KRW금액의 합계(원단위까지만 표시(1,234,560KRW) :소수점 이하 반올림) / USD금액의 합계(소수점 둘째자리까지 표시(1234.56USD) : 소수점 3자리 반올림) = 환율(1,000.00)
                   ROUND(SUM(ROUND((ENTRY_REQ_QUANTITY * UPRICE * ENTRY_EXCHANGE_RATE ),2)) / SUM(ROUND((ENTRY_REQ_QUANTITY * UPRICE ),2)),2)
                  FROM ENTRY_MST A ,ENTRY_ITEM_DETAIL B
                  WHERE A.ENTRY_NUM = B.ENTRY_NUM
                  AND A.ENTRY_NUM =A.ENTRY_NUM
               ) SETTLE_EXCHANGE_RATE
        FROM   INVENTORY_MGMT_DELIVER A
               ,PO_ORDER_MST B
               ,HLDC_PO_ITEM_MST C
        WHERE A.PO_ORDER_NUM = B.PO_ORDER_NUM
        AND A.ITEM_CD = C.ITEM_CODE(+)
        AND   A.FIRST_DELIVER_DATE BETWEEN :startTerm AND :endTerm
        AND A.DELIVER_STATUS ='10'	--가입고
        ]]>
    </statement>

    <!-- 부대비 목록을 조회한다. -->
    <statement name="selectOtherList" type="select">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectOtherList
        */
        <![CDATA[
         SELECT
           B.PO_ORDER_NUM
          ,B.OTHER_AMT_SEQ
          ,B.BASI_KIND
          --,B.COMM_AMT * (C.ENTRY_REQ_WONWTR_AMT / D.TOT_REQ_WONWTR_AMT) COMM_AMT  --전체금액 대비 비율로 부대비 배부한다.
          ,B.COMM_AMT
          ,B.DIV_ACCUM_AMT
          ,B.COMM_CLASS
          ,B.BASI_NUM
          --,C.ENTRY_REQ_WONWTR_AMT SUM_WONWTR_AMT
          ,F.TOT_WONWTR_AMT SUM_WONWTR_AMT
          ,D.TOT_REQ_WONWTR_AMT TOT_WONWTR_AMT
          ,C.ENTRY_REQ_WONWTR_AMT / D.TOT_REQ_WONWTR_AMT  RATE
          ,E.ATTR01
          ,E.ATTR02
        FROM PO_ORDER_MST A
             ,PO_ORDER_OTHER_AMT B
             ,(SELECT PO_ORDER_NUM, ENTRY_NUM, SUM(T.ENTRY_REQ_WONWTR_AMT) ENTRY_REQ_WONWTR_AMT FROM ENTRY_ITEM_DETAIL T GROUP BY T.PO_ORDER_NUM, T.ENTRY_NUM) C
             ,(SELECT PO_ORDER_NUM, SUM(T.ENTRY_REQ_WONWTR_AMT) TOT_REQ_WONWTR_AMT FROM ENTRY_ITEM_DETAIL T GROUP BY T.PO_ORDER_NUM) D
             ,(
                SELECT *
                FROM   SCC_COMMON_CODE T
                WHERE  T.GROUP_CODE = 'COMM_CLASS'
                AND    T.USE_YN = 'Y'
              ) E
             ,(SELECT PO_ORDER_NUM, SUM(T.WONWTR_AMT) TOT_WONWTR_AMT FROM PO_ORDER_ITEM_DETAIL T GROUP BY T.PO_ORDER_NUM) F
             ,FT_SAP_INTERFACE G
        WHERE A.PO_ORDER_NUM = B.PO_ORDER_NUM
        AND B.PO_ORDER_NUM = C.PO_ORDER_NUM
        AND B.PO_ORDER_NUM = D.PO_ORDER_NUM
        AND B.COMM_CLASS = E.CODE(+)
        AND B.PO_ORDER_NUM = F.PO_ORDER_NUM
        AND B.SLIP_NUM = G.SLIP_NUM(+)
        AND A.PO_ORDER_NUM = :poOrderNum
        AND C.ENTRY_NUM = :entryNum
        --AND G.SLIP_STATUS ='P' --전표확정건만 20151027 전표확정 상관없이 배부
        AND E.ATTR02 ='Y'	--배부타입 Y만 배부
        <#if term?has_content>
            AND B.COMM_CLASS = :commClass
        </#if>
        AND NVL(B.DIV_ACCUM_AMT,0) < NVL(ABS(B.COMM_AMT),0)	--배부잔액이 있는놈만 -수수료금액 존재 ABS사용
        ]]>
    </statement>

    <!-- 부대비 목록을 조회한다. -->
    <statement name="selectOtherList_BACK" type="select">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectOtherList
        */
        <![CDATA[
        SELECT
           B.PO_ORDER_NUM
          ,B.OTHER_AMT_SEQ
          ,B.BASI_KIND
          ,B.COMM_AMT
          ,B.DIV_ACCUM_AMT
          ,B.COMM_CLASS
          ,B.BASI_NUM
          ,CASE WHEN D.SUM_WONWTR_AMT > 0 THEN --가입고후 통관된 건 우선
             D.SUM_WONWTR_AMT
           ELSE      --정식 통관인경우
             C.SUM_WONWTR_AMT
           END SUM_WONWTR_AMT
        FROM PO_ORDER_MST A
             ,PO_ORDER_OTHER_AMT B
             ,(SELECT PO_ORDER_NUM, SUM(WONWTR_AMT) SUM_WONWTR_AMT FROM PO_ORDER_ITEM_DETAIL GROUP BY PO_ORDER_NUM) C
             ,(
                SELECT A.PO_ORDER_NUM, SUM(A.DELIVER_AMT) SUM_WONWTR_AMT FROM INVENTORY_MGMT_DELIVER A
                WHERE A.DELIVER_STATUS='10'	  --가입고
                GROUP BY A.PO_ORDER_NUM
              ) D
        WHERE A.PO_ORDER_NUM = B.PO_ORDER_NUM
        AND B.PO_ORDER_NUM = C.PO_ORDER_NUM
        AND B.PO_ORDER_NUM = D.PO_ORDER_NUM(+)
        AND A.PO_ORDER_NUM = :poOrderNum
        <#if term?has_content>
            AND B.COMM_CLASS = :commClass
        </#if>
        ]]>
    </statement>

    <!-- 부대비 삭제될 목록을 조회한다. -->
    <statement name="selectCancelOtherAmtDivList" type="select">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectCancelOtherAmtDivList
        */
        <![CDATA[
        SELECT
             C.ENTRY_NUM,
             C.ENTRY_ITEM_SEQ,
             C.PO_ORDER_NUM,
             D.DELIVER_NUM,
             E.COMM_CLASS,
             E.OTHER_AMT_SEQ,
             -E.DIV_AMT DIV_AMT	--감액
        FROM PO_ORDER_MST A
            ,PO_ORDER_ITEM_DETAIL B
            ,ENTRY_ITEM_DETAIL C
            ,INVENTORY_MGMT_DELIVER D
            ,DELIVERITEM_OTHER_AMT_DIV E
        WHERE  A.PO_ORDER_NUM = B.PO_ORDER_NUM
        AND    B.PO_ORDER_NUM = C.PO_ORDER_NUM
        AND    B.ITEM_CD = C.ITEM_CD
        AND    C.ENTRY_NUM = D.ENTRY_NUM
        AND    C.ENTRY_ITEM_SEQ = D.ENTRY_ITEM_SEQ
        AND    C.ITEM_CD = D.ITEM_CD
        AND    C.ITEM_SEQ = D.ITEM_SEQ
        AND    D.DELIVER_NUM = E.DELIVER_NUM
        AND    A.PO_ORDER_NUM =:poOrderNum
        AND    C.ENTRY_NUM = :entryNum
        ]]>
    </statement>

    <!-- 재고현황 목록을 조회한다. -->
    <statement name="selectInventoryStatusList" type="select"><![CDATA[
        SELECT
             0 CHK
            ,A.DELIVER_TYPE
            ,A.FIRST_DELIVER_DATE
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'DELIVER_TYPE' AND CODE = A.DELIVER_TYPE ) AS DELIVER_TYPE_NM
            ,A.DELIVER_STATUS
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'DELIVER_STATUS' AND CODE = A.DELIVER_STATUS ) AS DELIVER_STATUS_NM
            ,A.ATTACH_DEPT
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'ATTACH_DEPT' AND CODE = A.ATTACH_DEPT ) AS ATTACH_DEPT_NM
            ,A.PO_TYPE
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'PO_TYPE' AND CODE = A.PO_TYPE ) AS PO_TYPE_NM
            ,A.SALE_TYPE
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'SALE_TYPE' AND CODE = A.PO_TYPE ) AS SALE_TYPE_NM
            ,A.DELIVER_NUM
            ,A.PO_ORDER_NUM
            ,A.ITEM_CD
            ,A.ITEM_SEQ
            ,D.ITEM_NAME||' '||D.ITEM_SIZE AS ITEM_NM
            ,A.SPLR_NM
            ,A.SALSPLCE_NM
            ,A.WH_CD
            ,A.WH_NM
            ,A.UNIT
            ,(SELECT SET1 FROM   SCC_COMMON_CODE A WHERE  A.GROUP_CODE = 'ITEM_UNIT' AND    A.USE_YN = 'Y' AND A.CODE = A.UNIT ) SET1
            ,A.DELIVER_QUANTITY
            ,A.DELIVER_WGT
            ,E.NONARRIV_ALT_YN
            ,(SELECT DECODE(A.PO_TYPE,'10',CODE_NAME,'상품') FROM SCC_COMMON_CODE WHERE  GROUP_CODE = '재고구분' AND CODE = NVL(E.NONARRIV_ALT_YN,'N')) AS NONARRIV_FLAG

            ,ROUND(CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                CASE WHEN A.DELIVER_STATUS = '10' THEN    --가입고건이면 수입면허의 원물대 가져오기
                   (SELECT T.ENTRY_REQ_WONWTR_AMT FROM ENTRY_ITEM_DETAIL T
                    WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                    AND A.ITEM_CD = T.ITEM_CD
                    AND A.ITEM_SEQ = T.ITEM_SEQ
                    )
                    *
                    A.LSHIP_EXCHANGE_RATE
                ELSE										--정상건이면 구매에서 가져오기
                   /*
                   (SELECT T.WONWTR_AMT_KRW FROM PO_ORDER_ITEM_DETAIL T
                    WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                    --AND A.ITEM_CD = T.ITEM_CD
                    AND A.ITEM_SEQ = T.ITEM_SEQ
                    )
                    */
                    ROUND(A.DELIVER_AMT)
                END
             ELSE
                   A.DELIVER_AMT
             END) WONWTR_AMT  --원물대 금액
            ,A.LSHIP_EXCHANGE_RATE

            ,CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                   ROUND((A.DELIVER_AMT+ NVL(E.DIV_AMT,0)))
                   /*
                   (
                   SELECT T.WONWTR_AMT_KRW FROM PO_ORDER_ITEM_DETAIL T
                   WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                   )
                   +
                  NVL(E.DIV_AMT,0)
                  */
             ELSE
                   A.DELIVER_AMT
             END DELIVER_AMT

            ,CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                  ROUND(((A.DELIVER_AMT+ NVL(E.DIV_AMT,0))/A.LSHIP_EXCHANGE_RATE),2)
             ELSE
                   A.DELIVER_AMT
             END DELIVER_AMT_USD
            ,A.DELIVER_UPRICE_FOREIGN_CURRENC
            ,A.DELIVER_UPRICE_KRW
            ,ROUND(A.DELIVER_AMT) TOT_AMT_USD	/*총 금액_USD*/
            ,ROUND(A.DELIVER_QUANTITY * A.DELIVER_UPRICE_KRW) TOT_AMT_KRW	/*총 금액 KRW*/
            ,CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                 B.BL_NUM
             ELSE
                (
                  SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                  WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                  AND A.ITEM_CD = T.ITEM_CD
                  AND A.ITEM_SEQ = T.ITEM_SEQ
                )
             END AS BL_NUM
            ,A.ENTRY_NUM
            ,A.ENTRY_ITEM_SEQ
            ,C.INCOME_LIC_NUM
            ,C.LIC_DATE
            ,A.MFG_DATE                    /*제조일자*/
            ,A.DTR_LIMT                    /*유통기한*/
            ,A.RELEASE_WAIT_QUANTITY       /*출고대기수량*/
            ,A.RELEASE_WAIT_WGT            /*출고대기중량*/
            ,A.RELEASE_END_QUANTITY        /**출고완료수량*/
            ,A.RELEASE_END_WGT             /**출고완료중량*/

            ,A.ORDER_REMAIN_QUANTITY	/**주문수량*/
            ,A.ORDER_REMAIN_WGT					/**주문중량*/

            ,NVL(F.PURCHASE_RETURN_QUANTITY,0) AS PURCHASE_RETURN_QUANTITY   --환입수량
            ,NVL(F.PURCHASE_RETURN_WGT,0) AS PURCHASE_RETURN_WGT		     --환입중량

            ,NVL(A.RELEASE_WAIT_WGT,0) -NVL(A.RELEASE_END_QUANTITY,0)  RELEASE_END_REMAIN_QTY  /**출고완료잔량*/
            ,A.RMA_QUANTITY				   /*반품수량*/
            ,A.RMA_WGT					   /*반품중량*/
            ,A.WH_MOVE_QUANTITY            /*창고이동수량*/
            ,A.WH_MOVE_WGT                 /*창고이동중량*/
            ,A.INVENTORY_CONTROL_QUANTITY  /*재고조정수량*/
            ,A.INVENTORY_CONTROL_WGT       /*재고조정중량*/
            --출고가능수량 : 입고수량-출고대기수량-출고완료수량-반품수량-창고이동수량
            --,(NVL(A.DELIVER_QUANTITY,0) - NVL(A.ORDER_REMAIN_QUANTITY,0) - NVL(A.RELEASE_WAIT_QUANTITY,0) - NVL(A.RELEASE_END_QUANTITY,0) - NVL(A.RMA_QUANTITY,0) - NVL(A.WH_MOVE_QUANTITY,0)) + NVL(F.PURCHASE_RETURN_QUANTITY,0) AS RELEASE_POSS_QUANTITY
            --,(NVL(A.DELIVER_WGT,0) - NVL(A.ORDER_REMAIN_WGT,0) - NVL(A.RELEASE_WAIT_WGT,0) - NVL(A.RELEASE_END_WGT,0) - NVL(A.RMA_WGT,0) - NVL(A.WH_MOVE_WGT,0)) + NVL(F.PURCHASE_RETURN_WGT,0) AS RELEASE_POSS_WGT
            --환입은 별도 입고(재고)로 조회되므로 환입량만큼 재고를 잡아주는 기존 로직을 제거함(2015.12.18)
            ,(NVL(A.DELIVER_QUANTITY,0) - NVL(A.ORDER_REMAIN_QUANTITY,0) - NVL(A.RELEASE_WAIT_QUANTITY,0) - NVL(A.RELEASE_END_QUANTITY,0) - NVL(A.RMA_QUANTITY,0) - NVL(A.WH_MOVE_QUANTITY,0) - NVL(A.INVENTORY_CONTROL_QUANTITY,0)) AS RELEASE_POSS_QUANTITY  /*재고수량 2016.01.19 재고조정분 추가*/
            ,(NVL(A.DELIVER_WGT,0) - NVL(A.ORDER_REMAIN_WGT,0) - NVL(A.RELEASE_WAIT_WGT,0) - NVL(A.RELEASE_END_WGT,0) - NVL(A.RMA_WGT,0) - NVL(A.WH_MOVE_WGT,0)  - NVL(A.INVENTORY_CONTROL_WGT,0)) AS RELEASE_POSS_WGT  /*재고중량 2016.01.19 재고조정분 추가*/
            --,NVL(A.CURRENT_WH_DELIVER_DATE, TO_CHAR(SYSDATE, 'YYYYMMDD')) CURRENT_WH_DELIVER_DATE
            ,A.CURRENT_WH_DELIVER_DATE AS CURRENT_WH_DELIVER_DATE
            ,A.HS_CD
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'INSIDE_CUST' AND CODE = 'INSIDE_CUST' ) AS INSIDE_CUST	--내부거래처코드
            ,A.LAST_SALE_EDATE
            ,A.SALSPLCE_CD
            ,A.EST_NO
            ,A.INCOME_DTR_DSCT_NUM
        FROM INVENTORY_MGMT_DELIVER A
             ,PO_ORDER_MST B
             ,ENTRY_MST C
             ,HLDC_PO_ITEM_MST D
             ,(SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
               GROUP BY T.DELIVER_NUM
              ) E
             ,(
              SELECT
                   A.DELIVER_NUM, NVL(SUM(B.PURCHASE_RETURN_QUANTITY),0) AS PURCHASE_RETURN_QUANTITY , NVL(SUM(B.PURCHASE_RETURN_WGT),0) AS PURCHASE_RETURN_WGT
              FROM SALE_ORDER_ITEM_MGMT A,
                   RELEASE_ITEM_MGMT B
              WHERE A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
              AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
              GROUP BY A.DELIVER_NUM
              ) F
        WHERE A.PO_ORDER_NUM = B.PO_ORDER_NUM
        AND A.ENTRY_NUM = C.ENTRY_NUM(+)	--내수도 조회
        AND A.ITEM_CD = D.ITEM_CODE(+)
        AND A.DELIVER_NUM = E.DELIVER_NUM(+)
        AND A.DELIVER_NUM = F.DELIVER_NUM(+)
        <#if startTerm?has_content>
            AND A.FIRST_DELIVER_DATE BETWEEN :startTerm AND :endTerm     /*입고일자*/
        </#if>
        <#if deliverType?has_content>
            AND A.DELIVER_TYPE = :deliverType        /*입고유형*/
        </#if>
        <#if deliverStatus?has_content>
            AND A.DELIVER_STATUS = :deliverStatus      /*입고상태*/
        </#if>
        <#if deliverFlag?has_content>
            <#if deliverFlag == "Y">	/* 재고구분:상품 */
                AND ( NVL(E.NONARRIV_ALT_YN,'N') = :deliverFlag OR A.PO_TYPE='20' )
            <#elseif deliverFlag == "N">	/* 재고구분:미착 */
                AND (NVL(E.NONARRIV_ALT_YN,'N') = :deliverFlag  AND A.PO_TYPE='10' )
            </#if>
        </#if>
         <#if search?has_content>
             <#if searchContents?has_content>
                <#if search == "A">	/* PO No */
                    AND A.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
                <#elseif search == "B">	/* 창고명 */
                      AND A.WH_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "C">	/* 매입처명 */
                    AND A.SPLR_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "D">	/* 매출처명 */
                    AND A.SALSPLCE_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "E">	/* 품목명 */
                    AND A.ITEM_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "F">	/* B/L NO */
                    AND EXISTS (
                       SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                       WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                       AND A.ITEM_CD = T.ITEM_CD
                       AND A.ITEM_SEQ = T.ITEM_SEQ
                       AND ( UPPER(T.ITEM_BL_NUM) LIKE '%'||UPPER(:searchContents)||'%' OR  UPPER(B.BL_NUM) LIKE '%'||UPPER(:searchContents)||'%' )
                    )
                   </#if>
               </#if>
        </#if>
         <#if attachDept?has_content>
            AND A.ATTACH_DEPT =:attachDept      /*귀속부서*/
        </#if>
         <#if deliverNum?has_content>
            AND A.DELIVER_NUM =:deliverNum      /*입고번호*/
        </#if>
        <#if chkInventoryYn?has_content>
            <#if chkInventoryYn == "N">
               AND   NVL(A.DELIVER_QUANTITY,0)
                       + NVL(F.PURCHASE_RETURN_QUANTITY,0)
                        -
                     (NVL(A.RELEASE_WAIT_QUANTITY,0)
                    + NVL(A.ORDER_REMAIN_QUANTITY,0)
                    + NVL(A.RELEASE_END_QUANTITY,0)
                    + NVL(A.RMA_QUANTITY,0)
                    + NVL(A.WH_MOVE_QUANTITY,0)
                    + NVL(A.INVENTORY_CONTROL_QUANTITY,0))
                    >0
            </#if>
          <#else>
               AND   NVL(A.DELIVER_QUANTITY,0)
                       + NVL(F.PURCHASE_RETURN_QUANTITY,0)
                        -
                     (NVL(A.RELEASE_WAIT_QUANTITY,0)
                    + NVL(A.ORDER_REMAIN_QUANTITY,0)
                    + NVL(A.RELEASE_END_QUANTITY,0)
                    + NVL(A.RMA_QUANTITY,0)
                    + NVL(A.WH_MOVE_QUANTITY,0)
                    + NVL(A.INVENTORY_CONTROL_QUANTITY,0))

                    >0
          </#if>
         ORDER BY A.DELIVER_NUM DESC, A.PO_ORDER_NUM
        ]]></statement>
        
   <statement name="selectInventoryStatusList_back" type="select"><![CDATA[
        SELECT
             0 CHK
            ,A.DELIVER_TYPE
            ,A.FIRST_DELIVER_DATE
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'DELIVER_TYPE' AND CODE = A.DELIVER_TYPE ) AS DELIVER_TYPE_NM
            ,A.DELIVER_STATUS
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'DELIVER_STATUS' AND CODE = A.DELIVER_STATUS ) AS DELIVER_STATUS_NM
            ,A.ATTACH_DEPT
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'ATTACH_DEPT' AND CODE = A.ATTACH_DEPT ) AS ATTACH_DEPT_NM
            ,A.PO_TYPE
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'PO_TYPE' AND CODE = A.PO_TYPE ) AS PO_TYPE_NM
            ,A.SALE_TYPE
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'SALE_TYPE' AND CODE = A.PO_TYPE ) AS SALE_TYPE_NM
            ,A.DELIVER_NUM
            ,A.PO_ORDER_NUM
            ,A.ITEM_CD
            ,A.ITEM_SEQ
            ,D.ITEM_NAME||' '||D.ITEM_SIZE AS ITEM_NM
            ,A.SPLR_NM
            ,A.SALSPLCE_NM
            ,A.WH_CD
            ,A.WH_NM
            ,A.UNIT
            ,(SELECT SET1 FROM   SCC_COMMON_CODE A WHERE  A.GROUP_CODE = 'ITEM_UNIT' AND    A.USE_YN = 'Y' AND A.CODE = A.UNIT ) SET1
            ,A.DELIVER_QUANTITY
            ,A.DELIVER_WGT
            ,E.NONARRIV_ALT_YN
            ,(SELECT DECODE(A.PO_TYPE,'10',CODE_NAME,'상품') FROM SCC_COMMON_CODE WHERE  GROUP_CODE = '재고구분' AND CODE = NVL(E.NONARRIV_ALT_YN,'N')) AS NONARRIV_FLAG

            ,ROUND(CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                CASE WHEN X.DELIVER_NUM IS NOT NULL THEN    --가입고건이면 수입면허의 원물대 가져오기
                   (SELECT T.ENTRY_REQ_WONWTR_AMT FROM ENTRY_ITEM_DETAIL T
                    WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                    AND A.ITEM_CD = T.ITEM_CD
                    AND A.ITEM_SEQ = T.ITEM_SEQ
                    )
                    *
                    A.LSHIP_EXCHANGE_RATE
                ELSE										--정상건이면 구매에서 가져오기
                   /*
                   (SELECT T.WONWTR_AMT_KRW FROM PO_ORDER_ITEM_DETAIL T
                    WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                    --AND A.ITEM_CD = T.ITEM_CD
                    AND A.ITEM_SEQ = T.ITEM_SEQ
                    )
                    */
                    ROUND(A.DELIVER_AMT)
                END
             ELSE
                   A.DELIVER_AMT
             END) WONWTR_AMT  --원물대 금액
            ,A.LSHIP_EXCHANGE_RATE

            ,CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                   ROUND((A.DELIVER_AMT+ NVL(E.DIV_AMT,0)))
                   /*
                   (
                   SELECT T.WONWTR_AMT_KRW FROM PO_ORDER_ITEM_DETAIL T
                   WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                   )
                   +
                  NVL(E.DIV_AMT,0)
                  */
             ELSE
                   A.DELIVER_AMT
             END DELIVER_AMT

            ,CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                  ROUND(((A.DELIVER_AMT+ NVL(E.DIV_AMT,0))/A.LSHIP_EXCHANGE_RATE),2)
             ELSE
                   A.DELIVER_AMT
             END DELIVER_AMT_USD
            ,A.DELIVER_UPRICE_FOREIGN_CURRENC
            ,A.DELIVER_UPRICE_KRW
            ,ROUND(A.DELIVER_AMT) TOT_AMT_USD	/*총 금액_USD*/
            ,ROUND(A.DELIVER_QUANTITY * A.DELIVER_UPRICE_KRW) TOT_AMT_KRW	/*총 금액 KRW*/
            ,CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                 B.BL_NUM
             ELSE
                (
                  SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                  WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                  AND A.ITEM_CD = T.ITEM_CD
                  AND A.ITEM_SEQ = T.ITEM_SEQ
                )
             END AS BL_NUM
            ,A.ENTRY_NUM
            ,A.ENTRY_ITEM_SEQ
            ,C.INCOME_LIC_NUM
            ,C.LIC_DATE
            ,A.MFG_DATE                    /*제조일자*/
            ,A.DTR_LIMT                    /*유통기한*/
            ,A.RELEASE_WAIT_QUANTITY       /*출고대기수량*/
            ,A.RELEASE_WAIT_WGT            /*출고대기중량*/
            ,A.RELEASE_END_QUANTITY        /**출고완료수량*/
            ,A.RELEASE_END_WGT             /**출고완료중량*/

            ,A.ORDER_REMAIN_QUANTITY	/**주문수량*/
            ,A.ORDER_REMAIN_WGT					/**주문중량*/

            ,NVL(F.PURCHASE_RETURN_QUANTITY,0) AS PURCHASE_RETURN_QUANTITY   --환입수량
            ,NVL(F.PURCHASE_RETURN_WGT,0) AS PURCHASE_RETURN_WGT		     --환입중량

            ,NVL(A.RELEASE_WAIT_WGT,0) -NVL(A.RELEASE_END_QUANTITY,0)  RELEASE_END_REMAIN_QTY  /**출고완료잔량*/
            ,A.RMA_QUANTITY				   /*반품수량*/
            ,A.RMA_WGT					   /*반품중량*/
            ,A.WH_MOVE_QUANTITY            /*창고이동수량*/
            ,A.WH_MOVE_WGT                 /*창고이동중량*/
            ,A.INVENTORY_CONTROL_QUANTITY
            ,A.INVENTORY_CONTROL_WGT
            --출고가능수량 : 입고수량-출고대기수량-출고완료수량-반품수량-창고이동수량
            --,(NVL(A.DELIVER_QUANTITY,0) - NVL(A.ORDER_REMAIN_QUANTITY,0) - NVL(A.RELEASE_WAIT_QUANTITY,0) - NVL(A.RELEASE_END_QUANTITY,0) - NVL(A.RMA_QUANTITY,0) - NVL(A.WH_MOVE_QUANTITY,0)) + NVL(F.PURCHASE_RETURN_QUANTITY,0) AS RELEASE_POSS_QUANTITY
            --,(NVL(A.DELIVER_WGT,0) - NVL(A.ORDER_REMAIN_WGT,0) - NVL(A.RELEASE_WAIT_WGT,0) - NVL(A.RELEASE_END_WGT,0) - NVL(A.RMA_WGT,0) - NVL(A.WH_MOVE_WGT,0)) + NVL(F.PURCHASE_RETURN_WGT,0) AS RELEASE_POSS_WGT
            --환입은 별도 입고(재고)로 조회되므로 환입량만큼 재고를 잡아주는 기존 로직을 제거함(2015.12.18)
            ,(NVL(A.DELIVER_QUANTITY,0) - NVL(A.ORDER_REMAIN_QUANTITY,0) - NVL(A.RELEASE_WAIT_QUANTITY,0) - NVL(A.RELEASE_END_QUANTITY,0) - NVL(A.RMA_QUANTITY,0) - NVL(A.WH_MOVE_QUANTITY,0)) AS RELEASE_POSS_QUANTITY
            ,(NVL(A.DELIVER_WGT,0) - NVL(A.ORDER_REMAIN_WGT,0) - NVL(A.RELEASE_WAIT_WGT,0) - NVL(A.RELEASE_END_WGT,0) - NVL(A.RMA_WGT,0) - NVL(A.WH_MOVE_WGT,0)) AS RELEASE_POSS_WGT
            --,NVL(A.CURRENT_WH_DELIVER_DATE, TO_CHAR(SYSDATE, 'YYYYMMDD')) CURRENT_WH_DELIVER_DATE
            ,A.CURRENT_WH_DELIVER_DATE AS CURRENT_WH_DELIVER_DATE
            ,A.HS_CD
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'INSIDE_CUST' AND CODE = 'INSIDE_CUST' ) AS INSIDE_CUST	--내부거래처코드
            ,A.LAST_SALE_EDATE
            ,A.SALSPLCE_CD
            ,A.EST_NO
            ,A.INCOME_DTR_DSCT_NUM
        FROM INVENTORY_MGMT_DELIVER A
             ,PO_ORDER_MST B
             ,ENTRY_MST C
             ,HLDC_PO_ITEM_MST D
             ,(SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
               GROUP BY T.DELIVER_NUM
              ) E
             ,(
              SELECT
                   A.DELIVER_NUM, NVL(SUM(B.PURCHASE_RETURN_QUANTITY),0) AS PURCHASE_RETURN_QUANTITY , NVL(SUM(B.PURCHASE_RETURN_WGT),0) AS PURCHASE_RETURN_WGT
              FROM SALE_ORDER_ITEM_MGMT A,
                   RELEASE_ITEM_MGMT B
              WHERE A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
              AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
              GROUP BY A.DELIVER_NUM
              ) F
             ,INVENTORY_MGMT_DELIVER X
        WHERE A.PO_ORDER_NUM = B.PO_ORDER_NUM
        AND A.ENTRY_NUM = C.ENTRY_NUM(+)	--내수도 조회
        AND A.ITEM_CD = D.ITEM_CODE(+)
        AND A.DELIVER_NUM = E.DELIVER_NUM(+)
        AND A.DELIVER_NUM = F.DELIVER_NUM(+)

        AND A.PO_ORDER_NUM = X.PO_ORDER_NUM(+)
        AND A.ITEM_CD = X.ITEM_CD(+)
        AND A.ITEM_SEQ = X.ITEM_SEQ(+)
        AND X.DELIVER_STATUS(+) = '10'      /*입고상태 - 가입고: 원물대체크용*/

        <#if startTerm?has_content>
            AND A.FIRST_DELIVER_DATE BETWEEN :startTerm AND :endTerm     /*입고일자*/
        </#if>
        <#if deliverType?has_content>
            AND A.DELIVER_TYPE = :deliverType        /*입고유형*/
        </#if>
        <#if deliverStatus?has_content>
            AND A.DELIVER_STATUS = :deliverStatus      /*입고상태*/
        </#if>
        <#if deliverFlag?has_content>
            <#if deliverFlag == "Y">	/* 재고구분:상품 */
                AND ( NVL(E.NONARRIV_ALT_YN,'N') = :deliverFlag OR A.PO_TYPE='20' )
            <#elseif deliverFlag == "N">	/* 재고구분:미착 */
                AND (NVL(E.NONARRIV_ALT_YN,'N') = :deliverFlag  AND A.PO_TYPE='10' )
            </#if>
        </#if>
         <#if search?has_content>
             <#if searchContents?has_content>
                <#if search == "A">	/* PO No */
                    AND A.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
                <#elseif search == "B">	/* 창고명 */
                      AND A.WH_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "C">	/* 매입처명 */
                    AND A.SPLR_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "D">	/* 매출처명 */
                    AND A.SALSPLCE_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "E">	/* 품목명 */
                    AND A.ITEM_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "F">	/* B/L NO */
                    AND EXISTS (
                       SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                       WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                       AND A.ITEM_CD = T.ITEM_CD
                       AND A.ITEM_SEQ = T.ITEM_SEQ
                       AND ( UPPER(T.ITEM_BL_NUM) LIKE '%'||UPPER(:searchContents)||'%' OR  UPPER(B.BL_NUM) LIKE '%'||UPPER(:searchContents)||'%' )
                    )
                   </#if>
               </#if>
        </#if>
         <#if attachDept?has_content>
            AND A.ATTACH_DEPT =:attachDept      /*귀속부서*/
        </#if>
         <#if deliverNum?has_content>
            AND A.DELIVER_NUM =:deliverNum      /*입고번호*/
        </#if>
        <#if chkInventoryYn?has_content>
            <#if chkInventoryYn == "N">
               AND   NVL(A.DELIVER_QUANTITY,0)
                       + NVL(F.PURCHASE_RETURN_QUANTITY,0)
                        -
                     (NVL(A.RELEASE_WAIT_QUANTITY,0)
                    + NVL(A.ORDER_REMAIN_QUANTITY,0)
                    + NVL(A.RELEASE_END_QUANTITY,0)
                    + NVL(A.RMA_QUANTITY,0)
                    + NVL(A.WH_MOVE_QUANTITY,0)
                    + NVL(A.INVENTORY_CONTROL_QUANTITY,0))
                    >0
            </#if>
          <#else>
               AND   NVL(A.DELIVER_QUANTITY,0)
                       + NVL(F.PURCHASE_RETURN_QUANTITY,0)
                        -
                     (NVL(A.RELEASE_WAIT_QUANTITY,0)
                    + NVL(A.ORDER_REMAIN_QUANTITY,0)
                    + NVL(A.RELEASE_END_QUANTITY,0)
                    + NVL(A.RMA_QUANTITY,0)
                    + NVL(A.WH_MOVE_QUANTITY,0)
                    + NVL(A.INVENTORY_CONTROL_QUANTITY,0))

                    >0
          </#if>
         ORDER BY A.DELIVER_NUM DESC, A.PO_ORDER_NUM
        ]]></statement>        

    <!-- 재고현황(외부거래처) 목록을 조회한다. -->
    <statement name="selectInventoryStatusCustList" type="select">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectInventoryStatusCustList
        */
        <![CDATA[
        SELECT
             0 CHK
            ,A.DELIVER_TYPE
            ,A.FIRST_DELIVER_DATE
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'DELIVER_TYPE' AND CODE = A.DELIVER_TYPE ) AS DELIVER_TYPE_NM
            ,A.DELIVER_STATUS
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'DELIVER_STATUS' AND CODE = A.DELIVER_STATUS ) AS DELIVER_STATUS_NM
            ,A.ATTACH_DEPT
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'ATTACH_DEPT' AND CODE = A.ATTACH_DEPT ) AS ATTACH_DEPT_NM
            ,A.PO_TYPE
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'PO_TYPE' AND CODE = A.PO_TYPE ) AS PO_TYPE_NM
            ,A.SALE_TYPE
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'SALE_TYPE' AND CODE = A.PO_TYPE ) AS SALE_TYPE_NM
            ,A.DELIVER_NUM
            ,A.PO_ORDER_NUM
            ,A.ITEM_CD
            ,A.ITEM_SEQ
            ,D.ITEM_NAME||' '||D.ITEM_SIZE AS ITEM_NM
            ,A.SPLR_NM
            ,A.SALSPLCE_NM
            ,A.WH_CD
            ,A.WH_NM
            ,A.UNIT
            ,(SELECT SET1 FROM   SCC_COMMON_CODE A WHERE  A.GROUP_CODE = 'ITEM_UNIT' AND    A.USE_YN = 'Y' AND A.CODE = A.UNIT ) SET1
            ,A.DELIVER_QUANTITY
            ,A.DELIVER_WGT
            ,E.NONARRIV_ALT_YN
            ,(SELECT DECODE(A.PO_TYPE,'10',CODE_NAME,'상품') FROM SCC_COMMON_CODE WHERE  GROUP_CODE = '재고구분' AND CODE = NVL(E.NONARRIV_ALT_YN,'N')) AS NONARRIV_FLAG

            ,ROUND(CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                CASE WHEN X.DELIVER_NUM IS NOT NULL THEN    --가입고건이면 수입면허의 원물대 가져오기
                   (SELECT T.ENTRY_REQ_WONWTR_AMT FROM ENTRY_ITEM_DETAIL T
                    WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                    AND A.ITEM_CD = T.ITEM_CD
                    AND A.ITEM_SEQ = T.ITEM_SEQ
                    )
                    *
                    A.LSHIP_EXCHANGE_RATE
                ELSE										--정상건이면 구매에서 가져오기
                   /*
                   (SELECT T.WONWTR_AMT_KRW FROM PO_ORDER_ITEM_DETAIL T
                    WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                    --AND A.ITEM_CD = T.ITEM_CD
                    AND A.ITEM_SEQ = T.ITEM_SEQ
                    )
                    */
                    ROUND(A.DELIVER_AMT)
                END
             ELSE
                   A.DELIVER_AMT
             END) WONWTR_AMT  --원물대 금액
            ,A.LSHIP_EXCHANGE_RATE

            ,CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                   ROUND((A.DELIVER_AMT+ NVL(E.DIV_AMT,0)))
                   /*
                   (
                   SELECT T.WONWTR_AMT_KRW FROM PO_ORDER_ITEM_DETAIL T
                   WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                   )
                   +
                  NVL(E.DIV_AMT,0)
                  */
             ELSE
                   A.DELIVER_AMT
             END DELIVER_AMT

            ,CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                  ROUND(((A.DELIVER_AMT+ NVL(E.DIV_AMT,0))/A.LSHIP_EXCHANGE_RATE),2)
             ELSE
                   A.DELIVER_AMT
             END DELIVER_AMT_USD
            ,A.DELIVER_UPRICE_FOREIGN_CURRENC
            ,A.DELIVER_UPRICE_KRW
            ,ROUND(A.DELIVER_AMT) TOT_AMT_USD	/*총 금액_USD*/
            ,ROUND(A.DELIVER_QUANTITY * A.DELIVER_UPRICE_KRW) TOT_AMT_KRW	/*총 금액 KRW*/
            ,CASE WHEN A.PO_TYPE= '10' THEN    --수입(KRW)
                 B.BL_NUM
             ELSE
                (
                  SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                  WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                  AND A.ITEM_CD = T.ITEM_CD
                  AND A.ITEM_SEQ = T.ITEM_SEQ
                )
             END AS BL_NUM
            ,A.ENTRY_NUM
            ,A.ENTRY_ITEM_SEQ
            ,C.INCOME_LIC_NUM
            ,C.LIC_DATE
            ,A.MFG_DATE                    /*제조일자*/
            ,A.DTR_LIMT                    /*유통기한*/
            ,A.RELEASE_WAIT_QUANTITY       /*출고대기수량*/
            ,A.RELEASE_WAIT_WGT            /*출고대기중량*/
            ,A.RELEASE_END_QUANTITY        /**출고완료수량*/
            ,A.RELEASE_END_WGT             /**출고완료중량*/

            ,A.ORDER_REMAIN_QUANTITY	/**주문수량*/
            ,A.ORDER_REMAIN_WGT					/**주문중량*/

            ,NVL(F.PURCHASE_RETURN_QUANTITY,0) AS PURCHASE_RETURN_QUANTITY   --환입수량
            ,NVL(F.PURCHASE_RETURN_WGT,0) AS PURCHASE_RETURN_WGT		     --환입중량

            ,NVL(A.RELEASE_WAIT_WGT,0) -NVL(A.RELEASE_END_QUANTITY,0)  RELEASE_END_REMAIN_QTY  /**출고완료잔량*/
            ,A.RMA_QUANTITY				   /*반품수량*/
            ,A.RMA_WGT					   /*반품중량*/
            ,A.WH_MOVE_QUANTITY            /*창고이동수량*/
            ,A.WH_MOVE_WGT                 /*창고이동중량*/
            ,A.INVENTORY_CONTROL_QUANTITY
            ,A.INVENTORY_CONTROL_WGT
            --출고가능수량 : 입고수량-출고대기수량-출고완료수량-반품수량-창고이동수량
            ,(NVL(A.DELIVER_QUANTITY,0) - NVL(A.ORDER_REMAIN_QUANTITY,0) - NVL(A.RELEASE_WAIT_QUANTITY,0) - NVL(A.RELEASE_END_QUANTITY,0) - NVL(A.RMA_QUANTITY,0) - NVL(A.WH_MOVE_QUANTITY,0)) + NVL(F.PURCHASE_RETURN_QUANTITY,0) AS RELEASE_POSS_QUANTITY
            ,(NVL(A.DELIVER_WGT,0) - NVL(A.ORDER_REMAIN_WGT,0) - NVL(A.RELEASE_WAIT_WGT,0) - NVL(A.RELEASE_END_WGT,0) - NVL(A.RMA_WGT,0) - NVL(A.WH_MOVE_WGT,0)) + NVL(F.PURCHASE_RETURN_WGT,0) AS RELEASE_POSS_WGT
            --,NVL(A.CURRENT_WH_DELIVER_DATE, TO_CHAR(SYSDATE, 'YYYYMMDD')) CURRENT_WH_DELIVER_DATE
            ,A.CURRENT_WH_DELIVER_DATE AS CURRENT_WH_DELIVER_DATE
            ,A.HS_CD
            ,(SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'INSIDE_CUST' AND CODE = 'INSIDE_CUST' ) AS INSIDE_CUST	--내부거래처코드
            ,A.LAST_SALE_EDATE
            ,A.SALSPLCE_CD
            ,A.EST_NO
            ,A.INCOME_DTR_DSCT_NUM
        FROM INVENTORY_MGMT_DELIVER A
             ,PO_ORDER_MST B
             ,ENTRY_MST C
             ,HLDC_PO_ITEM_MST D
             ,(SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
               GROUP BY T.DELIVER_NUM
              ) E
             ,(
              SELECT
                   A.DELIVER_NUM, NVL(SUM(B.PURCHASE_RETURN_QUANTITY),0) AS PURCHASE_RETURN_QUANTITY , NVL(SUM(B.PURCHASE_RETURN_WGT),0) AS PURCHASE_RETURN_WGT
              FROM SALE_ORDER_ITEM_MGMT A,
                   RELEASE_ITEM_MGMT B
              WHERE A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
              AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
              GROUP BY A.DELIVER_NUM
              ) F
             ,INVENTORY_MGMT_DELIVER X
        WHERE A.PO_ORDER_NUM = B.PO_ORDER_NUM
        AND A.ENTRY_NUM = C.ENTRY_NUM(+)	--내수도 조회
        AND A.ITEM_CD = D.ITEM_CODE(+)
        AND A.DELIVER_NUM = E.DELIVER_NUM(+)
        AND A.DELIVER_NUM = F.DELIVER_NUM(+)

        AND A.PO_ORDER_NUM = X.PO_ORDER_NUM(+)
        AND A.ITEM_CD = X.ITEM_CD(+)
        AND A.ITEM_SEQ = X.ITEM_SEQ(+)
        AND X.DELIVER_STATUS(+) = '10'      /*입고상태 - 가입고: 원물대체크용*/
        AND A.SALSPLCE_CD = :custcd
        <#if startTerm?has_content>
            AND A.FIRST_DELIVER_DATE BETWEEN :startTerm AND :endTerm     /*입고일자*/
        </#if>
        <#if deliverType?has_content>
            AND A.DELIVER_TYPE = :deliverType        /*입고유형*/
        </#if>
        <#if deliverStatus?has_content>
            AND A.DELIVER_STATUS = :deliverStatus      /*입고상태*/
        </#if>
        <#if deliverFlag?has_content>
            <#if deliverFlag == "Y">	/* 재고구분:상품 */
                AND ( NVL(E.NONARRIV_ALT_YN,'N') = :deliverFlag OR A.PO_TYPE='20' )
            <#elseif deliverFlag == "N">	/* 재고구분:미착 */
                AND (NVL(E.NONARRIV_ALT_YN,'N') = :deliverFlag  AND A.PO_TYPE='10' )
            </#if>
        </#if>
         <#if search?has_content>
             <#if searchContents?has_content>
                <#if search == "A">	/* PO No */
                    AND A.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
                <#elseif search == "B">	/* 창고명 */
                      AND A.WH_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "C">	/* 매입처명 */
                    AND A.SPLR_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "D">	/* 매출처명 */
                    AND A.SALSPLCE_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "E">	/* 품목명 */
                    AND A.ITEM_NM LIKE '%'||:searchContents||'%'
                <#elseif search == "F">	/* B/L NO */
                    AND EXISTS (
                       SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                       WHERE A.PO_ORDER_NUM = T.PO_ORDER_NUM
                       AND A.ITEM_CD = T.ITEM_CD
                       AND A.ITEM_SEQ = T.ITEM_SEQ
                       AND ( UPPER(T.ITEM_BL_NUM) LIKE '%'||UPPER(:searchContents)||'%' OR  UPPER(B.BL_NUM) LIKE '%'||UPPER(:searchContents)||'%' )
                    )
                   </#if>
               </#if>
        </#if>
         <#if attachDept?has_content>
            AND A.ATTACH_DEPT =:attachDept      /*귀속부서*/
        </#if>
         <#if deliverNum?has_content>
            AND A.DELIVER_NUM =:deliverNum      /*입고번호*/
        </#if>
        <#if chkInventoryYn?has_content>
            <#if chkInventoryYn == "N">
               AND   NVL(A.DELIVER_QUANTITY,0)
                       + NVL(F.PURCHASE_RETURN_QUANTITY,0)
                        -
                     (NVL(A.RELEASE_WAIT_QUANTITY,0)
                    + NVL(A.ORDER_REMAIN_QUANTITY,0)
                    + NVL(A.RELEASE_END_QUANTITY,0)
                    + NVL(A.RMA_QUANTITY,0)
                    + NVL(A.WH_MOVE_QUANTITY,0)
                    + NVL(A.INVENTORY_CONTROL_QUANTITY,0))
                    >0
            </#if>
          <#else>
               AND   NVL(A.DELIVER_QUANTITY,0)
                       + NVL(F.PURCHASE_RETURN_QUANTITY,0)
                        -
                     (NVL(A.RELEASE_WAIT_QUANTITY,0)
                    + NVL(A.ORDER_REMAIN_QUANTITY,0)
                    + NVL(A.RELEASE_END_QUANTITY,0)
                    + NVL(A.RMA_QUANTITY,0)
                    + NVL(A.WH_MOVE_QUANTITY,0)
                    + NVL(A.INVENTORY_CONTROL_QUANTITY,0))

                    >0
          </#if>
         ORDER BY A.DELIVER_NUM DESC, A.PO_ORDER_NUM
        ]]>
    </statement>


    <!-- 부대비배부 목록을 조회한다. -->
    <statement name="selectDeliverNumOtheramtDivListPop"
        type="select">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectDeliverNumOtheramtDivListPop
        */
        <![CDATA[
        SELECT
               A.ITEM_CD
              ,A.ITEM_NM
              ,A.DELIVER_NUM
              ,B.COMM_CLASS
              ,(
                SELECT T.CODE_NAME
                FROM   SCC_COMMON_CODE T
                WHERE  T.GROUP_CODE = 'COMM_CLASS'
                AND     b.comm_class = T.CODE
                AND    T.USE_YN = 'Y'
              ) comm_class_NM
              ,B.DIV_SEQ
              ,B.DIV_AMT
              ,B.DIV_DATE
              ,C.COMM_AMT
        FROM INVENTORY_MGMT_DELIVER A, DELIVERITEM_OTHER_AMT_DIV B
            ,PO_ORDER_OTHER_AMT C
        WHERE A.DELIVER_NUM=B.DELIVER_NUM
        AND A.PO_ORDER_NUM = C.PO_ORDER_NUM
        AND B.COMM_CLASS = C.COMM_CLASS
        AND B.OTHER_AMT_SEQ = C.OTHER_AMT_SEQ
        AND A.PO_ORDER_NUM=:poOrderNum
        <#if deliverNum?has_content>
            AND A.DELIVER_NUM=:deliverNum
        </#if>
        ORDER BY B.DELIVER_NUM, B.DIV_SEQ
        ]]>
    </statement>

    <!-- 부대비배부 목록을 조회한다. -->
    <statement name="selectDeliverNumOtheramtDivListPop2"
        type="select">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectDeliverNumOtheramtDivListPop2
        */
        <![CDATA[
            SELECT
                   B.COMM_CLASS
                  ,(
                    SELECT T.CODE_NAME
                    FROM   SCC_COMMON_CODE T
                    WHERE  T.GROUP_CODE = 'COMM_CLASS'
                    AND     b.comm_class = T.CODE
                    AND    T.USE_YN = 'Y'
                  ) comm_class_NM
                  ,SUM(B.DIV_AMT) DIV_AMT
            FROM INVENTORY_MGMT_DELIVER A, DELIVERITEM_OTHER_AMT_DIV B
                ,PO_ORDER_OTHER_AMT C
            WHERE A.DELIVER_NUM=B.DELIVER_NUM
            AND A.PO_ORDER_NUM = C.PO_ORDER_NUM
            AND B.COMM_CLASS = C.COMM_CLASS
            AND B.OTHER_AMT_SEQ = C.OTHER_AMT_SEQ
            AND A.PO_ORDER_NUM=:poOrderNum
            <#if deliverNum?has_content>
                AND A.DELIVER_NUM=:deliverNum
            </#if>
            GROUP BY B.COMM_CLASS
            ORDER BY B.COMM_CLASS DESC
        ]]>
    </statement>

    <!-- 재고조정 목록을 조회한다. -->
    <statement name="selectInventoryControlPop" type="select">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectInventoryControlPop
        */
        <![CDATA[
        SELECT
             A.DELIVER_NUM
            ,A.PO_ORDER_NUM
            ,A.ITEM_CD
            ,A.ITEM_NM
            ,A.WH_CD
            ,A.WH_NM
            ,A.UNIT
            ,A.DELIVER_UPRICE_FOREIGN_CURRENC
            ,A.DELIVER_QUANTITY
            ,A.DELIVER_WGT
            ,A.DELIVER_AMT

           ,NVL(A.DELIVER_QUANTITY, 0)
             +NVL(F.PURCHASE_RETURN_QUANTITY, 0)
             -
             (NVL(A.RELEASE_WAIT_QUANTITY, 0)
             +NVL(A.ORDER_REMAIN_QUANTITY, 0)
             +NVL(A.RELEASE_END_QUANTITY, 0)
             + NVL(A.RMA_QUANTITY, 0)
             +NVL(A.WH_MOVE_QUANTITY, 0) +
              NVL(A.INVENTORY_CONTROL_QUANTITY, 0)
             ) RELEASE_POSS_QUANTITY /*출고가능수량*/


            ,NVL(A.DELIVER_WGT, 0)
             +NVL(F.PURCHASE_RETURN_WGT, 0)
            -
             (NVL(A.RELEASE_WAIT_WGT, 0)
             +NVL(A.ORDER_REMAIN_WGT, 0)
             + NVL(A.RELEASE_END_WGT, 0)
             + NVL(A.RMA_WGT, 0)
             + NVL(A.WH_MOVE_WGT, 0)
             + NVL(A.INVENTORY_CONTROL_WGT, 0)) RELEASE_POSS_WGT

            ,B.SEQ
            ,B.INVENTORY_MODIFY_TYPE
            ,B.CONTROL_DATE
            ,B.CONTROL_QUANTITY
            ,B.CONTROL_WGT
            ,B.CONTROL_AMT
            ,B.SLIP_NUM AS FISCAL_SLIP_NUM
            ,B.CONTROL_REASON
        FROM INVENTORY_MGMT_DELIVER A
            ,INVENTORY_CONTROL_LOG B
           ,(
              SELECT
                   A.DELIVER_NUM, NVL(SUM(B.PURCHASE_RETURN_QUANTITY),0) AS PURCHASE_RETURN_QUANTITY , NVL(SUM(B.PURCHASE_RETURN_WGT),0) AS PURCHASE_RETURN_WGT
              FROM SALE_ORDER_ITEM_MGMT A,
                   RELEASE_ITEM_MGMT B
              WHERE A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
              AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
              GROUP BY A.DELIVER_NUM
            ) F
        WHERE 1=1
        AND A.DELIVER_NUM = B.DELIVER_NUM(+)
        AND A.DELIVER_NUM = F.DELIVER_NUM(+)
        AND A.DELIVER_NUM = :deliverNum
        ]]>
    </statement>

    <!-- 재고조정 목록을 조회한다. -->
    <statement name="selectRmaPop" type="select">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectRmaPop */
        <![CDATA[
        SELECT
             A.DELIVER_NUM
            ,A.ITEM_CD
            ,A.ITEM_NM
            ,A.WH_CD
            ,A.WH_NM
            ,A.UNIT
            ,CASE WHEN A.RMA_QUANTITY > 0 THEN
                '+'
             ELSE
                '-'
             END  RMA_MODIFY_TYPE
            ,A.DELIVER_UPRICE_FOREIGN_CURRENC
            ,A.DELIVER_QUANTITY
            ,A.DELIVER_WGT
            ,A.DELIVER_AMT
            ,A.RMA_QUANTITY
            ,A.RMA_WGT
        FROM INVENTORY_MGMT_DELIVER A
        WHERE 1=1
        AND A.DELIVER_NUM = :deliverNum
        ]]>
    </statement>

    <!-- 부대비 배부된 합계 금액을 조회한다. -->
    <statement name="selectSumtDeliverList" type="select">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectSumtDeliverList
        */
        <![CDATA[
        SELECT SUM(A.COMM_AMT) COMM_AMT_SUM
        FROM PO_ORDER_OTHER_AMT A
             ,(
                SELECT *
                FROM   SCC_COMMON_CODE T
                WHERE  T.GROUP_CODE = 'COMM_CLASS'
                AND    T.USE_YN = 'Y'
              ) B
        WHERE 1=1
        AND A.COMM_CLASS = B.CODE
        AND A.PO_ORDER_NUM =:poOrderNum
        AND B.ATTR02 ='Y'
        UNION ALL
        SELECT SUM(B.DIV_AMT) FROM INVENTORY_MGMT_DELIVER A, DELIVERITEM_OTHER_AMT_DIV B
        WHERE A.DELIVER_NUM = B.DELIVER_NUM
        AND A.PO_ORDER_NUM =:poOrderNum
        ]]>
    </statement>

    <!-- 가입고시 추가되는 ItemSeq를 조회한다. -->
    <statement name="getItemSeq" type="select">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.getItemSeq */
        <![CDATA[
        SELECT
            NVL(MAX(ITEM_SEQ),0) +1 ITEM_SEQ   /* 순번     */
        FROM PO_ORDER_ITEM_DETAIL A
        WHERE A.PO_ORDER_NUM =:poOrderNum
        ]]>
    </statement>

    <!-- 판매주문시 주문잔여 수량(을)를 수정한다. -->
    <statement name="updateOrderRemainQuantity" type="update">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateOrderRemainQuantity
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
               <#if flag == "I">	/* 신규 */
                       ORDER_REMAIN_QUANTITY = NVL(ORDER_REMAIN_QUANTITY, 0) + :orderRemainQuantity,
                       ORDER_REMAIN_WGT      = NVL(ORDER_REMAIN_WGT, 0) + :orderRemainWgt,
               <#elseif flag == "U">	/* 수정 */
                       ORDER_REMAIN_QUANTITY = ORDER_REMAIN_QUANTITY + :orderRemainQuantity ,	--잔여수량 : 주문 - 출고수량
                       ORDER_REMAIN_WGT = ORDER_REMAIN_WGT + :orderRemainWgt ,	--잔여중량 : 주문 - 출고중량
               <#elseif flag == "D">	/* 삭제 */
                       ORDER_REMAIN_QUANTITY = NVL(ORDER_REMAIN_QUANTITY, 0) - :orderRemainQuantity,	--잔여수량 : 주문 - 출고수량
                       ORDER_REMAIN_WGT = NVL(ORDER_REMAIN_WGT, 0) - :orderRemainWgt,	--잔여중량 : 주문 - 출고중량

               </#if>
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum
        ]]>
    </statement>

    <!-- 판매주문시 주문잔여 수량(을)를 수정한다. -->
    <statement name="updateBuycst" type="update">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateBuycst
        */
        <![CDATA[
        UPDATE SALE_ORDER_ITEM_MGMT SET
               BUY_CST = NVL(BUY_CST, 0) + :remainBuyCst,	--수입원가 보정
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  SALE_ORDER_NUM = :saleOrderNum
        AND    SALE_ORDER_NUM_SEQ = :saleOrderNumSeq
        ]]>
    </statement>

    <!-- 출고시 매입원가 보정한다. -->
    <statement name="updateBuycst2" type="update">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateBuycst2
        */
        <![CDATA[
        UPDATE RELEASE_ITEM_MGMT SET
               BUY_CST = NVL(BUY_CST, 0) + :remainBuyCst,	--수입원가 보정
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  RELEASE_NUM = :releaseNum
        ]]>
    </statement>

    <!-- 중량변경시 매입원가 보정한다. -->
    <statement name="updateBuycst3" type="update">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateBuycst3
        */
        <![CDATA[
        UPDATE RELEASE_ITEM_MGMT SET
               BUY_CST = :remainBuyCst,	--수입원가 보정
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  RELEASE_NUM = :releaseNum
        ]]>
    </statement>

    <!-- 판매주문시 출고대기 수량(을)를 수정한다. -->
    <statement name="updateReleaseWaitQuantity" type="update">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateReleaseWaitQuantity
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
               <#if flag == "I">	/* 신규 */
                     <#if releaseExpectQuantity?exists> RELEASE_WAIT_QUANTITY = NVL(RELEASE_WAIT_QUANTITY, 0) + :releaseExpectQuantity, </#if>
                     <#if releaseExpectWgt?exists> RELEASE_WAIT_WGT = NVL(RELEASE_WAIT_WGT, 0) + :releaseExpectWgt, </#if>
               <#elseif flag == "U">	/* 수정 */
                     <#if releaseExpectQuantity?exists> RELEASE_WAIT_QUANTITY = NVL(RELEASE_WAIT_QUANTITY, 0) + :releaseExpectQuantity, </#if>
                     <#if releaseExpectWgt?exists> RELEASE_WAIT_WGT = NVL(RELEASE_WAIT_WGT, 0) + :releaseExpectWgt, </#if>
               <#elseif flag == "D">	/* 삭제 */
                     <#if releaseExpectQuantity?exists> RELEASE_WAIT_QUANTITY = NVL(RELEASE_WAIT_QUANTITY, 0) - :releaseExpectQuantity , </#if>
                     <#if releaseExpectWgt?exists> RELEASE_WAIT_WGT = NVL(RELEASE_WAIT_WGT, 0) - :releaseExpectWgt , </#if>
               </#if>
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum
        ]]>
    </statement>

    <!-- 판매주문시 출고완료 수량(을)를 수정한다. -->
    <statement name="updateReleaseEndQuantity" type="update">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateReleaseEndQuantity
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
               <#if flag == "I">	/* 신규 */
                     <#if releaseExpectQuantity?exists> RELEASE_END_QUANTITY = NVL(RELEASE_END_QUANTITY, 0) + :releaseExpectQuantity, </#if>
                     <#if releaseExpectWgt?exists> RELEASE_END_WGT = NVL(RELEASE_END_WGT, 0) + :releaseExpectWgt, </#if>
               <#elseif flag == "U">	/* 수정 */
                     <#if releaseExpectQuantity?exists> RELEASE_END_QUANTITY = NVL(RELEASE_END_QUANTITY, 0) + :releaseExpectQuantity, </#if>
                     <#if releaseExpectWgt?exists> RELEASE_END_WGT = NVL(RELEASE_END_WGT, 0) + :releaseExpectWgt, </#if>
               <#elseif flag == "D">	/* 삭제 */
                     <#if releaseExpectQuantity?exists> RELEASE_END_QUANTITY = NVL(RELEASE_END_QUANTITY, 0) - :releaseExpectQuantity , </#if>
                     <#if releaseExpectWgt?exists> RELEASE_END_WGT = NVL(RELEASE_END_WGT, 0) - :releaseExpectWgt , </#if>
               </#if>
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum
        ]]>
    </statement>

    <!-- 환입시 입고수량을 수정한다. -->
    <statement name="updatDeliverQuantity" type="update">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updatDeliverQuantity
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
               DELIVER_QUANTITY = NVL(DELIVER_QUANTITY, 0) + :deliverQuantity ,
               DELIVER_WGT = NVL(DELIVER_WGT, 0) + :deliverWgt ,
               DELIVER_AMT = NVL(DELIVER_AMT, 0) + :deliverAmt ,
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum
        ]]>
    </statement>

    <!-- 중량변경에 따른 입고금액을 수정한다. -->
    <statement name="updatDeliverAmt" type="update">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updatDeliverAmt
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
               DELIVER_AMT = :deliverAmt ,
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum
        ]]>
    </statement>

    <!-- 재고조정 누적 수량(을)를 수정한다. -->
    <statement name="updateInventoryControlQuantity" type="update">
        /*+
        com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.updateOrderRemainQuantity
        */
        <![CDATA[
        UPDATE INVENTORY_MGMT_DELIVER SET
               INVENTORY_CONTROL_QUANTITY = NVL(INVENTORY_CONTROL_QUANTITY, 0) + :inventoryControlQuantity,
               INVENTORY_CONTROL_WGT      = NVL(INVENTORY_CONTROL_WGT, 0) + :inventoryControlWgt,
               UUSER = :loginSabun,
               UDATE = SYSDATE
        WHERE  DELIVER_NUM = :deliverNum
        ]]>
    </statement>


    <!--업장에 custcd 가져오기 -->
    <statement name="selectCustCd" type="select">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectCustCd */
        <![CDATA[
            SELECT A.CUSTCD FROM  ST_UPJANG A
            WHERE A.UPJANG=:upjang


        ]]>
    </statement>

    <!-- 수입원가를 조회한다. -->
    <statement name="selectIncomeCst" type="select">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectIncomeCst */
        <![CDATA[
       SELECT
               A.DELIVER_NUM
               ,CASE WHEN A.PO_TYPE = '10' THEN
                    ROUND(D.WONWTR_AMT_KRW +NVL(C.DIV_AMT,0))
                ELSE
                    A.DELIVER_AMT
                END AS BUY_CST  --수입원가
               ,E.BUY_CST AS ORG_BUY_CST
               ,A.DELIVER_QUANTITY
               ,NVL(A.DELIVER_QUANTITY,0) - NVL(E.ORDER_QUANTITY,0) AS REMAIN_ORDER_QUANTITY
               ,ROUND(D.WONWTR_AMT_KRW +NVL(C.DIV_AMT,0)) - E.BUY_CST AS REMAIN_BUY_CST
        FROM INVENTORY_MGMT_DELIVER A
            ,(SELECT T.DELIVER_NUM
                , ROUND(SUM(T.DIV_AMT)) AS DIV_AMT
                  FROM DELIVERITEM_OTHER_AMT_DIV T
                       ,INVENTORY_MGMT_DELIVER T2
                  WHERE T.DELIVER_NUM = T2.DELIVER_NUM
                 GROUP BY T.DELIVER_NUM
             ) C
            ,(
             SELECT PO_ORDER_NUM, SUM(WONWTR_AMT_KRW) AS WONWTR_AMT_KRW
                   FROM PO_ORDER_ITEM_DETAIL T
                   GROUP BY PO_ORDER_NUM
             ) D
            ,(
             SELECT
                  A.DELIVER_NUM
                  , SUM(A.BUY_CST) AS BUY_CST
                  ,SUM(A.ORDER_QUANTITY) AS ORDER_QUANTITY
             FROM SALE_ORDER_ITEM_MGMT A
             GROUP BY A.DELIVER_NUM
             ) E
        WHERE 1=1
        AND  A.DELIVER_NUM = C.DELIVER_NUM(+)
        AND  A.PO_ORDER_NUM = D.PO_ORDER_NUM(+)
        AND  A.DELIVER_NUM = E.DELIVER_NUM(+)
        AND A.DELIVER_NUM = :deliverNum

        ]]>
    </statement>

    <!-- 수입원가를 조회한다. -->
    <statement name="selectIncomeCst2" type="select">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.selectIncomeCst2 */
        <![CDATA[
     SELECT
               A.DELIVER_NUM
               ,CASE WHEN A.PO_TYPE = '10' THEN
                    ROUND(A.DELIVER_AMT +NVL(C.DIV_AMT,0))
                ELSE
                    A.DELIVER_AMT
                END AS BUY_CST  --수입원가
               --,ROUND(D.WONWTR_AMT_KRW +NVL(C.DIV_AMT,0))   AS BUY_CST  --수입원가
               ,NVL(E.BUY_CST,0) AS ORG_BUY_CST
               ,NVL( CASE WHEN A.UNIT = 'KG' THEN
                         A.DELIVER_WGT
                     ELSE
                         A.DELIVER_QUANTITY
                     END
                ,0) AS DELIVER_QUANTITY

               ,NVL( CASE WHEN A.UNIT = 'KG' THEN
                         A.DELIVER_WGT - NVL(A.WH_MOVE_WGT,0) - NVL(A.RMA_WGT,0)
                     ELSE
                         A.DELIVER_QUANTITY  - NVL(A.WH_MOVE_QUANTITY,0) - NVL(A.RMA_QUANTITY,0)
                     END
                ,0) AS FOC_DELIVER_QUANTITY

               ,NVL( CASE WHEN A.UNIT = 'KG' THEN
                         NVL(A.DELIVER_WGT,0) - NVL(E.ORDER_WGT,0)
                     ELSE
                         NVL(A.DELIVER_QUANTITY,0) - NVL(E.ORDER_QUANTITY,0)
                     END
                ,0) AS REMAIN_ORDER_QUANTITY
               ,ROUND(A.DELIVER_AMT +NVL(C.DIV_AMT,0)) - NVL(E.BUY_CST,0) AS REMAIN_BUY_CST
        FROM INVENTORY_MGMT_DELIVER A
            ,(
                SELECT
                     X.PO_ORDER_NUM
                     ,SUM( Y.DIV_AMT) AS DIV_AMT

                  FROM PO_ORDER_MST X
                     --, PO_ORDER_OTHER_AMT Y
                     ,(
                           SELECT
                               A.PO_ORDER_NUM,A.ENTRY_NUM,C.REMARKS,A.ENTRY_ITEM_SEQ,C.COMM_AMT,C.PAY_SCHD_DATE,C.SLIP_PUBLISH_DATE,C.TAX_BILL_NUM,C.BILL_PUBLISHDD
                               , C.NONARRIV_SLIP_CREATION_YN
                               , C.SLIP_NUM AS ORG_SLIP_NUM
                               ,B.*
                           FROM INVENTORY_MGMT_DELIVER A
                               ,DELIVERITEM_OTHER_AMT_DIV B
                               ,PO_ORDER_OTHER_AMT  C
                           WHERE A.DELIVER_NUM = B.DELIVER_NUM
                           AND A.PO_ORDER_NUM = C.PO_ORDER_NUM
                           AND B.OTHER_AMT_SEQ =C.OTHER_AMT_SEQ
                           AND A.DELIVER_NUM =:deliverNum
                           --AND A.DELIVER_TYPE='10'  --발주입고
                      ) Y
                     , ENTRY_MST R
                     , ENTRY_ITEM_DETAIL Q
                     , FT_SAP_INTERFACE G
                     ,(
                        SELECT *
                        FROM   SCC_COMMON_CODE T
                        WHERE  T.GROUP_CODE = 'COMM_CLASS'
                        AND    T.USE_YN = 'Y'
                      ) H
                      , FT_SAP_INTERFACE Z
                      , SAP_IF.SAP_IFC_SLIP_MST Q
                 WHERE 1 = 1
                   AND X.PO_ORDER_NUM = Y.PO_ORDER_NUM
                   AND R.ENTRY_NUM = Q.ENTRY_NUM
                   AND Q.ENTRY_NUM =Y.ENTRY_NUM
                   AND Q.ENTRY_ITEM_SEQ = Y.ENTRY_ITEM_SEQ
                   AND Y.ALT_FISCAL_SLIP_NUM = G.SLIP_NUM(+)
                   AND Y.ORG_SLIP_NUM = Z.SLIP_NUM(+)
                   AND Y.COMM_CLASS = H.CODE(+)
                   AND Y.ORG_SLIP_NUM = Q.SLIP_NUM(+)
                   --AND Z.SLIP_STATUS = 'P'  --전표확정 건만
                   --AND Y.DIV_AMT >0    --창고이동 감안
                   GROUP BY X.PO_ORDER_NUM
             ) C
            ,(
             SELECT PO_ORDER_NUM, SUM(WONWTR_AMT_KRW) AS WONWTR_AMT_KRW
                   FROM PO_ORDER_ITEM_DETAIL T
                   GROUP BY PO_ORDER_NUM
             ) D
            ,(
             SELECT
                  A.DELIVER_NUM
                  , SUM(B.BUY_CST) AS BUY_CST
                  ,SUM(B.RELEASE_QUANTITY) AS ORDER_QUANTITY
                  ,SUM(B.REAL_WGT) AS ORDER_WGT
             FROM SALE_ORDER_ITEM_MGMT A
                  ,RELEASE_ITEM_MGMT B
             WHERE A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
             AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
             GROUP BY A.DELIVER_NUM
             ) E
        WHERE 1=1
        AND  A.PO_ORDER_NUM = C.PO_ORDER_NUM(+)
        AND  A.PO_ORDER_NUM = D.PO_ORDER_NUM(+)
        AND  A.DELIVER_NUM = E.DELIVER_NUM(+)
        AND A.DELIVER_NUM=:deliverNum
        AND A.DELIVER_STATUS <> '10' --가입고 제외

        ]]>
    </statement>

    <!-- 출고 건수를 조회한다. -->
    <statement name="getReleaseCnt" type="select">
        /*+ com.hwfs.ft.fdm.dao.InventoryMgmtDeliverDAO.getReleaseCnt */
        <![CDATA[
            SELECT
                 NVL(X.DELIVER_QUANTITY, 0)
                 -
                 NVL(X.DELIVER_QUANTITY, 0) -
                 NVL(X.ORDER_REMAIN_QUANTITY, 0) -
                 NVL(X.RELEASE_WAIT_QUANTITY, 0) -
                 NVL(X.RELEASE_END_QUANTITY, 0) -
                 NVL(X.RMA_QUANTITY, 0) -
                 NVL(X.WH_MOVE_QUANTITY, 0) -
                 NVL(X.INVENTORY_CONTROL_QUANTITY, 0)
                 AS RELEASE_CNT
            FROM INVENTORY_MGMT_DELIVER X
            WHERE X.ENTRY_NUM=:entryNum
        ]]>
    </statement>

</hqml>
