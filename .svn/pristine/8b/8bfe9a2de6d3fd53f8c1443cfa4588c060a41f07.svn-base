<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/**
 * @fileOverview
 * Date 관련 공통 함수 모음
 */


 /**
 * @class 날짜에 대한 형식 체크
 * @param sDate  - 일자(yyyy-MM-dd 등)
 * @return boolean
 */   
function gfn_isDate(sDate)
{
	var stringWrapper = new String(sDate);
 	stringWrapper = stringWrapper.replace("/","").replace("/","");
 	stringWrapper = stringWrapper.replace("-","").replace("-","");
 	stringWrapper = stringWrapper.replace(".","").replace(".","");
	
	if( stringWrapper.toString().length !== 8 ) return false;
	
	var iMonth  = Math.floor(stringWrapper.slice(4,6), 10);
	var iDate   = Math.floor(stringWrapper.slice(6,8), 10);
		
	if( iMonth < 1 || iMonth > 12 ) return false;	
	if( iDate < 1 || iDate > gfn_getLastDateNum(stringWrapper) ) return false;	
	
	return true;
}

/**
 * @class 6자리 년월 날짜에 대한 형식 체크
 * @param sDate  - 일자(yyyyMM)
 * @return boolean
 */    
function gfn_isDate6(sDate)
{
	if (gfn_length(sDate) != 6) 
	{
		return false;
	}
	else if (!gfn_isDate(sDate + "01")) 
	{
		return false;
	}
	return true;
}

/**
 * @class 8자리 년월 날짜에 대한 형식 체크
 * @param sDate  - 일자(yyyyMMdd)
 * @return boolean
 */    
function gfn_isDate8(sDate)
{
	if (gfn_length(sDate) != 8) 
	{
		return false;
	}
	else if (!gfn_isDate(sDate)) 
	{
		return false;
	}
	return true;
}

/**
 * @class 시간 정합성 체크
 * @param val - 입력문자열
 * @return Boolean 형식의 정합성 체크
 */
function gfn_isTime(val) 
{
    if (gfn_isDigit(val) != true) {
        return false;
    }
    
    if (val.trim().toString().length != 6) {
        return false;
    }
    
    var nHH = toNumber(val.toString().substr(0, 2));
    var nMM = toNumber(val.toString().substr(2, 2));
    var nSS = toNumber(val.toString().substr(4, 2));
    
    if(gfn_isNull(nHH) || gfn_isNull(nMM) || gfn_isNull(nMM)) {
        return false;
    }
    
    if(nHH > 23 || nHH < 0) {
        return false;
    }
    
    if(nMM > 59 || nMM < 0) {
        return false;
    }
    
    if(nSS > 59 || nSS < 0) {
        return false;
    }
    
    return true;
}

/**
 * @class 해당 PC의 오늘 날짜를 가져온다.
 * @return string 오늘 날짜
 */  
function gfn_today()
{
	var strToday = "";
	var objDate = new Date();

	var strToday = objDate.getFullYear().toString();
	strToday += gfn_right("0" + (objDate.getMonth() + 1), 2);
	strToday += gfn_right("0" + objDate.getDate(), 2);

	return strToday;
}

/**
 * 금주의 시작일자를 문자열 형태로 리턴한다.
 * @return 금주시작일자
 */
function gfn_getThisWeekBegin() 
{
	var today = new Date();
	var fromDate = new Date (today.getYear(), today.getMonth(), today.getDate() - today.getDay());
	return gfn_dateToStr(fromDate);
}

/**
 * 금월의 시작일자를 문자열 형태로 리턴한다.
 * @return 금월시작일자
 */
function gfn_getThisMonthBegin ()
{
	var strFrom = gfn_today();
	return (strFrom.substr(0, 6) + "01");
}

/**
 * 금분기의 시작일자를 문자열 형태로 리턴한다.
 * @return 금월시작일자
 */
function gfn_getThisQuarterBegin ()
{
	var strFrom = gfn_today();
	var strMonth = strFrom.substr(4, 2);
	var strQuarter;
	if (strMonth <= "03")
		strQuarter = "01";
	else if (strMonth <= "06")
		strQuarter = "04";
	else if (strMonth <= "09")
		strQuarter = "07";
	else
		strQuarter = "10";
		
	return (strFrom.substr(0, 4) + strQuarter + "01");
}

/**
 * 금년의 시작일자를 문자열 형태로 리턴한다.
 * @return 금월시작일자
 */
function gfn_getThisYearBegin ()
{
	var strFrom = gfn_today();
	return (strFrom.substr(0, 4) + "0101");
}

/**
 * Date타입의 날짜를 문자타입의 날짜로 변환하는 함수
 * @param date Date타입의 날짜
 * @return 문자타입의 날짜
 */
function gfn_dateToStr (date)
{
	var date = new Date(date);
	var strDate = date.toFormatString("%Y%m%d");

	return strDate;
}

/**
 * @class 해당 PC의 오늘 날짜와 시간를 가져온다.
 * @return string 오늘 날짜+시간
 */   
function gfn_todayTime()
{
	var strToday = "";
	var objDate = new Date();
	var sToday = objDate.getFullYear().toString();
	sToday += gfn_right("0" + (objDate.getMonth() + 1), 2);
	sToday += gfn_right("0" + objDate.getDate(), 2);
	sToday += gfn_right("0" + objDate.getHours(), 2);
	sToday += gfn_right("0" + objDate.getMinutes(), 2);
	sToday += gfn_right("0" + objDate.getSeconds(), 2);
	// strToday += objDate.getMilliseconds();
	return sToday;
}

/**
 * @class 해당년도 구하기
 * @param sDate  - 일자(yyyyMMdd) 
 * @return string yyyy형태의 년도 ( 예 : "2012" )
 */    
function gfn_getYear(sDate)
{
	if (gfn_isNull(sDate)) 
	{
		sDate = gfn_today();
	}

	return sDate.substr(0, 4);
}

/**
 * @class 해당년월 구하기
 * @param sDate  - 일자(yyyyMMdd) 
 * @return string yyyyMM형태의 년월 ( 예 : "201211" )
 */  
function gfn_getYearMonth(sDate)
{
	if (gfn_isNull(sDate)) 
	{
		sDate = gfn_today();
	}

	return sDate.substr(0, 6);
}

/**
 * @class 해당월 구하기
 * @param sDate  - 일자(yyyyMMdd) 
 * @return string MM형태의 년월 ( 예 : "11" )
 */   
function gfn_getMonth(sDate)
{
	if (gfn_isNull(sDate)) 
	{
		sDate = gfn_today();
	}

	return sDate.substr(4, 2);
}

/**
 * @class 해당월의 시작 날짜를 yyyyMMdd형태로 구하기
 * @param sDate  - 일자(yyyyMMdd) 
 * @return string yyyyMMdd형태의 시작 날짜 ( 예 : "20121101" )
 */  
function gfn_getFirstDate(sDate)
{
	if (gfn_isNull(sDate)) 
	{
		sDate = gfn_today();
	}

	return sDate.substr(0, 6) + "01";
}

/**
 * @class 해당월의 마지막 날짜를 yyyyMMdd형태로 구하기
 * @param sDate  - 일자(yyyyMMdd) 
 * @return string yyyyMMdd형태의 마지막 날짜 ( 예 : "20121130" )
 */  
function gfn_getLastDate(sDate)
{
	if (gfn_isNull(sDate)) 
	{
		sDate = gfn_today();
	}

	var nLastDate = gfn_getLastDateNum(sDate);

	return sDate.substr(0, 6) + nLastDate.toString();
}

/**
 * @class 해당월의 마지막 날짜를 숫자로 구하기
 * @param sDate  - 일자(yyyyMMdd) 
 * @return integer 마지막 날짜 숫자값 ( 예 : "30" )
 */   
function gfn_getLastDateNum(sDate)
{
	var nMonth,nLastDate;

	if (gfn_isNull(sDate)) 
	{
		return -1;
	}

	nMonth = parseInt(sDate.substr(4, 2), 10);
	if (nMonth == 1 || nMonth == 3 || nMonth == 5 || nMonth == 7 || nMonth == 8 || nMonth == 10 || nMonth == 12) 
	{
		nLastDate = 31;
	}
	else if (nMonth == 2) 
	{
		if (gfn_isLeapYear(sDate) == true) 
		{
			nLastDate = 29;
		}
		else 
		{
			nLastDate = 28;
		}
	}
	else 
	{
		nLastDate = 30;
	}

	return nLastDate;
}

/**
 * @class 해당일자의  주 시작일자를 계산
 * @param sDate  - 캘린더
 * @return String 주 시작일자
 */
function gfn_getStartOfWeek(ObjCal) 
{	
	var Day  = ObjCal.getDayOfWeek();
	var minusDay = 0 - Day;
	var objDate = new Date(ObjCal.getYear(), ObjCal.getMonth()-1, ObjCal.getDay());
	if(Day == 0) return objDate.toFormatString("%Y%m%d");
	var nMs = objDate.addDate(minusDay);
	return objDate.toFormatString("%Y%m%d");
}

/**
 * @class 해당일자의  주 마지막일자를 계산
 * @param ObjCal  - 캘린더
 * @return String 주 종료일자
 */
function gfn_getEndOfWeek(ObjCal) 
{
	var nLastDay = 6;
	var Day      = ObjCal.getDayOfWeek();
	
	var objDate = new Date(ObjCal.getYear(), ObjCal.getMonth()-1, ObjCal.getDay());
	if(Day == nLastDay) return objDate.toFormatString("%Y%m%d");
	
	var lastDate = new Date(ObjCal.getYear(), ObjCal.getMonth()-1, ObjCal.getDay());
	
	var objDay  = objDate.getDate();
	
	lastDate.addDate(nLastDay - Day);
	var lastDay = lastDate.getDate();
	
	return lastDate.toFormatString("%Y%m%d");
}

/**
 * @class 입력된 날자에 OffSet 으로 지정된 만큼의 일을 더한다.
 * @param sDate  - 일자(yyyyMMdd) 
 * @param nOffSet  - 날짜로부터 증가 감소값. 지정하지 않으면 Default Value = 1 로 적용
 * @return string Date에 nOffset이 더해진 결과를 'yyyyMMdd'로 표현된 날자.
 */   
function gfn_addDate(sDate, nOffSet)
{
	if(gfn_isNull(sDate)) return;
	
	var nYear  = parseInt(gfn_subStr(sDate,0, 4));
	var nMonth = parseInt(gfn_subStr(sDate,4, 2));
	var nDate  = parseInt(gfn_subStr(sDate,6, 2)) + parseInt(nOffSet);

	return gfn_dateTime(nYear, nMonth, nDate);
}

/**
 * @class 입력된 날자에 OffSet 으로 지정된 만큼의 달을 더한다.
 * @param sDate  - 일자(yyyyMMdd) 
 * @param nOffSet  - 날짜로부터 증가 감소값. 지정하지 않으면 Default Value = 1 로 적용
 * @return string Date에 nOffset이 더해진 결과를 'yyyyMMdd'로 표현된 날자.
 */ 
function gfn_addMonth(sDate, nOffSet)
{
	if( gfn_isNull(sDate) || gfn_isNull(nOffSet) )	return "";
	
    var nYear 	= parseInt(sDate.substr(0, 4));
    var nMonth 	= parseInt(sDate.substr(4, 2)) + nOffSet;
    var nDate 	= parseInt(sDate.substr(6, 2));
	var nLastDate, sRet;
	
	if(nDate.toString().length == 1)
	{
		nDate = "0" + nDate;
	}
	
	sRet 		= gfn_dateTime(nYear, nMonth, 1);	
    nLastDate 	= gfn_getLastDateNum(sRet);
    sRet 		= sRet.substr(0, 6);
    
    if( nDate > nLastDate )
    {
		sRet += nLastDate.toString();
	} else {
		sRet += nDate.toString();
	}
		
	return sRet;
}

/**
 * @class MiPlatform에서 사용하던 Datetime형식으로 변환 Date Type을 String으로 변환
 * @param nYear  - nYear (년도)
 * @param nMonth - nMonth (월)
 * @param nDate  - nDate (일)
 * @return string 조합한 날짜를 리턴
 */  
function gfn_dateTime(nYear, nMonth, nDate)
{
	if (nYear.toString().trim().length >= 5) 
	{
		var sDate = new String(nYear);
		var nYear = sDate.substr(0, 4);
		var nMonth = sDate.substr(4, 2);
		var nDate = ((sDate.substr(6, 2) == "") ? 1 : sDate.substr(6, 2));
		var nHours = ((sDate.substr(8, 2) == "") ? 0 : sDate.substr(8, 2));
		var nMinutes = ((sDate.substr(10, 2) == "") ? 0 : sDate.substr(10, 2));
		var nSeconds = ((sDate.substr(12, 2) == "") ? 0 : sDate.substr(12, 2));

		var objDate = new Date(parseInt(nYear), parseInt(nMonth) - 1, parseInt(nDate), parseInt(nHours), parseInt(nMinutes), parseInt(nSeconds));
	}
	else 
	{
		var objDate = new Date(parseInt(nYear), parseInt(nMonth) - 1, parseInt(((nDate == null) ? 1 : nDate)));
	}
	var strYear = objDate.getYear().toString();
	var strMonth = (objDate.getMonth() + 1).toString();
	var strDate = objDate.getDate().toString();


	if (strYear.length == 2)
	{
		strYear = "19" + strYear;
	}

	if (strMonth.length == 1) 
	{
		strMonth = "0" + strMonth;
	}
	if (strDate.length == 1) 
	{
		strDate = "0" + strDate;
	}

	return strYear + strMonth + strDate;
}

/**
 * @class 년,월,일 숫자 값을 받아 년월일 string을 리턴한다.
 * @param nYear  - 년도
 * @param nMonth - 월
 * @param nDate  - 날짜
 * @return string
 */
function gfn_makeDate(nYear, nMonth, nDate)
{
	if (gfn_isNull(nYear) || gfn_isNull(nMonth) || gfn_isNull(nDate)) 
	{
		return "";
	}

	var objDate = new Date(nYear, nMonth - 1, nDate);

	var sYear = objDate.getFullYear().toString();
	var sMonth = gfn_right("0" + (objDate.getMonth() + 1), 2);
	var sDate = gfn_right("0" + objDate.getDate(), 2);

	return sYear + sMonth + sDate;
}

/**
 * @class 2개의 날짜간의 Day count
 * @param sFdate - 시작일자
 * @param sTdate - 종료일자
 * @return string 양 일자간의 Day count
 */ 
function gfn_getDiffDay(sFdate, sTdate)
{
	sFdate = new String(sFdate);
	sFdate = sFdate.split(" ").join("").split("-").join("").split("/").join("");
	sTdate = new String(sTdate);
	sTdate = sTdate.split(" ").join("").split("-").join("").split("/").join("");

	sFdate = gfn_left(sFdate, 8);
	sTdate = gfn_left(sTdate, 8);

	if (sFdate.length != 8 || sTdate.length != 8
		 || isNumeric(sFdate) == false || isNumeric(sTdate) == false
		 || gfn_getDay(sFdate) == -1 || gfn_getDay(sTdate) == -1) 
	{
		return null;
	}

	var nDiffDate = gfn_strToDate(sTdate) - gfn_strToDate(sFdate);
	var nDay = 1000 * 60 * 60 * 24;

	nDiffDate = parseInt(nDiffDate / nDay);
	if (nDiffDate < 0) 
	{
		nDiffDate = nDiffDate;	// - 1 : 해당일 포함
	}
	else 
	{
		nDiffDate = nDiffDate;	// + 1 : 해당일 포함
	}

	return nDiffDate;
}

/**
 * @class 두 월간의 차이 월수 계산
 * @param sFdate - 시작일자
 * @param sTdate - 종료일자
 * @return Integer 숫자 형태의 차이월수(sStartDate, sEndDate의 일은 포함하지 않고 계산)
 */  
function gfn_getDiffMonth(sStartDate, sEndDate)
{
	var nStartMon,nEndMon;

	if (gfn_isNull(sStartDate) || gfn_isNull(sEndDate)) 
	{
		return NaN;
	}

	nStartMon = parseInt(sStartDate.substr(0, 4), 10) * 12 + parseInt(sStartDate.substr(4, 2), 10);
	nEndMon = parseInt(sEndDate.substr(0, 4), 10) * 12 + parseInt(sEndDate.substr(4, 2), 10);

	return (nEndMon - nStartMon);
}

/**
 * @class 두 시간간의 차이 계산
 * @param sStartTime - HHmmss형태의 From 시간 ( 예 : "033025" )
 * @param sEndTime   - HHmmss형태의 To 시간 ( 예 : "034025" )
 * @param sType      - 구하고자하는 타입(시, 분, 초) ( 예 : "HH" )
 * @return Integer(차이 시간)
 */
function gfn_getDiffTime(sStartTime, sEndTime, sType) {
    var nReturnValue;
    var nFrom_HH = toNumber(sStartTime.substring(0, 2));
    var nFrom_mm = toNumber(sStartTime.substring(2, 4));
    var nFrom_ss = toNumber(sStartTime.substring(4, 6));
    
    var nTo_HH = toNumber(sEndTime.substring(0, 2));
    var nTo_mm = toNumber(sEndTime.substring(2, 4));
    var nTo_ss = toNumber(sEndTime.substring(4, 6));
    
    var nFromTotal_ss = (nFrom_HH * 3600) + (nFrom_mm * 60) + nFrom_ss;
    var nToTotal_ss   = (nTo_HH * 3600) + (nTo_mm * 60) + nTo_ss;
    
    if(sType == "HH") {
        return (Math.floor((nToTotal_ss - nFromTotal_ss) / 3600));
    } else if(sType == "mm") {
        return (Math.floor((nToTotal_ss - nFromTotal_ss) / 60));
    } else if(sType == "ss") {
        return (nToTotal_ss - nFromTotal_ss);
    }
}

/**
 * @class 입력된 날자로부터 요일을 구함
 * @param sDate  - 일자(yyyyMMdd)
 * @return Integer 요일에 따른 숫자
 */   
function gfn_getDay(sDate)
{
	var objDate = gfn_strToDate(sDate);
	return objDate.getDay();
}

/**
 * @class 입력된 날자로부터 요일명을 구함
 * @param sDate  - 일자(yyyyMMdd)
 * @return string 요일명
 */    
function gfn_getDayName(sDate)
{
	//var objDayName = new Array("SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT");
	var objDayName = new Array("일", "월", "화", "수", "목", "금", "토");
	var objDate = gfn_getDay(sDate);

	return objDayName[objDate];
}

/**
 * @class 년월일(yyyyMMdd)을 입력하면 해당 주차를 리턴한다.
 * @param strDate - 8자리 년월일(yyyyMMdd)
 * @return 6자리 년도주차(yyyyWW)
 */
function gfn_getWeek(strDate) {
    if (strDate.length != 8 || !isNumeric(strDate)) {
        return "";
    }
    
    var year  = parseInt(strDate.substr(0, 4));
    var month = parseInt(strDate.substr(4, 2));
    var day   = parseInt(strDate.substr(6, 8));
    
    var startAt = 1; // 일요일 표시 부분 / 0 : 일요일(일월화...) / 1 : 월요일(...금토일)
    
    if(startAt == 0) {
        day = day + 1;
    }
    
    var a    = Math.floor((14-month) / 12);
    var y    = year + 4800 - a;
    var m    = month + (12 * a) - 3;
    var b    = Math.floor(y/4) - Math.floor(y/100) + Math.floor(y/400);
    var J    = day + Math.floor(((153 * m) + 2) / 5) + (365 * y) + b - 32045;
    var d4   = (((J + 31741 - (J % 7)) % 146097) % 36524) % 1461;
    var L    = Math.floor(d4 / 1460);
    var d1   = ((d4 - L) % 365) + L;
    var week = Math.floor(d1/7) + 1;
        week = week.toString();
    
    return year+week.padLeft(2, "0");
}

/**
 * @class String 타입의 형식을 날짜형식으로 변환
 * @param sDate  - 일자(yyyyMMdd)
 * @return Date 날자
 */   
function gfn_strToDate(sDate)
{
	var nYear = parseInt(gfn_subStr(sDate,0, 4));
	var nMonth = parseInt(gfn_subStr(sDate,4, 2)) - 1;
	var nDate = parseInt(gfn_subStr(sDate,6, 2));

	return new Date(nYear, nMonth, nDate);
}

/**
 * @class 초형식을 시간형식으로 변환
 * @param sValue  - 초단위의 시간 (SSSSS)
 * @return Strimg 내부시간형식 (HHMMSS)
 */  
function gfn_secToTime(sValue)
{
	var sReturnValue = "";
	var iHH = "";
	var iMM = "";
	var iSS = "";
	var sHH = "";
	var sMM = "";
	var sSS = "";

	if( gfn_isNull(sValue) || sValue < 0 )
	{
		sReturnValue = 0;
	}
	else {
		iHH = parseInt(toNumber(sValue)/3600);
		iMM = parseInt((toNumber(sValue) - iHH*3600)/60);
		iSS = parseInt((toNumber(sValue) - iHH*3600)%60);

		if(iHH<10)
		{
			sHH = "0" + iHH;
		}
		else sHH = iHH;

		if(iMM<10)
		{
			sMM = "0" + iMM;
		}
		else sMM = iMM;

		if(iSS<10)
		{
			sSS = "0" + iSS;
		}
		else sSS = iSS;

		sReturnValue = sHH.toString() + sMM.toString() + sSS.toString();
	}
	return gfn_trim(sReturnValue);
}

/**
 * @class 윤년여부 확인
 * @param sDate  - 일자(yyyyMMdd)
 * @return boolean
 */ 
function gfn_isLeapYear(sDate)
{
	var ret;
	var nY;

	if (gfn_isNull(sDate)) 
	{
		return false;
	}

	nY = parseInt(sDate.substring(0, 4), 10);

	if ((nY % 4) == 0) 
	{
		if ((nY % 100) != 0 || (nY % 400) == 0) 
		{
			ret = true;
		}
		else 
		{
			ret = false;
		}
	}
	else 
	{
		ret = false;
	}

	return ret;
}

 /**
 * @class 양력을 음력으로 변환해주는 함수 (처리가능 기간  1841 - 2043년)
 * @param sDate  - 일자(yyyyMMdd)
 * @return string 음력날자 Flag(1 Byte) + (yyyyMMdd형태의 음력일자)
                  ( Flag : 평달 = "0", 윤달 = "1" ) 
 */  
function gfn_solar2Lunar(sDate)
{
	var sMd = "31,0,31,30,31,30,31,31,30,31,30,31";
	var aMd = new Array();

	var aBaseInfo = new Array();
	var aDt = new Array();
	var td;
	var td1;
	var td2;
	var mm,m1,m2;
	var nLy,nLm,nLd;
	var sLyoon;
	if (gfn_isNull(sDate)) 
	{
		return "";
	}

	var sY = parseInt(sDate.substr(0, 4), 10);
	var sM = parseInt(sDate.substr(4, 2), 10);
	var sD = parseInt(sDate.substr(6, 2), 10);
	if (sY < 1841 || sY > 2043) 
	{
		return "";
	}

	aBaseInfo = _solarBase();
	aMd = sMd.split(",");
	if (gfn_isLeapYear(sDate) == true) 
	{
		aMd[1] = 29;
	}
	else 
	{
		aMd[1] = 28;
	}

	td1 = 672069; //672069 = 1840 * 365 + 1840/4 - 1840/100 + 1840/400 + 23  //1840년까지 날수

	// 1841년부터 작년까지의 날수
	td2 = (sY - 1) * 365 + parseInt((sY - 1) / 4) - parseInt((sY - 1) / 100) + parseInt((sY - 1) / 400);

	// 전월까지의 날수를 더함
	for (var i = 0; i <= sM - 2; i++) 
	{
		td2 = td2 + parseInt(aMd[i]);
	}

	// 현재일까지의 날수를 더함
	td2 = td2 + sD;

	// 양력현재일과 음력 1840년까지의 날수의 차이
	td = td2 - td1 + 1;

	// 1841년부터 음력날수를 계산
	for (var i = 0; i <= sY - 1841; i++) 
	{
		aDt[i] = 0;
		for( j = 0 ; j <= 11 ; j++ )
		{
			switch( parseInt(aBaseInfo[i*12 + j]) )
			{
				case 1 : mm = 29;
						break;
				case 2 : mm = 30;
						break;				
				case 3 : mm = 58;	// 29 + 29
						break;				
				case 4 : mm = 59;	// 29 + 30
						break;				
				case 5 : mm = 59;	// 30 + 29
						break;				
				case 6 : mm = 60;	// 30 + 30
						break;				
			}
			aDt[i] = aDt[i] + mm;
		}
	}

	// 1840년 이후의 년도를 계산 - 현재까지의 일수에서 위에서 계산된 1841년부터의 매년 음력일수를 빼가면수 년도를 계산
	nLy = 0;
	do {
		td = td - aDt[nLy];
		nLy = nLy + 1;
	} while (td > aDt[nLy]);

	nLm = 0;
	sLyoon = "0"; //현재월이 윤달임을 표시할 변수 - 기본값 평달
	do {
		if (parseInt(aBaseInfo[nLy * 12 + nLm]) <= 2) 
		{
			mm = parseInt(aBaseInfo[nLy * 12 + nLm]) + 28;
			if (td > mm) 
			{
				td = td - mm;
				nLm = nLm + 1;
			}
			else 
			{
				break;
			}
		}
		else 
		{
			switch (parseInt(aBaseInfo[nLy * 12 + nLm])) 
			{
				case 3:
					m1 = 29;
					m2 = 29;
					break;
				case 4:
					m1 = 29;
					m2 = 30;
					break;
				case 5:
					m1 = 30;
					m2 = 29;
					break;
				case 6:
					m1 = 30;
					m2 = 30;
					break;
			}

			if (td > m1) 
			{
				td = td - m1;
				if (td > m2) 
				{
					td = td - m2;
					nLm = nLm + 1;
				}
				else 
				{
					sLyoon = "1";
				}
			}
			else 
			{
				break;
			}
		}
	} while (1);

	nLy = nLy + 1841;
	nLm = nLm + 1;
	nLd = td;

	return sLyoon + nLy + gfn_right("0" + nLm, 2) + gfn_right("0" + nLd, 2);
}

 /**
 * @class 음력을 양력으로 변환해주는 함수 (처리가능 기간  1841 - 2043년)
 * @param sDate  - 일자(yyyyMMdd)
 * @return string yyyyMMdd형태의 양력일자
 */  
function gfn_lunar2Solar(sDate)
{
	var sMd = "31,0,31,30,31,30,31,31,30,31,30,31";
	var aMd = new Array();	
	var aBaseInfo = new Array();	
	
	var nLy, nLm, nLd, sLflag;		// 전해온 음력 인자값을 저장할 년, 월, 일, 윤달여부 임시변수
	var nSy, nSm, nSd;				// 계산된 양력 년, 월, 일을 저장할 변수
	var y1, m1, i, j, y2, y3;	// 임시변수	
	var leap;

	if( gfn_isNull(sDate) )			return "";
	if( sDate.length != 9 )		return "";
	
	sLflag = sDate.substr(0,1);
	nLy = parseInt(sDate.substr(1,4), 10);
	nLm = parseInt(sDate.substr(5,2), 10);
	nLd = parseInt(sDate.substr(7,2), 10);
	if( nLy < 1841 || nLy > 2043 )			return "";
	if( sLflag != "0" && sLflag != "1" )	return "";
		
	aBaseInfo = _solarBase();
	aMd = sMd.split(",");
	if( gfn_isLeapYear(sDate.substr(1,8)) == true )					
		aMd[1] = 29;
	else
		aMd[1] = 28;	
		
	y1 = nLy - 1841;
	m1 = nLm - 1;
	leap = 0;
	if( parseInt(aBaseInfo[y1*12 + m1]) > 2 )
		leap = gfn_isLeapYear(nLy+"0101");
	
	if( leap == 1 )
	{
		switch( parseInt(aBaseInfo[y1*12 + m1]) )
		{
			case 3 : mm = 29;
					break;
			case 4 : mm = 30;
					break;			
			case 5 : mm = 29;
					break;			
			case 6 : mm = 30;
					break;
		}
	}
	else
	{
		switch( parseInt(aBaseInfo[y1*12 + m1]) )
		{
			case 1 : mm = 29;
					break;			
			case 2 : mm = 30;
					break;			
			case 3 : mm = 29;
					break;			
			case 4 : mm = 29;
					break;			
			case 5 : mm = 30;
					break;			
			case 6 : mm = 30;
					break;			
		}
	}

	td = 0;
	for( i = 0 ; i <= y1 - 1 ; i++ )
	{
		for( j = 0 ; j <= 11 ; j++ )
		{
			switch( parseInt(aBaseInfo[i*12 + j]) )
			{
				case 1 : td = td + 29;
						break;
				case 2 : td = td + 30;
						break;				
				case 3 : td = td + 58;
						break;				
				case 4 : td = td + 59;
						break;				
				case 5 : td = td + 59;
						break;				
				case 6 : td = td + 60;
						break;				
			}
		}
	}

	for( j = 0 ; j <= m1 - 1 ; j++ )
	{
		switch( parseInt(aBaseInfo[y1*12 + j]) )
		{
			case 1 : td = td + 29;
					break;			
			case 2 : td = td + 30;
					break;						
			case 3 : td = td + 58;
					break;						
			case 4 : td = td + 59;
					break;						
			case 5 : td = td + 59;
					break;						
			case 6 : td = td + 60;
					break;						
		}
	}

	if( leap == 1 )
	{
		switch( parseInt(aBaseInfo[y1*12 + m1]) )
		{
			case 3 : mm = 29;
					break;						
			case 4 : mm = 29;
					break;						
			case 5 : mm = 30;
					break;						
			case 6 : mm = 30;
					break;						
		}
	}
	
	td = td + nLd + 22;
	
	if( sLflag == "1" )
	{
		switch( parseInt(aBaseInfo[y1*12 + m1]) )
		{
			case 3 : td = td + 29;
					break;						
			case 4 : td = td + 30;
					break;						
			case 5 : td = td + 29;
					break;						
			case 6 : td = td + 30;
					break;						
		}
	}
	
	y1 = 1840;
	do
	{
		y1 = y1 + 1;
		leap = gfn_isLeapYear(y1+"0101");

		if( leap == 1 )
			y2 = 366;
		else
			y2 = 365;

		if( td <= y2 )
			break;
			
		td = td - y2;
	}
	while(1);

	nSy = y1;
	aMd[1] = y2 - 337;
	m1 = 0;
	do
	{
		m1 = m1 + 1;
		if( td <= parseInt(aMd[m1-1]) )
			break;
		td = td - parseInt(aMd[m1-1]);
	}
	while(1);
	
	nSm = m1;
	nSd = td;
	y3 = nSy;
	td = y3 * 365 + parseInt(y3/4) - parseInt(y3/100) + parseInt(y3/400);
	for( i = 0 ; i <= nSm - 1 ; i++ )
		td = td + parseInt(aMd[i]);

	td = td + nSd;

	return y3 + gfn_right("0" + nSm, 2)+gfn_right("0" + nSd, 2);
}

 /**
 * @class 양력 nYear에 해당하는 년도의 법정 공휴일(양력) List 모두 구하기
 * @param nYear  - 년도
 * @return Array 공휴일 List Array ==> 각 Array[i]="yyyyMMdd공휴일명" 으로 return
 */  
function gfn_getHolidays(nYear)
{
	var nYear;
	var aHoliday = new Array();

	if (gfn_isNull(nYear)) 
	{
		return aHoliday;
	}

	// ///// 음력 체크
	// 구정
	aHoliday[0] = gfn_lunar2Solar("0" + (nYear - 1) + "1230") + "설날";
	aHoliday[1] = gfn_addDate(aHoliday[0], 1) + "설날";
	aHoliday[2] = gfn_addDate(aHoliday[1], 1) + "설날";
	// 석가탄신일
	aHoliday[3] = gfn_lunar2Solar("0" + nYear + "0408") + "석가탄신일";
	// 추석
	aHoliday[4] = gfn_lunar2Solar("0" + nYear + "0814") + "추석";
	aHoliday[5] = gfn_addDate(aHoliday[4], 1) + "추석";
	aHoliday[6] = gfn_addDate(aHoliday[5], 1) + "추석";

	// ///// 양력 체크
	aHoliday[7] = nYear + "0101" + "신정";
	aHoliday[8] = nYear + "0301" + "삼일절";
	aHoliday[9] = nYear + "0505" + "어린이날";
	aHoliday[10] = nYear + "0606" + "현충일";
	aHoliday[11] = nYear + "0815" + "광복절";
	aHoliday[12] = nYear + "1003" + "개천절";	
	aHoliday[13] = nYear + "1009" + "한글날";	
	aHoliday[14] = nYear + "1225" + "성탄절";

	return aHoliday.sort();
}

 /**
 * @class 각 월별 음력 기준 정보를 처리하는 함수(처리가능 기간  1841 - 2043년) 단, 내부에서 사용하는 함수임
 * @return String 음력 기준정보
 */ 
_solarBase = function ()
{
	var kk;

	// 1841
	kk = "1,2,4,1,1,2,1,2,1,2,2,1,";
	kk += "2,2,1,2,1,1,2,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,4,1,2,1,2,1,";
	kk += "2,2,1,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,5,2,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,3,2,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,2,1,2,";
	// 1851
	kk += "2,2,1,2,1,1,2,1,2,1,5,2,";
	kk += "2,1,2,2,1,1,2,1,2,1,1,2,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,5,2,1,2,1,2,";
	kk += "1,1,2,1,2,2,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,5,2,1,2,1,2,2,2,";
	kk += "1,2,1,1,2,1,1,2,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,1,2,2,";
	kk += "2,1,6,1,1,2,1,1,2,1,2,2,";
	// 1861
	kk += "1,2,2,1,2,1,2,1,2,1,1,2,";
	kk += "2,1,2,1,2,2,1,2,2,3,1,2,";
	kk += "1,2,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,4,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,1,1,2,2,1,2,2,2,";
	kk += "1,2,1,1,2,1,1,2,1,2,2,2,";
	kk += "1,2,2,3,2,1,1,2,1,2,2,1,";
	kk += "2,2,2,1,1,2,1,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,2,1,1,5,2,1,";
	// 1871
	kk += "2,2,1,2,2,1,2,1,2,1,1,2,";
	kk += "1,2,1,2,2,1,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,4,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,1,2,1,1,2,1,2,2,2,1,";
	kk += "2,2,1,1,5,1,2,1,2,2,1,2,";
	kk += "2,2,1,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,1,2,1,2,1,";
	kk += "2,2,4,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,2,1,2,1,1,2,";
	// 1881
	kk += "1,2,1,2,1,2,5,2,2,1,2,1,";
	kk += "1,2,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,2,1,2,";
	kk += "2,1,1,2,3,2,1,2,2,1,2,2,";
	kk += "2,1,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,5,2,1,1,2,1,2,1,2,";
	kk += "2,1,2,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,5,2,1,2,2,1,2,1,2,1,2,";
	// 1891
	kk += "1,2,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,5,2,2,1,2,2,2,";
	kk += "1,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,5,1,2,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,1,2,1,2,1,2,1,2,1,";
	kk += "2,1,5,2,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,2,1,1,2,1,2,5,2,2,1,2,";
	// 1901
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,3,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,2,1,";
	kk += "2,2,1,2,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,4,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,2,1,2,1,2,2,1,2,";
	kk += "1,5,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	// 1911
	kk += "2,1,2,1,1,5,1,2,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,1,2,";
	kk += "2,2,1,2,5,1,2,1,2,1,1,2,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,3,2,1,2,2,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,5,2,2,1,2,2,";
	kk += "1,2,1,1,2,1,1,2,2,1,2,2,";
	// 1921
	kk += "2,1,2,1,1,2,1,1,2,1,2,2,";
	kk += "2,1,2,2,3,2,1,1,2,1,2,2,";
	kk += "1,2,2,1,2,1,2,1,2,1,1,2,";
	kk += "2,1,2,1,2,2,1,2,1,2,1,1,";
	kk += "2,1,2,5,2,1,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,5,1,2,1,1,2,2,1,2,2,2,";
	kk += "1,2,1,1,2,1,1,2,1,2,2,2,";
	kk += "1,2,2,1,1,5,1,2,1,2,2,1,";
	// 1931
	kk += "2,2,2,1,1,2,1,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,2,1,1,2,1,2,";
	kk += "1,2,2,1,6,1,2,1,2,1,1,2,";
	kk += "1,2,1,2,2,1,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,4,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,1,2,1,1,2,1,2,2,2,1,";
	kk += "2,2,1,1,2,1,4,1,2,2,1,2,";
	kk += "2,2,1,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,1,2,1,2,1,";
	// 1941
	kk += "2,2,1,2,2,4,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,2,1,2,1,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,1,2,4,1,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,2,1,2,";
	kk += "2,1,1,2,1,1,2,1,2,2,1,2,";
	kk += "2,5,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,3,2,1,2,1,2,";
	kk += "2,1,2,2,1,2,1,1,2,1,2,1,";
	// 1951
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,4,2,1,2,1,2,1,2,";
	kk += "1,2,1,1,2,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,1,2,2,";
	kk += "2,1,4,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,5,2,1,2,2,";
	kk += "1,2,2,1,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,1,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,2,5,2,1,2,1,2,1,";
	// 1961
	kk += "2,1,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,2,1,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,2,3,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,1,2,2,1,";
	kk += "2,2,5,2,1,1,2,1,1,2,2,1,";
	kk += "2,2,1,2,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,1,2,1,5,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,2,1,2,1,2,2,1,2,";
	// 1971
	kk += "1,2,1,1,5,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,1,2,2,2,1,";
	kk += "2,2,1,5,1,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,5,2,1,1,2,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,1,";
	kk += "2,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,1,6,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,1,2,2,";
	// 1981
	kk += "1,2,1,1,2,1,1,2,2,1,2,2,";
	kk += "2,1,2,3,2,1,1,2,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,1,2,2,";
	kk += "2,1,2,2,1,1,2,1,1,5,2,2,";
	kk += "1,2,2,1,2,1,2,1,1,2,1,2,";
	kk += "1,2,2,1,2,2,1,2,1,2,1,1,";
	kk += "2,1,2,2,1,5,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,2,1,1,5,1,2,1,2,2,2,2,";
	// 1991
	kk += "1,2,1,1,2,1,1,2,1,2,2,2,";
	kk += "1,2,2,1,1,2,1,1,2,1,2,2,";
	kk += "1,2,5,2,1,2,1,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,2,1,1,2,1,2,";
	kk += "1,2,2,1,2,2,1,5,2,1,1,2,";
	kk += "1,2,1,2,2,1,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,3,2,2,1,2,2,2,1,";
	kk += "2,1,1,2,1,1,2,1,2,2,2,1,";
	kk += "2,2,1,1,2,1,1,2,1,2,2,1,";
	// 2001
	kk += "2,2,2,3,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,1,2,1,2,1,";
	kk += "2,2,1,2,2,1,2,1,1,2,1,2,";
	kk += "1,5,2,2,1,2,1,2,2,1,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,1,5,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,2,1,2,";
	kk += "2,1,1,2,1,1,2,1,2,2,1,2,";
	kk += "2,2,1,1,5,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	// 2011
	kk += "2,1,2,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,6,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,1,2,5,2,1,2,";
	kk += "1,2,1,1,2,1,2,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,1,2,2,";
	kk += "2,1,1,2,3,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	kk += "2,1,2,5,2,1,1,2,1,2,1,2,";
	// 2021
	kk += "1,2,2,1,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,2,2,1,2,1,2,1,2,";
	kk += "1,5,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,2,1,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,2,1,1,5,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,1,2,2,2,";
	kk += "1,2,2,1,5,1,2,1,1,2,2,1,";
	kk += "2,2,1,2,2,1,1,2,1,1,2,2,";
	kk += "1,2,1,2,2,1,2,1,2,1,2,1,";
	// 2031
	kk += "2,1,5,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,2,1,1,2,1,5,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,4,1,1,2,1,2,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,2,1,1,2,1,";
	kk += "2,2,1,2,5,2,1,2,1,2,1,1,";
	kk += "2,1,2,2,1,2,2,1,2,1,2,1,";
	// 2041
	kk += "2,1,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,5,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,1,2,2,1,2,2";

	var arr = new Array();
	arr = kk.split(",");

	return arr;
}

/****************************************************************************************
 * 월력 시작
 ****************************************************************************************/
/**
 * @class 해당 위치에 월력Div을 팝업 호출
 * @param obj    - 월력띄울 컴포넌트
 * @param sMonth - 년월	
 * @param nX     - x좌표
 * @param nY     - Y좌표
 * @return 없음
 */   
function gfn_callMonthPop(obj, sMonth, nArgX, nArgY)
{
	var nX = 0;				// Left
	var nY = 0;				// Top 
	
	if(!gfn_isNull(nArgX)) {
		nX = nArgX;
	} else {
		//nX = system.clientToScreenX(obj, obj.position.left -2);		// Left
		nX = system.clientToScreenX(obj, -1);
	}
	
	if(!gfn_isNull(nArgY)) {
		nY = nArgY;
	} else {
		//nY = system.clientToScreenY(obj, obj.position.bottom -1);	// Top 
		nY = system.clientToScreenY(obj, -1) + obj.position.height;
	}
	//trace("nX : " + nX + " / nY : " + nY);
    return gfn_callMonthPopDiv(sMonth ,nX, nY);
}

/**
 * @class 월력Div 팝업 생성
 * @param sMonth - 년월	
 * @param nX     - x좌표
 * @param nY     - Y좌표
 * @return string 월력DIV에서 선택한 년월(YYYYMM)		
 */  
function gfn_callMonthPopDiv(sMonth ,nX, nY)
{
    if (sMonth == undefined) sMonth = "".substring(0,6);
    var sPopupDivNm     = "pdv_calMonthPop";
    var nPopupDivWidth  = 168;
    var nPopupDivHeight = 181;
    
    var objForm = this;    
    if (!objForm.all[sPopupDivNm])
	{
        objPopupDiv = new PopupDiv("PopupCalMonthDiv", 0, 0, nPopupDivWidth+2, nPopupDivHeight+2);
        objForm.addChild(sPopupDivNm, objPopupDiv);         
        objPopupDiv.url = "cmn::ObjCalMonthPop.xfdl";
        objPopupDiv.show(); 
	}
			
	objPopupDiv.fn_setCalendar(gfn_trim(sMonth).substring(0,6));
	var sRet = objPopupDiv.trackPopup(nX,nY);
		
    //삭제
	this.removeChild(sPopupDivNm); 
	objPopupDiv.destroy(); 
    objPopupDiv = null;    
	return sRet;
}

/****************************************************************************************
 * 월력 끝
 ****************************************************************************************/
 
 
 /****************************************************************************************
 * 캘린더 시작
 ****************************************************************************************/
/**
 * @class 해당 위치에 캘린더Div을 팝업 호출
 * @param obj    - 캘린더 띄울 컴포넌트
 * @param sDate  - 년월	일
 * @param nX     - x좌표
 * @param nY     - Y좌표
 * @return 없음
 */   
function gfn_callCalendarPop(obj, sDate, nArgX, nArgY)
{
	var nX = 0;				// Left
	var nY = 0;				// Top 
	
	if(!gfn_isNull(nArgX)) {
		nX = nArgX;
	} else {
		//nX = system.clientToScreenX(obj, obj.position.left -2);		// Left
		nX = system.clientToScreenX(obj, -1);
	}
	
	if(!gfn_isNull(nArgY)) {
		nY = nArgY;
	} else {
		//nY = system.clientToScreenY(obj, obj.position.bottom -1);	// Top 
		nY = system.clientToScreenY(obj, 0) + obj.position.height - 1;
	}
	//trace("nX : " + nX + " / nY : " + nY);
    return gfn_callCalendarPopDiv(sDate ,nX, nY);
}

/**
 * @class 캘린더Div 팝업 생성
 * @param sDate  - 년월일	
 * @param nX     - x좌표
 * @param nY     - Y좌표
 * @return string 달력DIV에서 선택한 년월(YYYYMMDD)		
 */  
function gfn_callCalendarPopDiv(sDate ,nX, nY)
{
    var sPopupDivNm = "pdv_calPop";
	var objFrame = getOwnerFrame();
    
    // Quick View 실행이거나 프레임에서 띄우지 않고 Popup에서 실행시
    if(gv_mdi == "N" || objFrame.name.indexOf("WF_") == -1 ) 
    {
		var objForm = this;
		
		if (!objForm.all[sPopupDivNm])
		{
			objPopupDiv = new PopupDiv("PopupCalendarDiv", 0, 0, 354, 327);
			objForm.addChild(sPopupDivNm, objPopupDiv);         
			objPopupDiv.url = "cmn::ObjCalendarPop.xfdl";
			objPopupDiv.show(); 
			objPopupDiv.class = "pdiv_WF_MonthCal";
		}
			
		objPopupDiv.fn_setCalendar(sDate);
		var sRet = objPopupDiv.trackPopup(nX,nY);
			
		//삭제
		this.removeChild(sPopupDivNm); 
		objPopupDiv.destroy(); 
		objPopupDiv = null;   		
	} 
	// Top Frame의 달력 사용(속도 느림 보완)
	else {	
		var objForm = afrm_Top.form;
		objPopupDiv = objForm.all[sPopupDivNm];
		
		objPopupDiv.fn_setCalendar(sDate);
		var sRet = objPopupDiv.trackPopup(nX,nY);		
	}
		 
	return sRet;
}

/****************************************************************************************
 * 캘린더 끝
 ****************************************************************************************/]]></Script>
