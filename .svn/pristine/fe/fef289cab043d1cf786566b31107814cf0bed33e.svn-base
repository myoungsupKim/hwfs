<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="rc.bms.eventMgmtDAO">
	<desc>예약등록관리</desc>
	
	<statement name="reservList" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.reservList */
		<![CDATA[
	
			
		SELECT MAST.RESERV_NUM,MAST.OUTLET_CD
		      ,TO_CHAR(TO_DATE(MAST.STR_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') || '~' || 
		       TO_CHAR(TO_DATE(MAST.END_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') AS RESERV_DATE
		      ,MAST.RESERV_NM
		      ,SCC_CRYPTO.MASKAUTH_FUN(MAST.RSVN_NM,12,:loginPersMask,:maskAuth) AS RSVN_NM 
		      ,SCC_CRYPTO.MASKAUTH_FUN(SMGR.AM_NM,12,:loginPersMask,:maskAuth)  AS AM_NM           --담당자명 
		      ,KIND.CODE_NAME AS KIND_CD_NM		 --행사종류명
		      
		      ,TO_CHAR(TO_DATE(MAST.STR_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') AS STR_DATE
		      ,WEDDING.HUSB 
		      ,WEDDING.BRIDE
		      
		      ,STR.CODE_NAME   || ' ~ ' || EET.CODE_NAME   AS RESERV_TIME
		       
		FROM   BMS_RESERV_MST MAST
		INNER JOIN (SELECT MST.OUTLET_CD, MST.OUTLET_TYPE, MST.OUTLET_NM 
                       FROM   SLE_OUTLET_MST MST
                          INNER JOIN  SCO_UPJANG_V   UPJANG ON  UPJANG.UPJANG = TO_NUMBER(MST.OUTLET_CD) 
                                     <#if muCd?has_content> AND  UPJANG.MU_CD = :muCd </#if>
                                     <#if tmCd?has_content> AND  UPJANG.TM_CD = :tmCd </#if>
          			 ) OUTLET ON OUTLET.OUTLET_CD =  MAST.OUTLET_CD 
		INNER JOIN BMS_AM_MST      SMGR ON SMGR.AM_CD = MAST.AM_CD
		INNER JOIN SCC_COMMON_CODE KIND ON KIND.GROUP_CODE = 'BMS_0002' AND KIND.CODE = MAST.KIND_CD       --예약종류     
		INNER JOIN SCC_COMMON_CODE STR ON STR.GROUP_CODE ='BMS_0015' AND STR.CODE =  MAST.STR_TIME 		--행사시작시간
		INNER JOIN SCC_COMMON_CODE EET ON EET.GROUP_CODE ='BMS_0015' AND EET.CODE =  MAST.END_TIME		--행사종료시간
		LEFT OUTER JOIN BMS_FUNCTION WEDDING ON WEDDING.RESERV_NUM = MAST.RESERV_NUM
		
		WHERE MAST.USE_YN = 'Y'
		  AND MAST.RESERV_STATUS IN ('1','2')
		
		<#if reservDtFr?has_content > 
		           AND (   ( MAST.STR_DATE BETWEEN :reservDtFr   AND :reservDtTo    OR  MAST.END_DATE BETWEEN :reservDtFr   AND :reservDtTo )
			            OR ( :reservDtFr   BETWEEN MAST.STR_DATE AND MAST.END_DATE  OR :reservDtTo    BETWEEN MAST.STR_DATE AND MAST.END_DATE ))
		</#if>
		
		<#if amCd?has_content >       AND MAST.AM_CD     = :amCd     </#if>
		<#if kindCd?has_content >     AND MAST.KIND_CD   = :kindCd   
		<#else>
									  AND MAST.KIND_CD   <> '2'   
		</#if>
		<#if outletCd?has_content >   AND MAST.OUTLET_CD = :outletCd </#if>
		ORDER BY MAST.RESERV_NUM DESC
		
		]]>
	</statement>
	
	
	<!-- DATA를 조회한다. -->
	<statement name="selectListMst" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.selectListMst */
		<![CDATA[
		  SELECT 
				RESERV_NUM,
		        KIND_CD,
		        OUTLET_CD,
		        OUTLET_NM,
		        ACCEPT_DATE,
		        RESERV_STATUS,
		        RESERV_STATUS_NM,
		        RESERV_CD,
		        RESERV_NM,
		        RSVN_NM,
		        STR_DATE,
		        END_DATE,
		        	TO_CHAR(TO_DATE(STR_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') || '~' || 
		       		TO_CHAR(TO_DATE(END_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') AS RESERV_DATE,
		        TIME_CD,
		        STR_TIME,
		        END_TIME,
		        BEGIN_DATE,
		        PSN,
		        AM_CD,
		        PRCG_NM,
		        CUST_CD, CUST_NM,
		        PRCG_DEPT,
		        JOB_POSITION,
		        CUST_CLASS,
		       
		        --핸드폰번호 - 넣기
		        CASE  LENGTH(LTRIM(RTRIM(HAND_PHONE))) 
		        WHEN  9 THEN SUBSTR(HAND_PHONE,1,2) || '-' || SUBSTR(HAND_PHONE,3,3) || '-' || SUBSTR(HAND_PHONE,6,4)
		        WHEN 10 THEN SUBSTR(HAND_PHONE,1,2) || '-' || SUBSTR(HAND_PHONE,3,4) || '-' || SUBSTR(HAND_PHONE,7,4)
		        WHEN 11 THEN SUBSTR(HAND_PHONE,1,3) || '-' || SUBSTR(HAND_PHONE,4,4) || '-' || SUBSTR(HAND_PHONE,8,4)
		        ELSE '' END    AS HAND_PHONE,  
										 
		        SCC_TELNO_SPLIT_FUN(HAND_PHONE,1)     AS HAND_PHONE1,
		        SCC_TELNO_SPLIT_FUN(HAND_PHONE,2)     AS HAND_PHONE2,
		        SCC_TELNO_SPLIT_FUN(HAND_PHONE,3)     AS HAND_PHONE3,
							
		        --전화번호 - 넣기		   
		        CASE  LENGTH(LTRIM(RTRIM(TEL_NUM))) 
		        WHEN  9 THEN SUBSTR(TEL_NUM,1,2) || '-' || SUBSTR(TEL_NUM,3,3) || '-' || SUBSTR(TEL_NUM,6,4)
		        WHEN 10 THEN SUBSTR(TEL_NUM,1,2) || '-' || SUBSTR(TEL_NUM,3,4) || '-' || SUBSTR(TEL_NUM,7,4)
		        WHEN 11 THEN SUBSTR(TEL_NUM,1,3) || '-' || SUBSTR(TEL_NUM,4,4) || '-' || SUBSTR(TEL_NUM,8,4)
		        ELSE '' END    AS TEL_NUM,  
										 
		        SCC_TELNO_SPLIT_FUN(TEL_NUM,1)     AS TEL_NUM1,
		        SCC_TELNO_SPLIT_FUN(TEL_NUM,2)     AS TEL_NUM2,
		        SCC_TELNO_SPLIT_FUN(TEL_NUM,3)     AS TEL_NUM3,
							
		        --전화번호 - 넣기		   
		        CASE  LENGTH(LTRIM(RTRIM(FAX_NUM))) 
		        WHEN  9 THEN SUBSTR(FAX_NUM,1,2) || '-' || SUBSTR(FAX_NUM,3,3) || '-' || SUBSTR(FAX_NUM,6,4)
		        WHEN 10 THEN SUBSTR(FAX_NUM,1,2) || '-' || SUBSTR(FAX_NUM,3,4) || '-' || SUBSTR(FAX_NUM,7,4)
		        WHEN 11 THEN SUBSTR(FAX_NUM,1,3) || '-' || SUBSTR(FAX_NUM,4,4) || '-' || SUBSTR(FAX_NUM,8,4)
		        ELSE '' END    AS FAX_NUM,  
										 
		        SCC_TELNO_SPLIT_FUN(FAX_NUM,1)     AS FAX_NUM1,
		        SCC_TELNO_SPLIT_FUN(FAX_NUM,2)     AS FAX_NUM2,
		        SCC_TELNO_SPLIT_FUN(FAX_NUM,3)     AS FAX_NUM3,
		        
		        EMAIL_ADDR,
		        EMAIL_YN,
		        SMS_YN,
		        DM_YN,
		        DID_YN,
		        VIP_YN,
		        
		        ADDR_KEY,
		        ADDR_INFO,
		        
		        REMARK_FACT,
		        REMARK_FNB,
		        REMARK_ROOM,
		        REMARK_ETC,
		        REMARK_OUTSIDE,
		       
		        PRVS_RESERV_STATUS,
		        OUTLET_PATRON_TYPE,
		        OUTLET_CONFIRM_TIME,
		        OUTLET_CONFIRMOR,
		        SET_QTY,
		        FISCAL_CUST,
		        CANCEL_DATE,
		        CANCEL_REASON,
		        DID1,
		        DID2,
		        DID3,
		        MAX_PSN,
		        PATRON_NUM,
		        USE_YN,
		        CDATE,
		        CUSER,
		        UDATE,
		        UUSER,
		        SAP_CUST_NM,
		        SAP_CUST_CD,
		        RESERV_CD_NM,	 --행사상태명
		        KIND_CD_NM,		 --행사종류명
		        AM_NM,           --담당자명 
		        PRCG_DEPT_NM,	 --부서명
		        JOB_POSITION_NM, --직위명
		        CUST_CLASS_NM,	 -- 고객구분
		        FILE_KEY
		        
		FROM ( SELECT  MAST.RESERV_NUM,
				       MAST.KIND_CD,
				       MAST.OUTLET_CD,
				       MAST.ACCEPT_DATE,
				       MAST.RESERV_STATUS,
				       MAST.RESERV_CD,
				       MAST.RESERV_NM,
				       SCC_CRYPTO.MASKAUTH_FUN(MAST.RSVN_NM,12,:loginPersMask,:maskAuth) AS RSVN_NM,
				       MAST.STR_DATE,
				       MAST.END_DATE,
				       MAST.TIME_CD,
				       MAST.STR_TIME,
				       MAST.END_TIME,
				       MAST.BEGIN_DATE,
				       MAST.PSN,
				       MAST.AM_CD,
				       MAST.PRCG_NM,
				       MAST.CUST_CD, (SELECT A.CUST_NM FROM BMS_CUST_MST A WHERE A.CUST_CD = MAST.CUST_CD) AS CUST_NM,
				       MAST.PRCG_DEPT,
				       MAST.JOB_POSITION,
				       MAST.CUST_CLASS,
				       
				       SCC_CRYPTO.MASKAUTH_FUN(MAST.TEL_NUM,9,:loginPersMask,:maskAuth)    AS TEL_NUM,
				       SCC_CRYPTO.MASKAUTH_FUN(MAST.HAND_PHONE,8,:loginPersMask,:maskAuth) AS HAND_PHONE,
				       SCC_CRYPTO.MASKAUTH_FUN(MAST.FAX_NUM,8,:loginPersMask,:maskAuth)    AS FAX_NUM,
				       SCC_CRYPTO.MASKAUTH_FUN(MAST.EMAIL_ADDR,7,:loginPersMask,:maskAuth) AS EMAIL_ADDR,
				       
				       DECODE(MAST.EMAIL_YN, 'Y', 1, 0) AS EMAIL_YN,
				       DECODE(MAST.SMS_YN, 'Y', 1, 0) AS SMS_YN,
				       DECODE(MAST.DM_YN, 'Y', 1, 0) AS DM_YN,
				       DECODE(MAST.DID_YN, 'Y', 1, 0) AS DID_YN,
				       DECODE(MAST.VIP_YN, 'Y', 1, 0) AS VIP_YN,
				       
				       MAST.ADDR_KEY,
				       SCC_ADDR_FUN(MAST.ADDR_KEY, :loginPersMask, :maskAuth) AS ADDR_INFO,
				       
				       MAST.REMARK_FACT,
				       MAST.REMARK_FNB,
				       MAST.REMARK_ROOM,
				       MAST.REMARK_ETC,
				       MAST.REMARK_OUTSIDE,
				       
				       MAST.PRVS_RESERV_STATUS,
				       MAST.OUTLET_PATRON_TYPE,
				       MAST.OUTLET_CONFIRM_TIME,
				       MAST.OUTLET_CONFIRMOR,
				       MAST.SET_QTY,
				       MAST.FISCAL_CUST,
				       MAST.CANCEL_DATE,
				       MAST.CANCEL_REASON,
				       MAST.DID1,
				       MAST.DID2,
				       MAST.DID3,
				       MAST.MAX_PSN,
				       MAST.PATRON_NUM,
				       DECODE(MAST.USE_YN, 'Y', 1, 0) AS USE_YN,
				       MAST.CDATE,
				       MAST.CUSER,
				       MAST.UDATE,
				       MAST.UUSER
				      
				      ,(SELECT A.CUSTNM      FROM ST_CUST A WHERE A.CUSTGUBUN IN ('002', '003') AND A.CUSTCD = CUST.INTERG_NUM) AS SAP_CUST_NM		--SAP고객명
					  ,(SELECT A.SAP_CUST_CD FROM ST_CUST A WHERE A.CUSTGUBUN IN ('002', '003') AND A.CUSTCD = CUST.INTERG_NUM) AS SAP_CUST_CD --SAP코드
					  
				      ,OUTLET.OUTLET_NM AS OUTLET_NM        --영업장명 
				      ,SANG.CODE_NAME AS RESERV_STATUS_NM	--행사상태
				      ,CODE.CODE_NAME AS RESERV_CD_NM	    --행사형태명
				      ,KIND.CODE_NAME AS KIND_CD_NM		    --행사종류명
				      ,SCC_CRYPTO.MASKAUTH_FUN(SMGR.AM_NM,12,:loginPersMask,:maskAuth) AS AM_NM           --담당자명 
				      ,DEPT.CODE_NAME AS PRCG_DEPT_NM	    --부서명
				      ,DJOB.CODE_NAME AS JOB_POSITION_NM    --직위명
				      ,CLAS.CODE_NAME AS CUST_CLASS_NM	    --고객구분
				      
				      --,(SELECT SUM(PAY_AMT) AS AMT FROM  BMS_PAY_MST  PAY WHERE SALS_CLASS = '1' AND PAY.RECEIPT_NUM = MAST.RESERV_NUM) AS PAY_AMT --행사금액
				      
				      ,NVL(MAST.FILE_KEY,'0') AS FILE_KEY
				      
				       
				FROM   BMS_RESERV_MST MAST
					 INNER JOIN (SELECT MST.OUTLET_CD, MST.OUTLET_TYPE, MST.OUTLET_NM 
			                       FROM   SLE_OUTLET_MST MST
			                          INNER JOIN  SCO_UPJANG_V   UPJANG ON  UPJANG.UPJANG = TO_NUMBER(MST.OUTLET_CD) 
			                                     <#if muCd?has_content> AND  UPJANG.MU_CD = :muCd </#if>
			                                     <#if tmCd?has_content> AND  UPJANG.TM_CD = :tmCd </#if>
			          			 ) OUTLET ON OUTLET.OUTLET_CD =  MAST.OUTLET_CD 
				     INNER JOIN BMS_AM_MST      SMGR ON SMGR.AM_CD = MAST.AM_CD
				     INNER JOIN SCC_COMMON_CODE CODE ON CODE.GROUP_CODE = 'BMS_0005' AND CODE.CODE = MAST.RESERV_CD	    --행사형태
				     INNER JOIN SCC_COMMON_CODE SANG ON SANG.GROUP_CODE = 'BMS_0001' AND SANG.CODE = MAST.RESERV_STATUS	--예약상태
				     INNER JOIN SCC_COMMON_CODE KIND ON KIND.GROUP_CODE = 'BMS_0002' AND KIND.CODE = MAST.KIND_CD       --예약종류
				LEFT OUTER JOIN SCC_COMMON_CODE DEPT ON DEPT.GROUP_CODE = 'BMS_0009' AND DEPT.CODE = MAST.PRCG_DEPT		--부서
				LEFT OUTER JOIN SCC_COMMON_CODE DJOB ON DJOB.GROUP_CODE = 'BMS_0010' AND DJOB.CODE = MAST.JOB_POSITION	--직위
				LEFT OUTER JOIN SCC_COMMON_CODE CLAS ON CLAS.GROUP_CODE = 'BMS_0006' AND CLAS.CODE = MAST.CUST_CLASS	--거래처형태
				LEFT OUTER JOIN BMS_CUST_MST    CUST ON CUST.CUST_CD    = MAST.CUST_CD	--거래처마스터
				
				WHERE MAST.USE_YN = 'Y'
				<#if reservDtFr?has_content >   
						AND (   ( MAST.STR_DATE BETWEEN :reservDtFr   AND :reservDtTo    OR  MAST.END_DATE BETWEEN :reservDtFr   AND :reservDtTo )
					         OR ( :reservDtFr   BETWEEN MAST.STR_DATE AND MAST.END_DATE  OR :reservDtTo    BETWEEN MAST.STR_DATE AND MAST.END_DATE ))
					              
				</#if>
				
				<#if amCd?has_content >         AND MAST.AM_CD      = :amCd      </#if>
				<#if kindCd?has_content >       AND MAST.KIND_CD    = :kindCd    </#if>
				<#if outletCd?has_content >     AND MAST.OUTLET_CD  = :outletCd  </#if>
				<#if reservNum?has_content >    AND MAST.RESERV_NUM = :reservNum </#if>
				<#if reservNm?has_content >     AND (MAST.RESERV_NM LIKE '%' || :reservNm || '%' OR MAST.RSVN_NM LIKE '%' || :reservNm || '%')  </#if>
				<#if reservStatus?has_content > AND :reservStatus   LIKE '%' || MAST.RESERV_STATUS || '%' </#if>
		
		) DUAL 
 		

		]]>
	</statement>

	<!-- BMS_RESERV_MST DATA를 저장한다. --> 
	<statement name="insertDataMst" type="insert">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.insertDataMst */
		<![CDATA[
		 INSERT INTO BMS_RESERV_MST
			(
			 RESERV_NUM,
			 KIND_CD,
			 OUTLET_CD,
			 ACCEPT_DATE,
			 RESERV_STATUS,
			 RESERV_CD,
			 RESERV_NM,
			 RSVN_NM,
			 STR_DATE,
			 END_DATE,
			 TIME_CD,
			 STR_TIME,
			 END_TIME,
			 BEGIN_DATE,
			 PSN,
			 AM_CD,
			 PRCG_NM,
			 CUST_CD,
			 PRCG_DEPT,
			 JOB_POSITION,
			 CUST_CLASS,
			 TEL_NUM,
			 HAND_PHONE,
			 FAX_NUM,
			 EMAIL_ADDR,
			 EMAIL_YN,
			 SMS_YN,
			 DM_YN,
			 DID_YN,
			 VIP_YN,
			 ADDR_KEY,
			 FILE_KEY,
			 REMARK_FACT,
			 REMARK_FNB,
		     REMARK_ROOM,
		     REMARK_ETC,
		     REMARK_OUTSIDE,
			 PRVS_RESERV_STATUS,
			 OUTLET_PATRON_TYPE,
			 OUTLET_CONFIRM_TIME,
			 OUTLET_CONFIRMOR,
			 SET_QTY,
			 FISCAL_CUST,
			 CANCEL_DATE,
			 CANCEL_REASON,
			 DID1,
			 DID2,
			 DID3,
			 MAX_PSN,
			 PATRON_NUM,
			 USE_YN,
			 CDATE,
			 CUSER,
			 UDATE,
			 UUSER
			) VALUES (
			 :reservNum,
			<#if kindCd?exists> :kindCd, <#else> null, </#if>
			<#if outletCd?exists> :outletCd, <#else> null, </#if>
			<#if acceptDate?exists> :acceptDate, <#else> null, </#if>
			<#if reservStatus?exists> :reservStatus, <#else> null, </#if>
			<#if reservCd?exists> :reservCd, <#else> null, </#if>
			<#if reservNm?exists> :reservNm, <#else> null, </#if>
			<#if rsvnNm?exists>   :rsvnNm, <#else> null, </#if>
			<#if strDate?exists>  :strDate, <#else> null, </#if>
			<#if endDate?exists>  :endDate, <#else> null, </#if>
			<#if timeCd?exists>   :timeCd, <#else> null, </#if>
			
			<#if strTime?exists> :strTime, <#else> null, </#if>
			<#if endTime?exists> :endTime, <#else> null, </#if>
			
			<#if beginDate?exists> :beginDate, <#else> null, </#if>
			<#if psn?exists> :psn, <#else> null, </#if>
			 :amCd,
			<#if prcgNm?exists> :prcgNm, <#else> null, </#if>
			<#if custCd?exists> :custCd, <#else> null, </#if>
			<#if prcgDept?exists> :prcgDept, <#else> null, </#if>
			<#if jobPosition?exists> :jobPosition, <#else> null, </#if>
			<#if custClass?exists> :custClass, <#else> null, </#if>
			
	 
			
			<#if telNum?exists>    SCC_CRYPTO.ENC_FUN(REPLACE(:telNum,'-','')), <#else> null, </#if>
			<#if handPhone?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:handPhone,'-','')), <#else> null, </#if>
			<#if faxNum?exists>    SCC_CRYPTO.ENC_FUN(REPLACE(:faxNum,'-','')), <#else> null, </#if>
			<#if emailAddr?exists> SCC_CRYPTO.ENC_FUN(:emailAddr), <#else> null, </#if>
			
			<#if emailYn?exists> DECODE(:emailYn, '1', 'Y', 'N'), <#else> null, </#if>
			<#if smsYn?exists> DECODE(:smsYn, '1', 'Y', 'N'), <#else> null, </#if>
			<#if dmYn?exists> DECODE(:dmYn, '1', 'Y', 'N'), <#else> null, </#if>
			<#if didYn?exists> DECODE(:didYn, '1', 'Y', 'N'), <#else> null, </#if>
			<#if vipYn?exists> DECODE(:vipYn, '1', 'Y', 'N'), <#else> null, </#if>
			<#if addrKey?exists> :addrKey, <#else> null, </#if>
			<#if fileKey?exists> :fileKey, <#else> null, </#if>
			<#if remarkFact?exists> :remarkFact, <#else> null, </#if>
			
			<#if remarkFnb?exists>      :remarkFnb,  <#else> null, </#if>
		    <#if remarkRoom?exists>     :remarkRoom,  <#else> null, </#if>
		    <#if remarkEtc?exists>      :remarkEtc, <#else> null, </#if>
		    <#if remarkOutside?exists>  :remarkOutside,  <#else> null, </#if>
			
			<#if prvsReservStatus?exists> :prvsReservStatus, <#else> null, </#if>
			<#if outletPatronType?exists> :outletPatronType, <#else> null, </#if>
			<#if outletConfirmTime?exists> :outletConfirmTime, <#else> null, </#if>
			<#if outletConfirmor?exists> :outletConfirmor, <#else> null, </#if>
			<#if setQty?exists> :setQty, <#else> null, </#if>
			<#if fiscalCust?exists> :fiscalCust, <#else> null, </#if>
			<#if cancelDate?exists> :cancelDate, <#else> null, </#if>
			<#if cancelReason?exists> :cancelReason, <#else> null, </#if>
			<#if did1?exists> :did1, <#else> null, </#if>
			<#if did2?exists> :did2, <#else> null, </#if>
			<#if did3?exists> :did3, <#else> null, </#if>
			<#if maxPsn?exists> :maxPsn, <#else> null, </#if>
			<#if patronNum?exists> :patronNum, <#else> null, </#if>
			<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
			 SYSDATE,
			 :loginSabun,
			 SYSDATE,
			 :loginSabun
			)
 
		]]>
	</statement>
	
	<!-- AM DATA를 수정한다. -->
	<statement name="updateDataMst" type="update">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.updateDataMst */
		<![CDATA[
 		 UPDATE BMS_RESERV_MST SET
 		 	AM_CD = :amCd,
			<#if kindCd?exists> KIND_CD = :kindCd, </#if>
			<#if outletCd?exists> OUTLET_CD = :outletCd, </#if>
			<#if acceptDate?exists> ACCEPT_DATE = :acceptDate, </#if>
			<#if reservStatus?exists> RESERV_STATUS = :reservStatus, </#if>
			<#if reservCd?exists> RESERV_CD = :reservCd, </#if>
			<#if reservNm?exists> RESERV_NM = :reservNm, </#if>
			<#if rsvnNm?exists> RSVN_NM = :rsvnNm, </#if>
			<#if strDate?exists> STR_DATE = :strDate, </#if>
			<#if endDate?exists> END_DATE = :endDate, </#if>
			<#if timeCd?exists> TIME_CD = :timeCd, </#if>
			<#if strTime?exists> STR_TIME = :strTime, </#if>
			<#if endTime?exists> END_TIME = :endTime, </#if>
			<#if beginDate?exists> BEGIN_DATE = :beginDate, </#if>
			<#if psn?exists> PSN = :psn, </#if>
			<#if prcgNm?exists> PRCG_NM = :prcgNm, </#if>
			<#if custCd?exists> CUST_CD = :custCd, </#if>
			<#if prcgDept?exists> PRCG_DEPT = :prcgDept, </#if>
			<#if jobPosition?exists> JOB_POSITION = :jobPosition, </#if>
			<#if custClass?exists> CUST_CLASS = :custClass, </#if>
			
			<#if telNum?exists>    TEL_NUM    = SCC_CRYPTO.ENC_FUN(REPLACE(:telNum,'-','')), </#if>
			<#if handPhone?exists> HAND_PHONE = SCC_CRYPTO.ENC_FUN(REPLACE(:handPhone,'-','')), </#if>
			<#if faxNum?exists>    FAX_NUM    = SCC_CRYPTO.ENC_FUN(REPLACE(:faxNum,'-','')), </#if>
			<#if emailAddr?exists> EMAIL_ADDR = SCC_CRYPTO.ENC_FUN(:emailAddr), </#if>
			
			<#if emailYn?exists> EMAIL_YN = DECODE(:emailYn, '1', 'Y', 'N'), </#if>
			<#if smsYn?exists> SMS_YN = DECODE(:smsYn, '1', 'Y', 'N'), </#if>
			<#if dmYn?exists> DM_YN = DECODE(:dmYn, '1', 'Y', 'N'), </#if>
			<#if didYn?exists> DID_YN = DECODE(:didYn, '1', 'Y', 'N'), </#if>
			<#if vipYn?exists> VIP_YN = DECODE(:vipYn, '1', 'Y', 'N'), </#if>
			
			<#if addrKey?exists> ADDR_KEY = :addrKey, </#if>
			<#if fileKey?exists> FILE_KEY = :fileKey, </#if>
			
			<#if remarkFact?exists> REMARK_FACT = :remarkFact, </#if>
		 
		    <#if remarkFnb?exists> REMARK_FNB     = :remarkFnb, </#if>
		    <#if remarkRoom?exists> REMARK_ROOM    = :remarkRoom, </#if>
		    <#if remarkEtc?exists> REMARK_ETC     = :remarkEtc, </#if>
		    <#if remarkOutside?exists> REMARK_OUTSIDE = :remarkOutside, </#if>
			
			
			<#if prvsReservStatus?exists> PRVS_RESERV_STATUS = :prvsReservStatus, </#if>
			<#if outletPatronType?exists> OUTLET_PATRON_TYPE = :outletPatronType, </#if>
			<#if outletConfirmTime?exists> OUTLET_CONFIRM_TIME = :outletConfirmTime, </#if>
			<#if outletConfirmor?exists> OUTLET_CONFIRMOR = :outletConfirmor, </#if>
			<#if setQty?exists> SET_QTY = :setQty, </#if>
			<#if fiscalCust?exists> FISCAL_CUST = :fiscalCust, </#if>
			<#if cancelDate?exists> CANCEL_DATE = :cancelDate, </#if>
			<#if cancelReason?exists> CANCEL_REASON = :cancelReason, </#if>
			<#if did1?exists> DID1 = :did1, </#if>
			<#if did2?exists> DID2 = :did2, </#if>
			<#if did3?exists> DID3 = :did3, </#if>
			<#if maxPsn?exists> MAX_PSN = :maxPsn, </#if>
			<#if patronNum?exists> PATRON_NUM = :patronNum, </#if>
			<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
			       UDATE = SYSDATE,
			       UUSER = :loginSabun
			WHERE  RESERV_NUM = :reservNum
		]]>
	</statement>
	
	<!-- MAX 코드를 생성한다. -->
	<statement name="maxCodeCreateMst" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.maxCodeCreateMst */
		<![CDATA[
		
 		SELECT  TO_CHAR(SYSDATE,'YYYYMM') || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(RESERV_NUM,7,6))),'0') + 1,6,'0')  AS MAX_CODE 
 		FROM BMS_RESERV_MST
 		WHERE SUBSTR(RESERV_NUM,1,6) = TO_CHAR(SYSDATE,'YYYYMM')
        
		]]>
	</statement>
	
	
	
	
	 <!-- BMS_RESERV_MENU 처리. -->
	<statement name="selectListGoods" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.selectListGoods */
		<![CDATA[
			SELECT MENU.RESERV_NUM,
			       MENU.FNB_CLASS,
			       MENU.SEQ,
			       MENU.OUTLET_CD, OUTLET.OUTLET_NM AS OUTLET_NM ,
			       
			       MST.RESERV_STATUS,
			       MST.KIND_CD,
			       
			       MENU.MENU_CD,
			       CASE MENU.FNB_CLASS WHEN 'P' THEN
			       							(SELECT  MENU_NM   FROM BMS_ORDERPLCE_GOODS A 
			       										      WHERE A.OUTLET_CD = MENU.OUTLET_CD 
			                                                    AND A.VENDOR_CD = MENU.VENDOR_CD 
			                                                    AND A.MENU_CD   = MENU.MENU_CD   ) 
			                           WHEN 'R' THEN
			       							(SELECT  CATERCHF_NM   FROM BMS_CATERCHF_MST A 
			       										      WHERE A.OUTLET_CD = MENU.OUTLET_CD 
			                                                    AND A.CLASS_CD  = '10' 
			                                                    AND A.CATERCHF_CD   = MENU.MENU_CD   )  
			                                                      
			       					   ELSE   
									       	(SELECT  MENU_NM FROM SLE_OUTLET_MENU A 
									       	                WHERE A.OUTLET_CD = MENU.OUTLET_CD 
									                          AND A.MENU_CD   = MENU.MENU_CD   ) 
			       END AS  MENU_NM,
			                
			       MENU.MENU_CLASS,
			       MENU.MENU_CLSFI,
			       MENU.MENU_SCLASS,
			       MENU.QUANTITY,
			       MENU.UPRICE,
			       MENU.AMT,
			       MENU.DISCNT_AMT,
			       MENU.TOT_AMT,
			       MENU.STR_DATE,
			       MENU.END_DATE,
			       MENU.STR_TIME,
			       MENU.END_TIME,
			       MENU.ADLT_PSN,
			       MENU.CHILD_PSN,
			       MENU.REMARK,
			       
			       MENU.VENDOR_CD,
			       (SELECT  VENDOR_NM FROM BMS_ORDERPLCE_MST VENDOR WHERE VENDOR.OUTLET_CD = MENU.OUTLET_CD 
			                                                 AND VENDOR.VENDOR_CD = MENU.VENDOR_CD 
			                ) AS  VENDOR_NM,
			       
			       MENU.ORDER_CONFIRM,
			       MENU.ORDER_DATE,
			       MENU.ORDER_CANCEL_DATE,
			       DECODE(MENU.USE_YN, 'Y', 1, 0) AS USE_YN,
			       MENU.CDATE,
			       MENU.CUSER,
			       MENU.UDATE,
			       MENU.UUSER
			FROM   BMS_RESERV_MENU MENU
			INNER JOIN BMS_RESERV_MST MST  ON MST.RESERV_NUM = MENU.RESERV_NUM 
			INNER JOIN ( SELECT MST.OUTLET_CD, MST.OUTLET_NM 
		                           FROM SLE_OUTLET_MST MST
		                         INNER JOIN  SCO_UPJANG_V   UPJANG ON  UPJANG.UPJANG = TO_NUMBER(MST.OUTLET_CD) 
		                                         <#if muCd?has_content> AND  UPJANG.MU_CD = :muCd </#if>
		                                         <#if tmCd?has_content> AND  UPJANG.TM_CD = :tmCd </#if>
		              			 ) OUTLET ON OUTLET.OUTLET_CD = MENU.OUTLET_CD

			WHERE  MENU.RESERV_NUM = :reservNum
			AND    MENU.FNB_CLASS  = :fnbClass
			AND    MENU.USE_YN = 'Y' 
			ORDER BY MENU.SEQ			
		
		]]>
	</statement>
	 
	<statement name="insertDataGoods" type="insert">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.insertDataGoods */
		<![CDATA[
			INSERT INTO BMS_RESERV_MENU
						(
						 RESERV_NUM,
						 FNB_CLASS,
						 SEQ,
						 OUTLET_CD,
						 MENU_CD,
						 MENU_CLASS,
						 MENU_CLSFI,
						 MENU_SCLASS,
						 QUANTITY,
						 UPRICE,
						 AMT,
						 DISCNT_AMT,
						 TOT_AMT,
						 STR_DATE,
						 END_DATE,
						 STR_TIME,
						 END_TIME,
						 ADLT_PSN,
						 CHILD_PSN,
						 REMARK,
						 VENDOR_CD,
						 ORDER_CONFIRM,
						 ORDER_DATE,
						 ORDER_CANCEL_DATE,
						 USE_YN,
						 CDATE,
						 CUSER,
						 UDATE,
						 UUSER
						) VALUES (
						 :reservNum,
						 :fnbClass,
						 :seq,
						<#if outletCd?exists> :outletCd, <#else> null, </#if>
						<#if menuCd?exists> :menuCd, <#else> null, </#if>
						<#if menuClass?exists> :menuClass, <#else> null, </#if>
						<#if menuClsfi?exists> :menuClsfi, <#else> null, </#if>
						<#if menuSclass?exists> :menuSclass, <#else> null, </#if>
						<#if quantity?exists> :quantity, <#else> null, </#if>
						<#if uprice?exists> :uprice, <#else> null, </#if>
						<#if amt?exists> :amt, <#else> null, </#if>
						<#if discntAmt?exists> :discntAmt, <#else> null, </#if>
						<#if totAmt?exists> :totAmt, <#else> null, </#if>
						<#if strDate?exists> :strDate, <#else> null, </#if>
						<#if endDate?exists> :endDate, <#else> null, </#if>
						<#if strTime?exists> :strTime, <#else> null, </#if>
						<#if endTime?exists> :endTime, <#else> null, </#if>
						<#if adltPsn?exists> :adltPsn, <#else> null, </#if>
						<#if childPsn?exists> :childPsn, <#else> null, </#if>
						<#if remark?exists> :remark, <#else> null, </#if>
						<#if vendorCd?exists> :vendorCd, <#else> null, </#if>
						<#if orderConfirm?exists> :orderConfirm, <#else> null, </#if>
						<#if orderDate?exists> :orderDate, <#else> null, </#if>
						<#if orderCancelDate?exists> :orderCancelDate, <#else> null, </#if>
						<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
						 SYSDATE,
						 :loginSabun,
						 SYSDATE,
						 :loginSabun
						)
		
		]]>
	</statement>
	
	<!-- BMS_RESERV_MENU DATA를 저장한다. --> 
	<statement name="updateDataGoods" type="insert">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.updateDataGoods */
		<![CDATA[
			UPDATE BMS_RESERV_MENU SET
				<#if outletCd?exists> OUTLET_CD = :outletCd, </#if>
				<#if menuCd?exists> MENU_CD = :menuCd, </#if>
				<#if menuClass?exists> MENU_CLASS = :menuClass, </#if>
				<#if menuClsfi?exists> MENU_CLSFI = :menuClsfi, </#if>
				<#if menuSclass?exists> MENU_SCLASS = :menuSclass, </#if>
				<#if quantity?exists> QUANTITY = :quantity, </#if>
				<#if uprice?exists> UPRICE = :uprice, </#if>
				<#if amt?exists> AMT = :amt, </#if>
				<#if discntAmt?exists> DISCNT_AMT = :discntAmt, </#if>
				<#if totAmt?exists> TOT_AMT = :totAmt, </#if>
				<#if strDate?exists> STR_DATE = :strDate, </#if>
				<#if endDate?exists> END_DATE = :endDate, </#if>
				<#if strTime?exists> STR_TIME = :strTime, </#if>
				<#if endTime?exists> END_TIME = :endTime, </#if>
				<#if adltPsn?exists> ADLT_PSN = :adltPsn, </#if>
				<#if childPsn?exists> CHILD_PSN = :childPsn, </#if>
				<#if remark?exists> REMARK = :remark, </#if>
				<#if vendorCd?exists> VENDOR_CD = :vendorCd, </#if>
				<#if orderConfirm?exists> ORDER_CONFIRM = :orderConfirm, </#if>
				<#if orderDate?exists> ORDER_DATE = :orderDate, </#if>
				<#if orderCancelDate?exists> ORDER_CANCEL_DATE = :orderCancelDate, </#if>
				<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
				       UDATE = SYSDATE,
				       UUSER = :loginSabun
			WHERE  RESERV_NUM = :reservNum
			AND    FNB_CLASS = :fnbClass
			AND    SEQ = :seq
			
		
		]]>
	</statement>
	
	<!-- MAX 코드를 생성한다. -->
	<statement name="maxCodeCreateGoods" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.maxCodeCreateGoods */
		<![CDATA[
		
 		SELECT  NVL(MAX(TO_NUMBER(SEQ)),'0') + 1  AS MAX_CODE 
 		FROM BMS_RESERV_MENU
 		WHERE  RESERV_NUM = :reservNum  
		  AND  FNB_CLASS  = :fnbClass
        
		]]>
	</statement>
	
	
	<!-- BMS_RESERV_ROOM 처리. -->
	<statement name="selectListRoom" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.selectListRoom */
		<![CDATA[
			SELECT MAST.RESERV_NUM,
			       MAST.SEQ,
			       MAST.OUTLET_CD, OUTLET.OUTLET_NM AS OUTLET_NM ,
			       MAST.ARRIV_DATE,
			       MAST.LODGE_DD,
			       MAST.CHKOT_DATE,
			       MAST.ROOM_TYPE,
			       MAST.RM_QTY,
			       MAST.PSN,
			       MAST.PSN_UPRICE,
			       MAST.UPRICE,
			       MAST.AMT,
			       MAST.DISCNT_AMT,
			       MAST.TOT_AMT,
			       MAST.REMARK,
			       DECODE(MAST.USE_YN, 'Y', 1, 0) AS USE_YN,
			       MAST.CDATE,
			       MAST.CUSER,
			       MAST.UDATE,
			       MAST.UUSER
			FROM   BMS_RESERV_ROOM MAST
			INNER JOIN ( SELECT MST.OUTLET_CD, MST.OUTLET_NM 
		                           FROM SLE_OUTLET_MST MST
		                         INNER JOIN  SCO_UPJANG_V   UPJANG ON  UPJANG.UPJANG = TO_NUMBER(MST.OUTLET_CD) 
		                                         <#if muCd?has_content> AND  UPJANG.MU_CD = :muCd </#if>
		                                         <#if tmCd?has_content> AND  UPJANG.TM_CD = :tmCd </#if>
		              			 ) OUTLET ON OUTLET.OUTLET_CD = MAST.OUTLET_CD
			
			WHERE  MAST.RESERV_NUM = :reservNum
			AND    MAST.USE_YN = 'Y'
			ORDER BY MAST.SEQ
		]]>
	</statement> 
	
	<statement name="insertDataRoom" type="insert">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.insertDataRoom */
		<![CDATA[
			INSERT INTO BMS_RESERV_ROOM
				(
				 RESERV_NUM,
				 SEQ,
				 OUTLET_CD,
				 ARRIV_DATE,
				 LODGE_DD,
				 CHKOT_DATE,
				 ROOM_TYPE,
				 RM_QTY,
				 PSN,
				 PSN_UPRICE,
				 UPRICE,
				 AMT,
				 DISCNT_AMT,
				 TOT_AMT,
				 REMARK,
				 USE_YN,
				 CDATE,
				 CUSER,
				 UDATE,
				 UUSER
				) VALUES (
				 :reservNum,
				 :seq,
				<#if outletCd?exists> :outletCd, <#else> null, </#if>
				<#if arrivDate?exists> :arrivDate, <#else> null, </#if>
				<#if lodgeDd?exists> :lodgeDd, <#else> null, </#if>
				<#if chkotDate?exists> :chkotDate, <#else> null, </#if>
				<#if roomType?exists> :roomType, <#else> null, </#if>
				<#if rmQty?exists> :rmQty, <#else> null, </#if>
				<#if psn?exists> :psn, <#else> null, </#if>
				<#if psnUprice?exists> :psnUprice, <#else> null, </#if>
				<#if uprice?exists> :uprice, <#else> null, </#if>
				<#if amt?exists> :amt, <#else> null, </#if>
				<#if discntAmt?exists> :discntAmt, <#else> null, </#if>
				<#if totAmt?exists> :totAmt, <#else> null, </#if>
				<#if remark?exists> :remark, <#else> null, </#if>
				<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
				 SYSDATE,
				 :loginSabun,
				 SYSDATE,
				 :loginSabun
				)
							
		
		]]>
	</statement>

	<statement name="updateDataRoom" type="insert">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.updateDataRoom */
		<![CDATA[
			UPDATE BMS_RESERV_ROOM SET
				<#if outletCd?exists> OUTLET_CD = :outletCd, </#if>
				<#if arrivDate?exists> ARRIV_DATE = :arrivDate, </#if>
				<#if lodgeDd?exists> LODGE_DD = :lodgeDd, </#if>
				<#if chkotDate?exists> CHKOT_DATE = :chkotDate, </#if>
				<#if roomType?exists> ROOM_TYPE = :roomType, </#if>
				<#if rmQty?exists> RM_QTY = :rmQty, </#if>
				<#if psn?exists> PSN = :psn, </#if>
				<#if psnUprice?exists> PSN_UPRICE = :psnUprice, </#if>
				<#if uprice?exists> UPRICE = :uprice, </#if>
				<#if amt?exists> AMT = :amt, </#if>
				<#if discntAmt?exists> DISCNT_AMT = :discntAmt, </#if>
				<#if totAmt?exists> TOT_AMT = :totAmt, </#if>
				<#if remark?exists> REMARK = :remark, </#if>
				<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
				       UDATE = SYSDATE,
				       UUSER = :loginSabun
				WHERE  RESERV_NUM = :reservNum
				AND    SEQ = :seq
				
		]]>
	</statement>
	
	 <!-- MAX 코드를 생성한다. -->
	<statement name="maxCodeCreateRoom" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.maxCodeCreateRoom */
		<![CDATA[
		
 		SELECT  NVL(MAX(TO_NUMBER(SEQ)),'0') + 1  AS MAX_CODE 
 		FROM BMS_RESERV_ROOM
 		WHERE  RESERV_NUM = :reservNum
		 
        
		]]>
	</statement>
	
	
	<!-- 웨딩 조회 -->
	<statement name="selectListWedding" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.selectListWedding */
		<![CDATA[
			SELECT RESERV_NUM,
			       FUNCTION_CLASS,
			       MANAGER_CD,
			       SERVER_CD,
			       CHEF_CD,
			       WEDDING_HALL,
			       DINING_HALL,
			       GIFT_ROOM,
			       WAITING_ROOM,
			       
			       SCC_CRYPTO.MASKAUTH_FUN(HUSB,12,:loginPersMask,:maskAuth) AS HUSB,  
			       SCC_CRYPTO.MASKAUTH_FUN(HUSB_FATHER,12,:loginPersMask,:maskAuth) AS HUSB_FATHER,  
			       SCC_CRYPTO.MASKAUTH_FUN(HUSB_MONTHER,12,:loginPersMask,:maskAuth) AS HUSB_MONTHER , 
			       
			       --전화번호 - 넣기
			        CASE  LENGTH(LTRIM(RTRIM(HUSB_TEL_NUM))) 
			        WHEN  9 THEN SUBSTR(HUSB_TEL_NUM,1,2) || '-' || SUBSTR(HUSB_TEL_NUM,3,3) || '-' || SUBSTR(HUSB_TEL_NUM,6,4)
			        WHEN 10 THEN SUBSTR(HUSB_TEL_NUM,1,2) || '-' || SUBSTR(HUSB_TEL_NUM,3,4) || '-' || SUBSTR(HUSB_TEL_NUM,7,4)
			        WHEN 11 THEN SUBSTR(HUSB_TEL_NUM,1,3) || '-' || SUBSTR(HUSB_TEL_NUM,4,4) || '-' || SUBSTR(HUSB_TEL_NUM,8,4)
			        ELSE '' END    AS HUSB_TEL_NUM,  
											 
			        SCC_TELNO_SPLIT_FUN(HUSB_TEL_NUM,1)     AS HUSB_TEL_NUM1,
			        SCC_TELNO_SPLIT_FUN(HUSB_TEL_NUM,2)     AS HUSB_TEL_NUM2,
			        SCC_TELNO_SPLIT_FUN(HUSB_TEL_NUM,3)     AS HUSB_TEL_NUM3,
								
			        --핸드폰번호 - 넣기		   
			        CASE  LENGTH(LTRIM(RTRIM(HUSB_HAND_PHONE))) 
			        WHEN  9 THEN SUBSTR(HUSB_HAND_PHONE,1,2) || '-' || SUBSTR(HUSB_HAND_PHONE,3,3) || '-' || SUBSTR(HUSB_HAND_PHONE,6,4)
			        WHEN 10 THEN SUBSTR(HUSB_HAND_PHONE,1,2) || '-' || SUBSTR(HUSB_HAND_PHONE,3,4) || '-' || SUBSTR(HUSB_HAND_PHONE,7,4)
			        WHEN 11 THEN SUBSTR(HUSB_HAND_PHONE,1,3) || '-' || SUBSTR(HUSB_HAND_PHONE,4,4) || '-' || SUBSTR(HUSB_HAND_PHONE,8,4)
			        ELSE '' END    AS HUSB_HAND_PHONE,  
											 
			        SCC_TELNO_SPLIT_FUN(HUSB_HAND_PHONE,1)     AS HUSB_HAND_PHONE1,
			        SCC_TELNO_SPLIT_FUN(HUSB_HAND_PHONE,2)     AS HUSB_HAND_PHONE2,
			        SCC_TELNO_SPLIT_FUN(HUSB_HAND_PHONE,3)     AS HUSB_HAND_PHONE3,
			       
			       HUSB_ADDR_KEY,
			       HUSB_ADDR_INFO,
			       
			       SCC_CRYPTO.MASKAUTH_FUN(BRIDE,12,:loginPersMask,:maskAuth) AS BRIDE  ,
			       SCC_CRYPTO.MASKAUTH_FUN(BRIDE_FATHER,12,:loginPersMask,:maskAuth) AS BRIDE_FATHER  ,
			       SCC_CRYPTO.MASKAUTH_FUN(BRIDE_MONTHER,12,:loginPersMask,:maskAuth) AS BRIDE_MONTHER,  
			     
			       --전화번호 - 넣기
			        CASE  LENGTH(LTRIM(RTRIM(BRIDE_TEL_NUM))) 
			        WHEN  9 THEN SUBSTR(BRIDE_TEL_NUM,1,2) || '-' || SUBSTR(BRIDE_TEL_NUM,3,3) || '-' || SUBSTR(BRIDE_TEL_NUM,6,4)
			        WHEN 10 THEN SUBSTR(BRIDE_TEL_NUM,1,2) || '-' || SUBSTR(BRIDE_TEL_NUM,3,4) || '-' || SUBSTR(BRIDE_TEL_NUM,7,4)
			        WHEN 11 THEN SUBSTR(BRIDE_TEL_NUM,1,3) || '-' || SUBSTR(BRIDE_TEL_NUM,4,4) || '-' || SUBSTR(BRIDE_TEL_NUM,8,4)
			        ELSE '' END    AS BRIDE_TEL_NUM,  
											 
			        SCC_TELNO_SPLIT_FUN(BRIDE_TEL_NUM,1)     AS BRIDE_TEL_NUM1,
			        SCC_TELNO_SPLIT_FUN(BRIDE_TEL_NUM,2)     AS BRIDE_TEL_NUM2,
			        SCC_TELNO_SPLIT_FUN(BRIDE_TEL_NUM,3)     AS BRIDE_TEL_NUM3,
								
			        --핸드폰번호 - 넣기		   
			        CASE  LENGTH(LTRIM(RTRIM(BRIDE_HAND_PHONE))) 
			        WHEN  9 THEN SUBSTR(BRIDE_HAND_PHONE,1,2) || '-' || SUBSTR(BRIDE_HAND_PHONE,3,3) || '-' || SUBSTR(BRIDE_HAND_PHONE,6,4)
			        WHEN 10 THEN SUBSTR(BRIDE_HAND_PHONE,1,2) || '-' || SUBSTR(BRIDE_HAND_PHONE,3,4) || '-' || SUBSTR(BRIDE_HAND_PHONE,7,4)
			        WHEN 11 THEN SUBSTR(BRIDE_HAND_PHONE,1,3) || '-' || SUBSTR(BRIDE_HAND_PHONE,4,4) || '-' || SUBSTR(BRIDE_HAND_PHONE,8,4)
			        ELSE '' END    AS BRIDE_HAND_PHONE,  
											 
			        SCC_TELNO_SPLIT_FUN(BRIDE_HAND_PHONE,1)     AS BRIDE_HAND_PHONE1,
			        SCC_TELNO_SPLIT_FUN(BRIDE_HAND_PHONE,2)     AS BRIDE_HAND_PHONE2,
			        SCC_TELNO_SPLIT_FUN(BRIDE_HAND_PHONE,3)     AS BRIDE_HAND_PHONE3,
			       
			       BRIDE_ADDR_KEY,
			       BRIDE_ADDR_INFO,
			       
			       TYPE01,
			       TYPE02,
			       TYPE03,
			       TYPE04,
			       TYPE05,
			       TYPE06,
			       TYPE07,
			       TYPE08,
			       PAY_DT,
			       
			       
			       HUSB_COMP_NM ,
                   HUSB_EMAIL,
                   HUSB_COMP_ADDR_KEY ,
                   HUSB_COMP_ADDR_INFO,
  				   HUSB_CLASS ,
  				   
                   HUSB_FATHER_TEL, 
                   SCC_TELNO_SPLIT_FUN(HUSB_FATHER_TEL,1)     AS HUSB_FATHER_TEL1,
                   SCC_TELNO_SPLIT_FUN(HUSB_FATHER_TEL,2)     AS HUSB_FATHER_TEL2,
			       SCC_TELNO_SPLIT_FUN(HUSB_FATHER_TEL,3)     AS HUSB_FATHER_TEL3,
                   HUSB_MONTHER_TEL,
                   SCC_TELNO_SPLIT_FUN(HUSB_MONTHER_TEL,1)     AS HUSB_MONTHER_TEL1,
                   SCC_TELNO_SPLIT_FUN(HUSB_MONTHER_TEL,2)     AS HUSB_MONTHER_TEL2,
			       SCC_TELNO_SPLIT_FUN(HUSB_MONTHER_TEL,3)     AS HUSB_MONTHER_TEL3,
                       
                   BRIDE_COMP_NM ,
                   BRIDE_EMAIL,
                   BRIDE_COMP_ADDR_KEY ,
                   BRIDE_COMP_ADDR_INFO,
  				   BRIDE_CLASS ,
                   BRIDE_FATHER_TEL,
                   SCC_TELNO_SPLIT_FUN(BRIDE_FATHER_TEL,1)     AS BRIDE_FATHER_TEL1,
                   SCC_TELNO_SPLIT_FUN(BRIDE_FATHER_TEL,2)     AS BRIDE_FATHER_TEL2,
			       SCC_TELNO_SPLIT_FUN(BRIDE_FATHER_TEL,3)     AS BRIDE_FATHER_TEL3,
                   BRIDE_MONTHER_TEL,
                   SCC_TELNO_SPLIT_FUN(BRIDE_MONTHER_TEL,1)     AS BRIDE_MONTHER_TEL1,
                   SCC_TELNO_SPLIT_FUN(BRIDE_MONTHER_TEL,2)     AS BRIDE_MONTHER_TEL2,
			       SCC_TELNO_SPLIT_FUN(BRIDE_MONTHER_TEL,3)     AS BRIDE_MONTHER_TEL3,
			       
			       PACN_NO_MAN,
			       VIP_NMSNGL,
			       MIKE_QUANTITY,
			       EDGE_YN,
			       SOCIETY_YN,
			       SEATGST_YN,
			       RADIO_YN,
			       HUSB_CD,
			       HUSB_REMARK,
			       BRIDE_CD,
			       BRIDE_REMARK,
			       SPCL_FACT,
			       CONSULTING_YN,
			       INTD_YN,
			       SECND_YN,
			       THREE_YN,
			       ROOM_REMARK,
			       SEMINAR_REMARK,
			       FNB_REMARK,
			       SPECIAL_REMARK,
			       ADD_FACT,
			       RMRK_FACT,
			       TMCHF_SPEAK,
			       GM_SPEAK,
			       FOOD_DISCNT,
			       BEVG_DISCNT,
			       ETC_DISCNT,
			       DISCNT_REASON,
			       TAX_BILL,
			       CASH_SETTLE,
			       CARD_SETTLE,
			       CRDT_DD,
			       EXPECT_AMT,
			       ACTUAL_AMT,
			       END_CONTENTS,
			       USE_YN 
 			FROM (
 				   SELECT RESERV_NUM,
				       FUNCTION_CLASS,
				       MANAGER_CD,
				       SERVER_CD,
				       CHEF_CD,
				       
				       WEDDING_HALL, 
				       DINING_HALL,
				       GIFT_ROOM,
				       WAITING_ROOM,
				       
				       HUSB,
				       HUSB_FATHER,
				       HUSB_MONTHER,
				       
				       SCC_CRYPTO.MASKAUTH_FUN(HUSB_TEL_NUM,9,:loginPersMask,:maskAuth)    AS HUSB_TEL_NUM,
		       		   SCC_CRYPTO.MASKAUTH_FUN(HUSB_HAND_PHONE,8,:loginPersMask,:maskAuth) AS HUSB_HAND_PHONE,
				       
				       HUSB_ADDR_KEY,
				       SCC_ADDR_FUN(HUSB_ADDR_KEY, :loginPersMask, :maskAuth) AS HUSB_ADDR_INFO,
				       
				       BRIDE,
				       BRIDE_FATHER,
				       BRIDE_MONTHER,
				       
				       SCC_CRYPTO.MASKAUTH_FUN(BRIDE_TEL_NUM,9,:loginPersMask,:maskAuth)    AS BRIDE_TEL_NUM,
		       		   SCC_CRYPTO.MASKAUTH_FUN(BRIDE_HAND_PHONE,8,:loginPersMask,:maskAuth) AS BRIDE_HAND_PHONE,
				       
				       BRIDE_ADDR_KEY,
				       SCC_ADDR_FUN(BRIDE_ADDR_KEY, :loginPersMask, :maskAuth) AS BRIDE_ADDR_INFO,
				       
				       
				       
					   HUSB_COMP_NM ,
                       SCC_CRYPTO.MASKAUTH_FUN(HUSB_EMAIL,7,:loginPersMask,:maskAuth) AS HUSB_EMAIL,
                       HUSB_COMP_ADDR_KEY ,
                       SCC_ADDR_FUN(HUSB_COMP_ADDR_KEY,     :loginPersMask, :maskAuth) AS HUSB_COMP_ADDR_INFO,
  					   HUSB_CLASS ,
                       SCC_CRYPTO.MASKAUTH_FUN(HUSB_FATHER_TEL,8, :loginPersMask,:maskAuth) AS HUSB_FATHER_TEL,
                       SCC_CRYPTO.MASKAUTH_FUN(HUSB_MONTHER_TEL,8,:loginPersMask,:maskAuth) AS HUSB_MONTHER_TEL,
                       
                       BRIDE_COMP_NM ,
                       SCC_CRYPTO.MASKAUTH_FUN(BRIDE_EMAIL,7,:loginPersMask,:maskAuth) AS BRIDE_EMAIL,
                       BRIDE_COMP_ADDR_KEY ,
                       SCC_ADDR_FUN(BRIDE_COMP_ADDR_KEY,     :loginPersMask, :maskAuth) AS BRIDE_COMP_ADDR_INFO,
  					   BRIDE_CLASS ,
                       SCC_CRYPTO.MASKAUTH_FUN(BRIDE_FATHER_TEL,8, :loginPersMask,:maskAuth) AS BRIDE_FATHER_TEL,
                       SCC_CRYPTO.MASKAUTH_FUN(BRIDE_MONTHER_TEL,8,:loginPersMask,:maskAuth) AS BRIDE_MONTHER_TEL,
 
				       PACN_NO_MAN,
				       VIP_NMSNGL,
				       MIKE_QUANTITY,
				       
				       DECODE(EDGE_YN, 'Y', 1, 0) AS EDGE_YN,
				       DECODE(SOCIETY_YN, 'Y', 1, 0) AS SOCIETY_YN,
				       DECODE(SEATGST_YN, 'Y', 1, 0) AS SEATGST_YN,
				       DECODE(RADIO_YN, 'Y', 1, 0) AS RADIO_YN,
				       
				       HUSB_CD,
				       HUSB_REMARK,
				       BRIDE_CD,
				       BRIDE_REMARK,
				       SPCL_FACT,
				       
				       DECODE(CONSULTING_YN, 'Y', 1, 0) AS CONSULTING_YN,
				       DECODE(INTD_YN, 'Y', 1, 0) AS INTD_YN,
				       DECODE(SECND_YN, 'Y', 1, 0) AS SECND_YN,
				       DECODE(THREE_YN, 'Y', 1, 0) AS THREE_YN,
				       
				       
				       DECODE(TYPE01, 'Y', 1, 0) AS TYPE01,
				       DECODE(TYPE02, 'Y', 1, 0) AS TYPE02,
				       DECODE(TYPE03, 'Y', 1, 0) AS TYPE03,
				       DECODE(TYPE04, 'Y', 1, 0) AS TYPE04,
				       DECODE(TYPE05, 'Y', 1, 0) AS TYPE05,
				       DECODE(TYPE06, 'Y', 1, 0) AS TYPE06,
				       DECODE(TYPE07, 'Y', 1, 0) AS TYPE07,
				       DECODE(TYPE08, 'Y', 1, 0) AS TYPE08,
				       PAY_DT,
				       
				       ROOM_REMARK,
				       SEMINAR_REMARK,
				       FNB_REMARK,
				       SPECIAL_REMARK,
				       ADD_FACT,
				       RMRK_FACT,
				       TMCHF_SPEAK,
				       GM_SPEAK,
				       FOOD_DISCNT,
				       BEVG_DISCNT,
				       ETC_DISCNT,
				       DISCNT_REASON,
				       DECODE(TAX_BILL, 'Y', 1, 0) AS TAX_BILL,
				       CASH_SETTLE,
				       CARD_SETTLE,
				       CRDT_DD,
				       EXPECT_AMT,
				       ACTUAL_AMT,
				       END_CONTENTS,
				       DECODE(USE_YN, 'Y', 1, 0) AS USE_YN 
					FROM   BMS_FUNCTION WEDD
					WHERE  RESERV_NUM = :reservNum
			) DUAL
			 
 
         
		]]>
	</statement>
	
	<!-- WEDDING 저장 -->
	<statement name="insertDataWedding" type="insert">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.insertDataWedding */
		<![CDATA[
			INSERT INTO BMS_FUNCTION
				(
				 RESERV_NUM,
				 FUNCTION_CLASS,
				 MANAGER_CD,
				 SERVER_CD,
				 CHEF_CD,
				 WEDDING_HALL,
				 DINING_HALL,
				 GIFT_ROOM,
				 WAITING_ROOM,
				 HUSB,
				 HUSB_FATHER,
				 HUSB_MONTHER,
				 HUSB_TEL_NUM,
				 HUSB_HAND_PHONE,
				 HUSB_ADDR_KEY,
				 BRIDE,
				 BRIDE_FATHER,
				 BRIDE_MONTHER,
				 BRIDE_TEL_NUM,
				 BRIDE_HAND_PHONE,
				 BRIDE_ADDR_KEY,
				 PACN_NO_MAN,
				 VIP_NMSNGL,
				 MIKE_QUANTITY,
				 EDGE_YN,
				 SOCIETY_YN,
				 SEATGST_YN,
				 RADIO_YN,
				 HUSB_CD,
				 HUSB_REMARK,
				 BRIDE_CD,
				 BRIDE_REMARK,
				 SPCL_FACT,
				 CONSULTING_YN,
				 INTD_YN,
				 SECND_YN,
				 THREE_YN,
				 
				 TYPE01,
				 TYPE02,
				 TYPE03,
				 TYPE04,
				 TYPE05,
				 TYPE06,
				 TYPE07,
				 TYPE08,
				 PAY_DT,
				 
				 ROOM_REMARK,
				 SEMINAR_REMARK,
				 FNB_REMARK,
				 SPECIAL_REMARK,
				 ADD_FACT,
				 RMRK_FACT,
				 TMCHF_SPEAK,
				 GM_SPEAK,
				 FOOD_DISCNT,
				 BEVG_DISCNT,
				 ETC_DISCNT,
				 DISCNT_REASON,
				 TAX_BILL,
				 CASH_SETTLE,
				 CARD_SETTLE,
				 CRDT_DD,
				 EXPECT_AMT,
				 ACTUAL_AMT,
				 END_CONTENTS,
				 
				 HUSB_COMP_NM ,
				 HUSB_EMAIL ,
				 HUSB_COMP_ADDR_KEY ,
				 HUSB_CLASS ,
				 HUSB_FATHER_TEL ,
				 HUSB_MONTHER_TEL ,
				 BRIDE_COMP_NM ,
				 BRIDE_EMAIL ,
				 BRIDE_COMP_ADDR_KEY ,
				 BRIDE_CLASS ,
				 BRIDE_FATHER_TEL ,
				 BRIDE_MONTHER_TEL, 
				 
				 USE_YN,
				 CDATE,
				 CUSER,
				 UDATE,
				 UUSER
				) VALUES (
				 :reservNum,
				<#if functionClass?exists> :functionClass, <#else> null, </#if>
				<#if managerCd?exists> :managerCd, <#else> null, </#if>
				<#if serverCd?exists> :serverCd, <#else> null, </#if>
				<#if chefCd?exists> :chefCd, <#else> null, </#if>
				<#if weddingHall?exists> :weddingHall, <#else> null, </#if>
				<#if diningHall?exists> :diningHall, <#else> null, </#if>
				<#if giftRoom?exists> :giftRoom, <#else> null, </#if>
				<#if waitingRoom?exists> :waitingRoom, <#else> null, </#if>
				<#if husb?exists> :husb, <#else> null, </#if>
				<#if husbFather?exists> :husbFather, <#else> null, </#if>
				<#if husbMonther?exists> :husbMonther, <#else> null, </#if>
				
				 
				
				<#if husbTelNum?exists>    SCC_CRYPTO.ENC_FUN(REPLACE(:husbTelNum,'-','')), <#else> null, </#if>
				<#if husbHandPhone?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:husbHandPhone,'-','')), <#else> null, </#if>
				
				<#if husbAddrKey?exists> :husbAddrKey, <#else> null, </#if>
				
				<#if bride?exists>          :bride, <#else> null, </#if>
				<#if brideFather?exists>    :brideFather, <#else> null, </#if>
				<#if brideMonther?exists>   :brideMonther, <#else> null, </#if>
				<#if brideTelNum?exists>    SCC_CRYPTO.ENC_FUN(REPLACE(:brideTelNum,'-','')), <#else> null, </#if>
				<#if brideHandPhone?exists> SCC_CRYPTO.ENC_FUN(REPLACE(:brideHandPhone,'-','')), <#else> null, </#if>
				
				<#if brideAddrKey?exists> :brideAddrKey, <#else> null, </#if>
				
				<#if pacnNoMan?exists>    :pacnNoMan, <#else> null, </#if>
				<#if vipNmsngl?exists>    :vipNmsngl, <#else> null, </#if>
				<#if mikeQuantity?exists> :mikeQuantity, <#else> null, </#if>
				
				<#if edgeYn?exists>    DECODE(:edgeYn, '1', 'Y', 'N'), <#else> null, </#if>
				<#if societyYn?exists> DECODE(:societyYn, '1', 'Y', 'N'), <#else> null, </#if>
				<#if seatgstYn?exists> DECODE(:seatgstYn, '1', 'Y', 'N'), <#else> null, </#if>
				<#if radioYn?exists>   DECODE(:radioYn, '1', 'Y', 'N'), <#else> null, </#if>
				
				<#if husbCd?exists>      :husbCd, <#else> null, </#if>
				<#if husbRemark?exists>  :husbRemark, <#else> null, </#if>
				<#if brideCd?exists>     :brideCd, <#else> null, </#if>
				<#if brideRemark?exists> :brideRemark, <#else> null, </#if>
				<#if spclFact?exists>    :spclFact, <#else> null, </#if>
				
				<#if consultingYn?exists> DECODE(:consultingYn, '1', 'Y', 'N'), <#else> null, </#if>
				<#if intdYn?exists> DECODE(:intdYn, '1', 'Y', 'N'), <#else> null, </#if>
				<#if secndYn?exists> DECODE(:secndYn, '1', 'Y', 'N'), <#else> null, </#if>
				<#if threeYn?exists> DECODE(:threeYn, '1', 'Y', 'N'), <#else> null, </#if>
				
				
				<#if type01?exists> DECODE(:type01, '1', 'Y', 'N'), <#else> null, </#if>
				<#if type02?exists> DECODE(:type02, '1', 'Y', 'N'), <#else> null, </#if>
				<#if type03?exists> DECODE(:type03, '1', 'Y', 'N'), <#else> null, </#if>
				<#if type04?exists> DECODE(:type04, '1', 'Y', 'N'), <#else> null, </#if>
				<#if type05?exists> DECODE(:type05, '1', 'Y', 'N'), <#else> null, </#if>
				<#if type06?exists> DECODE(:type06, '1', 'Y', 'N'), <#else> null, </#if>
				<#if type07?exists> DECODE(:type07, '1', 'Y', 'N'), <#else> null, </#if>
				<#if type08?exists> DECODE(:type08, '1', 'Y', 'N'), <#else> null, </#if>
				<#if payDt?exists> :payDt , <#else> null, </#if>
				
				
				<#if roomRemark?exists>    :roomRemark,    <#else> null, </#if>
				<#if seminarRemark?exists> :seminarRemark, <#else> null, </#if>
				<#if fnbRemark?exists>     :fnbRemark,     <#else> null, </#if>
				<#if specialRemark?exists> :specialRemark, <#else> null, </#if>
				<#if addFact?exists>       :addFact,       <#else> null, </#if>
				<#if rmrkFact?exists>      :rmrkFact,      <#else> null, </#if>
				<#if tmchfSpeak?exists>    :tmchfSpeak,    <#else> null, </#if>
				<#if gmSpeak?exists>       :gmSpeak,       <#else> null, </#if>
				<#if foodDiscnt?exists>    :foodDiscnt,    <#else> null, </#if>
				<#if bevgDiscnt?exists>    :bevgDiscnt,    <#else> null, </#if>
				<#if etcDiscnt?exists>     :etcDiscnt,     <#else> null, </#if>
				<#if discntReason?exists>  :discntReason,  <#else> null, </#if>
				
				<#if taxBill?exists> DECODE(:taxBill, '1', 'Y', 'N'), <#else> null, </#if>
				
				<#if cashSettle?exists> :cashSettle, <#else> null, </#if>
				<#if cardSettle?exists> :cardSettle, <#else> null, </#if>
				<#if crdtDd?exists> :crdtDd, <#else> null, </#if>
				<#if expectAmt?exists> :expectAmt, <#else> null, </#if>
				<#if actualAmt?exists> :actualAmt, <#else> null, </#if>
				<#if endContents?exists> :endContents, <#else> null, </#if>
				
				
				<#if husbCompNm?exists>        :husbCompNm,                                   <#else> null, </#if>
				<#if husbEmail?exists>         SCC_CRYPTO.ENC_FUN(:husbEmail),                <#else> null, </#if>
				<#if husbCompAddrKey?exists>   :husbCompAddrKey,                              <#else> null, </#if>
				<#if husbClass?exists>         :husbClass,                                    <#else> null, </#if>
				<#if husbFatherTel?exists>     SCC_CRYPTO.ENC_FUN(REPLACE(:husbFatherTel,'-','')),   <#else> null, </#if>
				<#if husbMontherTel?exists>    SCC_CRYPTO.ENC_FUN(REPLACE(:husbMontherTel,'-','')),  <#else> null, </#if>
				<#if brideCompNm?exists>       :brideCompNm,                                  <#else> null, </#if>
				<#if brideEmail?exists>        SCC_CRYPTO.ENC_FUN(:brideEmail),               <#else> null, </#if>
				<#if brideCompAddrKey?exists>  :brideCompAddrKey,                             <#else> null, </#if>
				<#if brideClass?exists>        :brideClass,                                   <#else> null, </#if>
				<#if brideFatherTel?exists>    SCC_CRYPTO.ENC_FUN(REPLACE(:brideFatherTel,'-','')),  <#else> null, </#if>
				<#if brideMontherTel?exists>   SCC_CRYPTO.ENC_FUN(REPLACE(:brideMontherTel,'-','')), <#else> null, </#if>
				
				<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
				
				 SYSDATE,
				 :loginSabun,
				 SYSDATE,
				 :loginSabun
				)
		]]>
	</statement>
	<!-- Wedding Update -->
	<statement name="updateDataWedding" type="update">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.updateDataWedding */
		<![CDATA[
		UPDATE BMS_FUNCTION SET
			<#if functionClass?exists> FUNCTION_CLASS = :functionClass, </#if>
			<#if managerCd?exists> MANAGER_CD = :managerCd, </#if>
			<#if serverCd?exists> SERVER_CD = :serverCd, </#if>
			<#if chefCd?exists> CHEF_CD = :chefCd, </#if>
			<#if weddingHall?exists> WEDDING_HALL = :weddingHall, </#if>
			<#if diningHall?exists> DINING_HALL = :diningHall, </#if>
			<#if giftRoom?exists> GIFT_ROOM = :giftRoom, </#if>
			<#if waitingRoom?exists> WAITING_ROOM = :waitingRoom, </#if>
			<#if husb?exists> HUSB = :husb, </#if>
			<#if husbFather?exists>    HUSB_FATHER = :husbFather, </#if>
			<#if husbMonther?exists>   HUSB_MONTHER = :husbMonther, </#if>
			<#if husbTelNum?exists>    HUSB_TEL_NUM = SCC_CRYPTO.ENC_FUN(REPLACE(  :husbTelNum,'-','')), </#if>
			<#if husbHandPhone?exists> HUSB_HAND_PHONE = SCC_CRYPTO.ENC_FUN(REPLACE(:husbHandPhone,'-','')), </#if>
			<#if husbAddrKey?exists>   HUSB_ADDR_KEY = :husbAddrKey, </#if>
			
			<#if bride?exists>          BRIDE = :bride, </#if>
			<#if brideFather?exists>    BRIDE_FATHER = :brideFather, </#if>
			<#if brideMonther?exists>   BRIDE_MONTHER = :brideMonther, </#if>
			<#if brideTelNum?exists>    BRIDE_TEL_NUM = SCC_CRYPTO.ENC_FUN(REPLACE(:brideTelNum,'-','')), </#if>
			<#if brideHandPhone?exists> BRIDE_HAND_PHONE = SCC_CRYPTO.ENC_FUN(REPLACE(:brideHandPhone,'-','')), </#if>
			
			<#if brideAddrKey?exists> BRIDE_ADDR_KEY = :brideAddrKey, </#if>
			<#if pacnNoMan?exists> PACN_NO_MAN = :pacnNoMan, </#if>
			<#if vipNmsngl?exists> VIP_NMSNGL = :vipNmsngl, </#if>
			<#if mikeQuantity?exists> MIKE_QUANTITY = :mikeQuantity, </#if>
			
			<#if edgeYn?exists> EDGE_YN = DECODE(:edgeYn, '1', 'Y', 'N'), </#if>
			<#if societyYn?exists> SOCIETY_YN = DECODE(:societyYn, '1', 'Y', 'N'), </#if>
			<#if seatgstYn?exists> SEATGST_YN = DECODE(:seatgstYn, '1', 'Y', 'N'), </#if>
			<#if radioYn?exists> RADIO_YN = DECODE(:radioYn, '1', 'Y', 'N'), </#if>
			
			<#if husbCd?exists> HUSB_CD = :husbCd, </#if>
			<#if husbRemark?exists> HUSB_REMARK = :husbRemark, </#if>
			<#if brideCd?exists> BRIDE_CD = :brideCd, </#if>
			<#if brideRemark?exists> BRIDE_REMARK = :brideRemark, </#if>
			<#if spclFact?exists> SPCL_FACT = :spclFact, </#if>
			
			<#if consultingYn?exists> CONSULTING_YN = DECODE(:consultingYn, '1', 'Y', 'N'), </#if>
			<#if intdYn?exists> INTD_YN = DECODE(:intdYn, '1', 'Y', 'N'), </#if>
			<#if secndYn?exists> SECND_YN = DECODE(:secndYn, '1', 'Y', 'N'), </#if>
			<#if threeYn?exists> THREE_YN = DECODE(:threeYn, '1', 'Y', 'N'), </#if>
			
			<#if type01?exists> TYPE01 = DECODE(:type01, '1', 'Y', 'N'), </#if>
			<#if type02?exists> TYPE02 = DECODE(:type02, '1', 'Y', 'N'), </#if>
			<#if type03?exists> TYPE03 = DECODE(:type03, '1', 'Y', 'N'), </#if>
			<#if type04?exists> TYPE04 = DECODE(:type04, '1', 'Y', 'N'), </#if>
			<#if type05?exists> TYPE05 = DECODE(:type05, '1', 'Y', 'N'), </#if>
			<#if type06?exists> TYPE06 = DECODE(:type06, '1', 'Y', 'N'), </#if>
			<#if type07?exists> TYPE07 = DECODE(:type07, '1', 'Y', 'N'), </#if>
			<#if type08?exists> TYPE08 = DECODE(:type08, '1', 'Y', 'N'), </#if>
			<#if payDt?exists>  PAY_DT = :payDt, </#if>
			
			<#if roomRemark?exists> ROOM_REMARK = :roomRemark, </#if>
			<#if seminarRemark?exists> SEMINAR_REMARK = :seminarRemark, </#if>
			<#if fnbRemark?exists> FNB_REMARK = :fnbRemark, </#if>
			<#if specialRemark?exists> SPECIAL_REMARK = :specialRemark, </#if>
			<#if addFact?exists> ADD_FACT = :addFact, </#if>
			<#if rmrkFact?exists> RMRK_FACT = :rmrkFact, </#if>
			<#if tmchfSpeak?exists> TMCHF_SPEAK = :tmchfSpeak, </#if>
			<#if gmSpeak?exists> GM_SPEAK = :gmSpeak, </#if>
			<#if foodDiscnt?exists> FOOD_DISCNT = :foodDiscnt, </#if>
			<#if bevgDiscnt?exists> BEVG_DISCNT = :bevgDiscnt, </#if>
			<#if etcDiscnt?exists> ETC_DISCNT = :etcDiscnt, </#if>
			<#if discntReason?exists> DISCNT_REASON = :discntReason, </#if>
			
			<#if husbCompNm?exists>        HUSB_COMP_NM = :husbCompNm,                                       </#if>
			<#if husbEmail?exists>         HUSB_EMAIL = SCC_CRYPTO.ENC_FUN(:husbEmail),                      </#if>
			<#if husbCompAddrKey?exists>   HUSB_COMP_ADDR_KEY = :husbCompAddrKey,                            </#if>
			<#if husbClass?exists>         HUSB_CLASS = :husbClass,                                          </#if>
			<#if husbFatherTel?exists>     HUSB_FATHER_TEL = SCC_CRYPTO.ENC_FUN(REPLACE(:husbFatherTel,'-','')),    </#if>
			<#if husbMontherTel?exists>    HUSB_MONTHER_TEL = SCC_CRYPTO.ENC_FUN(REPLACE(:husbMontherTel,'-','')),  </#if>
			<#if brideCompNm?exists>       BRIDE_COMP_NM = :brideCompNm,                                     </#if>
			<#if brideEmail?exists>        BRIDE_EMAIL = SCC_CRYPTO.ENC_FUN(:brideEmail),                    </#if>
			<#if brideCompAddrKey?exists>  BRIDE_COMP_ADDR_KEY = :brideCompAddrKey,                          </#if>
			<#if brideClass?exists>        BRIDE_CLASS = :brideClass,                                        </#if>
			<#if brideFatherTel?exists>    BRIDE_FATHER_TEL  = SCC_CRYPTO.ENC_FUN(REPLACE(:brideFatherTel,'-','')),  </#if>
			<#if brideMontherTel?exists>   BRIDE_MONTHER_TEL = SCC_CRYPTO.ENC_FUN(REPLACE(:brideMontherTel,'-','')), </#if>
			
			<#if taxBill?exists> TAX_BILL = DECODE(:taxBill, '1', 'Y', 'N'), </#if>
			
			<#if cashSettle?exists> CASH_SETTLE = :cashSettle, </#if>
			<#if cardSettle?exists> CARD_SETTLE = :cardSettle, </#if>
			<#if crdtDd?exists> CRDT_DD = :crdtDd, </#if>
			<#if expectAmt?exists> EXPECT_AMT = :expectAmt, </#if>
			<#if actualAmt?exists> ACTUAL_AMT = :actualAmt, </#if>
			<#if endContents?exists> END_CONTENTS = :endContents, </#if>
			<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
			       UDATE = SYSDATE,
			       UUSER = :loginSabun
			WHERE  RESERV_NUM = :reservNum
					
	
		]]>
	</statement>
	
	<!-- 예약 중복 여부를 판단 한다. -->
	<statement name="reservDuplicationCheckMst" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.selectListWedding */
		<![CDATA[
		
			SELECT  RESERV_NUM
			      , TO_CHAR(TO_DATE(STR_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') || ' ~ ' || 
		            TO_CHAR(TO_DATE(END_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') AS RESERV_DATE
		          , STR_TIME  
		          , END_TIME
		          , RESERV_NM
		          , RSVN_NM 
		          , STR_TIME_NM || ' ~ ' || END_TIME_NM AS RESERV_TIME
				
			FROM(
			     
				    SELECT  MST.RESERV_NUM
				          
				          , MST.STR_DATE
				          , MST.END_DATE
				          
				    	  , MST.STR_TIME
				    	  , MST.END_TIME
				    	  
				    	  , STR.CODE_NAME AS STR_TIME_NM
				          , EET.CODE_NAME AS END_TIME_NM
				          
				          , MST.RESERV_NM
				          , MST.RSVN_NM
				          			 
				    FROM BMS_RESERV_MST MST 
				    INNER JOIN SCC_COMMON_CODE STR ON STR.GROUP_CODE ='BMS_0015' AND STR.CODE =  MST.STR_TIME 
				    INNER JOIN SCC_COMMON_CODE EET ON EET.GROUP_CODE ='BMS_0015' AND EET.CODE =  MST.END_TIME
				    
			    WHERE MST.RESERV_STATUS IN ('1','2')
			      AND MST.OUTLET_CD = :outletCd
			      AND MST.KIND_CD   = :kindCd 
			      AND (   ( MST.STR_DATE BETWEEN :strDate      AND :endDate      OR  MENU.END_DATE BETWEEN :strDate     AND :endDate )
			           OR ( :strDate     BETWEEN MENU.STR_DATE AND MST.END_DATE  OR :endDate       BETWEEN MST.STR_DATE AND MST.END_DATE ))
			            
			  ) WHERE  ((:strTime > STR_TIME AND :strTime < END_TIME) OR (:endTime > STR_TIME AND :endTime < END_TIME))
        OR ((STR_TIME > :strTime AND STR_TIME < :endTime) OR (END_TIME > :strTime AND END_TIME < :endTime))


			          
		]]>
	</statement>
	<!-- 예약 중복 여부를 판단 한다. -->
	<statement name="reservDuplicationCheck" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.reservDuplicationCheck */
		<![CDATA[
		
			SELECT  RESERV_NUM
			      , TO_CHAR(TO_DATE(STR_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') || ' ~ ' || 
		            TO_CHAR(TO_DATE(END_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') AS RESERV_DATE
		          , STR_TIME  
		          , END_TIME
		          , RESERV_NM
		          , RSVN_NM 
		          , STR_TIME_NM || ' ~ ' || END_TIME_NM AS RESERV_TIME
				
			FROM(
			     
				    SELECT  MST.RESERV_NUM
				          
				          , MENU.STR_DATE
				          , MENU.END_DATE
				          
				    	  , MENU.STR_TIME
				    	  , MENU.END_TIME
				    	  
				    	  , STR.CODE_NAME AS STR_TIME_NM
				          , EET.CODE_NAME AS END_TIME_NM
				          
				          , MST.RESERV_NM
				          , MST.RSVN_NM
				          			 
				    FROM BMS_RESERV_MENU MENU
				    INNER JOIN BMS_RESERV_MST MST  ON MST.RESERV_NUM = MENU.RESERV_NUM 
				    INNER JOIN SCC_COMMON_CODE STR ON STR.GROUP_CODE ='BMS_0015' AND STR.CODE =  MENU.STR_TIME 
				    INNER JOIN SCC_COMMON_CODE EET ON EET.GROUP_CODE ='BMS_0015' AND EET.CODE =  MENU.END_TIME
				    
			    WHERE MST.RESERV_STATUS IN ('1','2')
			      AND MST.KIND_CD    = :kindCd 
			      AND MENU.OUTLET_CD = :outletCd
			      AND MENU.FNB_CLASS = :fnbClass
            	  AND MENU.USE_YN = 'Y'
			      AND MENU.MENU_CD   = :menuCd
			      AND (   ( MENU.STR_DATE BETWEEN :strDate      AND :endDate       OR  MENU.END_DATE BETWEEN :strDate      AND :endDate )
			           OR ( :strDate      BETWEEN MENU.STR_DATE AND MENU.END_DATE  OR :endDate       BETWEEN MENU.STR_DATE AND MENU.END_DATE ))
			            
			  ) WHERE  ((:strTime > STR_TIME AND :strTime < END_TIME) OR (:endTime > STR_TIME AND :endTime < END_TIME))
        OR ((STR_TIME > :strTime AND STR_TIME < :endTime) OR (END_TIME > :strTime AND END_TIME < :endTime))


			          
			    
		]]>
	</statement>
	
	<!-- 지불내역 저장 (현금은 승인을 하지 않기 때문에 별도로 저장 한다.. -->
	<statement name="insertDataPayment" type="insert">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.insertDataPayment */
		<![CDATA[
		 
			INSERT INTO BMS_PAY_MST (
			        RESERV_NUM
				  , SEQ
			      , SALES_DATE
			      , OUTLET_CD
				  , RECEIPT_NUM
			      , SALS_CLASS
			      , PAY_CD   
			      , PAY_AMT
			      , EXCH_AMT
			      , FRNC_STOR_NUM
			      , BUYCPNY_CD
			      , BUYCPNY_NM
			      , ISSUECPNY_CD
			      , ISSUECPNY_NM
			      , NET_AMT
			      , VAT
			      , PAY_DSPL           
			      
			      , PAY_BASI
      			  , ALLT_TERM
                  , APPRV_NUM	
			      
			      , KEYIN_YN
			      , WONAPPRV_NUM
			      , WONAPPRV_DATE
			      
			      , PAY_CANCEL_YN
			      , SALS_YN  
			      
			      , APPRV_DDTT
			      , REF1
			      , REF2
			      
			      , USE_YN				  
				  , CDATE
				  , CUSER
				  , UDATE
				  , UUSER
			)  VALUES (
				 :reservNum,
				 :seq,
				 
			 	<#if salesDate?exists>   :salesDate, <#else> null, </#if>
				<#if outletCd?exists>    :outletCd, <#else> null, </#if>
				<#if receiptNum?exists>  :receiptNum, <#else> null, </#if>
				<#if salsClass?exists>   :salsClass, <#else> null, </#if>
				<#if payCd?exists>       :payCd   , <#else> null, </#if>
				<#if payAmt?exists>      :payAmt, <#else> null, </#if>
				<#if exchAmt?exists>     :exchAmt, <#else> null, </#if>
				<#if frncStorNum?exists> :frncStorNum, <#else> null, </#if>
				<#if buycpnyCd?exists>   :buycpnyCd, <#else> null, </#if>
				<#if buycpnyNm?exists>   :buycpnyNm, <#else> null, </#if>
				<#if issuecpnyCd?exists> :issuecpnyCd, <#else> null, </#if>
				<#if issuecpnyNm?exists> :issuecpnyNm, <#else> null, </#if>
				<#if netAmt?exists>      :netAmt, <#else> null, </#if>
				<#if vat?exists>         :vat, <#else> null, </#if>
				<#if payDspl?exists>     :payDspl, <#else> null, </#if>
				
				<#if payBasi?exists>  :payBasi, <#else> null, </#if>
				<#if alltTerm?exists> :alltTerm, <#else> null, </#if>
				<#if apprvNum?exists> :apprvNum, <#else> null, </#if>

				<#if keyinYn?exists>      :keyinYn, <#else> null, </#if>
				<#if wonapprvNum?exists>  :wonapprvNum, <#else> null, </#if>
				<#if wonapprvDate?exists> :wonapprvDate, <#else> null, </#if>
				<#if payCancelYn?exists>  :payCancelYn, <#else> null, </#if>
				<#if salsYn?exists>       :salsYn, <#else> null, </#if>  
			 	
			 	TO_CHAR(SYSDATE,'YYYYMMDDHHMMSS'),
				<#if ref1?exists>       :ref1, <#else> null, </#if>  
				<#if ref2?exists>       :ref2, <#else> null, </#if> 
			
				<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
				
				 SYSDATE,
				 :loginSabun,
				 SYSDATE,
				 :loginSabun
				)
		]]>
	</statement>
	
	
	<!-- 지불내역 저장 (카드만 저장 한다). -->
	<statement name="selectListCardVan" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.selectListCardVan */
		<![CDATA[
			 
			SELECT  REF_NO AS RESERV_NUM
				  
				  , (SELECT NVL(MAX(TO_NUMBER(SEQ)),'0') + 1  FROM BMS_PAY_MST WHERE  RESERV_NUM = :reservNum)   AS SEQ
				   
			      , '20' || SUBSTR(APPROVAL_DT,1,6)     AS SALES_DATE
			      , :outletCd 							AS OUTLET_CD
				  , SEQ              					AS RECEIPT_NUM
			      , CARD_CPN_NM      					AS SALS_CLASS
			      , CASE REQ_DOC_CD WHEN 'D1' THEN '20'
			                        WHEN 'D2' THEN '20'
			                        WHEN 'D4' THEN '20'
			                        WHEN 'B1' THEN '10'
			                        WHEN 'B2' THEN '10'
			                        WHEN 'B3' THEN '10'             
			        				END    AS PAY_CD   
			        				
			      , AMT             AS PAY_AMT
			      , 0               AS EXCH_AMT
			      , MEMBER_CD       AS FRNC_STOR_NUM
			      , PURCHASE_CPN_CD AS BUYCPNY_CD
			      , PURCHASE_CPN_NM AS BUYCPNY_NM
			      , ISSUE_CPN_CD    AS ISSUECPNY_CD
			      , CARD_CPN_NM     AS ISSUECPNY_NM
			      , AMT - VAT       AS NET_AMT
			      , VAT             AS VAT
			      
			      , CASE LENGTH(SCC_CRYPTO.DEC_FUN( CARD_NO_ENC)) 
			      		 WHEN 11 THEN SUBSTR(SCC_CRYPTO.DEC_FUN(CARD_NO_ENC),1,3) || '****' || SUBSTR(SCC_CRYPTO.DEC_FUN(CARD_NO_ENC),8,4)
			             WHEN 10 THEN SUBSTR(SCC_CRYPTO.DEC_FUN(CARD_NO_ENC),1,3) || '***'  || SUBSTR(SCC_CRYPTO.DEC_FUN(CARD_NO_ENC),7,4)
			             ELSE SCC_CRYPTO.DEC_FUN(CARD_NO_ENC)
					     END AS PAY_DSPL
				  , SCC_CRYPTO.DEC_FUN(CARD_NO_ENC) AS PAY_BASI	     
			      , DIV
			      , APPROVAL_NO   
			      , WCC             AS KEYIN_YN
			      , REQ_APPROVAL_NO AS WONAPPRV_NUM
			      , REQ_APPROVAL_DT AS WONAPPRV_DATE
			      
			      , CASE REQ_DOC_CD WHEN 'D1' THEN 'N'
			                        WHEN 'D2' THEN 'Y'
			                        WHEN 'D4' THEN 'Y'
			                        WHEN 'B1' THEN 'N'
			                        WHEN 'B2' THEN 'Y'
			                        WHEN 'B3' THEN 'N' 
					END AS PAY_CANCEL_YN
			      , 'Y' AS SALS_YN
			      
			      , APPROVAL_DT AS APPRV_DDTT
			      , '0'         AS MODIFY_STATUS
			       
			      , 'Y'         AS USE_YN
			      , SYSDATE     AS CDATE
				  , :loginSabun AS CUSER
				  , SYSDATE     AS UDATE
				  , :loginSabun AS UUSER 
				  
			FROM SCC_CARD_VAN 
			WHERE REF_SYS = 'BMS' 
			AND REF_NO    = :reservNum 
			AND SEQ       = (SELECT MAX(SEQ) FROM SCC_CARD_VAN WHERE REF_SYS = 'BMS' AND REF_NO    = :reservNum )
			
		]]>
	</statement>
	
	<!-- 지불내역 검색 . -->
	<statement name="selectListPayment" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.selectListPayment */
		<![CDATA[
				SELECT  
				      
				        A.RESERV_NUM      AS REF_NO
					  , NVL(B.SEQ,A.SEQ)  AS SEQ
					  , A.PAY_CD          AS PAY_CD
				      , A.SALES_DATE      AS APPROVAL_DT
				      , A.SALS_CLASS      AS CARD_CPN_NM
				      , A.PAY_AMT         AS AMT
				      , A.FRNC_STOR_NUM   AS MEMBER_CD
				      , A.BUYCPNY_CD      AS PURCHASE_CPN_CD
				      , A.BUYCPNY_NM      AS PURCHASE_CPN_NM
				      , A.ISSUECPNY_CD    AS ISSUE_CPN_CD
				      , A.ALLT_TERM       AS DIV
                      , A.APPRV_NUM       AS APPROVAL_NO 
				      , A.VAT             AS VAT
				      , A.PAY_DSPL        AS CARD_NO_ENC
				      , A.KEYIN_YN        AS WCC              
				      , A.WONAPPRV_NUM    AS REQ_APPROVAL_NO 
				      , A.WONAPPRV_DATE   AS REQ_APPROVAL_DT
				      , A.PAY_CANCEL_YN   AS PAY_CANCEL_YN
				            
				      , DECODE(A.PAY_CANCEL_YN,'N','승인','취소')  AS PAY_STATUS
				      
				FROM BMS_PAY_MST A
				LEFT OUTER JOIN SCC_CARD_VAN B ON A.RESERV_NUM = B.REF_NO AND RES_CD ='0000' AND B.SEQ = TO_NUMBER(A.RECEIPT_NUM)
				WHERE RESERV_NUM = :reservNum
				ORDER BY NVL(B.SEQ,A.SEQ) DESC
		]]>
	</statement>
	
	<!-- 지불내역 저장 . -->
	<statement name="maxCodeCreatePayment" type="select">
	/*+ com.hwfs.rc.bms.eventMgmtDAO.maxCodeCreatePayment */
		<![CDATA[
			
 		SELECT  NVL(MAX(TO_NUMBER(SEQ)),'0') + 1  AS MAX_SEQ
 		FROM BMS_PAY_MST
 		WHERE  RESERV_NUM = :reservNum  
		  
		]]>
	</statement>
	
	
</hqml>	