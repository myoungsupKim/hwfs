<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="fm.fmo.orderRequestDAO">
	<desc>주문신청 HQML Query</desc>

	<!-- 구매유형 목록을 조회한다. -->
	<statement name="selectType_bk" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectType */
		<![CDATA[
		SELECT PO_TYPE, 
		           TYPE_NAME,
		           NVL(D_DAYS, 0) AS D_DAYS,
		           NVL(D_TIMES, 0) AS D_TIMES,
		      	    '1' AS ORDR
		FROM   HLDC_PO_TYPE
		WHERE PO_TYPE IN ('07', '29', '97')
		ORDER BY ORDR ASC, PO_TYPE ASC
		]]>
	</statement>

	<!-- 구매유형 목록을 조회한다. -->
	<statement name="selectType" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectType */
		<![CDATA[
		SELECT PO_TYPE, 
		           TYPE_NAME,
		           NVL(D_DAYS, 0) AS D_DAYS,
		           NVL(D_TIMES, 0) AS D_TIMES,
		      	    '1' AS ORDR
		FROM   HLDC_PO_TYPE
		WHERE PO_TYPE IN ('07', '29', '97')
		AND PO_TYPE <> (
			SELECT DECODE(COUNT(1), 1, '-1', '97')
				FROM SCC_COMMON_CODE
				WHERE GROUP_CODE = 'CS_MASTER_USER'
				AND USE_YN = 'Y'
				AND CODE = :loginSabun
		)
		ORDER BY ORDR ASC, PO_TYPE ASC
		]]>
	</statement>
	
	<!-- 주문신청 목록을 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectList */
		<![CDATA[
		SELECT
			'0' AS CHK 
	  		,  A.PR_NUM			/* SO_PR 구매신청라인 */
			, A.PR_DATE			/* SO_PR 신청일자 */
			, B.TM_NM || ' ' || B.CC_NM AS DEPT_NM	/* 신청부서 */
			, A.ITEM_NAME || DECODE(SIGN(E.CNT - 1),1,' 외 ' || TO_CHAR(E.CNT - 1) || '건') AS TITLE		/* 제목 */
			, E.AMT					/* SO_PR 구매금액 */
			, E.VAT					/* SO_PR 부가세 */
			, (E.AMT + E.VAT) AS TOT	/* SO_PR 구매총액 */
			, E.SO_STATUS		/* SO_PR 진행상황 */
			, NVL(D.CODE_NAME,F.CODE_NAME) AS SO_STATUS_NM		/* 구매진행상황 */ 
			, A.PR_SABUN			/* SO_PR 신청자사번 */
			--, A.PR_SABUN || ' ' || (SELECT F.NM_KOR FROM SCO_FS_HR_PERSONAL_V F WHERE F.SABUN = A.PR_SABUN) AS PR_SABUN_NM	/* SO_PR 신청자명 */
			, A.PR_SABUN || ' ' || (SELECT F.NM_KOR FROM SCC_USERINFO F WHERE F.SABUN = A.PR_SABUN) AS PR_SABUN_NM	/* SO_PR 신청자명 */
			, A.PO_TYPE			/* SO_PR 구매유형 */
			, NVL(C.TYPE_NAME,'') AS PO_TYPE_NM		/* 구매유형 */ 
			, E.NEED_DATE		/* SO_PR 입고일자 */
			, A.PR_DEPT_ID		/* SO_PR 신청부서코드 */
			, (SELECT COUNT(DISTINCT SUBINV_CODE) FROM SO_PR WHERE PR_NUM = A.PR_NUM) AS PR_CNT		/* 엑셀업로드 및 개별등록 구분 용도 */
			, NVL(E.FROM_TYPE, '') AS FROM_TYPE	/* SO_PR 엑셀업로드여부 */
            , G.CS_SABUN
            , (SELECT SCC_CRYPTO.MASKAUTH_FUN (NM_KOR, 12, 'YYYYNNNNNNNNNNN', '0') FROM HR_PERSONAL WHERE SABUN=G.CS_SABUN) AS CS_SABUN_NM
		FROM SO_PR A LEFT JOIN  HLDC_SC_DEPT_V B ON A.PR_DEPT_ID = B.DEPT_ID
		      				  INNER JOIN ( SELECT MIN(PR_ID) AS PR_ID
				   											, COUNT(*) AS CNT
				   											, SUM(SALE_PRICE * PR_QTY) AS AMT
				   											, SUM(SALE_PRICE * PR_QTY * DECODE(TAX_CODE,100,0.1,0)) AS VAT	
				   											, MIN(NEED_DATE) NEED_DATE
				   											, MIN(SO_STATUS_NUM) AS SO_STATUS_NUM
                                                            , MAX(SO_STATUS) AS SO_STATUS
				   											, MAX(FROM_TYPE) AS FROM_TYPE
        									FROM ( SELECT PR_ID 
	                                                     , PR_NUM
	                                                     , SALE_PRICE 
	                                                     , PR_QTY 
	                                                     , TAX_CODE 
	                                                     , NEED_DATE 
	                                                     , CASE WHEN SO_STATUS = '008' THEN '1'
	                                                            WHEN SO_STATUS = '007' THEN '2'
	                                                            WHEN SO_STATUS = '001' THEN '3'
	                                                            WHEN SO_STATUS = '005' THEN '4'
	                                                            WHEN SO_STATUS = '003' THEN '5'
	                                                            ELSE '' END SO_STATUS_NUM			/* 요청사항 ,  주문확정,결의승인,신청저장 우선순위로 GROUP BY	*/
	                                                     , SO_STATUS
	                                                     , FROM_TYPE 
	                                                  FROM SO_PR 
												WHERE (1=1)
												AND SO_STATUS IN ('001' , '003' , '005' , '007' , '008')
												<#if schGubun == '1'>
												AND  PR_DATE BETWEEN :schDate1 AND :schDate2			/* 조건 : 신청일자 */
												</#if>
												<#if schGubun == '2'>
												AND  NEED_DATE BETWEEN :schDate1 AND :schDate2		/* 조건 : 입고일자 */
												</#if>
												--AND (PR_UPJANG = :schUpjang OR PR_SABUN = :schSabun)		/* 조건 : 신청자 사번, 신청자 소속 업장  */	
												<#if schType?has_content>
	    										AND PO_TYPE = :schType
	    										<#else>
	    										AND PO_TYPE IN ('07', '29', '97')		/* 구매유형 : 식재영업, NO단가 */
												</#if> ) 
												GROUP BY PR_NUM
		      									) E ON A.PR_ID = E.PR_ID
								LEFT JOIN HLDC_PO_TYPE C ON A.PO_TYPE = C.PO_TYPE		    			/* 구매 : 구매유형 */  									
							    LEFT JOIN SCC_COMMON_CODE D ON D.GROUP_CODE = 'FM0037'		/* 공통 : 구매라인상태 */
							    												  AND E.SO_STATUS_NUM = D.CODE
						    	LEFT JOIN SCC_COMMON_CODE F ON F.GROUP_CODE = 'FM0037'		/* 공통 : 구매라인상태 */
							    												  AND E.SO_STATUS = F.CODE    
                                INNER JOIN FMS_UPJANG G ON 1 = 1
																  <#if schCsSabun?has_content>
																  AND G.CS_SABUN  = :schCsSabun
                                 								  </#if>
                                								   AND A.RC_UPJANG = G.UPJANG					/* CS담당자 연계 */                                                                                  
	    WHERE (1=1)
	    AND A.SO_STATUS IN ('001' , '003' , '005' , '007' , '008')
	    AND A.PO_TYPE IN ('07','29', '97')
	    AND A.PO_TYPE <> (
						SELECT DECODE(COUNT(1), 1, '-1', '97')
						FROM SCC_COMMON_CODE
						WHERE GROUP_CODE = 'CS_MASTER_USER'
						AND USE_YN = 'Y'
						AND CODE = :loginSabun
				   )
		ORDER BY A.PR_NUM DESC
		]]>
	</statement>


	<!-- 주문신청 상세정보 목록을 조회한다. -->
	<statement name="selectDetail" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectDetail */
		<![CDATA[
		SELECT A.PR_ID 
		    , A.PR_NUM
			, A.ITEM_CODE 
     	 	, A.ITEM_NAME 
      		, A.ITEM_SIZE 
      		, A.PO_UOM AS ITEM_UNIT
      		, A.TAX_CODE
      		, DECODE(A.REMARK,NULL,A.PR_REMARK,A.REMARK||' '||A.PR_REMARK) PR_REMARK
      		, A.NEED_DATE
      		, A.SALE_PRICE
      		, A.RC_UPJANG
      		, A.PR_SABUN
      		, A.PR_QTY
      		, A.PO_QTY
      		, (A.SALE_PRICE * A.PR_QTY) AS AMT
      		, D.MU_NM || ' ' || D.CC_NM AS INS_DEPT_NM
      		, A.SO_STATUS
			, NVL(C.CODE_NAME,'') AS SO_STATUS_NM		 
      		, A.PR_DATE
      		, A.PO_TYPE
      		, A.SUBINV_CODE || ' ' || (SELECT SUBINV_NAME FROM HLDC_PO_SUBINVENTORY WHERE SUBINV_CODE = A.SUBINV_CODE) AS SUBINV_NAME
      		, E.VD_NM || '(' || E.BIZ_REG_NO || ')' AS CUST_NM
      		, PO.PO_ID
      		, TO_CHAR(NVL(A.UPDATE_DATE,A.CREATE_DATE),'YYYY-MM-DD HH24:MI:SS') UPDATE_DATE
      		, (SELECT NM_KOR FROM SCC_USERINFO WHERE SABUN = A.UPDATE_BY) AS UPDATE_BY
            , FN_ITEM_FEATURE_ICON(NVL((SELECT DUTY_YN FROM HLDC_PO_CONTRACT_F CF  WHERE CF.CENTER_CODE=A.CENTER_CODE AND CF.UPJANG= (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG= A.RC_UPJANG ) 
            		               AND A.NEED_DATE BETWEEN CF.CONTRACT_START AND CF.CONTRACT_END
                    		       AND CF.ITEM_CODE=A.ITEM_CODE AND CF.USE_YN = 'Y'),'N'),
                    		       --X.PB_YN,
                    		       --PB상품을 계약에서 가겨옴(2015.08.29)                    		        
                    		       NVL((SELECT PB_YN FROM HLDC_PO_CONTRACT_F CF  WHERE CF.CENTER_CODE=A.CENTER_CODE AND CF.UPJANG= (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG= A.RC_UPJANG ) 
            		               AND A.NEED_DATE BETWEEN CF.CONTRACT_START AND CF.CONTRACT_END
                    		       AND CF.ITEM_CODE=A.ITEM_CODE AND CF.USE_YN = 'Y'),'N'),
                    		       X.ECO_ITEM , '') FEATURE_ICON
			, NVL(PO_GETFMSALEPRICE_FUN(A.NEED_DATE, A.RC_UPJANG, A.ITEM_CODE, A.CENTER_CODE), A.SALE_PRICE) AS PO_SALE_PRICE		/* 현 판매단가 : PO_CONTRACT_FSALE */
			, A.T_ORDER                    		       
			, NVL(:loginSabun, '') AS LOGIN_SABUN
			, NVL(:loginUserid, '') AS LOGIN_USERID 
			, NVL(:loginPersMask, '') AS LOGIN_PERS_MASK
			, '' AS RTN_MSG
			, '' AS RTN_CD
			, '' AS IF_DATA
		FROM SO_PR A  LEFT JOIN HLDC_PO_PO PO ON A.PR_ID = PO.PO_ID AND A.PR_NUM = PO.PO_NUM
		              LEFT JOIN SCC_COMMON_CODE C ON C.GROUP_CODE = 'FM0037' AND A.SO_STATUS = C.CODE 	/* 공통 : 구매라인상태 */									   
		              LEFT JOIN HLDC_SC_DEPT_V D ON A.RC_DEPT_ID = D.DEPT_ID
		              LEFT JOIN VO_FC_VENDOR E ON A.CUSTCD = E.VD_CD
 					  INNER JOIN HLDC_PO_ITEM_MST X ON X.USE_YN = 'Y' AND X.ITEM_CODE = A.ITEM_CODE		              
		WHERE A.PR_NUM = :schPrNum
		<#if schGubun == '1'>
		AND  A.PR_DATE BETWEEN :schDate1 AND :schDate2			/* 조건 : 신청일자 */
		</#if>
		<#if schGubun == '2'>
		AND  A.NEED_DATE BETWEEN :schDate1 AND :schDate2		/* 조건 : 입고일자 */
		</#if>	
		<#if schType?has_content>
		AND A.PO_TYPE = :schType
		<#else>
		AND A.PO_TYPE IN ('07', '29', '97')		/* 구매유형 : 식재영업, NO단가 */
		</#if>
		ORDER BY A.PR_ID ASC		
		]]>
	</statement>


	<!-- 주문신청 상세정보의 MAX 진행상태를 조회한다. -->
	<statement name="selectMaxStatus" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectMaxStatus */
		<![CDATA[
		SELECT
			 :schPrNum AS PR_NUM
			, X.SO_STATUS AS MAX_SO_STATUS
			, X.RC_UPJANG
			, X.PR_SABUN
			, NVL(C.CODE_NAME,'') AS MAX_SO_STATUS_NM		
		FROM 
			(
			SELECT
				  MAX(A.SO_STATUS) AS SO_STATUS
				, MAX(A.RC_UPJANG) AS RC_UPJANG
				, MAX(A.PR_SABUN) AS PR_SABUN
			FROM SO_PR A 
			WHERE A.PR_NUM = :schPrNum
			AND A.PO_TYPE IN ('07','29', '97')
			) X LEFT JOIN SCC_COMMON_CODE C ON C.GROUP_CODE = 'FM0037'		/* 공통 : 구매라인상태 */
																 AND X.SO_STATUS = C.CODE	
		]]>
	</statement>

	<!-- 사용자기준 창고 목록을 조회한다.(CS담당업장 기준 조회) : COMBO STYLE-->
	<statement name="selectSubinv" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectSubinv */
		<![CDATA[
		SELECT
	  		  A.SUBINV_CODE
			, A.SUBINV_NAME || '(' || A.SUBINV_CODE || ') : ' || B.UPJANGNM || '(' || A.UPJANG || ')' AS SUBINV_NAME
			, A.UPJANG						/*  SO_PR.RC_UPJANG */
			, C.CONSUM_YN
		FROM HLDC_PO_SUBINVENTORY A INNER JOIN ST_UPJANG B ON A.UPJANG = B.UPJANG
						 								 INNER JOIN (
																			/* 관리업장관련(CS) */
																			SELECT UPJANG
																		    FROM  FMS_UPJANG
																			WHERE CS_SABUN = :schSabun
						 													) C ON A.UPJANG = C.UPJANG
                                    					LEFT JOIN FMS_SUBINVENTORY C ON C.USE_YN = 'Y'
                                                                									 AND A.SUBINV_CODE = C.SUBINV_CODE                                          
		WHERE A.USE_YN = 'Y'
		AND    SUBSTR(A.SUBINV_CODE, 1, 2) = 'S1'
		ORDER BY A.SUBINV_CODE ASC
		]]>
	</statement>


	<!-- 사용자기준 창고 목록을 조회한다.(CS담당업장 기준 조회) POPUP용도 -->
	<statement name="selectSubinvPop" type="select"><![CDATA[
        SELECT 
              T.SUBINV_CODE
            , T.SUBINV_NAME || '(' || T.SUBINV_CODE || ') : ' || A.UPJANGNM || '(' || A.UPJANG || ')' AS SUBINV_NAME
            , A.UPJANG
            , (SELECT CONSUM_YN FROM FMS_SUBINVENTORY WHERE SUBINV_CODE = T.SUBINV_CODE) AS CONSUM_YN 
        FROM
            (
            SELECT
                  UPJANG  
                , SUBINV_CODE
                , SUBINV_NAME
            FROM HLDC_PO_SUBINVENTORY
            WHERE SUBSTR(SUBINV_CODE, 1, 2) = 'S1'
            AND    USE_YN = 'Y'
            ) T INNER JOIN ST_UPJANG A ON T.UPJANG = A.UPJANG 
                INNER JOIN FMS_UPJANG B ON 1 =1
													<#if schChk?has_content>
													AND  B.CS_SABUN = :schSabun
													</#if>
                									 AND T.UPJANG = B.UPJANG
		WHERE 1 = 1                  
		<#if schCode?has_content>
		AND     T.SUBINV_CODE LIKE '%' || :schCode || '%'
		</#if>
		AND B.USE_YN = 'Y'
		<#if schName?has_content>
		 AND    T.SUBINV_NAME LIKE  '%' || :schName || '%'			
		</#if>
        ORDER BY T.SUBINV_CODE ASC
		]]></statement>


	<!-- 주문신청기준 창고 목록을 조회한다.(주문신청번호 기준 조회) -->
	<statement name="selectSubinv2" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectSubinv2 */
		<![CDATA[
		SELECT
	  		  A.SUBINV_CODE
			, A.SUBINV_NAME || '(' || A.SUBINV_CODE || ') : ' || B.UPJANGNM || '(' || A.UPJANG || ')' AS SUBINV_NAME
			, A.UPJANG						/*  SO_PR.RC_UPJANG */
			, C.CONSUM_YN
		FROM HLDC_PO_SUBINVENTORY A INNER JOIN ST_UPJANG B ON A.UPJANG = B.UPJANG
                                    LEFT JOIN FMS_SUBINVENTORY C ON C.USE_YN = 'Y'
                                                                AND A.SUBINV_CODE = C.SUBINV_CODE                                          
        WHERE A.SUBINV_CODE = :schSubinvCode
		]]>
	</statement>


	<!-- 주문신청관련 D-DAY 정보을 조회한다.(발주마감관련) -->
	<statement name="selectDays" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectDays */
		<![CDATA[
		SELECT 
			/* HLDC_PO_SUBINVENTORY 에 관련 필드(A.D_DAYS, A.D_TIMES 이 없음 */
			/* 일단 HLDC_PO_SUBINVENTORY 관련 필드는 0로 SET */
			
			GREATEST(NVL(A.D_DAYS,0),NVL(B.D_DAYS,0))
			+ DECODE(NVL(A.D_DAYS,0)+NVL(B.D_DAYS,0),0,0,DECODE(C.UPJ_CNT,0,NVL(D.ALL_D,0),NVL(C.UPJ_D,0))) AS D_DAYS
			, TO_CHAR(TO_DATE(TRIM(TO_CHAR(DECODE(SIGN(NVL(A.D_DAYS,0)-NVL(B.D_DAYS,0)),1,NVL(TO_NUMBER(A.D_TIMES),0),0,LEAST(NVL(TO_NUMBER(A.D_TIMES),0),NVL(TO_NUMBER(B.D_TIMES),0)),NVL(TO_NUMBER(B.D_TIMES),0)),'0000')),'HH24MI'),'HH24MI') AS D_TIMES
    		, DECODE(GREATEST(NVL(A.D_DAYS,0),NVL(B.D_DAYS,0))+DECODE(NVL(A.D_DAYS,0)+NVL(B.D_DAYS,0),0,0,DECODE(C.UPJ_CNT,0,NVL(D.ALL_D,0),NVL(C.UPJ_D,0))),0,'-','D-'||TO_CHAR(GREATEST(NVL(A.D_DAYS,0),NVL(B.D_DAYS,0))+DECODE(NVL(A.D_DAYS,0)+NVL(B.D_DAYS,0),0,0,DECODE(C.UPJ_CNT,0,NVL(D.ALL_D,0),NVL(C.UPJ_D,0)))))
    		||' '||DECODE(GREATEST(NVL(A.D_DAYS,0),NVL(B.D_DAYS,0))+DECODE(NVL(A.D_DAYS,0)+NVL(B.D_DAYS,0),0,0,DECODE(C.UPJ_CNT,0,NVL(D.ALL_D,0),NVL(C.UPJ_D,0))),0,'-',TO_CHAR(TO_DATE(TRIM(TO_CHAR(DECODE(SIGN(NVL(A.D_DAYS,0)-NVL(B.D_DAYS,0)),1,NVL(TO_NUMBER(A.D_TIMES),0),0,LEAST(NVL(TO_NUMBER(A.D_TIMES),0),NVL(TO_NUMBER(B.D_TIMES),0)),NVL(TO_NUMBER(B.D_TIMES),0)),'0000')),'HH24MI'),'HH24:MI')) AS DAYS
    		, NVL(B.D_OVER_DAYS,0) AS D_OVER_DAYS

		FROM HLDC_PO_SUBINVENTORY A INNER JOIN FMS_UPJANG B ON A.UPJANG = B.UPJANG
                         								 LEFT JOIN    
                          								 (
                            							  SELECT  UPJANG  
                                     								, COUNT(*) AS UPJ_CNT
                                     								, SUM(DECODE(USE_YN,'Y',1,0)) AS UPJ_D
                            							   FROM FMS_EXC_DAYS
                           								   WHERE UPJANG = :schUpjang		/* 조건 : 업장코드 */
                            							   AND EXC_DATE BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD') AND NVL(:schNeedDate,TO_CHAR(SYSDATE,'YYYYMMDD'))
                            							   GROUP BY UPJANG
                           								) C ON A.UPJANG = C.UPJANG
                         								LEFT JOIN 
                         								(
                            							SELECT   UPJANG
                                      							   , COUNT(*) AS ALL_CNT
                                      							   , SUM(DECODE(USE_YN,'Y',1,0)) AS ALL_D
                            							FROM FMS_EXC_DAYS
                            							WHERE UPJANG = -1
                            						    AND EXC_DATE BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD') AND NVL(:schNeedDate,TO_CHAR(SYSDATE,'YYYYMMDD'))
                            							GROUP BY UPJANG
                        								) D ON A.UPJANG = C.UPJANG
		WHERE A.SUBINV_CODE = :schSubinvCode				/* 조건 : 창고코드 */
		]]>
	</statement>


	<!-- 선택한 업장에 대한 여신관리여부를 조회한다 -->
	<statement name="selectCreYn" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectCreYn */
		<![CDATA[
		SELECT 
	  		 'Y' AS CRD_YN
        	, A.HEAD_CREDIT_YN
  		FROM FMS_UPJANG A
 		WHERE A.UPJANG = NVL((SELECT DECODE(T.HEAD_CREDIT_YN,'N',T.UPJANG,T.MAIN_UPJANG) 
				     						FROM FMS_UPJANG T 
				     						WHERE T.UPJANG = :schUpjang 
				     						AND    T.CREDIT_CONTROL_YN = 'Y'),-1)
 		AND A.CREDIT_CONTROL_YN = 'Y'
 		AND (A.CREDIT_TURN_CONTROL_YN = 'Y' OR A.CREDIT_AMOUNT_CONTROL_YN = 'Y')		
		]]>
	</statement>


	<!-- 선택한 업장에 대한 본사여신통합 여부를 조회한다 -->
	<statement name="selectHeadCre" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectHeadCre */
		<![CDATA[
		SELECT
	  		  NVL(HEAD_CREDIT_YN,'N') AS HEAD_CREDIT_YN
			, MAIN_UPJANG
			, UPJANG
			, :schNeedDate AS SCH_NEED_DATE
		FROM   FMS_UPJANG
		WHERE  UPJANG = :schUpjang
		]]>
	</statement>

	<!-- 최종 발주일자를 조회한다.[여신체크],  본사통합용(0) -->
	<statement name="selectNeedDate" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectNeedDate */
		<![CDATA[
		SELECT 
				NVL(MAX(NEED_DATE),  :schNeedDate) AS NEED_DATE
		FROM   SO_PR
		WHERE  RC_UPJANG IN (SELECT UPJANG
				  						  FROM FMS_UPJANG
				  						  WHERE MAIN_UPJANG = :schMainUpjang
				  						 )
		AND NEED_DATE BETWEEN :schNeedDate AND GREATEST(TO_CHAR(SYSDATE+31,'YYYYMMDD'), :schNeedDate)
		AND SUBSTR(SUBINV_CODE, 1, 2) = 'S1'
		AND SO_STATUS NOT IN ('003', '005')  /* 신청취소, 결의반려 제외 */
		AND PO_TYPE IN ('07','29', '97')
		]]>
	</statement>


	<!-- 최종 발주일자를 조회한다.[여신체크], 본사통합용(X) -->
	<statement name="selectNeedDate2" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectNeedDate2 */
		<![CDATA[
		SELECT 
				NVL(MAX(NEED_DATE),  :schNeedDate) AS NEED_DATE
		FROM   SO_PR
		WHERE  RC_UPJANG = :schUpjang
		AND NEED_DATE BETWEEN :schNeedDate AND GREATEST(TO_CHAR(SYSDATE+31,'YYYYMMDD'), :schNeedDate)
		AND SUBSTR(SUBINV_CODE, 1, 2) = 'S1'
		AND SO_STATUS NOT IN ('003', '005')  /* 신청취소, 결의반려 제외 */
		AND PO_TYPE IN ('07','29', '97')
		]]>
	</statement>


	<!-- 본사통합여신 기준 대상 업장 리스트 구하기 -->
	<statement name="selectCreUpjang" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectCreUpjang */
		<![CDATA[
		SELECT 
				UPJANG
		FROM   FMS_UPJANG
		WHERE MAIN_UPJANG = :schMainUpjang
		<#if schHeadCreditYn?has_content>
			<#if schHeadCreditYn == 'Y'>
			AND HEAD_CREDIT_YN = 'Y'  
			 </#if> 
	  </#if> 
		]]>
	</statement>


	<!-- 여신관리여부에 따라 여신정보를 조회한다.-->
	<!-- 본사통합여신일 경우 와 아닐경우를 구분하여 조회한다. -->
	<statement name="selectCreInfo_Old1" type="select"><![CDATA[
		SELECT  
			  NVL(A.CREDIT_TURN_DAYS,0) AS CREDIT_TURN_DAYS									/* 여신회전일 */
      		, NVL(A.CREDIT_TURN_DAYS,0) AS CREDIT_TURN_DAYS_TOT							/* 총 여신회전일 : 여신연장일 삭제 */
      		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) 
			  ELSE 0 
			  END AS CREDIT_AMOUNT																		/* 여신금액 */
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0)  
			  ELSE 0 
			  END AS CREDIT_AMOUNT_TOT																/* 총 여신책정금액-여신연장금액 삭제 */
			<#if schSysClass?has_content>
     		, NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(TO_DATE(:schNeedDate),'YYYYMMDD') 
				    THEN A.CREDIT_OVER_AMOUNT 
					ELSE 0 END,0) AS CREDIT_OVER_AMOUNT											/* 여신한도초과액 */
			<#else> 
     		, NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(SYSDATE,'YYYYMMDD') 
				    THEN A.CREDIT_OVER_AMOUNT 
					ELSE 0 END,0) AS CREDIT_OVER_AMOUNT											/* 여신한도초과액 */
			</#if> 
     		, NVL(C.RMN_AMT,0) AS RMN_AMT															/* 외상매출잔액 */
     		, NVL(C1.PRE_AMT,0) AS PRE_AMT																/* 선수잔액 */
			<#if schSysClass?has_content>
     		, NVL(C2.PRE_AMT1,0) AS PRE_AMT1															/* 선수잔액 : 식도매(F07포함)*/
     		, NVL(C2.PRE_AMT2,0) AS PRE_AMT2															/* 선수잔액 : 식도매(F07제외)*/
			<#else> 
     		, 0 AS PRE_AMT1																						/* 선수잔액 : 식도매(F07포함)*/
     		, 0 AS PRE_AMT2																						/* 선수잔액 : 식도매(F07제외)*/
			</#if> 
     		, NVL(D.TR_AMT,0) AS TR_AMT																	/* 매입확정 */
     		, NVL(E.PO_AMT,0) AS PO_AMT																	/* 매입예정(발주) */
     		, NVL(F.PR_AMT,0) AS PR_AMT																	/* 매입예정(신청) */
			<#if schSysClass?has_content>
     		, NVL(C.RMN_AMT,0) - NVL(C2.PRE_AMT1,0) - NVL(C2.PRE_AMT2,0) + NVL(D.TR_AMT,0) + NVL(E.PO_AMT,0) + NVL(F.PR_AMT,0) AS BOND_AMT  /* 채권잔액 */
			<#else> 
     		, NVL(C.RMN_AMT,0) - NVL(C1.PRE_AMT,0) + NVL(D.TR_AMT,0) + NVL(E.PO_AMT,0) + NVL(F.PR_AMT,0) AS BOND_AMT  /* 채권잔액 */
			</#if> 
			<#if schSysClass?has_content>
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END  + NVL(A.CREDIT_OVER_AMOUNT, 0) - NVL(C.RMN_AMT,0) + NVL(C2.PRE_AMT1,0) + NVL(C2.PRE_AMT2,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) AS CREDIT_RMN_AMT  /* 가용여신 */
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END  - NVL(C.RMN_AMT,0) + NVL(C2.PRE_AMT1,0) + NVL(C2.PRE_AMT2,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) 
			     + NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(TO_DATE(:schNeedDate),'YYYYMMDD') THEN NVL(A.CREDIT_OVER_AMOUNT,0) ELSE 0 END,0) AS CREDIT_AVAIL_AMT /* 실주문가능금액 */
			<#else> 
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END + NVL(A.CREDIT_OVER_AMOUNT, 0) - NVL(C.RMN_AMT,0) + NVL(C1.PRE_AMT,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) AS CREDIT_RMN_AMT  /* 가용여신 */
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END  - NVL(C.RMN_AMT,0) + NVL(C1.PRE_AMT,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) 
			     + NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(SYSDATE,'YYYYMMDD') THEN NVL(A.CREDIT_OVER_AMOUNT,0) ELSE 0 END,0) AS CREDIT_AVAIL_AMT /* 실주문가능금액 */
			</#if> 
     		, NVL(C.L_BILL_DATE,'00000000') AS L_BILL_DATE											/* 최장 미입금된 외상매출발생일 */
     		, DECODE(C.L_BILL_DATE,NULL,-1,TO_DATE(:schNeedDate,'YYYYMMDD') - TO_DATE(C.L_BILL_DATE,'YYYYMMDD')) AS LAST_TURN_CNT 
     		, A.CREDIT_TURN_CONTROL_YN				/* 'Y'이면 여신회전일통제, 'N'이면 '통제안함' */
     		, A.CREDIT_AMOUNT_CONTROL_YN		/* 'Y'이면 여신금액통제, 'N'이면 '통제안함' */
     		, A.CREDIT_CONTROL_YN						/* 여신통제여부 */
		FROM FMS_UPJANG A	LEFT JOIN (
														SELECT
															  S.UPJANG
															, MIN(S.OCCUR_DATE) AS L_BILL_DATE
															, SUM(NVL(S.AR_AMT,0) - NVL(S.RECEIVE_AMT,0)) AS RMN_AMT
														FROM
																(
																/* C.외상잔액정보 */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.AR_AMT,0) AS AR_AMT  
																	, (SELECT NVL(SUM(D.RECEIVE_AMT),0) FROM SLA_AR_RECEIVE_DETAIL D WHERE D.RECD_STATUS  = 'L' 
																																								  			 AND D.RECEIVE_DATE <= :schNeedDate	/* 조건 : 입고예정일 */															
																																								  			 AND D.AR_NUM = M.AR_NUM) AS RECEIVE_AMT
																FROM SLA_AR_MST M 
																WHERE 1 = 1
																<#if schSysClass?has_content>
																AND M.SYS_CLASS = :schSysClass
						  										<#else> 
																AND M.SYS_CLASS = '13'				/* 조건 : 식재영업 */
							  									</#if> 
																AND    M.RECD_STATUS = 'L'
																AND    M.OCCUR_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																	<#if sUpjangList?has_content>
													   					AND M.UPJANG_CD IN ${sUpjangList}
					  									  			<#else> 
																		AND M.UPJANG_CD = :schMainUpjang	/* 조건 : 본사업장 */
							  										</#if> 
					  											<#else> 
																	AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if> 
																) S	
															GROUP BY S.UPJANG																												
															--HAVING SUM(NVL(S.AR_AMT,0) - NVL(S.RECEIVE_AMT,0)) > 0	/*  채권잔액이 있는 자료 기준 */
					       								) C ON A.UPJANG = C.UPJANG

										LEFT JOIN (
														SELECT
															  S.UPJANG
															, MIN(S.OCCUR_DATE) AS L_BILL_DATE
															, SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) AS PRE_AMT
														FROM
																(										
																/* C1.선수잔액정보 */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.OCCUR_AMT,0) AS OCCUR_AMT
																	, (SELECT NVL(SUM(D.APPLY_AMT),0) FROM SLA_ADVANCE_ALT_DETAIL D WHERE D.RECD_STATUS  = 'L' 
										                 																											   		   AND D.ALT_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
										                 																											   		   AND D.ADVANCE_NUM = M.ADVANCE_NUM) AS APPLY_AMT
																FROM SLA_ADVANCE_MST M 
																WHERE 1 = 1
																<#if schSysClass?has_content>
																AND M.SYS_CLASS = :schSysClass
						  										<#else> 
																AND M.SYS_CLASS = '13'				/* 조건 : 식재영업 */
							  									</#if> 
																AND    M.RECD_STATUS = 'L'
																AND    M.OCCUR_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																	<#if sUpjangList?has_content>
													   					AND M.UPJANG_CD IN ${sUpjangList}
					  									  			<#else> 
																		AND M.UPJANG_CD = :schMainUpjang	/* 조건 : 본사업장 */
							  										</#if> 
					  											<#else> 
																	AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if> 
							  									) S
							  									GROUP BY S.UPJANG 
																--HAVING  SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) > 0	/*  선수잔액이 있는 자료 기준 */
					      							)	C1 ON A.UPJANG = C1.UPJANG
					      			
									<#if schSysClass?has_content>
					      			LEFT JOIN (				
									 /* C2. 선수잔액정보 (14: 식도매) */
									 		SELECT
									 			  X.UPJANG
									 			, SUM(X.PRE_AMT1) AS PRE_AMT1
									 			, SUM(X.PRE_AMT2) AS PRE_AMT2
											FROM
													(									 
														SELECT
															  S.UPJANG
															, SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) AS PRE_AMT1
															, 0 AS PRE_AMT2
														FROM
																(										
																/* C2.선수잔액정보 : F07(계약이행예치금) */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.OCCUR_AMT,0) AS OCCUR_AMT
																	, (SELECT NVL(SUM(D.APPLY_AMT),0) FROM SLA_ADVANCE_ALT_DETAIL D WHERE D.RECD_STATUS  = 'L' 
										                 																											   		   AND D.ALT_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
										                 																											   		   AND D.ADVANCE_NUM = M.ADVANCE_NUM) AS APPLY_AMT
																FROM SLA_ADVANCE_MST M 
																WHERE 1 = 1
																--AND M.SYS_CLASS = :schSysClass
																AND    M.RECD_STATUS = 'L'
																AND    M.ADVANCE_TYPE_CD = 'F07'			/* 조건 : 선수금-계약이행예치금 */
																AND    M.OCCUR_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																AND    M.UPJANG_CD = :schMainUpjang	/* 조건 : 본사업장 */
					  											<#else> 
																AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if>
							  									) S
							  									GROUP BY S.UPJANG 
																--HAVING  SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) > 0	/*  선수잔액이 있는 자료 기준 */
	
														UNION ALL
														
														SELECT
															  S.UPJANG
															, 0 AS PRE_AMT1  
															, SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) AS PRE_AMT2
														FROM
																(										
																/* C2.선수잔액정보 : F07(계약이행예치금)  제외 */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.OCCUR_AMT,0) AS OCCUR_AMT
																	, (SELECT NVL(SUM(D.APPLY_AMT),0) FROM SLA_ADVANCE_ALT_DETAIL D WHERE D.RECD_STATUS  = 'L' 
										                 																											   		   AND D.ALT_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
										                 																											   		   AND D.ADVANCE_NUM = M.ADVANCE_NUM) AS APPLY_AMT
																FROM SLA_ADVANCE_MST M 
																WHERE 1 = 1
																--AND M.SYS_CLASS = :schSysClass
																AND    M.RECD_STATUS = 'L'
																AND    M.ADVANCE_TYPE_CD NOT IN ('F07')	/* 조건 : 선수금-계약이행예치금 제외 */
																AND    M.OCCUR_DATE <= :schNeedDate		/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																AND    M.UPJANG_CD = :schMainUpjang		/* 조건 : 본사업장 */
					  											<#else> 
																AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if>
							  									) S
							  									GROUP BY S.UPJANG 
																--HAVING  SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) > 0	/*  선수잔액이 있는 자료 기준 */
														) X
														GROUP BY X.UPJANG
					      							)	C2 ON A.UPJANG = C2.UPJANG
  									</#if> 
					      							
										LEFT JOIN (
														/* D.당월 미매출마감된 검수금액 */ 
														SELECT
															  X.UPJANG
															, SUM(X.TR_AMT) AS TR_AMT														
														FROM 
																(
																/* D1. 식재매출집계(FMS_SALES) 의 영업회계 미전송 자료 : 공급가액 */
																--SELECT
																--	<#if schHeadCreditYn == 'Y'>
							  									--	 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  									--	<#else> 
							  									--	 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  									--	</#if> 
														    	--	, SUM(A.SAL_AMT) AS TR_AMT
																--FROM FMS_SALES A  INNER JOIN FMS_UPJANG B  ON 1 = 1
																--																	<#if schHeadCreditYn == 'Y'>
																-- 																	AND B.HEAD_CREDIT_YN = 'Y'
																--																	AND B.MAIN_UPJANG = :schMainUpjang
																--																	 <#else> 
																-- 																	AND B.HEAD_CREDIT_YN = 'N'
																--																	AND B.UPJANG = :schUpjang	 			/* 조건 : 업장 */
																-- 																	 </#if> 
																-- 																	AND A.UPJANG = B.UPJANG
																--WHERE A.SALE_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																--AND    A.TRANS_YN = 'N'		/* 영업회계 미전송건 */
														
																--UNION ALL														
														
																/* D2. 식재매출집계(FMS_SALES)의 최종마감일자 이후에서 기준일자 까지 */
																SELECT
																	/*+ PUSH_PRED(A) */
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	--,  SUM(ROUND(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(A.TAX_CODE,'100',1.1,1) * A.SALE_AMOUNT)) AS TR_AMT
																	,  SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))) AS TR_AMT 
																FROM FMS_TRANSACTION_V A , FMS_UPJANG B ,(					SELECT 
							  																										UPJANG
																																 ,  MAX(SALE_DATE) AS SALE_DATE
						 																										FROM   FMS_SALES
						 																										WHERE  SALE_DATE <= :schNeedDate	  /* 조건 : 입고예정일 */
																																	AND  TRANS_YN = 'Y'		/* 영업회계 마감대상 */
						 																										GROUP BY UPJANG
																															) C 

																WHERE    A.MG_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																AND A.TRANS_UPJANG = C.UPJANG(+)
																<#if schHeadCreditYn == 'Y'>
																	AND B.HEAD_CREDIT_YN = 'Y'
																 <#else> 
																	AND B.HEAD_CREDIT_YN = 'N'
																 </#if> 
																	AND A.TRANS_UPJANG = B.UPJANG
																	
																<#if schHeadCreditYn == 'Y'>
																	<#if sUpjangList?has_content>
																	AND B.UPJANG IN ${sUpjangList}
																	<#else>
																	AND    B.UPJANG IN (SELECT UPJANG
										    										   				FROM FMS_UPJANG
										    										   				WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
										   															)
										   							 </#if>
					  											<#else> 
																AND    B.UPJANG = :schUpjang	 			/* 조건 : 업장 */
							  									</#if> 
																/* 업장별 최종마감일자 이후 ~ 기준일자까지의 집계 : 만약 마감정보가 없으면 기준일자 대비 1개월 전부터 대입 */
																--AND    A.TRANS_DATE >= GREATEST(TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate	, 'YYYYMMDD'), -1), 'YYYYMMDD'), NVL(TO_CHAR(TO_DATE(C.SALE_DATE(+), 'YYYYMMDD')+1, 'YYYYMMDD'),' '))
																AND      A.MG_DATE >= DECODE(C.SALE_DATE, NULL, GREATEST(TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate, 'YYYYMMDD'), -1), 'YYYYMM') || '01', NVL(TO_CHAR(TO_DATE(C.SALE_DATE, 'YYYYMMDD')+1, 'YYYYMMDD'),' ')),  TO_CHAR(TO_DATE(C.SALE_DATE, 'YYYYMMDD')+1, 'YYYYMMDD')) 		
																AND    (A.TRANS_TYPE = 'I001' OR (A.TRANS_TYPE LIKE '_002' AND A.SOURCE_TYPE = 'PO')) 
							  									) X	
													WHERE 1 = 1			
													<#if schHeadCreditYn == 'Y'>
													AND (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schMainUpjang) = 'Y' /* 조건 : 본사업장 */
					  							   <#else> 
													AND (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schUpjang) = 'Y' 		 /* 조건 : 업장 */
							  					   </#if> 
													GROUP BY X.UPJANG
													) D ON A.UPJANG = D.UPJANG	
										LEFT JOIN (
														/* E.당월 미검수 발주금액  */
														/* PW(발주진행), PC(발주완료), DL(배송중) 만 집계 */
														/* CENTER_DELI_QTY(센터입고수량), DIRECT_DELI_QTY(직송수량), DELIVERED_QTY(업장입고수량-센터출고), UNDELIVERED_QTY(센터미입고수량) */
														SELECT
															/*+ PUSH_PRED(A) */
															<#if schHeadCreditYn == 'Y'>
							  								 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  								<#else> 
							  								 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  								</#if> 
															, SUM(ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND((A.CENTER_DELI_QTY + A.DIRECT_DELI_QTY - A.DELIVERED_QTY - A.UNDELIVERED_QTY) * A.SALE_PRICE))) AS PO_AMT 
														FROM HLDC_PO_PO A  INNER JOIN FMS_UPJANG B  ON 1 = 1
																																	<#if schHeadCreditYn == 'Y'>
																 																	AND B.HEAD_CREDIT_YN = 'Y'
																 																	 <#else> 
																 																	AND B.HEAD_CREDIT_YN = 'N'
																 																	 </#if> 
																 																	AND A.RC_UPJANG = B.UPJANG
														WHERE A.NEED_DATE <= :schNeedDate	  /* 조건 : 입고예정일 */
														<#if schHeadCreditYn == 'Y'>
															<#if sUpjangList?has_content>
													   			AND B.UPJANG IN ${sUpjangList}
					  									  <#else> 
																AND    B.UPJANG IN (SELECT UPJANG
										    									   					FROM FMS_UPJANG
										    									   					WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
										   															)
							  								</#if> 
					  									<#else> 
														AND    B.UPJANG = :schUpjang	 			/* 조건 : 업장 */
							  							</#if> 
														AND    A.LINE_STATUS IN ('PW', 'PC', 'DL')
					    					) E ON A.UPJANG = E.UPJANG
										LEFT JOIN (
													/* F.당월 미발주 주문금액 */
												SELECT
													  <#if schHeadCreditYn == 'Y'>
							 						  :schMainUpjang AS UPJANG					/* 조건 : 본사업장 */
							  						  <#else> 
							  						   :schUpjang AS UPJANG							/* 조건 : 업장 */
							  						  </#if> 
													, SUM(ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.PR_QTY * A.SALE_PRICE))) AS PR_AMT 
												FROM SO_PR A  INNER JOIN FMS_UPJANG B  ON 1 = 1
																																	<#if schHeadCreditYn == 'Y'>
																 																	AND B.HEAD_CREDIT_YN = 'Y'
																 																	 <#else> 
																 																	AND B.HEAD_CREDIT_YN = 'N'
																 																	 </#if> 
																 																	AND A.RC_UPJANG = B.UPJANG
												WHERE A.NEED_DATE <= :schNeedDate	  /* 조건 : 입고예정일 */
												AND A.PO_TYPE IN ('07','29', '97')
												AND A.PO_TYPE <> (
																	SELECT DECODE(COUNT(1), 1, '-1', '97')
																	FROM SCC_COMMON_CODE
																	WHERE GROUP_CODE = 'CS_MASTER_USER'
																	AND USE_YN = 'Y'
																	AND CODE = :loginSabun
															   )
												<#if schHeadCreditYn == 'Y'>
													<#if sUpjangList?has_content>
											   			AND A.RC_UPJANG IN ${sUpjangList}
											   		<#else>
														AND A.RC_UPJANG IN (SELECT UPJANG
										    									       FROM FMS_UPJANG
										    										   WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
										   												)
							  					    </#if> 
					  							<#else> 
												AND    A.RC_UPJANG = :schUpjang	 			/* 조건 : 업장 */
							  					</#if> 
												AND    A.LINE_STATUS IN ('001') 			/* 진행상태 : 001(신청저장), 007(결의승인) */
												--AND    A.SO_STATUS IN ('001') 			/* 진행상태 : 001(신청저장) */
												<#if schHeadCreditYn == 'Y'>
												AND    (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schMainUpjang) = 'Y'	/* 조건 : 본사업장 */
					  							<#else> 
												AND (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schUpjang) = 'Y' 		 		/* 조건 : 업장 */
							  					</#if> 
					      				)	F ON A.UPJANG = F.UPJANG
		<#if schHeadCreditYn == 'Y'>
		WHERE A.UPJANG = :schMainUpjang		/* 조건 : 본사업장 */
		<#else> 
		WHERE A.UPJANG = :schUpjang				/* 조건 : 업장 */
		</#if> 
		AND    A.CREDIT_CONTROL_YN = 'Y' 
		AND   (A.CREDIT_TURN_CONTROL_YN = 'Y' OR A.CREDIT_AMOUNT_CONTROL_YN = 'Y') 
		]]></statement>

	<statement name="selectCreInfo_201708" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectCreInfoTun1 */
		<![CDATA[
		SELECT 
			  NVL(A.CREDIT_TURN_DAYS,0) AS CREDIT_TURN_DAYS									/* 여신회전일 */
      		, NVL(A.CREDIT_TURN_DAYS,0) AS CREDIT_TURN_DAYS_TOT							/* 총 여신회전일 : 여신연장일 삭제 */
      		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) 
			  ELSE 0 
			  END AS CREDIT_AMOUNT																		/* 여신금액 */
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0)  
			  ELSE 0 
			  END AS CREDIT_AMOUNT_TOT																/* 총 여신책정금액-여신연장금액 삭제 */
			<#if schSysClass?has_content>
     		, NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(TO_DATE(:schNeedDate),'YYYYMMDD') 
				    THEN A.CREDIT_OVER_AMOUNT 
					ELSE 0 END,0) AS CREDIT_OVER_AMOUNT											/* 여신한도초과액 */
			<#else> 
     		, NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(SYSDATE,'YYYYMMDD') 
				    THEN A.CREDIT_OVER_AMOUNT 
					ELSE 0 END,0) AS CREDIT_OVER_AMOUNT											/* 여신한도초과액 */
			</#if> 
     		, NVL(C.RMN_AMT,0) AS RMN_AMT															/* 외상매출잔액 */
     		, NVL(C1.PRE_AMT,0) AS PRE_AMT																/* 선수잔액 */
			<#if schSysClass?has_content>
     		, NVL(C2.PRE_AMT1,0) AS PRE_AMT1															/* 선수잔액 : 식도매(F07포함)*/
     		, NVL(C2.PRE_AMT2,0) AS PRE_AMT2															/* 선수잔액 : 식도매(F07제외)*/
			<#else> 
     		, 0 AS PRE_AMT1																						/* 선수잔액 : 식도매(F07포함)*/
     		, 0 AS PRE_AMT2																						/* 선수잔액 : 식도매(F07제외)*/
			</#if> 
     		, NVL(D.TR_AMT,0) AS TR_AMT																	/* 매입확정 */
     		, NVL(E.PO_AMT,0) AS PO_AMT																	/* 매입예정(발주) */
     		, NVL(F.PR_AMT,0) AS PR_AMT																	/* 매입예정(신청) */
			<#if schSysClass?has_content>
     		, NVL(C.RMN_AMT,0) - NVL(C2.PRE_AMT1,0) - NVL(C2.PRE_AMT2,0) + NVL(D.TR_AMT,0) + NVL(E.PO_AMT,0) + NVL(F.PR_AMT,0) AS BOND_AMT  /* 채권잔액 */
			<#else> 
     		, NVL(C.RMN_AMT,0) - NVL(C1.PRE_AMT,0) + NVL(D.TR_AMT,0) + NVL(E.PO_AMT,0) + NVL(F.PR_AMT,0) AS BOND_AMT  /* 채권잔액 */
			</#if> 
			<#if schSysClass?has_content>
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END  + NVL(A.CREDIT_OVER_AMOUNT, 0) - NVL(C.RMN_AMT,0) + NVL(C2.PRE_AMT1,0) + NVL(C2.PRE_AMT2,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) AS CREDIT_RMN_AMT  /* 가용여신 */
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END  - NVL(C.RMN_AMT,0) + NVL(C2.PRE_AMT1,0) + NVL(C2.PRE_AMT2,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) 
			     + NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(TO_DATE(:schNeedDate),'YYYYMMDD') THEN NVL(A.CREDIT_OVER_AMOUNT,0) ELSE 0 END,0) AS CREDIT_AVAIL_AMT /* 실주문가능금액 */
			<#else> 
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END + NVL(A.CREDIT_OVER_AMOUNT, 0) - NVL(C.RMN_AMT,0) + NVL(C1.PRE_AMT,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) AS CREDIT_RMN_AMT  /* 가용여신 */
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END  - NVL(C.RMN_AMT,0) + NVL(C1.PRE_AMT,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) 
			     + NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(SYSDATE,'YYYYMMDD') THEN NVL(A.CREDIT_OVER_AMOUNT,0) ELSE 0 END,0) AS CREDIT_AVAIL_AMT /* 실주문가능금액 */
			</#if> 
     		, NVL(C.L_BILL_DATE,'00000000') AS L_BILL_DATE											/* 최장 미입금된 외상매출발생일 */
     		, DECODE(C.L_BILL_DATE,NULL,-1,TO_DATE(:schNeedDate,'YYYYMMDD') - TO_DATE(C.L_BILL_DATE,'YYYYMMDD')) AS LAST_TURN_CNT 
     		, A.CREDIT_TURN_CONTROL_YN				/* 'Y'이면 여신회전일통제, 'N'이면 '통제안함' */
     		, A.CREDIT_AMOUNT_CONTROL_YN		/* 'Y'이면 여신금액통제, 'N'이면 '통제안함' */
     		, A.CREDIT_CONTROL_YN						/* 여신통제여부 */
		FROM FMS_UPJANG A	LEFT JOIN (
														SELECT
															  S.UPJANG
															, MIN(S.OCCUR_DATE) AS L_BILL_DATE
															, SUM(NVL(S.AR_AMT,0) - NVL(S.RECEIVE_AMT,0)) AS RMN_AMT
														FROM
																(
																/* C.외상잔액정보 */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.AR_AMT,0) AS AR_AMT  
																	, (SELECT NVL(SUM(D.RECEIVE_AMT),0) FROM SLA_AR_RECEIVE_DETAIL D WHERE D.RECD_STATUS  = 'L' 
																																								  			 AND D.RECEIVE_DATE <= :schNeedDate	/* 조건 : 입고예정일 */															
																																								  			 AND D.AR_NUM = M.AR_NUM) AS RECEIVE_AMT
																FROM SLA_AR_MST M 
																WHERE 1 = 1
																<#if schSysClass?has_content>
																AND M.SYS_CLASS = :schSysClass
						  										<#else> 
																AND M.SYS_CLASS = '13'				/* 조건 : 식재영업 */
							  									</#if> 
																AND    M.RECD_STATUS = 'L'
																AND    M.OCCUR_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																	<#if sUpjangList?has_content>
													   					AND M.UPJANG_CD IN ${sUpjangList}
					  									  			<#else> 
																		AND M.UPJANG_CD = :schMainUpjang	/* 조건 : 본사업장 */
							  										</#if> 
					  											<#else> 
																	AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if> 
																) S	
															GROUP BY S.UPJANG																												
															--HAVING SUM(NVL(S.AR_AMT,0) - NVL(S.RECEIVE_AMT,0)) > 0	/*  채권잔액이 있는 자료 기준 */
					       								) C ON A.UPJANG = C.UPJANG

										LEFT JOIN (
														SELECT
															  S.UPJANG
															, MIN(S.OCCUR_DATE) AS L_BILL_DATE
															, SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) AS PRE_AMT
														FROM
																(										
																/* C1.선수잔액정보 */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.OCCUR_AMT,0) AS OCCUR_AMT
																	, (SELECT NVL(SUM(D.APPLY_AMT),0) FROM SLA_ADVANCE_ALT_DETAIL D WHERE D.RECD_STATUS  = 'L' 
										                 																											   		   AND D.ALT_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
										                 																											   		   AND D.ADVANCE_NUM = M.ADVANCE_NUM) AS APPLY_AMT
																FROM SLA_ADVANCE_MST M 
																WHERE 1 = 1
																<#if schSysClass?has_content>
																AND M.SYS_CLASS = :schSysClass
						  										<#else> 
																AND M.SYS_CLASS = '13'				/* 조건 : 식재영업 */
							  									</#if> 
																AND    M.RECD_STATUS = 'L'
																AND    M.OCCUR_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																	<#if sUpjangList?has_content>
													   					AND M.UPJANG_CD IN ${sUpjangList}
					  									  			<#else> 
																		AND M.UPJANG_CD = :schMainUpjang	/* 조건 : 본사업장 */
							  										</#if> 
					  											<#else> 
																	AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if> 
							  									) S
							  									GROUP BY S.UPJANG 
																--HAVING  SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) > 0	/*  선수잔액이 있는 자료 기준 */
					      							)	C1 ON A.UPJANG = C1.UPJANG
					      			
									<#if schSysClass?has_content>
					      			LEFT JOIN (				
									 /* C2. 선수잔액정보 (14: 식도매) */
									 		SELECT
									 			  X.UPJANG
									 			, SUM(X.PRE_AMT1) AS PRE_AMT1
									 			, SUM(X.PRE_AMT2) AS PRE_AMT2
											FROM
													(									 
														SELECT
															  S.UPJANG
															, SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) AS PRE_AMT1
															, 0 AS PRE_AMT2
														FROM
																(										
																/* C2.선수잔액정보 : F07(계약이행예치금) */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.OCCUR_AMT,0) AS OCCUR_AMT
																	, (SELECT NVL(SUM(D.APPLY_AMT),0) FROM SLA_ADVANCE_ALT_DETAIL D WHERE D.RECD_STATUS  = 'L' 
										                 																											   		   AND D.ALT_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
										                 																											   		   AND D.ADVANCE_NUM = M.ADVANCE_NUM) AS APPLY_AMT
																FROM SLA_ADVANCE_MST M 
																WHERE 1 = 1
																--AND M.SYS_CLASS = :schSysClass
																AND    M.RECD_STATUS = 'L'
																AND    M.ADVANCE_TYPE_CD = 'F07'			/* 조건 : 선수금-계약이행예치금 */
																AND    M.OCCUR_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																AND    M.UPJANG_CD = :schMainUpjang	/* 조건 : 본사업장 */
					  											<#else> 
																AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if>
							  									) S
							  									GROUP BY S.UPJANG 
																--HAVING  SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) > 0	/*  선수잔액이 있는 자료 기준 */
	
														UNION ALL
														
														SELECT
															  S.UPJANG
															, 0 AS PRE_AMT1  
															, SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) AS PRE_AMT2
														FROM
																(										
																/* C2.선수잔액정보 : F07(계약이행예치금)  제외 */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.OCCUR_AMT,0) AS OCCUR_AMT
																	, (SELECT NVL(SUM(D.APPLY_AMT),0) FROM SLA_ADVANCE_ALT_DETAIL D WHERE D.RECD_STATUS  = 'L' 
										                 																											   		   AND D.ALT_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
										                 																											   		   AND D.ADVANCE_NUM = M.ADVANCE_NUM) AS APPLY_AMT
																FROM SLA_ADVANCE_MST M 
																WHERE 1 = 1
																--AND M.SYS_CLASS = :schSysClass
																AND    M.RECD_STATUS = 'L'
																AND    M.ADVANCE_TYPE_CD NOT IN ('F07')	/* 조건 : 선수금-계약이행예치금 제외 */
																AND    M.OCCUR_DATE <= :schNeedDate		/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																AND    M.UPJANG_CD = :schMainUpjang		/* 조건 : 본사업장 */
					  											<#else> 
																AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if>
							  									) S
							  									GROUP BY S.UPJANG 
																--HAVING  SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) > 0	/*  선수잔액이 있는 자료 기준 */
														) X
														GROUP BY X.UPJANG
					      							)	C2 ON A.UPJANG = C2.UPJANG
  									</#if> 
					      							
										LEFT JOIN (
														/* D.당월 미매출마감된 검수금액 */ 
														SELECT
															  X.UPJANG
															, SUM(X.TR_AMT) AS TR_AMT														
														FROM 
																(
																/* D2. 식재매출집계(FMS_SALES)의 최종마감일자 이후에서 기준일자 까지 */
																SELECT
																	/*+ PUSH_PRED(A) */
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	--,  SUM(ROUND(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(A.TAX_CODE,'100',1.1,1) * A.SALE_AMOUNT)) AS TR_AMT
																	,  SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))) AS TR_AMT 
																FROM (                                                                                                                                                                                                                              
                                                SELECT DT.MG_NO AS TRANS_ID,  /* 자재수불번호 */                                                                                                                                                                               
                                                       CASE                                                                                                                                                                                                                    
                                                         WHEN SUBSTR(DT.MOVEMENT_TYP,0,2)='25' THEN 'FO'                                                                                                                                                                       
                                                         WHEN DT.PROC_TYP_CD IS NULL AND DT.IVT_INSP_NO IS NOT NULL THEN '재고조정'                                                                                                                                            
                                                         WHEN DT.PROC_TYP_CD IS NULL AND DT.IVT_INSP_NO IS NULL THEN 'INV'                                                                                                                                                     
                                                         ELSE 'PO'                                                                                                                                                                                                             
                                                       END AS SOURCE_TYPE,  /* FO, PO, INV, 재고조정 */                                                                                                                                                                        
                                                       SL.CUST_GR_DATE AS TRANS_DATE,  /* 판매일자 */                                                                                                                                                                          
                                                       DT.MG_DATE AS MG_DATE,  /* 수불일자*/                                                                                                                                                                                   
                                                       CASE                                                                                                                                                                                                                    
                                                         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NULL THEN 'O002'         /* 재고이동 - 이동출고   */                                                                                                          
                                                         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NOT NULL THEN 'I002'      /*재고이동 - 이동입고  */                                                                                                           
                                                         WHEN DT.MOVEMENT_TYP = '251'OR DT.MOVEMENT_TYP = '252' THEN 'O001'      /* POS 매출 유형  */                                                                                                                          
                                                         WHEN DT.MOVEMENT_TYP = '701' OR DT.MOVEMENT_TYP = '702' THEN 'O004'      /* 재고실사 */                                                                                                                               
                                                         ELSE 'I001'                                                                                                                                                                                                           
                                                       END AS TRANS_TYPE,                                                                                                                                                                                                      
                                                      CASE                                                                                                                                                                                                                     
                                                         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)                                                                               
                                                         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)                                                                                     
                                                         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)                                                                                             
                                                         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)                                                                                                   
                                                       END AS TRANS_QTY,             /* 수량 */                                                                                                                                                                                
                                                       SL.SHOP_CD AS TRANS_UPJANG,    /* 업장 코드 */                                                                                                                                                                           
                                                       SL.CUST_WH_CD AS SUBINV_CODE,     /* 창고코드*/                                                                                                                                                                         
                                                       --DECODE(MT.ACC_TAX_CD,'1','100','3','210','220') AS TAX_CODE,             /* 과면세 코드 */
                                                       CASE WHEN PO.DUTY_FREE_YN ='1' THEN '100'     
                                                            WHEN PO.DUTY_FREE_YN ='3' THEN '210'     
                                                            WHEN PO.DUTY_FREE_YN ='2' THEN '220'     
                                                        END AS TAX_CODE, -- 과세구분코드                                                                                                                              
                                                       SL.SAL_PRICE AS SALE_PRICE                               /* 외부판매단가 */                                                                                                                                             
                                                 FROM EPROCUSR.ESIMGDT DT,                                               /* 수불상세 */                                                                                                                                        
                                                      EPROCUSR.ESPPODT PO,                                              /* 발주 상세 */                                                                                                                                        
                                                      EPROCUSR.ESISALP SL                                               /* 판매단가 */                                                                                                                                         
                                                WHERE 1=1
                                                  AND DT.MOVEMENT_TYP NOT IN ('561','562','998','999','901','902','801','802','111','112','211','212')   /* 기초 , 기말 재고,배송입출고, 직송 가상입출고  제외 */                                                              
                                                  AND DT.SYS_ID = PO.SYS_ID                                                                                                                                                                                                 
                                                  AND DT.COMP_CD = PO.COMP_CD                                                                                                                                                                                               
                                                  AND DT.PO_NO = PO.PO_NO                                                                                                                                                                                                   
                                                  AND DT.PO_LNO = PO.PO_LNO                                                                                                                                                                                                 
                                                  AND DT.SYS_ID = SL.SYS_ID                                                                                                                                                                                                    
                                                  AND DT.COMP_CD = SL.COMP_CD                                                                                                                                                                                                  
                                                  AND DT.MG_NO = SL.MG_NO                                                                                                                                                                                                      
                                                  AND DT.STS <> 'D'
                                                  <#if schHeadCreditYn == 'Y'>
							  						AND SL.SHOP_CD IN (SELECT UPJANG FROM FMS_UPJANG WHERE MAIN_UPJANG = :schMainUpjang AND HEAD_CREDIT_YN = 'Y' AND USE_YN = 'Y')
							  					  <#else> 
							  						AND SL.SHOP_CD = :schUpjang
							  					  </#if>                                                                                                                                                                                                             
                                                  AND DT.MG_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate, 'YYYYMMDD'), -1), 'YYYYMM') || '01' AND :schNeedDate                                                                                                                 
                                                UNION ALL                                                                                                                                                                                                                      
                                                   SELECT B.TRANS_ID,                                                                                                                                                                                                          
                                                          B.SOURCE_TYPE ,                                                                                                                                                                                                      
                                                          B.TRANS_DATE,                                                                                                                                                                                                        
                                                          B.TRANS_DATE AS MG_DATE,                                                                                                                                                                                             
                                                          B.TRANS_TYPE,                                                                                                                                                                                                        
                                                          B.TRANS_QTY,                                                                                                                                                                                                         
                                                          TO_CHAR (B.TRANS_UPJANG) AS TRANS_UPJANG,                                                                                                                                                                            
                                                          B.SUBINV_CODE,                                                                                                                                                                                                       
                                                          B.TAX_CODE,                                                                                                                                                                                                          
                                                          B.SALE_PRICE                                                                                                                                                                                                         
                                                     FROM FMS_TRANSACTION B                                                                                                                                                                                                    
                                                    WHERE 1=1
                                                      <#if schHeadCreditYn == 'Y'>
							  							AND B.TRANS_UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE MAIN_UPJANG = :schMainUpjang AND HEAD_CREDIT_YN = 'Y' AND USE_YN = 'Y')
							  					  	  <#else> 
							  							AND B.TRANS_UPJANG = :schUpjang
							  					  	  </#if>
                                                      AND B.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate, 'YYYYMMDD'), -1), 'YYYYMM') || '01' AND :schNeedDate                                                                                                           
                                                ) A , FMS_UPJANG B ,(					SELECT 
							  																										UPJANG
																																 ,  MAX(SALE_DATE) AS SALE_DATE
						 																										FROM   FMS_SALES
						 																										WHERE  SALE_DATE <= :schNeedDate	  /* 조건 : 입고예정일 */
																																	AND  TRANS_YN = 'Y'		/* 영업회계 마감대상 */
						 																										GROUP BY UPJANG
																															) C 

																WHERE    A.MG_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																AND A.TRANS_UPJANG = C.UPJANG(+)
																<#if schHeadCreditYn == 'Y'>
																	AND B.HEAD_CREDIT_YN = 'Y'
																 <#else> 
																	AND B.HEAD_CREDIT_YN = 'N'
																 </#if> 
																	AND A.TRANS_UPJANG = B.UPJANG
																	
																<#if schHeadCreditYn == 'Y'>
																	<#if sUpjangList?has_content>
																	AND B.UPJANG IN ${sUpjangList}
																	<#else>
																	AND    B.UPJANG IN (SELECT UPJANG
										    										   				FROM FMS_UPJANG
										    										   				WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
										   															)
										   							 </#if>
					  											<#else> 
																AND    B.UPJANG = :schUpjang	 			/* 조건 : 업장 */
							  									</#if> 
																/* 업장별 최종마감일자 이후 ~ 기준일자까지의 집계 : 만약 마감정보가 없으면 기준일자 대비 1개월 전부터 대입 */
																--AND    A.TRANS_DATE >= GREATEST(TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate	, 'YYYYMMDD'), -1), 'YYYYMMDD'), NVL(TO_CHAR(TO_DATE(C.SALE_DATE(+), 'YYYYMMDD')+1, 'YYYYMMDD'),' '))
																AND      A.MG_DATE >= DECODE(C.SALE_DATE, NULL, GREATEST(TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate, 'YYYYMMDD'), -1), 'YYYYMM') || '01', NVL(TO_CHAR(TO_DATE(C.SALE_DATE, 'YYYYMMDD')+1, 'YYYYMMDD'),' ')),  TO_CHAR(TO_DATE(C.SALE_DATE, 'YYYYMMDD')+1, 'YYYYMMDD')) 		
																AND    (A.TRANS_TYPE = 'I001' OR (A.TRANS_TYPE LIKE '_002' AND A.SOURCE_TYPE = 'PO')) 
							  									) X	
													WHERE 1 = 1			
													<#if schHeadCreditYn == 'Y'>
													AND (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schMainUpjang) = 'Y' /* 조건 : 본사업장 */
					  							   <#else> 
													AND (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schUpjang) = 'Y' 		 /* 조건 : 업장 */
							  					   </#if> 
													GROUP BY X.UPJANG
													) D ON A.UPJANG = D.UPJANG	
										LEFT JOIN (
														/* E.당월 미검수 발주금액  */
														/* PW(발주진행), PC(발주완료), DL(배송중) 만 집계 */
														/* CENTER_DELI_QTY(센터입고수량), DIRECT_DELI_QTY(직송수량), DELIVERED_QTY(업장입고수량-센터출고), UNDELIVERED_QTY(센터미입고수량) */
														SELECT
															/*+ PUSH_PRED(A) */
															<#if schHeadCreditYn == 'Y'>
							  								 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  								<#else> 
							  								 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  								</#if> 
															, SUM(ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND((A.CENTER_DELI_QTY + A.DIRECT_DELI_QTY - A.DELIVERED_QTY - A.UNDELIVERED_QTY) * A.SALE_PRICE))) AS PO_AMT 
														FROM (
														                                                                                                                                    
                        SELECT                                                                                                                       
                               SAL.SHOP_CD              AS RC_UPJANG   -- 입고업장 코드                                                              
                             , CASE                                                                                                                  
                                 WHEN PODT.DUTY_FREE_YN ='1' THEN '100'                                                                              
                                 WHEN PODT.DUTY_FREE_YN ='3' THEN '210'                                                                              
                                 WHEN PODT.DUTY_FREE_YN ='2' THEN '220'                                                                              
                               END  AS TAX_CODE   -- 과세구분코드                                                                                    
                             , PODT.PR_QTY              AS PR_QTY      -- 신청 수량                                                                  
                             , PODT.ITEM_QTY            AS PO_QTY      -- 발수 수량                                                                  
                             , CASE WHEN PODT.PROC_TYP_CD IN('DC', 'TC') THEN PODT.ITEM_QTY ELSE 0 END  AS CENTER_DELI_QTY  -- 센터입고수량          
                             , 0  AS CENTER_UNDELI_QTY             -- 센터미입고 수량                                                                
                             , CASE PODT.PROC_TYP_CD WHEN 'VC' THEN PODT.ITEM_QTY ELSE 0 END  AS DIRECT_DELI_QTY  -- 직송 수량                       
                             , CASE PODT.PROC_TYP_CD WHEN 'VC' THEN NVL(PODT.GR_QTY,0) ELSE NVL(PODT.GR_QTY_WMS,0) END  AS DELIVERED_QTY    --업장입고수량(센터출고) 
                            , CASE                                                                                                                   
                                 WHEN PODT.PO_COMP_YN='Y' OR PODT.GR_COMP_YN='Y' THEN NVL(PODT.ITEM_QTY,0) - NVL(PODT.GR_QTY,0) -- 입고완료          
                                 ELSE 0                                                                                                              
                               END AS UNDELIVERED_QTY -- 감량수량                                                                                    
                             , PODT.RTN_QTY AS RETURNED_QTY -- 반품수량                                                                              
                             , SAL.CUST_GR_DATE                AS NEED_DATE -- 입고희망일자                                                          
                             , NVL(CASE WHEN POHD.PO_TYP = 'BP' THEN                                                                                 
                                     CASE                                                                                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'T'         THEN 'RW' --통합영업에서 뷰 불가                     
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'P'         THEN 'PW'                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS IN ('R', 'W') THEN 'PD'                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'B'         THEN 'PD'                                            
                                       WHEN PODT.GR_COMP_YN='Y' AND POHD.APRV_STS = 'B'         THEN 'GC'                                            
                                       WHEN PODT.GR_COMP_YN='Y' AND POHD.APRV_STS IN ('C', 'K') THEN 'GC'                                            
                                     END                                                                                                             
                                  ELSE DECODE(PODT.GR_COMP_YN, 'Y', 'GC', NVL(PRDT.PR_PROG_STS,'PC'))                                                
                               END,'PC') AS LINE_STATUS  -- 라인 상태 코드                                                                           
                             , NVL(SAL.SAL_PRICE,0)      AS SALE_PRICE -- 판매 단가                                                                  
                          FROM EPROCUSR.ESPPOHD POHD   -- PO 헤더                                                                                    
                             , EPROCUSR.ESPPODT PODT   -- PO 상세(품목)                                                                              
                             , EPROCUSR.ESMMTGL MTGL   -- 자재마스터                                                                                 
                             , EPROCUSR.ESPPODTSAL SAL -- 판매단가정보[통합영업]                                                                     
                             , EPROCUSR.ESPPRDT PRDT   -- PR 상세(품목)                                                                              
                         WHERE PODT.SYS_ID  = POHD.SYS_ID(+)                                                                                         
                           AND PODT.COMP_CD = POHD.COMP_CD (+)                                                                                       
                           AND PODT.PO_NO   = POHD.PO_NO(+)                                                                                          
                           AND PODT.SYS_ID  = SAL.SYS_ID(+)                                                                                          
                           AND PODT.COMP_CD = SAL.COMP_CD(+)                                                                                         
                           AND PODT.PO_NO   = SAL.PO_NO(+)                                                                                           
                           AND PODT.PO_LNO  = SAL.PO_LNO(+)                                                                                          
                           AND PODT.SYS_ID  = MTGL.SYS_ID                                                                                            
                           AND PODT.ITEM_CD = MTGL.ITEM_CD                                                                                           
                           AND PODT.PR_NO   = PRDT.PR_NO(+)                                                                                          
                           AND PODT.PR_LNO  = PRDT.PR_LNO(+)                                                                                         
                           AND PODT.SYS_ID  = PRDT.SYS_ID(+)                                                                                         
                           AND PODT.COMP_CD = PRDT.COMP_CD(+)                                                                                        
                           AND PODT.SYS_ID  = '100'                                                                                                  
                           AND PODT.COMP_CD = 'HFC'                                                                                                  
                           AND PODT.SHOP_TYP_CD = '02'                                                                                               
                           AND PODT.STS    <> 'D'                                                                                                    
                           AND POHD.PO_TYP IN ('UP','BP')                                                                                            
                           and SAL.CUST_GR_DATE between to_char(add_months(sysdate,-1),'yyyymm') || '01' and :schNeedDate
                           <#if schHeadCreditYn == 'Y'>
															<#if sUpjangList?has_content>
													   			AND SAL.SHOP_CD IN ${sUpjangList}
					  									  <#else> 
																AND SAL.SHOP_CD IN (SELECT UPJANG
						    									   					FROM FMS_UPJANG
						    									   					WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
						   															)
							  								</#if> 
					  									<#else> 
														AND    SAL.SHOP_CD = :schUpjang	 			/* 조건 : 업장 */
							  							</#if> 
                           and NVL(CASE WHEN POHD.PO_TYP = 'BP' THEN                                                                                 
                                     CASE                                                                                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'T'         THEN 'RW' --통합영업에서 뷰 불가                     
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'P'         THEN 'PW'                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS IN ('R', 'W') THEN 'PD'                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'B'         THEN 'PD'                                            
                                       WHEN PODT.GR_COMP_YN='Y' AND POHD.APRV_STS = 'B'         THEN 'GC'                                            
                                       WHEN PODT.GR_COMP_YN='Y' AND POHD.APRV_STS IN ('C', 'K') THEN 'GC'                                            
                                     END                                                                                                             
                                  ELSE DECODE(PODT.GR_COMP_YN, 'Y', 'GC', NVL(PRDT.PR_PROG_STS,'PC'))                                                
                               END,'PC') IN ('PW', 'PC', 'DL')                                                                                       
														) A  INNER JOIN FMS_UPJANG B  ON 1 = 1
																																	<#if schHeadCreditYn == 'Y'>
																 																	AND B.HEAD_CREDIT_YN = 'Y'
																 																	 <#else> 
																 																	AND B.HEAD_CREDIT_YN = 'N'
																 																	 </#if> 
																 																	AND A.RC_UPJANG = B.UPJANG
														WHERE A.NEED_DATE <= :schNeedDate	  /* 조건 : 입고예정일 */
														<#if schHeadCreditYn == 'Y'>
															<#if sUpjangList?has_content>
													   			AND B.UPJANG IN ${sUpjangList}
					  									  <#else> 
																AND    B.UPJANG IN (SELECT UPJANG
										    									   					FROM FMS_UPJANG
										    									   					WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
										   															)
							  								</#if> 
					  									<#else> 
														AND    B.UPJANG = :schUpjang	 			/* 조건 : 업장 */
							  							</#if> 
														AND    A.LINE_STATUS IN ('PW', 'PC', 'DL')
					    					) E ON A.UPJANG = E.UPJANG
										LEFT JOIN (
													/* F.당월 미발주 주문금액 */
												SELECT
													  <#if schHeadCreditYn == 'Y'>
							 						  :schMainUpjang AS UPJANG					/* 조건 : 본사업장 */
							  						  <#else> 
							  						   :schUpjang AS UPJANG							/* 조건 : 업장 */
							  						  </#if> 
													, SUM(ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.PR_QTY * A.SALE_PRICE))) AS PR_AMT 
												FROM SO_PR A  INNER JOIN FMS_UPJANG B  ON 1 = 1
																																	<#if schHeadCreditYn == 'Y'>
																 																	AND B.HEAD_CREDIT_YN = 'Y'
																 																	 <#else> 
																 																	AND B.HEAD_CREDIT_YN = 'N'
																 																	 </#if> 
																 																	AND A.RC_UPJANG = B.UPJANG
												WHERE A.NEED_DATE <= :schNeedDate	  /* 조건 : 입고예정일 */
												AND A.PO_TYPE IN ('07','29', '97')
												AND A.PO_TYPE <> (
																		SELECT DECODE(COUNT(1), 1, '-1', '97')
																		FROM SCC_COMMON_CODE
																		WHERE GROUP_CODE = 'CS_MASTER_USER'
																		AND USE_YN = 'Y'
																		AND CODE = :loginSabun
																   )
												<#if schHeadCreditYn == 'Y'>
													<#if sUpjangList?has_content>
											   			AND A.RC_UPJANG IN ${sUpjangList}
											   		<#else>
														AND A.RC_UPJANG IN (SELECT UPJANG
										    									       FROM FMS_UPJANG
										    										   WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
										   												)
							  					    </#if> 
					  							<#else> 
												AND    A.RC_UPJANG = :schUpjang	 			/* 조건 : 업장 */
							  					</#if> 
												AND    A.LINE_STATUS IN ('001') 			/* 진행상태 : 001(신청저장), 007(결의승인) */
												--AND    A.SO_STATUS IN ('001') 			/* 진행상태 : 001(신청저장) */
												<#if schHeadCreditYn == 'Y'>
												AND    (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schMainUpjang) = 'Y'	/* 조건 : 본사업장 */
					  							<#else> 
												AND (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schUpjang) = 'Y' 		 		/* 조건 : 업장 */
							  					</#if> 
					      				)	F ON A.UPJANG = F.UPJANG
		<#if schHeadCreditYn == 'Y'>
		WHERE A.UPJANG = :schMainUpjang		/* 조건 : 본사업장 */
		<#else> 
		WHERE A.UPJANG = :schUpjang				/* 조건 : 업장 */
		</#if> 
		AND    A.CREDIT_CONTROL_YN = 'Y' 
		AND   (A.CREDIT_TURN_CONTROL_YN = 'Y' OR A.CREDIT_AMOUNT_CONTROL_YN = 'Y')  
		]]>
	</statement>

<!-- [속도개선 Project 시작] 2017. 8. 21. 최범주 여신정보조회 함수 대체 -->
	<statement name="selectCreInfo" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectCreInfo */
		<![CDATA[
        SELECT
               A.CREDIT_TURN_DAYS          /* 여신회전일                                 */
             , A.CREDIT_TURN_DAYS_TOT      /* 총 여신회전일                              */
             , A.MAIN_UPJANG               /* 메인업장(본사)                             */
             , A.UPJANG                    /* 업장                                       */
             , A.UPJANGNM_DISP             /* 업장명                                     */
             , A.CREDIT_AMOUNT             /* 기본여신금액                               */
             , A.CREDIT_OVER_AMOUNT        /* 여신한도초과액                             */
             , A.BOND_AMT                  /* 채권잔액                                   */
             , A.L_BILL_DATE               /* 최장 미입금된 외상매출발생일               */
             , A.CREDIT_RMN_AMT            /* 가용여신                                   */
             , A.CREDIT_AVAIL_AMT          /* 실주문가능금액                             */
             , A.LAST_TURN_CNT
             , A.HEAD_CREDIT_YN            /* 통합관리여부*/
             , A.CREDIT_TURN_CONTROL_YN    /* 'Y'이면 여신회전일통제, 'N'이면 '통제안함' */
             , A.CREDIT_AMOUNT_CONTROL_YN  /* 'Y'이면 여신금액통제, 'N'이면 '통제안함'   */
             , A.CREDIT_CONTROL_YN         /* 여신통제여부                               */
             , A.ACNTCD                    /* 계좌정보                                   */
             , A.CREDIT_CONTROL_DESC       /* 통제구분                                   */
             , A.CREDIT_START              /* 여신부여일                                 */
             , A.CREDIT_END                /* 여신부여일                                 */
             , A.L_BILL_DATE_DISP          /* 최장 미입금된 외상매출발생일               */ 
          FROM TABLE(
                   FT_UPJANG_CREDIT_LIMIT(:schUpjang, :schNeedDate)
               ) A
		]]>
	</statement>
<!-- [속도개선 Project   끝] 2017. 8. 21. 최범주 -->

	<statement name="selectCreInfoFTS" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectCreInfoFTS */
		<![CDATA[
		SELECT 
			  NVL(A.CREDIT_TURN_DAYS,0) AS CREDIT_TURN_DAYS									/* 여신회전일 */
      		, NVL(A.CREDIT_TURN_DAYS,0) AS CREDIT_TURN_DAYS_TOT							/* 총 여신회전일 : 여신연장일 삭제 */
      		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) 
			  ELSE 0 
			  END AS CREDIT_AMOUNT																		/* 여신금액 */
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0)  
			  ELSE 0 
			  END AS CREDIT_AMOUNT_TOT																/* 총 여신책정금액-여신연장금액 삭제 */
			<#if schSysClass?has_content>
     		, NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(TO_DATE(:schNeedDate),'YYYYMMDD') 
				    THEN A.CREDIT_OVER_AMOUNT 
					ELSE 0 END,0) AS CREDIT_OVER_AMOUNT											/* 여신한도초과액 */
			<#else> 
     		, NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(SYSDATE,'YYYYMMDD') 
				    THEN A.CREDIT_OVER_AMOUNT 
					ELSE 0 END,0) AS CREDIT_OVER_AMOUNT											/* 여신한도초과액 */
			</#if> 
     		, NVL(C.RMN_AMT,0) AS RMN_AMT															/* 외상매출잔액 */
     		, NVL(C1.PRE_AMT,0) AS PRE_AMT																/* 선수잔액 */
			<#if schSysClass?has_content>
     		, NVL(C2.PRE_AMT1,0) AS PRE_AMT1															/* 선수잔액 : 식도매(F07포함)*/
     		, NVL(C2.PRE_AMT2,0) AS PRE_AMT2															/* 선수잔액 : 식도매(F07제외)*/
			<#else> 
     		, 0 AS PRE_AMT1																						/* 선수잔액 : 식도매(F07포함)*/
     		, 0 AS PRE_AMT2																						/* 선수잔액 : 식도매(F07제외)*/
			</#if> 
     		, NVL(D.TR_AMT,0) AS TR_AMT																	/* 매입확정 */
     		, NVL(E.PO_AMT,0) AS PO_AMT																	/* 매입예정(발주) */
     		, NVL(F.PR_AMT,0) AS PR_AMT																	/* 매입예정(신청) */
			<#if schSysClass?has_content>
     		, NVL(C.RMN_AMT,0) - NVL(C2.PRE_AMT1,0) - NVL(C2.PRE_AMT2,0) + NVL(D.TR_AMT,0) + NVL(E.PO_AMT,0) + NVL(F.PR_AMT,0) AS BOND_AMT  /* 채권잔액 */
			<#else> 
     		, NVL(C.RMN_AMT,0) - NVL(C1.PRE_AMT,0) + NVL(D.TR_AMT,0) + NVL(E.PO_AMT,0) + NVL(F.PR_AMT,0) AS BOND_AMT  /* 채권잔액 */
			</#if> 
			<#if schSysClass?has_content>
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END  + NVL(A.CREDIT_OVER_AMOUNT, 0) - NVL(C.RMN_AMT,0) + NVL(C2.PRE_AMT1,0) + NVL(C2.PRE_AMT2,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) AS CREDIT_RMN_AMT  /* 가용여신 */
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END  - NVL(C.RMN_AMT,0) + NVL(C2.PRE_AMT1,0) + NVL(C2.PRE_AMT2,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) 
			     + NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(TO_DATE(:schNeedDate),'YYYYMMDD') THEN NVL(A.CREDIT_OVER_AMOUNT,0) ELSE 0 END,0) AS CREDIT_AVAIL_AMT /* 실주문가능금액 */
			<#else> 
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END + NVL(A.CREDIT_OVER_AMOUNT, 0) - NVL(C.RMN_AMT,0) + NVL(C1.PRE_AMT,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) AS CREDIT_RMN_AMT  /* 가용여신 */
     		, CASE WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') 
			  THEN NVL(A.CREDIT_AMOUNT,0) ELSE 0 END  - NVL(C.RMN_AMT,0) + NVL(C1.PRE_AMT,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) 
			     + NVL(CASE WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(SYSDATE,'YYYYMMDD') THEN NVL(A.CREDIT_OVER_AMOUNT,0) ELSE 0 END,0) AS CREDIT_AVAIL_AMT /* 실주문가능금액 */
			</#if> 
     		, NVL(C.L_BILL_DATE,'00000000') AS L_BILL_DATE											/* 최장 미입금된 외상매출발생일 */
     		, DECODE(C.L_BILL_DATE,NULL,-1,TO_DATE(:schNeedDate,'YYYYMMDD') - TO_DATE(C.L_BILL_DATE,'YYYYMMDD')) AS LAST_TURN_CNT 
     		, A.CREDIT_TURN_CONTROL_YN				/* 'Y'이면 여신회전일통제, 'N'이면 '통제안함' */
     		, A.CREDIT_AMOUNT_CONTROL_YN		/* 'Y'이면 여신금액통제, 'N'이면 '통제안함' */
     		, A.CREDIT_CONTROL_YN						/* 여신통제여부 */
		FROM FMS_UPJANG A	LEFT JOIN (
														SELECT
															  S.UPJANG
															, MIN(S.OCCUR_DATE) AS L_BILL_DATE
															, SUM(NVL(S.AR_AMT,0) - NVL(S.RECEIVE_AMT,0)) AS RMN_AMT
														FROM
																(
																/* C.외상잔액정보 */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.AR_AMT,0) AS AR_AMT  
																	, (SELECT NVL(SUM(D.RECEIVE_AMT),0) FROM SLA_AR_RECEIVE_DETAIL D WHERE D.RECD_STATUS  = 'L' 
																																								  			 AND D.RECEIVE_DATE <= :schNeedDate	/* 조건 : 입고예정일 */															
																																								  			 AND D.AR_NUM = M.AR_NUM) AS RECEIVE_AMT
																FROM SLA_AR_MST M 
																WHERE 1 = 1
																<#if schSysClass?has_content>
																AND M.SYS_CLASS = :schSysClass
						  										<#else> 
																AND M.SYS_CLASS = '13'				/* 조건 : 식재영업 */
							  									</#if> 
																AND    M.RECD_STATUS = 'L'
																AND    M.OCCUR_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																	<#if sUpjangList?has_content>
													   					AND M.UPJANG_CD IN ${sUpjangList}
					  									  			<#else> 
																		AND M.UPJANG_CD = :schMainUpjang	/* 조건 : 본사업장 */
							  										</#if> 
					  											<#else> 
																	AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if> 
																) S	
															GROUP BY S.UPJANG																												
															--HAVING SUM(NVL(S.AR_AMT,0) - NVL(S.RECEIVE_AMT,0)) > 0	/*  채권잔액이 있는 자료 기준 */
					       								) C ON A.UPJANG = C.UPJANG

										LEFT JOIN (
														SELECT
															  S.UPJANG
															, MIN(S.OCCUR_DATE) AS L_BILL_DATE
															, SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) AS PRE_AMT
														FROM
																(										
																/* C1.선수잔액정보 */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.OCCUR_AMT,0) AS OCCUR_AMT
																	, (SELECT NVL(SUM(D.APPLY_AMT),0) FROM SLA_ADVANCE_ALT_DETAIL D WHERE D.RECD_STATUS  = 'L' 
										                 																											   		   AND D.ALT_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
										                 																											   		   AND D.ADVANCE_NUM = M.ADVANCE_NUM) AS APPLY_AMT
																FROM SLA_ADVANCE_MST M 
																WHERE 1 = 1
																<#if schSysClass?has_content>
																AND M.SYS_CLASS = :schSysClass
						  										<#else> 
																AND M.SYS_CLASS = '13'				/* 조건 : 식재영업 */
							  									</#if> 
																AND    M.RECD_STATUS = 'L'
																AND    M.OCCUR_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																	<#if sUpjangList?has_content>
													   					AND M.UPJANG_CD IN ${sUpjangList}
					  									  			<#else> 
																		AND M.UPJANG_CD = :schMainUpjang	/* 조건 : 본사업장 */
							  										</#if> 
					  											<#else> 
																	AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if> 
							  									) S
							  									GROUP BY S.UPJANG 
																--HAVING  SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) > 0	/*  선수잔액이 있는 자료 기준 */
					      							)	C1 ON A.UPJANG = C1.UPJANG
					      			
									<#if schSysClass?has_content>
					      			LEFT JOIN (				
									 /* C2. 선수잔액정보 (14: 식도매) */
									 		SELECT
									 			  X.UPJANG
									 			, SUM(X.PRE_AMT1) AS PRE_AMT1
									 			, SUM(X.PRE_AMT2) AS PRE_AMT2
											FROM
													(									 
														SELECT
															  S.UPJANG
															, SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) AS PRE_AMT1
															, 0 AS PRE_AMT2
														FROM
																(										
																/* C2.선수잔액정보 : F07(계약이행예치금) */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.OCCUR_AMT,0) AS OCCUR_AMT
																	, (SELECT NVL(SUM(D.APPLY_AMT),0) FROM SLA_ADVANCE_ALT_DETAIL D WHERE D.RECD_STATUS  = 'L' 
										                 																											   		   AND D.ALT_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
										                 																											   		   AND D.ADVANCE_NUM = M.ADVANCE_NUM) AS APPLY_AMT
																FROM SLA_ADVANCE_MST M 
																WHERE 1 = 1
																--AND M.SYS_CLASS = :schSysClass
																AND    M.RECD_STATUS = 'L'
																AND    M.ADVANCE_TYPE_CD = 'F07'			/* 조건 : 선수금-계약이행예치금 */
																AND    M.OCCUR_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																AND    M.UPJANG_CD = :schMainUpjang	/* 조건 : 본사업장 */
					  											<#else> 
																AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if>
							  									) S
							  									GROUP BY S.UPJANG 
																--HAVING  SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) > 0	/*  선수잔액이 있는 자료 기준 */
	
														UNION ALL
														
														SELECT
															  S.UPJANG
															, 0 AS PRE_AMT1  
															, SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) AS PRE_AMT2
														FROM
																(										
																/* C2.선수잔액정보 : F07(계약이행예치금)  제외 */
																SELECT 
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	, M.OCCUR_DATE
																	, NVL(M.OCCUR_AMT,0) AS OCCUR_AMT
																	, (SELECT NVL(SUM(D.APPLY_AMT),0) FROM SLA_ADVANCE_ALT_DETAIL D WHERE D.RECD_STATUS  = 'L' 
										                 																											   		   AND D.ALT_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
										                 																											   		   AND D.ADVANCE_NUM = M.ADVANCE_NUM) AS APPLY_AMT
																FROM SLA_ADVANCE_MST M 
																WHERE 1 = 1
																--AND M.SYS_CLASS = :schSysClass
																AND    M.RECD_STATUS = 'L'
																AND    M.ADVANCE_TYPE_CD NOT IN ('F07')	/* 조건 : 선수금-계약이행예치금 제외 */
																AND    M.OCCUR_DATE <= :schNeedDate		/* 조건 : 입고예정일 */
																<#if schHeadCreditYn == 'Y'>
																AND    M.UPJANG_CD = :schMainUpjang		/* 조건 : 본사업장 */
					  											<#else> 
																AND    M.UPJANG_CD = :schUpjang	 			/* 조건 : 업장 */
							  									</#if>
							  									) S
							  									GROUP BY S.UPJANG 
																--HAVING  SUM(NVL(S.OCCUR_AMT,0) - NVL(S.APPLY_AMT,0)) > 0	/*  선수잔액이 있는 자료 기준 */
														) X
														GROUP BY X.UPJANG
					      							)	C2 ON A.UPJANG = C2.UPJANG
  									</#if> 
					      							
										LEFT JOIN (
														/* D.당월 미매출마감된 검수금액 */ 
														SELECT
															  X.UPJANG
															, SUM(X.TR_AMT) AS TR_AMT														
														FROM 
																(
																/* D2. 식재매출집계(FMS_SALES)의 최종마감일자 이후에서 기준일자 까지 */
																SELECT
																	/*+ PUSH_PRED(A) */
																	<#if schHeadCreditYn == 'Y'>
							  										 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  										<#else> 
							  										 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  										</#if> 
																	--,  SUM(ROUND(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * DECODE(A.TAX_CODE,'100',1.1,1) * A.SALE_AMOUNT)) AS TR_AMT
																	,  SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I',1,-1) * ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))) AS TR_AMT 
																FROM (                                                                                                                                                                                                                              
                                                SELECT DT.MG_NO AS TRANS_ID,  /* 자재수불번호 */                                                                                                                                                                               
                                                       CASE                                                                                                                                                                                                                    
                                                         WHEN SUBSTR(DT.MOVEMENT_TYP,0,2)='25' THEN 'FO'                                                                                                                                                                       
                                                         WHEN DT.PROC_TYP_CD IS NULL AND DT.IVT_INSP_NO IS NOT NULL THEN '재고조정'                                                                                                                                            
                                                         WHEN DT.PROC_TYP_CD IS NULL AND DT.IVT_INSP_NO IS NULL THEN 'INV'                                                                                                                                                     
                                                         ELSE 'PO'                                                                                                                                                                                                             
                                                       END AS SOURCE_TYPE,  /* FO, PO, INV, 재고조정 */                                                                                                                                                                        
                                                       SL.CUST_GR_DATE AS TRANS_DATE,  /* 판매일자 */                                                                                                                                                                          
                                                       DT.MG_DATE AS MG_DATE,  /* 수불일자*/                                                                                                                                                                                   
                                                       CASE                                                                                                                                                                                                                    
                                                         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NULL THEN 'O002'         /* 재고이동 - 이동출고   */                                                                                                          
                                                         WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NOT NULL THEN 'I002'      /*재고이동 - 이동입고  */                                                                                                           
                                                         WHEN DT.MOVEMENT_TYP = '251'OR DT.MOVEMENT_TYP = '252' THEN 'O001'      /* POS 매출 유형  */                                                                                                                          
                                                         WHEN DT.MOVEMENT_TYP = '701' OR DT.MOVEMENT_TYP = '702' THEN 'O004'      /* 재고실사 */                                                                                                                               
                                                         ELSE 'I001'                                                                                                                                                                                                           
                                                       END AS TRANS_TYPE,                                                                                                                                                                                                      
                                                      CASE                                                                                                                                                                                                                     
                                                         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)                                                                               
                                                         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)                                                                                     
                                                         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)                                                                                             
                                                         WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)                                                                                                   
                                                       END AS TRANS_QTY,             /* 수량 */                                                                                                                                                                                
                                                       SL.SHOP_CD AS TRANS_UPJANG,    /* 업장 코드 */                                                                                                                                                                           
                                                       SL.CUST_WH_CD AS SUBINV_CODE,     /* 창고코드*/                                                                                                                                                                         
                                                       --DECODE(MT.ACC_TAX_CD,'1','100','3','210','220') AS TAX_CODE,             /* 과면세 코드 */
                                                       CASE WHEN PO.DUTY_FREE_YN ='1' THEN '100'     
                                                            WHEN PO.DUTY_FREE_YN ='3' THEN '210'     
                                                            WHEN PO.DUTY_FREE_YN ='2' THEN '220'     
                                                        END AS TAX_CODE, -- 과세구분코드                                                                                                                              
                                                       SL.SAL_PRICE AS SALE_PRICE                               /* 외부판매단가 */                                                                                                                                             
                                                 FROM EPROCUSR.ESIMGDT DT,                                               /* 수불상세 */                                                                                                                                        
                                                      EPROCUSR.ESPPODT PO,                                              /* 발주 상세 */                                                                                                                                        
                                                      EPROCUSR.ESISALP SL                                               /* 판매단가 */                                                                                                                                         
                                                WHERE 1=1
                                                  AND DT.MOVEMENT_TYP NOT IN ('561','562','998','999','901','902','801','802','111','112','211','212')   /* 기초 , 기말 재고,배송입출고, 직송 가상입출고  제외 */                                                              
                                                  AND DT.SYS_ID = PO.SYS_ID                                                                                                                                                                                                 
                                                  AND DT.COMP_CD = PO.COMP_CD                                                                                                                                                                                               
                                                  AND DT.PO_NO = PO.PO_NO                                                                                                                                                                                                   
                                                  AND DT.PO_LNO = PO.PO_LNO                                                                                                                                                                                                 
                                                  AND DT.SYS_ID = SL.SYS_ID                                                                                                                                                                                                    
                                                  AND DT.COMP_CD = SL.COMP_CD                                                                                                                                                                                                  
                                                  AND DT.MG_NO = SL.MG_NO                                                                                                                                                                                                      
                                                  AND DT.STS <> 'D'
                                                  <#if schHeadCreditYn == 'Y'>
							  						AND SL.SHOP_CD IN (SELECT UPJANG FROM FMS_UPJANG WHERE MAIN_UPJANG = :schMainUpjang AND HEAD_CREDIT_YN = 'Y' AND USE_YN = 'Y')
							  					  <#else> 
							  						AND SL.SHOP_CD = :schUpjang
							  					  </#if>                                                                                                                                                                                                             
                                                  AND DT.MG_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate, 'YYYYMMDD'), -1), 'YYYYMM') || '01' AND :schNeedDate                                                                                                                 
                                                UNION ALL                                                                                                                                                                                                                      
                                                   SELECT B.TRANS_ID,                                                                                                                                                                                                          
                                                          B.SOURCE_TYPE ,                                                                                                                                                                                                      
                                                          B.TRANS_DATE,                                                                                                                                                                                                        
                                                          B.TRANS_DATE AS MG_DATE,                                                                                                                                                                                             
                                                          B.TRANS_TYPE,                                                                                                                                                                                                        
                                                          B.TRANS_QTY,                                                                                                                                                                                                         
                                                          TO_CHAR (B.TRANS_UPJANG) AS TRANS_UPJANG,                                                                                                                                                                            
                                                          B.SUBINV_CODE,                                                                                                                                                                                                       
                                                          B.TAX_CODE,                                                                                                                                                                                                          
                                                          B.SALE_PRICE                                                                                                                                                                                                         
                                                     FROM FMS_TRANSACTION B                                                                                                                                                                                                    
                                                    WHERE 1=1
                                                      <#if schHeadCreditYn == 'Y'>
							  							AND B.TRANS_UPJANG IN (SELECT UPJANG FROM FMS_UPJANG WHERE MAIN_UPJANG = :schMainUpjang AND HEAD_CREDIT_YN = 'Y' AND USE_YN = 'Y')
							  					  	  <#else> 
							  							AND B.TRANS_UPJANG = :schUpjang
							  					  	  </#if>
                                                      AND B.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate, 'YYYYMMDD'), -1), 'YYYYMM') || '01' AND :schNeedDate                                                                                                           
                                                ) A , FMS_UPJANG B ,(					SELECT 
							  																										UPJANG
																																 ,  MAX(SALE_DATE) AS SALE_DATE
						 																										FROM   FMS_SALES
						 																										WHERE  SALE_DATE <= :schNeedDate	  /* 조건 : 입고예정일 */
																																	AND  TRANS_YN = 'Y'		/* 영업회계 마감대상 */
						 																										GROUP BY UPJANG
																															) C 

																WHERE    A.MG_DATE <= :schNeedDate	/* 조건 : 입고예정일 */
																AND A.TRANS_UPJANG = C.UPJANG(+)
																<#if schHeadCreditYn == 'Y'>
																	AND B.HEAD_CREDIT_YN = 'Y'
																 <#else> 
																	AND B.HEAD_CREDIT_YN = 'N'
																 </#if> 
																	AND A.TRANS_UPJANG = B.UPJANG
																	
																<#if schHeadCreditYn == 'Y'>
																	<#if sUpjangList?has_content>
																	AND B.UPJANG IN ${sUpjangList}
																	<#else>
																	AND    B.UPJANG IN (SELECT UPJANG
										    										   				FROM FMS_UPJANG
										    										   				WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
										   															)
										   							 </#if>
					  											<#else> 
																AND    B.UPJANG = :schUpjang	 			/* 조건 : 업장 */
							  									</#if> 
																/* 업장별 최종마감일자 이후 ~ 기준일자까지의 집계 : 만약 마감정보가 없으면 기준일자 대비 1개월 전부터 대입 */
																--AND    A.TRANS_DATE >= GREATEST(TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate	, 'YYYYMMDD'), -1), 'YYYYMMDD'), NVL(TO_CHAR(TO_DATE(C.SALE_DATE(+), 'YYYYMMDD')+1, 'YYYYMMDD'),' '))
																AND      A.MG_DATE >= DECODE(C.SALE_DATE, NULL, GREATEST(TO_CHAR(ADD_MONTHS(TO_DATE(:schNeedDate, 'YYYYMMDD'), -1), 'YYYYMM') || '01', NVL(TO_CHAR(TO_DATE(C.SALE_DATE, 'YYYYMMDD')+1, 'YYYYMMDD'),' ')),  TO_CHAR(TO_DATE(C.SALE_DATE, 'YYYYMMDD')+1, 'YYYYMMDD')) 		
																AND    (A.TRANS_TYPE = 'I001' OR (A.TRANS_TYPE LIKE '_002' AND A.SOURCE_TYPE = 'PO')) 
							  									) X	
													WHERE 1 = 1			
													<#if schHeadCreditYn == 'Y'>
													AND (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schMainUpjang) = 'Y' /* 조건 : 본사업장 */
					  							   <#else> 
													AND (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schUpjang) = 'Y' 		 /* 조건 : 업장 */
							  					   </#if> 
													GROUP BY X.UPJANG
													) D ON A.UPJANG = D.UPJANG	
										LEFT JOIN (
														/* E.당월 미검수 발주금액  */
														/* PW(발주진행), PC(발주완료), DL(배송중) 만 집계 */
														/* CENTER_DELI_QTY(센터입고수량), DIRECT_DELI_QTY(직송수량), DELIVERED_QTY(업장입고수량-센터출고), UNDELIVERED_QTY(센터미입고수량) */
														SELECT
															/*+ PUSH_PRED(A) */
															<#if schHeadCreditYn == 'Y'>
							  								 :schMainUpjang AS UPJANG						/* 조건 : 본사업장 */
							  								<#else> 
							  								 :schUpjang AS UPJANG							/* 조건 : 업장 */
							  								</#if> 
															, SUM(ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND((A.CENTER_DELI_QTY + A.DIRECT_DELI_QTY - A.DELIVERED_QTY - A.UNDELIVERED_QTY) * A.SALE_PRICE))) AS PO_AMT 
														FROM (
														                                                                                                                                    
                        SELECT                                                                                                                       
                               SAL.SHOP_CD              AS RC_UPJANG   -- 입고업장 코드                                                              
                             , CASE                                                                                                                  
                                 WHEN PODT.DUTY_FREE_YN ='1' THEN '100'                                                                              
                                 WHEN PODT.DUTY_FREE_YN ='3' THEN '210'                                                                              
                                 WHEN PODT.DUTY_FREE_YN ='2' THEN '220'                                                                              
                               END  AS TAX_CODE   -- 과세구분코드                                                                                    
                             , PODT.PR_QTY              AS PR_QTY      -- 신청 수량                                                                  
                             , PODT.ITEM_QTY            AS PO_QTY      -- 발수 수량                                                                  
                             , CASE WHEN PODT.PROC_TYP_CD IN('DC', 'TC') THEN PODT.ITEM_QTY ELSE 0 END  AS CENTER_DELI_QTY  -- 센터입고수량          
                             , 0  AS CENTER_UNDELI_QTY             -- 센터미입고 수량                                                                
                             , CASE PODT.PROC_TYP_CD WHEN 'VC' THEN PODT.ITEM_QTY ELSE 0 END  AS DIRECT_DELI_QTY  -- 직송 수량                       
                             , CASE PODT.PROC_TYP_CD WHEN 'VC' THEN NVL(PODT.GR_QTY,0) ELSE NVL(PODT.GR_QTY_WMS,0) END  AS DELIVERED_QTY    --업장입고수량(센터출고) 
                            , CASE                                                                                                                   
                                 WHEN PODT.PO_COMP_YN='Y' OR PODT.GR_COMP_YN='Y' THEN NVL(PODT.ITEM_QTY,0) - NVL(PODT.GR_QTY,0) -- 입고완료          
                                 ELSE 0                                                                                                              
                               END AS UNDELIVERED_QTY -- 감량수량                                                                                    
                             , PODT.RTN_QTY AS RETURNED_QTY -- 반품수량                                                                              
                             , SAL.CUST_GR_DATE                AS NEED_DATE -- 입고희망일자                                                          
                             , NVL(CASE WHEN POHD.PO_TYP = 'BP' THEN                                                                                 
                                     CASE                                                                                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'T'         THEN 'RW' --통합영업에서 뷰 불가                     
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'P'         THEN 'PW'                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS IN ('R', 'W') THEN 'PD'                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'B'         THEN 'PD'                                            
                                       WHEN PODT.GR_COMP_YN='Y' AND POHD.APRV_STS = 'B'         THEN 'GC'                                            
                                       WHEN PODT.GR_COMP_YN='Y' AND POHD.APRV_STS IN ('C', 'K') THEN 'GC'                                            
                                     END                                                                                                             
                                  ELSE DECODE(PODT.GR_COMP_YN, 'Y', 'GC', NVL(PRDT.PR_PROG_STS,'PC'))                                                
                               END,'PC') AS LINE_STATUS  -- 라인 상태 코드                                                                           
                             , NVL(SAL.SAL_PRICE,0)      AS SALE_PRICE -- 판매 단가                                                                  
                          FROM EPROCUSR.ESPPOHD POHD   -- PO 헤더                                                                                    
                             , EPROCUSR.ESPPODT PODT   -- PO 상세(품목)                                                                              
                             , EPROCUSR.ESMMTGL MTGL   -- 자재마스터                                                                                 
                             , EPROCUSR.ESPPODTSAL SAL -- 판매단가정보[통합영업]                                                                     
                             , EPROCUSR.ESPPRDT PRDT   -- PR 상세(품목)                                                                              
                         WHERE PODT.SYS_ID  = POHD.SYS_ID(+)                                                                                         
                           AND PODT.COMP_CD = POHD.COMP_CD (+)                                                                                       
                           AND PODT.PO_NO   = POHD.PO_NO(+)                                                                                          
                           AND PODT.SYS_ID  = SAL.SYS_ID(+)                                                                                          
                           AND PODT.COMP_CD = SAL.COMP_CD(+)                                                                                         
                           AND PODT.PO_NO   = SAL.PO_NO(+)                                                                                           
                           AND PODT.PO_LNO  = SAL.PO_LNO(+)                                                                                          
                           AND PODT.SYS_ID  = MTGL.SYS_ID                                                                                            
                           AND PODT.ITEM_CD = MTGL.ITEM_CD                                                                                           
                           AND PODT.PR_NO   = PRDT.PR_NO(+)                                                                                          
                           AND PODT.PR_LNO  = PRDT.PR_LNO(+)                                                                                         
                           AND PODT.SYS_ID  = PRDT.SYS_ID(+)                                                                                         
                           AND PODT.COMP_CD = PRDT.COMP_CD(+)                                                                                        
                           AND PODT.SYS_ID  = '100'                                                                                                  
                           AND PODT.COMP_CD = 'HFC'                                                                                                  
                           AND PODT.SHOP_TYP_CD = '02'                                                                                               
                           AND PODT.STS    <> 'D'                                                                                                    
                           AND POHD.PO_TYP IN ('UP','BP')                                                                                            
                           and SAL.CUST_GR_DATE between to_char(add_months(sysdate,-1),'yyyymm') || '01' and :schNeedDate
                           <#if schHeadCreditYn == 'Y'>
															<#if sUpjangList?has_content>
													   			AND SAL.SHOP_CD IN ${sUpjangList}
					  									  <#else> 
																AND SAL.SHOP_CD IN (SELECT UPJANG
						    									   					FROM FMS_UPJANG
						    									   					WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
						   															)
							  								</#if> 
					  									<#else> 
														AND    SAL.SHOP_CD = :schUpjang	 			/* 조건 : 업장 */
							  							</#if> 
                           and NVL(CASE WHEN POHD.PO_TYP = 'BP' THEN                                                                                 
                                     CASE                                                                                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'T'         THEN 'RW' --통합영업에서 뷰 불가                     
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'P'         THEN 'PW'                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS IN ('R', 'W') THEN 'PD'                                            
                                       WHEN PODT.GR_COMP_YN='N' AND POHD.APRV_STS = 'B'         THEN 'PD'                                            
                                       WHEN PODT.GR_COMP_YN='Y' AND POHD.APRV_STS = 'B'         THEN 'GC'                                            
                                       WHEN PODT.GR_COMP_YN='Y' AND POHD.APRV_STS IN ('C', 'K') THEN 'GC'                                            
                                     END                                                                                                             
                                  ELSE DECODE(PODT.GR_COMP_YN, 'Y', 'GC', NVL(PRDT.PR_PROG_STS,'PC'))                                                
                               END,'PC') IN ('PW', 'PC', 'DL')                                                                                       
														) A  INNER JOIN FMS_UPJANG B  ON 1 = 1
																																	<#if schHeadCreditYn == 'Y'>
																 																	AND B.HEAD_CREDIT_YN = 'Y'
																 																	 <#else> 
																 																	AND B.HEAD_CREDIT_YN = 'N'
																 																	 </#if> 
																 																	AND A.RC_UPJANG = B.UPJANG
														WHERE A.NEED_DATE <= :schNeedDate	  /* 조건 : 입고예정일 */
														<#if schHeadCreditYn == 'Y'>
															<#if sUpjangList?has_content>
													   			AND B.UPJANG IN ${sUpjangList}
					  									  <#else> 
																AND    B.UPJANG IN (SELECT UPJANG
										    									   					FROM FMS_UPJANG
										    									   					WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
										   															)
							  								</#if> 
					  									<#else> 
														AND    B.UPJANG = :schUpjang	 			/* 조건 : 업장 */
							  							</#if> 
														AND    A.LINE_STATUS IN ('PW', 'PC', 'DL')
					    					) E ON A.UPJANG = E.UPJANG
										LEFT JOIN (
													/* F.당월 미발주 주문금액 */
												SELECT
													  <#if schHeadCreditYn == 'Y'>
							 						  :schMainUpjang AS UPJANG					/* 조건 : 본사업장 */
							  						  <#else> 
							  						   :schUpjang AS UPJANG							/* 조건 : 업장 */
							  						  </#if> 
													, SUM(ROUND(DECODE(A.TAX_CODE,'100',1.1,1) * ROUND(A.PR_QTY * A.SALE_PRICE))) AS PR_AMT 
												FROM SO_PR A  INNER JOIN FMS_UPJANG B  ON 1 = 1
																																	<#if schHeadCreditYn == 'Y'>
																 																	AND B.HEAD_CREDIT_YN = 'Y'
																 																	 <#else> 
																 																	AND B.HEAD_CREDIT_YN = 'N'
																 																	 </#if> 
																 																	AND A.RC_UPJANG = B.UPJANG
												WHERE A.NEED_DATE <= :schNeedDate	  /* 조건 : 입고예정일 */
												AND A.PO_TYPE IN ('07','29', '97')
												AND A.PO_TYPE <> (
																	SELECT DECODE(COUNT(1), 1, '-1', '97')
																	FROM SCC_COMMON_CODE
																	WHERE GROUP_CODE = 'CS_MASTER_USER'
																	AND USE_YN = 'Y'
																	AND CODE = :loginSabun
															   )
				   
												<#if schHeadCreditYn == 'Y'>
													<#if sUpjangList?has_content>
											   			AND A.RC_UPJANG IN ${sUpjangList}
											   		<#else>
														AND A.RC_UPJANG IN (SELECT UPJANG
										    									       FROM FMS_UPJANG
										    										   WHERE MAIN_UPJANG = :schMainUpjang	/* 조건 : 본사업장 */
										   												)
							  					    </#if> 
					  							<#else> 
												AND    A.RC_UPJANG = :schUpjang	 			/* 조건 : 업장 */
							  					</#if> 
												AND    A.LINE_STATUS IN ('001') 			/* 진행상태 : 001(신청저장), 007(결의승인) */
												--AND    A.SO_STATUS IN ('001') 			/* 진행상태 : 001(신청저장) */
												<#if schHeadCreditYn == 'Y'>
												AND    (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schMainUpjang) = 'Y'	/* 조건 : 본사업장 */
					  							<#else> 
												AND (SELECT CREDIT_AMOUNT_CONTROL_YN FROM FMS_UPJANG WHERE UPJANG =  :schUpjang) = 'Y' 		 		/* 조건 : 업장 */
							  					</#if> 
					      				)	F ON A.UPJANG = F.UPJANG
		<#if schHeadCreditYn == 'Y'>
		WHERE A.UPJANG = :schMainUpjang		/* 조건 : 본사업장 */
		<#else> 
		WHERE A.UPJANG = :schUpjang				/* 조건 : 업장 */
		</#if> 
		AND    A.CREDIT_CONTROL_YN = 'Y' 
		AND   (A.CREDIT_TURN_CONTROL_YN = 'Y' OR A.CREDIT_AMOUNT_CONTROL_YN = 'Y')  
		]]>
	</statement>
	
	<statement name="selectCreInfoTest" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectCreInfo */
		<![CDATA[
WITH 
SALE_WITH AS (SELECT B.MAIN_UPJANG, B.UPJANG, MAX(NVL(TO_CHAR(TO_DATE(A.SALE_DATE, 'YYYYMMDD')+1, 'YYYYMMDD'), GREATEST(TO_CHAR(ADD_MONTHS(B.CDATE, -1), 'YYYYMM')||'01', TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')||'01'))) AS SALE_DATE     
                FROM FMS_SALES A, FMS_UPJANG B     
 		       WHERE 1=1
                 AND A.SALE_DATE(+) < :schNeedDate     
                 AND A.TRANS_YN(+) = 'Y'     
                 AND A.UPJANG(+) = B.UPJANG     
                 AND B.MAIN_UPJANG = :schMainUpjang       --본사코드로 가져온다. 채권은 본사기준으로 집계하기 때문
                 AND B.HEAD_CREDIT_YN = :schHeadCreditYn        --통합여부 가져온다.
                 AND B.USE_YN = 'Y'     
                 --AND B.PART_SALES_SABUN = '201501271'     
               GROUP BY B.MAIN_UPJANG, B.UPJANG),   --본사, 업장으로 그루핑
FMS_UPJANG_BB_WITH AS (SELECT MAIN_UPJANG, UPJANG
                         FROM FMS_UPJANG     
                        WHERE 1=1     
                          AND MAIN_UPJANG = :schMainUpjang     
                          AND HEAD_CREDIT_YN = :schHeadCreditYn),
                          --AND PART_SALES_SABUN = '201501271'),
MAX_NEED_DATE_WITH AS (SELECT RC_UPJANG, MAX(NEED_DATE) AS NEED_DATE
                         FROM SO_PR
                        WHERE 1=1
                          AND NEED_DATE BETWEEN :schNeedDate  AND GREATEST(TO_CHAR(SYSDATE+15,'YYYYMMDD'), :schNeedDate) 	
                          AND SUBINV_CODE LIKE 'S1%' AND LINE_STATUS NOT IN ('003', '005','999') 	
                          AND RC_UPJANG IN (SELECT UPJANG FROM FMS_UPJANG_BB_WITH) 	
                        GROUP BY RC_UPJANG)
SELECT      
  	     DECODE(A.MAIN_UPJANG, A.UPJANG, 0, 1) AS BON_GB,		
         A.MAIN_UPJANG ,     
         A.UPJANG ,     
         DECODE(A.MAIN_UPJANG, A.UPJANG, A.UPJANGNM_DISP, '	- '||A.UPJANGNM_DISP) AS UPJANGNM_DISP ,     
         CASE      
  			WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND    NVL(A.CREDIT_END,'99999999') THEN NVL(A.CREDIT_AMOUNT,0)     
                ELSE 0     
         END AS CREDIT_AMOUNT,		-- 여신금액      
         CASE     
            WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND    NVL(A.CREDIT_END,'99999999') THEN NVL(A.CREDIT_AMOUNT,0)     
                ELSE 0     
         END AS CREDIT_EXT_AMOUNT,		-- 여신연장금액-여신연장금액 삭제      
         CASE      
  			WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND NVL(A.CREDIT_END,'99999999') THEN NVL(A.CREDIT_AMOUNT,0)     
  			ELSE 0     
         END AS CREDIT_AMOUNT_TOT,		-- 총 여신책정금액-여신연장금액 삭제      
         NVL( CASE      
			WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(SYSDATE,'YYYYMMDD') THEN A.CREDIT_OVER_AMOUNT     
  				ELSE 0     
  			END,0) AS CREDIT_OVER_AMOUNT,		-- 여신한도초과액      
         CASE      
  			WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(SYSDATE,'YYYYMMDD') THEN A.CREDIT_OVER_END     
              ELSE ''     
         END AS CREDIT_OVER_END,		-- 한도초과종료     
         NVL(A.CREDIT_TURN_DAYS,0) AS CREDIT_TURN_DAYS,		-- 여신회전일     
         NVL(A.CREDIT_TURN_DAYS,0) AS CREDIT_EXT_DAYS,		-- 총 여신회전일 : 여신연장일 삭제     
         NVL(A.CREDIT_TURN_DAYS,0) AS CREDIT_TURN_DAYS_TOT , DECODE(C.L_BILL_DATE,NULL,-1,TO_DATE(20161126,'YYYYMMDD') - TO_DATE(C.L_BILL_DATE,'YYYYMMDD')) AS LAST_TURN_CNT,     
         NVL(F.PR_AMT,0) AS PR_AMT,		-- 매입예정(신청)      
         NVL(E.PO_AMT,0) AS PO_AMT,		-- 매입예정(발주)     
         NVL(D.TR_AMT,0) AS TR_AMT,		-- 매입확정     
         NVL(C0.RMN_AMT,0) AS RMN_AMT,		-- 외상매출잔액     
         NVL(C1.PRE_AMT,0) AS PRE_AMT,		-- 선수잔액     
         NVL(C0.RMN_AMT,0) - NVL(C1.PRE_AMT,0) + NVL(D.TR_AMT,0) + NVL(E.PO_AMT,0) + NVL(F.PR_AMT,0) AS BOND_AMT,		-- 채권잔액     
         CASE     
            WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND    NVL(A.CREDIT_END,'99999999') THEN NVL(A.CREDIT_AMOUNT,0)     
                ELSE 0     
         END - NVL(C0.RMN_AMT,0) + NVL(C1.PRE_AMT,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) AS CREDIT_RMN_AMT,		-- 가용여신     
         CASE     
            WHEN :schNeedDate BETWEEN NVL(A.CREDIT_START,'00000000') AND    NVL(A.CREDIT_END,'99999999') THEN NVL(A.CREDIT_AMOUNT,0)     
                ELSE 0     
         END - NVL(C0.RMN_AMT,0) + NVL(C1.PRE_AMT,0) - NVL(D.TR_AMT,0) - NVL(E.PO_AMT,0) - NVL(F.PR_AMT,0) + NVL(     
  		 CASE
            WHEN NVL(A.CREDIT_OVER_END,'99999999') >= TO_CHAR(SYSDATE,'YYYYMMDD')     
  				  THEN A.CREDIT_OVER_AMOUNT     
  				  ELSE 0     
  		 END,0) AS CREDIT_AVAIL_AMT,		 -- 실주문가능금액(여기는 초과여신 계산도 포함됨)
         NVL(C.L_BILL_DATE,'00000000') AS L_BILL_DATE,		-- 최장 미입금된 외상매출발생일     
         DECODE(C.L_BILL_DATE,NULL, '채권없음', TO_CHAR(TO_DATE(C.L_BILL_DATE,'YYYYMMDD'),'YYYY"년"MM"월"DD"일"')) AS L_BILL_DATE_DISP,		-- 최장 미입금된 외상매출발생일     
         A.HEAD_CREDIT_YN,		-- 통합관리여부     
         A.CREDIT_CONTROL_YN,		-- 여신통제여부     
         A.CREDIT_TURN_CONTROL_YN,		-- 'Y'이면 여신회전일통제, 'N'이면 '통제안함'     
         A.CREDIT_AMOUNT_CONTROL_YN,		-- 'Y'이면 여신금액통제, 'N'이면 '통제안함'     
         -- SC_CRYPTO_FUN('DEC', A.ACNTCD_ENC , '3') AS ACNTCD,		-- 계좌정보     
         DECODE(A.CREDIT_CONTROL_YN||A.CREDIT_TURN_CONTROL_YN||A.CREDIT_AMOUNT_CONTROL_YN ,'YYY', '금액+회전일','YYN','회전일통제','YNY','금액통제','무통제') AS CREDIT_CONTROL_DESC,		 -- 통제구분     
         A.CREDIT_START,		-- 여신부여일     
         A.CREDIT_END			-- 여신종료일     
  FROM   FMS_UPJANG A,     
         --FMS_UPJANG A1     
         /************************************************************************     
         C.외상잔액정보     
         **************************************************************************/     
         --,     
         (SELECT  B.MAIN_UPJANG ,     
                  MIN(M.OCCUR_DATE)                         AS L_BILL_DATE ,     
                  SUM(NVL(M.AR_AMT,0)-NVL(D.RECEIVE_AMT,0)) AS RMN_AMT     
         FROM     SLA_AR_MST M,     
                  SLA_AR_RECEIVE_DETAIL D,     
                  FMS_UPJANG B     
         WHERE    M.SYS_CLASS     = '13'     
         AND      M.RECD_STATUS   = 'L'     
         AND      D.RECEIVE_DATE <= :schNeedDate		-- 조건 : 입고예정일     
         AND      M.AR_NUM      = D.AR_NUM     
         AND      D.RECD_STATUS = 'L'     
         AND      M.OCCUR_DATE <= :schNeedDate		-- 조건 : 입고예정일      
         --AND      B.HEAD_CREDIT_YN = 'Y'     
         AND      M.UPJANG_CD = B.UPJANG     
         AND      NVL(M.AR_AMT,0) - NVL(D.RECEIVE_AMT,0) > 0		--  채권잔액이 있는 자료 기준     
         AND      M.UPJANG_CD IN (SELECT UPJANG FROM FMS_UPJANG_BB_WITH)
         GROUP BY B.MAIN_UPJANG     
         )     
         C     
         /************************************************************************     
         C0.채권잔액정보     
         **************************************************************************/     
         ,     
         (SELECT  T.MAIN_UPJANG ,     
                  SUM(NVL(T.AR_AMT,0) - NVL(T.RECEIVE_AMT,0)) AS RMN_AMT     
         FROM     (SELECT B.MAIN_UPJANG ,     
                          NVL(M.AR_AMT, 0) AS AR_AMT ,     
                          (SELECT NVL(SUM(D.RECEIVE_AMT),0)     
                          FROM    SLA_AR_RECEIVE_DETAIL D     
                          WHERE   D.RECD_STATUS   = 'L'     
                          AND     D.RECEIVE_DATE <= :schNeedDate     
                          AND     D.AR_NUM        = M.AR_NUM     
                          )     
                          AS RECEIVE_AMT     
                  FROM    SLA_AR_MST M,     
                          FMS_UPJANG B     
                  WHERE   M.SYS_CLASS      = '13'     
                  AND     M.RECD_STATUS    = 'L'     
                  AND     M.OCCUR_DATE    <= :schNeedDate     
                  --AND     B.HEAD_CREDIT_YN = 'Y'     
                  AND     M.UPJANG_CD      = B.UPJANG     
                  AND     M.UPJANG_CD IN (SELECT UPJANG FROM FMS_UPJANG_BB_WITH)
                  )     
                  T     
         GROUP BY T.MAIN_UPJANG     
         )     
         C0     
         /************************************************************************     
         C1.선수잔액정보     
         **************************************************************************/     
         ,     
         (SELECT  T.MAIN_UPJANG ,     
                  SUM(NVL(T.OCCUR_AMT,0) - NVL(T.APPLY_AMT,0)) AS PRE_AMT     
         FROM     (SELECT B.MAIN_UPJANG ,     
                          NVL(M.OCCUR_AMT, 0) AS OCCUR_AMT ,     
                          (SELECT NVL(SUM(D.APPLY_AMT),0)     
                          FROM    SLA_ADVANCE_ALT_DETAIL D     
                          WHERE   D.RECD_STATUS = 'L'     
                          AND     D.ALT_DATE   <= :schNeedDate     
                          AND     D.ADVANCE_NUM = M.ADVANCE_NUM     
                          )     
                          AS APPLY_AMT     
                  FROM    SLA_ADVANCE_MST M,     
                          FMS_UPJANG B     
                  WHERE   M.SYS_CLASS      = '13'     
                  AND     M.RECD_STATUS    = 'L'     
                  AND     M.OCCUR_DATE    <= :schNeedDate     
                  --AND     B.HEAD_CREDIT_YN = 'Y'     
                  AND     M.UPJANG_CD      = B.UPJANG     
                  AND     M.UPJANG_CD IN     
                          (SELECT UPJANG FROM FMS_UPJANG_BB_WITH)
                  )     
                  T     
         GROUP BY T.MAIN_UPJANG     
         )     
         C1     
         /************************************************************************     
         D.당월 미매출마감된 검수금액     
         **************************************************************************/     
         ,     
         (     
  ----       SELECT  X.MAIN_UPJANG ,     
  ----                SUM(X.TR_AMT) AS TR_AMT     
  ----       FROM     (     
         SELECT     
                           /*+ PUSH_PRED(A) */     
                           --A.MAIN_UPJANG ,     
                           A.UPJANG ,     
                           SUM(DECODE(SUBSTR(A.TRANS_TYPE,1,1),'I', 1, -1) * ROUND(DECODE(A.TAX_CODE,'100', 1.1, 1) * ROUND(A.SALE_PRICE * A.TRANS_QTY))) AS TR_AMT     
                  FROM     (SELECT DT.MG_NO AS TRANS_ID,		-- 자재수불번호     
                                   CASE WHEN SUBSTR(DT.MOVEMENT_TYP,0,2)='25' THEN 'FO'     
                                        WHEN DT.PROC_TYP_CD IS NULL AND DT.IVT_INSP_NO IS NOT NULL THEN '재고조정'     
                                        WHEN DT.PROC_TYP_CD    IS NULL AND DT.IVT_INSP_NO IS NULL THEN 'INV'     
                                        ELSE 'PO'     
                                   END AS SOURCE_TYPE,		-- FO, PO, INV, 재고조정     
                                   SL.CUST_GR_DATE AS TRANS_DATE,		-- 판매일자     
                                   DT.MG_DATE AS MG_DATE,		-- 수불일자     
                                   CASE WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NULL     
                                          THEN 'O002'     
                                        WHEN SUBSTR(DT.MOVEMENT_TYP,0,1) = '3' AND DT.GR_QTY IS NOT NULL     
                                          THEN 'I002'     
                                        WHEN DT.MOVEMENT_TYP    = '251' OR DT.MOVEMENT_TYP = '252'     
                                           THEN 'O001'     
                                        WHEN DT.MOVEMENT_TYP    = '701' OR DT.MOVEMENT_TYP = '702'     
                                          THEN 'O004'     
                                        ELSE 'I001'     
                                   END AS TRANS_TYPE,     
                                   CASE WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NOT NULL     
                                          THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY*-1,DT.GR_PURC_QTY*-1)     
                                        WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NOT NULL     
                                          THEN DECODE(DT.GR_QTY,NULL,DT.GI_PURC_QTY,DT.GR_PURC_QTY)     
                                        WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=0 AND DT.PROC_TYP_CD IS NULL     
                                          THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY*-1,DT.GR_QTY*-1)     
                                        WHEN MOD(TO_NUMBER(DT.MOVEMENT_TYP),2)=1 AND DT.PROC_TYP_CD IS NULL     
                                          THEN DECODE(DT.GR_QTY,NULL,DT.GI_QTY,DT.GR_QTY)     
                                   END AS TRANS_QTY,     
                                   SL.SHOP_CD AS TRANS_UPJANG,     
                                   SL.CUST_WH_CD AS SUBINV_CODE,     
                                   CASE WHEN PO.DUTY_FREE_YN ='1' THEN '100'     
                                        WHEN PO.DUTY_FREE_YN ='3' THEN '210'     
                                        WHEN PO.DUTY_FREE_YN ='2' THEN '220'     
                                   END AS TAX_CODE, -- 과세구분코드     
                                   SL.SAL_PRICE AS SALE_PRICE,     
                                   --SALE_WITH.MAIN_UPJANG,		-- 외부판매단가     
                                   SALE_WITH.UPJANG     
                              FROM EPROCUSR.ESIMGDT DT   -- 수불상세     
                                 , EPROCUSR.ESPPODT PO   -- 발주상세     
                                 , EPROCUSR.ESISALP SL   -- 판매단가     
                                 , SALE_WITH SALE_WITH     
                             WHERE  1=1		
			     			   AND DT.SYS_ID  = '100'     
                               AND DT.COMP_CD = 'HFC'     
                               AND PO.BU_CD   = '2000'     
                               AND DT.SYS_ID  = PO.SYS_ID     
                               AND DT.COMP_CD = PO.COMP_CD     
                               AND DT.PO_NO   = PO.PO_NO     
                               AND DT.PO_LNO  = PO.PO_LNO     
                               AND PO.SHOP_TYP_CD = '02'     
  						       AND DT.MOVEMENT_TYP IN ('115','132','147','148','651','652')     
                               AND DT.SYS_ID  = SL.SYS_ID     
                               AND DT.COMP_CD = SL.COMP_CD     
                               AND DT.MG_NO   = SL.MG_NO     
                               AND DT.STS    <> 'D'     
                               AND SL.SHOP_CD IN (SELECT UPJANG FROM FMS_UPJANG_BB_WITH)
                               AND TO_NUMBER(SL.SHOP_CD) = SALE_WITH.UPJANG     
                               AND SL.CUST_GR_DATE BETWEEN SALE_WITH.SALE_DATE AND :schNeedDate     
                             UNION ALL     
                            SELECT B.TRANS_ID,     
                                   B.SOURCE_TYPE ,     
                                   B.TRANS_DATE,     
                                   B.TRANS_DATE AS MG_DATE,     
                                   B.TRANS_TYPE,     
                                   B.TRANS_QTY,     
                                   TO_CHAR (B.TRANS_UPJANG) AS TRANS_UPJANG,     
                                   B.SUBINV_CODE,     
                                   B.TAX_CODE,     
                                   B.SALE_PRICE,     
                                   --SALE_WITH.MAIN_UPJANG     
                                   SALE_WITH.UPJANG     
                              FROM FMS_TRANSACTION B     
                                   ,SALE_WITH SALE_WITH     
                             WHERE B.TRANS_UPJANG= SALE_WITH.UPJANG     
                               AND B.TRANS_DATE BETWEEN SALE_WITH.SALE_DATE AND :schNeedDate     
                               AND B.TRANS_UPJANG IN (SELECT UPJANG FROM FMS_UPJANG_BB_WITH)
                            ) A     
                  WHERE    1=1      
                  AND ( A.TRANS_TYPE='I001' OR (A.TRANS_TYPE LIKE '_002' AND A.SOURCE_TYPE   ='PO'))     
                  GROUP BY A.UPJANG     
         )     
         D     
         /************************************************************************     
         E.당월 미검수 발주금액     
         **************************************************************************/     
         ,     
         ( SELECT  --A.MAIN_UPJANG ,     
  				A.UPJANG ,     
                  SUM(ROUND(DECODE(A.TAX_CODE,'100',     
                                   1.1,     
                                   1)*ROUND((A.CENTER_DELI_QTY+A.DIRECT_DELI_QTY-A.DELIVERED_QTY-A.UNDELIVERED_QTY)*A.SALE_PRICE))) AS PO_AMT     
         FROM     ( SELECT SAL.SHOP_CD AS RC_UPJANG	-- 입고업장 코드     
                         , CASE WHEN PODT.DUTY_FREE_YN ='1' THEN '100'     
                                WHEN PODT.DUTY_FREE_YN ='3' THEN '210'     
                                WHEN PODT.DUTY_FREE_YN ='2' THEN '220'     
                           END AS TAX_CODE	-- 과세구분코드     
                         , PODT.PR_QTY AS PR_QTY	-- 신청 수량     
                         , PODT.ITEM_QTY AS PO_QTY	-- 발수 수량     
                         , CASE WHEN PODT.PROC_TYP_CD IN('DC','TC') THEN PODT.ITEM_QTY     
                             ELSE 0     
                           END AS CENTER_DELI_QTY	-- 센터입고수량     
                         , 0 AS CENTER_UNDELI_QTY -- 센터미입고 수량     
                         , CASE PODT.PROC_TYP_CD WHEN 'VC' THEN PODT.ITEM_QTY     
                             ELSE 0     
                           END AS DIRECT_DELI_QTY -- 직송 수량     
                         , CASE PODT.PROC_TYP_CD WHEN 'VC' THEN NVL(PODT.GR_QTY,0)     
                             ELSE NVL(PODT.GR_QTY_WMS,0)     
                           END AS DELIVERED_QTY --업장입고수량(센터출고)     
                         , CASE WHEN PODT.PO_COMP_YN   ='Y' OR PODT.GR_COMP_YN = 'Y' THEN NVL(PODT.ITEM_QTY,0) - NVL(PODT.GR_QTY,0) -- 입고완료     
                                  ELSE 0     
                           END AS UNDELIVERED_QTY -- 감량수량     
                         , PODT.RTN_QTY AS RETURNED_QTY -- 반품수량     
                         , SAL.CUST_GR_DATE AS NEED_DATE -- 입고희망일자     
                         , NVL(     
                          CASE     
                                  WHEN POHD.PO_TYP = 'BP'     
                                  THEN     
                                          CASE     
                                                  WHEN PODT.GR_COMP_YN  ='N'     
                                                  AND     POHD.APRV_STS = 'T'     
                                                  THEN 'RW' --통합영업에서 뷰 불가     
                                                  WHEN PODT.GR_COMP_YN  ='N'     
                                                  AND     POHD.APRV_STS = 'P'     
                                                  THEN 'PW'     
                                                  WHEN PODT.GR_COMP_YN='N'     
                                                  AND     POHD.APRV_STS IN ('R',     
                                                                            'W')     
                                                  THEN 'PD'     
                                                  WHEN PODT.GR_COMP_YN  ='N'     
                                                  AND     POHD.APRV_STS = 'B'     
                                                  THEN 'PD'     
                                                  WHEN PODT.GR_COMP_YN  ='Y'     
                                                  AND     POHD.APRV_STS = 'B'     
                                                  THEN 'GC'     
                                                  WHEN PODT.GR_COMP_YN='Y'     
                                                  AND     POHD.APRV_STS IN ('C',     
                                                                            'K')     
                                                  THEN 'GC'     
                                          END     
                                  ELSE DECODE(PODT.GR_COMP_YN, 'Y', 'GC', NVL(PRDT.PR_PROG_STS,'PC'))     
                          END,'PC') AS LINE_STATUS -- 라인 상태 코드     
                        , NVL(SAL.SAL_PRICE,0) AS SALE_PRICE -- 판매 단가     
                        --, SALE_WITH.MAIN_UPJANG     
  					  , SALE_WITH.UPJANG     
                     FROM EPROCUSR.ESPPOHD POHD              -- PO 헤더     
                        , EPROCUSR.ESPPODT PODT -- PO 상세(품목)     
                        , EPROCUSR.ESPPODTSAL SAL -- 판매단가정보[통합영업]     
                        , EPROCUSR.ESPPRDT PRDT -- PR 상세(품목)     
                        , SALE_WITH SALE_WITH     
                        , MAX_NEED_DATE_WITH MAX_NEED_DATE_WITH     
                  WHERE   1=1		
					AND		PODT.SYS_ID      = POHD.SYS_ID     
                  AND     PODT.COMP_CD     = POHD.COMP_CD     
                  AND     PODT.PO_NO       = POHD.PO_NO     
                  AND     PODT.SYS_ID      = SAL.SYS_ID     
                  AND     PODT.COMP_CD     = SAL.COMP_CD     
                  AND     PODT.PO_NO       = SAL.PO_NO     
                  AND     PODT.PO_LNO      = SAL.PO_LNO     
                  AND     PODT.PR_NO       = PRDT.PR_NO     
                  AND     PODT.PR_LNO      = PRDT.PR_LNO     
                  AND     PODT.SYS_ID      = PRDT.SYS_ID     
                  AND     PODT.COMP_CD     = PRDT.COMP_CD     
                  AND     PODT.SYS_ID      = '100'     
                  AND     PODT.COMP_CD     = 'HFC'     
                  AND     PODT.SHOP_TYP_CD = '02'     
                  AND     PODT.STS        <> 'D'     
                  AND SAL.CUST_GR_DATE BETWEEN SALE_WITH.SALE_DATE AND MAX_NEED_DATE_WITH.NEED_DATE     
                  AND TO_NUMBER(SAL.SHOP_CD) = SALE_WITH.UPJANG     
                  AND TO_NUMBER(SAL.SHOP_CD) = MAX_NEED_DATE_WITH.RC_UPJANG     
                  AND SAL.SHOP_CD IN (SELECT UPJANG FROM FMS_UPJANG_BB_WITH)
                  AND     NVL(CASE WHEN POHD.PO_TYP = 'BP' THEN     
                                CASE WHEN PODT.GR_COMP_YN  ='N'     
                                                  AND     POHD.APRV_STS = 'T'     
                                                  THEN 'RW' --통합영업에서 뷰 불가     
                                                  WHEN PODT.GR_COMP_YN  ='N'     
                                                  AND     POHD.APRV_STS = 'P'     
                                                  THEN 'PW'     
                                                  WHEN PODT.GR_COMP_YN='N'     
                                                  AND     POHD.APRV_STS IN ('R',     
                                                                            'W')     
                                                  THEN 'PD'     
                                                  WHEN PODT.GR_COMP_YN  ='N'     
                                                  AND     POHD.APRV_STS = 'B'     
                                                  THEN 'PD'     
                                                  WHEN PODT.GR_COMP_YN  ='Y'     
                                                  AND     POHD.APRV_STS = 'B'     
                                                  THEN 'GC'     
                                                  WHEN PODT.GR_COMP_YN='Y'     
                                                  AND     POHD.APRV_STS IN ('C', 'K')     
                                                  THEN 'GC'     
                                          END     
                                  ELSE DECODE(PODT.GR_COMP_YN, 'Y',     
                                              'GC',     
                                              NVL(PRDT.PR_PROG_STS,'PC'))     
                          END,'PC') IN ('PW','PC','DL')     
                  )     
                  A      
         GROUP BY A.UPJANG     
         )     
         E     
         /************************************************************************     
         F.당월 미발주 주문금액     
         **************************************************************************/     
         ,     
  	   (SELECT  SALE_WITH.UPJANG ,     
                  SUM(ROUND(DECODE(A.TAX_CODE,'100', 1.1, 1)*ROUND(A.PR_QTY*A.SALE_PRICE))) AS PR_AMT     
         FROM     SO_PR A     
             , SALE_WITH SALE_WITH     
         WHERE  1=1      
         AND A.RC_UPJANG = SALE_WITH.UPJANG     
         AND      A.NEED_DATE BETWEEN SALE_WITH.SALE_DATE AND :schNeedDate     
         AND      A.LINE_STATUS    = '001'		 /* 진행상태 : 001(신청저장) */     
         AND      A.RC_UPJANG IN ( SELECT UPJANG FROM SALE_WITH )     
         GROUP BY SALE_WITH.UPJANG     
         )     
         F     
  WHERE  1=1      
  AND    A.MAIN_UPJANG      = :schMainUpjang     
  AND    A.UPJANG            = C.MAIN_UPJANG(+)     
  AND    A.UPJANG            = C0.MAIN_UPJANG(+)     
  AND    A.UPJANG            = C1.MAIN_UPJANG(+)     
  AND    A.UPJANG            = D.UPJANG(+)     
  AND    A.UPJANG            = E.UPJANG(+)     
  AND    A.UPJANG            = F.UPJANG(+)     
  AND    A.CREDIT_CONTROL_YN = 'Y'     
  AND    (A.CREDIT_TURN_CONTROL_YN   = 'Y' OR A.CREDIT_AMOUNT_CONTROL_YN = 'Y')     
  --AND	 A.PART_SALES_SABUN = '201501271'     
		START WITH DECODE(A.MAIN_UPJANG, A.UPJANG, 0, 1) = '0'		
		CONNECT BY NOCYCLE A.MAIN_UPJANG = PRIOR A.UPJANG				
		]]>
	</statement>


	<!-- 선택한 창고에 대한 기본정보를 조회한다 -->
	<statement name="selectSubinvInfo" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectSubinvInfo */
		<![CDATA[
		SELECT
	  		  A.DEPT_ID						/* 	SO_PR.RC_DEPT_ID */
			, A.UPJANG							/*  SO_PR.RC_UPJANG */
			, C.MATERIAL_ACCTCD	 		/* 입고계정코드  */
			, A.AP_UNITPRICE_UPJANG	/* 단가계약업장코드 */
			, B.CENTER_CODE
			, D.MU_CD							/* SO_PR.RC_MU_CD */
			, C.INVAT_FLAG					/* 외제매입여부 */
			, C.OUTVAT_FLAG				/* 불공제여부 */
			, C.STOCK_FLAG					/* 재고자산창고여부 */
			, C.BUDCC_CD AS BUDDEPT_ID		/* 예산 DEPT_ID  : TO-BE  */
			, C.BUDCC_CD AS MATERIAL_BUD_CLS	/* 입고계정 예산관리 항목 : TO-BE X */
			, '' AS PR_DEPT_ID				/* SO_PR.PR_DEPT_ID */
			, '' AS PR_MU_CD				/* SO_PR.PR_MU_CD */
			, '' AS PR_UPJANG				/* SO_PR.PR_UPJANG */
		FROM ST_UPJANG A INNER JOIN HLDC_PO_UPJANG_CENTER B ON A.AP_UNITPRICE_UPJANG = B.UPJANG
			     					INNER JOIN HLDC_PO_SUBINVENTORY C ON C.SUBINV_CODE = :schSubinvCode
										    												AND A.UPJANG = C.UPJANG
			     					LEFT JOIN HLDC_SC_DEPT_V D ON A.DEPT_ID = D.DEPT_ID
		]]>
	</statement>



	<!-- 구매신청자재검색 화면 조건상단 기본정보를 조회한다 -->
	<statement name="selectPopView" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectPopView */
		<![CDATA[
		SELECT 
      		  A.UPJANG
    		, '(' || A.UPJANG || ')' || A.UPJANGNM || ' ; ' ||  '[' || C.CENTER_NAME || ']' AS UPJANG_NM 
    		, B.CENTER_CODE
		FROM   ST_UPJANG A INNER JOIN HLDC_PO_UPJANG_CENTER B ON A.UPJANG = B.UPJANG
			       					   INNER JOIN HLDC_PO_CENTER C ON B.CENTER_CODE = C.CENTER_CODE  
		WHERE  A.UPJANG = :schUpjang
		]]>
	</statement>

	<!-- 구매신청자재검색 정보를 조회한다 : 구매유형  NO 단가 (사용 X) -->
	<statement name="selectPopItem2" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectPopItem2 */
		<![CDATA[
		SELECT
	  		  A.ITEM_CODE
        	, A.ITEM_NAME
			, A.ITEM_SIZE
        	, A.PO_UOM AS ITEM_UNIT
        	, NVL(B.CONTRACT_PRICE,0) AS MARGIN_PRICE
        	, NVL(B.CONTRACT_PRICE,0) AS UNIT_PRICE
        	, NVL(B.SALE_PRICE, 0) AS SALE_PRICE						/* 판매단가 */
        	, NVL(B.STRATEGY_PRICE, 0) AS STRATEGY_PRICE			/* 전략단가 */
        	, NVL(B.PLANNING_PRICE, 0) AS PLANNING_PRICE		/* 기획단가 */
        	, NVL(B.SUBSIDY_PRICE, 0) AS SUBSIDY_PRICE				/* 장려단가 : SO_PR 생성 시 신규로 생성 */
        	, NVL(B.OP_PRICE, 0) AS OP_PRICE								/* 운영단가 */
        	, A.TAX_CODE
        	, B.CENTER_FLAG
        	, B.CUSTCD AS CUST_CD
        	, NVL(B.CENTER_CODE, :schCenter) AS CENTER_CODE
        	, NVL(A.MIN_ORD_QTY, 0) AS MIN_ORD_QTY
        	, NVL(A.MAX_ORD_QTY, 0) AS MAX_ORD_QTY
        	, 0 AS PR_QTY
        	, A.POINT_FLAG
        	, NVL(A.MULTIPLIER_QTY, 0) AS MULTIPLIER_QTY
        	, A.KEEPING_TYPE
        	, Z.VD_NM || '(' || Z.BIZ_REG_NO || ')' AS CUST_NM
        	, B.APPLY_SD
			, P1.OPER_ORG_SN_PURC
			, NVL(B.VD_SN, P2.VD_SN) AS VD_SN
			, NVL(P3.D_DAYS, 0) AS D_DAYS
			, NVL(P3.D_TIMES, 0) AS D_TIMES
			, EPROCUSR.FN_ITEM_PROCURE_SCH('100', 'HFC', P1.OPER_ORG_SN_PURC, A.ITEM_CODE, P2.VD_SN, '02', P3.D_DAYS, P3.D_TIMES, :schPrDate, :schDate) AS PO_STATUS	/* 구매_수발주제한 */
			, FMP_ORDER_SCHL_FUN(:schUpjang, B.CUSTCD, A.ITEM_CODE, :schDate) AS FMP_STATUS		/* 식재_수발주제한 */
        	, B.UPJANG_GRP
		/* NO_단가일 경우 */
		FROM HLDC_PO_ITEM_MST A LEFT JOIN (
																	SELECT  C.ITEM_CODE
				 															  , C.CONTRACT_PRICE
				  															  , C.CENTER_FLAG
				  															  , C.CUSTCD
		  																	  , C.SALE_PRICE				/* 판매단가 */		
		  																	  , C.STRATEGY_PRICE		/* 전략단가 */
		  																	  , C.PLANNING_PRICE		/* 기획단가 */
		  																	  , C.SUBSIDY_PRICE			/* 장려단가 */
		  																	  , C.OP_PRICE					/* 운영단가 */
				  															  , C.CENTER_CODE
		  																	  , C.VD_SN					/* 구매계약.VD_SN */
		  																	  , C.APPLY_SD				/* 구매계약.APPLY_SD */
		  																	  , C.UPJANG_GRP			/* 구매계약_업장군 */
																	FROM PO_CONTRACT_FSALE C INNER JOIN (
																																SELECT /*+ INDEX(A PO_CONTRACT_FSALE_PK) */
											  																							 A.CENTER_CODE
																																		, A.UPJANG
																																		, A.ITEM_CODE
																																		, MAX(A.CONTRACT_START) AS CONTRACT_START
																																FROM PO_CONTRACT_FSALE A
																																WHERE  A.CENTER_CODE = :schCenter			/* 조건 : 센터코드 */
																																 --AND    A.UPJANG = :schUpjang					/* 조건 : 업장 */
									 																							 AND     A.UPJANG = (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG = :schUpjang)	/* 조건 : 단가업장 */
																																 AND    A.ITEM_CODE > ' '						
																																 AND    A.CONTRACT_START <= :schDate		/* 조건 : 기준일자 */
																																 AND    A.USE_YN = 'Y'
																																GROUP BY A.CENTER_CODE, A.UPJANG, A.ITEM_CODE
																															) D ON C.CENTER_CODE = D.CENTER_CODE
										    																					AND C.UPJANG         = D.UPJANG
										    																					AND C.ITEM_CODE    = D.ITEM_CODE
										    																					AND C.CONTRACT_START = D.CONTRACT_START
																	WHERE C.USE_YN  = 'Y'
																	AND    C.CONTRACT_PRICE > 0
																	AND    C.SALE_PRICE > 0
																) B ON A.ITEM_CODE = B.ITEM_CODE
																/* PO_TREAT_UPJANG_V, PO_CONTRACT_F 기준, 테스트 데이타 문제로 없을 수 있음 */
																LEFT JOIN PO_TREAT_UPJANG_V X ON X.UPJANG =  (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG = :schUpjang)	/* 조건 : 단가업장 */		
								    																		 AND B.ITEM_CODE = X.ITEM_CODE
																--INNER JOIN ST_CUST Z ON B.CUSTCD	 = Z.CUSTCD
																INNER JOIN VO_FC_VENDOR Z ON B.CUSTCD = Z.VD_CD
                                                                /* 구매 수발주 제한 */
                                                                INNER JOIN HLDC_PO_CENTER P1 ON B.CENTER_CODE = P1.CENTER_CODE
                                                                LEFT JOIN VO_FC_VENDOR P2 ON B.CUSTCD = P2.VD_CD
                                                                LEFT JOIN PO_PREORDER_LIST P3 ON B.CENTER_CODE = P3.CENTER_CODE
                                                                                                            AND B.ITEM_CODE = P3.ITEM_CODE
 		WHERE  A.ITEM_CLASS1 = 'F'		/* 조건 : 식자재(F) */
 		AND     A.USE_YN         = 'Y' 
		<#if schCode?has_content>
		AND    A.ITEM_CODE LIKE '%' || :schCode || '%'
		</#if>
		<#if schName?has_content>
		 AND   A.ITEM_NAME LIKE  '%' || :schName || '%'			
		</#if>
		<#if schCustNm?has_content>
		 AND   Z.CUSTNM LIKE  '%' || :schCustNm || '%'			
		</#if>
		ORDER BY A.ITEM_CODE ASC
		]]>
	</statement>


	<!-- 구매신청자재검색 정보를 조회한다 : 구매유형 FS -->
	<!-- 구매 수발주스케쥴 신청관련 CHECK : 신청수량관련 체크는 저장시에 함 (2015-08-11)-->
	<statement name="selectPopItem" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectPopItem */
		<![CDATA[
		SELECT
  			  T.ITEM_CODE
			, T.ITEM_NAME
			, T.ITEM_SIZE
			, T.ORIGIN_NAT
			, T.ITEM_UNIT
			, T.CENTER_FLAG
			, T.CUST_CD
			, T.MARGIN_PRICE
			, T.UNIT_PRICE
			, T.SALE_PRICE
        	, T.STRATEGY_PRICE			/* 전략단가 */
        	, T.PLANNING_PRICE		/* 기획단가 */
        	, T.SUBSIDY_PRICE			/* 장려단가 : SO_PR 생성 시 신규로 생성 */
        	, T.OP_PRICE					/* 운영단가 */
			, T.CENTER_CODE
			, T.APPLY_SD
			, T.TAX_CODE
			, T.MIN_ORD_QTY
			, T.MAX_ORD_QTY
			, T.PR_QTY
			, T.POINT_FLAG
			, T.MULTIPLIER_QTY
			, T.KEEPING_TYPE
    		, T.CUST_NM
			, T.OPER_ORG_SN_PURC
			, T.VD_SN
            , T.D_DAYS
            , T.D_TIMES
            <#if schType =='29' || schType =='97'> 
    		, 'HK' AS PO_STATUS            /* 구매_수발주제한  29 긴급 ALL 패스 !  2015-10-09 추가*/
    		, NULL AS PO_MSG   			   /* 구매_수발주제한 메시지 29 긴급 ALL 패스 !  2015-10-09 추가 */
    		, 'N'  AS FMP_STATUS           /* 식재_수발주제한  29 긴급 ALL 패스 !  2015-10-09 추가*/
    		<#else>
    		, DECODE(T.VAL_SHP_CNT, 'CE', 'CE', 'NN', 'CE', 
        			DECODE(T.VAL_UNS_CNT, 'UK', 'UK', 'NN', 'UK', 
            				DECODE(T.VAL_STP_CNT, 'TK', 'TK', 'NN', 'TK',
                				DECODE(T.VAL_EVT_CNT, 'VE', 'VE',  'NN', 'VE', 					
                    					DECODE(T.VAL_CTR_CNT, 'SE', 'SE',  'NN', 'SE',  
                        					DECODE(T.VAL_REQ_CNT, 'XE', 'XE', 'NN', 'XE',
                            					DECODE(T.VAL_SCH_CNT, 'HE', 'HE', 'NN', 'HE', DECODE(T.IVT_YN, 'Y','HK', 'HE'))
                        								)
                    								)
                							)
            							)
        							)
    						) AS PO_STATUS            /* 구매_수발주제한 */
			, FMS_GETPO_STATUS_MSG_FUN(T.VAL_SHP_CNT, T.VAL_UNS_CNT, T.VAL_STP_CNT, T.VAL_EVT_CNT, T.VAL_CTR_CNT, T.VAL_REQ_CNT, T.VAL_SCH_CNT, T.IVT_YN) AS PO_MSG   /* 구매_수발주제한 메시지 */
			, T.FMP_STATUS        	/* 식재_수발주제한 */    						
			</#if>
            , T.PO_NO_STATUS		/* 구매 NO단가 제한 */ 
            , T.UPJANG_GRP
            , T.FEATURE_ICON
		FROM 
				(
					SELECT
	  		  			  S.ITEM_CODE
						, S.ITEM_NAME
						, S.ITEM_SIZE
						, S.ORIGIN_NAT
						, S.ITEM_UNIT
						, S.CENTER_FLAG
						, S.CUST_CD
						, S.MARGIN_PRICE
						, S.UNIT_PRICE
						, S.SALE_PRICE
        				, S.STRATEGY_PRICE			/* 전략단가 */
        				, S.PLANNING_PRICE		/* 기획단가 */
        				, S.SUBSIDY_PRICE			/* 장려단가 : SO_PR 생성 시 신규로 생성 */
        				, S.OP_PRICE					/* 운영단가 */
						, S.CENTER_CODE
						, S.APPLY_SD
						, S.TAX_CODE
						, S.MIN_ORD_QTY
						, S.MAX_ORD_QTY
						, S.PR_QTY
						, S.POINT_FLAG
						, S.MULTIPLIER_QTY
						, S.KEEPING_TYPE
    					, S.CUST_NM
						, S.OPER_ORG_SN_PURC
						, S.VD_SN
            			, S.D_DAYS
            			, S.D_TIMES
            			-- ORGINAL FUNCTION
						--, EPROCUSR.FN_ITEM_PROCURE_SCH('100', 'HFC', S.OPER_ORG_SN_PURC, S.ITEM_CODE, S.VD_SN, '02', S.D_DAYS, S.D_TIMES, :schPrDate, :schDate) AS PO_STATUS	/* 구매_수발주제한 */
        				-- 1) 자재업장군 매핑
        				, EPROCUSR.FN_ITEM_PROCURE_SHP_MAP('100' , 'HFC' , S.OPER_ORG_SN_PURC , S.UPJANG_GRP , S.ITEM_CODE, :schDate) AS VAL_SHP_CNT
        				-- 2) 자재 불용체크
        				, EPROCUSR.FN_ITEM_PROCURE_MTG_UNS('100', S.ITEM_CODE) AS VAL_UNS_CNT
        				-- 3) 자재 중지체크
        				, EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', S.ITEM_CODE, '02') AS VAL_STP_CNT
        				-- 4) 기획자재 한정수량체크 : 실제 신청시에 CHECK 해야함, 그냥 성공인자를 지정
        				--, EPROCUSR.FN_ITEM_PROCURE_INF_EVT('100', 'HFC', S.OPER_ORG_SN_PURC, S.ITEM_CODE, S.VD_SN, S.APPLY_SD, IN_REQ_CNT) AS VAL_EVT_CNT
        				, 'VP' AS VAL_EVT_CNT
        				-- 5) SPOT계약 발주횟수체크 : : 실제 신청시에 CHECK 해야함, 그냥 성공인자를 지정
       					--, EPROCUSR.FN_ITEM_PROCURE_INF_SPT('100', 'HFC', S.OPER_ORG_SN_PURC, S.ITEM_CODE, S.VD_SN, S.APPLY_SD) AS VAL_CTR_CNT
						, 'SK' AS VAL_CTR_CNT
        				-- 6) 요일별 신청불가 체크 : 2015-10-08 인자 추가
        				, EPROCUSR.FN_ITEM_PROCURE_REQ_WKD('100', 'HFC', S.OPER_ORG_SN_PURC, S.ITEM_CODE, S.VD_SN, '02', :schDate) AS VAL_REQ_CNT
        				-- 7) 수발주 스케쥴에 따른 유효성 체크
						<#if schType=='29' || schType=='97' > 
        				, 'HK' AS VAL_SCH_CNT		/* 긴급(29)인 경우  PASS */
						<#else>
        				, EPROCUSR.FN_ITEM_PROCURE_SCH('100', 'HFC', S.OPER_ORG_SN_PURC, S.ITEM_CODE, S.VD_SN, '02', S.D_DAYS, S.D_TIMES, :schPrDate, :schDate) AS VAL_SCH_CNT
						</#if>
        				-- 8) DC자재 체크 : 실제 신청시에 CHECK 해야함, 그냥 성공인자를 지정
        				, 'Y' AS IVT_YN
            			, S.FMP_STATUS        /* 식재_수발주제한 */
            			, (CASE WHEN S.PO_CONTRACT_PRICE = 0 THEN 'Y' ELSE 'N' END) AS PO_NO_STATUS		/* 구매 NO단가 제한 */ 
            			, S.UPJANG_GRP
            			, S.FEATURE_ICON
        		FROM
        				(    
							SELECT
	  		  	 				  X.ITEM_CODE
								, A.ITEM_NAME
								, A.ITEM_SIZE
		     					, A.ORIGIN_NAT	/*원산지*/
								, A.PO_UOM AS ITEM_UNIT
								, X.CENTER_FLAG
								, X.CUSTCD AS CUST_CD
								, NVL(X.CONTRACT_PRICE_S,0) AS MARGIN_PRICE
								, NVL(X.CONTRACT_PRICE,0) AS UNIT_PRICE
								, NVL(X.SALE_PRICE, 0) AS SALE_PRICE
        						, NVL(X.STRATEGY_PRICE, 0) AS STRATEGY_PRICE			/* 전략단가 */
        						, NVL(X.PLANNING_PRICE, 0) AS PLANNING_PRICE		/* 기획단가 */
        						, NVL(X.SUBSIDY_PRICE, 0) AS SUBSIDY_PRICE				/* 장려단가 : SO_PR 생성 시 신규로 생성 */
        						, NVL(X.OP_PRICE, 0) AS OP_PRICE								/* 운영단가 */
								, X.CENTER_CODE
								, NVL(X.APPLY_SD, '') AS APPLY_SD
								, A.TAX_CODE
								, NVL(A.MIN_ORD_QTY, 0) AS MIN_ORD_QTY
								, NVL(A.MAX_ORD_QTY, 0) AS MAX_ORD_QTY
								, 0 AS PR_QTY
								, A.POINT_FLAG
								, NVL(A.MULTIPLIER_QTY, 0) AS MULTIPLIER_QTY
								, A.KEEPING_TYPE
       							, P2.VD_NM || '(' || P2.BIZ_REG_NO || ')' AS CUST_NM
								, P1.OPER_ORG_SN_PURC
								, NVL(X.VD_SN, P2.VD_SN) AS VD_SN
								, FMS_PREORDER_FUN(X.CENTER_CODE, X.ITEM_CODE, 'D_DAYS') AS D_DAYS			/* PO_PREORDER_LIST */
								, FMS_PREORDER_FUN(X.CENTER_CODE, X.ITEM_CODE, 'D_TIMES') AS D_TIMES			/* PO_PREORDER_LIST */
								, FMP_ORDER_SCHL_FUN(:schUpjang, X.CUSTCD, X.ITEM_CODE, :schDate) AS FMP_STATUS		/* 식재_수발주제한 */
                				, FMS_GETCONTRACT_PRICE_FUN(:schCenter, :schUpjang, X.CUSTCD, X.ITEM_CODE, :schDate)  AS PO_CONTRACT_PRICE 	/* 구매 매입단가-현재 */
                	            , FN_ITEM_FEATURE_ICON(NVL((SELECT DUTY_YN FROM HLDC_PO_CONTRACT_F CF  WHERE CF.CENTER_CODE=X.CENTER_CODE AND CF.UPJANG= (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG= :schUpjang ) 
            		               AND :schDate BETWEEN CF.CONTRACT_START AND CF.CONTRACT_END
                    		       AND CF.ITEM_CODE=A.ITEM_CODE AND CF.USE_YN = 'Y'),'N'),
                    		       --A.PB_YN, 
                    		       --PB상품을 계약에서 가겨옴(2015.08.29)    
                    		       NVL((SELECT PB_YN FROM HLDC_PO_CONTRACT_F CF  WHERE CF.CENTER_CODE=X.CENTER_CODE AND CF.UPJANG= (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG= :schUpjang ) 
            		               AND :schDate BETWEEN CF.CONTRACT_START AND CF.CONTRACT_END
                    		       AND CF.ITEM_CODE=A.ITEM_CODE AND CF.USE_YN = 'Y'),'N'),
                    		       A.ECO_ITEM , '') FEATURE_ICON             
								, X.UPJANG_GRP
						FROM  (
									SELECT    
										  C.ITEM_CODE
		  								, C.CONTRACT_PRICE
		  								, C.CONTRACT_PRICE_S
		  								, C.CENTER_FLAG
		  								, C.CUSTCD
		  								, C.SALE_PRICE			/* 판매단가 */		
		  								, C.STRATEGY_PRICE		/* 전략단가 */
		  								, C.PLANNING_PRICE	/* 기획단가 */
		  								, C.SUBSIDY_PRICE		/* 장려단가 */
		  								, C.OP_PRICE				/* 운영단가 */
		  								, C.CENTER_CODE
		  								, C.VD_SN					/* 구매계약.VD_SN */
		  								, C.APPLY_SD				/* 구매계약.APPLY_SD */
		  								, C.UPJANG_GRP			/* 구매계약.UPGANG_GRP */
									FROM PO_CONTRACT_FSALE C INNER JOIN (
																									SELECT /** INDEX(A PO_CONTRACT_FSALE_PK) */
											 										  					  A.CENTER_CODE
																										, A.UPJANG
																										, A.ITEM_CODE
																										, MAX(A.CONTRACT_START) AS CONTRACT_START
																									FROM PO_CONTRACT_FSALE A
																									WHERE  A.CENTER_CODE = :schCenter				/* 조건 : 센터코드 */
									 																--AND     A.UPJANG = :schUpjang						/* 조건 : 업장 */
									 																 AND     A.UPJANG = (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG = :schUpjang)	/* 조건 : 단가업장 */
									 																 AND     A.ITEM_CODE > ' '						
									 																--AND     A.CONTRACT_START <= :schDate			/* 조건 : 기준일자 */
									 																  AND     :schDate BETWEEN A.CONTRACT_START AND A.CONTRACT_END			/* 조건 : 기준일자 */
									 																  AND     A.USE_YN = 'Y'
																										GROUP BY A.CENTER_CODE, A.UPJANG, A.ITEM_CODE
																									) D ON C.CENTER_CODE = D.CENTER_CODE
																										AND C.UPJANG         = D.UPJANG
																										AND C.ITEM_CODE    = D.ITEM_CODE
																										AND C.CONTRACT_START = D.CONTRACT_START
										WHERE C.USE_YN  = 'Y'
										AND    C.CONTRACT_PRICE > 0
										AND    C.SALE_PRICE > 0
										AND    C.UPJANG = (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG = :schUpjang)
										AND    C.CENTER_CODE = :schCenter 
										AND     :schDate BETWEEN C.CONTRACT_START AND C.CONTRACT_END
									) X  INNER JOIN HLDC_PO_ITEM_MST A ON A.USE_YN = 'Y'					/* 자재마스터  연계 */
																					     AND A.ITEM_CLASS1 = 'F'			/* 식자재(F) */
																						<#if schCode?has_content>
																						 AND A.ITEM_CODE LIKE '%' || :schCode || '%'
																						</#if>
																						<#if schName?has_content>
				 																		AND A.ITEM_NAME LIKE  '%' || :schName || '%'			
																						</#if>
						     															 AND X.ITEM_CODE = A.ITEM_CODE
      		 	 						--INNER JOIN ST_CUST Z ON X.CUSTCD = Z.CUSTCD				/* 거래처정보 */
     		 							/* 구매 수발주 제한 */
      		 							 INNER JOIN HLDC_PO_CENTER P1 ON X.CENTER_CODE = P1.CENTER_CODE
      		 							 INNER JOIN VO_FC_VENDOR P2 ON X.CUSTCD = P2.VD_CD
      		 	 						--LEFT JOIN PO_PREORDER_LIST P3 ON X.CENTER_CODE = P3.CENTER_CODE
			  							--						  					   AND X.ITEM_CODE = P3.ITEM_CODE
				) S	
				WHERE 1 = 1
				<#if schCustNm?has_content>
				 AND   S.CUST_NM LIKE  '%' || :schCustNm || '%'			
				</#if>
		) T
		ORDER BY T.ITEM_CODE ASC
		]]>
	</statement>


	<!-- 구매 수발주제한 정보를 조회한다 -->
	<statement name="selectPoQtyCheck" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectPoQtyCheck */
		<![CDATA[
		SELECT
				  /*  4)	기획자재 한정수량체크  */
				  EPROCUSR.FN_ITEM_PROCURE_INF_EVT('100', 'HFC', P1.OPER_ORG_SN_PURC, :itemCode, :vdSn, :applySd, :prQty) AS VAL_EVT_CNT
        		 /*  5) SPOT계약 발주횟수체크 */
       			, EPROCUSR.FN_ITEM_PROCURE_INF_SPT('100', 'HFC', P1.OPER_ORG_SN_PURC, :itemCode, :vdSn, :applySd, :prQty) AS VAL_CTR_CNT
				  /*  8) DC자재 수량체크 (Y/N)  */
				, CASE WHEN :centerFlag = 'DC' THEN EPROCUSR.FC_GET_CENTER_IVT_YN('100', 'HFC', :centerCode, :itemCode, :prQty) 
					      ELSE 'Y' END AS IVT_YN
		FROM HLDC_PO_CENTER P1
		WHERE P1.CENTER_CODE = :centerCode
		]]>
	</statement>

	<!-- 주문통제일자 여부를 조회한다 -->
	<statement name="selectOrdCtrlDays" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectOrdCtrlDays */
		<![CDATA[
		SELECT NVL(SUM(CNT),0) AS CNT
		FROM (
					SELECT  COUNT(*) AS CNT
					FROM   FMP_ORD_CTRL_DAYS A
					WHERE  A.UPJANG = -1
					AND     A.CTRL_DATE = :schNeedDate
					AND     A.USE_YN = 'Y'
					AND      (:schUpjang, :schNeedDate) NOT IN (SELECT 
																				  B.UPJANG
								      											, B.CTRL_DATE 
																			FROM FMP_ORD_CTRL_DAYS B
																			WHERE B.UPJANG  = :schUpjang
																			AND B.CTRL_DATE = :schNeedDate
																			AND B.USE_YN      = 'N')  	
					UNION ALL  
					SELECT  COUNT(*) AS CNT
					FROM FMP_ORD_CTRL_DAYS A
					WHERE A.UPJANG     = :schUpjang
					AND    A.CTRL_DATE = :schNeedDate
					AND    A.USE_YN = 'Y'
		)
		]]>
	</statement>


	<!-- 주문통제일자 타입을 조회한다 -->
	<statement name="selectOrdCtrl" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectOrdCtrl */
		<![CDATA[
		SELECT A.CTRL_TYPE || A.ITEM_TYPE AS CHK_TYPE
				 , A.CTRL_TYPE
				 , A.ITEM_TYPE
     			 , A.MON
     			 , A.TUE
     			 , A.WED
     			 , A.THU
     			 , A.FRI
     			 , A.SAT
     			 , A.SUN
  		FROM FMP_ORD_CTRL A
 		WHERE A.UPJANG = :schUpjang
   		AND A.USE_YN = 'Y'
		]]>
	</statement>

	<!-- 신규 구매신청번호를 SET한다 -->
	<statement name="selectPrNum" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectPrNum */
		<![CDATA[
	   SELECT 
	   		TO_CHAR(SYSDATE,'YYYYMMDD') || '-' || LPAD(SO_PR_NUM_S.NEXTVAL,5,'0') AS PR_NUM
	   FROM DUAL
		]]>
	</statement>


	<!-- 신규 구매승인번호를 SET한다 -->
	<statement name="selectApNum" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectApNum */
		<![CDATA[
	   SELECT 
	   		'자동' | | TO_CHAR(SYSDATE,'YYYYMMDD') || '-' || LPAD(SO_PR_APV_NUM_S.NEXTVAL,4,'0') AS AP_NUM
	   FROM DUAL
		]]>
	</statement>

	<!-- 주문신청번호 MASTER 정보를 조회한다. -->
	<statement name="selectPrMaster" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectPrMaster */
		<![CDATA[
		SELECT
			  PR_NUM AS SCH_PR_NUM
			, PR_SABUN AS SCH_SABUN
			, SUBINV_CODE AS 	SCH_SUBINV_CODE
			, APPROVE_NUM AS SCH_AP_NUM
			, PO_TYPE AS SCH_TYPE
			, PR_DATE AS SCH_PR_DATE
			, NEED_DATE AS SCH_NEED_DATE
		FROM    SO_PR
		WHERE  PR_NUM = :schPrNum
		AND PO_TYPE IN ('07','29', '97')
		AND     	ROWNUM <= 1
		]]>
	</statement>

	<!-- 주문신청번호 DETAIL 정보를 조회한다. -->
	<statement name="selectPrDetail" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectPrDetail */
		<![CDATA[
		SELECT
			  A.ITEM_CODE
		    , A.ITEM_NAME
		    , A.ITEM_SIZE
		    , A.PO_UOM AS ITEM_UNIT
		    , A.MARGIN_PRICE
		    , A.PR_QTY
		    , (A.PR_QTY * SALE_PRICE) AS PR_AMT
		    , A.SUBINV_CODE
		    , (SELECT SUBINV_NAME FROM HLDC_PO_SUBINVENTORY WHERE SUBINV_CODE = A.SUBINV_CODE) AS SUBINV_NAME
		    , A.NEED_DATE
		    , A.PR_REMARK
		    , A.UNIT_PRICE
		    , A.TAX_CODE
		    , A.CUSTCD AS CUST_CD
		    , A.APPROVER
		    , A.CENTER_FLAG
		    , A.CENTER_CODE
		    , A.PR_DATE
		    , A.PR_DEPT_ID
		    , A.PR_UPJANG
		    , A.BUDDEPT_ID													/* 예산통제부서 : 창고연계 */
		    , A.ACCTCD														/* 계정코드 : 창고연계 */
		    , A.BUD_CLS
		    , A.RC_MU_CD
		    , A.RC_DEPT_ID
		    , A.RC_UPJANG
		    , A.INVAT_FLAG
		    , A.OUTVAT_FLAG
		    , NVL(B.MIN_ORD_QTY, 0) AS MIN_ORD_QTY
		    , NVL(B.MAX_ORD_QTY, 0) AS MAX_ORD_QTY
		    , A.SALE_PRICE
        	, NVL(A.STRATEGY_PRICE, 0) AS STRATEGY_PRICE			/* 전략단가 */
        	, NVL(A.PLANNING_PRICE, 0) AS PLANNING_PRICE		/* 기획단가 */
        	, NVL(A.SUBSIDY_PRICE, 0) AS SUBSIDY_PRICE				/* 장려단가 : SO_PR 생성 시 신규로 생성 */
        	, NVL(A.OP_PRICE, 0) AS OP_PRICE								/* 운영단가 */
		    , NVL(B.MULTIPLIER_QTY, 0) AS MULTIPLIER_QTY
        	, B.POINT_FLAG
			, NVL(P3.D_DAYS, 0) AS D_DAYS
			, NVL(P3.D_TIMES, 0) AS D_TIMES
		    , A.PR_NUM
		    , A.PR_ID
		    , A.APPROVE_NUM
		    , A.PO_TYPE
		    , A.SO_STATUS
			, NVL(D.CODE_NAME,'') AS SO_STATUS_NM			/* 구매진행상황 */ 
		    , A.VD_SN
		    , A.APPLY_SD
		    , '' AS CLOSE_STATUS
		    , A.UPJANG_GRP													/* 업장군 */
		    , '' AS ERROR
		    , '' AS MSG
		FROM SO_PR A INNER JOIN HLDC_PO_ITEM_MST B ON A.ITEM_CODE = B.ITEM_CODE
                              LEFT JOIN PO_PREORDER_LIST P3 ON A.CENTER_CODE = P3.CENTER_CODE
                                                                              AND A.ITEM_CODE = P3.ITEM_CODE
							  LEFT JOIN SCC_COMMON_CODE D ON D.GROUP_CODE = 'FM0037'		/* 공통 : 구매라인상태 */
							    												  AND A.SO_STATUS = D.CODE																						   
		WHERE  A.PR_NUM = :schPrNum
		ORDER  BY A.PR_ID ASC
		]]>
	</statement>


	<!-- 엑셀업로드에 대한  기본정보를 조회한다. -->
	<statement name="selectUpload" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectUpload */
		<![CDATA[
		SELECT
	  			  T.ITEM_CODE
				, T.ITEM_NAME
				, T.ITEM_SIZE
				, T.ITEM_UNIT
				, T.PR_QTY
				, T.SUBINV_CODE
				, T.SUBINV_NAME
				, T.NEED_DATE
				, T.PR_REMARK
				, T.CENTER_CODE
				, T.PR_DATE
				, T.RC_UPJANG
				, T.RC_UPJANG_NM
				, T.INVAT_FLAG
				, T.OUTVAT_FLAG
				, T.STOCK_FLAG
				, T.MIN_ORD_QTY
				, T.MAX_ORD_QTY
				, T.MULTIPLIER_QTY
				, T.POINT_FLAG
				, T.D_DAYS
				, T.D_TIMES
				, T.ERROR
				, T.MSG
				, T.MSG2
				, T.CEN_FLAG
				, T.SUB_FLAG
				, T.SUB_INFO_FLAG
				, T.ITEM_FLAG
       			, T.CUS_FLAG                         	/* 남품업체정보 여부 : 오류 E */
				, T.PO_CNT
			    , T.SALE_PRICE 						/* 판매단가 : 여신CHECK 용도 */
    			, DECODE(T.VAL_SHP_CNT, 'CE', 'CE', 'NN', 'CE', 
        			DECODE(T.VAL_UNS_CNT, 'UK', 'UK', 'NN', 'UK', 
            				DECODE(T.VAL_STP_CNT, 'TK', 'TK', 'NN', 'TK',
                				DECODE(T.VAL_EVT_CNT, 'VE', 'VE',  'NN', 'VE', 
                    					DECODE(T.VAL_CTR_CNT, 'SE', 'SE',  'NN', 'SE',  
                        					DECODE(T.VAL_REQ_CNT, 'XE', 'XE', 'NN', 'XE',
                            					DECODE(T.VAL_SCH_CNT, 'HE', 'HE', 'NN', 'HE', DECODE(T.IVT_YN, 'Y','HK', 'HE'))
                        								)
                    								)
                							)
            							)
        							)
    						) AS PO_STATUS            /* 구매_수발주제한 */
				, FMS_GETPO_STATUS_MSG_FUN(T.VAL_SHP_CNT, T.VAL_UNS_CNT, T.VAL_STP_CNT, T.VAL_EVT_CNT, T.VAL_CTR_CNT, T.VAL_REQ_CNT, T.VAL_SCH_CNT, T.IVT_YN) AS PO_MSG		/* 구매_수발주제한 메시지 */
				, T.FMP_STATUS						/* 식재_수발주제한 */
                , T.PO_NO_STATUS 					/* 구매 0단가 여부 */             
				, T.ORD_FLAG
				, T.ORD_DAYS_FLAG
				, T.HEAD_YN
				, T.MAIN_UPJANG
				, T.CREDIT_YN
				, T.AP_UNITPRICE_UPJANG
		FROM
				(
					SELECT
	  		  			  X.ITEM_CODE
						, X.ITEM_NAME
						, X.ITEM_SIZE
						, X.ITEM_UNIT
						, X.PR_QTY
						, X.SUBINV_CODE
						, X.SUBINV_NAME
						, X.NEED_DATE
						, X.PR_REMARK
						, X.CENTER_CODE
						, X.PR_DATE
						, X.RC_UPJANG
						, '(' || X.RC_UPJANG ||  ')' || (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = X.RC_UPJANG) AS RC_UPJANG_NM
						, X.INVAT_FLAG
						, X.OUTVAT_FLAG
						, X.STOCK_FLAG
						, NVL(X.MIN_ORD_QTY, 0) AS MIN_ORD_QTY
						, NVL(X.MAX_ORD_QTY,0) AS MAX_ORD_QTY
						, NVL(X.MULTIPLIER_QTY,0) AS MULTIPLIER_QTY
						, X.POINT_FLAG
						, NVL(X.D_DAYS, 0) AS D_DAYS
						, NVL(X.D_TIMES, 0) AS D_TIMES
						, '' AS ERROR
						, '' AS MSG
						, '' AS MSG2
						, X.CEN_FLAG
						, X.SUB_FLAG
						, X.SUB_INFO_FLAG
						, X.ITEM_FLAG
            			, NVL(TO_CHAR(X.CUSTCD),'E') AS CUS_FLAG                         /* 남품업체정보 여부 : 오류 E */
						, X.PO_CNT
						, FMS_GETSALEPRICE_FUN(X.CENTER_CODE, X.RC_UPJANG, X.ITEM_CODE, :needDate) AS SALE_PRICE 	/* 판매단가 : 여신CHECK 용도 */
						-- ORIGINAL FUNCTION(구)
						--, EPROCUSR.FN_ITEM_PROCURE_SCH('100', 'HFC', X.OPER_ORG_SN_PURC, :itemCode, P2.VD_SN, '02', X.D_DAYS, X.D_TIMES, :prDate, :needDate) AS PO_STATUS	/* 구매_수발주제한 */
						-- **************************************************************************************************************************************************************************************			
        				-- 1) 자재업장군 매핑
        				, EPROCUSR.FN_ITEM_PROCURE_SHP_MAP('100' , 'HFC' , X.OPER_ORG_SN_PURC , CON.UPJANG_GRP , :itemCode, :needDate) AS VAL_SHP_CNT
        				-- 2) 자재 불용체크
        				, EPROCUSR.FN_ITEM_PROCURE_MTG_UNS('100', :itemCode) AS VAL_UNS_CNT
        				-- 3) 자재 중지체크
        				, EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', :itemCode, '02') AS VAL_STP_CNT
        				-- 4) 기획자재 한정수량체크 
        				, EPROCUSR.FN_ITEM_PROCURE_INF_EVT('100', 'HFC', X.OPER_ORG_SN_PURC, :itemCode, CON.VD_SN, CON.APPLY_SD, X.PR_QTY) AS VAL_EVT_CNT
        				-- 5) SPOT계약 발주횟수체크
       					, EPROCUSR.FN_ITEM_PROCURE_INF_SPT('100', 'HFC', X.OPER_ORG_SN_PURC, :itemCode, CON.VD_SN, CON.APPLY_SD, X.PR_QTY) AS VAL_CTR_CNT
        				-- 6) 요일별 신청불가 체크 : 2015-10-08 인자 추가
        				, EPROCUSR.FN_ITEM_PROCURE_REQ_WKD('100', 'HFC', X.OPER_ORG_SN_PURC, :itemCode, CON.VD_SN, '02', :needDate) AS VAL_REQ_CNT
        				-- 7) 수발주 스케쥴에 따른 유효성 체크
        				, EPROCUSR.FN_ITEM_PROCURE_SCH('100', 'HFC', X.OPER_ORG_SN_PURC, :itemCode, CON.VD_SN, '02', X.D_DAYS, X.D_TIMES, :prDate, :needDate) AS VAL_SCH_CNT
						--	8)  DC자재 수량체크 (Y/N) 
						, CASE WHEN CON.CENTER_FLAG = 'DC' THEN EPROCUSR.FC_GET_CENTER_IVT_YN('100', 'HFC', X.CENTER_CODE, :itemCode, X.PR_QTY) 
					      		  ELSE 'Y' END AS IVT_YN
						-- **************************************************************************************************************************************************************************************			
						, FMP_ORDER_SCHL_FUN(X.RC_UPJANG, X.CUSTCD, :itemCode, :needDate) AS FMP_STATUS		/* 식재_수발주제한 */
            			, (CASE WHEN FMS_GETCONTRACT_PRICE_FUN(X.CENTER_CODE, X.RC_UPJANG, X.CUSTCD, X.ITEM_CODE, :needDate) = 0 THEN 'Y' ELSE 'N' END) AS PO_NO_STATUS 	/* 구매 0단가 여부 */             
						, X.ORD_FLAG
						, X.ORD_DAYS_FLAG
						, NVL(X.HEAD_CREDIT_YN, 'N') AS HEAD_YN
						, X.MAIN_UPJANG
						, NVL(X.CREDIT_YN, 'N') AS CREDIT_YN
						, X.AP_UNITPRICE_UPJANG
				FROM
						(
							SELECT
		  		  				  :itemCode AS ITEM_CODE
								, NVL(C.ITEM_NAME, :itemName) AS ITEM_NAME
								, NVL(C.ITEM_SIZE, :itemSize) AS ITEM_SIZE
								, NVL(C.ITEM_UNIT, :itemUnit) AS ITEM_UNIT
								, :prQty AS PR_QTY
								, :subinvCode AS SUBINV_CODE
								,  A.SUBINV_NAME
								, :needDate AS NEED_DATE
	    						, <#if prRemark?has_content> :prRemark <#else> ''</#if> AS PR_REMARK
								, B.CENTER_CODE
								, :prDate AS PR_DATE
								, A.UPJANG AS RC_UPJANG
								, A.INVAT_FLAG
								, A.OUTVAT_FLAG
								, A.STOCK_FLAG
								, C.MIN_ORD_QTY
								, C.MAX_ORD_QTY
								, C.MULTIPLIER_QTY
								, C.POINT_FLAG
								, P3.D_DAYS
								, P3.D_TIMES
								, FMO_SO_PR_CUSTCD_FUN2(B.CENTER_CODE, A.UPJANG, :itemCode, :needDate) AS CUSTCD		/* 입고일자 추가 */
								, P1.OPER_ORG_SN_PURC
								, (SELECT COUNT(*) 
		   							FROM PO_CONTRACT_FSALE 
		   							WHERE  CENTER_CODE = B.CENTER_CODE
									AND    UPJANG = (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG = A.UPJANG)	/* 단가계약업장 기준 */	   			
		   							AND    ITEM_CODE = :itemCode
		   							--AND    CONTRACT_START <= :needDate		
		   							AND    :needDate BETWEEN CONTRACT_START AND NVL(CONTRACT_END, '99999999') 		
		   							AND    USE_YN = 'Y'
		  							AND    CONTRACT_PRICE > 0
		   							AND    SALE_PRICE > 0
		  							) AS PO_CNT		/* 판매단가 정보 여부 */
		  						, DECODE(NVL(B.CENTER_CODE, ''), '', 'E', 'S') AS CEN_FLAG	/* 센터정보가 없으면 E : 오류 */
		  						, NVL(A.FLAG,'E') AS SUB_FLAG											/* 창고정보 여부 : 오류 E */ 
		  						, CASE WHEN NVL(A.BUDDEPT_ID,'') = '' THEN 'E1'
		  			 				ELSE (CASE WHEN NVL(A.ACCTCD,'') = '' THEN 'E2' ELSE 'S' END)
		  		  					END AS SUB_INFO_FLAG	 												/* 창고정보 예산통제부서(E1), 계정여부(E2) */
		  						, NVL(C.FLAG,'E') AS ITEM_FLAG											/* 자재정보 여부 : 오류 E */ 
		  						--, NVL(TO_CHAR(T.CUSTCD),'E') AS CUS_FLAG 						/* 남품업체정보 여부 : 오류 E */ 
		  						-- 2015-12-23 : 창고별 주문통제 요일(공통 추가)
		  						--, CASE WHEN NVL(O1.CONSUM_YN,'1') = '1' THEN 'N'
		  		  				--	ELSE (CASE WHEN NVL(O1.CONSUM_YN,'N') = 'Y' THEN FMP_GETORDCTRL_FUN(A.UPJANG, :needDate, '입고', '소모품')
		  		  		  		--				ELSE  FMP_GETORDCTRL_FUN(A.UPJANG, :needDate, '입고', '식자재')
		  		  		  		--				END) 
		  		  				--	END AS ORD_FLAG														/* 업장별 입고통제요일 여부 : Y(통제) */
		  		  				, CASE WHEN NVL(O1.CONSUM_YN,'1') = '1' THEN FMP_GETORDCTRL_FUN(A.UPJANG, :needDate, '입고', '공통')
		  		  						ELSE (CASE WHEN O1.CONSUM_YN = 'Y' THEN FMP_GETORDCTRL_FUN(A.UPJANG, :needDate, '입고', '소모품')
		  		  								ELSE FMP_GETORDCTRL_FUN(A.UPJANG, :needDate, '입고', '식자재') END)
		  		  						END AS ORD_FLAG														/* 업장별 입고통제요일 여부 : Y(통제) */
		  						, FMP_GETORDCTRL_DAYS_FUN(A.UPJANG, :needDate) AS ORD_DAYS_FLAG		/* 업장별 주문통제일자 여부 : Y(통제) */
		  						, U.HEAD_CREDIT_YN														/* 본사통합여신여부 */
		  						, U.MAIN_UPJANG															/* 본사업장 */
 								, (SELECT  'Y' AS CRD_YN
  				   				  FROM FMS_UPJANG 
 				   				  WHERE UPJANG = NVL((SELECT DECODE(T.HEAD_CREDIT_YN,'N',T.UPJANG,T.MAIN_UPJANG) 
				     												FROM FMS_UPJANG T 
				     												WHERE T.UPJANG = A.UPJANG
				     												AND    T.CREDIT_CONTROL_YN = 'Y'),-1)
 									AND CREDIT_CONTROL_YN = 'Y'
 									AND (CREDIT_TURN_CONTROL_YN = 'Y' OR CREDIT_AMOUNT_CONTROL_YN = 'Y')		           	
									) AS CREDIT_YN															/* 여신관리여부 */            	
								, (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG = A.UPJANG) AS AP_UNITPRICE_UPJANG /* 단가계약업장 GET */		
						FROM DUAL LEFT JOIN 
														/* 창고정보 조회 */
														(SELECT   SUBINV_CODE  
					    											, SUBINV_NAME
					    											, UPJANG
					    											, BUDCC_CD AS BUDDEPT_ID
					    											, MATERIAL_ACCTCD AS ACCTCD
					    											, INVAT_FLAG
					    											, OUTVAT_FLAG
					    											, STOCK_FLAG
					    											, 'S' AS FLAG
				 										FROM HLDC_PO_SUBINVENTORY 
				 										WHERE SUBINV_CODE = :subinvCode)  A ON 1 = 1
														/* 센터 조회 */ 
			   								LEFT JOIN HLDC_PO_UPJANG_CENTER B ON A.UPJANG =  B.UPJANG
			   								LEFT JOIN 
														/* 자재마스터 조회 */
														(SELECT   ITEM_CODE
					    											, ITEM_NAME
					    											, ITEM_SIZE
					    											, PO_UOM AS ITEM_UNIT
					    											, MULTIPLIER_QTY
					    											, POINT_FLAG
					    											, NVL(MIN_ORD_QTY, 0) AS MIN_ORD_QTY
					    											, NVL(MAX_ORD_QTY, 0) AS MAX_ORD_QTY
					    											, 'S' AS FLAG
														FROM HLDC_PO_ITEM_MST
														WHERE ITEM_CODE = :itemCode
														) C ON 1 = 1
											LEFT JOIN PO_PREORDER_LIST P3 ON B.CENTER_CODE = P3.CENTER_CODE
								    													AND C.ITEM_CODE = P3.ITEM_CODE
														/* 구매 수발주 제한 */
											LEFT JOIN HLDC_PO_CENTER P1 ON B.CENTER_CODE = P1.CENTER_CODE
														/* 주문통제 제한(FMP_ORD_CTRL) */
											LEFT JOIN FMS_SUBINVENTORY O1 ON A.SUBINV_CODE = O1.SUBINV_CODE
											LEFT JOIN FMS_UPJANG U ON B.UPJANG = U.UPJANG
						) X LEFT JOIN VO_FC_VENDOR P2 ON X.CUSTCD = P2.VD_CD
								/* PO_CONTRACT_FSALE 연계 */
				 			LEFT JOIN PO_CONTRACT_FSALE CON ON CON.CENTER_CODE = X.CENTER_CODE
				 												   			    AND CON.UPJANG = X.AP_UNITPRICE_UPJANG		/* 단가계약업장 기준 */
				 												    			AND CON.CUSTCD = X.CUSTCD
		   																		AND CON.ITEM_CODE = :itemCode
		   																		AND :needDate BETWEEN CON.CONTRACT_START AND CON.CONTRACT_END 		
		   																		AND CON.USE_YN = 'Y'
		  																		AND CON.CONTRACT_PRICE > 0
		   																		AND CON.SALE_PRICE > 0
		   																		AND ROWNUM <= 1
		) T				   																		
		]]>
	</statement>


	<!-- 기존 구매신청번호를 GET한다 -->
	<statement name="selectPrInfo" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectPrInfo */
		<![CDATA[
	   SELECT
			  PR_NUM
			, APPROVE_NUM AS AP_NUM
	   FROM  SO_PR
	   WHERE PR_DATE = :prDate 
	   AND    NEED_DATE = :needDate
       AND    SUBINV_CODE = :subinvCode
       AND    RC_UPJANG = :rcUpjang
       AND    SO_STATUS = '001'			/* 조건 : 신청저장 */
       AND    ROWNUM <= 1
       AND    PO_TYPE IN ('07','29', '97')
       
       ORDER  BY PR_NUM DESC
		]]>
	</statement>


	<!-- 주문신청(을)를 등록한다. -->
	<!-- OP_PRICE, OP_RATE를 재계산하여 저장한다.(2015-09-21) -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.insert */
		<![CDATA[
		INSERT INTO SO_PR	( 	
	      PR_ID 	
	    , PR_NUM 	
	    , PR_DATE 	
	    , PR_DEPT_ID 	
	    , PR_UPJANG 	
	    , PR_SABUN 	
	    , APPROVER 	
	    , APPROVE_TIME 	
	    , APPROVE_NUM 	
	    , PO_TYPE 	
	    , DOCU_SOURCE 	
	    , CUSTCD 	
	    , SUBINV_CODE 	
	    , RC_MU_CD 	
	    , RC_DEPT_ID 	
	    , RC_UPJANG 	
	    , ACCTCD
	    , BUDDEPT_ID 	
	    , BUD_CLS 	
	    , CENTER_CODE 	
	    , ITEM_CODE 	
	    , ITEM_NAME 	
	    , ITEM_SIZE 	
	    , PO_UOM 	
	    , TAX_CODE 	
	    , CENTER_FLAG 	
	    , UNIT_PRICE 	
	    , MARGIN_PRICE 	
	    , SALE_PRICE
        , STRATEGY_PRICE			/* 전략단가 */
        , PLANNING_PRICE			/* 기획단가 */
        , SUBSIDY_PRICE				/* 장려단가 : SO_PR 생성 시 신규로 생성 */
        , OP_RATE						/* 운영율 */
        , OP_PRICE						/* 운영단가 */
	    , PR_QTY 	
	    , PO_QTY 	
	    , NEED_DATE 	
	    , INVAT_FLAG 	
	    , OUTVAT_FLAG 	
	    , PR_REMARK 
	    , PO_REMARK 	
	    , LINE_STATUS
	    , SO_STATUS 	
	    , VD_SN
	    , APPLY_SD
	    , UPJANG_GRP
	    , CREATE_BY 	
	    , CREATE_DATE 	
	    , UPDATE_BY 	
	    , UPDATE_DATE
	    , T_ORDER 	
		) 
		SELECT
	      SO_PR_S.NEXTVAL  AS PR_ID
	    , 'S'||:loginSabun /*임시 생성 번호*/  
	    , :prDate	 AS PR_DATE
	    --, :prDeptId AS PR_DEPT_ID
	    , (SELECT DEPT_ID FROM ST_UPJANG WHERE UPJANG = :prUpjang) AS PR_DEPT_ID	/* 신청업장의 부서정보 등록 */
	    , :prUpjang AS PR_UPJANG
	    , :loginSabun AS PR_SABUN	
	    , :loginSabun AS APPROVER
	    , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') AS APPROVE_TIME
	    , :approveNum AS APPROVE_NUM
	    , :poType AS PO_TYPE			
	    , '01 BO' AS DOCU_SOURCE
	    , :custCd AS CUSTCD
	    , :subinvCode AS SUBINV_CODE
	    , :rcMuCd AS RC_MU_CD
	    , :rcDeptId AS RC_DEPT_ID
	    , :rcUpjang AS RC_UPJANG
	    , <#if acctcd?has_content> :acctcd <#else> ''</#if> AS ACCTCD
	    , <#if buddeptId?has_content> :buddeptId <#else> ''</#if> AS BUDDEPT_ID
	    , <#if acctcd?has_content> :acctcd <#else> ''</#if> AS BUD_CLS
	    , :centerCode AS CENTER_CODE
	    , :itemCode AS ITEM_CODE
	    , :itemName AS ITEM_NAME
	    , :itemSize AS ITEM_SIZE
	    , :itemUnit AS PO_UOM
	    , :taxCode AS TAX_CODE
	    , :centerFlag AS CENTER_FLAG
	    , :unitPrice AS UNIT_PRICE
	    , :unitPrice AS MARGIN_PRICE
	    , :salePrice AS SALE_PRICE
        , NVL(:strategyPrice, 0) AS STRATEGY_PRICE		/* 전략단가 */
        , NVL(:planningPrice, 0) AS PLANNING_PRICE	/* 기획단가 */
       -- , (CASE WHEN NVL(X.SUBSIDY_RATE, 0) = 0 THEN 0
       --    ELSE 10 * CEIL(NVL(:salePrice, 0) / (1 - (NVL(X.SUBSIDY_RATE, 0) / 100)) / 10)
       --    END) AS SUBSIDY_PRICE			        /* 장려단가 : SO_PR 생성 시 신규로 생성(구) */
		, CASE WHEN NVL(:salePrice, 0) = 0 THEN 0
				ELSE (NVL(:salePrice, 0) - ROUND(NVL(:salePrice, 0) / (1 + (NVL(X.SUBSIDY_RATE,0) / 100))))
		  END AS SUBSIDY_PRICE			/* 장려금 : SO_PR 생성 시 신규로 생성 */
		, FMU_OP_RATE_FUN(:rcUpjang, :itemCode, :needDate) AS OP_RATE						/* 운영율 */
		, FMU_OP_PRICE_FUN(:rcUpjang, :itemCode, :salePrice, :needDate) AS OP_PRICE		/* 운영단가 */
        --, NVL(:opPrice, 0)	 AS OP_PRICE				/* 운영단가 */
	    , :prQty AS PR_QTY
	    , :prQty AS PO_QTY
	    , :needDate AS NEED_DATE
	    , :invatFlag AS INVAT_FLAG
	    , :outvatFlag AS OUTVAT_FLAG
	    , <#if prRemark?has_content> :prRemark <#else> ''</#if> AS PR_REMARK
	    , TO_CHAR(SYSDATE,'YYYYMMDDHH24MI')||'-'||:loginSabun
	    , '999' AS LINE_STATUS
	    , :soStatus AS SO_STATUS	
	    , :vdSn AS VD_SN
	    , :applySd AS APPLY_SD
	    , :upjangGrp AS UPJANG_GRP
	    , :loginSabun AS CREATE_BY
	    , SYSDATE AS CREATE_DATE
	    , :loginSabun AS UPDATE_BY
	    , SYSDATE AS UPDATE_DATE
	    , <#if tOrder?has_content> :tOrder <#else> ''</#if> AS T_ORDER
	FROM DUAL LEFT JOIN (
										/* 장려율 */
										SELECT
											 (CASE WHEN :taxCode = '100' THEN FMS_ITEM_SALE_RATE_FUN(:rcUpjang, :subinvCode, '003', :itemCode, :needDate, 'SALE_RATE') 
											 		  ELSE FMS_ITEM_SALE_RATE_FUN(:rcUpjang, :subinvCode, '003', :itemCode, :needDate, 'NOSALE_RATE')
											 END) AS SUBSIDY_RATE
										FROM DUAL
									) X ON 1 = 1
	  ]]>
	</statement>


	<!-- 판매단가에 운영율 및 단가를 UPDATE한다. -->
	<statement name="updateOpPrice" type="update">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.updateOpPrice */
		<![CDATA[
		UPDATE PO_CONTRACT_FSALE A
		SET   A.OP_RATE = FMU_OP_RATE_FUN(:rcUpjang, :itemCode, :needDate)					/* 운영율 */
      		  , A.OP_PRICE = FMU_OP_PRICE_FUN(:rcUpjang, :itemCode, :salePrice, :needDate)	/* 운영단가 */
		WHERE A.CENTER_CODE = :centerCode
		AND    A.UPJANG = :rcUpjang
		AND    A.ITEM_CODE = :itemCode
		AND    :needDate BETWEEN A.CONTRACT_START AND A.CONTRACT_END
		]]>
	</statement>

	<!-- 엑셀업로드에 대한 주문신청(을)를 등록한다. -->
	<!-- OP_PRICE, OP_RATE를 재계산하여 저장한다.(2015-09-21) -->
	<statement name="insert2" type="insert">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.insert2 */
		<![CDATA[
		INSERT INTO SO_PR	( 	
	      PR_ID 	
	    , PR_NUM 
	    , PR_DATE 	
	    , PR_DEPT_ID 	
	    , PR_UPJANG 	
	    , PR_SABUN 	
	    , APPROVER 	
	    , APPROVE_TIME 	
	    , APPROVE_NUM 	
	    , PO_TYPE 	
	    , DOCU_SOURCE 	
	    , CUSTCD 	
	    , SUBINV_CODE 	
	    , RC_MU_CD 	
	    , RC_DEPT_ID 	
	    , RC_UPJANG 	
	    , ACCTCD
	    , BUDDEPT_ID 	
	    , BUD_CLS
	    , CENTER_CODE 	
	    , ITEM_CODE 	
	    , ITEM_NAME 	
	    , ITEM_SIZE 	
	    , PO_UOM 	
	    , TAX_CODE 	
	    , CENTER_FLAG 	
	    , UNIT_PRICE 	
	    , MARGIN_PRICE 	
	    , SALE_PRICE
        , STRATEGY_PRICE			/* 전략단가 */
        , PLANNING_PRICE			/* 기획단가 */
        , SUBSIDY_PRICE				/* 장려단가 : SO_PR 생성 시 신규로 생성 */
        , OP_RATE						/* 운영율 */
        , OP_PRICE						/* 운영단가 */
	    , PR_QTY 	
	    , PO_QTY 	
	    , NEED_DATE 	
	    , INVAT_FLAG 	
	    , OUTVAT_FLAG 	
	    , PR_REMARK 	
	    , PO_REMARK               /* 식재 등록 표시     YYYYMMDDHH24MIS + 사번*/
	    , LINE_STATUS
	    , SO_STATUS 	
	    , VD_SN
	    , APPLY_SD
	    , FROM_TYPE
	    , UPJANG_GRP
	    , CREATE_BY 	
	    , CREATE_DATE 	
	    , UPDATE_BY 	
	    , UPDATE_DATE 	
		) 
	SELECT
	      SO_PR_S.NEXTVAL  AS PR_ID			/* 구매신청LINE ID */
	    , 'S'||:loginSabun 					/* 구매신청LINE NUM(임시) */
	    , :prDate  AS PR_DATE				/* 구매신청일자 */
	    , (SELECT DEPT_ID FROM ST_UPJANG WHERE UPJANG = :prUpjang) AS PR_DEPT_ID	/* 신청업장의 부서정보 등록 */
	    , :prUpjang AS PR_UPJANG			/* 구매신청업장 : 로그인 UPJANG */
	    , :loginSabun AS PR_SABUN			/* 구매신청사번 : 로그인 사용자 */
	    , :loginSabun AS APPROVER			/* 승인자 : 로그인 사용자 */
	    , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') AS APPROVE_TIME	/* 승인년월일시분초 */
	    , :approveNum AS APPROVE_NUM		/* 신청승인번호 */
	    , :poType AS PO_TYPE					/* 구매유형 */
	    , '01 BO' AS DOCU_SOURCE			/* 문서유형 : 고정 */
	    , F.CUSTCD									/* 거래처코드 : PO_CONTRACT_FSALE */
	    , :subinvCode AS SUBINV_CODE		/* 창고코드 */	
	    , S.RC_MU_CD								/* 검수 MU_CD  : HLDC_SC_DEPT_V */
	    , S.RC_DEPT_ID							/* 검수 DEPT_ID : HLDC_PO_SUBINVENTORY.CC_CD */
	    , :rcUpjang AS RC_UPJANG			/* 검수 UPJANG : HLDC_PO_SUBINVENTORY.UPJANG */
	    , S.ACCTCD 								/* 계정코드 : HLDC_PO_SUBINVENTORY.MATERIAL_ACCTCD */
	    , S.BUDDEPT_ID							/* 예산통제부서 : HLDC_PO_SUBINVENTORY.BUDCC_CD */
	    , S.ACCTCD AS BUD_CLS 				/* 계정과목 : HLDC_PO_SUBINVENTORY.MATERIAL_ACCTCD */
	    , :centerCode AS CENTER_CODE		/* 센터코드 */
	    , :itemCode AS ITEM_CODE			/* 자재코드 */
	    , :itemName AS ITEM_NAME			/* 자재명 */
	    , :itemSize AS ITEM_SIZE				/* 규격 */
	    , :itemUnit AS PO_UOM				/* 단위 */
	    , P.TAX_CODE								/* 과세구분코드 : HLDC_PO_ITEM_MST */
        , F.CENTER_FLAG							/* 센터경유 */
	    , NVL(F.CONTRACT_PRICE, 0) AS UNIT_PRICE		/* 구매단가 : PO_CONTRACT_FSALE.CONTRACT_PRICE */
	    , NVL(F.CONTRACT_PRICE_S, 0) AS MARGIN_PRICE	/* 출하단가 : PO_CONTRACT_FSALE.CONTRACT_PRICE_S */ 
	    , NVL(F.SALE_PRICE, 0) AS SALE_PRICE						/* 판매단가 : PO_CONTRACT_FSALE.SALE_PRICE */ 
       	, NVL(F.STRATEGY_PRICE, 0) AS STRATEGY_PRICE			/* 전략단가 : PO_CONTRACT_FSALE.STRATEGY_PRICE */
       	, NVL(F.PLANNING_PRICE, 0) AS PLANNING_PRICE		/* 기획단가 : PO_CONTRACT_FSALE.PLANNING_PRICE */
        --, (CASE WHEN NVL(P.SUBSIDY_RATE, 0) = 0 THEN 0
        --   ELSE 10 * CEIL(NVL(F.SALE_PRICE, 0) / (1 - (NVL(P.SUBSIDY_RATE, 0) / 100)) / 10)
        --   END) AS  SUBSIDY_PRICE			        					/* 장려단가 : SO_PR 생성 시 신규로 생성(구) */
		, CASE WHEN NVL(F.SALE_PRICE, 0) = 0 THEN 0
				ELSE (NVL(F.SALE_PRICE, 0) - ROUND(NVL(F.SALE_PRICE, 0) / (1 + (NVL(P.SUBSIDY_RATE,0) / 100))))
		  END AS SUBSIDY_PRICE			/* 장려금 : SO_PR 생성 시 신규로 생성 */
        --, NVL(F.OP_PRICE, 0) AS OP_PRICE								/* 운영단가 : PO_CONTRACT_FSALE.OP_PRICE */
		, NVL(FMU_OP_RATE_FUN(:rcUpjang, :itemCode, :needDate),0) AS OP_RATE						/* 운영율 */
		, NVL(FMU_OP_PRICE_FUN(:rcUpjang, :itemCode, NVL(F.SALE_PRICE, 0), :needDate),0) AS OP_PRICE		/* 운영단가 */
	    , :prQty AS PR_QTY						/* 신청수량 */
	    , :prQty AS PO_QTY						/* 구매수량 */
	    , :needDate AS NEED_DATE			/* 입고예정일 */
	    , :invatFlag AS INVAT_FLAG			/* 의제매입여부 */
	    , :outvatFlag AS OUTVAT_FLAG		/* 불공제매입여부 */
	    , :prRemark AS PR_REMARK			/* 신청내용 */
	    , TO_CHAR(SYSDATE,'YYYYMMDDHH24MI')||'-'||:loginSabun
	    , '999' AS LINE_STATUS				/* 라인상태 IF용 002 */
	    , '999' AS SO_STATUS				/* SO상태(신청저장:999 - 엑셀업로드) */
	    , NVL(F.VD_SN, P2.VD_SN) AS VD_SN		/* 업체일련번호 : VO_FC_VENDOR */
        , F.APPLY_SD								/* 구매계약시작일자 : PO_CONTRACT_FSALE */
	    , 'Y' AS FROM_TYPE		/* 소스유형 : 엑셀업로드(Y) */
        , F.UPJANG_GRP								/* 구매계약업장군 : PO_CONTRACT_FSALE */
	    , :loginSabun AS CREATE_BY
	    , SYSDATE AS CREATE_DATE
	    , :loginSabun AS UPDATE_BY
	    , SYSDATE AS UPDATE_DATE
	FROM DUAL LEFT JOIN (
										SELECT
						  					  A.UPJANG AS RC_UPJANG
											, A.CC_CD AS RC_DEPT_ID
											, B.MU_CD AS RC_MU_CD
											, A.BUDCC_CD AS BUDDEPT_ID
											, A.MATERIAL_ACCTCD AS ACCTCD
					 					FROM  HLDC_PO_SUBINVENTORY A INNER JOIN HLDC_SC_DEPT_V B ON A.CC_CD = B.CC_CD
					 					WHERE A.SUBINV_CODE = :subinvCode
										 ) S ON 1 = 1
			  		  LEFT JOIN (
			  		  					/* 과세코드 및 장려율을 구함 */
			  		  					SELECT 
						    				   TAX_CODE
											 , (CASE WHEN TAX_CODE = '100' THEN FMS_ITEM_SALE_RATE_FUN(:rcUpjang, :subinvCode, '003', :itemCode, :needDate, 'SALE_RATE') 
											 		  ELSE FMS_ITEM_SALE_RATE_FUN(:rcUpjang, :subinvCode, '003', :itemCode, :needDate, 'NOSALE_RATE')
											    END) AS SUBSIDY_RATE
					 					FROM HLDC_PO_ITEM_MST
					 					WHERE ITEM_CODE = :itemCode
					 				) P ON 1 = 1
			  		LEFT JOIN (						 
										SELECT  
											  C.ITEM_CODE
						  					, C.CONTRACT_PRICE
						  					, C.CONTRACT_PRICE_S
						  					, C.CENTER_FLAG
						  					, C.CUSTCD
		  				  					, C.SALE_PRICE			/* 판매단가 */		
		  				  					, C.STRATEGY_PRICE		/* 전략단가 */
		  				  					, C.PLANNING_PRICE	/* 기획단가 */
		  				  					, C.SUBSIDY_PRICE		/* 장려단가 */
		  				  					, C.OP_PRICE				/* 운영단가 */
						  					, C.CENTER_CODE
						  					, C.APPLY_SD				/* 구매계약_시작일자 */
						  					, C.VD_SN					/* 업체_일련번호 */
						  					, C.UPJANG_GRP			/* 업장군코드 */
									FROM PO_CONTRACT_FSALE C INNER JOIN (
																								SELECT /*+ INDEX(A PO_CONTRACT_FSALE_PK) */
									 																		  A.CENTER_CODE
																											, A.UPJANG
																											, A.ITEM_CODE
																											, MAX(A.CONTRACT_START) AS CONTRACT_START
																								FROM PO_CONTRACT_FSALE A
																								WHERE  A.CENTER_CODE = :centerCode		/* 조건 : 센터코드 */
							 																	AND     A.UPJANG = (SELECT AP_UNITPRICE_UPJANG FROM ST_UPJANG WHERE UPJANG = :rcUpjang)		/* 조건 : 단가계약업장 */
							 																	AND     A.ITEM_CODE = :itemCode				/* 조건 : 자재코드 */					
							 																	--AND     A.CONTRACT_START <= :needDate	/* 조건 : 기준일자 */
							 																	AND     :needDate BETWEEN A.CONTRACT_START AND A.CONTRACT_END 	/* 조건 : 기준일자 */
							 																	AND     A.USE_YN = 'Y'
																								GROUP BY A.CENTER_CODE, A.UPJANG, A.ITEM_CODE
																								) D  ON C.CENTER_CODE = D.CENTER_CODE
																									AND C.UPJANG         = D.UPJANG
																									AND C.ITEM_CODE    = D.ITEM_CODE
																									AND C.CONTRACT_START = D.CONTRACT_START
									WHERE C.USE_YN  = 'Y'
									AND    C.CONTRACT_PRICE > 0
									AND    C.SALE_PRICE > 0
								) F ON 1 = 1
					LEFT JOIN VO_FC_VENDOR P2 ON F.CUSTCD = P2.VD_CD								/* 구매정보 : 업체일련번호 */
					LEFT JOIN PO_PREORDER_LIST P3 ON F.CENTER_CODE = P3.CENTER_CODE		/* 구매 : 선발주 정보 */
									    						AND F.ITEM_CODE = P3.ITEM_CODE
	  ]]>
	</statement>

	<!-- 판매단가에 운영율 및 단가를 UPDATE한다. ( 엑셀 업로드용)-->
	<statement name="updateOpPrice2" type="update">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.updateOpPrice2 */
		<![CDATA[
		UPDATE PO_CONTRACT_FSALE A
		SET   A.OP_RATE = FMU_OP_RATE_FUN(:rcUpjang, :itemCode, :needDate)										/* 운영율 */
      		  , A.OP_PRICE = FMU_OP_PRICE_FUN(:rcUpjang, :itemCode,  NVL(A.SALE_PRICE, 0), :needDate)	/* 운영단가 */
		WHERE A.CENTER_CODE = :centerCode
		AND    A.UPJANG = :rcUpjang
		AND    A.ITEM_CODE = :itemCode
		AND    :needDate BETWEEN A.CONTRACT_START AND A.CONTRACT_END
		]]>
	</statement>


	<!-- 주문신청(을)를 수정한다. -->
	<statement name="update" type="update">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.update */
		<![CDATA[
		UPDATE SO_PR 
		SET    PR_QTY = :prQty
			   , PO_QTY = :prQty
			   <#if poType == '29' || poType == '97'>		
			   /* 구매유형 NO_단가 일 경우에는 판매가를 UPDATE */
			   , SALE_PRICE = :salePrice
			   </#if>
			   , PR_REMARK = :prRemark
		       , SO_STATUS = DECODE(:prQty, 0, '003', '001')		/* 수량이 0이면 신청취소(003)로 그외 신청저장(001) SET */
		       /* 결의관련 항목 CLEAR START */
		       , PO_ID = NULL				
		       , PO_NUM = ''
		       , PO_DATE = ''
		       , PO_DEPT_ID = ''
		       , PO_SABUN = ''
		       , PO_REMARK = ''		
		       /* 결의관련 항목 END */
		       , APPROVER = :loginSabun
		       , APPROVE_TIME = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		       , UPDATE_BY = :loginSabun
		       , UPDATE_DATE = SYSDATE
		       , T_ORDER = :tOrder
		WHERE  PR_ID = :prId
		AND     SO_STATUS IN ( '001', '003', '005')		/* 조건 : 진행상태가 신청저장(001), 신청취소(003), 결의반려(005) 만 */
		]]>
	</statement>

	<!-- 주문신청(을)를 삭제한다.(자재별) -->
	<statement name="delete" type="delete">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.delete */
		<![CDATA[
		UPDATE SO_PR SET 
		 LINE_STATUS = '003'
		,SO_STATUS = '003'
		, UPDATE_BY = :loginSabun
        , UPDATE_DATE = SYSDATE
		WHERE  PR_ID = :prId
		AND     SO_STATUS IN ('001')		/* 조건 : 진행상태가 신청저장(001) 만 */
		]]>
	</statement>


	<!-- 주문신청서(을)를 삭제한다. -->
	<statement name="deletePr" type="update">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.deletePr */
		<![CDATA[
		UPDATE SO_PR
		SET LINE_STATUS = '003'
		  , SO_STATUS = '003'
		  , UPDATE_BY = :loginSabun
          , UPDATE_DATE = SYSDATE
		WHERE  PR_NUM = :prNum
		<#if prId?has_content>AND PR_ID = :prId</#if>
		AND PO_TYPE IN ('07','29', '97')
		]]>
	</statement>

	<!-- 주문신청(을)서를 주문번호 생성 규칙에 따라 리스트를 조회한다. (업장,거래처,입고일) -->
	<statement name="selectPrGroup" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.selectPrGroup */
		<![CDATA[
	SELECT RC_UPJANG,								/*	업장		*/
	       NEED_DATE,								/*	입고일		*/
	       MAX(CENTER_CODE) AS CENTER_CODE,			/*	센터		*/
	       --MAX(SUBINV_CODE) AS SUBINV_CODE,			/*	창고		*/
	       MAX(PO_TYPE) AS PO_TYPE,					/*	구매유형	*/
	       MAX(PR_SABUN) AS PR_SABUN,				/*	신청자사번	*/
	       :loginSabun LOGIN_SABUN,					/*	로그인사번	*/
	       :loginUserid LOGIN_USERID,				/*	로그안아이디*/
	       :loginPersMask LOGIN_PERS_MASK,			/*	로그인		*/
	       '' PR_NUM,
	       '' RTN_CD,
	       '' RTN_MSG
	  FROM SO_PR 
 	 WHERE 1=1 
 	   AND PR_NUM = 'S'||:loginSabun
       AND NEED_DATE = :needDate 
       AND PO_TYPE= :poType
     GROUP BY RC_UPJANG, NEED_DATE
		]]>
	</statement>

	<!-- 주문신청(을)서를 주문번호 생성 규칙에 따라 PR_NUM을 업데이트한다. (업장,거래처,입고일) -->
	<statement name="prNumUpdate" type="update">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.prNumUpdate */
		<![CDATA[
	UPDATE SO_PR SET
	       PR_NUM = :prNum
	       ,SO_STATUS = '001'
	       ,LINE_STATUS = '002'
 	 WHERE PR_NUM = 'S'||:loginSabun
 	   AND RC_UPJANG = :rcUpjang
 	   <#if custcd?has_content>AND CUSTCD = :custcd</#if>
       <#if centerCode?has_content>AND CENTER_CODE = :centerCode</#if>
       AND NEED_DATE = :needDate
       <#if subinvCode?has_content>AND SUBINV_CODE = :subinvCode</#if>
       AND PO_TYPE= :poType 
       AND SO_STATUS = '999'  
		]]>
	</statement>

	<!-- 주문신청(을)서를 주문번호 생성 규칙에 따라 PR_NUM을 업데이트한다. (구매 IF 결과 UPDATE) -->
	<statement name="prNumUpdateIF" type="update">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestDAO.prNumUpdateIF */
		<![CDATA[
	UPDATE SO_PR SET
		   O_RTN_CD  = :rtnCd
	      ,O_RTN_MSG = :rtnMsg
	      <#if rtnCd != 'S000'>,LINE_STATUS = '003'</#if>
	      <#if rtnCd != 'S000'>,SO_STATUS = '003'</#if>
	      <#if rtnCd != 'S000'>,PR_REMARK = :rtnMsg</#if>
 	 WHERE PR_NUM = :prNum
 	 AND PO_TYPE IN ('07','29', '97')
 		]]>
	</statement>

	<!-- HLDC_PO_PO 구매 상태값을 조회 한다. -->
	<statement name="lineStatusSelect" type="select">
		/*+
		com.hwfs.fm.fmo.dao.OrderRequestConfirmModifyDAO.lineStatusSelect
		*/
		<![CDATA[
			SELECT LINE_STATUS FROM HLDC_PO_PO
			WHERE PO_ID= :prId AND PO_NUM = :prNum 
		]]>
	</statement>

	<!-- SO_PR 임시 생성 번호를 삭제 한다. -->
	<statement name="soprDel" type="select">
		/*+ com.hwfs.fm.fmo.dao.OrderRequestConfirmModifyDAO.soprDel */
		<![CDATA[
			DELETE SO_PR
			WHERE PR_NUM = 'S'||:loginSabun
		]]>
	</statement>


</hqml>
