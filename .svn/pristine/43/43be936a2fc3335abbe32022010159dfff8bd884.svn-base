<?xml version="1.0" encoding="euc-kr"?>
<query dynamic="true">
	<type>select</type>
	<description><![CDATA[식재료율실적예상(관리자용)-팀/업장별]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>
SELECT MU_CD
     , MU_NAME
     , TM_CD
     , TM_NAME
     , UPJANG
     , UPJANGNM
     , JOB_NAME
     , SUB_JOB_NAME
     , LOC_NAME
     , SP_AMT
     , SR_AMT
     , SS_AMT
<isEqual col="PRICE_TYPE" value="1">
     , MP_AMT
     , MR_AMT
</isEqual>
<isEqual col="PRICE_TYPE" value="2">
     , NVL(MP_AMT / (MAP_MARGIN_RATE_MGMT_FUN(UPJANG,#START_DATE#) / 100),0) AS MP_AMT
     , NVL(MR_AMT / (MAP_MARGIN_RATE_MGMT_FUN(UPJANG,#START_DATE#) / 100),0) AS MR_AMT
</isEqual>
, MS_AMT
<isEqual col="PRICE_TYPE" value="1">
     , P_RATE
     , R_RATE
</isEqual>
<isEqual col="PRICE_TYPE" value="2">
     , NVL(ROUND(DECODE(SP_AMT, 0, 0, (MP_AMT / (MAP_MARGIN_RATE_MGMT_FUN(UPJANG,#START_DATE#) / 100)) / SP_AMT * 100), 2),0) AS P_RATE   /* 식재료율 - 계획 */
     , NVL(ROUND(DECODE(SR_AMT, 0, 0, (MR_AMT / (MAP_MARGIN_RATE_MGMT_FUN(UPJANG,#START_DATE#) / 100)) / SR_AMT * 100), 2),0) AS R_RATE   /* 식재료율 - 추정 */
</isEqual>
     , S_RATE
     , SS_AMT - SP_AMT AS SDP_VAL                                  /* 매출액 - 계획대비 - 차이 */
     , DECODE(SP_AMT, 0, 0, SS_AMT / SP_AMT * 100) AS SDP_RATE     /* 매출액 - 계획대비 - 비율 */
     , SS_AMT - SR_AMT AS SDR_VAL                                  /* 매출액 - 추정대비 - 차이 */     
     , DECODE(SR_AMT, 0, 0, SS_AMT / SR_AMT * 100) AS SDR_RATE     /* 매출액 - 추정대비 - 비율 */
     , MS_AMT - MP_AMT AS MDP_VAL                                  /* 식재료비 - 계획대비 - 차이 */
     , DECODE(MP_AMT, 0, 0, MS_AMT / MP_AMT * 100) AS MDP_RATE     /* 식재료비 - 계획대비 - 비율 */
     , MS_AMT - MR_AMT AS MDR_VAL                                  /* 식재료비 - 추정대비 - 차이 */
     , DECODE(MR_AMT, 0, 0, MS_AMT / MR_AMT * 100) AS MDR_RATE     /* 식재료비 - 추정대비 - 비율 */
     , S_RATE - P_RATE AS RDP_RATE                                 /* 식재료비율 - 계획대비 - 차이(%P) */
     , S_RATE - R_RATE AS RDR_RATE                                 /* 식재료비율 - 추정대비 - 차이(%P) */
     , IP_RATE AS IP_RATE                                          /* 재고비율 - 계획 */
     , DECODE(MS_AMT, 0, 0, IS_AMT / MS_AMT * 100) AS IS_RATE      /* 재고비율 - 실적 */
     , DECODE(MS_AMT, 0, 0, (IS_AMT / MS_AMT * 100)) - IP_RATE AS IDP_RATE    /* 재고비율 - 계획대비 - 차이(%P) */
     , IS_AMT
     , MS_AMT1
     , MS_AMT2
<isEqual col="GBN" value="1">
     , MS_AMT3
     , EXPECT_SALE
<isEqual col="PRICE_TYPE" value="1">
     , EXPECT_COST
     , EXPECT_RATE
</isEqual>
<isEqual col="PRICE_TYPE" value="2">
     , NVL(EXPECT_COST / (MAP_MARGIN_RATE_MGMT_FUN_2(UPJANG,#START_DATE#) / 100),0) AS EXPECT_COST
     , ROUND(DECODE(NVL(EXPECT_SALE,0),0,0,NVL(EXPECT_COST / (MAP_MARGIN_RATE_MGMT_FUN_2(UPJANG,#START_DATE#) / 100),0) / NVL(EXPECT_SALE,0)) * 100,1) AS EXPECT_RATE
</isEqual>
</isEqual>
<isEqual col="GBN" value="2">
     , 0 AS MS_AMT3    
     , 0 AS EXPECT_SALE
     , 0 AS EXPECT_COST
     , 0 AS EXPECT_RATE
</isEqual> 
<isEqual col="GBN" value="3">
     , MS_AMT3 MS_AMT3
     , EXPECT_SALE
<isEqual col="PRICE_TYPE" value="1">
     , EXPECT_COST
     , EXPECT_RATE
</isEqual>
<isEqual col="PRICE_TYPE" value="2">
     , NVL(EXPECT_COST / (MAP_MARGIN_RATE_MGMT_FUN_2(UPJANG,#START_DATE#) / 100),0) AS EXPECT_COST
     , ROUND(DECODE(NVL(EXPECT_SALE,0),0,0,NVL(EXPECT_COST / (MAP_MARGIN_RATE_MGMT_FUN_2(UPJANG,#START_DATE#) / 100),0) / NVL(EXPECT_SALE,0)) * 100,1) AS EXPECT_RATE
</isEqual>
</isEqual>    
  FROM (	    
        SELECT A.MU_CD
             , A.MU_NAME
             , A.TM_CD
             , A.TM_NAME
             , A.UPJANG
             , A.UPJANGNM
             , A.JOB_NAME
             , A.SUB_JOB_NAME
             , A.LOC_NAME
             , SUM(NVL(B.SP_AMT,0)) AS SP_AMT     /* 매출액 - 식음료매출 계획 */
             , SUM(NVL(B.SR_AMT,0)) AS SR_AMT     /* 매출액 - 식음료매출 추정 */
<isEqual col="SELECT_TYPE" value="1">
    		 , SUM(NVL(C.SS_AMT,0)) AS SS_AMT     /* 매출액 - 식음료매출 실적 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="2">
    		 , SUM(NVL(C.SS_AMT_EST,0)+NVL(B.SR_AMT_EST,0)) AS SS_AMT     /* 매출액 - 식음료매출 실적 */
</isEqual>     
             , SUM(NVL(B.MP_AMT,0)) AS MP_AMT     /* 재료비 - 식음료원가 계획 */
             , SUM(NVL(B.MR_AMT,0)) AS MR_AMT     /* 재료비 - 식음료원가 추정 */
<isEqual col="SELECT_TYPE" value="1">
             , SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0), 0)) AS MS_AMT     /* 재료비 - 식음료매출 실적 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="2">
             , SUM(NVL(E.MS_AMT1_EST,0)+NVL(MR_AMT_EST,0)) - SUM(NVL(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0), 0)) AS MS_AMT     /* 재료비 - 식음료매출 실적 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="1">
			 , SUM(NVL(E.MS_AMT1,0)) AS MS_AMT1   /* 식음료매출 실적 - 전산구매 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="2">
			 , SUM(NVL(E.MS_AMT1_EST,0)+NVL(MR_AMT_EST,0)) AS MS_AMT1   /* 식음료매출 실적 - 전산구매 */
</isEqual>     
			 , SUM(NVL(E.MS_AMT2,0)) AS MS_AMT2   /* 식음료매출 실적 - 현지구매 */
             , SUM(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0)) AS MS_AMT3   /* 식음료매출 실적 - 복리후생식대비 */
             , ROUND(DECODE(SUM(NVL(B.SP_AMT,0)), 0, 0, SUM(NVL(B.MP_AMT,0)) / SUM(NVL(B.SP_AMT,0)) * 100), 2) AS P_RATE   /* 식재료율 - 계획 */
             , ROUND(DECODE(SUM(NVL(B.SR_AMT,0)), 0, 0, SUM(NVL(B.MR_AMT,0)) / SUM(NVL(B.SR_AMT,0)) * 100), 2) AS R_RATE   /* 식재료율 - 추정 */
<isEqual col="SELECT_TYPE" value="1">
             , ROUND(DECODE(SUM(NVL(C.SS_AMT, 0)), 0, 0, (SUM(NVL(E.MS_AMT1, 0)) - SUM(NVL(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0), 0))) / SUM(NVL(C.SS_AMT,0)) * 100), 2) AS S_RATE   /* 식재료율 - 실적 */
</isEqual>     
<isEqual col="SELECT_TYPE" value="2">
             , ROUND(DECODE(SUM(NVL(C.SS_AMT_EST,0)+NVL(B.SR_AMT_EST,0)), 0, 0, (SUM(NVL(E.MS_AMT1_EST,0)+NVL(MR_AMT_EST,0)) - SUM(NVL(DECODE(#GBN#, '1', NVL(G.MS_AMT3,0), '3', NVL(G.MS_AMT3,0), 0), 0))) / SUM(NVL(C.SS_AMT_EST,0)+NVL(B.SR_AMT_EST,0)) * 100), 2) AS S_RATE   /* 식재료율 - 실적 */
</isEqual>     
			 , SUM(NVL(H.IP_RATE,0)) AS IP_RATE
             , SUM(NVL(E.IS_AMT,0)) AS IS_AMT
             , SUM(NVL(J.EXPECT_SALE,0)) AS EXPECT_SALE
             , SUM(NVL(J.EXPECT_COST,0)) AS EXPECT_COST
             , ROUND(DECODE(SUM(NVL(J.EXPECT_SALE,0)),0,0,SUM(NVL(J.EXPECT_COST,0)) / SUM(NVL(J.EXPECT_SALE,0))) * 100,1) AS EXPECT_RATE
          FROM MAC_UPJANG_V A
             , (
		        /* 매출 - 식음료매출 계획(P), 추정(R) */
		        SELECT UPJANG
		             , NVL(SUM(PAMT), 0) AS SP_AMT
		             , NVL(SUM(RAMT), 0) AS SR_AMT
		             , NVL(SUM(MP_AMT), 0) AS MP_AMT
		             , NVL(SUM(MR_AMT), 0) AS MR_AMT
		             , NVL(SUM(PAMT_EST), 0) AS SP_AMT_EST
		             , NVL(SUM(RAMT_EST), 0) AS SR_AMT_EST
		             , NVL(SUM(MP_AMT_EST), 0) AS MP_AMT_EST
		             , NVL(SUM(MR_AMT_EST), 0) AS MR_AMT_EST
		          FROM (
		                SELECT A.UPJANG
		<isEqual col="GBN" value="1">
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS PAMT
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS RAMT
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS MP_AMT
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS MR_AMT
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS PAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS RAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MP_AMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MR_AMT_EST
		</isEqual>
		<isEqual col="GBN" value="2">
                             , CASE WHEN B.ACCT_CD IN ('41201020') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS PAMT
                             , CASE WHEN B.ACCT_CD IN ('41201020') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS RAMT
                             , CASE WHEN B.ACCT_CD IN ('42201020') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS MP_AMT
                             , CASE WHEN B.ACCT_CD IN ('42201020') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS MR_AMT
                             , CASE WHEN B.ACCT_CD IN ('41201020') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS PAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('41201020') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS RAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42201020') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MP_AMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42201020') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MR_AMT_EST
		</isEqual>
		<isEqual col="GBN" value="3">
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS PAMT
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS RAMT
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030','42201020') AND B.DAY_CLASS = 'P' THEN B.DD_AMT ELSE 0 END AS MP_AMT
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030','42201020') AND B.DAY_CLASS = 'R' THEN B.DD_AMT ELSE 0 END AS MR_AMT
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS PAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS RAMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030','42201020') AND B.DAY_CLASS = 'P' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MP_AMT_EST
                             , CASE WHEN B.ACCT_CD IN ('42203010', '42203020', '42203030','42201020') AND B.DAY_CLASS = 'R' AND TO_CHAR(SYSDATE,'YYYYMMDD') &lt;= B.YMD THEN B.DD_AMT ELSE 0 END AS MR_AMT_EST
		</isEqual>
			              FROM MAP_DAY_LOG_MGMT A
		                     , MAP_DAY_PLAN B
		                 WHERE A.UPJANG = B.UPJANG
        <isNotNull col="UPJANG">
		                   AND B.UPJANG = #UPJANG#
		</isNotNull>
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
           AND B.UPJANG IN (#ds_upjangList.UPJANG$#)
</isLessEqual>
</isGreaterThan>
                           AND A.YY = B.YY
		                   AND A.MM = B.MM
		                   AND A.DAY_CLASS = B.DAY_CLASS
		                   AND A.CONFIRM_YN = 'Y'
		                   AND B.YMD BETWEEN #START_DATE# AND #END_DATE#
		<isEqual col="GBN" value="1">
		                   /* 41203010:[매출액]식음료매출_식료, 41203020:[매출액]식음료매출_음료, 41203030:[매출액]식음료매출(FS) */                   
	 	                   /* 42203010:[재료비]식음료원가_식료, 42203020:[재료비]식음료원가_음료, 42203030:[재료비]식음료원가(FS) */
		                   AND B.ACCT_CD IN ('41203010', '41203020', '41203030','42203010', '42203020', '42203030')
		</isEqual>
		<isEqual col="GBN" value="2">
		                   /* 41201020:[매출액]상품매출_슈퍼매점 */
		                   /* 41201020:[재료비]상품원가_슈퍼매점 */
		                   AND B.ACCT_CD IN ('41201020','42201020')    
		</isEqual> 
		<isEqual col="GBN" value="3">
		                   /* 전체 */
		                   AND B.ACCT_CD IN ('41203010', '41203020', '41203030','41201020','42203010', '42203020', '42203030','42201020') 
		</isEqual>                        
                )
         		GROUP BY UPJANG    
               ) B
             , (
		        /* 매출 - 식음료매출 실적 (내부이용포함) */
		        SELECT A.UPJANG_CD AS UPJANG
		             , SUM(B.NET_AMT) AS SS_AMT
		             , SUM(CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD') &gt; B.OCCUR_DATE THEN B.NET_AMT ELSE 0 END) AS SS_AMT_EST /* 추정 */
		          FROM SLA_IF_UPJANG_SALS_MST A
		             , SLA_IF_UPJANG_SALS_DETAIL B
		         WHERE A.OCCUR_DATE = B.OCCUR_DATE
		           AND A.SYS_CLASS = B.SYS_CLASS
		           AND A.UPJANG_CD = B.UPJANG_CD
	               AND B.RECD_STATUS = 'L'
		<isNotNull col="UPJANG">
		           AND A.UPJANG_CD = #UPJANG#
		</isNotNull>
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
           AND A.UPJANG_CD IN (#ds_upjangList.UPJANG$#)
</isLessEqual>
</isGreaterThan>
		           AND A.OCCUR_DATE BETWEEN #START_DATE# AND #END_DATE#
		           AND A.RECEIPT_NUM = B.RECEIPT_NUM
		<isEqual col="GBN" value="1">
	               /* 1103:[FS사업]식음료매출(FS), 1106:[FS사업]기타매출_기타, 1204:[외식사업]식음료매출_식료, 1205:[외식사업]식음료매출_음료, 2001:[매점POS]식음료매출(FS), 2101:[외식POS]식음료매출_식료, 2102:[외식POS]식음료매출_음료 */
         	       AND B.SALS_CLASS IN ('1108','1103', '2001', '2002', '1106', '1204', '1205', '2101', '2102','1901','1113','2003','1206','2103') 
		</isEqual>
		<isEqual col="GBN" value="2">
		           /* 1102:[FS사업]상품매출_슈퍼매점, 1111:[FS사업]상품(-)매출_슈퍼매점, 2004:[매점POS]상품매출_슈퍼매점 */
		           AND B.SALS_CLASS IN ('1102', '1111', '2004') 
		</isEqual>        
		<isEqual col="GBN" value="3">
		          AND B.SALS_CLASS IN ('1108','1103', '2001', '2002', '1106', '1204', '1205', '2101', '2102','1901','1113','2003','1206','2103','1102', '1111', '2004') 
		</isEqual>     
		         GROUP BY A.UPJANG_CD
               ) C
             , (
SELECT TRANS_UPJANG AS UPJANG,
       NVL(SUM(MS_AMT1),0) AS MS_AMT1,
       NVL(SUM(MS_AMT2),0) AS MS_AMT2,
       NVL(SUM(MS_AMT1_EST),0) AS MS_AMT1_EST,
       NVL(SUM(P_AMT+M_AMT+B_AMT),0) AS IS_AMT
  FROM (
SELECT TRANS_UPJANG
		<isEqual col="PRICE_TYPE" value="1">
			<isEqual col="GBN" value="1">
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42203010', '42203020', '42203030') THEN NVL( DECODE(OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42203010', '42203020', '42203030') AND TO_CHAR(SYSDATE,'YYYYMMDD') &gt; TRANS_DATE THEN NVL( DECODE(OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1_EST
			</isEqual>
			<isEqual col="GBN" value="2">
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42201020') THEN NVL( DECODE(OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42201020') AND TO_CHAR(SYSDATE,'YYYYMMDD') &gt; TRANS_DATE THEN NVL( DECODE(OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1_EST
			</isEqual>
			<isEqual col="GBN" value="3">
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42203010', '42203020', '42203030','42201020') THEN NVL( DECODE(OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42203010', '42203020', '42203030','42201020') AND TO_CHAR(SYSDATE,'YYYYMMDD') &gt; TRANS_DATE THEN NVL( DECODE(OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1_EST
			</isEqual>
		</isEqual>
		<isEqual col="PRICE_TYPE" value="2">
			<isEqual col="GBN" value="1">
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42203010', '42203020', '42203030') THEN NVL( DECODE(OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42203010', '42203020', '42203030') AND TO_CHAR(SYSDATE,'YYYYMMDD') &gt; TRANS_DATE THEN NVL( DECODE(OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1_EST
			</isEqual>
			<isEqual col="GBN" value="2">
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42201020') THEN NVL( DECODE(OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42201020') AND TO_CHAR(SYSDATE,'YYYYMMDD') &gt; TRANS_DATE THEN NVL( DECODE(OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1_EST
			</isEqual>
			<isEqual col="GBN" value="3">
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42203010', '42203020', '42203030','42201020') THEN NVL( DECODE(OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1
		    		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'O%' AND TRANS_TYPE &lt;&gt; 'O002' AND ACCTCD IN ('42203010', '42203020', '42203030','42201020') AND TO_CHAR(SYSDATE,'YYYYMMDD') &gt; TRANS_DATE THEN NVL( DECODE(OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT1_EST
			</isEqual>
		</isEqual>
		<isEqual col="PRICE_TYPE" value="1">
			<isEqual col="GBN" value="1">
		       		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'I%' AND PO_TYP = 'BP' AND ITEM_CODE LIKE 'F%' THEN NVL( DECODE(OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT2
			</isEqual>
			<isEqual col="GBN" value="2">
		       		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'I%' AND PO_TYP = 'BP' AND ITEM_CODE LIKE 'A%' THEN NVL( DECODE(OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT2
			</isEqual>
			<isEqual col="GBN" value="3">
		       		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'I%' AND PO_TYP = 'BP' AND (ITEM_CODE LIKE 'A%' OR ITEM_CODE LIKE 'F%') THEN NVL( DECODE(OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT2
			</isEqual>
		</isEqual>
		<isEqual col="PRICE_TYPE" value="2">
			<isEqual col="GBN" value="1">
		       		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'I%' AND PO_TYP = 'BP' AND ITEM_CODE LIKE 'F%' THEN NVL( DECODE(OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT2
			</isEqual>
			<isEqual col="GBN" value="2">
		       		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'I%' AND PO_TYP = 'BP' AND ITEM_CODE LIKE 'A%' THEN NVL( DECODE(OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT2
			</isEqual>
			<isEqual col="GBN" value="3">
		       		 , NVL(SUM(CASE WHEN TRANS_TYPE LIKE 'I%' AND PO_TYP = 'BP' AND (ITEM_CODE LIKE 'A%' OR ITEM_CODE LIKE 'F%') THEN NVL( DECODE(OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END),0) AS MS_AMT2
			</isEqual>
		</isEqual>
		<isEqual col="PRICE_TYPE" value="1">
			<isEqual col="GBN" value="1">
           , SUM(CASE WHEN MATERIAL_ACCTCD = '11402000' AND SUBSTR(TRANS_TYPE, 1, 1) = 'I' THEN NVL( DECODE(OUTVAT_FLAG, 'Y',  MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END) P_AMT
			</isEqual>
			<isEqual col="GBN" value="2">
           , SUM(CASE WHEN MATERIAL_ACCTCD = '11401010' AND SUBSTR(TRANS_TYPE, 1, 1) = 'I' THEN NVL( DECODE(OUTVAT_FLAG, 'Y',  MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END) P_AMT
			</isEqual>
			<isEqual col="GBN" value="3">
           , SUM(CASE WHEN MATERIAL_ACCTCD IN ('11402000','11401010') AND SUBSTR(TRANS_TYPE, 1, 1) = 'I' THEN NVL( DECODE(OUTVAT_FLAG, 'Y',  MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END) P_AMT
			</isEqual>
		</isEqual>
		<isEqual col="PRICE_TYPE" value="2">
			<isEqual col="GBN" value="1">
           , SUM(CASE WHEN MATERIAL_ACCTCD = '11402000' AND SUBSTR(TRANS_TYPE, 1, 1) = 'I' THEN NVL( DECODE(OUTVAT_FLAG, 'Y',  UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END) P_AMT
			</isEqual>
			<isEqual col="GBN" value="2">
           , SUM(CASE WHEN MATERIAL_ACCTCD = '11401010' AND SUBSTR(TRANS_TYPE, 1, 1) = 'I' THEN NVL( DECODE(OUTVAT_FLAG, 'Y',  UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END) P_AMT
			</isEqual>
			<isEqual col="GBN" value="3">
           , SUM(CASE WHEN MATERIAL_ACCTCD IN ('11402000','11401010') AND SUBSTR(TRANS_TYPE, 1, 1) = 'I' THEN NVL( DECODE(OUTVAT_FLAG, 'Y',  UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END) P_AMT
			</isEqual>
		</isEqual>
		<isEqual col="PRICE_TYPE" value="1">
			<isEqual col="GBN" value="1">
           , SUM(CASE WHEN MATERIAL_ACCTCD = '11402000' AND SUBSTR(TRANS_TYPE, 1, 1) = 'O' THEN -1 * NVL( DECODE(OUTVAT_FLAG, 'Y',  MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END) M_AMT
			</isEqual>
			<isEqual col="GBN" value="2">
           , SUM(CASE WHEN MATERIAL_ACCTCD = '11401010' AND SUBSTR(TRANS_TYPE, 1, 1) = 'O' THEN -1 * NVL( DECODE(OUTVAT_FLAG, 'Y',  MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END) M_AMT
			</isEqual>
			<isEqual col="GBN" value="3">
           , SUM(CASE WHEN MATERIAL_ACCTCD IN ('11402000','11401010') AND SUBSTR(TRANS_TYPE, 1, 1) = 'O' THEN -1 * NVL( DECODE(OUTVAT_FLAG, 'Y',  MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), MARGIN_AMOUNT ), 0) ELSE 0 END) M_AMT
			</isEqual>
		</isEqual>
		<isEqual col="PRICE_TYPE" value="2">
			<isEqual col="GBN" value="1">
           , SUM(CASE WHEN MATERIAL_ACCTCD = '11402000' AND SUBSTR(TRANS_TYPE, 1, 1) = 'O' THEN -1 * NVL( DECODE(OUTVAT_FLAG, 'Y',  UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END) M_AMT
			</isEqual>
			<isEqual col="GBN" value="2">
           , SUM(CASE WHEN MATERIAL_ACCTCD = '11401010' AND SUBSTR(TRANS_TYPE, 1, 1) = 'O' THEN -1 * NVL( DECODE(OUTVAT_FLAG, 'Y',  UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END) M_AMT
			</isEqual>
			<isEqual col="GBN" value="3">
           , SUM(CASE WHEN MATERIAL_ACCTCD IN ('11402000','11401010') AND SUBSTR(TRANS_TYPE, 1, 1) = 'O' THEN -1 * NVL( DECODE(OUTVAT_FLAG, 'Y',  UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1), UNIT_AMOUNT ), 0) ELSE 0 END) M_AMT
			</isEqual>
		</isEqual>
		       , SUM(0) AS B_AMT
  FROM (
SELECT A.TRANS_DATE,
       A.TRANS_UPJANG,
       CASE WHEN SUBSTR(A.MOVEMENT_TYP, 0, 1) = '3' AND A.GR_QTY IS NULL THEN 'O002' /* 재고이동 - 이동출고   */
            WHEN SUBSTR(A.MOVEMENT_TYP, 0, 1) = '3' AND A.GR_QTY IS NOT NULL THEN 'I002' /*재고이동 - 이동입고  */
            WHEN A.MOVEMENT_TYP = '251' OR A.MOVEMENT_TYP = '252' THEN 'O001' /* POS 매출 유형  */
            WHEN A.MOVEMENT_TYP ='701' OR A.MOVEMENT_TYP = '702' THEN 'O004' /* 재고실사 */
            WHEN ((A.MOVEMENT_TYP ='197' OR A.MOVEMENT_TYP = '198') AND (NVL(A.GI_BUY_AMT, 0) &lt;&gt; 0 OR NVL(A.GI_MGT_AMT, 0) &lt;&gt; 0)) THEN 'O004' /* 재고실사 */
            ELSE 'I001'
       END AS TRANS_TYPE,
       CASE WHEN A.MOVEMENT_TYP ='701' OR A.MOVEMENT_TYP = '702' THEN   (SELECT MAX(JR.DR_ACC_CD)
                                                                           FROM EPROCUSR.ESIJRNL JR
                                                                          WHERE JR.SYS_ID = A.SYS_ID
                                                                            AND JR.COMP_CD = A.COMP_CD
                                                                            AND JR.JRNL_TYP_CD = A.JRNL_TYP_CD
                                                                            AND JR.MG_CLS_CD = 'GI') /* 재고실사 계정코드*/
            WHEN A.MOVEMENT_TYP ='321' AND A.CC_WH_CD IS NOT NULL THEN   (SELECT FI.ACC_CD
                                                                            FROM EPROCUSR.ESIFIHD FI
                                                                           WHERE FI.SYS_ID = A.SYS_ID
                                                                             AND FI.COMP_CD = A.COMP_CD
                                                                             AND FI.MG_NO = A.MG_NO
                                                                             AND FI.WH_CD = A.CC_WH_CD
                                                                             AND FI.DR_CR = 2) /* 이동유형 계정코드*/
            WHEN A.MOVEMENT_TYP ='322' AND A.CC_WH_CD IS NOT NULL THEN   (SELECT FI.ACC_CD
                                                                            FROM EPROCUSR.ESIFIHD FI
                                                                           WHERE FI.SYS_ID = A.SYS_ID
                                                                             AND FI.COMP_CD = A.COMP_CD
                                                                             AND FI.MG_NO = A.MG_NO
                                                                             AND FI.WH_CD = A.CC_WH_CD
                                                                             AND FI.DR_CR = 1) /* 이동유형 계정코드*/
            WHEN A.MOVEMENT_TYP ='321' AND A.CC_WH_CD IS NULL THEN   (SELECT FI.ACC_CD
                                                                        FROM EPROCUSR.ESIFIHD FI
                                                                       WHERE FI.SYS_ID = A.SYS_ID
                                                                         AND FI.COMP_CD = A.COMP_CD
                                                                         AND FI.MG_NO = A.MG_NO
                                                                         AND FI.WH_CD = A.MV_WH_CD
                                                                         AND FI.DR_CR = 1) /* 이동유형 계정코드*/
            WHEN A.MOVEMENT_TYP ='322' AND A.CC_WH_CD IS NULL THEN   (SELECT FI.ACC_CD
                                                                        FROM EPROCUSR.ESIFIHD FI
                                                                       WHERE FI.SYS_ID = A.SYS_ID
                                                                         AND FI.COMP_CD = A.COMP_CD
                                                                         AND FI.MG_NO = A.MG_NO
                                                                         AND FI.WH_CD = A.MV_WH_CD
                                                                         AND FI.DR_CR = 2) /* 이동유형 계정코드*/
            ELSE PO.ACC_CD /* ESPPODT 계정코드*/
       END AS ACCTCD,
       DECODE(PO.DUTY_FREE_YN, '1', '100', '3', '210', '220') AS TAX_CODE,
       PH.LEGCY_SO_TYP_CD AS PO_TYP_B,
       PH.PO_TYP AS PO_TYP, /* 2018.10.29 김지영 현지구매 BP가져올 때 ESPPOHD의 위 LEGCY_SO_TYP_CD에서 PO_TYP로 변경*/
       A.ITEM_CD AS ITEM_CODE,
       B.NO_DEDUC_YN AS OUTVAT_FLAG,
       (SELECT ACC_CD FROM EPROCUSR.ESPSWHUAC WHERE SYS_ID=A.SYS_ID AND COMP_CD=A.COMP_CD AND WH_CD=A.WH_CD AND IO_TYP_CD='I' AND REP_CD_YN='Y' AND STS &lt;&gt;'D') AS MATERIAL_ACCTCD,
       CASE WHEN A.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(A.MOVEMENT_TYP), 2) = 1 THEN PO.MGT_PRICE * DECODE(A.GR_QTY, NULL, A.GI_PURC_QTY, A.GR_PURC_QTY)
            WHEN A.PROC_TYP_CD IS NOT NULL AND MOD(TO_NUMBER(A.MOVEMENT_TYP), 2) = 0 THEN PO.MGT_PRICE * DECODE(A.GR_QTY, NULL, A.GI_PURC_QTY*-1, A.GR_PURC_QTY*-1)
            WHEN A.PROC_TYP_CD IS NULL     AND MOD(TO_NUMBER(A.MOVEMENT_TYP), 2) = 1 THEN DECODE(A.GR_QTY, NULL, A.GI_MGT_AMT, A.GR_MGT_AMT)
            WHEN A.PROC_TYP_CD IS NULL     AND MOD(TO_NUMBER(A.MOVEMENT_TYP), 2) = 0 THEN DECODE(A.GR_QTY, NULL, A.GI_MGT_AMT*-1, A.GR_MGT_AMT*-1)
       END AS MARGIN_AMOUNT,
       CASE WHEN MOD(TO_NUMBER(A.MOVEMENT_TYP), 2) = 0 THEN ROUND(DECODE(A.GR_QTY, NULL, A.GI_BUY_AMT*-1, A.GR_BUY_AMT*-1), 2)
       ELSE ROUND(DECODE(A.GR_QTY, NULL, A.GI_BUY_AMT, A.GR_BUY_AMT), 2)
       END AS UNIT_AMOUNT
  FROM (
SELECT PDT.SYS_ID ,
       PDT.COMP_CD ,
       PDT.MG_DATE AS TRANS_DATE ,
       PDT.MG_NO ,
       PDT.IVT_INSP_NO ,
       PDT.MOVEMENT_TYP ,
       PDT.PROC_TYP_CD ,
       PDT.PURC_UNIT_RATE ,
       PDT.GR_QTY,
       PDT.GR_BUY_AMT,
       PDT.GR_PURC_QTY,
       PDT.GR_MGT_PRICE,
       PDT.GR_MGT_AMT,
       PDT.GR_BUY_PRICE ,
       PDT.GI_QTY,
       PDT.GI_BUY_AMT,
       PDT.GI_PURC_QTY,
       PDT.GI_MGT_PRICE,
       PDT.GI_MGT_AMT,
       PDT.GI_BUY_PRICE ,
       PDT.PO_NO ,
       PDT.PO_LNO ,
       PDT.WH_CD ,
       PDT.CC_WH_CD ,
       PDT.MV_WH_CD ,
       PDT.ITEM_CD ,
       PDT.VD_CD ,
       PDT.JRNL_TYP_CD,
       A.SHOP_CD AS TRANS_UPJANG
  FROM EPROCUSR.ESIMGHD A,
       EPROCUSR.ESIMGDT PDT
 WHERE 1=1
<isNotNull col="UPJANG">
   AND A.SHOP_CD = #UPJANG#
</isNotNull>
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
   AND A.SHOP_CD IN (#ds_upjangList.UPJANG$#) 
</isLessEqual>
</isGreaterThan>
   AND A.SYS_ID = '100'
   AND A.COMP_CD = 'HFC'
   AND A.BU_CD = '2000'
   AND A.SYS_ID = PDT.SYS_ID
   AND A.COMP_CD = PDT.COMP_CD
   AND A.WH_CD = PDT.WH_CD
   AND A.ITEM_CD = PDT.ITEM_CD
   AND PDT.MOVEMENT_TYP NOT IN ('561', '562', '998', '999', '901', '902', '801', '802', '111', '112', '211', '212') /* 기초 , 기말 재고,배송입출고,  직송 가상입출고  제외 */
   AND PDT.STS &lt;&gt; 'D'
   AND PDT.MOVEMENT_TYP NOT IN ('701', '702')
   AND MG_DATE BETWEEN #START_DATE# AND #END_DATE#
UNION ALL
SELECT PDT.SYS_ID ,
       PDT.COMP_CD ,
       PA.INSP_DATE AS TRANS_DATE ,
       PDT.MG_NO ,
       PDT.IVT_INSP_NO ,
       PDT.MOVEMENT_TYP ,
       PDT.PROC_TYP_CD ,
       PDT.PURC_UNIT_RATE ,
       PDT.GR_QTY,
       PDT.GR_BUY_AMT,
       PDT.GR_PURC_QTY,
       PDT.GR_MGT_PRICE,
       PDT.GR_MGT_AMT,
       PDT.GR_BUY_PRICE ,
       PDT.GI_QTY,
       PDT.GI_BUY_AMT,
       PDT.GI_PURC_QTY,
       PDT.GI_MGT_PRICE,
       PDT.GI_MGT_AMT,
       PDT.GI_BUY_PRICE ,
       PDT.PO_NO ,
       PDT.PO_LNO ,
       PA.WH_CD AS WH_CD,
       PDT.CC_WH_CD || '' AS CC_WH_CD,
       PDT.MV_WH_CD || '' AS MV_WH_CD ,
       PDT.ITEM_CD || '' AS ITEM_CD,
       PDT.VD_CD || '' AS VD_CD,
       PDT.JRNL_TYP_CD,
       A.SHOP_CD AS TRANS_UPJANG
  FROM EPROCUSR.ESIMGHD A,
       EPROCUSR.ESIMGDT PDT,
       EPROCUSR.ESIMIHD PA
 WHERE 1=1
<isNotNull col="UPJANG">
   AND A.SHOP_CD = #UPJANG#
</isNotNull>
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
   AND A.SHOP_CD IN (#ds_upjangList.UPJANG$#) 
</isLessEqual>
</isGreaterThan>
   AND A.SYS_ID = '100'
   AND A.COMP_CD = 'HFC'
   AND A.BU_CD = '2000'
   AND A.SYS_ID = PDT.SYS_ID
   AND A.COMP_CD = PDT.COMP_CD
   AND A.WH_CD = PDT.WH_CD
   AND A.ITEM_CD = PDT.ITEM_CD
   AND PDT.MOVEMENT_TYP NOT IN ('561', '562', '998', '999', '901', '902', '801', '802', '111', '112', '211', '212') /* 기초 , 기말 재고,배송입출고,  직송 가상입출고  제외 */
   AND PDT.STS &lt;&gt; 'D'
   AND PDT.MOVEMENT_TYP IN ('701', '702')
   AND PDT.SYS_ID = PA.SYS_ID
   AND PDT.COMP_CD = PA.COMP_CD
   AND PDT.IVT_INSP_NO = PA.IVT_INSP_NO
   AND PA.INSP_DATE BETWEEN #START_DATE# AND #END_DATE#) A,
       EPROCUSR.ESPSWHU B, EPROCUSR.ESPSSHPORG C, EPROCUSR.MV_ITEM_MST3 D, EPROCUSR.ESPPODT PO, EPROCUSR.ESPPOHD PH
<isNotNull col="TM_CD">
       , SCO_UPJANG_MST_V G                                                                                                                                                  
</isNotNull>
 WHERE A.SYS_ID = B.SYS_ID
   AND A.COMP_CD = B.COMP_CD
   AND A.WH_CD = B.WH_CD
   AND B.STS &lt;&gt; 'D'
   AND B.SYS_ID = C.SYS_ID
   AND B.COMP_CD = C.COMP_CD
   AND B.SHOP_CD = C.SHOP_CD
   AND C.STS &lt;&gt; 'D'
   AND A.ITEM_CD = D.ITEM_CODE
<isNotNull col="TM_CD">
   AND A.TRANS_UPJANG = G.UPJANG
   AND G.TM_CD LIKE #TM_CD# || '%'
</isNotNull>
   AND A.SYS_ID = PO.SYS_ID(+)
   AND A.COMP_CD = PO.COMP_CD(+)
   AND A.PO_NO = PO.PO_NO(+)
   AND A.PO_LNO = PO.PO_LNO(+)
   AND A.SYS_ID = PH.SYS_ID(+)
   AND A.COMP_CD = PH.COMP_CD(+)
   AND A.PO_NO = PH.PO_NO(+))
GROUP BY TRANS_UPJANG
UNION ALL
SELECT TO_CHAR(B.UPJANG) AS UPJANG
     , 0
     , 0
     , 0
     , 0
     , 0
<isEqual col="PRICE_TYPE" value="1">
<isEqual col="GBN" value="1">
     , SUM(CASE WHEN MATERIAL_ACCTCD = '11402000' THEN NVL( DECODE(B.OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1),  MARGIN_AMOUNT ), 0) ELSE 0 END) B_AMT
</isEqual>
<isEqual col="GBN" value="2">
     , SUM(CASE WHEN MATERIAL_ACCTCD = '11401010' THEN NVL( DECODE(B.OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1),  MARGIN_AMOUNT ), 0) ELSE 0 END) B_AMT
</isEqual>
<isEqual col="GBN" value="3">
     , SUM(CASE WHEN MATERIAL_ACCTCD IN ('11402000','11401010') THEN NVL( DECODE(B.OUTVAT_FLAG, 'Y', MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1),  MARGIN_AMOUNT ), 0) ELSE 0 END) B_AMT
</isEqual>
</isEqual>
<isEqual col="PRICE_TYPE" value="2">
<isEqual col="GBN" value="1">
     , SUM(CASE WHEN MATERIAL_ACCTCD = '11402000' THEN NVL( DECODE(B.OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1),  UNIT_AMOUNT ), 0) ELSE 0 END) B_AMT
</isEqual>
<isEqual col="GBN" value="2">
     , SUM(CASE WHEN MATERIAL_ACCTCD = '11401010' THEN NVL( DECODE(B.OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1),  UNIT_AMOUNT ), 0) ELSE 0 END) B_AMT
</isEqual>
<isEqual col="GBN" value="3">
     , SUM(CASE WHEN MATERIAL_ACCTCD IN ('11402000','11401010') THEN NVL( DECODE(B.OUTVAT_FLAG, 'Y', UNIT_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ,1),  UNIT_AMOUNT ), 0) ELSE 0 END) B_AMT
</isEqual>
</isEqual>
  FROM HLDC_PO_ONHAND_MONTH A
      ,HLDC_PO_SUBINVENTORY B
      ,HLDC_PO_ITEM_MST C
<isNotNull col="TM_CD">
      ,SCO_UPJANG_MST_V G
</isNotNull>
 WHERE A.ONHAND_YM = TO_CHAR(ADD_MONTHS(TO_DATE(#START_DATE#,'YYYYMMDD'),-1),'YYYYMM')
   AND A.SUBINV_CODE = B.SUBINV_CODE
   AND A.ITEM_CODE = C.ITEM_CODE
<isNotNull col="TM_CD">
   AND B.UPJANG = G.UPJANG
   AND G.TM_CD LIKE #TM_CD# || '%'
</isNotNull>
<isNotNull col="UPJANG">
   AND B.UPJANG = #UPJANG#
</isNotNull>
GROUP BY TO_CHAR(B.UPJANG)
) GROUP BY TRANS_UPJANG
               ) E
             , (
                /* 복리후생 식대비 - 일수로 Split */
                SELECT UPJANG
                     , ROUND(NVL(SUM(AMT), 0) / TO_NUMBER(TO_CHAR(LAST_DAY(SYSDATE), 'DD')), 0) * (TO_DATE(#END_DATE#,'YYYYMMDD') - TO_DATE(#START_DATE#,'YYYYMMDD') + 1) AS MS_AMT3
                  FROM MAS_WELFARE
                 WHERE APPLY_MM = TO_CHAR(TO_DATE(#START_DATE#, 'YYYYMMDD'), 'YYYYMM')
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
           AND UPJANG IN (#ds_upjangList.UPJANG$#)
</isLessEqual>
</isGreaterThan>
                 GROUP BY UPJANG
               ) G
             , (
                /* 목표재고비율 */
                SELECT UPJANG
                     , GOAL_RATE AS IP_RATE
                  FROM FSA_STOCK_GOAL_SET
                 WHERE GOAL_MM = SUBSTR(#START_DATE#, 1, 6)
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
           AND UPJANG IN (#ds_upjangList.UPJANG$#)
</isLessEqual>
</isGreaterThan>
               ) H
             , (
                SELECT UPJANG
                     , SUM(EXPECT_COST) EXPECT_COST
                     , SUM(SALE_AMT) EXPECT_SALE
                  FROM (
                        SELECT A.UPJANG
                             , SUM(A.SALE_PRICE * A.EXPECT_MEAL_QTY) SALE_AMT
                             , 0 EXPECT_COST
                          FROM FSM_REAL_MENU_MST A
                             , SCC_COMMON_CODE B
                         WHERE SUBSTR(A.HALL_CD,1,3) = B.CODE
                           AND B.GROUP_CODE= 'FS0019'
		<isNotNull col="UPJANG">
				           AND A.UPJANG = #UPJANG#
		</isNotNull>
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
           AND A.UPJANG IN (#ds_upjangList.UPJANG$#)
</isLessEqual>
</isGreaterThan>
						   AND A.MENU_DATE BETWEEN #START_DATE# AND #END_DATE#                                                                                                               
                           AND B.ATTR02 &lt;&gt; 'Y'                                                                                                                                                               
		                   AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                         GROUP BY A.UPJANG
                        UNION ALL
                        SELECT A.UPJANG
                             , SUM(C.SALE_PRICE * C.EXPECT_SALE_QTY) SALE_AMT
                             , 0 EXPECT_COST
                          FROM FSM_REAL_MENU_MST A
                             , SCC_COMMON_CODE B
                             , FSM_REAL_RECIPE_MST C
                         WHERE SUBSTR(A.HALL_CD,1,3) = B.CODE
                           AND A.UPJANG = C.UPJANG
		<isNotNull col="UPJANG">
				           AND A.UPJANG = #UPJANG#
		</isNotNull>
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
           AND A.UPJANG IN (#ds_upjangList.UPJANG$#)
</isLessEqual>
</isGreaterThan>
		                   AND A.MENU_CD = C.MENU_CD
                           AND B.GROUP_CODE = 'FS0019'
                           AND A.MENU_DATE BETWEEN #START_DATE# AND #END_DATE#
                           AND B.ATTR02 = 'Y'
                           AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)
                         GROUP BY A.UPJANG
                        UNION ALL
                        SELECT UPJANG
                             , 0
                             , ROUND(SUM((NEED_QTY * ROUND((MARGIN_PRICE / KG_CONVERT_RATE / 1000), 2)) * QTY)) AS EXPECT_COST
                          FROM (
	                        SELECT A.UPJANG
	                             , A.MENU_CD
	                             , A.MENU_DATE
	                             , B.RECIPE_CD
	                             , C.NEED_QTY
	                             , C.MARGIN_PRICE
	                             , D.KG_CONVERT_RATE
	                             , DECODE(E.ATTR02,'Y', B.EXPECT_SALE_QTY, DECODE(E.SET3, 'Y', B.EXPECT_SALE_QTY, A.EXPECT_MEAL_QTY)) QTY
	                          FROM FSM_REAL_MENU_MST A
	                             , FSM_REAL_RECIPE_MST B
	                             , FSM_REAL_RECIPE_ITEM C
	                             , HLDC_PO_ITEM_MST D
	                             , (SELECT * FROM SCC_COMMON_CODE WHERE GROUP_CODE= 'FS0019') E
		<isNotNull col="TM_CD">
                                 , SCC_CC F
                                 , ST_UPJANGV G                                                                                                                                                  
		</isNotNull>
	                         WHERE A.UPJANG = B.UPJANG
		<isNotNull col="UPJANG">
	                           AND A.UPJANG = #UPJANG#
		</isNotNull>
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
           AND A.UPJANG IN (#ds_upjangList.UPJANG$#)
</isLessEqual>
</isGreaterThan>
		                       AND A.MENU_CD = B.MENU_CD
		<isNotNull col="TM_CD">
                               AND B.UPJANG = G.UPJANG 
                               AND F.CC_CD = G.CC_CD
                               AND F.ORG_LEVEL_CD4 LIKE #TM_CD# || '%'  
		</isNotNull>
	                           AND B.UPJANG = C.UPJANG
	                           AND B.MENU_CD = C.MENU_CD
	                           AND B.RECIPE_CD = C.RECIPE_CD
	                           AND SUBSTR(A.HALL_CD,1,3) = E.CODE
	                           AND A.MENU_DATE BETWEEN #START_DATE# AND #END_DATE#
	                           AND C.ITEM_CODE = D.ITEM_CODE
                           )
                        GROUP BY UPJANG
                       )
                 GROUP BY UPJANG
               ) J
         WHERE A.UPJANG = B.UPJANG(+)
           AND A.UPJANG = C.UPJANG(+)
           AND A.UPJANG = E.UPJANG(+)   
           AND A.UPJANG = G.UPJANG(+)
           AND A.UPJANG = H.UPJANG(+)
           AND A.UPJANG = J.UPJANG(+)
<isGreaterThan col="UPJANGCNT" value="0">
<isLessEqual col="UPJANGCNT" value="1000">
           AND A.UPJANG IN (#ds_upjangList.UPJANG$#)
</isLessEqual>
</isGreaterThan>
<isNotNull col="MU_CD">
           AND A.MU_CD = #MU_CD#
</isNotNull>
<isNotNull col="TM_CD">
           AND (A.TM_CD LIKE #TM_CD# || '%' OR A.PT_CD LIKE #TM_CD# || '%' )
</isNotNull>
<isNotNull col="JOB_CD">
           AND A.JOB_CD = #JOB_CD#
</isNotNull>
<isNotNull col="LOC_CD">
           AND A.LOC_CD = #LOC_CD#
</isNotNull>
<isNotNull col="UPJANG">
           AND A.UPJANG = #UPJANG#
</isNotNull>
<isEqual col="OPEN_TYPE" value="1">       
           AND A.OPEN_YY = TO_CHAR(SYSDATE,'YYYY') --신규일 경우
</isEqual>
<isEqual col="OPEN_TYPE" value="2">       
           AND A.OPEN_YY BETWEEN '1' AND TO_CHAR(ADD_MONTHS(SYSDATE, -12), 'YYYY')  --기존일 경우
</isEqual>
<isEqual col="CLOSED" value="1">   
           AND A.CLOSE_DATE IS NULL
</isEqual>              
         GROUP BY A.MU_CD, A.MU_NAME, A.TM_CD, A.TM_NAME, A.UPJANG, A.UPJANGNM, A.JOB_NAME, A.SUB_JOB_NAME, A.LOC_NAME
       )         
    </statement>
	<input default-name="ds_cond">
	    <col name="MU_CD" size="255" type="VARCHAR" description="" /> 
		<col name="MU_NM" size="255" type="VARCHAR" description="" /> 
		<col name="TM_CD" size="255" type="VARCHAR" description="" /> 
		<col name="TM_NM" size="255" type="VARCHAR" description="" /> 
		<col name="UPJANG" size="255" type="VARCHAR" description="" /> 
		<col name="UPJANGNM" size="255" type="VARCHAR" description="" /> 
		<col name="START_DATE" size="255" type="VARCHAR" description="" /> 
		<col name="END_DATE" size="255" type="VARCHAR" description="" /> 
		<col name="PRICE_TYPE" size="255" type="VARCHAR" description="" /> 
		<col name="JOB_CD" size="255" type="VARCHAR" description="" /> 
		<col name="LOC_CD" size="255" type="VARCHAR" description="" /> 
		<col name="OPEN_TYPE" size="255" type="VARCHAR" description="" /> 
		<col name="CLOSED" size="255" type="VARCHAR" description="" /> 
		<col name="GBN" size="255" type="VARCHAR" description="" /> 
		<col name="OPEN_TYPE" size="255" type="VARCHAR" description="" /> 
		<col name="ds_upjangList.UPJANG" size="255" type="VARCHAR" description="" /> 
	</input>
	<output default-name="ds_list">
	</output>
</query>
