<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="sc.app.inventoryDAO">
	<desc>FC POS 마스터 외부 인터페이스 HQML</desc>









	<statement name="selectTest"><![CDATA[SELECT '1' AS CHECK_NUM
  FROM DUAL]]></statement>
	<statement name="logInsert"><![CDATA[INSERT INTO APP_INTERFACE_LOG(
INSDT,
TXID,
TXDIV,
TXHEADER,
TXDATA,
TXRESULT)
VALUES(
TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'),
<#if txId?has_content >:txId,<#else>null,</#if> 
<#if txDiv?has_content >:txDiv,<#else>null,</#if> 
<#if tHeader?has_content >:tHeader,<#else>null,</#if> 
<#if tData?has_content >:tData,<#else>null,</#if> 
<#if tResult?has_content >:tResult<#else>null</#if> 
)]]></statement>



	<statement name="selectCenterInfo"><![CDATA[SELECT WAREKY AS CENTER_CODE, NAME01 AS CENTER_NAME
  FROM WAHMA@EXEINTF_P
 WHERE DELMAK = 'Y'
   AND WHTT07 = 'Y'
ORDER BY 1]]></statement>
	<statement name="selectInventoryInfo"><![CDATA[SELECT ITEM_CODE, ITEM_NAME, QTY, LISTNUM, ROWCNT
  FROM (
SELECT CENTER_CODE, ITEM_CODE, ITEM_NAME, QTY,
/* 상품코드 */
<#if sortCondition == '1'>
	<#if sortStandard == 'ASC'>
       ROW_NUMBER() OVER(ORDER BY ITEM_CODE) AS LISTNUM
	<#elseif sortStandard == 'DSC'>
       ROW_NUMBER() OVER(ORDER BY ITEM_CODE DESC) AS LISTNUM
	</#if>
/* 상품명 */
<#elseif sortCondition == '2'>
	<#if sortStandard == 'ASC'>
       ROW_NUMBER() OVER(ORDER BY ITEM_NAME) AS LISTNUM
	<#elseif sortStandard == 'DSC'>
       ROW_NUMBER() OVER(ORDER BY ITEM_NAME DESC) AS LISTNUM
	</#if>
/* 수량 */
<#elseif sortCondition == '3'>
	<#if sortStandard == 'ASC'>
       ROW_NUMBER() OVER(ORDER BY QTY) AS LISTNUM
	<#elseif sortStandard == 'DSC'>
       ROW_NUMBER() OVER(ORDER BY QTY DESC) AS LISTNUM
	</#if>
</#if>
      , COUNT(1) OVER() AS ROWCNT
  FROM (
SELECT T1.WAREKY AS CENTER_CODE,
       T2.SKUKEY AS ITEM_CODE,
       T2.DESC01 || ',' || T2.DESC02 || ',' || T2.DUOMKY AS ITEM_NAME,
       (SELECT NVL(SUM(QTSIWH),0)
          FROM STKKY@EXEINTF_P
         WHERE WAREKY = T1.WAREKY -- 물류센터 코드
           AND SKUKEY = T2.SKUKEY -- 자재코드
           AND LOCAKY != 'DISLOC' AND LOCAKY != 'RTNLOC' AND LOCAKY != 'SHPLOC'
           AND LOCAKY != 'HN' AND LOCAKY != 'JJ' AND LOCAKY != 'KB'
           AND LOCAKY != 'KI' AND LOCAKY != 'YN' AND LOCAKY != 'IC'
           AND LOCAKY != 'ZA' AND LOCAKY != 'ZB' AND LOCAKY != 'ZC' AND LOCAKY != 'ZD'
           AND LOCAKY != 'GLOSS' AND LOCAKY != 'KLOSS' AND LOCAKY != 'SLOSS' AND LOCAKY != 'ULOSS'
           AND LOCAKY != 'JINSUK' AND LOCAKY != 'CANCEL' 
           AND AREAKY != 'ZA'
           AND QTSIWH > 0) AS QTY
  FROM SKUWC@EXEINTF_P T1, SKUMA@EXEINTF_P T2
 WHERE T1.WAREKY = :centerCode
   AND T1.OWNRKY = T2.OWNRKY
   AND T1.SKUKEY = T2.SKUKEY
   AND (
       T2.SKUKEY LIKE '%'||:searchText||'%'
    OR
       T2.DESC01 LIKE '%'||:searchText||'%'
       )
) WHERE QTY > 0
) WHERE 1=1
    AND LISTNUM BETWEEN :listCnt * ( :pageNum - 1 ) + 1 AND :listCnt * :pageNum]]></statement>




	<statement name="upjangInventoryInfo"><![CDATA[SELECT L_CLASS_NAME,
       M_CLASS_NAME,
       L_CLASS_CODE,
       M_CLASS_CODE,
       ITEM_CODE,
       BARCODE,
       ITEM_NAME,
       ITEM_SIZE,
       UOM_CODE,
       PO_UOM,
       M_STK_PRICE,
       M_STK_QTY,
       M_STK_QTY_ORG,
       M_STK_AMT,
       M_REAL_QTY_SUM,
       M_REAL_AMT,
       M_USE_QTY,
       M_USE_AMT,
       U_STK_PRICE,
       U_STK_AMT,
       U_REAL_AMT,
       U_USE_AMT,
       ADV_PHYSIC_QTY,
       MENU_QTY,
       MENU_KG_QTY,
       VALUE_DATE_INFO,
       VALUE_DATE,
       MAKER_DATE,
       UOM_CONVERT_RATE,
       TAX_CODE,
       BG_YN,
       EDIT_YN,
       LISTNUM,
       ROWCNT
  FROM (
SELECT A.L_CLASS_NAME,
       A.M_CLASS_NAME,
       A.L_CLASS_CODE,
       A.M_CLASS_CODE,
       A.ITEM_CODE,
       A.BARCODE,
       A.ITEM_NAME,
       A.ITEM_SIZE,
       A.UOM_CODE,
       A.PO_UOM,
       A.M_STK_PRICE,
       A.M_STK_QTY,
       A.M_STK_QTY_ORG,
       A.M_STK_AMT,
       A.M_REAL_QTY_SUM,
       A.M_REAL_AMT,
       A.M_USE_QTY,
       A.M_USE_AMT,
       A.U_STK_PRICE,
       A.U_STK_AMT,
       A.U_REAL_AMT,
       A.U_USE_AMT,
       A.ADV_PHYSIC_QTY,
       A.MENU_QTY,
       A.MENU_KG_QTY,
       A.VALUE_DATE_INFO,
       A.VALUE_DATE,
       A.MAKER_DATE,
       A.UOM_CONVERT_RATE,
       A.TAX_CODE,
       A.BG_YN,
       A.EDIT_YN,
<#if sortCondition == '1'>
       ROW_NUMBER() OVER(ORDER BY A.ITEM_NAME) AS LISTNUM,
<#else>
       ROW_NUMBER() OVER(ORDER BY A.VALUE_DATE, A.ITEM_NAME) AS LISTNUM,
</#if>
       COUNT(1) OVER() AS ROWCNT
FROM ( 
SELECT C.CLASS_NAME AS L_CLASS_NAME 
     , D.CLASS_NAME AS M_CLASS_NAME 
     , C.CLASS_CODE AS L_CLASS_CODE 
     , D.CLASS_CODE AS M_CLASS_CODE 
     , A.ITEM_CODE AS ITEM_CODE 
     , A.BARCODE AS BARCODE 
     , A.ITEM_NAME AS ITEM_NAME 
     , A.ITEM_SIZE AS ITEM_SIZE 
     , A.UOM_CODE AS UOM_CODE 
     , A.PO_UOM AS PO_UOM 
     /* 수불단위S */
<#if chkPoUom == '1'>
     , DECODE(B.UNIT_QTY, 0, 0, ROUND(B.MARGIN_AMT / B.UNIT_QTY, 5)) AS M_STK_PRICE     -- 재고단가    (출하)(수불:재고량!=실사량) 
     , B.TRANS_QTY AS M_STK_QTY                                                         -- 재고량            (수불:재고량!=실사량) 
     , B.TRANS_QTY AS M_STK_QTY_ORG                                                     -- 재고량 반올림 미처리 (수불:재고량!=실사량) 
     , B.TRANS_MAMT AS M_STK_AMT                                                        -- 재고금액    (출하)(수불:재고량!=실사량) 
     , '0' AS M_REAL_QTY                                                                -- 실사재고량 STRING (수불:재고량!=실사량) 
     , 0 AS M_REAL_QTY_SUM                                                              -- 실사재고량 NUMBER (수불:재고량!=실사량) 
     , 0 AS M_REAL_AMT                                                                  -- 실사재고금액(출하)(수불:재고량!=실사량) 
     , B.TRANS_QTY AS M_USE_QTY                                                         -- 사용량            (수불:재고량!=실사량) 
     , B.TRANS_MAMT AS M_USE_AMT                                                        -- 사용금액    (출하)(수불:재고량!=실사량) 
     , DECODE(B.UNIT_QTY, 0, 0, ROUND(B.UNIT_AMT / B.UNIT_QTY, 5)) AS U_STK_PRICE       -- 재고단가    (매입)(수불:재고량!=실사량) 
     , B.TRANS_UAMT AS U_STK_AMT                                                        -- 재고금액    (매입)(수불:재고량!=실사량) 
     , 0 AS U_REAL_AMT                                                                  -- 실사금액    (매입)(수불:재고량!=실사량) 
     , B.TRANS_UAMT AS U_USE_AMT                                                        -- 사용금액    (매입)(수불:재고량!=실사량) 
     , NVL(E.ADV_PHYSIC_QTY ,0) ADV_PHYSIC_QTY                                          -- 사전 재고 조사량  
     , UOM_QTY AS MENU_QTY                                                              -- 식단예상사용량(수불) 
</#if>
     /* 수불단위E */
     /* 구매단위S */
<#if chkPoUom == '2'>
     , DECODE(B.UNIT_QTY, 0, 0, ROUND(B.MARGIN_AMT / (B.UNIT_QTY / A.UOM_CONVERT_RATE), 5)) AS M_STK_PRICE  -- 재고단가    (출하)(구매:재고량!=실사량)    
     , ROUND(B.TRANS_QTY / A.UOM_CONVERT_RATE, 5) AS M_STK_QTY                                              -- 재고량            (구매:재고량!=실사량)    
     , B.TRANS_QTY / A.UOM_CONVERT_RATE AS M_STK_QTY_ORG                                                    -- 재고량 반올림 미처리 (구매:재고량!=실사량) 
     , B.TRANS_MAMT AS M_STK_AMT                                                                            -- 재고금액    (출하)(구매:재고량!=실사량)    
     , '0' AS M_REAL_QTY                                                                                    -- 실사재고량 STRING (수불:재고량!=실사량)    
     , 0 AS M_REAL_QTY_SUM                                                                                  -- 실사재고량 NUMBER (수불:재고량!=실사량)    
     , 0 AS M_REAL_AMT                                                                                      -- 실사재고금액(출하)(구매:재고량!=실사량)    
     , ROUND(B.TRANS_QTY / A.UOM_CONVERT_RATE, 5) AS M_USE_QTY                                              -- 사용량            (구매:재고량!=실사량)    
     , B.TRANS_MAMT AS M_USE_AMT                                                                            -- 사용금액    (출하)(구매:재고량!=실사량)    
     , DECODE(B.UNIT_QTY, 0, 0, ROUND(B.UNIT_AMT / (B.UNIT_QTY / A.UOM_CONVERT_RATE), 5)) AS U_STK_PRICE    -- 재고단가    (매입)(구매:재고량!=실사량)    
     , B.TRANS_UAMT AS U_STK_AMT                                                                            -- 재고금액    (매입)(구매:재고량!=실사량)    
     , 0 AS U_REAL_AMT                                                                                      -- 실사금액    (매입)(구매:재고량!=실사량)    
     , B.TRANS_UAMT AS U_USE_AMT                                                                            -- 사용금액    (매입)(구매:재고량!=실사량)    
     , NVL(ROUND(E.ADV_PHYSIC_QTY/A.UOM_CONVERT_RATE, 5), 0) ADV_PHYSIC_QTY                                 -- 사전 재고 조사량                           
     , PO_QTY AS MENU_QTY                                                                                   -- 식단예상사용량(구매)                       
</#if>
     /* 구매단위E */
     , KG_QTY AS MENU_KG_QTY  -- 식단예상사용량(KG) 
     , NVL(F.VALUE_DATE_INFO, G.VALUE_DATE_INFO) AS VALUE_DATE_INFO  -- 유효기간 
     , NVL(F.VALUE_DATE, G.VALUE_DATE) AS VALUE_DATE  -- 유효일자 
     , NVL(F.MAKER_DATE, G.MAKER_DATE) AS MAKER_DATE  -- 제조일자 
     , A.UOM_CONVERT_RATE AS UOM_CONVERT_RATE 
     , A.TAX_CODE AS TAX_CODE 
     , CASE WHEN NVL(F.VALUE_DATE, G.VALUE_DATE) <= TO_CHAR(TRUNC(TO_DATE(:reqDate,'YYYYMMDD')+7), 'YYYYMMDD') 
	         THEN 'Y' 
	         ELSE 'N' END AS BG_YN 
     , 'N' AS EDIT_YN 
  FROM HLDC_PO_ITEM_MST A 
     , HLDC_PO_ITEM_CLASS_HLDC_V C 
     , HLDC_PO_ITEM_CLASS_HLDC_V D 
     , ( 
        SELECT ITEM_CODE       AS ITEM_CODE 
             , SUM(UNIT_AMT)   AS UNIT_AMT 
             , SUM(MARGIN_AMT) AS MARGIN_AMT 
             , SUM(UNIT_QTY)   AS UNIT_QTY 
             , SUM(TRANS_QTY)  AS TRANS_QTY 
             , SUM(TRANS_UAMT) AS TRANS_UAMT 
             , SUM(TRANS_MAMT) AS TRANS_MAMT 
             , SUM(KG_QTY)     AS KG_QTY 
             , SUM(PO_QTY)     AS PO_QTY 
             , SUM(UOM_QTY)    AS UOM_QTY 
          FROM ( 
                SELECT C.ITEM_CODE          AS ITEM_CODE 
                     , C.UNIT_AMOUNT   AS UNIT_AMT            
                     , C.MARGIN_AMOUNT AS MARGIN_AMT          
                     , C.ONHAND_QTY    AS UNIT_QTY            
                     , C.ONHAND_QTY         AS TRANS_QTY      
                     , C.UNIT_AMOUNT        AS TRANS_UAMT     
                     , C.MARGIN_AMOUNT      AS TRANS_MAMT     
                     , 0                    AS KG_QTY         
                     , 0                    AS PO_QTY         
                     , 0                    AS UOM_QTY        
                  FROM HLDC_PO_ONHAND_MONTH C                 
                 WHERE C.ONHAND_YM   = :sOnhandMonth 
                   AND C.SUBINV_CODE = :subinvCode 
                 UNION ALL                                    
                SELECT D.ITEM_CODE               AS ITEM_CODE 
                     , SUM(D.UNIT_AMOUNT)   AS UNIT_AMT                                                                                                   
                     , SUM(D.TRANS_MAMOUNT) AS MARGIN_AMT                                                                                                 
                     , SUM(D.UOM_QTY)       AS UNIT_QTY                                                                                                   
                     , 0                         AS TRANS_QTY                                                                                             
                     , 0                         AS TRANS_UAMT                                                                                            
                     , 0                         AS TRANS_MAMT                                                                                            
                     , 0                         AS KG_QTY                                                                                                
                     , 0                         AS PO_QTY                                                                                                
                     , 0                         AS UOM_QTY                                                                                               
                  FROM HLDC_PO_TRANSACTION2 D
                 WHERE D.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(:sOnhandMonth||'01','YYYYMMDD'),1),'YYYYMMDD') AND :reqDate 
                   AND D.SUBINV_CODE = :subinvCode                                                                                             
                   AND D.TRANS_TYPE  LIKE 'I%'                                                                                                            
                 GROUP BY D.ITEM_CODE                                                                                                                     
                 UNION ALL                                                                                                                                
                SELECT D.ITEM_CODE                                                           AS ITEM_CODE                                                 
                     , 0                                                                     AS UNIT_AMT                                                  
                     , 0                                                                     AS MARGIN_AMT                                                
                     , 0                                                                     AS UNIT_QTY                                                  
                     , SUM(DECODE(SUBSTR(D.TRANS_TYPE, 1, 1), 'I', 1, -1) * D.UOM_QTY)       AS TRANS_QTY                                                 
                     , SUM(DECODE(SUBSTR(D.TRANS_TYPE, 1, 1), 'I', 1, -1) * D.UNIT_AMOUNT)   AS TRANS_UAMT                                                
                     , SUM(DECODE(SUBSTR(D.TRANS_TYPE, 1, 1), 'I', 1, -1) * D.MARGIN_AMOUNT) AS TRANS_MAMT                                                
                     , 0                                                                     AS KG_QTY                                                    
                     , 0                                                                     AS PO_QTY                                                    
                     , 0                                                                     AS UOM_QTY                                                   
                  FROM HLDC_PO_TRANSACTION2 D
                 WHERE D.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(:sOnhandMonth||'01','YYYYMMDD'),1),'YYYYMMDD') AND :reqDate 
                   AND D.SUBINV_CODE = :subinvCode                                                                                             
                 GROUP BY D.ITEM_CODE                                                                                                                     
                 UNION ALL   
                /* C창고일경우(창고코드첫자리C) */                                                                                                                                                                              
<#if subinvGubun == 'C'>
                SELECT C.ITEM_CODE AS ITEM_CODE                                                                                                                                                            
                     , 0           AS UNIT_AMT                                                                                                                                                             
                     , 0           AS MARGIN_AMT                                                                                                                                                           
                     , 0           AS UNIT_QTY                                                                                                                                                             
                     , 0           AS TRANS_QTY                                                                                                                                                            
                     , 0           AS TRANS_UAMT                                                                                                                                                           
                     , 0           AS TRANS_MAMT                                                                                                                                                           
                     , ROUND(SUM(DECODE(D.CAFE_YN, 'Y', B.EXPECT_SALE_QTY,DECODE(D.CATER_YN, 'Y', B.EXPECT_SALE_QTY, A.EXPECT_MEAL_QTY))*C.NEED_QTY/1000), 2) KG_QTY                                       
                     , ROUND(SUM(DECODE(D.CAFE_YN, 'Y', B.EXPECT_SALE_QTY,DECODE(D.CATER_YN, 'Y', B.EXPECT_SALE_QTY, A.EXPECT_MEAL_QTY))*C.NEED_QTY/1000)/E.KG_CONVERT_RATE, 2) PO_QTY                     
                     , ROUND(SUM(DECODE(D.CAFE_YN, 'Y', B.EXPECT_SALE_QTY,DECODE(D.CATER_YN, 'Y', B.EXPECT_SALE_QTY, A.EXPECT_MEAL_QTY))*C.NEED_QTY/1000)/E.KG_CONVERT_RATE*E.UOM_CONVERT_RATE, 2) UOM_QTY 
                  FROM FSM_REAL_MENU_MST A                                                                                                                                                                 
                     , FSM_REAL_RECIPE_MST B                                                                                                                                                               
                     , FSM_REAL_RECIPE_ITEM C                                                                                                                                                              
                     , FSA_HALL_MST D                                                                                                                                                                      
                     , HLDC_PO_ITEM_MST E                                                                                                                                                                  
                 WHERE A.UPJANG = B.UPJANG                                                                                                                                                                 
                   AND A.MENU_CD = B.MENU_CD                                                                                                                                                               
                   AND B.UPJANG = C.UPJANG                                                                                                                                                                 
                   AND B.MENU_CD = C.MENU_CD                                                                                                                                                               
                   AND B.RECIPE_CD = C.RECIPE_CD                                                                                                                                                           
                   AND A.UPJANG = D.UPJANG                                                                                                                                                                 
                   AND A.HALL_CD = D.HALL_CD                                                                                                                                                               
                   AND C.ITEM_CODE = E.ITEM_CODE                                                                                                                                                           
                   AND A.UPJANG = (SELECT UPJANG FROM HLDC_PO_SUBINVENTORY WHERE SUBINV_CODE = :subinvCode)                                                                                     
                   AND A.SUBINV_CODE = :subinvCode                                                                                                                                              
                   AND A.MENU_DATE = :reqDate                                                                                                                                                
                 GROUP BY C.ITEM_CODE, E.KG_CONVERT_RATE, E.UOM_CONVERT_RATE                                                                                                                               
</#if>
                /* C창고일경우(창고코드첫자리C) */                                                                                                                                                                              
               ) 
         GROUP BY ITEM_CODE 
       ) B 
     , ( 
        SELECT A.ITEM_CODE  AS ITEM_CODE 
             , A.PHYSIC_QTY AS ADV_PHYSIC_QTY --기실사량 
             , 0 AS ADV_PHYSIC_AMT 
          FROM FSP_PHYSICAL_INVENTORY_STOCK A 
         WHERE A.PHYSIC_DATE = :reqDate 
           AND A.SUBINV_CODE = :subinvCode 
       ) E 
     , ( 
        SELECT A.ITEM_CODE AS ITEM_CODE 
             , A.VALUE_DATE_INFO AS VALUE_DATE_INFO      -- 유통기한 
             , CASE WHEN INSTR(A.VALUE_DATE, '-') > 0 THEN '' ELSE A.VALUE_DATE END AS VALUE_DATE  -- 유통일자 
             , A.MAKER_DATE AS MAKER_DATE                -- 제조일자 
          FROM FSP_PHYSICAL_INVENTORY_STOCK A 
         WHERE A.PHYSIC_DATE = :sPhysicBdt 
           AND A.SUBINV_CODE = :subinvCode 
       ) F 
     , ( 
        SELECT * 
          FROM FSP_PHYSICAL_INVENTORY_STOCK 
         WHERE GRP_NO = (SELECT MAX(TO_NUMBER(GRP_NO)) 
                           FROM FSP_PHYSICAL_INVENTORY_STOCK 
                          WHERE PHYSIC_DATE = :reqDate 
                            AND SUBINV_CODE = :subinvCode 
                            AND TR_TYPE = 'T') 
           AND PHYSIC_DATE = :reqDate 
           AND SUBINV_CODE = :subinvCode 
           AND TR_TYPE = 'T' 
       ) G 
 WHERE C.CLASS_CODE = A.ITEM_CLASS2 
   AND C.CLASS_TYPE = 'M' 
   AND D.CLASS_CODE = A.ITEM_CLASS3 
   AND D.CLASS_TYPE = 'S' 
   AND A.ITEM_CODE  = B.ITEM_CODE 
   AND B.ITEM_CODE  = E.ITEM_CODE(+) 
   AND B.ITEM_CODE  = F.ITEM_CODE(+) 
   AND B.ITEM_CODE  = G.ITEM_CODE(+) 
   AND B.TRANS_QTY  <> 0  --재고량0아닌자재만 
) A 
, (
   SELECT ITEM_CODE
        , TR_TYPE
     FROM FSP_PHYSICAL_INVENTORY_STOCK
    WHERE PHYSIC_DATE = :reqDate
      AND SUBINV_CODE = :subinvCode
  ) B 
 WHERE A.ITEM_CODE = B.ITEM_CODE(+) 
   AND (B.TR_TYPE IS NULL OR B.TR_TYPE <> 'I'))
 WHERE 1=1
   AND LISTNUM BETWEEN :listCnt * ( :pageNum - 1 ) + 1 AND :listCnt * :pageNum]]></statement>
</hqml>
