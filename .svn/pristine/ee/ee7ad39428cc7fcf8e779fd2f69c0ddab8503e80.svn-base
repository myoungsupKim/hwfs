<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<description>
	<![CDATA[
		 인증/권한/보안과 관련 설정이 포함되어 있는 파일입니다.
	]]>
	</description>
	
	<!--Spring Security Debug -->
	<!--<security:debug/>-->
	
	<!--
		############################################### 
		인증,권한 기본 정책 설정(security:http)
		1. 인증정책 예외패턴 설정 : security 적용 예외 URL들을 등록
		2. 인증 정책 기본 설정 : 기본적인 security 적용 정책 설정
		    @entry-point-ref : 로그인 지점 설정
		    @access-decision-manager-ref : 권한 관리용  AccessDecisionManager 설정
		    @access-denied-page :  접근 권한 없는 페이지에 접근 하는 경우 redirect 될 URL		    
		###############################################
	-->	
	<!-- 인증 정책 예외 패턴 설정 --> 
	<security:http pattern="/js/**" security="none"/>
  	<security:http pattern="/css/**" security="none"/>
  	<security:http pattern="/img/**" security="none"/>
  	<security:http pattern="/sample/**" security="none"/>
  	<security:http pattern="/xui/**" security="none"/>
  	
	<!-- 인증 정책 기본 설정 -->    		
	<security:http auto-config="false" use-expressions="true" 
		entry-point-ref="hone.service.security.AuthenticationEntryPoint"
		access-decision-manager-ref="hone.service.security.AccessDecisionManager"  		
		access-denied-page="/secutiry/accessDenied.mvc">		
		<security:intercept-url pattern="/sample/intro.mvc" access="permitAll"/>
		<security:intercept-url pattern="/sample/security/*.mvc" access="permitAll"/>
		<security:intercept-url pattern="/security/*.mvc" access="permitAll"/>
		<security:intercept-url pattern="/**/*.mvc" access="isFullyAuthenticated()"/>
				
    	<security:custom-filter position="LOGOUT_FILTER" ref="hone.service.security.LogoutFilter"/>
    	<security:custom-filter position="FORM_LOGIN_FILTER" ref="hone.service.security.AuthenticationFilter"/>
	</security:http>
	
	<!-- 로그인 지점(AuthenticationEntryPoint) 설정 -->  
	<bean id="hone.service.security.AuthenticationEntryPoint" 
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
	    <property name="loginFormUrl" value="/security/login.mvc"></property>     
	</bean>	
	
	<!-- 접근제어 권한 관리자(AccessDecisionManager) 설정 -->
	<bean id="hone.service.security.AccessDecisionManager" 
		class="org.springframework.security.access.vote.AffirmativeBased">
	    <property name="decisionVoters">
	    	<list>
	    		<bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
	    	</list>
	    </property>      
	</bean> 	

	<!-- 로그아웃 처리 설정 : Custom Filter(LOGOUT_FILTER)-->  
	<bean id="hone.service.security.LogoutFilter" 
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<property name="filterProcessesUrl" value="/logout"/><!-- 로그아웃 프로세싱 URL 설정 -->
		<constructor-arg><!-- 로그아웃성공 후처리 클래스 설정 -->
			<bean class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
				<property name="defaultTargetUrl" value="/sample/security/logoutSuccess.mvc"/>
			</bean>
		</constructor-arg>
		<constructor-arg><!-- 로그아웃 핸들러 클래스 설정 -->
			<list>
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
			</list>
		</constructor-arg>		
	</bean>
	
	<!-- 로그인 처리 설정 : Custom Filter(FORM_LOGIN_FILTER) -->
	<bean id="hone.service.security.AuthenticationFilter" 
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">      
		<property name="filterProcessesUrl" value="/security_check.mvc" /><!-- 로그인 프로세싱  URL 설정 -->
    	<property name="authenticationManager" ref="authenticationManager" /><!-- 인증 관리 클래스 설정 -->
    	<property name="authenticationSuccessHandler" ref="spring.security.authentication.successHandler" /><!-- 인증 성공 후처리 클래스 설정 -->
	    <property name="authenticationFailureHandler" ref="spring.security.authentication.failureHandler" /><!-- 인증 실패 후처리 클래스 설정 -->
	</bean>	
	
	<!-- 인증 관리 클래스(security:authentication-manager) 설정 -->  
	<security:authentication-manager alias="authenticationManager">
       <security:authentication-provider ref="hone.service.security.BaseAuthenticationProvider" />
    </security:authentication-manager>		
	
    <!-- 인증 처리 제공자(AuthenticationProvider) 설정 -->
	<bean id="hone.service.security.BaseAuthenticationProvider"
		class="hone.online.security.extend.BaseAuthenticationProvider">
		<property name="userDetailService" ref="hone.service.security.UserDetailsService"/><!-- 인증 객체 제공자 클래스 설정 -->
		<property name="passwordValidator" ref="hone.service.security.PasswordValidator"/><!--패스워드 체킹 클래스 지정-->
	</bean>	
	
	<!-- 인증 객체 제공자(AuthenticationUserDetailsService) 설정 : 프로젝트내 필수 확장점 -->
    <bean id="hone.service.security.UserDetailsService" 
    	class="hanwha.template.base.security.SampleUserDetailsService"/>  	
    	
	<!-- 패스워드 체커(PasswordValidator) 설정 -->
    <bean id="hone.service.security.PasswordValidator" 
    	class="hone.online.security.extend.BasePasswordValidator">
    	<!--<property name="passwordEncoder" ref=""/>--> <!--패스워드 인코딩 클래스 지정-->
    </bean>

	<!-- 로그인 성공시 처리(AuthenticationSuccessHandler)  설정 -->  
	<bean id="spring.security.authentication.successHandler" 
        class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler" >
        <property name="defaultTargetUrl" value="/sample/intro.mvc" />
    </bean>
    <!-- 로그인 실패시 처리(AuthenticationFailureHandler)  설정 -->  
    <bean id="spring.security.authentication.failureHandler" 
        class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
        <property name="defaultFailureUrl" value="/security/loginFail.mvc" />
    </bean>	

</beans>