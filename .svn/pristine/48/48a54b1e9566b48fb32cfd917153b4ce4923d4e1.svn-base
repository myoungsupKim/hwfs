<?xml version="1.0" encoding="euc-kr"?>
<query>
	<type>insert</type>
	<description><![CDATA[--레시피검색및 등록
-자재등록]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>
<![CDATA[
INSERT INTO FMM_RECIPE_ITEM( 
	 UPJANG
	, MENU_CD
	, RECIPE_CD
	, ITEM_CODE
	, ITEM_SEQ
	, NEED_QTY
	, EDIBLE_QTY
	, CUT_SPEC
	, ORDER_YN
	, PR_ID
	, PR_NUM
	, PR_QTY
	, NEED_DATE
	, UNIT_PRICE
	, OP_RATE
	, OP_PRICE
	, USE_YN
	, ATTR01
	, CUSER
	, CDATE
	, UUSER
	, UDATE
 ) 
(  
SELECT 
 #UPJANG#
, #MENU_CD#
, A.RECIPE_CD 
, A.ITEM_CODE 
, ROWNUM 
, A.NEED_QTY 
, ROUND(A.NEED_QTY * NVL((SELECT (100-NVL(DISUSE_RATE, 0)) / 100 AS CALC
                       	  FROM FSI_ITEM_NUT
                          WHERE ITEM_CODE = A.ITEM_CODE),1) , 2 )
, A.CUT_SPEC 
, 'N'
, ''
, 0
, 0
, FMP_GETEXCDATE_FUN(#NEED_DATE#, (SELECT SUM(D_DAYS) AS D_DAY
                                     FROM (SELECT 'G' AS GUBUN, 0 AS D_DAYS FROM DUAL
                                            UNION ALL
                                           SELECT 'G' AS GUBUN, NVL(D_DAYS,0) 
                                             FROM FMS_MEAL_CORNER 
                                            WHERE SUBINV_CODE = #SUBINV_CODE#
                                              AND MEAL = #MEAL#
                                              AND CORNER = #CORNER# )
                                    GROUP BY GUBUN)
                    ) AS NEED_DATE
     , NVL(B.SALE_PRICE,0) AS UNIT_PRICE
     , NVL(NVL(C.OP_RATE, D.OP_RATE), 0) AS OP_RATE --운영율 
     , CASE WHEN C.OP_PRICE IS NOT NULL OR C.OP_RATE IS NOT NULL  
           THEN DECODE(SIGN(NVL(C.OP_PRICE,0) ),0, SCC_CEIL(B.SALE_PRICE + (B.SALE_PRICE * NVL(C.OP_RATE,0) / 100),C.CEIL_VAL), C.OP_PRICE) 
           WHEN D.OP_PRICE IS NOT NULL OR D.OP_RATE IS NOT NULL  
           THEN DECODE(SIGN(NVL(D.OP_PRICE,0) ),0, SCC_CEIL(B.SALE_PRICE + (B.SALE_PRICE * NVL(D.OP_RATE,0) / 100),D.CEIL_VAL), D.OP_PRICE) 
           ELSE B.SALE_PRICE END AS OP_PRICE --운영단가 
	, 'Y'
	, 'N'
, #g_EmpNo#
, SYSDATE
, #g_EmpNo#
, SYSDATE
 FROM (
         SELECT UPJANG, RECIPE_CD, ITEM_CODE, SUM(NEED_QTY) NEED_QTY,MAX(CUT_SPEC) CUT_SPEC
          FROM (SELECT #UPJANG# UPJANG, B.RECIPE_CD, FMM_CHGITEM_FUN(#UPJANG#, B.ITEM_CODE) ITEM_CODE,
        		       B.NEED_QTY,B.CUT_SPEC
        		FROM   FMR_STD_RECIPE_ITEM B
        		WHERE  B.RECIPE_CD = #RECIPE_CD#
        		)
		GROUP BY UPJANG, RECIPE_CD,ITEM_CODE
 	  ) A 
     ,(SELECT A.ITEM_CODE, A.SALE_PRICE
         FROM HLDC_PO_CONTRACT_FSALE A, HLDC_ST_UPJANG B
        WHERE A.UPJANG = B.AP_UNITPRICE_UPJANG 
          AND B.UPJANG = #UPJANG#
          AND A.ITEM_CODE > ' '
          AND NVL( #NEED_DATE#, TO_CHAR(SYSDATE,'YYYYMMDD' ) ) BETWEEN A.CONTRACT_START AND NVL(A.CONTRACT_END,'99999999')		            
          AND A.SALE_PRICE > 0
          AND A.USE_YN = 'Y'
          AND A.CENTER_CODE = (SELECT CENTER_CODE FROM HLDC_PO_UPJANG_CENTER WHERE UPJANG = #UPJANG#)
       -----------
        UNION ALL
       -----------
       SELECT A.ITEM_CODE, A.SALE_PRICE
         FROM FMP_OTCUST_PRICE_AVA_V A
            ,(SELECT UPJANG, ITEM_CODE, MAX(SDATE) AS SDATE
                FROM FMP_OTCUST_PRICE_AVA_V
               WHERE UPJANG = (SELECT OTCUST_PRICE_UPJANG FROM FMS_UPJANG WHERE UPJANG = #UPJANG#)
                 AND SDATE <= #NEED_DATE#
               GROUP BY UPJANG, ITEM_CODE) B
        WHERE A.UPJANG = B.UPJANG
          AND A.SDATE = B.SDATE
          AND A.ITEM_CODE = B.ITEM_CODE
          AND A.SALE_PRICE > 0
          AND A.USE_YN = 'Y'
      ) B
    , FMS_ITEM_V E 
    , (         
	   SELECT ITEM_CODE, OP_RATE, OP_PRICE, CEIL_VAL 
	     FROM FMU_OP_RATE 
	    WHERE UPJANG = #UPJANG#
	      AND #NEED_DATE# BETWEEN SDATE AND EDATE 
	      AND USE_YN = 'Y' 
	      AND ITEM_TYPE = 'M' 
	   ) C 
	, (         
	   SELECT ITEM_CODE, OP_RATE, OP_PRICE, CEIL_VAL 
	     FROM FMU_OP_RATE 
	    WHERE UPJANG = #UPJANG# 
	      AND #NEED_DATE# BETWEEN SDATE AND EDATE 
	      AND USE_YN = 'Y' 
	      AND ITEM_TYPE = 'C' 
	    ) D 
      
      
 WHERE A.RECIPE_CD = #RECIPE_CD#
AND A.ITEM_CODE = B.ITEM_CODE(+)
AND A.ITEM_CODE = E.ITEM_CODE(+)
AND E.ITEM_CODE = C.ITEM_CODE(+)
AND E.ITEM_CLASS4 = D.ITEM_CODE(+)

 )	]]></statement>
	<input default-name="ds_in">
	</input>
	<output default-name="ds_out">
	</output>
</query>
