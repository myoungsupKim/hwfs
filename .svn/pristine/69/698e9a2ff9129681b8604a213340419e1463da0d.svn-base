<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="ls.lrm.testInfoRegDAO">
	<desc>접수정보 등록</desc>

	<!-- 시험항목목록 DATA를 조회한다. -->
	<statement name="selectTestArticleList" type="select"><![CDATA[
/* 접수등록 시 시험항목목록 조회 */
SELECT :seqNum AS SEQ_NUM
     , :specmCd AS SPECM_CD
     , A.SPECM_TYPE
     , A.MGRP_CD
     , A.MCALSS_CD
     , A.SCLASS_CD
     , A.INSPT_PURP
     , B.ARTICLE_CD
     , B.ARTICLE_NM
     , DECODE(A.LEGAL_BASIS,'Y','1','0') AS LEGAL_BASIS
     , DECODE(A.INSIDE_BASIS,'Y','1','0') AS INSIDE_BASIS
     , DECODE(C.MICBIO,'Y','1','0')          AS MICBIO
     , DECODE(C.MICBIO_1_GRADE,'Y','1','0')  AS MICBIO_1_GRADE
     , DECODE(C.MICBIO_2_GRADE,'Y','1','0')  AS MICBIO_2_GRADE
     , DECODE(C.MICBIO_3_GRADE,'Y','1','0')  AS MICBIO_3_GRADE
     , DECODE(C.MICBIO_4_GRADE,'Y','1','0')  AS MICBIO_4_GRADE
     , DECODE(C.MICBIO_5_GRADE,'Y','1','0')  AS MICBIO_5_GRADE
     , DECODE(C.PHYCHEM,'Y','1','0')         AS PHYCHEM
     , DECODE(C.PHYCHEM_1_GRADE,'Y','1','0') AS PHYCHEM_1_GRADE
     , DECODE(C.PHYCHEM_2_GRADE,'Y','1','0') AS PHYCHEM_2_GRADE
     , DECODE(C.PHYCHEM_3_GRADE,'Y','1','0') AS PHYCHEM_3_GRADE
     , DECODE(C.PHYCHEM_4_GRADE,'Y','1','0') AS PHYCHEM_4_GRADE
     , DECODE(C.PHYCHEM_5_GRADE,'Y','1','0') AS PHYCHEM_5_GRADE
     , A.BASIS_STAND
     , A.REMARK
     , B.INSPT_FLD
     , B.TAKE_TERM
     , B.NOT_FIT_CLSFI
     , B.COMM_1
     , B.COMM_2
     , B.COMM_3
     , B.COMM_4
     , B.COMM_5
     , B.COMM_CALC
     , 'TEST' AS TEST_CLASS
     --검사자명 추가 20160829 맹수영
     , B.MANAGE_SABUN SABUN
  FROM LCM_SPECM_TEST_MAPPING A
     , LCM_TEST_ARTICLE B
     , (
        SELECT X.SPECM_TYPE
             , X.MGRP_CD
             , X.MGRP_NM
             , Y.MCALSS_CD
             , Y.MCALSS_NM
             , Z.SCLASS_CD
             , Z.SCLASS_NM
             , U.MICBIO
             , U.MICBIO_1_GRADE
             , U.MICBIO_2_GRADE
             , U.MICBIO_3_GRADE
             , U.MICBIO_4_GRADE
             , U.MICBIO_5_GRADE
             , U.PHYCHEM
             , U.PHYCHEM_1_GRADE
             , U.PHYCHEM_2_GRADE
             , U.PHYCHEM_3_GRADE
             , U.PHYCHEM_4_GRADE
             , U.PHYCHEM_5_GRADE
        FROM   LCM_SPECM_TYPE_MGRP X
             , LCM_SPECM_TYPE_MCALSS Y
             , LCM_SPECM_TYPE_SCLASS Z
             , LCM_SPECM_DANGER_MAPPING U
        WHERE  X.SPECM_TYPE = :specmType
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.SPECM_TYPE = Z.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MGRP_CD = Z.MGRP_CD
           AND Y.MCALSS_CD = Z.MCALSS_CD
           AND X.USE_YN = 'Y'
           AND Y.USE_YN = 'Y'
           AND Z.USE_YN = 'Y'
           AND Z.MGRP_CD = U.MGRP_CD(+)
           AND Z.MCALSS_CD = U.MCALSS_CD(+)
           AND Z.SCLASS_CD = U.SCLASS_CD(+)
       ) C
 WHERE A.SPECM_TYPE = :specmType
   AND A.SPECM_TYPE = C.SPECM_TYPE
   AND A.MGRP_CD = C.MGRP_CD
   AND A.MCALSS_CD = C.MCALSS_CD
   AND A.SCLASS_CD = C.SCLASS_CD
   AND A.ARTICLE_CD = B.ARTICLE_CD
   AND A.MGRP_CD = :mgrpCd
   AND A.MCALSS_CD = :mcalssCd
   AND A.SCLASS_CD = :sclassCd
   AND A.INSPT_PURP = :insptPurp2
<#if longstorageYn?has_content || specmTypePcls?has_content>
UNION	/* 장기보존여부 시험항목 */
SELECT :seqNum AS SEQ_NUM
     , :specmCd AS SPECM_CD
     , C.SPECM_TYPE
     , C.MGRP_CD
     , C.MCALSS_CD
     , C.SCLASS_CD
     , :insptPurp2 AS INSPT_PURP
     , B.ARTICLE_CD
     , B.ARTICLE_NM
     , DECODE(A.LEGAL_BASIS,'Y','1','0') AS LEGAL_BASIS
     , DECODE(A.INSIDE_BASIS,'Y','1','0') AS INSIDE_BASIS
     , DECODE(C.MICBIO,'Y','1','0')          AS MICBIO
     , DECODE(C.MICBIO_1_GRADE,'Y','1','0')  AS MICBIO_1_GRADE
     , DECODE(C.MICBIO_2_GRADE,'Y','1','0')  AS MICBIO_2_GRADE
     , DECODE(C.MICBIO_3_GRADE,'Y','1','0')  AS MICBIO_3_GRADE
     , DECODE(C.MICBIO_4_GRADE,'Y','1','0')  AS MICBIO_4_GRADE
     , DECODE(C.MICBIO_5_GRADE,'Y','1','0')  AS MICBIO_5_GRADE
     , DECODE(C.PHYCHEM,'Y','1','0')         AS PHYCHEM
     , DECODE(C.PHYCHEM_1_GRADE,'Y','1','0') AS PHYCHEM_1_GRADE
     , DECODE(C.PHYCHEM_2_GRADE,'Y','1','0') AS PHYCHEM_2_GRADE
     , DECODE(C.PHYCHEM_3_GRADE,'Y','1','0') AS PHYCHEM_3_GRADE
     , DECODE(C.PHYCHEM_4_GRADE,'Y','1','0') AS PHYCHEM_4_GRADE
     , DECODE(C.PHYCHEM_5_GRADE,'Y','1','0') AS PHYCHEM_5_GRADE
     , A.BASIS_STAND
     , A.REMARK
     , B.INSPT_FLD
     , B.TAKE_TERM
     , B.NOT_FIT_CLSFI
     , B.COMM_1
     , B.COMM_2
     , B.COMM_3
     , B.COMM_4
     , B.COMM_5
     , B.COMM_CALC
     , 'LONG' AS TEST_CLASS
     --검사자명 추가 20160829 맹수영
     , B.MANAGE_SABUN SABUN
  FROM LCM_LONGSTORAGE_TEST_MAPPING A
     , LCM_TEST_ARTICLE B
     , (
        SELECT X.SPECM_TYPE
             , X.MGRP_CD
             , X.MGRP_NM
             , Y.MCALSS_CD
             , Y.MCALSS_NM
             , Z.SCLASS_CD
             , Z.SCLASS_NM
             , U.MICBIO
             , U.MICBIO_1_GRADE
             , U.MICBIO_2_GRADE
             , U.MICBIO_3_GRADE
             , U.MICBIO_4_GRADE
             , U.MICBIO_5_GRADE
             , U.PHYCHEM
             , U.PHYCHEM_1_GRADE
             , U.PHYCHEM_2_GRADE
             , U.PHYCHEM_3_GRADE
             , U.PHYCHEM_4_GRADE
             , U.PHYCHEM_5_GRADE
        FROM   LCM_SPECM_TYPE_MGRP X
             , LCM_SPECM_TYPE_MCALSS Y
             , LCM_SPECM_TYPE_SCLASS Z
             , LCM_SPECM_DANGER_MAPPING U
        WHERE  X.SPECM_TYPE = :specmType
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.SPECM_TYPE = Z.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MGRP_CD = Z.MGRP_CD
           AND Y.MCALSS_CD = Z.MCALSS_CD
           AND X.USE_YN = 'Y'
           AND Y.USE_YN = 'Y'
           AND Z.USE_YN = 'Y'
           AND Z.MGRP_CD = U.MGRP_CD(+)
           AND Z.MCALSS_CD = U.MCALSS_CD(+)
           AND Z.SCLASS_CD = U.SCLASS_CD(+)
       ) C
 WHERE C.SPECM_TYPE = :specmType
   AND A.ARTICLE_CD = B.ARTICLE_CD
   AND C.MGRP_CD = :mgrpCd
   AND C.MCALSS_CD = :mcalssCd
   AND C.SCLASS_CD = :sclassCd
   <#if longstorageYn?has_content && !specmTypePcls?has_content>AND A.LONGSTORAGE_YN = :longstorageYn </#if>
   <#if !longstorageYn?has_content && specmTypePcls?has_content>AND A.LONGSTORAGE_YN = :specmTypePcls </#if>
   <#if longstorageYn?has_content && specmTypePcls?has_content>AND A.LONGSTORAGE_YN IN ( :longstorageYn, :specmTypePcls )</#if>
</#if>
        ]]></statement>

	<!-- FC사업장 -->
	<statement name="selectUpjang101List" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectUpjang101List */
		<![CDATA[
/* FC사업장 */
SELECT B.ORG_CD, B.ORG_LEVEL, B.ORG_PATH, A.UPJANG, A.UPJANGNM, SUBSTR(A.SAUPNO, 1, 10) AS SAUPNO, A.DRNAME AS CEO
  FROM SCO_UPJANG_V A,
       SCC_TREE_ORG_V B
 WHERE B.ORG_CD = A.CC_CD
<#if edtSearch?has_content> AND (TO_CHAR(A.UPJANG) = :edtSearch OR A.UPJANGNM LIKE '%' || :edtSearch || '%') </#if>
 ORDER BY B.ORG_LEVEL, A.UPJANG
        ]]>
	</statement>

	<!-- 식재영업장 -->
	<statement name="selectUpjang102List" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectUpjang102List */
		<![CDATA[
/* 식재영업장 */
SELECT B.ORG_CD, B.ORG_LEVEL, B.ORG_PATH, A.UPJANG, A.UPJANGNM, '' AS SAUPNO, A.PART_NAME AS CEO
  FROM FMS_UPJANG_V A,
       SCC_TREE_ORG_V B,
       ST_CUST C
 WHERE B.ORG_CD = A.BO_CC_CD
   AND A.USE_YN = 'Y'
   AND A.CUSTCD = C.CUSTCD
   AND C.CUSTGUBUN IN ('002', '003')
<#if edtSearch?has_content>   AND (TO_CHAR(A.UPJANG) = :edtSearch OR A.UPJANGNM LIKE '%' || :edtSearch || '%') </#if>
 ORDER BY B.ORG_LEVEL, A.UPJANG
        ]]>
	</statement>

	<!-- 호텔 -->
	<statement name="selectUpjang103List" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectUpjang103List */
		<![CDATA[
/* 호텔 */
SELECT B.ORG_CD, B.ORG_LEVEL, B.ORG_PATH, A.CC_CD AS UPJANG, A.CC_NM AS UPJANGNM, '' AS SAUPNO, '' AS CEO
  FROM SCC_CC A,
       SCC_TREE_ORG_V B
 WHERE B.ORG_CD = A.CC_CD
   AND A.BU_CD = (SELECT SET2 FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'DATA_SET' AND CODE = 'DEF_BU_CODE')
<#if edtSearch?has_content>   AND (A.CC_CD = :edtSearch OR A.CC_NM LIKE '%' || :edtSearch || '%') </#if>
 ORDER BY SUBSTR(B.HLEVEL_ORG_MGMT_CD, 1, 5), B.ORG_LEVEL, A.CC_CD
    ]]>
	</statement>

	<!-- 리조트 -->
	<statement name="selectUpjang106List" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectUpjang103List */
		<![CDATA[
/* 리조트 */
SELECT B.ORG_CD, B.ORG_LEVEL, B.ORG_PATH, A.CC_CD AS UPJANG, A.CC_NM AS UPJANGNM, '' AS SAUPNO, '' AS CEO
  FROM SCC_CC A,
       SCC_TREE_ORG_V B
 WHERE B.ORG_CD = A.CC_CD
   AND A.BU_CD = (SELECT SET1 FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'DATA_SET' AND CODE = 'DEF_BU_CODE')
<#if edtSearch?has_content>   AND (A.CC_CD = :edtSearch OR A.CC_NM LIKE '%' || :edtSearch || '%') </#if>
 ORDER BY SUBSTR(B.HLEVEL_ORG_MGMT_CD, 1, 5), B.ORG_LEVEL, A.CC_CD
    ]]>
	</statement>

	<!-- 계열사 -->
	<statement name="selectUpjang104List" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectUpjang104List */
		<![CDATA[
/* 계열사 */
SELECT '' AS ORG_CD, '' AS ORG_LEVEL, CUSTNM AS ORG_PATH, CUSTCD AS UPJANG, CUSTNM AS UPJANGNM, SAUPNO, DRNAME1 AS CEO
  FROM ST_CUST
 WHERE CUSTTYPE = '004'
   AND CUSTGUBUN IN ('002', '003')  -- 매출, 매입/매출
   --AND SAP_CUST_CD IS NOT NULL
<#if edtSearch?has_content>   AND (TO_CHAR(CUSTCD) = :edtSearch OR CUSTNM LIKE '%' || :edtSearch || '%') </#if>
 ORDER BY CUSTCD
    ]]>
	</statement>

	<!-- 협력업체 -->
	<statement name="selectUpjang105List" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectUpjang105List */
		<![CDATA[
/* 협력업체 */
SELECT '' AS ORG_CD, '' AS ORG_LEVEL, CUSTNM AS ORG_PATH, CUSTCD AS UPJANG, CUSTNM AS UPJANGNM, SAUPNO, DRNAME1 AS CEO
  FROM ST_CUST
 WHERE CUSTTYPE <> '004'
   AND CUSTGUBUN IN ('002', '003')  -- 매출, 매입/매출
   --AND SAP_CUST_CD IS NOT NULL
   AND (TO_CHAR(CUSTCD) = :edtSearch OR CUSTNM LIKE '%' || :edtSearch || '%')
 ORDER BY CUSTCD
        ]]>
	</statement>

	<!-- 접수 - 의뢰번호를 채번 한다. -->
	<statement name="selectCreateReqNum" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectCreateReqNum */
		<![CDATA[
/* 접수 - 의뢰번호 채번 */
SELECT 'R-' ||
       SUBSTR(:reqDate, 3, 6) ||
       LPAD(TO_NUMBER(NVL(MAX(SUBSTR(REQ_NUM,9,3)),0)) + 1, 3, '0') AS REQ_NUM
  FROM LRM_TEST_REQ_ACCEPT
 WHERE SUBSTR(REQ_NUM,3,6) = SUBSTR(:reqDate, 3, 6)
        ]]>
	</statement>

	<!-- 접수 - 검체 접수번호를 채번 한다. -->
	<statement name="selectCreateAcceptNum" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectCreateAcceptNum */
		<![CDATA[
/* 접수 - 검체 접수번호 채번 */
SELECT 'A-' ||
       SUBSTR(:reqNum,3,9) ||
       LPAD(TO_NUMBER(NVL(MAX(SUBSTR(ACCEPT_NUM,12,3)),0)) + 1, 3, '0') AS ACCEPT_NUM
  FROM LRM_SPECM_INFO
 WHERE SUBSTR(ACCEPT_NUM,3,9) = SUBSTR(:reqNum,3,9)
        ]]>
	</statement>

	<!-- 의뢰정보를 생성한다. -->
	<statement name="insertProcDesc" type="insert">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.insertProcDesc */
		<![CDATA[
/* 의뢰정보 생성 */
INSERT INTO LRM_PROC_DESC
(
   REQ_NUM
 , PROC_CLASS
 , SEQ
 , PROC_USER
 , PROCDD
 <#if procReason?exists>, PROC_REASON</#if>
)
SELECT :reqNum
      , :procClass
      , (SELECT NVL(MAX(SEQ), 0) + 1 FROM LRM_PROC_DESC WHERE REQ_NUM = :reqNum)
      , :loginSabun
      , TO_CHAR(SYSDATE, 'YYYYMMDD')
      <#if procReason?exists>, :procReason</#if>
  FROM DUAL
        ]]>
	</statement>

	<!-- 의뢰정보를 생성한다. -->
	<statement name="insertTestReqAcceptList" type="insert">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.insertTestReqAcceptList
		*/
		<![CDATA[
/* 의뢰정보 생성 */
INSERT INTO LRM_TEST_REQ_ACCEPT
(
 REQ_NUM,
 REQ_DATE,
 ACCEPTNM,
 UPJANG,
 UPJANG_NM,
 ORG_NM,
 PCLS_UPJANG_NM,
 BIZ_NO,
 REQ_USER_NM,
 REQ_USER_TELNO,
 REQ_USER_EMAIL,
 REQ_USER_REMARK,
 INSIDE_EXTR_CLASS,
 APPROVAL_CLASS,
 INSPT_REQ_PLCE,
 INSPECT_RPT_ISSUE,
 PROGRESS_STATUS,
 ACCEPT_CLASS,
 CEO,
 VD_CD,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :reqNum,
<#if reqDate?exists> :reqDate, <#else> null, </#if>
<#if acceptnm?exists> :acceptnm, <#else> null, </#if>
<#if upjang?exists> :upjang, <#else> null, </#if>
<#if upjangNm?exists> :upjangNm, <#else> null, </#if>
<#if orgNm?exists> :orgNm, <#else> null, </#if>
<#if pclsUpjangNm?exists> :pclsUpjangNm, <#else> null, </#if>
<#if bizNo?exists> :bizNo, <#else> null, </#if>
<#if reqUserNm?exists> :reqUserNm, <#else> null, </#if>
<#if reqUserTelno1?exists> SCC_CRYPTO.ENC_FUN(:reqUserTelno1||:reqUserTelno2||:reqUserTelno3), <#else> null, </#if>
<#if reqUserEmail?exists> SCC_CRYPTO.ENC_FUN(:reqUserEmail), <#else> null, </#if>
<#if reqUserRemark?exists> :reqUserRemark, <#else> null, </#if>
<#if insideExtrClass?exists> :insideExtrClass, <#else> null, </#if>
<#if approvalClass?exists> :approvalClass, <#else> null, </#if>
<#if insptReqPlce?exists> :insptReqPlce, <#else> null, </#if>
<#if inspectRptIssue?exists> :inspectRptIssue, <#else> 'N', </#if>
'110',	/* 접수중 - 공통코드 : 진행 상태(PROGRESS_STATUS) */
<#if acceptClass?exists> :acceptClass, <#else> null, </#if>
<#if ceo?exists> :ceo, <#else> null, </#if>
<#if vdCd?exists> :vdCd, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
        ]]>
	</statement>

	<!-- 의뢰정보를 수정한다. -->
	<statement name="updateTestReqAcceptList" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.updateTestReqAcceptList
		*/
		<![CDATA[
/* 의뢰정보 수정 */
UPDATE LRM_TEST_REQ_ACCEPT SET
<#if reqDate?exists> REQ_DATE = :reqDate, </#if>
<#if acceptnm?exists> ACCEPTNM = :acceptnm, </#if>
<#if upjang?exists> UPJANG = :upjang, </#if>
<#if upjangNm?exists> UPJANG_NM = :upjangNm, </#if>
<#if orgNm?exists> ORG_NM = :orgNm, </#if>
<#if pclsUpjangNm?exists> PCLS_UPJANG_NM = :pclsUpjangNm, </#if>
<#if bizNo?exists> BIZ_NO = :bizNo, </#if>
<#if reqUserNm?exists> REQ_USER_NM = :reqUserNm, </#if>
<#if reqUserTelno1?exists> REQ_USER_TELNO = SCC_CRYPTO.ENC_FUN(:reqUserTelno1||:reqUserTelno2||:reqUserTelno3), </#if>
<#if reqUserEmail?exists> REQ_USER_EMAIL = SCC_CRYPTO.ENC_FUN(:reqUserEmail), </#if>
<#if reqUserRemark?exists> REQ_USER_REMARK = :reqUserRemark, </#if>
<#if insideExtrClass?exists> INSIDE_EXTR_CLASS = :insideExtrClass, </#if>
<#if approvalClass?exists> APPROVAL_CLASS = :approvalClass, </#if>
<#if inspectRptIssue?exists> INSPECT_RPT_ISSUE = :inspectRptIssue, </#if>
<#if acceptClass?exists> ACCEPT_CLASS = :acceptClass, </#if>
<#if ceo?exists> CEO = :ceo, </#if>
<#if vdCd?exists> VD_CD = :vdCd, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  REQ_NUM = :reqNum
        ]]>
	</statement>

	<!-- 검체정보를 생성한다. -->
	<statement name="insertSpecmInfoList" type="insert">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.insertSpecmInfoList */
		<![CDATA[
/* 검체정보 생성 */
INSERT INTO LRM_SPECM_INFO
(
 REQ_NUM,
 ACCEPT_NUM,
 ACCEPTDD,
 SPECM_CLASS,
 SPECM_CD,
 SPECM_NM,
 SPECM_TYPE,
 MGRP_CD,
 MCALSS_CD,
 SCLASS_CD,
 SPECM_TYPE_PCLS,
 COST_CLASS,
 INSPT_MTOD,
 INSPT_CLASS,
 INSPT_PURP_1,
 INSPT_PURP_2,
 INSPT_PURP_3,
 SPECM_WTRLST_NM,
 LONGSTORAGE_YN,
 INSPTBEFORE_SPECM_STATUS,
 PICK_STATUS,
 INSPT_OBJ_1,
 INSPT_OBJ_2,
 INSPT_OBJ_3,
 INSPT_OBJ_4,
 MFGWON,
 MFG_VENDOR,
 MFG_NATION,
 MFG_LOCATION,
 DTR_VENDOR,
 ACCEPTCITY_TEMPR,
 STAND,
 UNIT,
 ORIGIN,
 CHARG_BASIS,
 MFGDD,
 DTRLIMT,
 DTRLIMT_MTS,
 DTRLIMT_DD,
 SPECM_DELIVER_PCLSFACT,
 PROGRESS_STATUS,
 NOT_FIT_CLSFI,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :reqNum,
 :acceptNum,
<#if acceptdd?exists> :acceptdd, <#else> null, </#if>
<#if specmClass?exists> :specmClass, <#else> null, </#if>
<#if specmCd?exists> :specmCd, <#else> null, </#if>
<#if specmNm?exists> :specmNm, <#else> null, </#if>
<#if specmType?exists> :specmType, <#else> null, </#if>
<#if mgrpCd?exists> :mgrpCd, <#else> null, </#if>
<#if mcalssCd?exists> :mcalssCd, <#else> null, </#if>
<#if sclassCd?exists> :sclassCd, <#else> null, </#if>
<#if specmTypePcls?exists> :specmTypePcls, <#else> null, </#if>
<#if costClass?exists> :costClass, <#else> null, </#if>
<#if insptMtod?exists> :insptMtod, <#else> null, </#if>
<#if insptClass?exists> :insptClass, <#else> null, </#if>
<#if insptPurp1?exists> :insptPurp1, <#else> null, </#if>
<#if insptPurp2?exists> :insptPurp2, <#else> null, </#if>
<#if insptPurp3?exists> :insptPurp3, <#else> null, </#if>
<#if specmWtrlstNm?exists> :specmWtrlstNm, <#else> null, </#if>
<#if longstorageYn?exists> :longstorageYn, <#else> null, </#if>
<#if insptbeforeSpecmStatus?exists> :insptbeforeSpecmStatus, <#else> null, </#if>
<#if pickStatus?exists> :pickStatus, <#else> null, </#if>
<#if insptObj1?exists> :insptObj1, <#else> null, </#if>
<#if insptObj2?exists> :insptObj2, <#else> null, </#if>
<#if insptObj3?exists> :insptObj3, <#else> null, </#if>
<#if insptObj4?exists> :insptObj4, <#else> null, </#if>
<#if mfgwon?exists> :mfgwon, <#else> null, </#if>
<#if mfgVendor?exists> :mfgVendor, <#else> null, </#if>
<#if mfgNation?exists> :mfgNation, <#else> null, </#if>
<#if mfgLocation?exists> :mfgLocation, <#else> null, </#if>
<#if dtrVendor?exists> :dtrVendor, <#else> null, </#if>
<#if acceptcityTempr?exists> :acceptcityTempr, <#else> null, </#if>
<#if stand?exists> :stand, <#else> null, </#if>
<#if unit?exists> :unit, <#else> null, </#if>
<#if origin?exists> :origin, <#else> null, </#if>
<#if chargBasis?exists> :chargBasis, <#else> null, </#if>
<#if mfgdd?exists> :mfgdd, <#else> null, </#if>
<#if dtrlimt?exists> :dtrlimt, <#else> null, </#if>
<#if dtrlimtMts?exists> :dtrlimtMts, <#else> null, </#if>
<#if dtrlimtDd?exists> :dtrlimtDd, <#else> null, </#if>
<#if specmDeliverPclsfact?exists> :specmDeliverPclsfact, <#else> null, </#if>
'110',	/* 접수중 - 공통코드 : 진행 상태(PROGRESS_STATUS) */
<#if notFitClsfi?exists> :notFitClsfi, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
        ]]>
	</statement>

	<!-- 검체정보를 수정한다. -->
	<statement name="updateSpecmInfoList" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.updateSpecmInfoList */
		<![CDATA[
/* 검체정보 수정 */
UPDATE LRM_SPECM_INFO SET
<#if acceptdd?exists> ACCEPTDD = :acceptdd, </#if>
<#if specmClass?exists> SPECM_CLASS = :specmClass, </#if>
<#if specmCd?exists> SPECM_CD = :specmCd, </#if>
<#if specmNm?exists> SPECM_NM = :specmNm, </#if>
<#if specmType?exists> SPECM_TYPE = :specmType, </#if>
<#if mgrpCd?exists> MGRP_CD = :mgrpCd, </#if>
<#if mcalssCd?exists> MCALSS_CD = :mcalssCd, </#if>
<#if sclassCd?exists> SCLASS_CD = :sclassCd, </#if>
<#if specmTypePcls?exists> SPECM_TYPE_PCLS = :specmTypePcls, </#if>
<#if costClass?exists> COST_CLASS = :costClass, </#if>
<#if insptMtod?exists> INSPT_MTOD = :insptMtod, </#if>
<#if insptClass?exists> INSPT_CLASS = :insptClass, </#if>
<#if insptPurp1?exists> INSPT_PURP_1 = :insptPurp1, </#if>
<#if insptPurp2?exists> INSPT_PURP_2 = :insptPurp2, </#if>
<#if insptPurp3?exists> INSPT_PURP_3 = :insptPurp3, </#if>
<#if specmWtrlstNm?exists> SPECM_WTRLST_NM = :specmWtrlstNm, </#if>
<#if longstorageYn?exists> LONGSTORAGE_YN = :longstorageYn, </#if>
<#if insptbeforeSpecmStatus?exists> INSPTBEFORE_SPECM_STATUS = :insptbeforeSpecmStatus, </#if>
<#if pickStatus?exists> PICK_STATUS = :pickStatus, </#if>
<#if insptObj1?exists> INSPT_OBJ_1 = :insptObj1, </#if>
<#if insptObj2?exists> INSPT_OBJ_2 = :insptObj2, </#if>
<#if insptObj3?exists> INSPT_OBJ_3 = :insptObj3, </#if>
<#if insptObj4?exists> INSPT_OBJ_4 = :insptObj4, </#if>
<#if mfgwon?exists> MFGWON = :mfgwon, </#if>
<#if mfgVendor?exists> MFG_VENDOR = :mfgVendor, </#if>
<#if mfgNation?exists> MFG_NATION = :mfgNation, </#if>
<#if mfgLocation?exists> MFG_LOCATION = :mfgLocation, </#if>
<#if dtrVendor?exists> DTR_VENDOR = :dtrVendor, </#if>
<#if acceptcityTempr?exists> ACCEPTCITY_TEMPR = :acceptcityTempr, </#if>
<#if stand?exists> STAND = :stand, </#if>
<#if unit?exists> UNIT = :unit, </#if>
<#if origin?exists> ORIGIN = :origin, </#if>
<#if chargBasis?exists> CHARG_BASIS = :chargBasis, </#if>
<#if mfgdd?exists> MFGDD = :mfgdd, </#if>
<#if dtrlimt?exists> DTRLIMT = :dtrlimt, </#if>
<#if dtrlimtMts?exists> DTRLIMT_MTS = :dtrlimtMts, </#if>
<#if dtrlimtDd?exists> DTRLIMT_DD = :dtrlimtDd, </#if>
<#if specmDeliverPclsfact?exists> SPECM_DELIVER_PCLSFACT = :specmDeliverPclsfact, </#if>
<#if notFitClsfi?exists> NOT_FIT_CLSFI = :notFitClsfi, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  REQ_NUM = :reqNum
AND    ACCEPT_NUM = :acceptNum
        ]]>
	</statement>

	<!-- 검체정보를 삭제한다. -->
	<statement name="deleteSpecmInfoList" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.deleteSpecmInfoList */
		<![CDATA[
/* 검체정보 삭제 */
DELETE FROM LRM_SPECM_INFO
WHERE  REQ_NUM = :reqNum
AND    ACCEPT_NUM = :acceptNum
        ]]>
	</statement>

	<!-- 시험항목정보를 생성한다. -->
	<statement name="insertTestInfoList" type="insert">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.insertTestInfoList */
		<![CDATA[
/* 시험항목정보 생성 */
INSERT INTO LRM_TEST_INFO
(
 REQ_NUM,
 ACCEPT_NUM,
 ARTICLE_CD,
 LEGAL_BASIS,
 INSIDE_BASIS,
 INSPT_FLD,
 BASIS_STAND,
 COMM_1_USE_YN,
 COMM_1,
 COMM_2_USE_YN,
 COMM_2,
 COMM_3_USE_YN,
 COMM_3,
 COMM_4_USE_YN,
 COMM_4,
 COMM_5_USE_YN,
 COMM_5,
 SABUN,
 INSPT_METHOD,
 JOB_ORDER,
 PROGRESS_STATUS,
 TEST_CLASS,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :reqNum,
 :acceptNum,
 :articleCd,
<#if legalBasis?exists> DECODE(:legalBasis, '1', 'Y', 'N'), <#else> null, </#if>
<#if insideBasis?exists> DECODE(:insideBasis, '1', 'Y', 'N'), <#else> null, </#if>
<#if insptFld?exists> :insptFld, <#else> null, </#if>
<#if basisStand?exists> :basisStand, <#else> null, </#if>
<#if comm1UseYn?exists> DECODE(:comm1UseYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if comm1?exists> :comm1, <#else> null, </#if>
<#if comm2UseYn?exists> DECODE(:comm2UseYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if comm2?exists> :comm2, <#else> null, </#if>
<#if comm3UseYn?exists> DECODE(:comm3UseYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if comm3?exists> :comm3, <#else> null, </#if>
<#if comm4UseYn?exists> DECODE(:comm4UseYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if comm4?exists> :comm4, <#else> null, </#if>
<#if comm5UseYn?exists> DECODE(:comm5UseYn, '1', 'Y', 'N'), <#else> null, </#if>
<#if comm5?exists> :comm5, <#else> null, </#if>
<#if sabun?exists> :sabun, <#else> null, </#if>
<#if insptMethod?exists> :insptMethod, <#else> null, </#if>
<#if jobOrder?exists> :jobOrder, <#else> null, </#if>
'110',	/* 접수중 - 공통코드 : 진행 상태(PROGRESS_STATUS) */
<#if testClass?exists> :testClass, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
        ]]>
	</statement>

	<!-- 시험항목정보를 수정한다. -->
	<statement name="updateTestInfoList" type="update"><![CDATA[
/* 시험항목정보 수정 */
UPDATE LRM_TEST_INFO SET
ARTICLE_CD = :articleCd,
<#if legalBasis?exists> LEGAL_BASIS = DECODE(:legalBasis, '1', 'Y', 'N'), </#if>
<#if insideBasis?exists> INSIDE_BASIS = DECODE(:insideBasis, '1', 'Y', 'N'), </#if>
<#if insptFld?exists> INSPT_FLD = :insptFld, </#if>
<#if basisStand?exists> BASIS_STAND = :basisStand, </#if>
<#if comm1UseYn?exists> COMM_1_USE_YN = DECODE(:comm1UseYn, '1', 'Y', 'N'), </#if>
<#if comm1?exists> COMM_1 = :comm1, </#if>
<#if comm2UseYn?exists> COMM_2_USE_YN = DECODE(:comm2UseYn, '1', 'Y', 'N'), </#if>
<#if comm2?exists> COMM_2 = :comm2, </#if>
<#if comm3UseYn?exists> COMM_3_USE_YN = DECODE(:comm3UseYn, '1', 'Y', 'N'), </#if>
<#if comm3?exists> COMM_3 = :comm3, </#if>
<#if comm4UseYn?exists> COMM_4_USE_YN = DECODE(:comm4UseYn, '1', 'Y', 'N'), </#if>
<#if comm4?exists> COMM_4 = :comm4, </#if>
<#if comm5UseYn?exists> COMM_5_USE_YN = DECODE(:comm5UseYn, '1', 'Y', 'N'), </#if>
<#if comm5?exists> COMM_5 = :comm5, </#if>
<#if sabun?exists> SABUN = :sabun, </#if>
<#if insptMethod?exists> INSPT_METHOD = :insptMethod, </#if>
<#if jobOrder?exists> JOB_ORDER = :jobOrder, </#if>
<#if testClass?exists> TEST_CLASS = :testClass, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  REQ_NUM = :reqNum
AND    ACCEPT_NUM = :acceptNum
AND    ARTICLE_CD = <#if oldArticleCd?exists> :oldArticleCd <#else> :articleCd </#if>]]></statement>

	<!-- 시험항목정보를 삭제한다. -->
	<statement name="deleteTestInfoList" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.deleteTestInfoList */
		<![CDATA[
/* 시험항목정보 삭제 */
DELETE FROM LRM_TEST_INFO
WHERE  REQ_NUM = :reqNum
AND    ACCEPT_NUM = :acceptNum
AND    ARTICLE_CD = :articleCd
        ]]>
	</statement>

	<!-- 시험일지정보를 삭제한다. -->
	<statement name="deleteTestDialyList" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.deleteTestDialyList */
		<![CDATA[
/* 시험일지정보 삭제 */
DELETE FROM LTM_TEST_DIARY
WHERE  REQ_NUM = :reqNum
AND    ACCEPT_NUM = :acceptNum
AND    ARTICLE_CD = :articleCd
        ]]>
	</statement>

	<!-- 의뢰정보 DATA를 조회한다. -->
	<statement name="selectTestReqAcceptList" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectTestReqAcceptList
		*/
		<![CDATA[
/* 접수 등록 후 의뢰번호로 접수정보 조회 */
SELECT A.REQ_NUM,
       A.REQ_DATE,
       A.ACCEPTNM,
       A.UPJANG,
       A.UPJANG_NM,
       A.ORG_NM,
       A.PCLS_UPJANG_NM,
       A.BIZ_NO,
       SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_NM, 12, :loginPersMask, :maskAuth) AS REQ_USER_NM,
       SCC_TELNO_SPLIT_FUN(SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_TELNO, 8, :loginPersMask, :maskAuth), 1) AS REQ_USER_TELNO1,
       SCC_TELNO_SPLIT_FUN(SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_TELNO, 8, :loginPersMask, :maskAuth), 2) AS REQ_USER_TELNO2,
       SCC_TELNO_SPLIT_FUN(SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_TELNO, 8, :loginPersMask, :maskAuth), 3) AS REQ_USER_TELNO3,
       SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_EMAIL, 7, :loginPersMask, :maskAuth) AS REQ_USER_EMAIL,
       A.REQ_USER_REMARK,
       A.INSIDE_EXTR_CLASS,
       A.APPROVAL_CLASS,
       A.INSPT_REQ_PLCE,
       DECODE(NVL(A.INSPECT_RPT_ISSUE, 'N'), 'N', 'N', A.INSPECT_RPT_ISSUE) AS INSPECT_RPT_ISSUE,
       A.PROGRESS_STATUS,
       A.LAST_DECISION,
       A.ACCEPT_CLASS,
       SCC_CODE_NM('ACCEPT_CLASS', A.ACCEPT_CLASS) AS ACCEPT_CLASS_NM,
       A.CEO
FROM   LRM_TEST_REQ_ACCEPT A
WHERE  A.REQ_NUM = :reqNum
        ]]>
	</statement>

	<!--검체정보 DATA를 조회한다. -->
	<statement name="selectSpecmInfoList" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectSpecmInfoList */
		<![CDATA[
/* 접수 등록 후 의뢰번호로 검체정보 조회 */
SELECT A.REQ_NUM,
       A.ACCEPT_NUM AS SEQ_NUM,
       A.ACCEPT_NUM,
       A.ACCEPTDD,
       A.SPECM_CLASS,
       A.SPECM_CD,
       A.SPECM_NM,
       A.SPECM_TYPE,
       A.MGRP_CD,
       A.MCALSS_CD,
       A.SCLASS_CD,
       ((SELECT X.MGRP_NM FROM LCM_SPECM_TYPE_MGRP X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MGRP_CD = A.MGRP_CD) || ' / ' ||
        (SELECT X.MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MCALSS_CD = A.MCALSS_CD) || ' / ' ||
        (SELECT X.SCLASS_NM FROM LCM_SPECM_TYPE_SCLASS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.SCLASS_CD = A.SCLASS_CD))
       AS SPECM_TYPE_NM,				/* 검체 유형명 ( 대분류명 / 중분류명 / 소분류명 ) */
       SCC_CODE_NM('SPECM_TYPE_PCLS', A.SPECM_TYPE_PCLS) AS SPECM_TYPE_PCLS_NM,	/* 세부 검체 유형 */
       A.SPECM_TYPE_PCLS,
       A.COST_CLASS,
       A.INSPT_MTOD,
       A.INSPT_CLASS,
       A.INSPT_PURP_1,
       A.INSPT_PURP_2,
       A.INSPT_PURP_3,
       A.SPECM_WTRLST_NM,
       A.LONGSTORAGE_YN,
       A.INSPTBEFORE_SPECM_STATUS,
       A.PICK_STATUS,
       A.INSPT_OBJ_1,
       A.INSPT_OBJ_2,
       A.INSPT_OBJ_3,
       A.INSPT_OBJ_4,
       A.MFGWON,
       A.DTR_VENDOR,
       A.ACCEPTCITY_TEMPR,
       A.STAND,
       A.UNIT,
       A.ORIGIN,
       A.CHARG_BASIS,
       A.MFGDD,
       A.MFG_VENDOR,         /* 제조 업체 */
       A.MFG_NATION,         /* 제조 국가 */
       A.MFG_LOCATION,       /* 제조 소재지 */
       A.DTRLIMT,
       A.DTRLIMT_MTS,
       A.DTRLIMT_DD,
       A.SPECM_DELIVER_PCLSFACT,
       A.PROGRESS_STATUS,
       A.NOT_FIT_CLSFI,
       A.LAST_DECISION
FROM   LRM_SPECM_INFO A
WHERE  A.REQ_NUM = :reqNum
ORDER BY A.ACCEPT_NUM
        ]]>
	</statement>

	<!--시험정보 DATA를 조회한다. -->
	<statement name="selectTestInfoList" type="select"><![CDATA[
/* 접수 등록 후 의뢰번호로 시험정보 조회 */
SELECT B.ACCEPT_NUM AS SEQ_NUM
     , D.SPECM_CD
     , B.REQ_NUM
     , B.ACCEPT_NUM
     , D.SPECM_TYPE
     , D.MGRP_CD
     , D.MCALSS_CD
     , D.SCLASS_CD
     , B.ARTICLE_CD
     , TA.ARTICLE_NM
     , B.BASIS_STAND
     , B.INSPT_FLD
     , TA.TAKE_TERM
     , TA.NOT_FIT_CLSFI
     , DECODE(B.COMM_1_USE_YN,'Y','1','0') AS COMM_1_USE_YN
     , B.COMM_1
     , DECODE(B.COMM_2_USE_YN,'Y','1','0') AS COMM_2_USE_YN
     , B.COMM_2
     , DECODE(B.COMM_3_USE_YN,'Y','1','0') AS COMM_3_USE_YN
     , B.COMM_3
     , DECODE(B.COMM_4_USE_YN,'Y','1','0') AS COMM_4_USE_YN
     , B.COMM_4
     , DECODE(B.COMM_5_USE_YN,'Y','1','0') AS COMM_5_USE_YN
     , B.COMM_5
     , B.SABUN
     , B.INSPT_METHOD
     , B.JOB_ORDER
     , B.TEST_CLASS
     , DECODE(B.LEGAL_BASIS,'Y','1','0') AS LEGAL_BASIS
     , DECODE(B.INSIDE_BASIS,'Y','1','0') AS INSIDE_BASIS
     , DECODE(B.INSPT_FLD, '101', '1', DECODE(C.MICBIO,'Y','1','0'))          AS MICBIO
     , DECODE(C.MICBIO_1_GRADE,'Y','1','0')  AS MICBIO_1_GRADE
     , DECODE(C.MICBIO_2_GRADE,'Y','1','0')  AS MICBIO_2_GRADE
     , DECODE(C.MICBIO_3_GRADE,'Y','1','0')  AS MICBIO_3_GRADE
     , DECODE(C.MICBIO_4_GRADE,'Y','1','0')  AS MICBIO_4_GRADE
     , DECODE(C.MICBIO_5_GRADE,'Y','1','0')  AS MICBIO_5_GRADE
     , DECODE(B.INSPT_FLD, '102', '1', DECODE(C.PHYCHEM,'Y','1','0'))         AS PHYCHEM
     , DECODE(C.PHYCHEM_1_GRADE,'Y','1','0') AS PHYCHEM_1_GRADE
     , DECODE(C.PHYCHEM_2_GRADE,'Y','1','0') AS PHYCHEM_2_GRADE
     , DECODE(C.PHYCHEM_3_GRADE,'Y','1','0') AS PHYCHEM_3_GRADE
     , DECODE(C.PHYCHEM_4_GRADE,'Y','1','0') AS PHYCHEM_4_GRADE
     , DECODE(C.PHYCHEM_5_GRADE,'Y','1','0') AS PHYCHEM_5_GRADE
     , B.ARTICLE_CD AS OLD_ARTICLE_CD
  FROM LRM_TEST_INFO B
     , (
        SELECT /*+ INDEX_SS(Z) */
               X.SPECM_TYPE
             , X.MGRP_CD
             , X.MGRP_NM
             , Y.MCALSS_CD
             , Y.MCALSS_NM
             , Z.SCLASS_CD
             , Z.SCLASS_NM
             , U.MICBIO
             , U.MICBIO_1_GRADE
             , U.MICBIO_2_GRADE
             , U.MICBIO_3_GRADE
             , U.MICBIO_4_GRADE
             , U.MICBIO_5_GRADE
             , U.PHYCHEM
             , U.PHYCHEM_1_GRADE
             , U.PHYCHEM_2_GRADE
             , U.PHYCHEM_3_GRADE
             , U.PHYCHEM_4_GRADE
             , U.PHYCHEM_5_GRADE
        FROM   LCM_SPECM_TYPE_MGRP X
             , LCM_SPECM_TYPE_MCALSS Y
             , LCM_SPECM_TYPE_SCLASS Z
             , LCM_SPECM_DANGER_MAPPING U
        WHERE  X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.SPECM_TYPE = Z.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MGRP_CD = Z.MGRP_CD
           AND Y.MCALSS_CD = Z.MCALSS_CD
           AND X.USE_YN = 'Y'
           AND Y.USE_YN = 'Y'
           AND Z.USE_YN = 'Y'
           AND Z.MGRP_CD = U.MGRP_CD(+)
           AND Z.MCALSS_CD = U.MCALSS_CD(+)
           AND Z.SCLASS_CD = U.SCLASS_CD(+)
       ) C
     , LRM_SPECM_INFO D
     , LCM_TEST_ARTICLE TA
 WHERE D.REQ_NUM = :reqNum
   AND D.REQ_NUM = B.REQ_NUM
   AND D.ACCEPT_NUM = B.ACCEPT_NUM
   AND B.ARTICLE_CD = TA.ARTICLE_CD
   AND D.MGRP_CD = C.MGRP_CD(+)
   AND D.MCALSS_CD = C.MCALSS_CD(+)
   AND D.SCLASS_CD = C.SCLASS_CD(+)
 ORDER BY B.ARTICLE_CD
        , TA.ARTICLE_NM
        ]]></statement>

	<!--시험정보 DATA를 조회한다. -->
	<statement name="selectTestInfoProgressList" type="select">
		/*+
		com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectTestInfoProgressList */
		<![CDATA[
/* 접수/승인상황 조회 */
SELECT A.REQ_NUM,
       A.PROC_CLASS,
       (
       SELECT X.CODE_NAME
          FROM SCC_COMMON_CODE X
         WHERE X.GROUP_CODE = 'PROGRESS_STATUS'
           AND X.CODE = A.PROC_CLASS
       ) AS PROC_CLASS_NM,
       A.SEQ,
       A.PROC_USER,
       (SELECT X.NM_KOR
          FROM SCC_USERINFO X
         WHERE X.SABUN = A.PROC_USER) AS PROC_USER_NM,  /* 처리자 */
       A.PROCDD,
       A.PROC_REASON
FROM   LRM_PROC_DESC A
WHERE  A.REQ_NUM = :reqNum
ORDER BY A.SEQ DESC
        ]]>
	</statement>

	<!-- IFIS에서 넘어와 처리된 정보를 IFIS 테이블에 저장 한다. -->
	<statement name="updateTestReqIFIS" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.updateTestReqIFIS */
		<![CDATA[
/* IFIS에서 넘어와 처리된 정보를 IFIS 테이블에 저장 */
UPDATE FSC_CONTRT_RESULT SET
       INSPT_REQ_YN  = 'Y'
     , INSPT_REQ_DD  = TO_CHAR(SYSDATE, 'YYYYMMDD')
     , INSPT_REQ_NUM = :reqNum
 WHERE TABLE_TYPE = :str2
   AND FORM_CD    = :str3
   AND CUSTCD     = :str4
   AND CHK_DD     = :str5
        ]]>
	</statement>

	<!--단건 시험정보 DATA를 조회한다. -->
	<statement name="selectTestInfo" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectTestInfo */
		<![CDATA[
/* 접수 등록 시 시험정보 조회 */
SELECT COUNT(1) AS CNT
  FROM LRM_TEST_INFO A
 WHERE A.REQ_NUM = :reqNum
   AND A.ACCEPT_NUM = :acceptNum
   AND A.ARTICLE_CD = :articleCd
        ]]>
	</statement>

	<!-- 시험항목정보 로그를 생성한다. -->
	<statement name="insertSpecmTestLog" type="insert">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.insertSpecmTestLog */
		<![CDATA[
INSERT INTO LRM_SPECM_TEST_LOG
(
    WORK_DATE
  , JOB_GUBUN
  , REQ_NUM
  , ACCEPT_NUM
  , JOB_PARAM
)
VALUES
(
    SYSDATE
  , :jobGubun
  , :reqNum
  , :acceptNum
  , :jobParam
)
        ]]>
	</statement>

	<!-- 접수 - 의뢰번호를 채번 한다. (temp table)-->
	<statement name="selectCreateReqNumTemp" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectCreateReqNumTemp */
		<![CDATA[
		SELECT TO_CHAR(NVL(MAX(TEMP_SEQ), 0) + 1) AS TEMP_SEQ
		  FROM LRM_TEST_TEMP_MST
        ]]>
	</statement>

	<!-- 시험항목정보를 저장한다. (temp table)-->
	<statement name="saveTestInfoTemp" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.saveTestInfoTemp */
		<![CDATA[
		MERGE INTO LRM_TEST_REQ_ACCEPT_TEMP T1
		     USING (SELECT :tempSeq AS TEMP_SEQ
		                 , :reqDate AS REQ_DATE
		                 , :acceptnm AS ACCEPTNM
		                 , :upjang AS UPJANG
		                 , :upjangNm AS UPJANG_NM
		                 , <#if orgNm?exists> :orgNm <#else> null </#if> AS ORG_NM
		                 , <#if pclsUpjangNm?exists> :pclsUpjangNm <#else> null </#if> AS PCLS_UPJANG_NM
		                 , <#if bizNo?exists> :bizNo <#else> null </#if> AS BIZ_NO
		                 , <#if reqUserNm?exists> :reqUserNm <#else> null </#if> AS REQ_USER_NM
		                 , <#if reqUserTelno1?exists> SCC_CRYPTO.ENC_FUN(:reqUserTelno1||:reqUserTelno2||:reqUserTelno3) <#else> null </#if> AS REQ_USER_TELNO
		                 , <#if reqUserEmail?exists> SCC_CRYPTO.ENC_FUN(:reqUserEmail) <#else> null </#if> AS REQ_USER_EMAIL
		                 , <#if reqUserRemark?exists> :reqUserRemark <#else> null </#if> AS REQ_USER_REMARK
		                 , <#if insideExtrClass?exists> :insideExtrClass <#else> null </#if> AS INSIDE_EXTR_CLASS
		                 , <#if approvalClass?exists> :approvalClass <#else> null </#if> AS APPROVAL_CLASS
		                 , <#if insptReqPlce?exists> :insptReqPlce <#else> null </#if> AS INSPT_REQ_PLCE
		                 , <#if inspectRptIssue?exists> :inspectRptIssue <#else> 'N', </#if> AS INSPECT_RPT_ISSUE
		                 , '110' AS PROGRESS_STATUS
		                 , <#if acceptClass?exists> :acceptClass <#else> null </#if> AS ACCEPT_CLASS
		                 , <#if ceo?exists> :ceo <#else> null </#if> AS CEO
		                 , <#if vdCd?exists> :vdCd <#else> null </#if> AS VD_CD
		                 , :loginSabun AS SABUN
		              FROM DUAL
		           ) T2
		        ON (T1.TEMP_SEQ = T2.TEMP_SEQ)
		      WHEN MATCHED THEN
		           UPDATE
		              SET REQ_DATE          = T2.REQ_DATE
		                , ACCEPTNM          = T2.ACCEPTNM
		                , UPJANG            = T2.UPJANG
		                , UPJANG_NM         = T2.UPJANG_NM
		                , ORG_NM            = T2.ORG_NM
		                , PCLS_UPJANG_NM    = T2.PCLS_UPJANG_NM
		                , BIZ_NO            = T2.BIZ_NO
		                , REQ_USER_NM       = T2.REQ_USER_NM
		                , REQ_USER_TELNO    = T2.REQ_USER_TELNO
		                , REQ_USER_EMAIL    = T2.REQ_USER_EMAIL
		                , REQ_USER_REMARK   = T2.REQ_USER_REMARK
		                , INSIDE_EXTR_CLASS = T2.INSIDE_EXTR_CLASS
		                , APPROVAL_CLASS    = T2.APPROVAL_CLASS
		                , INSPT_REQ_PLCE    = T2.INSPT_REQ_PLCE
		                , INSPECT_RPT_ISSUE = T2.INSPECT_RPT_ISSUE
		                , PROGRESS_STATUS   = T2.PROGRESS_STATUS
		                , ACCEPT_CLASS      = T2.ACCEPT_CLASS
		                , CEO               = T2.CEO
		                , VD_CD             = T2.VD_CD
		                , UUSER			    = T2.SABUN
                        , UDATE             = SYSDATE
		      WHEN NOT MATCHED THEN
		           INSERT 
		           (
		                  TEMP_SEQ
		                , REQ_DATE
		                , ACCEPTNM
		                , UPJANG
		                , UPJANG_NM
		                , ORG_NM
		                , PCLS_UPJANG_NM
		                , BIZ_NO
		                , REQ_USER_NM
		                , REQ_USER_TELNO
		                , REQ_USER_EMAIL
		                , REQ_USER_REMARK
		                , INSIDE_EXTR_CLASS
		                , APPROVAL_CLASS
		                , INSPT_REQ_PLCE
		                , INSPECT_RPT_ISSUE
		                , PROGRESS_STATUS
		                , ACCEPT_CLASS
		                , CEO
		                , VD_CD
		                , CUSER
                        , CDATE
		                , UUSER
                        , UDATE
		           )
		           VALUES 
		           (
		                  T2.TEMP_SEQ
		                , T2.REQ_DATE
		                , T2.ACCEPTNM
		                , T2.UPJANG
		                , T2.UPJANG_NM
		                , T2.ORG_NM
		                , T2.PCLS_UPJANG_NM
		                , T2.BIZ_NO
		                , T2.REQ_USER_NM
		                , T2.REQ_USER_TELNO
		                , T2.REQ_USER_EMAIL
		                , T2.REQ_USER_REMARK
		                , T2.INSIDE_EXTR_CLASS
		                , T2.APPROVAL_CLASS
		                , T2.INSPT_REQ_PLCE
		                , T2.INSPECT_RPT_ISSUE
		                , T2.PROGRESS_STATUS
		                , T2.ACCEPT_CLASS
		                , T2.CEO
		                , T2.VD_CD
		                , T2.SABUN
                        , SYSDATE
		                , T2.SABUN
                        , SYSDATE
		           )
        ]]>
	</statement>

	<!-- 의뢰정보를 생성한다.(temp table)-->
	<statement name="insertProcDescTemp" type="insert">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.insertProcDescTemp */
		<![CDATA[
		INSERT INTO LRM_PROC_DESC_TEMP
		(
		   TEMP_SEQ
		 , PROC_CLASS
		 , SEQ
		 , PROC_USER
		 , PROCDD
		)
		SELECT :tempSeq
		     , '110'
		     , (SELECT NVL(MAX(SEQ), 0) + 1 FROM LRM_PROC_DESC_TEMP WHERE TEMP_SEQ = :tempSeq)
		     , :loginSabun
		     , TO_CHAR(SYSDATE, 'YYYYMMDD')
		  FROM DUAL
		]]>
	</statement>

	<!-- 검체정보를 삭제한다.(temp table) -->
	<statement name="deleteSpecmInfoListTemp" type="delete">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.deleteSpecmInfoListTemp
		*/
		<![CDATA[
		/* 검체정보 삭제 */
		DELETE FROM LRM_SPECM_INFO_TEMP
		WHERE  TEMP_SEQ = :tempSeq
        ]]>
	</statement>

	<!-- 시험항목정보를 삭제한다.(temp table) -->
	<statement name="deleteTestInfoListTemp" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.deleteTestInfoListTemp */
		<![CDATA[
		/* 시험항목정보 삭제 */
		DELETE FROM LRM_TEST_INFO_TEMP
		WHERE  TEMP_SEQ = :tempSeq
        ]]>
	</statement>

	<!--단건 시험정보 DATA를 조회한다.(temp table) -->
	<statement name="selectTestInfoTemp" type="select">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectTestInfoTemp */
		<![CDATA[
		/* 접수 등록 시 시험정보 조회 */
		SELECT COUNT(1) AS CNT
		  FROM LRM_TEST_INFO_TEMP A
		 WHERE A.TEMP_SEQ = :tempSeq
		   AND A.ACCEPT_NUM = :acceptNum
		   AND A.ARTICLE_CD = :articleCd
        ]]>
	</statement>

	<!-- 시험항목정보를 생성한다.(temp table) -->
	<statement name="insertTestInfoListTemp" type="insert">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.insertTestInfoListTemp */
		<![CDATA[
		/* 시험항목정보 생성 */
		INSERT INTO LRM_TEST_INFO_TEMP
		(
		 TEMP_SEQ,
		 ACCEPT_NUM,
		 ARTICLE_CD,
		 LEGAL_BASIS,
		 INSIDE_BASIS,
		 INSPT_FLD,
		 BASIS_STAND,
		 COMM_1_USE_YN,
		 COMM_1,
		 COMM_2_USE_YN,
		 COMM_2,
		 COMM_3_USE_YN,
		 COMM_3,
		 COMM_4_USE_YN,
		 COMM_4,
		 COMM_5_USE_YN,
		 COMM_5,
		 SABUN,
		 INSPT_METHOD,
		 JOB_ORDER,
		 PROGRESS_STATUS,
		 TEST_CLASS,
		 CUSER,
		 CDATE,
		 UUSER,
		 UDATE
		) VALUES (
		 :tempSeq,
		 :acceptNum,
		 :articleCd,
		<#if legalBasis?exists> DECODE(:legalBasis, '1', 'Y', 'N'), <#else> null, </#if>
		<#if insideBasis?exists> DECODE(:insideBasis, '1', 'Y', 'N'), <#else> null, </#if>
		<#if insptFld?exists> :insptFld, <#else> null, </#if>
		<#if basisStand?exists> :basisStand, <#else> null, </#if>
		<#if comm1UseYn?exists> DECODE(:comm1UseYn, '1', 'Y', 'N'), <#else> null, </#if>
		<#if comm1?exists> :comm1, <#else> null, </#if>
		<#if comm2UseYn?exists> DECODE(:comm2UseYn, '1', 'Y', 'N'), <#else> null, </#if>
		<#if comm2?exists> :comm2, <#else> null, </#if>
		<#if comm3UseYn?exists> DECODE(:comm3UseYn, '1', 'Y', 'N'), <#else> null, </#if>
		<#if comm3?exists> :comm3, <#else> null, </#if>
		<#if comm4UseYn?exists> DECODE(:comm4UseYn, '1', 'Y', 'N'), <#else> null, </#if>
		<#if comm4?exists> :comm4, <#else> null, </#if>
		<#if comm5UseYn?exists> DECODE(:comm5UseYn, '1', 'Y', 'N'), <#else> null, </#if>
		<#if comm5?exists> :comm5, <#else> null, </#if>
		<#if sabun?exists> :sabun, <#else> null, </#if>
		<#if insptMethod?exists> :insptMethod, <#else> null, </#if>
		<#if jobOrder?exists> :jobOrder, <#else> null, </#if>
		'110',	/* 접수중 - 공통코드 : 진행 상태(PROGRESS_STATUS) */
		<#if testClass?exists> :testClass, <#else> null, </#if>
		 :loginSabun,
		 SYSDATE,
		 :loginSabun,
		 SYSDATE
		)
        ]]>
	</statement>

	<!-- 접수 - 검체 접수번호를 채번 한다.(temp table) -->
	<statement name="selectCreateAcceptNumTemp" type="select"><![CDATA[
		/* 접수 - 검체 접수번호 채번 */
        /* 2018.02.05 김명섭 [CH201802_00006] ACCEPT_NUM VARCHAR2타입으로 Number타입으로 변경 */
		SELECT TO_CHAR(NVL(MAX(TO_NUMBER(ACCEPT_NUM)), 0) + 1) AS ACCEPT_NUM
		  FROM LRM_SPECM_INFO_TEMP
		 WHERE TEMP_SEQ = :tempSeq
        ]]></statement>

	<!-- 검체정보를 생성한다.(temp table) -->
	<statement name="insertSpecmInfoListTemp" type="insert">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.insertSpecmInfoListTemp
		*/
		<![CDATA[
		/* 검체정보 생성 */
		INSERT INTO LRM_SPECM_INFO_TEMP
		(
		 TEMP_SEQ,
		 ACCEPT_NUM,
		 ACCEPTDD,
		 SPECM_CLASS,
		 SPECM_CD,
		 SPECM_NM,
		 SPECM_TYPE,
		 MGRP_CD,
		 MCALSS_CD,
		 SCLASS_CD,
		 SPECM_TYPE_PCLS,
		 COST_CLASS,
		 INSPT_MTOD,
		 INSPT_CLASS,
		 INSPT_PURP_1,
		 INSPT_PURP_2,
		 INSPT_PURP_3,
		 SPECM_WTRLST_NM,
		 LONGSTORAGE_YN,
		 INSPTBEFORE_SPECM_STATUS,
		 PICK_STATUS,
		 INSPT_OBJ_1,
		 INSPT_OBJ_2,
		 INSPT_OBJ_3,
		 INSPT_OBJ_4,
		 MFGWON,
		 MFG_VENDOR,
		 MFG_NATION,
		 MFG_LOCATION,
		 DTR_VENDOR,
		 ACCEPTCITY_TEMPR,
		 STAND,
		 UNIT,
		 ORIGIN,
		 CHARG_BASIS,
		 MFGDD,
		 DTRLIMT,
		 DTRLIMT_MTS,
		 DTRLIMT_DD,
		 SPECM_DELIVER_PCLSFACT,
		 PROGRESS_STATUS,
		 NOT_FIT_CLSFI,
		 CUSER,
		 CDATE,
		 UUSER,
		 UDATE
		) VALUES (
		 :tempSeq,
		 :acceptNum,
		<#if acceptdd?exists> :acceptdd, <#else> null, </#if>
		<#if specmClass?exists> :specmClass, <#else> null, </#if>
		<#if specmCd?exists> :specmCd, <#else> null, </#if>
		<#if specmNm?exists> :specmNm, <#else> null, </#if>
		<#if specmType?exists> :specmType, <#else> null, </#if>
		<#if mgrpCd?exists> :mgrpCd, <#else> null, </#if>
		<#if mcalssCd?exists> :mcalssCd, <#else> null, </#if>
		<#if sclassCd?exists> :sclassCd, <#else> null, </#if>
		<#if specmTypePcls?exists> :specmTypePcls, <#else> null, </#if>
		<#if costClass?exists> :costClass, <#else> null, </#if>
		<#if insptMtod?exists> :insptMtod, <#else> null, </#if>
		<#if insptClass?exists> :insptClass, <#else> null, </#if>
		<#if insptPurp1?exists> :insptPurp1, <#else> null, </#if>
		<#if insptPurp2?exists> :insptPurp2, <#else> null, </#if>
		<#if insptPurp3?exists> :insptPurp3, <#else> null, </#if>
		<#if specmWtrlstNm?exists> :specmWtrlstNm, <#else> null, </#if>
		<#if longstorageYn?exists> :longstorageYn, <#else> null, </#if>
		<#if insptbeforeSpecmStatus?exists> :insptbeforeSpecmStatus, <#else> null, </#if>
		<#if pickStatus?exists> :pickStatus, <#else> null, </#if>
		<#if insptObj1?exists> :insptObj1, <#else> null, </#if>
		<#if insptObj2?exists> :insptObj2, <#else> null, </#if>
		<#if insptObj3?exists> :insptObj3, <#else> null, </#if>
		<#if insptObj4?exists> :insptObj4, <#else> null, </#if>
		<#if mfgwon?exists> :mfgwon, <#else> null, </#if>
		<#if mfgVendor?exists> :mfgVendor, <#else> null, </#if>
		<#if mfgNation?exists> :mfgNation, <#else> null, </#if>
		<#if mfgLocation?exists> :mfgLocation, <#else> null, </#if>
		<#if dtrVendor?exists> :dtrVendor, <#else> null, </#if>
		<#if acceptcityTempr?exists> :acceptcityTempr, <#else> null, </#if>
		<#if stand?exists> :stand, <#else> null, </#if>
		<#if unit?exists> :unit, <#else> null, </#if>
		<#if origin?exists> :origin, <#else> null, </#if>
		<#if chargBasis?exists> :chargBasis, <#else> null, </#if>
		<#if mfgdd?exists> :mfgdd, <#else> null, </#if>
		<#if dtrlimt?exists> :dtrlimt, <#else> null, </#if>
		<#if dtrlimtMts?exists> :dtrlimtMts, <#else> null, </#if>
		<#if dtrlimtDd?exists> :dtrlimtDd, <#else> null, </#if>
		<#if specmDeliverPclsfact?exists> :specmDeliverPclsfact, <#else> null, </#if>
		'110',	/* 접수중 - 공통코드 : 진행 상태(PROGRESS_STATUS) */
		<#if notFitClsfi?exists> :notFitClsfi, <#else> null, </#if>
		 :loginSabun,
		 SYSDATE,
		 :loginSabun,
		 SYSDATE
		)
        ]]>
	</statement>

	<!-- 시험접수 중간저장 마스터 테이블 저장-->
	<statement name="saveLrmTestTempMst" type="insert">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.saveLrmTestTempMst */
		<![CDATA[
		/* 시험접수 중간저장 마스터 테이블 저장 */
		MERGE INTO LRM_TEST_TEMP_MST T1
		     USING (SELECT :tempSeq 	AS TEMP_SEQ
		                 , :reqDate 	AS REQ_DATE
		                 , :acceptnm 	AS ACCEPTNM
		                 , :upjang 		AS UPJANG
		                 , :upjangNm 	AS UPJANG_NM
		                 , :reqUserNm 	AS REQ_USER_NM
		                 , :loginSabun 	AS SABUN
		              FROM DUAL
		           ) T2
		        ON (T1.TEMP_SEQ = T2.TEMP_SEQ)
		      WHEN MATCHED THEN
		           UPDATE
		              SET REQ_DATE      = T2.REQ_DATE
                        , ACCEPTNM      = T2.ACCEPTNM
                        , UPJANG        = T2.UPJANG
                        , UPJANG_NM     = T2.UPJANG_NM
                        , REQ_USER_NM   = T2.REQ_USER_NM
                        , UUSER         = T2.SABUN
                        , UDATE         = SYSDATE
		      WHEN NOT MATCHED THEN
		           INSERT
		           (
                          TEMP_SEQ
                        , REQ_DATE
                        , ACCEPTNM
                        , UPJANG
                        , UPJANG_NM
                        , REQ_USER_NM
                        , CUSER
                        , CDATE
                        , UUSER
                        , UDATE
		           )
		           VALUES
		           (
                          T2.TEMP_SEQ
                        , T2.REQ_DATE
                        , T2.ACCEPTNM
                        , T2.UPJANG
                        , T2.UPJANG_NM
                        , T2.REQ_USER_NM
                        , T2.SABUN
                        , SYSDATE
                        , T2.SABUN
                        , SYSDATE
		           )
        ]]>
	</statement>

	<!-- 저장 시 시험접수 중간저장 마스터 테이블 저장여부 update -->
	<statement name="updateLrmTestTempMst" type="update">
		/*+ com.hwfs.ls.lrm.dao.TestInfoRegDAO.updateLrmTestTempMst */
		<![CDATA[
		/* 저장 시 시험접수 중간저장 마스터 테이블 저장여부 update */
		UPDATE LRM_TEST_TEMP_MST
		   SET SAVE_YN = 'Y'
		     , REQ_NUM = :reqNum
		     , UUSER = :loginSabun
		     , UDATE = SYSDATE
		 WHERE TEMP_SEQ = :tempSeq
        ]]>
	</statement>

	<!-- 임시저장 불러오기 팝업 목록 조회-->
	<statement name="selectLoadTestInfoTempList" type="select">
		/*+
		com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectLoadTestInfoTempList */
		<![CDATA[
		SELECT TEMP_SEQ         --의뢰번호
		     , REQ_DATE         --의뢰일자
		     , ACCEPTNM         --접수명
		     , UPJANG           --의뢰업장코드
		     , UPJANG_NM        --의뢰업장명
		     , REQ_USER_NM      --접수자
		     , TO_CHAR(CDATE, 'YYYYMMDD') AS SAVE_DATE --중간저장일자
		  FROM LRM_TEST_TEMP_MST
		 WHERE 1=1
		   AND SAVE_YN = 'N'
		   AND REQ_DATE BETWEEN :reqDateFrom AND :reqDateTo
		   <#if upjang?exists && upjang?has_content>
		   AND UPJANG = :upjang
		   </#if>
         ORDER BY TEMP_SEQ DESC
        ]]>
	</statement>

	<!-- 의뢰정보 DATA를 조회한다. (temp table)-->
	<statement name="selectTestReqAcceptListTemp" type="select">
		/*+
		com.hwfs.ls.lrm.dao.TestInfoRegDAO.selectTestReqAcceptListTemp
		*/
		<![CDATA[
		/* 접수 등록 후 의뢰번호로 접수정보 조회(temp table) */
		SELECT A.TEMP_SEQ,
		       A.REQ_DATE,
		       A.ACCEPTNM,
		       A.UPJANG,
		       A.UPJANG_NM,
		       A.ORG_NM,
		       A.PCLS_UPJANG_NM,
		       A.BIZ_NO,
		       SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_NM, 12, :loginPersMask, :maskAuth) AS REQ_USER_NM,
		       SCC_TELNO_SPLIT_FUN(SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_TELNO, 8, :loginPersMask, :maskAuth), 1) AS REQ_USER_TELNO1,
		       SCC_TELNO_SPLIT_FUN(SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_TELNO, 8, :loginPersMask, :maskAuth), 2) AS REQ_USER_TELNO2,
		       SCC_TELNO_SPLIT_FUN(SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_TELNO, 8, :loginPersMask, :maskAuth), 3) AS REQ_USER_TELNO3,
		       SCC_CRYPTO.MASKAUTH_FUN(A.REQ_USER_EMAIL, 7, :loginPersMask, :maskAuth) AS REQ_USER_EMAIL,
		       A.REQ_USER_REMARK,
		       A.INSIDE_EXTR_CLASS,
		       A.APPROVAL_CLASS,
		       A.INSPT_REQ_PLCE,
       		   DECODE(NVL(A.INSPECT_RPT_ISSUE, 'N'), 'N', 'N', A.INSPECT_RPT_ISSUE) AS INSPECT_RPT_ISSUE,
		       A.PROGRESS_STATUS,
		       A.LAST_DECISION,
		       A.ACCEPT_CLASS,
		       SCC_CODE_NM('ACCEPT_CLASS', A.ACCEPT_CLASS) AS ACCEPT_CLASS_NM,
		       A.CEO
		FROM   LRM_TEST_REQ_ACCEPT_TEMP A
		WHERE  A.TEMP_SEQ = :tempSeq
        ]]>
	</statement>

	<!--검체정보 DATA를 조회한다.(temp table) -->
	<statement name="selectSpecmInfoListTemp" type="select"><![CDATA[
		/* 접수 등록 후 의뢰번호로 검체정보 조회 (temp table)*/
		SELECT A.TEMP_SEQ,
		       A.ACCEPT_NUM AS SEQ_NUM,
		       A.ACCEPT_NUM,
		       A.ACCEPTDD,
		       A.SPECM_CLASS,
		       A.SPECM_CD,
		       A.SPECM_NM,
		       A.SPECM_TYPE,
		       A.MGRP_CD,
		       A.MCALSS_CD,
		       A.SCLASS_CD,
		       ((SELECT X.MGRP_NM FROM LCM_SPECM_TYPE_MGRP X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MGRP_CD = A.MGRP_CD) || ' / ' ||
		        (SELECT X.MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MCALSS_CD = A.MCALSS_CD) || ' / ' ||
		        (SELECT X.SCLASS_NM FROM LCM_SPECM_TYPE_SCLASS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.SCLASS_CD = A.SCLASS_CD))
		       AS SPECM_TYPE_NM,				/* 검체 유형명 ( 대분류명 / 중분류명 / 소분류명 ) */
		       SCC_CODE_NM('SPECM_TYPE_PCLS', A.SPECM_TYPE_PCLS) AS SPECM_TYPE_PCLS_NM,	/* 세부 검체 유형 */
		       A.SPECM_TYPE_PCLS,
		       A.COST_CLASS,
		       A.INSPT_MTOD,
		       A.INSPT_CLASS,
		       A.INSPT_PURP_1,
		       A.INSPT_PURP_2,
		       A.INSPT_PURP_3,
		       A.SPECM_WTRLST_NM,
		       A.LONGSTORAGE_YN,
		       A.INSPTBEFORE_SPECM_STATUS,
		       A.PICK_STATUS,
		       A.INSPT_OBJ_1,
		       A.INSPT_OBJ_2,
		       A.INSPT_OBJ_3,
		       A.INSPT_OBJ_4,
		       A.MFGWON,
		       A.DTR_VENDOR,
		       A.ACCEPTCITY_TEMPR,
		       A.STAND,
		       A.UNIT,
		       A.ORIGIN,
		       A.CHARG_BASIS,
		       A.MFGDD,
		       A.MFG_VENDOR,         /* 제조 업체 */
		       A.MFG_NATION,         /* 제조 국가 */
		       A.MFG_LOCATION,       /* 제조 소재지 */
		       A.DTRLIMT,
		       A.DTRLIMT_MTS,
		       A.DTRLIMT_DD,
		       A.SPECM_DELIVER_PCLSFACT,
		       A.PROGRESS_STATUS,
		       A.NOT_FIT_CLSFI,
		       A.LAST_DECISION
		FROM   LRM_SPECM_INFO_TEMP A
		WHERE  A.TEMP_SEQ = :tempSeq
		ORDER BY TO_NUMBER(A.ACCEPT_NUM)
        ]]></statement>

	<!--시험정보 DATA를 조회한다. (temp table)-->
	<statement name="selectTestInfoListTemp" type="select"><![CDATA[
		/* 접수 등록 후 의뢰번호로 시험정보 조회 (temp table)*/
		SELECT B.ACCEPT_NUM AS SEQ_NUM
		     , D.SPECM_CD
		     , B.TEMP_SEQ
		     , B.ACCEPT_NUM
		     , D.SPECM_TYPE
		     , D.MGRP_CD
		     , D.MCALSS_CD
		     , D.SCLASS_CD
		     , B.ARTICLE_CD
		     , TA.ARTICLE_NM
		     , B.BASIS_STAND
		     , B.INSPT_FLD
		     , TA.TAKE_TERM
		     , TA.NOT_FIT_CLSFI
		     , DECODE(B.COMM_1_USE_YN,'Y','1','0') AS COMM_1_USE_YN
		     , B.COMM_1
		     , DECODE(B.COMM_2_USE_YN,'Y','1','0') AS COMM_2_USE_YN
		     , B.COMM_2
		     , DECODE(B.COMM_3_USE_YN,'Y','1','0') AS COMM_3_USE_YN
		     , B.COMM_3
		     , DECODE(B.COMM_4_USE_YN,'Y','1','0') AS COMM_4_USE_YN
		     , B.COMM_4
		     , DECODE(B.COMM_5_USE_YN,'Y','1','0') AS COMM_5_USE_YN
		     , B.COMM_5
		     , B.SABUN
		     , B.INSPT_METHOD
		     , B.JOB_ORDER
		     , B.TEST_CLASS
		     , DECODE(B.LEGAL_BASIS,'Y','1','0') AS LEGAL_BASIS
		     , DECODE(B.INSIDE_BASIS,'Y','1','0') AS INSIDE_BASIS
		     , DECODE(B.INSPT_FLD, '101', '1', DECODE(C.MICBIO,'Y','1','0'))          AS MICBIO
		     , DECODE(C.MICBIO_1_GRADE,'Y','1','0')  AS MICBIO_1_GRADE
		     , DECODE(C.MICBIO_2_GRADE,'Y','1','0')  AS MICBIO_2_GRADE
		     , DECODE(C.MICBIO_3_GRADE,'Y','1','0')  AS MICBIO_3_GRADE
		     , DECODE(C.MICBIO_4_GRADE,'Y','1','0')  AS MICBIO_4_GRADE
		     , DECODE(C.MICBIO_5_GRADE,'Y','1','0')  AS MICBIO_5_GRADE
		     , DECODE(B.INSPT_FLD, '102', '1', DECODE(C.PHYCHEM,'Y','1','0'))         AS PHYCHEM
		     , DECODE(C.PHYCHEM_1_GRADE,'Y','1','0') AS PHYCHEM_1_GRADE
		     , DECODE(C.PHYCHEM_2_GRADE,'Y','1','0') AS PHYCHEM_2_GRADE
		     , DECODE(C.PHYCHEM_3_GRADE,'Y','1','0') AS PHYCHEM_3_GRADE
		     , DECODE(C.PHYCHEM_4_GRADE,'Y','1','0') AS PHYCHEM_4_GRADE
		     , DECODE(C.PHYCHEM_5_GRADE,'Y','1','0') AS PHYCHEM_5_GRADE
		  FROM LRM_TEST_INFO_TEMP B
		     , (
		        SELECT /*+ INDEX_SS(Z) */
		               X.SPECM_TYPE
		             , X.MGRP_CD
		             , X.MGRP_NM
		             , Y.MCALSS_CD
		             , Y.MCALSS_NM
		             , Z.SCLASS_CD
		             , Z.SCLASS_NM
		             , U.MICBIO
		             , U.MICBIO_1_GRADE
		             , U.MICBIO_2_GRADE
		             , U.MICBIO_3_GRADE
		             , U.MICBIO_4_GRADE
		             , U.MICBIO_5_GRADE
		             , U.PHYCHEM
		             , U.PHYCHEM_1_GRADE
		             , U.PHYCHEM_2_GRADE
		             , U.PHYCHEM_3_GRADE
		             , U.PHYCHEM_4_GRADE
		             , U.PHYCHEM_5_GRADE
		        FROM   LCM_SPECM_TYPE_MGRP X
		             , LCM_SPECM_TYPE_MCALSS Y
		             , LCM_SPECM_TYPE_SCLASS Z
		             , LCM_SPECM_DANGER_MAPPING U
		        WHERE  X.SPECM_TYPE = Y.SPECM_TYPE
		           AND X.SPECM_TYPE = Z.SPECM_TYPE
		           AND X.MGRP_CD = Y.MGRP_CD
		           AND X.MGRP_CD = Z.MGRP_CD
		           AND Y.MCALSS_CD = Z.MCALSS_CD
		           AND X.USE_YN = 'Y'
		           AND Y.USE_YN = 'Y'
		           AND Z.USE_YN = 'Y'
		           AND Z.MGRP_CD = U.MGRP_CD(+)
		           AND Z.MCALSS_CD = U.MCALSS_CD(+)
		           AND Z.SCLASS_CD = U.SCLASS_CD(+)
		       ) C
		     , LRM_SPECM_INFO_TEMP D
		     , LCM_TEST_ARTICLE TA
		 WHERE D.TEMP_SEQ = :tempSeq
		   AND D.TEMP_SEQ = B.TEMP_SEQ
		   AND D.ACCEPT_NUM = B.ACCEPT_NUM
		   AND B.ARTICLE_CD = TA.ARTICLE_CD
		   AND D.MGRP_CD = C.MGRP_CD(+)
		   AND D.MCALSS_CD = C.MCALSS_CD(+)
		   AND D.SCLASS_CD = C.SCLASS_CD(+)
		 ORDER BY B.ARTICLE_CD
		        , TA.ARTICLE_NM
        ]]></statement>

</hqml>
