<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/**
 * Checkbox를 처리하기 위한 공통 스크립트
 * @ClassName SCCheckbox.xjs
 * @Description SCCheckbox Javascript
 * @Modification-Information
 *    수정일      수정자         수정내용
 *  ----------   ----------   -------------------------------
 *  2015.02.26    김재섭       최초 생성
 *
 * @author FC종합전산구축 : COM 김재섭
 * @since 2015.02.26.
 * @version 1.0
 * @see 
 * 
 *  Copyright (C) 2014 by HANWHA S&C CO.,LTD. All right reserved.
 */
var SCCheckbox = {
	ONLY_VALUE : "ONLY_VALUE",
	CODE_VALUE : "CODE_VALUE",
	ALL        : "ALL",
	form       : null,
	
	/**
	 * @class 주어진 조건에 의해 Checkbox를 만들고 Data를 Binding한다.
	 * @param thisForm - 현재 Form Object
	 * @param qid - 조회하고자 하는 대상의 고유 KEY
	 * @param checkboxGrpDivId - Checkbox를 만들 Div Object의 ID(문자열)
	 * @param option - qid를 조회할 시 필요한 조건(JSON 형태)
	 * @param properties - 속성을 정의한다.(JSON 형태)
	 *                     width : 각 체크박스의 폭을 정의한다.(기본값은 0으로 정의되고, 데이터의 크기에 따라 자동조정된다.)
     *                     height : 각 체크박스의 높이를 정의한다.(기본값은 20으로 정이되고, 궂이 사용할 필요가 없다.)
     *                     space : 체크박스와 체크박스간의 간격을 정의한다.(기본값은 15이다.)
     *                     appearance : (JSON형태) 체크박스의 바인딩할 속성으로서 아래의 값을 사용가능하다. (생략이 가능하며, 생략시 아래의 속성의 값은 기본값을 따른다.)
     *                                  usingDb : true/false를 사용하며, 기본값은 false이다. 
     *                                            만약, true로 설정할 경우에는 truevalue는 Db Data의 코드값으로 설정된다. falsevalue는 " "으로 정의된다.
     *                                  truevalue : 체크박스가 체크될 때의 값을 정의한다.(기본값은 "Y"이다.) - usingDb가 false인 경우에만 적용된다.
     *                                  falsevalue : 체크박스의 체크가 해제될 때의 값을 정의한다.(기본값은 "N"이다.) - usingDb가 false인 경우에만 적용된다.                                                              
	 * @param [옵션] event - Checkbox에 대한 이벤트 함수를 정의한다.(JSON형태)(onclick와 trigger을 지원한다.)
	 * @return 
	 */
	bind : function(thisForm, qid, checkboxGrpDivId, option, properties) {
		SCCheckbox.form = thisForm;
		var newVariableName = "gs_hwfsBindingCheckbox_"+checkboxGrpDivId.split(".").join("_");
		
		//옵션에 대하여 선언되지 않는 경우에는 초기화 한다.
		if (option == undefined || option == null || option == "") option = {};
		
		//properties
		if (properties == undefined || properties == null || properties == "") properties = {width:0, height:20, space:15, append:false, appendText:"전체"};
		
		var event = {onclick:"NVL", trigger:"NVL"};
		if (arguments.length > 5) {
			event = arguments[5];
		}
		
		var outDsId = "ds_hwfsBindingCheckbox_"+checkboxGrpDivId.split(".").join("_");
		thisForm.removeChild(outDsId);
		var outDs = new Dataset();
		outDs.id = outDsId;
		outDs.name = outDsId;
		
		outDs.addColumn("code", "STRING", "50");
		outDs.addColumn("codeName", "STRING", "1000");
		
		thisForm.addChild(outDsId, outDs);

		//Controller로 전송할 Parameter를 설정한다.
		var parameter = {
			qid : qid,
			checkboxGrpDivId : checkboxGrpDivId,
			outDs : outDs.name,
			option : option,
			properties : properties,
			event : event
		};

		//전역변수를 생성한다.
		setVariable(newVariableName, gfn_jsonObjectToString(parameter));
		
  		var strSvcID    = "hwfsBindingCheckbox,"+newVariableName;
  		var strURL      = "/sc/cmn/binding/select.xdo";
  		var strInDs     = "";
  		var strOutDs    = outDs.name+"=output";
  		var strArg      = "input="+wrapQuote(gfn_jsonObjectToString(parameter));
  		var strCallback = "SCCheckbox.callback";
  		var bAsync = true;
  
  		gfn_transaction(thisForm, strSvcID, strURL, strInDs, strOutDs, strArg, strCallback, bAsync);
	},
	
	/**
	 * @class Checkbox의 값을 가져온다.
	 * @param checkboxGrpDivId - Checkbox를 만들 Div Object의 ID(문자열)
	 * @param [옵션] SCCheckbox.ALL(기본), SCCheckbox.ONLY_VALUE, SCCheckbox.CODE_VALUE중에 하나를 쓰며, 취합형태를 결정한다.
	 *               SCCheckbox.ALL : 선택/미선택에 상관없이 모든 것을 취합
	 *               SCCheckbox.ONLY_VALUE : 선택된 값만 취합
	 *               SCCheckbox.CODE_VALUE : 선택된 코드=값을 취합
	 * @return - String : 취합결과를 반환한다.
	 */
	getValue : function(checkboxGrpDivId) {
		var div = eval(checkboxGrpDivId);
		var getData = SCCheckbox.ALL;
		
		if (arguments.length == 2) {
			if (arguments[1] != SCCheckbox.ONLY_VALUE && arguments[1] != SCCheckbox.ALL && arguments[1] != SCCheckbox.CODE_VALUE) {
				gfn_message("A", "취합할 자료의 종류가 잘못되었습니다.\r\n아래 중에 하나를 사용하세요.\r\n   - SCCheckbox.ALL\r\n\   - SCCheckbox.ONLY_VALUE\r\n   - SCCheckbox.CODE_VALUE");
				return "";
			}
			else {
				getData = arguments[1];
			}
		}
		
		var retVal = "";
		switch (getData) {
			case SCCheckbox.ONLY_VALUE :
				for (var i=0, len=div.components.length; i<len; i++) {
					if (div.components[i].truevalue == div.components[i].value) {
						if (div.components[i].userdata_code_value != "SCCHECKBOX_APPEND_ALL") {
							retVal += div.components[i].value + ",";
						}
					}
				}
				break;
			case SCCheckbox.CODE_VALUE :
				for (var i=0, len=div.components.length; i<len; i++) {
					if (div.components[i].truevalue == div.components[i].value) {
						if (div.components[i].userdata_code_value != "SCCHECKBOX_APPEND_ALL") {
							retVal += div.components[i].name.substr(div.components[i].name.lastIndexOf("_")+1) + "=" + div.components[i].value + ",";
						}
					}
				}
				break;
			case SCCheckbox.ALL :
				for (var i=0, len=div.components.length; i<len; i++) {
					if (div.components[i].truevalue == div.components[i].value) {
						if (div.components[i].userdata_code_value != "SCCHECKBOX_APPEND_ALL") {
							retVal += div.components[i].name.substr(div.components[i].name.lastIndexOf("_")+1) + "=" + div.components[i].value + ",";
						}
					}
					else {
						if (div.components[i].userdata_code_value != "SCCHECKBOX_APPEND_ALL") {
							retVal += div.components[i].name.substr(div.components[i].name.lastIndexOf("_")+1) + "=" + div.components[i].falsevalue + ",";
						}
					}
				}
				break;
		}
		
		return retVal.substring(0, retVal.lastIndexOf(","));
	},
	
	/**
	 * @class Checkbox를 설정한다.
	 * @param checkboxGrpDivId - Checkbox를 만들 Div Object의 ID(문자열)
	 * @param val - 설정할 값.
	 * @param [옵션] SCCheckbox.ALL(기본), SCCheckbox.ONLY_VALUE, SCCheckbox.CODE_VALUE중에 하나를 쓰며, val에 대한 처리 사항이다.
	 *               SCCheckbox.ALL : 선택/미선택에 상관없이 모든 자료를 기준으로 설정한다.
	 *               SCCheckbox.ONLY_VALUE : 값만으로 설정한다.
	 *               SCCheckbox.CODE_VALUE : 코드=값으로 설정한다.
	 * @return
	 */
	setValue : function(checkboxGrpDivId, val) {
		if (val == undefined) val = "";
		var div = eval(checkboxGrpDivId);
		var setData = SCCheckbox.ALL;
		
		if (arguments.length == 3) {
			if (arguments[2] != SCCheckbox.ONLY_VALUE && arguments[2] != SCCheckbox.ALL && arguments[2] != SCCheckbox.CODE_VALUE) {
				gfn_message("A", "설정할 자료의 종류가 잘못되었습니다.\r\n아래 중에 하나를 사용하세요.\r\n   - SCCheckbox.ALL\r\n\   - SCCheckbox.ONLY_VALUE\r\n   - SCCheckbox.CODE_VALUE");
				return "";
			}
			else {
				setData = arguments[2];
			}
		}
		
		for (var i=0, len=div.components.length; i<len; i++) {
			div.components[i].value = div.components[i].falsevalue;
		}

		switch (setData) {
			case SCCheckbox.ONLY_VALUE :
				var tmp = val.split(",");
				for (var j=0, len1=tmp.length; j<len1; j++) {
					for (var i=0, len=div.components.length; i<len; i++) {
						if (div.components[i].truevalue == tmp[j] && div.components[i].userdata_code_value != "SCCHECKBOX_APPEND_ALL") {
							div.components[i].value = tmp[j];
						}
					}
				}
				
				break;
			case SCCheckbox.ALL :
			case SCCheckbox.CODE_VALUE :
				var tmp1 = val.split(",");
				for (var j=0, len1=tmp1.length; j<len1; j++) {
					var tmp2 = tmp1[j].split("=");
					
					for (var i=0, len=div.components.length; i<len; i++) {
						if (div.components[i].name.substr(div.components[i].name.lastIndexOf("_")+1) == tmp2[0] && div.components[i].userdata_code_value != "SCCHECKBOX_APPEND_ALL") {
							div.components[i].value = tmp2[1];
						}
					}
				}
				break;
		}
	},
	
	/**
	 * @class 내부 CALLBACK Function으로 실제 Transaction에 대한 Callback 함수이다.
	 */
	callback : function(svcId, errCode, errMsg) {
		var tmp = svcId.split(",");
		var newVariableName = eval(tmp[1]);
		var json = gfn_jsonStringToObject(newVariableName);
		var dataset = SCCheckbox.form.objects[json.outDs];
		
		if (dataset == null) {
			dataset = SCCheckbox.form.parent.objects[json.outDs];
		}

		var targetDiv = eval(json.checkboxGrpDivId);
		var beforeWidth = 0;
		
		if (json.properties.append) {
			if (json.properties.appendText == undefined) {
				json.properties.appendText = "전체";
			}
			dataset.insertRow(0);
			dataset.setColumn(0, "code", "SCCHECKBOX_APPEND_ALL");
			dataset.setColumn(0, "codeName", json.properties.appendText);
		}

		for (var j=0, len=dataset.getRowCount(); j<len; j++)
		{
			var idx = j+1;
			var left = 0;
			var top = 0;
			var right = 0;
			var bottom = 0;
			var checkboxName = "chk_"+json.checkboxGrpDivId.replace("div_", "").replace(".", "_") + "_" + dataset.getColumn(j, "code");
			
			//[[중요 항목에 대하여 지정되지 않을시에 초기화 처리
			if (json.properties.width == undefined) json.properties.width = 0;
			if (json.properties.height == undefined) json.properties.height = 20;
			if (json.properties.space == undefined) json.properties.space = 15;
			//중요 항목에 대하여 지정되지 않을시에 초기화 처리]]
			
			if (json.properties.width == 0)
			{
				left = beforeWidth;
				var charLen = gfn_lengthByteUtf8(dataset.getColumn(j, "codeName"));
				beforeWidth = beforeWidth + (charLen*3)+charLen+20+json.properties.space;
				top = 0;
				right = left + beforeWidth;
			}
			else
			{
				left = (json.properties.width + json.properties.space) * j;
				top = 0;
				right = left + json.properties.width;
			}
			
			bottom = json.properties.height;
			
			var checkbox = new CheckBox(checkboxName, left, top, right, bottom);
			checkbox.text = dataset.getColumn(j, "codeName");
			checkbox.userdata_code_value = dataset.getColumn(j, "code");
			
			if (json.properties.appearance == undefined) {
				json.properties.appearance = {};
				if (json.properties.appearance.truevalue == undefined) json.properties.appearance.truevalue = "Y";
				if (json.properties.appearance.falsevalue == undefined) json.properties.appearance.falsevalue = "N";
			}
			
			if (json.properties.appearance.usingDb == undefined) json.properties.appearance.usingDb = false;
			if (json.properties.appearance.usingDb) {
				json.properties.appearance.truevalue = dataset.getColumn(j, "code");
				json.properties.appearance.falsevalue = " ";
			}
			
			checkbox.truevalue = json.properties.appearance.truevalue;
			checkbox.falsevalue = json.properties.appearance.falsevalue;
			checkbox.value = json.properties.appearance.falsevalue;

			//전체 선택에 대한 이벤트 생성
 			if (json.properties.append && dataset.getColumn(j, "codeName") == json.properties.appendText) {
 				checkbox.onclick.addHandler(function event(obj, evt) {
					var val = "";
					var div = obj.parent;
					
					if (obj.value == obj.truevalue) {
						for (var ii=1,llen=div.components.length; ii<llen; ii++) {
							div.components[ii].value = div.components[ii].truevalue;
						}
					}
					else {
						for (var ii=1,llen=div.components.length; ii<llen; ii++) {
							div.components[ii].value = div.components[ii].falsevalue;
						}
					}
 				});
 			}
			
			//[[Event Onclick를 정의한다.
			if (json.event.onclick != undefined && json.event.onclick != "NVL") {
				checkbox.userdata_onclick_event_name = json.event.onclick;
				checkbox.onclick.addHandler(function event(obj, evt) {
					var event = eval(obj.userdata_onclick_event_name);
					event(obj, evt, {code:obj.name.substr(obj.name.lastIndexOf("_")+1), value:obj.value});
				});
			}
			//Event Onclick를 정의한다.]]
			targetDiv.removeChild(checkboxName);
			targetDiv.addChild(checkboxName, checkbox);
			targetDiv.text = "";
			checkbox.show();
		}

		if (json.event.trigger != undefined && json.event.trigger != "NVL") {
			var eventParameter = {};
			var triggerEvent = eval(json.event.trigger);
			triggerEvent(eventParameter);
		}
		
		//생성한 전역변수를 제거한다.
		removeVariable(tmp[1]);
	}	
};
]]></Script>
