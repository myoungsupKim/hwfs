<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="ms.msm.bondResultDepositInquiryDAO">
	<desc>거래처별 채권/실적/입금조회 HQML Query</desc>

	<!-- 거래처별 채권/실적/입금조회 목록을 조회한다. -->
	<statement name="selectList" type="select">
	/*+ com.hwfs.ms.msm.bondResultDepositInquiryDAO.selectList */
	<![CDATA[
	SELECT /*+ NO_MERGE(V) LEADING(V A V2) USE_HASH(V A V2) */ A.MAIN_UPJANG
     , (SELECT UPJANGNM_DISP
       FROM    FMS_UPJANG
       WHERE   UPJANG = A.MAIN_UPJANG
       )
       MAIN_UPJANGNM
     , V.UPJANG
     , (SELECT UPJANGNM
       FROM    SCO_UPJANG_MST_V
       WHERE   UPJANG = V.UPJANG
       )
       UPJANGNM
     , A.PART_SALES_SABUN
     , (SELECT NM_KOR
       FROM    HLDC_HR_PERSONAL
       WHERE   SABUN = A.PART_SALES_SABUN
       )
       PART_SALES_SABUNNM
     , (SELECT CC_NM
       FROM    HLDC_SC_DEPT_V
       WHERE   DEPT_ID = A.DEPT_ID
       )
       DEPT_NM
     , TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), 0), 'YY/MM') DATE1
     , NVL(A.CREDIT_AMOUNT, 0) AS CREDIT_AMOUNT
     , 0 GICHO_AMT_BEFORE
     , SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -12), 'YYYYMM')
              THEN V.AMT
              ELSE 0
       END)) MACHU_AMT_BEFORE
     , SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -12), 'YYYYMM')
              THEN V.RCP_AMT1
              ELSE 0
       END)) RCP_AMT_BEFORE
     , 0 + SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -12), 'YYYYMM')
              THEN V.AMT
              ELSE 0
       END)) - SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -12), 'YYYYMM')
              THEN V.RCP_AMT1
              ELSE 0
       END)) GIMAL_AMT_BEFORE
     , SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -1), 'YYYYMM')
              THEN V.AMT - V.RCP_AMT1
              ELSE 0
       END)) GICHO_AMT_01
     , SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), 0), 'YYYYMM')
                , V.AMT
                , 0)) MACHU_AMT_01
     , SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), 0), 'YYYYMM')
                , V.RCP_AMT1
                , 0)) RCP_AMT_01
     , SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -1), 'YYYYMM')
              THEN V.AMT - V.RCP_AMT1
              ELSE 0
       END)) + SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), 0), 'YYYYMM')
                        , V.AMT
                        , 0)) - SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), 0), 'YYYYMM')
                                         , V.RCP_AMT1
                                         , 0)) GIMAL_AMT_01
     , SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -2), 'YYYYMM')
              THEN V.AMT - V.RCP_AMT1
              ELSE 0
       END)) GICHO_AMT_02
     , SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -1), 'YYYYMM')
                , V.AMT
                , 0)) MACHU_AMT_02
     , SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -1), 'YYYYMM')
                , V.RCP_AMT1
                , 0)) RCP_AMT_02
     , SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -2), 'YYYYMM')
              THEN V.AMT - V.RCP_AMT1
              ELSE 0
       END)) + SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -1), 'YYYYMM')
                        , V.AMT
                        , 0)) - SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -1), 'YYYYMM')
                                         , V.RCP_AMT1
                                         , 0)) GIMAL_AMT_02
     , SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -3), 'YYYYMM')
              THEN V.AMT - V.RCP_AMT1
              ELSE 0
       END)) GICHO_AMT_03
     , SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -2), 'YYYYMM')
                , V.AMT
                , 0)) MACHU_AMT_03
     , SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -2), 'YYYYMM')
                , V.RCP_AMT1
                , 0)) RCP_AMT_03
     , SUM((
       CASE
              WHEN SUBSTR(V.BOND_DATE, 1, 6) BETWEEN '190001' AND    TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -3), 'YYYYMM')
              THEN V.AMT - V.RCP_AMT1
              ELSE 0
       END)) + SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -2), 'YYYYMM')
                        , V.AMT
                        , 0)) - SUM(DECODE(SUBSTR(V.BOND_DATE, 1, 6), TO_CHAR(ADD_MONTHS(TO_DATE(:reqDate, 'YYYYMMDD'), -2), 'YYYYMM')
                                         , V.RCP_AMT1
                                         , 0)) GIMAL_AMT_03
     , NVL(SUM(MI_BOND_AMT), 0) MI_BOND_AMT
     , NVL(SUM(DO_BOND_AMT), 0) DO_BOND_AMT
     , NVL(SUM(AK_BOND_AMT), 0) AK_BOND_AMT
     , NVL(SUM(MI_BOND_AMT), 0) + NVL(SUM(DO_BOND_AMT), 0) + NVL(SUM(AK_BOND_AMT), 0) BOND_TOTAL_AMT
     , A.MAIN_UPJANG||'-'||V.UPJANG PL_CD
     , '1' PL_UP_CD
     , '0' BL_SHOW
     , 2 LEVEL_NO
     , '+' BL_PLUS
FROM   (
       -- 채권
       SELECT  V.UPJANG_CD UPJANG
             , V.AR_AMT AMT
             , V.OCCUR_DATE BOND_DATE
             , 0 AS RCP_AMT1
             , (
               CASE
                       WHEN V.OCCUR_DATE BETWEEN SUBSTR(:reqDate , 1, 6)||'01'
                       AND     SUBSTR(:reqDate , 1, 6)||'31'
                       THEN V.AR_AMT
                       ELSE 0
               END ) CURR_MACHUL
             , 0 MI_BOND_AMT
             , 0 DO_BOND_AMT
             , 0 AK_BOND_AMT
       FROM    SLA_AR_MST V
               INNER JOIN FMS_UPJANG B
               ON      1 = 1 
               <#if mainUpjang?has_content>
               AND
                       (
                               B.MAIN_UPJANG = :mainUpjang
                       )
               </#if> 
               <#if sabun?has_content>
               AND
                       (
                               B.PART_SALES_SABUN = :sabun
                       )
               </#if>
               AND     V.UPJANG_CD=B.UPJANG
               INNER JOIN ST_UPJANG S
               ON      1 = 1               
               AND     B.UPJANG = S.UPJANG
               INNER JOIN HLDC_SC_DEPT_V D
               ON      1 = 1 
               AND
                       (
                               D.MU_CD = '2004'
                       )               
               AND     S.DEPT_ID = D.DEPT_ID
       WHERE   V.OCCUR_DATE BETWEEN '19000101' AND     :reqDate
       AND     V.SYS_CLASS IN ('13'
                             ,'14')
       AND     V.RECD_STATUS='L'
       
       UNION ALL
       
       -- 입금
       SELECT V.UPJANG_CD UPJANG
            , 0 AS AMT
            , V1.RECEIVE_DATE BOND_DATE
            , NVL(V1.RECEIVE_AMT,0) AS RCP_AMT1
            , 0                     AS CURR_MACHUL
            , 0 MI_BOND_AMT
            , 0 DO_BOND_AMT
            , 0 AK_BOND_AMT
       FROM   SLA_AR_MST V
              INNER JOIN SLA_AR_RECEIVE_DETAIL V1
              ON     V1.RECEIVE_DATE BETWEEN '19000101' AND    :reqDate
              AND    V1.RECD_STATUS = 'L'
              AND    V.AR_NUM       = V1.AR_NUM
              INNER JOIN FMS_UPJANG B
              ON     1 = 1 
              <#if mainUpjang?has_content>
              AND
                      (
                              B.MAIN_UPJANG = :mainUpjang
                      )
              </#if> 
              <#if sabun?has_content>
              AND
                      (
                              B.PART_SALES_SABUN = :sabun
                      )
              </#if>
              AND    V.UPJANG_CD = B.UPJANG
              INNER JOIN ST_UPJANG S
              ON     1 = 1 
              AND    B.UPJANG = S.UPJANG
              INNER JOIN HLDC_SC_DEPT_V D
              ON     1 = 1 
              AND
                     (
                            D.MU_CD = '2004'
                     )
              AND    S.DEPT_ID = D.DEPT_ID
       WHERE  V.SYS_CLASS IN ('13','14')
       AND    V.RECD_STATUS='L'
       
       UNION ALL
       
       -- 입금(선수금) : +, -
       SELECT   X.UPJANG
              , 0 AS AMT
              , X.BOND_DATE
              , SUM(X.RCP_AMT1) - SUM(RCP_AMT2) AS RCP_AMT1
              , 0                               AS CURR_MACHUL
              , 0                               AS MI_BOND_AMT
              , 0                               AS DO_BOND_AMT
              , 0                               AS AK_BOND_AMT
       FROM     ( SELECT V.UPJANG_CD UPJANG
                      , 0                  AS AMT
                      , V.OCCUR_DATE       AS BOND_DATE
                      , NVL(V.OCCUR_AMT,0) AS RCP_AMT1
                      , (SELECT NVL(SUM(D.APPLY_AMT),0)
                        FROM    SLA_ADVANCE_ALT_DETAIL D
                        WHERE   D.RECD_STATUS = 'L'
                        AND     D.ALT_DATE BETWEEN '19000101' AND     :reqDate
                        AND     D.ADVANCE_NUM = V.ADVANCE_NUM
                        )
                          AS RCP_AMT2
                      , 0 AS CURR_MACHUL
                      , 0 MI_BOND_AMT
                      , 0 DO_BOND_AMT
                      , 0 AK_BOND_AMT
                FROM    SLA_ADVANCE_MST V
                        INNER JOIN FMS_UPJANG B
                        ON      1 = 1 
                        <#if mainUpjang?has_content>
                        AND
                                (
                                        B.MAIN_UPJANG = :mainUpjang
                                )
                        </#if> 
                        <#if sabun?has_content>
                        AND
                                (
                                        B.PART_SALES_SABUN = :sabun
                                )
                        </#if>
                        AND     V.UPJANG_CD = B.UPJANG
                        INNER JOIN ST_UPJANG S
                        ON      1        = 1
                        AND     B.UPJANG = S.UPJANG
                        INNER JOIN HLDC_SC_DEPT_V D
                        ON      1 = 1
                        AND
                                (
                                        D.MU_CD = '2004'
                                )
                        AND S.DEPT_ID = D.DEPT_ID
                WHERE   V.OCCUR_DATE BETWEEN '19000101' AND     :reqDate
                AND     V.SYS_CLASS IN ('13','14')
                AND     V.RECD_STATUS='L'
                )
                X
       GROUP BY X.UPJANG
              , X.BOND_DATE
       
       UNION ALL
       
       SELECT TO_NUMBER(UPJANG) AS UPJANG
            , 0 AMT
            , :reqDate BOND_DATE
            , 0 RCP_AMT1
            , 0 CURR_MACHUL
            , SUM(DECODE(V.DUE_GUBUN, '미도래채권'
                       , V.AMT - (V.RCP_AMT1 + V.RCP_AMT2)
                       , 0)) MI_BOND_AMT
            , SUM(DECODE(V.DUE_GUBUN, '도래채권'
                       , V.AMT - (V.RCP_AMT1 + V.RCP_AMT2)
                       , 0)) DO_BOND_AMT
            , SUM(DECODE(V.DUE_GUBUN, '악성채권'
                       , V.AMT - (V.RCP_AMT1 + V.RCP_AMT2)
                       , 0)) AK_BOND_AMT
       FROM   ( SELECT DEPT_ID
                    , PART_SALES_SABUN
                    , MAIN_UPJANG
                    , UPJANG
                    , SUM(AMT) AMT
                    , BOND_DATE
                    , DUE_GUBUN
                    , SUM(RCP_AMT1) RCP_AMT1
                    , SUM(RCP_AMT2) RCP_AMT2
              FROM    ( SELECT /*+ NO_MERGE LEADING(B C V V1) USE_HASH(C) USE_HASH(V) USE_HASH(V1) */
                              B.DEPT_ID
                            , B.PART_SALES_SABUN
                            , B.MAIN_UPJANG
                            , TO_CHAR(B.UPJANG) UPJANG
                            , V.AR_AMT AMT
                            , V.OCCUR_DATE BOND_DATE
                            , (
                              CASE
                                      WHEN :reqDate
                                              >                                      
                                      DECODE(C.PAY_GUBUN_CD
                                             , '999'
                                             , TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD')
                                             , TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMM')|| LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0')) ) THEN
                                      '악성채권'
                              WHEN :reqDate <
                                      = DECODE(C.PAY_GUBUN_CD
                                               , '999'
                                               , TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),1),'YYYYMMDD')
                                               , TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMM')|| LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD) + 1), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0')) ) AND :reqDate >
                                      DECODE(C.PAY_GUBUN_CD
                                             , '999'
                                             , TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD')
                                             , TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')|| LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0')) ) THEN
                                      '도래채권'
                              WHEN :reqDate <
                                      = DECODE(C.PAY_GUBUN_CD
                                               , '999'
                                               , TO_CHAR(LAST_DAY(TO_DATE(V.OCCUR_DATE, 'YYYYMMDD')),'YYYYMMDD')
                                               , TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMM')|| LEAST(TO_CHAR(LAST_DAY(TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(V.OCCUR_DATE, 1, 6), 'YYYYMM'), TO_NUMBER(C.PAY_GUBUN_CD)), 'YYYYMMDD'), 'YYYYMMDD')), 'DD'), LPAD(C.PAY_DATE, 2, '0')) ) THEN
                                      '미도래채권'
                              END) DUE_GUBUN
                              , (SELECT NVL(SUM(V1.RECEIVE_AMT), 0)
                              FROM    SLA_AR_RECEIVE_DETAIL V1
                              WHERE   V1.RECD_STATUS = 'L'
                              AND     V1.RECEIVE_DATE BETWEEN '19000101' AND :reqDate
                              AND     V1.AR_NUM = V.AR_NUM
                              )
                              AS RCP_AMT1
                              , 0 RCP_AMT2 FROM SLA_AR_MST V
                              , FMS_UPJANG B
                              , ( SELECT  UPJANG
                                     , MAX(PAY_GUBUN_CD) AS PAY_GUBUN_CD
                                     , MAX(PAY_DATE)     AS PAY_DATE
                              FROM     SCO_UPJANG_CUST
                              GROUP BY UPJANG
                              )
                              C
                              , ST_UPJANG S
                              , HLDC_SC_DEPT_V D WHERE V.OCCUR_DATE BETWEEN '19000101' AND :reqDate 
                              AND
                              (
                                      V.SYS_CLASS IN ('13','14')
                              )
                              AND
                              (
                                      V.RECD_STATUS = 'L'
                              )
                              AND
                              (
                                      V.UPJANG_CD = B.UPJANG
                              )
                              AND
                              (
                                      B.UPJANG = C.UPJANG
                              )
                              AND
                              (
                                      B.UPJANG = S.UPJANG
                              )
                              AND
                              (
                                      S.DEPT_ID = D.DEPT_ID
                              )
                              AND
                              (
                                      D.MU_CD = '2004'
                              )
                              <#if mainUpjang?has_content> 
                              AND
                              (
                                      B.MAIN_UPJANG = :mainUpjang
                              )
                              </#if> 
                              <#if sabun?has_content> 
                              AND
                              (
                                      B.PART_SALES_SABUN = :sabun
                              )
                              </#if>
                      )
                      GROUP BY  DEPT_ID
		                      , PART_SALES_SABUN
		                      , MAIN_UPJANG
		                      , UPJANG
		                      , BOND_DATE
		                      , DUE_GUBUN
              )
              V 
              GROUP BY DEPT_ID
	              , PART_SALES_SABUN
	              , MAIN_UPJANG
	              , UPJANG
       )
       V
       , FMS_UPJANG A
       , ST_UPJANG S
       , ( SELECT  TO_CHAR(V.UPJANG) UPJANG
              , SUM(V.CREDIT_EXT_DAYS) CREDIT_EXT_DAYS
       FROM     FMS_CREDIT_EXT V
       WHERE    :reqDate BETWEEN V.SUPPLY_START AND      V.SUPPLY_END
       AND      V.APPR_YN = 'Y'
       GROUP BY V.UPJANG
       )
       V2 WHERE V.UPJANG = A.UPJANG AND V.UPJANG = S.UPJANG AND V2.UPJANG(+) = A.UPJANG 
       <#if mainUpjang?has_content> 
       AND
       (
               A.MAIN_UPJANG = :mainUpjang
       )
       </#if> 
       <#if sabun?has_content> 
       AND
       (
               A.PART_SALES_SABUN = :sabun
       )
       </#if> 
       AND
       (
               A.USE_YN = 'Y'
       )
       GROUP BY A.MAIN_UPJANG, V.UPJANG, A.DEPT_ID, A.PART_SALES_SABUN, A.CREDIT_AMOUNT
	]]></statement>
</hqml>
