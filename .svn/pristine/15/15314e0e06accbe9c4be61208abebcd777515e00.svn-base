<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/**
 * FT(식재도매) JS 스크립트
 * @ClassName FTCommon.xjs
 * @Description 식재도매 javascript
 * @Modification-Information
 *    수정일     수정자        수정내용
 *  ----------   ----------   -------------------------------
 *  2015.06.25    jshoon       최초 생성
 *
 * @author FC종합전산구축 : jshoon
 * @since 2015.06.25.
 * @version 1.0
 * @see
 *
 *  Copyright (C) 2015 by HANWHA S&C CO.,LTD. All right reserved.
 */
(function() {

	/**
     * 사업자번호를 Mask 씌워 보여 준다.
     *
     * @param strVal 변환할 문자열
     * @return retVal Mask로 변환된 사업자 등록번호
     */
    gfn_bsnNoMask = function (strVal)
    {
        if (gfn_isNull(strVal)) return "";
		var retVal = gfn_removeSpecialChar(strVal).replace(/([0-9]{3})([0-9]+)([0-9]{5})/, '$1-$2-$3');
		return retVal;
    };
    
    /**
     * 특수문자를 제거한다.
     *
     * @param strVal 변환할 문자열
     * @return retVal 특수문자가 제거된 문자열
     */
    gfn_removeSpecialChar = function (strVal)
    {
        if (gfn_isNull(strVal)) return "";
		var retVal = strVal.replace(/[\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"]/gi, "");
		return retVal;
    };
    
    /**
     * object 변수의 길이를 return 한다.
     * ex) gfn_getObjkeyLength(rtnVal)
     *
     * @param obj 체크할 변수
     * @return object length or 0
     */
    gfn_getObjkeyLength = function (obj)
    {
        if (obj == null) return 0;

        if (typeof obj == "object")
        {
            var count = 0;
            for (var key in obj)
            {
                if (obj.hasOwnProperty(key)) count++;
            }
            return count;
        }
        else
        {
            return 0;
        }
    };
    
}());

var FTCommon = {
	
    /**
     * Grid의 input Field내의 Text를 자동 select하는 함수
     *
     * @param obj Form
     * @return none
     */
    setGridAutoSelect : function (obj, bAutoSelectEnable, arrGrdEssentialSkip)
    {
        var strType;
        var strName;

        for (var i = 0, iLen = obj.components.length; i < iLen; i++)
        {
            strType = obj.components[i].toString().toUpperCase();
            strName = obj.components[i].name;
            //trace("setComponentAuth : strType : " + strType + " / strName : " + strName);

            switch (strType)
            {
                case "[OBJECT EDIT]":
					obj.components[i].autoselect = bAutoSelectEnable;
					// Edit value를 ToolTip으로 출력
                    obj.components[i].onmouseenter.addHandler(function (obj, e) {
						if (obj.text != null && obj.text != "") {
							obj.tooltiptype = "hover";
							obj.tooltiptext = obj.text;
						} else {
							obj.tooltiptext = '';
						}
					});
                    break;
                case "[OBJECT COMBO]":
					// Edit value를 ToolTip으로 출력
                    obj.components[i].onmouseenter.addHandler(function (obj, e) {
						if (obj.text != null && obj.text != "") {
							obj.tooltiptype = "hover";
							obj.tooltiptext = obj.text;
						} else {
							obj.tooltiptext = '';
						}
					});
                    break;
                case "[OBJECT MASKEDIT]":
                    obj.components[i].autoselect = bAutoSelectEnable;
                    break;
                case "[OBJECT CALENDAR]":
                    obj.components[i].autoselect = bAutoSelectEnable;
                    break;
                case "[OBJECT OBJCALMONTH]":
                    obj.components[i].autoselect = bAutoSelectEnable;
                    break;
                case "[OBJECT OBJCALENDAR]":
                    obj.components[i].autoselect = bAutoSelectEnable;
                    break;
                case "[OBJECT GRID]":
					// Grid에서 Colsize 체크해서 Text보다 길이가 적으면 Tooltip을 보여준다.
                    // Div에서의 ExtCommon 오동작으로 인해 함수를 별도로 구현하여 사용한다.
					obj.components[i].onmousemove.addHandler(function(obj, e) {
						if (e.row < 0) {
							obj.tooltiptext = ""; // tooltiptext 초기화
							return;
						}
						if (e.cell == undefined) {
							obj.tooltiptext = ""; // tooltiptext 초기화
							return;
						}
						if (e.cell == -1) {
							obj.tooltiptext = ""; // tooltiptext 초기화
							return;
						}
						if (obj.getCellCount("Body") < e.cell) {
							obj.tooltiptext = ""; // tooltiptext 초기화
							return;
						}
						if (obj.getCellProperty("body", e.cell, "displaytype") == "checkbox" ||
						    obj.getCellProperty("body", e.cell, "displaytype") == "radio") {
						    // new String(obj.getCellProperty("body", e.cell, "text")).toUpperCase().indexOf("EXPR") == -1) {
							return;
						}
						var fontObj = FTCommon.getObjFont();
						try {
							var sCellTextLen = FTCommon.getTextSize(obj, obj.getCellText(e.row, e.cell), fontObj);
							if (sCellTextLen.cx > obj.getRealColSize(e.cell))  {
								obj.tooltiptext = obj.getCellText(e.row, e.cell); // cell의 width 보다 클 경우만 tooltiptext 셋팅.
							} else {
								obj.tooltiptext = ""; // tooltiptext 초기화
							}
						} catch (e) {
							obj.tooltiptext = ""; // tooltiptext 초기화
						}
					});
					// Grid속성이 readonly이면 Skip
					if (obj.components[i].readonly == true) break;
					// Grid 클릭시 Combo, Calendar항목을 자동 select하여 보여준다.
					var nCnt = obj.components[i].getCellCount("Body");
					var edtType = "";
					var colName = "";
					var className = "";
					// 일단 입력 전체 필드 Class 적용
					for (var j = 0; j < nCnt; j++)
					{
						edtType = obj.components[i].getCellProperty("body", j, "edittype");
						if (typeof edtType != "undefined" && 
						    edtType != "none" ) {
							if (gfn_isNull(obj.components[i].getCellProperty("head", j, "class")) &&
								obj.components[i].getCellProperty("body", j, "text") != "bind:chk") {
								obj.components[i].setCellProperty("head", j, "class", "grd_WF_Essential");
							}
						}
					}
					for (var j = 0; j < nCnt; j++)
					{
						edtType = obj.components[i].getCellProperty("body", j, "edittype");
						if (typeof edtType != "undefined" && 
						    edtType != "none" )
						    //&& new String(edtType).toUpperCase().indexOf("EXPR") == -1)
						{
							//trace("setGridAutoSelect : name : " + obj.components[i].name + " / edtType : " + edtType);
							switch (edtType)
							{
								case "combo" :
								case "date" :
								case "text" :
								case "normal" :
								case "mask" :
								case "masknumber" :
									obj.components[i].setCellProperty("body", j, "editautoselect", bAutoSelectEnable);
									break;
								default :
									break;
							}
							// 제외 필드만 class 제거
							if (obj.components[i].getCellProperty("body", j, "text") != "bind:chk") {
							    if (typeof arrGrdEssentialSkip != "undefined" && arrGrdEssentialSkip != null && arrGrdEssentialSkip != "") {
									colName = obj.components[i].getCellProperty("head", j, "text");
									// expr이 존재할 경우 경우의 값 모두 비교
									if (colName.trim().toLowerCase().indexOf('expr:') != -1) {
										var tmpColName = colName.split('?');
										tmpColName = tmpColName[1].split(':');
										for (var cn = 0; cn < tmpColName.length; cn++) {
											for (var sk = 0; sk < arrGrdEssentialSkip.length; sk++) {
												if (tmpColName[cn].replace("'", "").replace("\"", "") == arrGrdEssentialSkip[sk]) {
													obj.components[i].setCellProperty("head", j, "class", "");
												}
											}
										}
									} else {
										for (var sk = 0; sk < arrGrdEssentialSkip.length; sk++) {
											if (colName == arrGrdEssentialSkip[sk]) {
												obj.components[i].setCellProperty("head", j, "class", "");
											}
										}
									}
								}
							}
						}
					}
                    break;
                case "[OBJECT TAB]":
                    setGridAutoSelect(obj.components[i], bAutoSelectEnable, arrGrdEssentialSkip);   // Tab안의 그리드를 위해 재귀호출
                    break;
                case "[OBJECT TABPAGE]":
                    setGridAutoSelect(obj.components[i], bAutoSelectEnable, arrGrdEssentialSkip);   // TabPage안의 그리드를 위해 재귀호출
                    break;
                case "[OBJECT DIV]":
                    setGridAutoSelect(obj.components[i], bAutoSelectEnable, arrGrdEssentialSkip);   // Div안의 그리드를 위해 재귀호출
                    break;
                default:
                    break;
            }
        }
    },
    
    getTextSize : function(thisObj, sText, objFont)
	{
		var objPainter = thisObj.canvas.getPainter();
		var objTextSize = objPainter.getTextSize(sText, objFont);

		return objTextSize;	//cx,cy
	},
	
    /**
     * Font Object 생성 반환
     *
     * @return Font Object
     */
	getObjFont : function()
	{
		var objFont = new Font;
		objFont.size = 9;
		objFont.name = "Gulim";

		return objFont;
	},
	
	/**
     * Popup Grid 선택 시 Row Parameter 배열 추출 함수
     *
     * @param objDs 배열로 추출할 DataSet
     * @return arr 추출된 배열
     */
    setPopupParam : function (objDs)
    {
        var arr = {};
        if (typeof objDs != "undefined" && objDs != null && objDs === '[object Dataset]')
        {
            var colId = "";
            if (objDs.rowcount == 0) return arr;
            for (var i = 0, iColCnt = objDs.getColCount(); i < iColCnt; i++)
            {
                colId = objDs.getColID(i);
                arr[colId] = objDs.getColumn(objDs.rowposition, colId);
            }
        }
        return arr;
    }

};
]]></Script>
