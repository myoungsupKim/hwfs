<?xml version="1.0" encoding="euc-kr"?>
<query>
	<type>select</type>
	<description><![CDATA[일별 음식물쓰레기현황 조회]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>
<![CDATA[
SELECT TO_CHAR(TO_DATE(T0.MENU_DATE, 'RRRR-MM-DD'),'MM.DD') || '(' || TO_CHAR(TO_DATE(T0.MENU_DATE, 'RRRR-MM-DD'),'dy','NLS_DATE_LANGUAGE=KOREAN') || ')' AS MENU_DATE,
       NVL(T3.NEED_QTY,0) NEED_QTY, T1.REAL_MEAL_QTY, NVL(T2.BEFORE_PROC_QTY, 0) AS BEFORE_PROC_QTY,
       NVL(T2.LEAVING_QTY, 0) AS LEAVING_QTY, NVL(LEFTOVER_QTY, 0) AS LEFTOVER_QTY, ROUND(NVL(T3.FOOD_COST, 0)) AS FOOD_COST,
       DECODE( NVL(T3.NEED_QTY,0), 0, 0, ((NVL(T3.FOOD_COST, 0)) * NVL(T2.LEAVING_QTY, 0)) / NVL(T3.NEED_QTY,0) ) AS LEAVING_QTY_AMT, -- 잔반 LOSS비용
	   DECODE( NVL(T3.NEED_QTY,0), 0, 0, ((NVL(T3.FOOD_COST, 0)) * NVL(T2.LEFTOVER_QTY, 0)) / NVL(T3.NEED_QTY,0) ) AS LEFTOVER_QTY_AMT -- 잔식 LOSS비용
  FROM (SELECT #UPJANG# AS UPJANG
             , MENU_DATE
          FROM (SELECT SUBSTR(#FROM_MENU_DATE#,1,6)||DECODE(LENGTH(ROWNUM),1,'0')||TO_CHAR(ROWNUM) AS MENU_DATE
                  FROM SCC_COMMON_GROUP
                 WHERE ROWNUM <= 31)
         WHERE MENU_DATE BETWEEN #FROM_MENU_DATE# AND #TO_MENU_DATE#) T0,
       (
        SELECT UPJANG, MENU_DATE, SUM(NEED_QTY) AS NEED_QTY, SUM(REAL_MEAL_QTY) AS REAL_MEAL_QTY
          FROM (SELECT A.UPJANG, A.MENU_CD, A.MENU_DATE, SUM(NVL(C.NEED_QTY, 0)) AS NEED_QTY, AVG(NVL(A.REAL_MEAL_QTY, 0)) AS REAL_MEAL_QTY
                  FROM FSM_REAL_MENU_MST A, -- KEY : UPJANG, MENU_CD
                       FSM_REAL_RECIPE_MST B, -- KEY : UPJANG, MENU_CD, RECIPE_CD
	                   FSM_REAL_RECIPE_ITEM C -- KEY : UPJANG, MENU_CD, RECIPE_CD, ITEM_CODE
                 WHERE A.UPJANG = #UPJANG#
                   AND A.MENU_DATE BETWEEN #FROM_MENU_DATE# AND #TO_MENU_DATE# -- 검색조건(필수,제공일)
                   AND A.UPJANG = B.UPJANG
                   AND A.MENU_CD = B.MENU_CD
                   AND B.UPJANG = C.UPJANG
                   AND B.MENU_CD = C.MENU_CD
                   AND B.RECIPE_CD = C.RECIPE_CD
                 GROUP BY A.UPJANG, A.MENU_CD, A.MENU_DATE)
         GROUP BY UPJANG, MENU_DATE
       ) T1,
       FSM_DAILY_OP_DIARY T2,
	   (
        SELECT TRANS_UPJANG, TRANS_DATE,
--               ROUND(SUM(A.TRANS_QTY * C.KG_CONVERT_RATE),1) AS NEED_QTY,
               ROUND(SUM(A.UOM_QTY * C.KG_CONVERT_RATE / C.UOM_CONVERT_RATE),1) AS NEED_QTY,
               SUM(DECODE(A.ACCTCD,'42203030',DECODE(B.OUTVAT_FLAG,'Y',DECODE(A.TAX_CODE,'100',MARGIN_AMOUNT*0.1,0),0)+MARGIN_AMOUNT,0)) AS FOOD_COST  -- 42203030 : 식음료원가
          FROM HLDC_PO_TRANSACTION A, HLDC_PO_SUBINVENTORY B, HLDC_PO_ITEM_MST C
         WHERE A.SUBINV_CODE = B.SUBINV_CODE
           AND A.ITEM_CODE = C.ITEM_CODE
           AND TRANS_DATE BETWEEN #FROM_MENU_DATE# AND #TO_MENU_DATE#
           AND TRANS_UPJANG = #UPJANG#
           AND A.TRANS_TYPE LIKE 'O%'
           AND A.TRANS_TYPE <> 'O002'
           AND C.ITEM_CLASS1 = 'F'
           AND A.SUBINV_CODE LIKE 'C%'
         GROUP BY TRANS_UPJANG, TRANS_DATE
       ) T3
 WHERE T0.UPJANG = T1.UPJANG(+)
   AND T0.MENU_DATE = T1.MENU_DATE(+)
   AND T0.UPJANG = T2.UPJANG(+)
   AND T0.MENU_DATE = T2.MENU_DATE(+)
   AND T0.UPJANG = T3.TRANS_UPJANG(+)
   AND T0.MENU_DATE = T3.TRANS_DATE(+)
 ORDER BY T0.MENU_DATE	]]></statement>
	<input default-name="ds_Input">
	</input>
	<output default-name="ds_List1">
	</output>
</query>