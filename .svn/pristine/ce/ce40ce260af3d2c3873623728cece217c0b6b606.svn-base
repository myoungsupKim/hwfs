<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="ei.isa.fsspExactDAO">
	<desc>정산 HQML Query</desc>

	<!-- 정산 목록을 조회한다. -->
	<statement name="selectExact" type="select">
		/*+ [ISA0201] com.hwfs.ei.isa.dao.FsspExactDAO.selectExact */
		<![CDATA[
SELECT '0' AS CHK_BOX
     , A.SP_DATE
     , A.PR_SABUN
     , A.PR_NAME
     , A.RQ_SABUN
     , A.RQ_NAME
     , A.RQ_CC_NAME
     , A.PAY_METHOD
     , A.PAY_METHOD_NAME
     , A.CARD_COMP
     , A.CARD_COMP_NAME
     , A.CARD_NUM_ENC
     , A.INST_PERIOD
     , SUM(A.PR_QTY) AS PR_QTY
     , SUM(A.SALE_AMOUNT) AS SALE_AMOUNT
     , SUM(A.DC_AMOUNT) AS DC_AMOUNT
     , SUM(A.TOT_AMOUNT) AS TOT_AMOUNT
     , SUM(A.APR_AMT) AS APR_AMOUNT
  FROM (SELECT A.SP_DATE
             , A.PR_SABUN
             , D.PR_NAME
             , A.RQ_SABUN
             , D.RQ_NAME
             , (SELECT CC_NM FROM SCC_CC WHERE CC_CD = D.RQ_CC_CD) AS RQ_CC_NAME
             , A.PAY_METHOD
             , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = '022' AND CODE = A.PAY_METHOD) AS PAY_METHOD_NAME
             , A.PR_QTY
             , A.SALE_AMOUNT
             , A.DC_AMOUNT
             , A.SALE_AMOUNT - NVL(A.DC_AMOUNT, 0) AS TOT_AMOUNT
             , A.CARD_COMP
             , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = '024' AND CODE = A.CARD_COMP) AS CARD_COMP_NAME
             , SCC_CRYPTO.DEC_FUN(A.CARD_NUM_ENC) AS CARD_NUM_ENC
             , A.INST_PERIOD
             , NVL(E.APR_AMT, 0) AS APR_AMT
          FROM FSP_PO_SPECIAL_SALE A
             , FSP_PO_SPECIAL_ITEM B
             , HLDC_PO_ITEM_MST C
             , FSP_PO_SP_SALE_INFO D
             , (SELECT AA.VAN_KEY
                     , AA.SP_ID
                     , AA.APR_AMT
                  FROM FSP_PO_SP_SALE_VAN AA
                     , FSP_PO_SP_VAN_DTL BB
                 WHERE BB.VAN_KEY = AA.VAN_KEY
                   AND BB.VAN_REF_KEY = AA.VAN_REF_KEY
                   AND BB.ASSIGN_TYPE = :assignType
                   AND BB.ACTION_MARK = 'A') E
         WHERE B.ITEM_CODE = A.ITEM_CODE
           AND B.SEASON_NUM = A.SEASON_NUM
           AND C.ITEM_CODE = A.ITEM_CODE
           AND D.SP_ID = A.SP_ID
           AND E.VAN_KEY(+) = A.VAN_KEY
           AND E.SP_ID(+) = A.SP_ID
           AND A.SEASON_NUM = :seasonNum
           AND B.SEASON_NUM = :seasonNum
<#if brchCd == "1300">
           AND D.RQ_BRCH_CD IN ('0000', '1300')
<#else>
           AND D.RQ_BRCH_CD = :brchCd
</#if>
<#if startSpDate?has_content>
           AND A.SP_DATE >= :startSpDate
</#if>
<#if endSpDate?has_content>
           AND A.SP_DATE <= :endSpDate
</#if>
<#if lineStatusYn == "N">
           AND A.LINE_STATUS = '주문'
<#else>
           AND A.LINE_STATUS IN ('정산','배송')
</#if>
<#if payMethod?has_content>
           AND A.PAY_METHOD = :payMethod
</#if>
<#if spId?has_content>
           AND A.SP_ID = :spId
</#if>
           ) A
 GROUP BY A.SP_DATE, A.PR_SABUN, A.PR_NAME, A.RQ_SABUN, A.RQ_NAME, A.RQ_CC_NAME, A.PAY_METHOD, A.PAY_METHOD_NAME, A.CARD_COMP, A.CARD_COMP_NAME, A.CARD_NUM_ENC, A.INST_PERIOD
 ORDER BY A.SP_DATE, A.PR_SABUN, A.PR_NAME, A.RQ_SABUN, A.RQ_NAME, A.RQ_CC_NAME, A.PAY_METHOD, A.PAY_METHOD_NAME
		]]>
	</statement>

	<!-- 주문내역을 조회한다. -->
	<statement name="selectOrder" type="insert">
		/*+ [ISA0202] com.hwfs.ei.isa.dao.FsspExactDAO.selectOrder */
		<![CDATA[
SELECT A.SP_ID AS SP_ID 
     , B.ITEM_NUM
     , A.SEASON_NUM AS SEASON_NUM
     , A.ITEM_CODE AS ITEM_CODE 
     , C.ITEM_NAME AS ITEM_NAME 
     , C.ITEM_SIZE AS ITEM_SIZE 
     , DECODE(C.TAX_CODE, '100', '과세', '210', '면세', '영세') AS TAX_CODE 
     , A.SALE_PRICE AS SALE_PRICE 
     , A.PR_QTY AS PR_QTY 
     , A.PR_QTY AS INIT_QTY
     , A.PR_QTY AS BEFORE_PR_QTY 
     , A.SALE_AMOUNT AS SALE_AMOUNT 
     , A.DC_AMOUNT AS DC_AMOUNT 
     , A.SALE_AMOUNT - A.DC_AMOUNT AS TOT_AMOUNT
     , A.SALE_TYPE AS SALE_TYPE
     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = '028' AND CODE = A.SALE_TYPE) AS SALE_TYPE_NAME 
     , C.IMG_PATH AS IMAGE_PATH 
     , DECODE(A.CONTENT, 'Y', 'Y', 'N') AS CONTENT 
     , A.LINE_STATUS AS LINE_STATUS 
     , A.PR_SABUN AS PR_SABUN 
     , E.PR_NAME
     , A.RQ_SABUN AS RQ_SABUN
     , E.RQ_NAME
     , (SELECT BB.CC_NM FROM SCC_CC BB WHERE BB.CC_CD = E.RQ_CC_CD) AS RQ_CC_NM
     , E.PR_BU_CD AS BU_CD
     , SCC_CRYPTO.DEC_FUN(A.RQ_TEL_ENC) AS RQ_TEL
     , A.SEND_NAME AS SEND_NAME 
     , SCC_CRYPTO.DEC_FUN(A.SEND_TEL_ENC) AS SEND_TEL 
     , SCC_CRYPTO.DEC_FUN(A.SEND_ADDR_ENC) AS SEND_ADDR 
     , A.RECE_NAME AS RECE_NAME 
     , SCC_CRYPTO.DEC_FUN(A.RECE_TEL_ENC) AS RECE_TEL 
     , SCC_CRYPTO.DEC_FUN(A.RECE_HP_ENC) AS RECE_HP 
     , SCC_CRYPTO.DEC_FUN(A.RECE_ADDR_ENC) AS RECE_ADDR 
     , REPLACE(A.AR_SAUPNO, '-', '') AS AR_SAUPNO 
     , SCC_CRYPTO.DEC_FUN(A.AR_ADDR_ENC) AS AR_ADDR 
     , A.AR_NAME AS AR_NAME 
     , SCC_CRYPTO.DEC_FUN(A.AR_TEL_ENC) AS AR_TEL 
     , SCC_CRYPTO.DEC_FUN(A.AR_EMAIL_ENC) AS AR_EMAIL 
     , A.PAY_METHOD AS PAY_METHOD
     , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = '022' AND CODE = A.PAY_METHOD) AS PAY_METHOD_NAME
     , A.INST_PERIOD AS INST_PERIOD 
     , A.CARD_CLASS AS CARD_CLASS 
     , A.CARD_COMP AS CARD_COMP 
     , REPLACE(SCC_CRYPTO.DEC_FUN(A.CARD_NUM_ENC), '-', '') AS CARD_NUM 
     , A.VALID_THRU_MM AS VALID_THRU_MM 
     , A.VALID_THRU_YY AS VALID_THRU_YY 
     , D.DELI_TYPE AS DELI_TYPE 
     , D.DELI_COMP AS DELI_COMP 
     , D.INVOICE_NUM AS INVOICE_NUM 
     , A.BILL_NO AS BILL_NO 
     , C.MAX_ORD_QTY AS MAX_ORD_QTY 
     , (B.STOCK_QTY - NVL( (SELECT SUM(Z.PR_QTY) 
                              FROM FSP_PO_SPECIAL_SALE Z 
                             WHERE Z.ITEM_CODE = B.ITEM_CODE 
                               AND Z.SEASON_NUM = B.SEASON_NUM
                               AND Z.LINE_STATUS <> '취소' 
                               AND Z.SP_TYPE = 'ING'), 0) ) AS STOCK_QTY
     , B.DELI_FREE_AMT AS DELI_FREE_AMT 
     , B.QTY_DC_STD AS QTY_DC_STD 
     , B.QTY_DC_RATE AS QTY_DC_RATE 
     , B.AMT_DC_STD AS AMT_DC_STD 
     , B.AMT_DC_RATE AS AMT_DC_RATE 
     , B.OPER_ORG_SN AS OPER_ORG_SN 
     , B.VD_SN AS VD_SN 
     , B.CONTRACT_START AS CONTRACT_START
     , A.SP_DATE
     , NVL(A.VAN_KEY, 'NONE') AS VAN_KEY
     , (SELECT PROC_STATUS FROM FSP_PO_SP_VAN_MST WHERE VAN_KEY = A.VAN_KEY) AS VAN_STATUS
     , (A.SALE_AMOUNT - A.DC_AMOUNT) - NVL( (SELECT SUM(APR_AMT)
                                               FROM FSP_PO_SP_VAN_MST AA
                                                  , FSP_PO_SP_SALE_VAN BB
                                              WHERE BB.VAN_KEY = AA.VAN_KEY
                                                AND BB.SP_ID = A.SP_ID) , 0) AS TARGET_AMOUNT
  FROM FSP_PO_SPECIAL_SALE A
     , FSP_PO_SPECIAL_ITEM B 
     , HLDC_PO_ITEM_MST C 
     , IF_FS_SP_SALE_DAILY D
     , FSP_PO_SP_SALE_INFO E
 WHERE A.ITEM_CODE = B.ITEM_CODE 
   AND A.ITEM_CODE = C.ITEM_CODE 
   AND A.SP_ID= D.SP_ID(+)
   AND E.SP_ID = A.SP_ID
   AND A.LINE_STATUS <> '취소'
<#if spIds?has_content>
   AND A.SP_ID IN (:spIds)
</#if>
<#if vanKey?has_content>
   AND A.VAN_KEY = :vanKey
</#if>
<#if seasonNum?has_content>
   AND A.SEASON_NUM = :seasonNum
   AND B.SEASON_NUM = :seasonNum
</#if>
<#if spDate?has_content>
   AND A.SP_DATE = :spDate
</#if>
<#if prSabun?has_content>
   AND A.PR_SABUN = :prSabun
</#if>
<#if rqSabun?has_content>
   AND A.RQ_SABUN = :rqSabun
</#if>
<#if payMethod?has_content>
   AND A.PAY_METHOD = :payMethod
</#if>
<#if cardComp?has_content>
   AND A.CARD_COMP = :cardComp
</#if>
<#if cardNumEnc?has_content>
   AND A.CARD_NUM_ENC = SCC_CRYPTO.ENC_FUN(:cardNumEnc)
</#if>
<#if instPeriod?has_content>
   AND A.INST_PERIOD = :instPeriod
</#if>
<#if brchCd == "1300">
   AND E.RQ_BRCH_CD IN ('1300', '0000')
<#else>
   AND E.RQ_BRCH_CD = :brchCd
</#if>
<#if spId?has_content>
   AND A.SP_ID = :spId
</#if>
 ORDER BY A.SP_ID
		]]>
	</statement>
	
	<!-- 주문건을 취소한다. -->
	<statement name="updateOrderCancel" type="update">
		/*+ [ISA0203] com.hwfs.ei.isa.dao.FsspExactDAO.updateOrderCancel */
		<![CDATA[
UPDATE FSP_PO_SPECIAL_SALE
   SET LINE_STATUS = '취소'
     , UPDATE_BY = :sabun
     , UPDATE_DATE = SYSDATE
 WHERE SP_ID = :spId
		]]>
	</statement>

	<!-- 주문건을 변경한다. -->
	<statement name="updateOrderChange" type="update">
		/*+ [ISA0204] com.hwfs.ei.isa.dao.FsspExactDAO.updateOrderChange */
		<![CDATA[
UPDATE FSP_PO_SPECIAL_SALE
   SET UPDATE_BY = :sabun
     , UPDATE_DATE = SYSDATE
<#if prQty?has_content>
     , PR_QTY = :prQty
</#if>
<#if salePrice?has_content> 
     , SALE_PRICE = :salePrice
</#if>
<#if saleAmount?has_content> 
     , SALE_AMOUNT = :saleAmount
</#if>
<#if dcAmount?has_content> 
     , DC_AMOUNT = :dcAmount
</#if>
<#if saleType?has_content> 
     , SALE_TYPE = :saleType
</#if>
<#if payMethod?has_content>
     , PAY_METHOD = :payMethod
  <#if payMethod == "2">
     , INST_PERIOD = <#if instPeriod?has_content> CASE WHEN TO_NUMBER(:instPeriod) < 10 THEN '0' || :instPeriod ELSE :instPeriod END <#else> '00' </#if>
     , CARD_CLASS = <#if cardClass?has_content> :cardClass <#else> NULL </#if>
     , CARD_COMP = <#if cardComp?has_content> :cardComp <#else> NULL </#if>
     , CARD_NUM_ENC = <#if cardNum?has_content> SCC_CRYPTO.ENC_FUN(REPLACE(:cardNum, '-', '')) <#else> NULL </#if>
     , VALID_THRU_YY = <#if validThruYy?has_content> CASE WHEN TO_NUMBER(:validThruYy) < 10 THEN '0' || :validThruYy ELSE :validThruYy END <#else> NULL </#if>
     , VALID_THRU_MM = <#if validThruMm?has_content> CASE WHEN TO_NUMBER(:validThruMm) < 10 THEN '0' || :validThruMm ELSE :validThruMm END <#else> NULL </#if>
  <#else>
     , INST_PERIOD = NULL
     , CARD_CLASS = NULL
     , CARD_COMP = NULL
     , CARD_NUM_ENC = NULL
     , VALID_THRU_YY = NULL
     , VALID_THRU_MM = NULL
  </#if>
</#if>
 WHERE SP_ID = :spId
		]]>
	</statement>

	<!-- 주문내역에 VAN KEY정보를 수정한다. -->
	<statement name="updateOrderVanKey" type="update">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.updateOrderVanKey */
		<![CDATA[
UPDATE FSP_PO_SPECIAL_SALE
   SET UPDATE_DATE = SYSDATE
     , VAN_KEY = <#if vanKey?has_content> :vanKey <#else> NULL </#if>
     , UPDATE_BY = :sabun
 WHERE SP_ID = :spId
		]]>
	</statement>

	<!-- 승인(Master)를 추가한다. -->
	<statement name="insertVanMaster" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertVanMaster */
		<![CDATA[
INSERT INTO FSP_PO_SP_VAN_MST (
    VAN_KEY
  , PROC_STATUS
  , CREATE_DATE
  , CREATE_BY
  , UPDATE_DATE
  , UPDATE_BY
) VALUES (
    :vanKey
  , :procStatus
  , SYSDATE
  , :sabun
  , SYSDATE
  , :sabun
)
		]]>
	</statement>

	<!-- 승인(Master)를 수정한다. -->
	<statement name="updateVanMaster" type="update">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.updateVanMaster */
		<![CDATA[
UPDATE FSP_PO_SP_VAN_MST
   SET PROC_STATUS = :procStatus
     , UPDATE_DATE = SYSDATE
     , UPDATE_BY = :sabun
 WHERE VAN_KEY = :vanKey
		]]>
	</statement>

	<!-- 승인(Detail)를 추가한다. -->
	<statement name="insertVanDetail" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertVanDetail */
		<![CDATA[
INSERT INTO FSP_PO_SP_VAN_DTL
(
 VAN_KEY,
 VAN_REF_KEY,
 ASSIGN_CLASS,
 PAY_METHOD,
 ASSIGN_TYPE,
 INST_PERIOD,
 CARD_CLASS,
 CARD_COMP,
 CARD_NUM_ENC,
 VALID_THRU_YY,
 VALID_THRU_MM,
 CASH_ASSIGN_NUM_ENC,
 REQ_LENGTH,
 REQ_TRAN_TYPE,
 REQ_TRAN_CLASS,
 REQ_TR_ID,
 REQ_SEQ,
 REQ_POS_MODE,
 REQ_TRACK_DATA,
 REQ_AMT,
 REQ_SVR_CHARGE,
 REQ_VAT,
 REQ_PERIOD,
 REQ_DATE,
 REQ_TIME,
 REQ_CONFIRM_YN,
 REQ_PWD,
 REQ_ORG_DATE,
 REQ_ORG_SEQ_NO,
 REQ_ORG_APR_NO,
 REQ_USER_INFO1,
 REQ_USER_INFO2,
 REQ_USER_INFO3,
 REQ_HANWHA,
 RES_LENGTH,
 RES_TRAN_TYPE,
 RES_TRAN_CLASS,
 RES_TR_ID,
 RES_SEQ_NO,
 RES_DATE,
 RES_TIME,
 RES_CODE,
 RES_APR_NO,
 RES_ISSUE_CODE,
 RES_ISSUE_NAME,
 RES_BUY_CODE,
 RES_BUY_NAME,
 RES_MEMB_NO,
 RES_MSG1,
 RES_MSG2,
 RES_ENC_KEY,
 RES_HANWHA,
 VAN_ID,
 CREATE_DATE,
 CREATE_BY,
 UPDATE_DATE,
 UPDATE_BY
) VALUES (
 :vanKey,
 :vanRefKey,
<#if assignClass?has_content> :assignClass, <#else> NULL, </#if>
<#if payMethod?has_content> :payMethod, <#else> NULL, </#if>
<#if assignType?has_content> :assignType, <#else> NULL, </#if>
<#if instPeriod?has_content> CASE WHEN LENGTH(:instPeriod) < 2 THEN '0' || :instPeriod ELSE :instPeriod END, <#else> NULL, </#if>
<#if cardClass?has_content> :cardClass, <#else> NULL, </#if>
<#if cardComp?has_content> :cardComp, <#else> NULL, </#if>
<#if cardNumEnc?has_content> SCC_CRYPTO.ENC_FUN(REPLACE(:cardNumEnc, '-', '')), <#else> NULL, </#if>
<#if validThruYy?has_content> :validThruYy, <#else> NULL, </#if>
<#if validThruMm?has_content> :validThruMm, <#else> NULL, </#if>
<#if cashAssignNumEnc?has_content> SCC_CRYPTO.ENC_FUN(:cashAssignNumEnc), <#else> NULL, </#if>
<#if reqLength?has_content> :reqLength, <#else> NULL, </#if>
<#if reqTranType?has_content> :reqTranType, <#else> NULL, </#if>
<#if reqTranClass?has_content> :reqTranClass, <#else> NULL, </#if>
<#if reqTrId?has_content> :reqTrId, <#else> NULL, </#if>
<#if reqSeq?has_content> :reqSeq, <#else> NULL, </#if>
<#if reqPosMode?has_content> :reqPosMode, <#else> NULL, </#if>
<#if reqTrackData?has_content> SCC_CRYPTO.ENC_FUN(:reqTrackData), <#else> NULL, </#if>
<#if reqAmt?has_content> :reqAmt, <#else> NULL, </#if>
<#if reqSvrCharge?has_content> :reqSvrCharge, <#else> NULL, </#if>
<#if reqVat?has_content> :reqVat, <#else> NULL, </#if>
<#if reqPeriod?has_content> :reqPeriod, <#else> NULL, </#if>
<#if reqDate?has_content> :reqDate, <#else> NULL, </#if>
<#if reqTime?has_content> :reqTime, <#else> NULL, </#if>
<#if reqConfirmYn?has_content> :reqConfirmYn, <#else> NULL, </#if>
<#if reqPwd?has_content> SCC_CRYPTO.ONEWAY_ENC_FUN(:reqPwd), <#else> NULL, </#if>
<#if reqOrgDate?has_content> :reqOrgDate, <#else> NULL, </#if>
<#if reqOrgSeqNo?has_content> :reqOrgSeqNo, <#else> NULL, </#if>
<#if reqOrgAprNo?has_content> :reqOrgAprNo, <#else> NULL, </#if>
<#if reqUserInfo1?has_content> :reqUserInfo1, <#else> NULL, </#if>
<#if reqUserInfo2?has_content> :reqUserInfo2, <#else> NULL, </#if>
<#if reqUserInfo3?has_content> :reqUserInfo3, <#else> NULL, </#if>
<#if reqHanwha?has_content> :reqHanwha, <#else> NULL, </#if>
<#if resLength?has_content> :resLength, <#else> NULL, </#if>
<#if resTranType?has_content> :resTranType, <#else> NULL, </#if>
<#if resTranClass?has_content> :resTranClass, <#else> NULL, </#if>
<#if resTrId?has_content> :resTrId, <#else> NULL, </#if>
<#if resSeqNo?has_content> :resSeqNo, <#else> NULL, </#if>
<#if resDate?has_content> :resDate, <#else> NULL, </#if>
<#if resTime?has_content> :resTime, <#else> NULL, </#if>
<#if resCode?has_content> :resCode, <#else> NULL, </#if>
<#if resAprNo?has_content> :resAprNo, <#else> NULL, </#if>
<#if resIssueCode?has_content> :resIssueCode, <#else> NULL, </#if>
<#if resIssueName?has_content> :resIssueName, <#else> NULL, </#if>
<#if resBuyCode?has_content> :resBuyCode, <#else> NULL, </#if>
<#if resBuyName?has_content> :resBuyName, <#else> NULL, </#if>
<#if resMembNo?has_content> :resMembNo, <#else> NULL, </#if>
<#if resMsg1?has_content> :resMsg1, <#else> NULL, </#if>
<#if resMsg2?has_content> :resMsg2, <#else> NULL, </#if>
<#if resEncKey?has_content> :resEncKey, <#else> NULL, </#if>
<#if resHanwha?has_content> :resHanwha, <#else> NULL, </#if>
 :vanId,
 SYSDATE,
 :sabun,
 SYSDATE,
 :sabun
) 
		]]>
	</statement>

	<!-- 승인(Detail)를 수정한다. -->
	<statement name="updateVanDetail" type="update">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.updateVanDetail */
		<![CDATA[
UPDATE FSP_PO_SP_VAN_DTL SET
 UPDATE_DATE = SYSDATE,
 ASSIGN_CLASS = <#if assignClass?has_content> :assignClass, <#else> NULL, </#if>
 PAY_METHOD = <#if payMethod?has_content> :payMethod, <#else> NULL, </#if>
 ASSIGN_TYPE = <#if assignType?has_content> :assignType, <#else> NULL, </#if>
 INST_PERIOD = <#if instPeriod?has_content> :instPeriod, <#else> NULL, </#if>
 CARD_CLASS = <#if cardClass?has_content> :cardClass <#else> NULL,, </#if>
 CARD_COMP = <#if cardComp?has_content> :cardComp, <#else> NULL, </#if>
 CARD_NUM_ENC = <#if cardNumEnc?has_content> SCC_CRYPTO.ENC_FUN(REPLACE(:cardNumEnc, '-', '')), <#else> NULL, </#if>
 VALID_THRU_YY = <#if validThruYy?has_content> :validThruYy, <#else> NULL, </#if>
 VALID_THRU_MM = <#if validThruMm?has_content> :validThruMm, <#else> NULL, </#if>
 CASH_ASSIGN_NUM_ENC = <#if cashAssignNumEnc?has_content> SCC_CRYPTO.ENC_FUN(:cashAssignNumEnc), <#else> NULL, </#if>
 REQ_LENGTH = <#if reqLength?has_content> :reqLength, <#else> NULL, </#if>
 REQ_TRAN_TYPE = <#if reqTranType?has_content> :reqTranType, <#else> NULL, </#if>
 REQ_TRAN_CLASS = <#if reqTranClass?has_content> :reqTranClass, <#else> NULL, </#if>
 REQ_TR_ID = <#if reqTrId?has_content> :reqTrId, <#else> NULL, </#if>
 REQ_SEQ = <#if reqSeq?has_content> :reqSeq, <#else> NULL, </#if>
 REQ_POS_MODE = <#if reqPosMode?has_content> :reqPosMode, <#else> NULL, </#if>
 REQ_TRACK_DATA = <#if reqTrackData?has_content> SCC_CRYPTO.ENC_FUN(:reqTrackData), <#else> NULL, </#if>
 REQ_AMT = <#if reqAmt?has_content> :reqAmt, <#else> NULL, </#if>
 REQ_SVR_CHARGE = <#if reqSvrCharge?has_content> :reqSvrCharge, <#else> NULL, </#if>
 REQ_VAT = <#if reqVat?has_content> :reqVat, <#else> NULL, </#if>
 REQ_PERIOD = <#if reqPeriod?has_content> :reqPeriod, <#else> NULL, </#if>
 REQ_DATE = <#if reqDate?has_content> :reqDate, <#else> NULL, </#if>
 REQ_TIME = <#if reqTime?has_content> :reqTime, <#else> NULL, </#if>
 REQ_CONFIRM_YN = <#if reqConfirmYn?has_content> :reqConfirmYn, <#else> NULL, </#if>
 REQ_PWD = <#if reqPwd?has_content> SCC_CRYPTO.ONEWAY_ENC_FUN(:reqPwd), <#else> NULL, </#if>
 REQ_ORG_DATE = <#if reqOrgDate?has_content> :reqOrgDate, <#else> NULL, </#if>
 REQ_ORG_SEQ_NO = <#if reqOrgSeqNo?has_content> :reqOrgSeqNo, <#else> NULL, </#if>
 REQ_ORG_APR_NO = <#if reqOrgAprNo?has_content> :reqOrgAprNo, <#else> NULL, </#if>
 REQ_USER_INFO1 = <#if reqUserInfo1?has_content> :reqUserInfo1, <#else> NULL, </#if>
 REQ_USER_INFO2 = <#if reqUserInfo2?has_content> :reqUserInfo2, <#else> NULL, </#if>
 REQ_USER_INFO3 = <#if reqUserInfo3?has_content> :reqUserInfo3, <#else> NULL, </#if>
 REQ_HANWHA = <#if reqHanwha?has_content> :reqHanwha, <#else> NULL, </#if>
 RES_LENGTH = <#if resLength?has_content> :resLength, <#else> NULL, </#if>
 RES_TRAN_TYPE = <#if resTranType?has_content>:resTranType, <#else> NULL, </#if>
 RES_TRAN_CLASS = <#if resTranClass?has_content> :resTranClass, <#else> NULL, </#if>
 RES_TR_ID = <#if resTrId?has_content> :resTrId, <#else> NULL, </#if>
 RES_SEQ_NO = <#if resSeqNo?has_content> :resSeqNo, <#else> NULL, </#if>
 RES_DATE = <#if resDate?has_content> :resDate, <#else> NULL, </#if>
 RES_TIME = <#if resTime?has_content> :resTime, <#else> NULL, </#if>
 RES_CODE = <#if resCode?has_content> :resCode, <#else> NULL, </#if>
 RES_APR_NO = <#if resAprNo?has_content> :resAprNo, <#else> NULL, </#if>
 RES_ISSUE_CODE = <#if resIssueCode?has_content> :resIssueCode, <#else> NULL, </#if>
 RES_ISSUE_NAME = <#if resIssueName?has_content> :resIssueName, <#else> NULL, </#if>
 RES_BUY_CODE = <#if resBuyCode?has_content> :resBuyCode, <#else> NULL, </#if>
 RES_BUY_NAME = <#if resBuyName?has_content> :resBuyName, <#else> NULL, </#if>
 RES_MEMB_NO = <#if resMembNo?has_content> :resMembNo, <#else> NULL, </#if>
 RES_MSG1 = <#if resMsg1?has_content> :resMsg1, <#else> NULL, </#if>
 RES_MSG2 = <#if resMsg2?has_content> :resMsg2, <#else> NULL, </#if>
 RES_ENC_KEY = <#if resEncKey?has_content> :resEncKey, <#else> NULL, </#if>
 RES_HANWHA = <#if resHanwha?has_content> :resHanwha, <#else> NULL, </#if>
 VAN_ID = :vanId,
 UPDATE_BY = :sabun
WHERE  VAN_KEY = :vanKey
AND    VAN_REF_KEY = :vanRefKey
		]]>
	</statement>

	<!-- 승인 주문정보를 추가한다. -->
	<statement name="insertSaleVan" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertSaleVan */
		<![CDATA[
INSERT INTO FSP_PO_SP_SALE_VAN
(
 VAN_KEY,
 VAN_REF_KEY,
 SP_ID,
 APR_AMT,
 CREATE_DATE,
 CREATE_BY,
 UPDATE_DATE,
 UPDATE_BY
) VALUES (
 :vanKey,
 :vanRefKey,
 :spId,
 :aprAmt,
 SYSDATE,
 :sabun,
 SYSDATE,
 :sabun
)
		]]>
	</statement>

	<!-- 승인 주문정보를 삭제한다. -->
	<statement name="deleteSaleVan" type="delete">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.deleteSaleVan */
		<![CDATA[
DELETE
FROM   FSP_PO_SP_SALE_VAN
WHERE  VAN_KEY = :vanKey
AND    VAN_REF_KEY = :vanRefKey
AND    SP_ID = :spId
		]]>
	</statement>

	<!-- 결제정보를 조회한다. -->
	<statement name="selectVanDtl" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectVanDtl */
		<![CDATA[
SELECT A.VAN_KEY,
       A.VAN_REF_KEY,
       A.ASSIGN_CLASS,
       A.PAY_METHOD,
       A.ASSIGN_TYPE,
       A.INST_PERIOD,
       A.CARD_CLASS,
       A.CARD_COMP,
       REPLACE(SCC_CRYPTO.DEC_FUN(A.CARD_NUM_ENC), '-', '') AS CARD_NUM_ENC,
       A.VALID_THRU_YY,
       A.VALID_THRU_MM,
       REPLACE(SCC_CRYPTO.DEC_FUN(A.CASH_ASSIGN_NUM_ENC), '-', '') AS CASH_ASSIGN_NUM_ENC,
       A.REQ_LENGTH,
       A.REQ_TRAN_TYPE,
       A.REQ_TRAN_CLASS,
       A.REQ_TR_ID,
       A.REQ_SEQ,
       A.REQ_POS_MODE,
       A.REQ_TRACK_DATA,
       CASE WHEN A.ASSIGN_TYPE = '승인거래' THEN TO_NUMBER(A.REQ_AMT) ELSE TO_NUMBER(A.REQ_AMT) * -1 END REQ_AMT,
       A.REQ_SVR_CHARGE,
       CASE WHEN A.ASSIGN_TYPE = '승인거래' THEN TO_NUMBER(A.REQ_VAT) ELSE TO_NUMBER(A.REQ_VAT) * -1 END REQ_VAT,
       A.REQ_PERIOD,
       A.REQ_DATE,
       A.REQ_TIME,
       A.REQ_CONFIRM_YN,
       A.REQ_PWD,
       A.REQ_ORG_DATE,
       A.REQ_ORG_SEQ_NO,
       A.REQ_ORG_APR_NO,
       A.REQ_USER_INFO1,
       A.REQ_USER_INFO2,
       A.REQ_USER_INFO3,
       A.REQ_HANWHA,
       A.RES_LENGTH,
       A.RES_TRAN_TYPE,
       A.RES_TRAN_CLASS,
       A.RES_TR_ID,
       A.RES_SEQ_NO,
       CASE WHEN LENGTH(TRIM(A.RES_DATE)) = 8 THEN A.RES_DATE ELSE '20' || A.RES_DATE END RES_DATE,
       CASE WHEN LENGTH(TRIM(A.RES_TIME)) = 6 THEN A.RES_TIME ELSE A.RES_TIME || '00' END RES_TIME,
       A.RES_CODE,
       A.RES_APR_NO,
       A.RES_ISSUE_CODE,
       A.RES_ISSUE_NAME,
       A.RES_BUY_CODE,
       A.RES_BUY_NAME,
       A.RES_MEMB_NO,
       A.RES_MSG1,
       A.RES_MSG2,
       A.RES_ENC_KEY,
       A.RES_HANWHA,
       A.ACTION_MARK
FROM   FSP_PO_SP_VAN_DTL A
WHERE  VAN_KEY = :vanKey
ORDER BY CASE WHEN LENGTH(TRIM(A.RES_DATE)) = 8 THEN A.RES_DATE ELSE '20' || A.RES_DATE END DESC, CASE WHEN LENGTH(TRIM(A.RES_TIME)) = 6 THEN A.RES_TIME ELSE A.RES_TIME || '00' END DESC
		]]>
	</statement>

	<statement name="selectSaleVan" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectSaleVan */
		<![CDATA[
SELECT A.VAN_KEY
     , A.VAN_REF_KEY
     , A.SP_ID
     , A.APR_AMT
     , A.APR_AMT AS TARGET_AMOUNT
     , B.ITEM_CODE
     , C.ITEM_NAME
  FROM FSP_PO_SP_SALE_VAN A
     , FSP_PO_SPECIAL_SALE B
     , HLDC_PO_ITEM_MST C
 WHERE B.SP_ID = A.SP_ID
   AND C.ITEM_CODE = B.ITEM_CODE
   AND A.VAN_KEY = :vanKey
   AND A.VAN_REF_KEY = :vanRefKey
		]]>
	</statement>

	<statement name="updateActionMark" type="update">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.updateActionMark */
		<![CDATA[
UPDATE FSP_PO_SP_VAN_DTL
   SET ACTION_MARK = :actionMark
     , UPDATE_DATE = SYSDATE
     , UPDATE_BY = :sabun
 WHERE VAN_KEY = :vanKey
<#if vanRefKey?has_content>
   AND VAN_REF_KEY = :vanRefKey
<#else>
   AND ASSIGN_TYPE = '취소거래'
   AND ACTION_MARK = 'A'
</#if>
   
		]]>
	</statement>

	<!-- 정산대상 -->
	<statement name="selectExactTarget" type="select">
		/*+ [ISA0202] com.hwfs.ei.isa.dao.FsspExactDAO.selectExactTarget */
		<![CDATA[
SELECT A.SP_ID AS SP_ID 
     , C.BARCODE AS ITEM_CODE
     , C.ITEM_CLASS4 AS CLASS_CODE
     , C.ITEM_CODE AS INSTORE_CODE
     , C.ITEM_NAME AS ITEM_NAME
     , CASE WHEN LENGTHB(C.ITEM_NAME) > 17 THEN SUBSTRB(C.ITEM_NAME, 1, 16) ELSE RPAD(C.ITEM_NAME, 16, ' ') END ||
       LPAD(TRIM(TO_CHAR(A.SALE_PRICE, '999,999')), 6, ' ') ||
       LPAD(A.PR_QTY, 4, ' ') ||
       LPAD(TRIM(TO_CHAR(A.SALE_AMOUNT, '9,999,999')), 11, ' ') AS PRT_TIT
     , A.SALE_PRICE AS PRICE
     , CASE C.TAX_CODE
          WHEN '100' THEN '1'
          WHEN '210' THEN '0'
          ELSE '0' END TAX_FLAG
     , A.PR_QTY AS QUANTITY
     , A.PR_QTY AS CANCEL_QTY
     , CASE WHEN NVL(B.QTY_DC_STD, 0) > 0 OR NVL(B.AMT_DC_STD, 0) > 0 THEN 'Y' ELSE 'N' END AS DISCOUNT_FLAG
     , NVL(E.APY_DC_RATE, 0) AS DISCOUNT_RATE 
     , A.SALE_PRICE * (NVL(E.APY_DC_RATE, 0)/100) AS DISCOUNT_PRICE
     , A.DC_AMOUNT AS DISCOUNT_AMOUNT
     , B.UNIT_PRICE AS ORIGIN_PRICE
     , A.SALE_AMOUNT - A.DC_AMOUNT AS SUB_TOTAL
     , A.SALE_AMOUNT - A.DC_AMOUNT AS TOTAL
     , CASE WHEN C.TAX_CODE = '100' THEN ROUND((A.SALE_AMOUNT - A.DC_AMOUNT) / 1.1, 0) ELSE A.SALE_AMOUNT - A.DC_AMOUNT END AS FREE_AMOUNT
     , CASE WHEN C.TAX_CODE = '100' THEN TRUNC((A.SALE_AMOUNT - A.DC_AMOUNT) - ((A.SALE_AMOUNT - A.DC_AMOUNT) / 1.1), 0) ELSE 0 END AS TAX_AMOUNT
     , A.SALE_AMOUNT
     , A.RQ_SABUN AS EMP_NUMBER
     , E.RQ_NAME AS EMP_NAME
     , CASE WHEN A.PAY_METHOD = 'Z' THEN 'I' ELSE 'N' END TRAN_FLAG
  FROM FSP_PO_SPECIAL_SALE A
     , FSP_PO_SPECIAL_ITEM B
     , HLDC_PO_ITEM_MST C 
     , IF_FS_SP_SALE_DAILY D
     , FSP_PO_SP_SALE_INFO E
 WHERE A.ITEM_CODE = B.ITEM_CODE 
   AND A.ITEM_CODE = C.ITEM_CODE 
   AND A.SP_ID= D.SP_ID(+)
   AND E.SP_ID = A.SP_ID
   AND A.LINE_STATUS <> '취소'
<#if vanKey?has_content>
   AND A.VAN_KEY = :vanKey
</#if>
<#if seasonNum?has_content>
   AND A.SEASON_NUM = :seasonNum
   AND B.SEASON_NUM = :seasonNum
</#if>
<#if spDate?has_content>
   AND A.SP_DATE = :spDate
</#if>
<#if prSabun?has_content>
   AND A.PR_SABUN = :prSabun
</#if>
<#if rqSabun?has_content>
   AND A.RQ_SABUN = :rqSabun
</#if>
<#if payMethod?has_content>
   AND A.PAY_METHOD = :payMethod
</#if>
<#if brchCd == "1300">
   AND E.RQ_BRCH_CD IN ('1300', '0000')
<#else>
   AND E.RQ_BRCH_CD = :brchCd
</#if>
<#if cardComp?has_content>
   AND A.CARD_COMP = :cardComp
</#if>
<#if cardNumEnc?has_content>
   AND A.CARD_NUM_ENC = SCC_CRYPTO.ENC_FUN(:cardNumEnc)
</#if>
<#if instPeriod?has_content>
   AND A.INST_PERIOD = :instPeriod
</#if>
 ORDER BY A.SP_ID
		]]>
	</statement>

	<!-- 정산대상 -->
	<statement name="selectExactVan" type="select">
		/*+ [ISA0202] com.hwfs.ei.isa.dao.FsspExactDAO.selectExactVan */
		<![CDATA[
SELECT DISTINCT A.VAN_KEY
  FROM FSP_PO_SPECIAL_SALE A
     , FSP_PO_SPECIAL_ITEM B
     , HLDC_PO_ITEM_MST C 
     , IF_FS_SP_SALE_DAILY D
     , FSP_PO_SP_SALE_INFO E
 WHERE A.ITEM_CODE = B.ITEM_CODE 
   AND A.ITEM_CODE = C.ITEM_CODE 
   AND A.SP_ID= D.SP_ID(+)
   AND E.SP_ID = A.SP_ID
   AND A.LINE_STATUS <> '취소'
<#if seasonNum?has_content>
   AND A.SEASON_NUM = :seasonNum
   AND B.SEASON_NUM = :seasonNum
</#if>
<#if spDate?has_content>
   AND A.SP_DATE = :spDate
</#if>
<#if prSabun?has_content>
   AND A.PR_SABUN = :prSabun
</#if>
<#if rqSabun?has_content>
   AND A.RQ_SABUN = :rqSabun
</#if>
<#if payMethod?has_content>
   AND A.PAY_METHOD = :payMethod
</#if>
<#if brchCd == "1300">
   AND E.RQ_BRCH_CD IN ('1300', '0000')
<#else>
   AND E.RQ_BRCH_CD = :brchCd
</#if>
<#if cardComp?has_content>
   AND A.CARD_COMP = :cardComp
</#if>
<#if cardNumEnc?has_content>
   AND A.CARD_NUM_ENC = SCC_CRYPTO.ENC_FUN(:cardNumEnc)
</#if>
<#if instPeriod?has_content>
   AND A.INST_PERIOD = :instPeriod
</#if>
		]]>
	</statement>

	<!-- 정산대상 -->
	<statement name="selectExactVanDtl" type="select">
		/*+ [ISA0202] com.hwfs.ei.isa.dao.FsspExactDAO.selectExactVanDtl */
		<![CDATA[
SELECT CASE WHEN ASSIGN_TYPE = '승인거래' THEN 'N' ELSE 'R' END AS TRAN_FLAG
     , CASE WHEN ASSIGN_CLASS = 'CASH' THEN '1' ELSE '2' END AS TENDER_FLAG
     , CASE WHEN ASSIGN_CLASS = 'CASH' THEN '현금' ELSE '타사카드' END AS TENDER_NAME
     , TO_NUMBER(REQ_AMT) + TO_NUMBER(REQ_VAT) AS RECEIVE_AMOUNT
     , TO_NUMBER(REQ_AMT) + TO_NUMBER(REQ_VAT) AS REAL_AMOUNT
     , CASE WHEN ASSIGN_TYPE = '승인거래' THEN '1' ELSE '-1' END AS SIGN
     , VAN_ID
     , CASE WHEN ASSIGN_CLASS = 'CARD' THEN ROWNUM ELSE NULL END AS SLIP_NUMBER
     , SCC_CRYPTO.DEC_FUN(CARD_NUM_ENC) AS CARD_NUMBER
     , RES_DATE AS ACTIVE_DATE
     , REQ_PERIOD AS HALBU_MONTH
     , NULL AS PASSWORD
     , 'M' AS APPROVAL_FLAG
     , RES_APR_NO AS APPROVAL_CODE
     , RES_SEQ_NO AS VAN_SEQ
     , RES_DATE AS SALE_DATE
     , RES_TIME AS SALE_TIME
     , REQ_ORG_APR_NO AS PRE_APPROVAL_CODE
     , REQ_ORG_DATE AS PRE_SALE_DATE
     , REQ_ORG_SEQ_NO AS PRE_VAN_SEQ
     , 'K' AS INPUT_FLAG
     , REQ_TRACK_DATA AS INPUT_DATA
     , RES_BUY_NAME AS CARD_NAME
     , RES_BUY_CODE AS CARD_SA_CD
     , RES_TR_ID AS MACH_NUM
     , RES_ISSUE_CODE AS CARD_MAKE_CD
     , RES_ISSUE_NAME AS CARD_MAKE_NAME
     , RES_BUY_CODE AS CARD_BUY_CD
     , RES_BUY_NAME AS CARD_BUY_NAME
     , RES_MEMB_NO AS AFFILIATE
     , RES_CODE AS RETURN_CD
     , RES_MSG1 AS MESSAGE1
     , RES_MSG2 AS MESSAGE2
     , NULL AS ESIGN
     , 'Y' AS ENCRYPT_YN
     , TRIM(TO_CHAR(TO_NUMBER(REQ_AMT) + TO_NUMBER(REQ_VAT), '9,999,999')) AS VIEW_AMOUNT
  FROM FSP_PO_SP_VAN_DTL 
 WHERE VAN_KEY = :vanKey
   AND ASSIGN_TYPE = :assignType
   AND ACTION_MARK = 'A'
 ORDER BY ASSIGN_CLASS DESC
		]]>
	</statement>


	<statement name="selectPrintData1" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectPrintData1 */
		<![CDATA[
SELECT LPAD('=', 38, '=') AS LINE1
     , '담당자 : ' || :userName || LPAD(:instPlac, (27-LENGTHB(:userName)), ' ') AS TIT1
     , 'P O S  : ' || :posNo || ' - ' || LPAD(:receiptNo, 4, '0') || LPAD(TO_CHAR(TO_DATE(:saleDate, 'YYYYMMDD'), 'YYYY/MM/DD'), 16, ' ') AS TIT2
     , '상  품  명      단  가 수량     금  액' AS TIT3
     , LPAD('-', 38, '-') AS LINE2
  FROM DUAL
		]]>
	</statement>

	<statement name="selectPrintData2" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectPrintData2 */
		<![CDATA[
SELECT '합  계 : ' || LPAD(TRIM(TO_CHAR(:saleAmount, '9,999,999')), 9, ' ') AS TIT1
     , '할  인 : ' || LPAD(TRIM(TO_CHAR(:dcAmount, '9,999,999')), 9, ' ') AS TIT2
     , '공급가 : ' || LPAD(TRIM(TO_CHAR(:netAmount, '9,999,999')), 9, ' ') AS TIT3
     , '부가세 : ' || LPAD(TRIM(TO_CHAR(:vatAmount, '9,999,999')), 9, ' ') AS TIT4
     , '받은돈 : ' || LPAD(TRIM(TO_CHAR(:totAmount, '9,999,999')), 9, ' ') AS TIT5
  FROM DUAL
		]]>
	</statement>

	<statement name="selectPrintData3" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectPrintData3 */
		<![CDATA[
SELECT :tit || ' : ' || LPAD(TRIM(TO_CHAR(:amount, '9,999,999')), 27, ' ') AS TIT
  FROM DUAL
		]]>
	</statement>

	<statement name="selectCardRegiData" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectCardRegiData */
		<![CDATA[
SELECT RES_BUY_CODE 
     , RES_BUY_NAME
     , COUNT(*) AS CNT
     , SUM(REQ_AMT) + SUM(REQ_VAT) AS AMOUNT
  FROM FSP_PO_SP_VAN_DTL 
 WHERE VAN_KEY IN (:vanKeys)
   AND ASSIGN_TYPE = :assignType
   AND ASSIGN_CLASS = 'CARD'
   AND ACTION_MARK = 'A'
 GROUP BY RES_BUY_NAME, RES_BUY_CODE
		]]>
	</statement>

	<statement name="updateLineStatus" type="update">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.updateLineStatus */
		<![CDATA[
UPDATE FSP_PO_SPECIAL_SALE
   SET LINE_STATUS = :lineStatus
     , BILL_NO = :posNo ||'-'||LPAD(:receiptNo, 4, '0')
 WHERE SP_ID = :spId
		]]>
	</statement>

	<!-- 영수증번호가져오기 -->
	<statement name="selectReceiptNo" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectReceiptNo */
		<![CDATA[
SELECT NVL(MAX(RECEIPT_NO), 0) AS INT_RECEIPT_NO
FROM   FSP_PO_IRIS_REGI_HDR
WHERE  SALE_DATE = :saleDate
AND    BRCH_CD = :brchCd
AND    LOC_CD = :locCd
AND    POS_NO = :posNo
		]]>
	</statement>

	<statement name="selectExistsRegiHdr" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectExistsRegiHdr */
		<![CDATA[
SELECT COUNT(*) AS CNT
FROM   FSP_PO_IRIS_REGI_HDR
WHERE  SALE_DATE = :saleDate
AND    BRCH_CD = :brchCd
AND    LOC_CD = :locCd
AND    POS_NO = :posNo
		]]>
	</statement>

	<statement name="insertRegiHdr" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertRegiHdr */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_REGI_HDR
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 BRCH_NM,
 LOC_NM,
 POS_NM,
 OPEN_FLAG,
 OPEN_DATE,
 OPEN_TIME,
 OPEN_SEQ,
 CLOSE_FLAG,
 CLOSE_DATE,
 CLOSE_TIME,
 CLOSE_SEQ,
 USER_ID,
 UPDATE_DATE,
 UPDATE_TIME,
 RECEIPT_NO,
 SEND_RECEIPT_NO,
 CREDIT_SLIP_NO,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
<#if brchNm?has_content> :brchNm, <#else> NULL, </#if>
<#if locNm?has_content> :locNm, <#else> NULL, </#if>
<#if posNm?has_content> :posNm, <#else> NULL, </#if>
<#if openFlag?has_content> :openFlag, <#else> NULL, </#if>
<#if openDate?has_content> :openDate, <#else> NULL, </#if>
<#if openTime?has_content> :openTime, <#else> NULL, </#if>
<#if openSeq?has_content> :openSeq, <#else> NULL, </#if>
<#if closeFlag?has_content> :closeFlag, <#else> NULL, </#if>
<#if closeDate?has_content> :closeDate, <#else> NULL, </#if>
<#if closeTime?has_content> :closeTime, <#else> NULL, </#if>
<#if closeSeq?has_content> :closeSeq, <#else> NULL, </#if>
<#if userId?has_content> :userId, <#else> NULL, </#if>
<#if updateDate?has_content> :updateDate, <#else> NULL, </#if>
<#if updateTime?has_content> :updateTime, <#else> NULL, </#if>
<#if receiptNo?has_content> :receiptNo, <#else> NULL, </#if>
<#if sendReceiptNo?has_content> :sendReceiptNo, <#else> NULL, </#if>
<#if creditSlipNo?has_content> :creditSlipNo, <#else> NULL, </#if>
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
)
		]]>
	</statement>

	<statement name="updateRegiHdr" type="update">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.updateRegiHdr */
		<![CDATA[
UPDATE FSP_PO_IRIS_REGI_HDR SET
       BRCH_NM =<#if brchNm?has_content> :brchNm,<#else> NULL, </#if>
       LOC_NM =<#if locNm?has_content> :locNm,<#else> NULL, </#if>
       POS_NM =<#if posNm?has_content> :posNm,<#else> NULL, </#if>
       OPEN_FLAG =<#if openFlag?has_content> :openFlag,<#else> NULL, </#if>
       OPEN_DATE =<#if openDate?has_content> :openDate,<#else> NULL, </#if>
       OPEN_TIME =<#if openTime?has_content> :openTime,<#else> NULL, </#if>
       OPEN_SEQ =<#if openSeq?has_content> :openSeq,<#else> NULL, </#if>
       CLOSE_FLAG =<#if closeFlag?has_content> :closeFlag,<#else> NULL, </#if>
       CLOSE_DATE =<#if closeDate?has_content> :closeDate,<#else> NULL, </#if>
       CLOSE_TIME =<#if closeTime?has_content> :closeTime,<#else> NULL, </#if>
       CLOSE_SEQ =<#if closeSeq?has_content> :closeSeq,<#else> NULL, </#if>
       USER_ID =<#if userId?has_content> :userId,<#else> NULL, </#if>
       UPDATE_DATE =<#if updateDate?has_content> :updateDate,<#else> NULL, </#if>
       UPDATE_TIME =<#if updateTime?has_content> :updateTime,<#else> NULL, </#if>
       RECEIPT_NO =<#if receiptNo?has_content> :receiptNo,<#else> NULL, </#if>
       SEND_RECEIPT_NO =<#if sendReceiptNo?has_content> :sendReceiptNo,<#else> NULL, </#if>
       CREDIT_SLIP_NO =<#if creditSlipNo?has_content> :creditSlipNo,<#else> NULL, </#if>
       UUSER = :sabun,
       UDATE = SYSDATE
WHERE  SALE_DATE = :saleDate
AND    BRCH_CD = :brchCd
AND    LOC_CD = :locCd
AND    POS_NO = :posNo
		]]>
	</statement>

	<statement name="selectExistsRegiUnit" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectExistsRegiUnit */
		<![CDATA[
SELECT COUNT(*) AS CNT
FROM   FSP_PO_IRIS_REGI_UNIT
WHERE  SALE_DATE = :saleDate
AND    BRCH_CD = :brchCd
AND    LOC_CD = :locCd
AND    POS_NO = :posNo
AND    UNIT_TYPE = :unitType
		]]>
	</statement>

	<statement name="insertRegiUnit" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertRegiUnit */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_REGI_UNIT
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 UNIT_TYPE,
 UNIT_TEXT,
 UNIT_COUNT,
 UNIT_AMT,
 UNIT_ENURI_AMT,
 UNIT_REAL_AMT,
 UNIT_SEQ,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
 :unitType,
<#if unitText?has_content> :unitText, <#else> NULL, </#if>
<#if unitCount?has_content> :unitCount, <#else> 0, </#if>
<#if unitAmt?has_content> :unitAmt, <#else> 0, </#if>
<#if unitEnuriAmt?has_content> :unitEnuriAmt, <#else> 0, </#if>
<#if unitRealAmt?has_content> :unitRealAmt, <#else> 0, </#if>
<#if unitSeq?has_content> :unitSeq, <#else> 0, </#if>
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
)
		]]>
	</statement>

	<statement name="updateRegiUnit" type="update">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.updateRegiUnit */
		<![CDATA[
UPDATE FSP_PO_IRIS_REGI_UNIT SET
       UNIT_TEXT =<#if unitText?has_content> :unitText,<#else> NULL, </#if>
       UNIT_COUNT =<#if unitCount?has_content> UNIT_COUNT + TO_NUMBER(:unitCount),<#else> UNIT_COUNT,</#if>
       UNIT_AMT =<#if unitAmt?has_content> UNIT_AMT + TO_NUMBER(:unitAmt),<#else> UNIT_AMT,</#if>
       UNIT_ENURI_AMT =<#if unitEnuriAmt?has_content> UNIT_ENURI_AMT + TO_NUMBER(:unitEnuriAmt),<#else> UNIT_ENURI_AMT,</#if>
       UNIT_REAL_AMT =<#if unitRealAmt?has_content> UNIT_REAL_AMT + TO_NUMBER(:unitRealAmt),<#else> UNIT_REAL_AMT,</#if>
       UNIT_SEQ =<#if unitSeq?has_content> :unitSeq,<#else> 0,</#if>
       UUSER = :sabun,
       UDATE = SYSDATE
WHERE  SALE_DATE = :saleDate
AND    BRCH_CD = :brchCd
AND    LOC_CD = :locCd
AND    POS_NO = :posNo
AND    UNIT_TYPE = :unitType
		]]>
	</statement>

	<statement name="selectExistsRegiUnitCard" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectExistsRegiUnitCard */
		<![CDATA[
SELECT COUNT(*) AS CNT
FROM   FSP_PO_IRIS_REGI_UNIT_CARD
WHERE  SALE_DATE = :saleDate
AND    BRCH_CD = :brchCd
AND    LOC_CD = :locCd
AND    POS_NO = :posNo
AND    UNIT_TYPE = :unitType
		]]>
	</statement>

	<statement name="insertRegiUnitCard" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertRegiUnitCard */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_REGI_UNIT_CARD
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 CREDIT_UNIT,
 UNIT_TYPE,
 UNIT_TEXT,
 UNIT_COUNT,
 UNIT_AMT,
 UNIT_ENURI_AMT,
 UNIT_REAL_AMT,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
 'Credit',
 :unitType,
<#if unitText?has_content> :unitText, <#else> NULL, </#if>
<#if unitCount?has_content> :unitCount, <#else> NULL, </#if>
<#if unitAmt?has_content> :unitAmt, <#else> NULL, </#if>
<#if unitEnuriAmt?has_content> :unitEnuriAmt, <#else> NULL, </#if>
<#if unitRealAmt?has_content> :unitRealAmt, <#else> NULL, </#if>
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
)
		]]>
	</statement>

	<statement name="updateRegiUnitCard" type="update">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.updateRegiUnitCard */
		<![CDATA[
UPDATE FSP_PO_IRIS_REGI_UNIT_CARD SET
       UNIT_TEXT =<#if unitText?has_content> :unitText,<#else> NULL,</#if>
       UNIT_COUNT =<#if unitCount?has_content> UNIT_COUNT + TO_NUMBER(:unitCount),<#else> UNIT_COUNT,</#if>
       UNIT_AMT =<#if unitAmt?has_content> UNIT_AMT + TO_NUMBER(:unitAmt),<#else> UNIT_AMT,</#if>
       UNIT_ENURI_AMT =<#if unitEnuriAmt?has_content> :unitEnuriAmt,<#else> NULL, </#if>
       UNIT_REAL_AMT =<#if unitRealAmt?has_content> UNIT_REAL_AMT + TO_NUMBER(:unitRealAmt),<#else> UNIT_REAL_AMT,</#if>
       UUSER = :sabun,
       UDATE = SYSDATE
WHERE  SALE_DATE = :saleDate
AND    BRCH_CD = :brchCd
AND    LOC_CD = :locCd
AND    POS_NO = :posNo
AND    CREDIT_UNIT = 'Credit'
AND    UNIT_TYPE = :unitType
		]]>
	</statement>

	<statement name="insertTranInfo" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertTranInfo */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_TRAN_INFO
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 RECEIPT_NO,
 BRCH_NM,
 LOC_NM,
 POS_NM,
 POS_OPEN_SEQ,
 USER_ID,
 DATE_TIME,
 LOG_FLAG,
 LOG_FLAG_NM,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
 :receiptNo,
<#if brchNm?has_content> :brchNm, <#else> NULL, </#if>
<#if locNm?has_content> :locNm, <#else> NULL, </#if>
<#if posNm?has_content> :posNm, <#else> NULL, </#if>
<#if posOpenSeq?has_content> :posOpenSeq, <#else> NULL, </#if>
 :sabun,
 SYSDATE,
<#if logFlag?has_content> :logFlag, <#else> NULL, </#if>
<#if logFlagNm?has_content> :logFlagNm, <#else> NULL, </#if>
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
)
		]]>
	</statement>

	<statement name="insertTranItems" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertTranItems */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_TRAN_ITEMS
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 RECEIPT_NO,
 ITEM_SEQ,
 TRAN_FLAG,
 ITEM_FLAG,
 ITEM_CODE,
 CLASS_CODE,
 INSTORE_CODE,
 ITEM_NAME,
 PRICE,
 CADY_YN,
 BOTTLE_CODE,
 BOTL_MNGM_YN,
 BOTL_YN,
 TAX_FLAG,
 QUANTITY,
 CANCEL_QTY,
 DISCOUNT_FLAG,
 DISCOUNT_RATE,
 DISCOUNT_PRICE,
 DISCOUNT_AMOUNT,
 SUB_DISCOUNT_AMOUNT,
 SUB_DISCOUNT_QTY,
 ORIGIN_PRICE,
 PRETEND_QTY,
 EVENT_FLAG,
 SUBTOTAL,
 TOTAL,
 TAX_AMOUNT,
 SERVICE_AMT,
 SERVICE_RATE,
 FREE_AMOUNT,
 CURRENCY_SIGN,
 WEIG_YN,
 POINT_TYPE,
 POINT_QTY,
 POINT_DC_AMT,
 POINT_AR_AMT,
 POINT_TRACK2,
 POINT_APPR_DATE,
 POINT_APPR_NO,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) (
SELECT
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
 :receiptNo,
 NVL(MAX(ITEM_SEQ), 0) + 1,
<#if tranFlag?has_content> :tranFlag, <#else> NULL, </#if>
<#if itemFlag?has_content> :itemFlag, <#else> NULL, </#if>
 :itemCode,
 :classCode,
 :instoreCode,
 :itemName,
 :price,
<#if cadyYn?has_content> :cadyYn, <#else> NULL, </#if>
<#if bottleCode?has_content> :bottleCode, <#else> NULL, </#if>
<#if botlMngmYn?has_content> :botlMngmYn, <#else> NULL, </#if>
<#if botlYn?has_content> :botlYn, <#else> NULL, </#if>
<#if taxFlag?has_content> :taxFlag, <#else> NULL, </#if>
<#if quantity?has_content> :quantity, <#else> NULL, </#if>
<#if cancelQty?has_content> :cancelQty, <#else> NULL, </#if>
<#if discountFlag?has_content> :discountFlag, <#else> NULL, </#if>
<#if discountRate?has_content> :discountRate, <#else> NULL, </#if>
<#if discountPrice?has_content> :discountPrice, <#else> NULL, </#if>
<#if discountAmount?has_content> :discountAmount, <#else> NULL, </#if>
<#if subDiscountAmount?has_content> :subDiscountAmount, <#else> NULL, </#if>
<#if subDiscountQty?has_content> :subDiscountQty, <#else> NULL, </#if>
<#if originPrice?has_content> :originPrice, <#else> NULL, </#if>
<#if pretendQty?has_content> :pretendQty, <#else> NULL, </#if>
<#if eventFlag?has_content> :eventFlag, <#else> NULL, </#if>
<#if subtotal?has_content> :subtotal, <#else> NULL, </#if>
<#if total?has_content> :total, <#else> NULL, </#if>
<#if taxAmount?has_content> :taxAmount, <#else> NULL, </#if>
<#if serviceAmt?has_content> :serviceAmt, <#else> NULL, </#if>
<#if serviceRate?has_content> :serviceRate, <#else> NULL, </#if>
<#if freeAmount?has_content> :freeAmount, <#else> NULL, </#if>
<#if currencySign?has_content> :currencySign, <#else> NULL, </#if>
<#if weigYn?has_content> :weigYn, <#else> NULL, </#if>
<#if pointType?has_content> :pointType, <#else> NULL, </#if>
<#if pointQty?has_content> :pointQty, <#else> NULL, </#if>
<#if pointDcAmt?has_content> :pointDcAmt, <#else> NULL, </#if>
<#if pointArAmt?has_content> :pointArAmt, <#else> NULL, </#if>
<#if pointTrack2?has_content> :pointTrack2, <#else> NULL, </#if>
<#if pointApprDate?has_content> :pointApprDate, <#else> NULL, </#if>
<#if pointApprNo?has_content> :pointApprNo, <#else> NULL, </#if>
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
FROM FSP_PO_IRIS_TRAN_ITEMS
WHERE SALE_DATE = :saleDate
  AND BRCH_CD = :brchCd
  AND LOC_CD = :locCd
  AND POS_NO = :posNo
  AND RECEIPT_NO = :receiptNo
)
		]]>
	</statement>

	<statement name="insertTranNode" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertTranNode */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_TRAN_NODE
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 RECEIPT_NO,
 TRAN_FLAG,
 TENDER_CD,
 OTHER_CD,
 PARTNER_CD,
 CUST_DIV,
 CUST_CODE,
 CC_ID_NO,
 GROUP_EVNT_CODE,
 AUTO_SALE_EQMT_CODE,
 CUST_ZONE,
 BUNDLE_CUST_CONT,
 HALL_TABLE_NO,
 REASON_CODE,
 PRE_RECEIPT_NO,
 TRAN_MEMO,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
 :receiptNo,
<#if tranFlag?has_content> :tranFlag, <#else> NULL, </#if>
<#if tenderCd?has_content> :tenderCd, <#else> NULL, </#if>
<#if otherCd?has_content> :otherCd, <#else> NULL, </#if>
<#if partnerCd?has_content> :partnerCd, <#else> NULL, </#if>
<#if custDiv?has_content> :custDiv, <#else> NULL, </#if>
<#if custCode?has_content> :custCode, <#else> NULL, </#if>
<#if ccIdNo?has_content> :ccIdNo, <#else> NULL, </#if>
<#if groupEvntCode?has_content> :groupEvntCode, <#else> NULL, </#if>
<#if autoSaleEqmtCode?has_content> :autoSaleEqmtCode, <#else> NULL, </#if>
<#if custZone?has_content> :custZone, <#else> NULL, </#if>
<#if bundleCustCont?has_content> :bundleCustCont, <#else> NULL, </#if>
<#if hallTableNo?has_content> :hallTableNo, <#else> NULL, </#if>
<#if reasonCode?has_content> :reasonCode, <#else> NULL, </#if>
<#if preReceiptNo?has_content> :preReceiptNo, <#else> NULL, </#if>
<#if tranMemo?has_content> :tranMemo, <#else> NULL, </#if>
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
)
		]]>
	</statement>

	<statement name="insertTranCard" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertTranCard */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_TRAN_CARD
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 RECEIPT_NO,
 SEQ,
 TRAN_FLAG,
 TENDER_FLAG,
 TENDER_NAME,
 RECEIVE_AMOUNT,
 REAL_AMOUNT,
 TENDER_SIGN,
 VAN_ID,
 SLIP_NUMBER,
 CARD_NUMBER,
 ACTIVE_DATE,
 HALBU_MONTH,
 PWD,
 APPROVAL_FLAG,
 APPROVAL_CODE,
 VAN_SEQ,
 APR_DATE,
 SALE_TIME,
 PRE_APPROVAL_CODE,
 PRE_SALE_DATE,
 PRE_VAN_SEQ,
 INPUT_FLAG,
 INPUT_DATA,
 CARD_NAME,
 CARD_SA_CD,
 MACH_NUM,
 CARD_MAKE_CD,
 CARD_MAKE_NAME,
 CARD_BUY_CD,
 CARD_BUY_NAME,
 AFFILIATE,
 RETURN_CD,
 MESSAGE1,
 MESSAGE2,
 ESIGN,
 ENCRYPT_YN,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
 :receiptNo,
 :seq,
 :tranFlag,
 :tenderFlag,
 :tenderName,
 :receiveAmount,
 :realAmount,
 :tenderSign,
 :vanId,
<#if slipNumber?has_content> :slipNumber, <#else> NULL, </#if>
<#if cardNumber?has_content> SCC_CRYPTO.ENC_FUN(:cardNumber), <#else> NULL, </#if>
<#if activeDate?has_content> :activeDate, <#else> NULL, </#if>
<#if halbuMonth?has_content> :halbuMonth, <#else> NULL, </#if>
<#if pwd?has_content> :pwd, <#else> NULL, </#if>
<#if approvalFlag?has_content> :approvalFlag, <#else> NULL, </#if>
<#if approvalCode?has_content> :approvalCode, <#else> NULL, </#if>
<#if vanSeq?has_content> :vanSeq, <#else> NULL, </#if>
<#if aprDate?has_content> :aprDate, <#else> NULL, </#if>
<#if saleTime?has_content> :saleTime, <#else> NULL, </#if>
<#if preApprovalCode?has_content> :preApprovalCode, <#else> NULL, </#if>
<#if preSaleDate?has_content> :preSaleDate, <#else> NULL, </#if>
<#if preVanSeq?has_content> :preVanSeq, <#else> NULL, </#if>
<#if inputFlag?has_content> :inputFlag, <#else> NULL, </#if>
<#if inputData?has_content> :inputData, <#else> NULL, </#if>
<#if cardName?has_content> :cardName, <#else> NULL, </#if>
<#if cardSaCd?has_content> :cardSaCd, <#else> NULL, </#if>
<#if machNum?has_content> :machNum, <#else> NULL, </#if>
<#if cardMakeCd?has_content> :cardMakeCd, <#else> NULL, </#if>
<#if cardMakeName?has_content> :cardMakeName, <#else> NULL, </#if>
<#if cardBuyCd?has_content> :cardBuyCd, <#else> NULL, </#if>
<#if cardBuyName?has_content> :cardBuyName, <#else> NULL, </#if>
<#if affiliate?has_content> :affiliate, <#else> NULL, </#if>
<#if returnCd?has_content> :returnCd, <#else> NULL, </#if>
<#if message1?has_content> :message1, <#else> NULL, </#if>
<#if message2?has_content> :message2, <#else> NULL, </#if>
<#if esign?has_content> :esign, <#else> NULL, </#if>
<#if encryptYn?has_content> :encryptYn, <#else> NULL, </#if>
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
)
		]]>
	</statement>

	<statement name="insertTranCash" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertTranCash */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_TRAN_CASH
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 RECEIPT_NO,
 SEQ,
 TRAN_FLAG,
 TENDER_FLAG,
 TENDER_NAME,
 RECEIVE_AMOUNT,
 REAL_AMOUNT,
 TENDER_SIGN,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
 :receiptNo,
 :seq,
 :tranFlag,
 :tenderFlag,
 :tenderName,
 :receiveAmount,
 :realAmount,
 :tenderSign,
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
)
		]]>
	</statement>

	<statement name="insertTranEmp" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertTranEmp */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_TRAN_EMP
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 RECEIPT_NO,
 SEQ,
 TRAN_FLAG,
 TENDER_FLAG,
 TENDER_NAME,
 RECEIVE_AMOUNT,
 REAL_AMOUNT,
 TENDER_SIGN,
 EMP_NUMBER,
 EMP_NAME,
 APPROVAL_FLAG,
 APPROVAL_CODE,
 AR_SAVE_DIV,
 STTL_NUMBER,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
 :receiptNo,
 :seq,
 :tranFlag,
 :tenderFlag,
 :tenderName,
 :receiveAmount,
 :realAmount,
 :tenderSign,
 :empNumber,
 :empName,
 :approvalFlag,
 :approvalCode,
 :arSaveDiv,
<#if sttlNumber?has_content> :sttlNumber, <#else> NULL, </#if>
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
)
		]]>
	</statement>

	<statement name="insertTranTeam" type="insert">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.insertTranTeam */
		<![CDATA[
INSERT INTO FSP_PO_IRIS_TRAN_TEAM
(
 SALE_DATE,
 BRCH_CD,
 LOC_CD,
 POS_NO,
 RECEIPT_NO,
 SEQ,
 TRAN_FLAG,
 TENDER_FLAG,
 TENDER_NAME,
 RECEIVE_AMOUNT,
 REAL_AMOUNT,
 TENDER_SIGN,
 TEAM_NUMBER,
 TEAM_NAME,
 APPROVAL_FLAG,
 PRE_APPROVAL_CODE,
 ERROR_MESSAGE,
 ORIGINAL_PRICE,
 IN_FLAG,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :saleDate,
 :brchCd,
 :locCd,
 :posNo,
 :receiptNo,
 :seq,
 :tranFlag,
 :tenderFlag,
 :tenderName,
 :receiveAmount,
 :realAmount,
 :tenderSign,
 :teamNumber,
 :teamName,
 :approvalFlag,
<#if preApprovalCode?has_content> :preApprovalCode, <#else> NULL, </#if>
<#if errorMessage?has_content> :errorMessage, <#else> NULL, </#if>
<#if originalPrice?has_content> :originalPrice, <#else> NULL, </#if>
<#if inFlag?has_content> :inFlag, <#else> NULL, </#if>
 :sabun,
 SYSDATE,
 :sabun,
 SYSDATE
)
		]]>
	</statement>

	<statement name="selectRegiXML" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectRegiXML */
		<![CDATA[
SELECT A.SALE_DATE
     , A.BRCH_CD
     , A.LOC_CD
     , A.POS_NO
     , A.BRCH_NM
     , A.LOC_NM
     , A.POS_NM
     , CASE WHEN A.OPEN_FLAG = '1' THEN 'true' ELSE 'false' END AS OPEN_FLAG
     , A.OPEN_DATE
     , A.OPEN_TIME
     , A.OPEN_SEQ
     , CASE WHEN A.CLOSE_FLAG = '1' THEN 'true' ELSE 'false' END AS CLOSE_FLAG
     , A.CLOSE_DATE
     , A.CLOSE_TIME
     , A.CLOSE_SEQ
     , A.USER_ID
     , :userName AS USER_NAME
     , A.UPDATE_DATE
     , A.UPDATE_TIME
     , A.RECEIPT_NO
     , A.SEND_RECEIPT_NO
     , A.CREDIT_SLIP_NO
     , B.UNIT_TYPE
     , B.UNIT_TEXT
     , B.UNIT_COUNT
     , B.UNIT_AMT
     , B.UNIT_ENURI_AMT
     , B.UNIT_REAL_AMT
     , B.UNIT_SEQ
  FROM FSP_PO_IRIS_REGI_HDR A
     , FSP_PO_IRIS_REGI_UNIT B
 WHERE B.SALE_DATE = A.SALE_DATE
   AND B.BRCH_CD = A.BRCH_CD
   AND B.LOC_CD = A.LOC_CD
   AND B.POS_NO = A.POS_NO
   AND A.SALE_DATE = :saleDate
   AND A.BRCH_CD = :brchCd
   AND A.LOC_CD = :locCd
   AND A.POS_NO = :posNo
 ORDER BY B.UNIT_SEQ
		]]>
	</statement>

	<statement name="selectRegiCardXML" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectRegiCardXML */
		<![CDATA[
SELECT UNIT_TYPE
     , UNIT_TEXT
     , UNIT_COUNT
     , UNIT_AMT
     , UNIT_ENURI_AMT
     , UNIT_REAL_AMT
   FROM FSP_PO_IRIS_REGI_UNIT_CARD
 WHERE SALE_DATE = :saleDate
   AND BRCH_CD = :brchCd
   AND LOC_CD = :locCd
   AND POS_NO = :posNo
   AND CREDIT_UNIT = 'Credit' 
 ORDER BY UNIT_TYPE
		]]>
	</statement>

	<statement name="selectTranHdr" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectTranHdr */
		<![CDATA[
SELECT A.SALE_DATE
     , A.BRCH_CD
     , A.LOC_CD
     , A.POS_NO
     , A.RECEIPT_NO
     , A.BRCH_NM
     , A.LOC_NM
     , A.POS_NM
     , A.POS_OPEN_SEQ
     , A.USER_ID
     , TO_CHAR(A.DATE_TIME, 'YYYYMMDDHH24MISS') AS DATE_TIME
     , A.LOG_FLAG
     , A.LOG_FLAG_NM
     , B.TRAN_FLAG
     , B.TENDER_CD
  FROM FSP_PO_IRIS_TRAN_INFO A
     , FSP_PO_IRIS_TRAN_NODE B
 WHERE B.SALE_DATE = A.SALE_DATE
   AND B.BRCH_CD = A.BRCH_CD
   AND B.LOC_CD = A.LOC_CD
   AND B.POS_NO = A.POS_NO
   AND B.RECEIPT_NO = A.RECEIPT_NO
   AND A.SALE_DATE = :saleDate
   AND A.BRCH_CD = :brchCd
   AND A.LOC_CD = :locCd
   AND A.POS_NO = :posNo
   AND A.RECEIPT_NO IN (:receiptNos)
  ORDER BY A.RECEIPT_NO 
		]]>
	</statement>

	<statement name="selectTranItems" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectTranItems */
		<![CDATA[
SELECT SALE_DATE
     , BRCH_CD
     , LOC_CD
     , POS_NO
     , RECEIPT_NO
     , ITEM_SEQ
     , TRAN_FLAG
     , ITEM_FLAG
     , ITEM_CODE
     , CLASS_CODE
     , INSTORE_CODE
     , ITEM_NAME
     , PRICE
     , CADY_YN
     , BOTTLE_CODE
     , BOTL_MNGM_YN
     , BOTL_YN
     , TAX_FLAG
     , QUANTITY
     , CANCEL_QTY
     , DISCOUNT_FLAG
     , DISCOUNT_RATE
     , DISCOUNT_PRICE
     , DISCOUNT_AMOUNT
     , SUB_DISCOUNT_AMOUNT
     , SUB_DISCOUNT_QTY
     , ORIGIN_PRICE
     , PRETEND_QTY
     , EVENT_FLAG
     , SUBTOTAL
     , TOTAL
     , TAX_AMOUNT
     , SERVICE_AMT
     , SERVICE_RATE
     , FREE_AMOUNT
     , CURRENCY_SIGN
     , WEIG_YN
     , POINT_TYPE
     , POINT_QTY
     , POINT_DC_AMT
     , POINT_AR_AMT
     , POINT_TRACK2
     , POINT_APPR_DATE
     , POINT_APPR_NO
  FROM FSP_PO_IRIS_TRAN_ITEMS
 WHERE SALE_DATE = :saleDate
   AND BRCH_CD = :brchCd
   AND LOC_CD = :locCd
   AND POS_NO = :posNo
   AND RECEIPT_NO = :receiptNo
  ORDER BY ITEM_SEQ 
		]]>
	</statement>

	<statement name="selectTranCard" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectTranCard */
		<![CDATA[
SELECT SALE_DATE
     , BRCH_CD
     , LOC_CD
     , POS_NO
     , RECEIPT_NO
     , SEQ
     , TRAN_FLAG
     , TENDER_FLAG
     , TENDER_NAME
     , RECEIVE_AMOUNT
     , REAL_AMOUNT
     , TENDER_SIGN
     , VAN_ID
     , SLIP_NUMBER
     , CARD_NUMBER
     , ACTIVE_DATE
     , HALBU_MONTH
     , PWD
     , APPROVAL_FLAG
     , APPROVAL_CODE
     , VAN_SEQ
     , SALE_TIME
     , PRE_APPROVAL_CODE
     , PRE_SALE_DATE
     , PRE_VAN_SEQ
     , INPUT_FLAG
     , INPUT_DATA
     , CARD_NAME
     , CARD_SA_CD
     , MACH_NUM
     , CARD_MAKE_CD
     , CARD_MAKE_NAME
     , CARD_BUY_CD
     , CARD_BUY_NAME
     , AFFILIATE
     , RETURN_CD
     , MESSAGE1
     , MESSAGE2
     , ESIGN
     , ENCRYPT_YN
     , APR_DATE
  FROM FSP_PO_IRIS_TRAN_CARD
 WHERE SALE_DATE = :saleDate
   AND BRCH_CD = :brchCd
   AND LOC_CD = :locCd
   AND POS_NO = :posNo
   AND RECEIPT_NO = :receiptNo
  ORDER BY SEQ 
		]]>
	</statement>

	<statement name="selectTranCash" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectTranCash */
		<![CDATA[
SELECT SALE_DATE
     , BRCH_CD
     , LOC_CD
     , POS_NO
     , RECEIPT_NO
     , SEQ
     , TRAN_FLAG
     , TENDER_FLAG
     , TENDER_NAME
     , RECEIVE_AMOUNT
     , REAL_AMOUNT
     , TENDER_SIGN
  FROM FSP_PO_IRIS_TRAN_CASH
 WHERE SALE_DATE = :saleDate
   AND BRCH_CD = :brchCd
   AND LOC_CD = :locCd
   AND POS_NO = :posNo
   AND RECEIPT_NO = :receiptNo
  ORDER BY SEQ 
		]]>
	</statement>

	<statement name="selectTranEmp" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectTranEmp */
		<![CDATA[
SELECT SALE_DATE
     , BRCH_CD
     , LOC_CD
     , POS_NO
     , RECEIPT_NO
     , SEQ
     , TRAN_FLAG
     , TENDER_FLAG
     , TENDER_NAME
     , RECEIVE_AMOUNT
     , REAL_AMOUNT
     , TENDER_SIGN
     , EMP_NUMBER
     , EMP_NAME
     , APPROVAL_FLAG
     , APPROVAL_CODE
     , AR_SAVE_DIV
     , STTL_NUMBER
  FROM FSP_PO_IRIS_TRAN_EMP
 WHERE SALE_DATE = :saleDate
   AND BRCH_CD = :brchCd
   AND LOC_CD = :locCd
   AND POS_NO = :posNo
   AND RECEIPT_NO = :receiptNo
  ORDER BY SEQ 
		]]>
	</statement>

	<statement name="selectTranTeam" type="select">
		/*+ com.hwfs.ei.isa.dao.FsspExactDAO.selectTranTeam */
		<![CDATA[
SELECT SALE_DATE
     , BRCH_CD
     , LOC_CD
     , POS_NO
     , RECEIPT_NO
     , SEQ
     , TRAN_FLAG
     , TENDER_FLAG
     , TENDER_NAME
     , RECEIVE_AMOUNT
     , REAL_AMOUNT
     , TENDER_SIGN
     , TEAM_NUMBER
     , TEAM_NAME
     , APPROVAL_FLAG
     , PRE_APPROVAL_CODE
     , ERROR_MESSAGE
     , ORIGINAL_PRICE
     , IN_FLAG
  FROM FSP_PO_IRIS_TRAN_TEAM
 WHERE SALE_DATE = :saleDate
   AND BRCH_CD = :brchCd
   AND LOC_CD = :locCd
   AND POS_NO = :posNo
   AND RECEIPT_NO = :receiptNo
  ORDER BY SEQ 
		]]>
	</statement>

</hqml>
