<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="ft.ftr.ftStatsDAO">
	<desc>식재도매 통계조회 조회</desc>

	<!-- PO별 재고 금액을 조회한다. -->
	<statement name="pobyInventoryAmt" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.pobyInventoryAmt */
		<![CDATA[
/*PO별 재고금액*/
SELECT
   T.DELIVER_STATUS,   /* 입고상태 */
   T.PO_ORDER_NUM,               /* PO NUM */
   T.ATTACH_DEPT,                /* 귀속부서 코드 */
   T.ATTACH_DEPT_NM,         /* 귀속부서명 */
   T.SPLR_CD,                  /* 매입처코드 */
   T.SPLR_NM,                  /* 매입처명 */
   T.SALSPLCE_CD,              /* 매출처 */
   T.SALSPLCE_NM,              /* 매출처명 */
   T.SALE_PRCG_NM,           /*담당자*/
   T.LAST_SALE_EDATE,            /* 최종판매종료일 */
   T.ITEM_CD,                    /* 품목코드 */
   T.ITEM_NM,                    /* 품목명 */
   T.WH_CD,                      /* 창고코드 */
   T.WH_NM,                      /* 창고명 */
   T.BL_NUM,              /* BL NO */
   T.FIRST_DELIVER_DATE,         /* 최초입고일 */
   T.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
   T.UNIT,                       /* 입고단위 */
   T.DELIVER_QUANTITY,           /* 입고수량 */
   T.RELEASE_QUANTITY,           /* 출고수량 */
   --T.INVENTORY_QUANTITY,   --시점재고 : 입고 - 누적 수량
   NVL(T.DELIVER_QUANTITY,0) - NVL(T.RELEASE_QUANTITY,0) - NVL(T.CONTROL_QUANTITY,0) AS INVENTORY_QUANTITY,
   T.DELIVER_WGT,           /* 입고중량 */
   T.RELEASE_WGT,           /* 출고중량 */
   T.REAL_WGT,              /* 실제중량 */
   --T.INVENTORY_WGT,      --시점재고 : 입고 - 누적 수량
   NVL(T.DELIVER_WGT,0) - NVL(T.REAL_WGT,0) - NVL(T.CONTROL_WGT,0) AS INVENTORY_WGT,
   T.DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

   ROUND(T.DELIVER_AMT) AS DELIVER_AMT,                /* 입고금액 --수정 */
   T.SALE_AMT,                   /* 출고금액(판매금액) */
   T.SALE_CST AS SALE_CST,                   /* 출고원가금액(판매원가) */
   ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) AS INVENTORY_AMT,              /* 재고금액 */

   --T.DELIVER_UPRICE_KRW * DECODE(T.UNIT,'KG',T.INVENTORY_WGT,T.INVENTORY_QUANTITY) AS INVENTORY_AMT,
   --ROUND(T.DELIVER_AMT) - T.SALE_CST AS INVENTORY_AMT,
   --T.INVENTORY_AMT,
   T.GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
   CASE WHEN T.SALE_AMT =0 THEN
          0
   ELSE
          ROUND(T.GAIN_AMT/T.SALE_AMT*100,1)
   END AS GAIN_RATE,	/* 이익률((이익액/출고금액)*100) */
   T.DELIVER_BOX,           /* 입고BOX */
   T.RELEASE_BOX,           /* 출고BOX */
   T.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
   T.RELEASE_WAIT_WGT,       /* 출고대기중량 */
   T.RELEASE_END_QUANTITY,   /* 출고완료수량 */
   T.RELEASE_END_WGT,        /* 출고완료중량 */
   T.RMA_QUANTITY,           /* 반품수량 */
   T.RMA_WGT,                /* 반품중량 */
   T.WH_MOVE_QUANTITY,       /* 창고이동수량 */
   T.WH_MOVE_WGT,            /* 창고이동중량 */
   T.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
   T.ORDER_REMAIN_WGT,        /* 주문잔여중량 */
   T.CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
   T.CONTROL_WGT,            /* 재고(폐기)조정중량*/
   T.CONTROL_AMT             /* 재고(폐기)조정금액*/
FROM
(
    SELECT SCC_CODE_NM('DELIVER_STATUS', D.DELIVER_STATUS) AS DELIVER_STATUS,   /* 입고상태 */
           D.PO_ORDER_NUM,               /* PO NUM */
           D.ATTACH_DEPT,                /* 귀속부서 코드 */
           SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
           D.SPLR_CD,                  /* 매입처코드 */
           D.SPLR_NM,                  /* 매입처명 */
           D.SALSPLCE_CD,              /* 매출처 */
           D.SALSPLCE_NM,              /* 매출처명 */
           (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
            WHERE T.SABUN = T2.DRAFTER_ID
            AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
            ) AS SALE_PRCG_NM,           /*담당자*/

           D.LAST_SALE_EDATE,            /* 최종판매종료일 */
           D.ITEM_CD,                    /* 품목코드 */
           K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
           D.WH_CD,                      /* 창고코드 */
           D.WH_NM,                      /* 창고명 */
           CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
               C.BL_NUM
           ELSE
              (
                SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
                AND D.ITEM_CD = T.ITEM_CD
                AND D.ITEM_SEQ = T.ITEM_SEQ
              )
           END AS BL_NUM,              /* BL NO */

           D.FIRST_DELIVER_DATE,         /* 최초입고일 */
           D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
           D.UNIT,                       /* 입고단위 */
           NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
           --NVL(A.RELEASE_QUANTITY,0) AS RELEASE_QUANTITY,           /* 출고수량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0)
           ELSE
               NVL(A.RELEASE_QUANTITY,0)
           END
           RELEASE_QUANTITY,

           D.DELIVER_QUANTITY - NVL(A.RELEASE_QUANTITY,0)  - NVL(Y.DELIVER_QUANTITY,0) AS INVENTORY_QUANTITY,
/*
          NVL((MAX(D.DELIVER_QUANTITY) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM))),0)
          -
          NVL(((SUM( D.DELIVER_QUANTITY  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )) -D.DELIVER_QUANTITY),0)
          - NVL(A.RELEASE_QUANTITY,0)
          AS INVENTORY_QUANTITY,   --시점재고
*/

           NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
           --NVL(A.REAL_WGT,0) AS RELEASE_WGT,           /* 출고중량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.RELEASE_WGT,0) + NVL(Y.DELIVER_WGT,0)
           ELSE
               NVL(A.RELEASE_WGT,0)
           END
           RELEASE_WGT,
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.REAL_WGT,0) + NVL(Y.DELIVER_WGT,0)
           ELSE
               NVL(A.REAL_WGT,0)
           END
           REAL_WGT,           
          --시점재고 : 입고 - 누적 수량
          /*
          NVL((MAX(D.DELIVER_WGT) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM))),0)
          -
          NVL(((SUM( D.DELIVER_WGT ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )) -D.DELIVER_WGT),0)
          - NVL(A.REAL_WGT,0)
          AS INVENTORY_WGT,   --시점재고
*/
           D.DELIVER_WGT - NVL(A.RELEASE_WGT,0)  - NVL(Y.DELIVER_WGT,0) AS INVENTORY_WGT,   --시점재고


           CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
               0
           ELSE
              ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
           END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

           NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) AS DELIVER_AMT,                /* 입고금액 --수정 */
           --A.BUY_CST AS DELIVER_AMT,
           NVL(A.SALE_AMT,0) AS SALE_AMT,                   /* 출고금액(판매금액) */
           --ROUND(NVL(ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)),0))  AS SALE_CST,                   /* 출고원가금액(판매원가) */
           ROUND(A.BUY_CST)  AS SALE_CST,                   /* 출고원가금액(판매원가) */

           --NVL(D.DELIVER_UPRICE_KRW * DECODE(D.UNIT, 'KG', (NVL(D.DELIVER_WGT,0) - NVL(A.REAL_WGT,0)),  (NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0))  ),0) AS INVENTORY_AMT,
           ROUND((SUM(  D.DELIVER_AMT+NVL(X.DIV_AMT,0)  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING))
           -BUY_CST )
           AS INVENTORY_AMT,

           --NVL((A.SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
           NVL((A.SALE_AMT - A.BUY_CST),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */

           NVL(CASE WHEN A.SALE_AMT = 0 THEN 0
           ELSE
               ROUND((A.SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
           END,0) AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

           ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
           ROUND(NVL(B.RELEASE_QUANTITY, 0),0) AS RELEASE_BOX,           /* 출고BOX */
           D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
           ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
           D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
           ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
           D.RMA_QUANTITY,           /* 반품수량 */
           ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
           D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
           ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
           D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
           ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
           NVL(L.CONTROL_QUANTITY, 0) AS CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
           NVL(L.CONTROL_WGT, 0) AS CONTROL_WGT,                 /* 재고(폐기)조정중량*/
           NVL(L.CONTROL_AMT, 0) AS CONTROL_AMT                  /* 재고(폐기)조정금액*/
    FROM
     INVENTORY_MGMT_DELIVER D
     ,(
        SELECT T2.INITIAL_DELIVER_NUM
              ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
              ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
          FROM INVENTORY_MGMT_DELIVER T2
        WHERE T2.CURRENT_WH_DELIVER_DATE<= :startTerm   -- 입고,출고 누적
        GROUP BY T2.INITIAL_DELIVER_NUM
     ) Y
     ,(
        SELECT T2.INITIAL_DELIVER_NUM
              ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
              ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
          FROM INVENTORY_MGMT_DELIVER T2
        WHERE T2.CURRENT_WH_DELIVER_DATE > :startTerm   -- 입고누적
--        AND T2.DELIVER_TYPE='20'
        GROUP BY T2.INITIAL_DELIVER_NUM
     ) Z
     ,PO_ORDER_MST           C,
     (SELECT T.DELIVER_NUM
           , SUM(RELEASE_QUANTITY) AS RELEASE_QUANTITY
           , SUM(RELEASE_WGT) AS RELEASE_WGT

      FROM SALE_ORDER_ITEM_MGMT T GROUP BY T.DELIVER_NUM ) B,
     (SELECT
            T.DELIVER_NUM
          , ROUND(SUM(T2.REAL_SALE_AMT)) AS SALE_AMT
          , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
          , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
          , SUM(T2.REAL_WGT) AS REAL_WGT
          , SUM(T2.BUY_CST) AS BUY_CST

          , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
          , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
      FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
      WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
      AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
                  AND T2.RELEASE_DATE <= :startTerm              --재고미포함
      GROUP BY T.DELIVER_NUM
     ) A,
     (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
         GROUP BY T.DELIVER_NUM
       ) X
     ,HLDC_PO_ITEM_MST K
     ,INVENTORY_CONTROL_LOG L
    WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
    AND D.DELIVER_NUM = X.DELIVER_NUM(+)
    AND D.DELIVER_NUM = B.DELIVER_NUM(+)
    AND D.DELIVER_NUM = A.DELIVER_NUM(+)
    AND D.DELIVER_NUM = Y.INITIAL_DELIVER_NUM(+)
    AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
    AND D.DELIVER_NUM = L.DELIVER_NUM(+)
    AND D.ITEM_CD = K.ITEM_CODE(+)
    AND D.DELIVER_STATUS <> '10' --가입고 제외
    --AND D.FIRST_DELIVER_DATE <= :startTerm
    AND D.CURRENT_WH_DELIVER_DATE <= :startTerm
    <#if deliverType?has_content>
        AND D.DELIVER_TYPE = :deliverType        /*입고유형*/
    </#if>
    <#if deliverStatus?has_content>
        AND D.DELIVER_STATUS = :deliverStatus      /*입고상태*/
    </#if>
     <#if search?has_content>
         <#if searchContents?has_content>
            <#if search == "A"> /* PO No */
                AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
            <#elseif search == "B"> /* 창고명 */
                AND D.WH_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "C"> /* 매입처명 */
                AND D.SPLR_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "D"> /* 매출처명 */
                AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "E"> /* 품목명 */
                AND D.ITEM_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "F"> /* BL NO */
               --AND C.BL_NUM LIKE '%'||:searchContents||'%'
            </#if>
           </#if>
    </#if>
     <#if attachDept?has_content>
        AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
    </#if>
     <#if deliverNum?has_content>
        AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
    </#if>
    ORDER BY D.PO_ORDER_NUM       DESC,
             D.DELIVER_NUM,
             D.CDATE DESC
) T
WHERE 1=1
<#if search?has_content>
	<#if searchContents?has_content>
		<#if search == "F"> /* BL NO */
		   AND T.BL_NUM LIKE '%'||:searchContents||'%'
		</#if>
	</#if>
</#if>		

<#if chkInventoryYn?has_content>
     <#if chkInventoryYn == "Y"> /* 재고포함 */
         --AND T.INVENTORY_QUANTITY >=0
         AND ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) >= 0
     <#else>
         --AND T.INVENTORY_QUANTITY >0
         --AND ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) > 0
		  AND (T.PO_ORDER_NUM) IN (
		    SELECT D.PO_ORDER_NUM
		      FROM INVENTORY_MGMT_DELIVER D,
		           (SELECT T.DELIVER_NUM ,
		                   SUM(T2.BUY_CST) AS BUY_CST
		              FROM SALE_ORDER_ITEM_MGMT T,
		                   RELEASE_ITEM_MGMT T2
		             WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
		               AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
		               AND T2.RELEASE_DATE <= '20160418' --재고미포함
		             GROUP BY T.DELIVER_NUM ) A,
		           (SELECT T.DELIVER_NUM,
		                   SUM(T.DIV_AMT) AS DIV_AMT
		              FROM DELIVERITEM_OTHER_AMT_DIV T
		             GROUP BY T.DELIVER_NUM ) X,
		           (SELECT T.DELIVER_NUM,
		                   SUM(T.CONTROL_AMT) AS CONTROL_AMT
		              FROM INVENTORY_CONTROL_LOG T
		             GROUP BY T.DELIVER_NUM ) L
		     WHERE D.DELIVER_NUM = X.DELIVER_NUM(+)
		       AND D.DELIVER_NUM = A.DELIVER_NUM(+)
		       AND D.DELIVER_NUM = L.DELIVER_NUM(+)
		       AND D.DELIVER_STATUS <> '10' --가입고 제외
		     GROUP BY D.PO_ORDER_NUM
		    HAVING SUM(ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT, 0))) - NVL(A.BUY_CST, 0) - NVL(L.CONTROL_AMT, 0)) > 0
		    )         
     </#if>
<#else>
        --AND T.INVENTORY_QUANTITY >0
        --AND ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) > 0
		  AND (T.PO_ORDER_NUM) IN (
		    SELECT D.PO_ORDER_NUM
		      FROM INVENTORY_MGMT_DELIVER D,
		           (SELECT T.DELIVER_NUM ,
		                   SUM(T2.BUY_CST) AS BUY_CST
		              FROM SALE_ORDER_ITEM_MGMT T,
		                   RELEASE_ITEM_MGMT T2
		             WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
		               AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
		               AND T2.RELEASE_DATE <= '20160418' --재고미포함
		             GROUP BY T.DELIVER_NUM ) A,
		           (SELECT T.DELIVER_NUM,
		                   SUM(T.DIV_AMT) AS DIV_AMT
		              FROM DELIVERITEM_OTHER_AMT_DIV T
		             GROUP BY T.DELIVER_NUM ) X,
		           (SELECT T.DELIVER_NUM,
		                   SUM(T.CONTROL_AMT) AS CONTROL_AMT
		              FROM INVENTORY_CONTROL_LOG T
		             GROUP BY T.DELIVER_NUM ) L
		     WHERE D.DELIVER_NUM = X.DELIVER_NUM(+)
		       AND D.DELIVER_NUM = A.DELIVER_NUM(+)
		       AND D.DELIVER_NUM = L.DELIVER_NUM(+)
		       AND D.DELIVER_STATUS <> '10' --가입고 제외
		     GROUP BY D.PO_ORDER_NUM
		    HAVING SUM(ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT, 0))) - NVL(A.BUY_CST, 0) - NVL(L.CONTROL_AMT, 0)) > 0
		   )         
</#if>

        ]]>
	</statement>

	<!-- PO별 재고 이력을 조회한다. -->
	<statement name="pobyInventoryLog" type="select"><![CDATA[
/*PO별 재고이력*/
SELECT
   --ROW_NUMBER() OVER(PARTITION BY T.DELIVER_NUM, T.RELEASE_NUM, T.RELEASE_DATE,T.ATTACH_DEPT, T.WH_CD, T.PO_ORDER_NUM,  T.ITEM_CD ORDER BY T.DELIVER_NUM ) AS RANK,
   ROW_NUMBER() OVER(PARTITION BY T.DELIVER_NUM, T.INITIAL_DELIVER_NUM, T.ORDER_DELIVER_NUM,   T.RELEASE_NUM, T.RELEASE_DATE,T.ATTACH_DEPT, T.WH_CD, T.PO_ORDER_NUM,  T.ITEM_CD ORDER BY T.ORDER_DELIVER_NUM, FLAG ,  T.RELEASE_NUM DESC, T.DELIVER_NUM ) AS RANK,
   FLAG,
   DECODE(FLAG,1,'',RELEASE_DATE) AS RELEASE_DATE ,
   DELIVER_STATUS,   /* 입고상태 */
   ORDER_DELIVER_NUM,
   PO_ORDER_NUM,               /* PO NUM */
   DELIVER_NUM,
   ATTACH_DEPT,                /* 귀속부서 코드 */
   ATTACH_DEPT_NM,         /* 귀속부서명 */
   SPLR_CD,                  /* 매입처코드 */
   SPLR_NM,                  /* 매입처명 */
   SALSPLCE_CD,              /* 매출처 */
   SALSPLCE_NM,              /* 매출처명 */
   SALE_PRCG_NM,           /*담당자*/
   LAST_SALE_EDATE,            /* 최종판매종료일 */
   ITEM_CD,                    /* 품목코드 */
   ITEM_NM,                    /* 품목명 */
   WH_CD,                      /* 창고코드 */
   WH_NM,                      /* 창고명 */
   BL_NUM,              /* BL NO */
   FIRST_DELIVER_DATE,         /* 최초입고일 */
   CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
   UNIT,                       /* 입고단위 */
   DELIVER_QUANTITY,           /* 입고수량 */
   RELEASE_QUANTITY,           /* 출고수량 */
   INVENTORY_QUANTITY, /* 재고수량 */
   DELIVER_WGT,           /* 입고중량 */
   RELEASE_WGT,           /* 출고중량 */
   REAL_WGT,           /* 실출고중량 */
   INVENTORY_WGT,   /* 재고중량 */
   DELIVER_UPRICE_KRW,         /* 입고단가(원화) */
   ROUND(DELIVER_AMT) AS DELIVER_AMT,                /* 입고금액 --수정 */
   SALE_AMT,                   /* 출고금액(판매금액) */
   SALE_CST AS SALE_CST,                   /* 출고원가금액(판매원가) */
   --ROUND(T.DELIVER_AMT) - T.SALE_CST AS INVENTORY_AMT,
   --ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) AS INVENTORY_AMT,              /* 재고금액 */
   INVENTORY_AMT AS INVENTORY_AMT, /* 재고금액 */
   GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
   CASE WHEN SALE_AMT =0 THEN
          0
   ELSE
          ROUND(GAIN_AMT/SALE_AMT*100,1)
   END AS GAIN_RATE,  /* 이익률((이익액/출고금액)*100) */

   DELIVER_BOX,           /* 입고BOX */
   RELEASE_BOX,           /* 출고BOX */
   RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
   RELEASE_WAIT_WGT,       /* 출고대기중량 */
   RELEASE_END_QUANTITY,   /* 출고완료수량 */
   RELEASE_END_WGT,        /* 출고완료중량 */
   RMA_QUANTITY,           /* 반품수량 */
   RMA_WGT,                /* 반품중량 */
   WH_MOVE_QUANTITY,       /* 창고이동수량 */
   WH_MOVE_WGT,            /* 창고이동중량 */
   ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
   ORDER_REMAIN_WGT,        /* 주문잔여중량 */
   CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
   CONTROL_WGT,            /* 재고(폐기)조정중량*/
   CONTROL_AMT             /* 재고(폐기)조정금액*/      
FROM
(
SELECT
       '1' FLAG,
       D.FIRST_DELIVER_DATE AS RELEASE_DATE ,
       '입고' AS DELIVER_STATUS,   /* 입고상태 */
       D.PO_ORDER_NUM,               /* PO NUM */
       D.DELIVER_NUM,
        D.INITIAL_DELIVER_NUM,
       NVL(D.DELIVER_NUM, D.INITIAL_DELIVER_NUM) AS ORDER_DELIVER_NUM,
       D.ATTACH_DEPT,                /* 귀속부서 코드 */
       SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
       D.SPLR_CD,                  /* 매입처코드 */
       D.SPLR_NM,                  /* 매입처명 */
       D.SALSPLCE_CD,              /* 매출처 */
       D.SALSPLCE_NM,              /* 매출처명 */
       (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
        WHERE T.SABUN = T2.DRAFTER_ID
        AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
        ) AS SALE_PRCG_NM,           /*담당자*/

       D.LAST_SALE_EDATE,            /* 최종판매종료일 */
       D.ITEM_CD,                    /* 품목코드 */
--       D.ITEM_NM,                    /* 품목명 */
       K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,

       D.WH_CD,                      /* 창고코드 */
       D.WH_NM,                      /* 창고명 */
       CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
           C.BL_NUM
       ELSE
          (
            SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
            WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
            AND D.ITEM_CD = T.ITEM_CD
            AND D.ITEM_SEQ = T.ITEM_SEQ
          )
       END AS BL_NUM,              /* BL NO */

       D.FIRST_DELIVER_DATE,         /* 최초입고일 */
       D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
       D.UNIT,                       /* 입고단위 */
       NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
       --NULL AS RELEASE_QUANTITY,           /* 출고수량 */

       CASE WHEN D.DELIVER_TYPE = '10' THEN
           NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0)
       ELSE
           NVL(A.RELEASE_QUANTITY,0)
       END
       RELEASE_QUANTITY,

       (NVL(D.DELIVER_QUANTITY,0)) - ( NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0) )AS INVENTORY_QUANTITY, /* 재고수량 */

       NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
       --NULL AS RELEASE_WGT,           /* 출고중량 */
       CASE WHEN D.DELIVER_TYPE = '10' THEN
           NVL(A.RELEASE_WGT,0) + NVL(Y.DELIVER_WGT,0)
       ELSE
           NVL(A.RELEASE_WGT,0)
       END
       RELEASE_WGT,
       CASE WHEN D.DELIVER_TYPE = '10' THEN
           NVL(A.REAL_WGT,0) + NVL(Y.DELIVER_WGT,0)
       ELSE
           NVL(A.REAL_WGT,0)
       END
       REAL_WGT, /* 실출고중량 */
       (NVL(D.DELIVER_WGT,0) - (  NVL(A.RELEASE_WGT,0) + NVL(Y.DELIVER_WGT,0) ) ) AS INVENTORY_WGT,   /* 재고중량 */

--       ROUND(D.DELIVER_UPRICE_KRW) AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */
       CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
           0
       ELSE
          ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
       END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */


       D.DELIVER_AMT +NVL(X.DIV_AMT,0) AS DELIVER_AMT,                /* 입고금액 --수정 */
       NULL SALE_AMT,                   /* 출고금액(판매금액) */
       NULL  AS SALE_CST,                   /* 출고원가금액(판매원가) */

       --ROUND(ROUND(D.DELIVER_UPRICE_KRW) * DECODE(D.UNIT, 'KG', NVL(D.DELIVER_WGT,0),  NVL(D.DELIVER_QUANTITY,0)  )) AS INVENTORY_AMT,
       ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT,0))
       -
       (SUM( A.BUY_CST ) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.CDATE  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)))
       AS INVENTORY_AMT,

--       ROUND((A.SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)))) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       NULL AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       CASE WHEN A.SALE_AMT = 0 THEN 0
       ELSE
           ROUND((A.SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
       END AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

       ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
       ROUND(NVL(B.RELEASE_QUANTITY, 0),0) AS RELEASE_BOX,           /* 출고BOX */
       D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
       ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
       D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
       ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
       D.RMA_QUANTITY,           /* 반품수량 */
       ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
       D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
       ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
       D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
       ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
       0 AS CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
       0 AS CONTROL_WGT,            /* 재고(폐기)조정중량*/
       0 AS CONTROL_AMT,             /* 재고(폐기)조정금액*/              
       A.CDATE,
       A.RELEASE_NUM
  FROM INVENTORY_MGMT_DELIVER D,
       PO_ORDER_MST           C,
       (SELECT T.DELIVER_NUM
             , SUM(RELEASE_QUANTITY) AS RELEASE_QUANTITY
             , SUM(RELEASE_WGT) AS RELEASE_WGT

        FROM SALE_ORDER_ITEM_MGMT T GROUP BY T.DELIVER_NUM ) B,
       (SELECT
              T.DELIVER_NUM
            , SUM(T2.SALE_AMT) AS SALE_AMT
            , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
            , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
            , SUM(T2.REAL_WGT) AS REAL_WGT
            , SUM(T2.BUY_CST) AS BUY_CST

            , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
            , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
            , MAX(T2.CDATE)  AS CDATE
            , MIN(T2.RELEASE_NUM)  AS RELEASE_NUM
        FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
        WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
        AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
                      /* 재고포함 */
                 AND T2.RELEASE_DATE <= :startTerm              --재고포함
        GROUP BY T.DELIVER_NUM
       ) A,
       (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
           GROUP BY T.DELIVER_NUM
         ) X
        ,(
            SELECT T2.INITIAL_DELIVER_NUM
                  ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                  ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
              FROM INVENTORY_MGMT_DELIVER T2
            WHERE T2.CURRENT_WH_DELIVER_DATE<= :startTerm   -- 입고,출고 누적
            GROUP BY T2.INITIAL_DELIVER_NUM
         ) Y
         ,(
            SELECT T2.INITIAL_DELIVER_NUM
                  ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                  ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
              FROM INVENTORY_MGMT_DELIVER T2
            WHERE T2.CURRENT_WH_DELIVER_DATE > :startTerm   -- 입고누적
    --        AND T2.DELIVER_TYPE='20'
            GROUP BY T2.INITIAL_DELIVER_NUM
         ) Z
         ,HLDC_PO_ITEM_MST K
 WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
   AND D.DELIVER_NUM = X.DELIVER_NUM(+)
   AND D.DELIVER_NUM = B.DELIVER_NUM(+)
   AND D.DELIVER_NUM = A.DELIVER_NUM(+)
   AND D.DELIVER_NUM = Y.INITIAL_DELIVER_NUM(+)
   AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
   AND D.ITEM_CD = K.ITEM_CODE(+)

   AND D.DELIVER_STATUS <> '10' --가입고 제외
   AND D.DELIVER_TYPE ='10'     --정상입고
   --AND D.FIRST_DELIVER_DATE <= :startTerm
   AND NVL(A.RELEASE_QUANTITY,0) =0    --출고가 없는 건만 20151118 전윤희
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 2016.04.18 재고수량에서 재고금액 기준으로 변경, 조건은 쿼리 제일 하단으로 이동*/
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) >= 0
        <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
        </#if>
   <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
   </#if>

   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 */
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고포함*/
        <#else>
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
        </#if>
   <#else>
          AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
   </#if>

   <#if deliverType?has_content>
       AND D.DELIVER_TYPE = :deliverType        /*입고유형*/
   </#if>
   <#if deliverStatus?has_content>
       AND D.DELIVER_STATUS = :deliverStatus      /*입고상태*/
   </#if>
    <#if search?has_content>
        <#if searchContents?has_content>
           <#if search == "A"> /* PO No */
               AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
           <#elseif search == "B"> /* 창고명 */
               AND D.WH_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "C"> /* 매입처명 */
               AND D.SPLR_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "D"> /* 매출처명 */
               AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "E"> /* 품목명 */
               AND D.ITEM_NM LIKE '%'||:searchContents||'%'
              </#if>
          </#if>
   </#if>
    <#if attachDept?has_content>
       AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
   </#if>
    <#if deliverNum?has_content>
       AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
   </#if>
   
<#if chkWhMoveYn?has_content>  /* 이동입고 포함시(이동입고 포함분이 중복되어 PO별 재고금액과 금액 불일치 2016.04.18) */
  <#if chkWhMoveYn == "Y">
UNION ALL
      --이동입고 2
      SELECT
       '2' FLAG,
       D.FIRST_DELIVER_DATE AS RELEASE_DATE ,
       '이동입고' AS DELIVER_STATUS,   /* 입고상태 */
       D.PO_ORDER_NUM,               /* PO NUM */
       D.DELIVER_NUM,
        D.INITIAL_DELIVER_NUM,
       NVL(D.DELIVER_NUM, D.INITIAL_DELIVER_NUM) AS ORDER_DELIVER_NUM,
       D.ATTACH_DEPT,                /* 귀속부서 코드 */
       SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
       D.SPLR_CD,                  /* 매입처코드 */
       D.SPLR_NM,                  /* 매입처명 */
       D.SALSPLCE_CD,              /* 매출처 */
       D.SALSPLCE_NM,              /* 매출처명 */
       (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
        WHERE T.SABUN = T2.DRAFTER_ID
        AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
        ) AS SALE_PRCG_NM,           /*담당자*/

       D.LAST_SALE_EDATE,            /* 최종판매종료일 */
       D.ITEM_CD,                    /* 품목코드 */
       K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
       D.WH_CD,                      /* 창고코드 */
       D.WH_NM,                      /* 창고명 */
       CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
           C.BL_NUM
       ELSE
          (
            SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
            WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
            AND D.ITEM_CD = T.ITEM_CD
            AND D.ITEM_SEQ = T.ITEM_SEQ
          )
       END AS BL_NUM,              /* BL NO */

       D.FIRST_DELIVER_DATE,         /* 최초입고일 */
       D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
       D.UNIT,                       /* 입고단위 */
           NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.RELEASE_QUANTITY,0)
           ELSE
               NVL(A.RELEASE_QUANTITY,0) +NVL(Z.DELIVER_QUANTITY,0)
           END
           RELEASE_QUANTITY,

           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(D.DELIVER_QUANTITY,0) - (NVL(A.RELEASE_QUANTITY,0) )
           ELSE
               NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0)
           END
          AS INVENTORY_QUANTITY,   --시점재고


           NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.REAL_WGT,0)
           ELSE
               NVL(A.REAL_WGT,0)
           END
           RELEASE_WGT,
	       CASE WHEN D.DELIVER_TYPE = '10' THEN
	           NVL(A.REAL_WGT,0)
	       ELSE
	           NVL(A.REAL_WGT,0)
	       END
	       REAL_WGT, /* 실출고중량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(D.DELIVER_WGT,0) - (NVL(A.RELEASE_WGT,0) )
           ELSE
               NVL(D.DELIVER_WGT,0) - NVL(A.RELEASE_WGT,0)
           END
           AS INVENTORY_WGT,   --시점재고

--       ROUND(D.DELIVER_UPRICE_KRW) AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */
       CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
           0
       ELSE
          ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
       END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */


       D.DELIVER_AMT +NVL(X.DIV_AMT,0) AS DELIVER_AMT,                /* 입고금액 --수정 */
       NULL SALE_AMT,                   /* 출고금액(판매금액) */
       NULL  AS SALE_CST,                   /* 출고원가금액(판매원가) */

--       ROUND(ROUND(D.DELIVER_UPRICE_KRW) * DECODE(D.UNIT, 'KG', NVL(D.DELIVER_WGT,0),  NVL(D.DELIVER_QUANTITY,0)  )) AS INVENTORY_AMT,
       ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT,0))
       -
       (SUM( NVL(A.BUY_CST,0) ) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.CDATE  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)))
       AS INVENTORY_AMT,

--       ROUND((A.SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)))) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       NULL AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       CASE WHEN A.SALE_AMT = 0 THEN 0
       ELSE
           ROUND((A.SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
       END AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

       ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
       NULL AS RELEASE_BOX,           /* 출고BOX */
       D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
       ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
       D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
       ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
       D.RMA_QUANTITY,           /* 반품수량 */
       ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
       D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
       ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
       D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
       ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
       0 AS CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
       0 AS CONTROL_WGT,            /* 재고(폐기)조정중량*/
       0 AS CONTROL_AMT,             /* 재고(폐기)조정금액*/              
       A.CDATE,
       A.RELEASE_NUM

        FROM INVENTORY_MGMT_DELIVER D,
             PO_ORDER_MST           C,
             (
                SELECT
                      T.DELIVER_NUM
                    , T2.SALE_AMT AS SALE_AMT
                    , T2.RELEASE_QUANTITY AS RELEASE_QUANTITY
                    , T2.RELEASE_WGT AS RELEASE_WGT
                    , T2.REAL_WGT AS REAL_WGT

                    , T2.PURCHASE_RETURN_QUANTITY AS PURCHASE_RETURN_QUANTITY
                    , T2.PURCHASE_RETURN_WGT AS PURCHASE_RETURN_WGT
                    , T2.CDATE  AS CDATE
                    , T2.RELEASE_NUM  AS RELEASE_NUM
                    , T2.BUY_CST
                    , T2.SALE_UPRICE
                    , T2.REAL_SALE_AMT
                FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
                WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
                AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
                AND T2.RELEASE_DATE <= :startTerm              --재고포함
             ) A,
             (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                 GROUP BY T.DELIVER_NUM
               ) X
             ,(
                SELECT T2.INITIAL_DELIVER_NUM
                      ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                      ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
                  FROM INVENTORY_MGMT_DELIVER T2
                WHERE T2.CURRENT_WH_DELIVER_DATE<= :startTerm   -- 입고,출고 누적
                GROUP BY T2.INITIAL_DELIVER_NUM
             ) Y
             ,(
                SELECT T2.INITIAL_DELIVER_NUM
                      ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                      ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
                  FROM INVENTORY_MGMT_DELIVER T2
                WHERE T2.CURRENT_WH_DELIVER_DATE > :startTerm   -- 입고누적
        --        AND T2.DELIVER_TYPE='20'
                GROUP BY T2.INITIAL_DELIVER_NUM
             ) Z
             ,HLDC_PO_ITEM_MST K
       WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
         AND D.DELIVER_NUM = X.DELIVER_NUM(+)
         AND D.DELIVER_NUM = A.DELIVER_NUM(+)
         AND D.DELIVER_NUM = Y.INITIAL_DELIVER_NUM(+)
         AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
         AND D.ITEM_CD = K.ITEM_CODE(+)
         AND D.DELIVER_STATUS <> '10' --가입고 제외
         AND D.DELIVER_TYPE ='20'     --이동입고
         --AND D.FIRST_DELIVER_DATE <= :startTerm
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 */
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고포함*/
        <#else>
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
        </#if>
   <#else>
       AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
   </#if>
   <#if deliverType?has_content>
       AND D.DELIVER_TYPE = :deliverType        /*입고유형*/
   </#if>
   <#if deliverStatus?has_content>
       AND D.DELIVER_STATUS = :deliverStatus      /*입고상태*/
   </#if>
    <#if search?has_content>
        <#if searchContents?has_content>
           <#if search == "A"> /* PO No */
               AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
           <#elseif search == "B"> /* 창고명 */
               AND D.WH_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "C"> /* 매입처명 */
               AND D.SPLR_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "D"> /* 매출처명 */
               AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "E"> /* 품목명 */
               AND D.ITEM_NM LIKE '%'||:searchContents||'%'
              </#if>
          </#if>
   </#if>
    <#if attachDept?has_content>
       AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
   </#if>
    <#if deliverNum?has_content>
       AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
   </#if>
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 2016.04.18 재고수량에서 재고금액 기준으로 변경, 조건은 쿼리 제일 하단으로 이동 */
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) >= 0
        <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
        </#if>
   <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
   </#if>
  </#if>
</#if>  
      UNION ALL

SELECT
       '3' FLAG,
       A.RELEASE_DATE,
       '출고' AS DELIVER_STATUS,   /* 입고상태 */
       D.PO_ORDER_NUM,               /* PO NUM */
       D.DELIVER_NUM,
               D.INITIAL_DELIVER_NUM,
       NVL(D.DELIVER_NUM, D.INITIAL_DELIVER_NUM) AS ORDER_DELIVER_NUM,
       D.ATTACH_DEPT,                /* 귀속부서 코드 */
       SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
       D.SPLR_CD,                  /* 매입처코드 */
       D.SPLR_NM,                  /* 매입처명 */
       A.CUST_CD AS SALSPLCE_CD,
       (SELECT T.CUSTNM FROM ST_CUST T WHERE T.CUSTCD = A.CUST_CD AND T.USE_YN='Y' ) AS SALSPLCE_NM,
       (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
        WHERE T.SABUN = T2.DRAFTER_ID
        AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
        ) AS SALE_PRCG_NM,           /*담당자*/

       D.LAST_SALE_EDATE,            /* 최종판매종료일 */
       D.ITEM_CD,                    /* 품목코드 */
       --D.ITEM_NM,                    /* 품목명 */
       K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
       D.WH_CD,                      /* 창고코드 */
       D.WH_NM,                      /* 창고명 */
       CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
           C.BL_NUM
       ELSE
          (
            SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
            WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
            AND D.ITEM_CD = T.ITEM_CD
            AND D.ITEM_SEQ = T.ITEM_SEQ
          )
       END AS BL_NUM,              /* BL NO */

       D.FIRST_DELIVER_DATE,         /* 최초입고일 */
       D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
       D.UNIT,                       /* 입고단위 */
             --NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
       CASE WHEN RANK() OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE) = 1 THEN
           NVL(D.DELIVER_QUANTITY,0)
       ELSE
            0
       END AS DELIVER_QUANTITY,           /* 입고금액 */

       --2019.05.21 김명섭 출고수량수정
       --NVL(A.RELEASE_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0) AS RELEASE_QUANTITY,           /* 출고수량 */
       --NVL(D.DELIVER_QUANTITY,0)  - (SUM(NVL(A.RELEASE_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0)) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW))
       --AS INVENTORY_QUANTITY,
       NVL(A.RELEASE_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0) AS RELEASE_QUANTITY,           /* 출고수량 */
       NVL(D.DELIVER_QUANTITY,0)  - (SUM(NVL(A.RELEASE_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0)) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW))
       AS INVENTORY_QUANTITY,

       --NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
       CASE WHEN RANK() OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE) = 1 THEN
           NVL(D.DELIVER_WGT,0)
       ELSE
            0
       END AS DELIVER_WGT,           /* 입고금액 */

       --2019.05.21 김명섭 출고중량변경
--       NVL(A.RELEASE_WGT,0)  + NVL(K.DELIVER_WGT,0)  + NVL(K.DELIVER_WGT,0) AS RELEASE_WGT,           /* 출고중량 */
--       NVL(A.REAL_WGT,0)  + NVL(K.DELIVER_WGT,0)  + NVL(K.DELIVER_WGT,0) AS REAL_WGT,           /* 실출고중량 */
----       NVL(D.DELIVER_WGT,0)  - NVL(K.DELIVER_WGT,0)  - NVL(K.DELIVER_WGT,0) - NVL(A.RELEASE_WGT,0) AS INVENTORY_WGT,   /* 재고중량 */
--       NVL(D.DELIVER_WGT,0)  - (SUM(NVL(A.RELEASE_WGT,0) + NVL(K.DELIVER_WGT,0) + NVL(K.DELIVER_WGT,0)) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW))
--       AS INVENTORY_WGT,
       NVL(A.RELEASE_WGT,0)  + NVL(K.DELIVER_WGT,0) AS RELEASE_WGT,           /* 출고중량 */
       NVL(A.REAL_WGT,0)  + NVL(K.DELIVER_WGT,0) AS REAL_WGT,           /* 실출고중량 */
       NVL(D.DELIVER_WGT,0)  - (SUM(NVL(A.REAL_WGT,0) + NVL(K.DELIVER_WGT,0)) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW))
       AS INVENTORY_WGT,


       CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
           0
       ELSE
          ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
       END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

--       NULL AS DELIVER_AMT,                /* 입고금액 --수정 */
       CASE WHEN RANK() OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE) = 1 THEN
           CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
               0
           ELSE
              ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)))
           END
       ELSE
            0
       END AS DELIVER_AMT,           /* 입고금액 */

       ROUND(A.REAL_SALE_AMT) SALE_AMT,
       --(D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)  AS SALE_CST,                   /* 출고원가금액(판매원가) */
       A.BUY_CST AS SALE_CST,                   /* 출고원가금액(판매원가) */

       ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT,0))
       -
       (SUM( A.BUY_CST ) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)))
       AS INVENTORY_AMT,

       --(A.SALE_UPRICE * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY )  - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)))  AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       NVL((ROUND(A.REAL_SALE_AMT) - A.BUY_CST),0) AS GAIN_AMT,
       CASE WHEN A.SALE_UPRICE * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY )  = 0 THEN 0
       ELSE
           ROUND((A.SALE_UPRICE * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY )  - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
       END AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

       ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
       ROUND(NVL(B.RELEASE_QUANTITY, 0),0) AS RELEASE_BOX,           /* 출고BOX */
       D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
       ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
       D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
       ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
       D.RMA_QUANTITY,           /* 반품수량 */
       ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
       D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
       ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
       D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
       ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
       0 AS CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
       0 AS CONTROL_WGT,            /* 재고(폐기)조정중량*/
       0 AS CONTROL_AMT,             /* 재고(폐기)조정금액*/              
       A.CDATE,
       A.RELEASE_NUM
  FROM INVENTORY_MGMT_DELIVER D,
       PO_ORDER_MST           C,
       ENTRY_MST              G,
       SALE_ORDER_ITEM_MGMT   B,
       RELEASE_ITEM_MGMT      A,
       SALE_ORDER             F,
       (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
           GROUP BY T.DELIVER_NUM
         ) X,
       (SELECT
              T.DELIVER_NUM
            , SUM(T2.SALE_AMT) AS SALE_AMT
            , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
            , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
            , SUM(T2.REAL_WGT) AS REAL_WGT

            , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
            , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
        FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
        WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
        AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
              /* 재고포함 */
                 AND T2.RELEASE_DATE <= :startTerm              --재고포함
        GROUP BY T.DELIVER_NUM
       ) Y
             ,(
                SELECT T2.INITIAL_DELIVER_NUM
                      ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                      ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
                  FROM INVENTORY_MGMT_DELIVER T2
                WHERE T2.CURRENT_WH_DELIVER_DATE<= :startTerm   -- 입고,출고 누적
                GROUP BY T2.INITIAL_DELIVER_NUM
             ) K
             ,(
                SELECT T2.INITIAL_DELIVER_NUM
                      ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                      ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
                  FROM INVENTORY_MGMT_DELIVER T2
                WHERE T2.CURRENT_WH_DELIVER_DATE > :startTerm   -- 입고누적
        --        AND T2.DELIVER_TYPE='20'
                GROUP BY T2.INITIAL_DELIVER_NUM
             ) Z
       ,HLDC_PO_ITEM_MST K
 WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
   AND D.ENTRY_NUM = G.ENTRY_NUM(+)    --내수도 조회
   AND D.PO_ORDER_NUM = B.PO_ORDER_NUM(+)
   AND D.DELIVER_NUM = B.DELIVER_NUM(+)
   AND B.SALE_ORDER_NUM = A.SALE_ORDER_NUM
   AND B.SALE_ORDER_NUM_SEQ = A.SALE_ORDER_NUM_SEQ
   AND B.SALE_ORDER_NUM = F.SALE_ORDER_NUM(+)
   AND D.DELIVER_NUM = K.INITIAL_DELIVER_NUM(+)
   AND   D.DELIVER_NUM = X.DELIVER_NUM(+)

   AND D.DELIVER_NUM = Y.DELIVER_NUM(+)
   AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
   AND D.ITEM_CD = K.ITEM_CODE(+)
   AND D.DELIVER_STATUS <> '10' --가입고 제외
   AND A.RELEASE_DATE  <= :startTerm
   --AND D.FIRST_DELIVER_DATE <= :startTerm


   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 */
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고포함*/
        <#else>
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
        </#if>
   <#else>
       AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
   </#if>
   <#if deliverType?has_content>
       AND D.DELIVER_TYPE = :deliverType        /*입고유형*/
   </#if>
   <#if deliverStatus?has_content>
       AND D.DELIVER_STATUS = :deliverStatus      /*입고상태*/
   </#if>
    <#if search?has_content>
        <#if searchContents?has_content>
           <#if search == "A"> /* PO No */
               AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
           <#elseif search == "B"> /* 창고명 */
               AND D.WH_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "C"> /* 매입처명 */
               AND D.SPLR_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "D"> /* 매출처명 */
               AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "E"> /* 품목명 */
               AND D.ITEM_NM LIKE '%'||:searchContents||'%'
              </#if>
          </#if>
   </#if>
    <#if attachDept?has_content>
       AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
   </#if>
    <#if deliverNum?has_content>
       AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
   </#if>
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 2016.04.18 재고수량에서 재고금액 기준으로 변경, 조건은 쿼리 제일 하단으로 이동 */
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(Y.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) >= 0
        <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(Y.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
        </#if>
   <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(Y.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
   </#if>

UNION ALL            
SELECT
       '3' FLAG,
       L.CONTROL_DATE AS RELEASE_DATE,
       '조정(폐기)' AS DELIVER_STATUS,   /* 입고상태 */
       D.PO_ORDER_NUM,               /* PO NUM */
       D.DELIVER_NUM,
               D.INITIAL_DELIVER_NUM,
       NVL(D.DELIVER_NUM, D.INITIAL_DELIVER_NUM) AS ORDER_DELIVER_NUM,
       D.ATTACH_DEPT,                /* 귀속부서 코드 */
       SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
       D.SPLR_CD,                  /* 매입처코드 */
       D.SPLR_NM,                  /* 매입처명 */
       NULL AS SALSPLCE_CD,
       NULL AS SALSPLCE_NM,
       NULL AS SALE_PRCG_NM,           /*담당자*/
       D.LAST_SALE_EDATE,            /* 최종판매종료일 */
       D.ITEM_CD,                    /* 품목코드 */
       K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
       D.WH_CD,                      /* 창고코드 */
       D.WH_NM,                      /* 창고명 */
       CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
           C.BL_NUM
       ELSE
          (
            SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
            WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
            AND D.ITEM_CD = T.ITEM_CD
            AND D.ITEM_SEQ = T.ITEM_SEQ
          )
       END AS BL_NUM,              /* BL NO */

       D.FIRST_DELIVER_DATE,         /* 최초입고일 */
       D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
       D.UNIT,                       /* 입고단위 */
       0 AS DELIVER_QUANTITY,           /* 입고금액 */
       0 AS RELEASE_QUANTITY,           /* 출고수량 */
       0 AS INVENTORY_QUANTITY,
       0 AS DELIVER_WGT,           /* 입고금액 */
       0 AS RELEASE_WGT,           /* 출고중량 */
       0 AS REAL_WGT,           /* 실출고중량 */
       0 AS INVENTORY_WGT,
       CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
           0
       ELSE
          ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
       END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */
       0 AS DELIVER_AMT,           /* 입고금액 */
       0 SALE_AMT,
       0 AS SALE_CST,                   /* 출고원가금액(판매원가) */
       0 AS INVENTORY_AMT,
       0 AS GAIN_AMT,
       0 AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */
       0 AS DELIVER_BOX,           /* 입고BOX */
       0 AS RELEASE_BOX,           /* 출고BOX */
       D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
       ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
       D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
       ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
       0 AS RMA_QUANTITY,           /* 반품수량 */
       0 AS  RMA_WGT,                /* 반품중량 */
       0 AS WH_MOVE_QUANTITY,       /* 창고이동수량 */
       0 AS  WH_MOVE_WGT,            /* 창고이동중량 */
       0 AS ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
       0 AS  ORDER_REMAIN_WGT,        /* 주문잔여중량 */
       NVL(L.CONTROL_QUANTITY, 0) AS CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
       NVL(L.CONTROL_WGT, 0) AS CONTROL_WGT,                 /* 재고(폐기)조정중량*/
       NVL(L.CONTROL_AMT, 0) AS CONTROL_AMT,                  /* 재고(폐기)조정금액*/       
       L.CDATE,
       NULL AS RELEASE_NUM
  FROM INVENTORY_MGMT_DELIVER D,
       PO_ORDER_MST           C,
       (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
           GROUP BY T.DELIVER_NUM
         ) X,       
       HLDC_PO_ITEM_MST K
       ,INVENTORY_CONTROL_LOG L
 WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
   AND D.DELIVER_NUM = L.DELIVER_NUM
   AND D.DELIVER_NUM = X.DELIVER_NUM(+)
   AND D.ITEM_CD = K.ITEM_CODE(+)
   AND D.DELIVER_STATUS <> '10' --가입고 제외
   AND L.CONTROL_DATE  <= :startTerm
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 */
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고포함*/
        <#else>
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
        </#if>
   <#else>
       AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
   </#if>
   <#if deliverType?has_content>
       AND D.DELIVER_TYPE = :deliverType        /*입고유형*/
   </#if>
   <#if deliverStatus?has_content>
       AND D.DELIVER_STATUS = :deliverStatus      /*입고상태*/
   </#if>
    <#if search?has_content>
        <#if searchContents?has_content>
           <#if search == "A"> /* PO No */
               AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
           <#elseif search == "B"> /* 창고명 */
               AND D.WH_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "C"> /* 매입처명 */
               AND D.SPLR_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "D"> /* 매출처명 */
               AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "E"> /* 품목명 */
               AND D.ITEM_NM LIKE '%'||:searchContents||'%'
              </#if>
          </#if>
   </#if>
    <#if attachDept?has_content>
       AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
   </#if>
    <#if deliverNum?has_content>
       AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
   </#if>
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 2016.04.18 재고수량에서 재고금액 기준으로 변경, 조건은 쿼리 제일 하단으로 이동 */
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(Y.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) >= 0
        <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(Y.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
        </#if>
   <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(Y.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
   </#if> 

) T
WHERE 1=1
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 2016.04.18 재고수량에서 재고금액 기준으로 변경, 조건은 쿼리 제일 하단으로 이동 */
            AND DECODE(FLAG,1,1,INVENTORY_AMT)  >= 0
        <#else>
            --AND DECODE(FLAG,1,1,INVENTORY_AMT)  > 0
			  AND (T.PO_ORDER_NUM) IN (
			    SELECT D.PO_ORDER_NUM
			      FROM INVENTORY_MGMT_DELIVER D,
			           (SELECT T.DELIVER_NUM ,
			                   SUM(T2.BUY_CST) AS BUY_CST
			              FROM SALE_ORDER_ITEM_MGMT T,
			                   RELEASE_ITEM_MGMT T2
			             WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
			               AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
			               AND T2.RELEASE_DATE <= '20160418' --재고미포함
			             GROUP BY T.DELIVER_NUM ) A,
			           (SELECT T.DELIVER_NUM,
			                   SUM(T.DIV_AMT) AS DIV_AMT
			              FROM DELIVERITEM_OTHER_AMT_DIV T
			             GROUP BY T.DELIVER_NUM ) X,
			           (SELECT T.DELIVER_NUM,
			                   SUM(T.CONTROL_AMT) AS CONTROL_AMT
			              FROM INVENTORY_CONTROL_LOG T
			             GROUP BY T.DELIVER_NUM ) L
			     WHERE D.DELIVER_NUM = X.DELIVER_NUM(+)
			       AND D.DELIVER_NUM = A.DELIVER_NUM(+)
			       AND D.DELIVER_NUM = L.DELIVER_NUM(+)
			       AND D.DELIVER_STATUS <> '10' --가입고 제외
			     GROUP BY D.PO_ORDER_NUM
			    HAVING SUM(ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT, 0))) - NVL(A.BUY_CST, 0) - NVL(L.CONTROL_AMT, 0)) > 0
			   )            
        </#if>
   <#else>
            --AND DECODE(FLAG,1,1,INVENTORY_AMT)  > 0
			  AND (T.PO_ORDER_NUM) IN (
			    SELECT D.PO_ORDER_NUM
			      FROM INVENTORY_MGMT_DELIVER D,
			           (SELECT T.DELIVER_NUM ,
			                   SUM(T2.BUY_CST) AS BUY_CST
			              FROM SALE_ORDER_ITEM_MGMT T,
			                   RELEASE_ITEM_MGMT T2
			             WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
			               AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
			               AND T2.RELEASE_DATE <= '20160418' --재고미포함
			             GROUP BY T.DELIVER_NUM ) A,
			           (SELECT T.DELIVER_NUM,
			                   SUM(T.DIV_AMT) AS DIV_AMT
			              FROM DELIVERITEM_OTHER_AMT_DIV T
			             GROUP BY T.DELIVER_NUM ) X,
			           (SELECT T.DELIVER_NUM,
			                   SUM(T.CONTROL_AMT) AS CONTROL_AMT
			              FROM INVENTORY_CONTROL_LOG T
			             GROUP BY T.DELIVER_NUM ) L
			     WHERE D.DELIVER_NUM = X.DELIVER_NUM(+)
			       AND D.DELIVER_NUM = A.DELIVER_NUM(+)
			       AND D.DELIVER_NUM = L.DELIVER_NUM(+)
			       AND D.DELIVER_STATUS <> '10' --가입고 제외
			     GROUP BY D.PO_ORDER_NUM
			    HAVING SUM(ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT, 0))) - NVL(A.BUY_CST, 0) - NVL(L.CONTROL_AMT, 0)) > 0
			   )            
   </#if>


        ]]></statement>

	<!-- PO별 재고 이력을 조회한다. -->
	<statement name="pobyInventoryLog_BAK_20160418" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.pobyInventoryLog */
		<![CDATA[
/*PO별 재고이력*/
SELECT
   --ROW_NUMBER() OVER(PARTITION BY T.DELIVER_NUM, T.RELEASE_NUM, T.RELEASE_DATE,T.ATTACH_DEPT, T.WH_CD, T.PO_ORDER_NUM,  T.ITEM_CD ORDER BY T.DELIVER_NUM ) AS RANK,
   ROW_NUMBER() OVER(PARTITION BY T.DELIVER_NUM, T.INITIAL_DELIVER_NUM, T.ORDER_DELIVER_NUM,   T.RELEASE_NUM, T.RELEASE_DATE,T.ATTACH_DEPT, T.WH_CD, T.PO_ORDER_NUM,  T.ITEM_CD ORDER BY T.ORDER_DELIVER_NUM, FLAG ,  T.RELEASE_NUM DESC, T.DELIVER_NUM ) AS RANK,
   FLAG,
   DECODE(FLAG,1,'',RELEASE_DATE) AS RELEASE_DATE ,
   DELIVER_STATUS,   /* 입고상태 */
   ORDER_DELIVER_NUM,
   PO_ORDER_NUM,               /* PO NUM */
   DELIVER_NUM,
   ATTACH_DEPT,                /* 귀속부서 코드 */
   ATTACH_DEPT_NM,         /* 귀속부서명 */
   SPLR_CD,                  /* 매입처코드 */
   SPLR_NM,                  /* 매입처명 */
   SALSPLCE_CD,              /* 매출처 */
   SALSPLCE_NM,              /* 매출처명 */
   SALE_PRCG_NM,           /*담당자*/
   LAST_SALE_EDATE,            /* 최종판매종료일 */
   ITEM_CD,                    /* 품목코드 */
   ITEM_NM,                    /* 품목명 */
   WH_CD,                      /* 창고코드 */
   WH_NM,                      /* 창고명 */
   BL_NUM,              /* BL NO */
   FIRST_DELIVER_DATE,         /* 최초입고일 */
   CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
   UNIT,                       /* 입고단위 */
   DELIVER_QUANTITY,           /* 입고수량 */
   RELEASE_QUANTITY,           /* 출고수량 */
   INVENTORY_QUANTITY, /* 재고수량 */
   DELIVER_WGT,           /* 입고중량 */
   RELEASE_WGT,           /* 출고중량 */
   REAL_WGT,           /* 실출고중량 */
   INVENTORY_WGT,   /* 재고중량 */
   DELIVER_UPRICE_KRW,         /* 입고단가(원화) */
   ROUND(DELIVER_AMT) AS DELIVER_AMT,                /* 입고금액 --수정 */
   SALE_AMT,                   /* 출고금액(판매금액) */
   SALE_CST AS SALE_CST,                   /* 출고원가금액(판매원가) */
   --ROUND(T.DELIVER_AMT) - T.SALE_CST AS INVENTORY_AMT,
   --ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) AS INVENTORY_AMT,              /* 재고금액 */
   INVENTORY_AMT AS INVENTORY_AMT, /* 재고금액 */
   GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
   CASE WHEN SALE_AMT =0 THEN
          0
   ELSE
          ROUND(GAIN_AMT/SALE_AMT*100,1)
   END AS GAIN_RATE,  /* 이익률((이익액/출고금액)*100) */

   DELIVER_BOX,           /* 입고BOX */
   RELEASE_BOX,           /* 출고BOX */
   RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
   RELEASE_WAIT_WGT,       /* 출고대기중량 */
   RELEASE_END_QUANTITY,   /* 출고완료수량 */
   RELEASE_END_WGT,        /* 출고완료중량 */
   RMA_QUANTITY,           /* 반품수량 */
   RMA_WGT,                /* 반품중량 */
   WH_MOVE_QUANTITY,       /* 창고이동수량 */
   WH_MOVE_WGT,            /* 창고이동중량 */
   ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
   ORDER_REMAIN_WGT        /* 주문잔여중량 */
FROM
(
SELECT
       '1' FLAG,
       D.FIRST_DELIVER_DATE AS RELEASE_DATE ,
       '입고' AS DELIVER_STATUS,   /* 입고상태 */
       D.PO_ORDER_NUM,               /* PO NUM */
       D.DELIVER_NUM,
        D.INITIAL_DELIVER_NUM,
       NVL(D.DELIVER_NUM, D.INITIAL_DELIVER_NUM) AS ORDER_DELIVER_NUM,
       D.ATTACH_DEPT,                /* 귀속부서 코드 */
       SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
       D.SPLR_CD,                  /* 매입처코드 */
       D.SPLR_NM,                  /* 매입처명 */
       D.SALSPLCE_CD,              /* 매출처 */
       D.SALSPLCE_NM,              /* 매출처명 */
       (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
        WHERE T.SABUN = T2.DRAFTER_ID
        AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
        ) AS SALE_PRCG_NM,           /*담당자*/

       D.LAST_SALE_EDATE,            /* 최종판매종료일 */
       D.ITEM_CD,                    /* 품목코드 */
--       D.ITEM_NM,                    /* 품목명 */
       K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,

       D.WH_CD,                      /* 창고코드 */
       D.WH_NM,                      /* 창고명 */
       CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
           C.BL_NUM
       ELSE
          (
            SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
            WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
            AND D.ITEM_CD = T.ITEM_CD
            AND D.ITEM_SEQ = T.ITEM_SEQ
          )
       END AS BL_NUM,              /* BL NO */

       D.FIRST_DELIVER_DATE,         /* 최초입고일 */
       D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
       D.UNIT,                       /* 입고단위 */
       NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
       --NULL AS RELEASE_QUANTITY,           /* 출고수량 */

       CASE WHEN D.DELIVER_TYPE = '10' THEN
           NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0)
       ELSE
           NVL(A.RELEASE_QUANTITY,0)
       END
       RELEASE_QUANTITY,

       (NVL(D.DELIVER_QUANTITY,0)) - ( NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0) )AS INVENTORY_QUANTITY, /* 재고수량 */

       NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
       --NULL AS RELEASE_WGT,           /* 출고중량 */
       CASE WHEN D.DELIVER_TYPE = '10' THEN
           NVL(A.RELEASE_WGT,0) + NVL(Y.DELIVER_WGT,0)
       ELSE
           NVL(A.RELEASE_WGT,0)
       END
       RELEASE_WGT,
       CASE WHEN D.DELIVER_TYPE = '10' THEN
           NVL(A.REAL_WGT,0) + NVL(Y.DELIVER_WGT,0)
       ELSE
           NVL(A.REAL_WGT,0)
       END
       REAL_WGT, /* 실출고중량 */
       (NVL(D.DELIVER_WGT,0) - (  NVL(A.RELEASE_WGT,0) + NVL(Y.DELIVER_WGT,0) ) ) AS INVENTORY_WGT,   /* 재고중량 */

--       ROUND(D.DELIVER_UPRICE_KRW) AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */
       CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
           0
       ELSE
          ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
       END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */


       D.DELIVER_AMT +NVL(X.DIV_AMT,0) AS DELIVER_AMT,                /* 입고금액 --수정 */
       NULL SALE_AMT,                   /* 출고금액(판매금액) */
       NULL  AS SALE_CST,                   /* 출고원가금액(판매원가) */

       --ROUND(ROUND(D.DELIVER_UPRICE_KRW) * DECODE(D.UNIT, 'KG', NVL(D.DELIVER_WGT,0),  NVL(D.DELIVER_QUANTITY,0)  )) AS INVENTORY_AMT,
       ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT,0))
       -
       (SUM( A.BUY_CST ) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.CDATE  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)))
       AS INVENTORY_AMT,

--       ROUND((A.SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)))) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       NULL AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       CASE WHEN A.SALE_AMT = 0 THEN 0
       ELSE
           ROUND((A.SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
       END AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

       ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
       ROUND(NVL(B.RELEASE_QUANTITY, 0),0) AS RELEASE_BOX,           /* 출고BOX */
       D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
       ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
       D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
       ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
       D.RMA_QUANTITY,           /* 반품수량 */
       ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
       D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
       ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
       D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
       ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
       A.CDATE,
       A.RELEASE_NUM
  FROM INVENTORY_MGMT_DELIVER D,
       PO_ORDER_MST           C,
       (SELECT T.DELIVER_NUM
             , SUM(RELEASE_QUANTITY) AS RELEASE_QUANTITY
             , SUM(RELEASE_WGT) AS RELEASE_WGT

        FROM SALE_ORDER_ITEM_MGMT T GROUP BY T.DELIVER_NUM ) B,
       (SELECT
              T.DELIVER_NUM
            , SUM(T2.SALE_AMT) AS SALE_AMT
            , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
            , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
            , SUM(T2.REAL_WGT) AS REAL_WGT
            , SUM(T2.BUY_CST) AS BUY_CST

            , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
            , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
            , MAX(T2.CDATE)  AS CDATE
            , MIN(T2.RELEASE_NUM)  AS RELEASE_NUM
        FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
        WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
        AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
                      /* 재고포함 */
                 AND T2.RELEASE_DATE <= :startTerm              --재고포함
        GROUP BY T.DELIVER_NUM
       ) A,
       (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
           GROUP BY T.DELIVER_NUM
         ) X
        ,(
            SELECT T2.INITIAL_DELIVER_NUM
                  ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                  ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
              FROM INVENTORY_MGMT_DELIVER T2
            WHERE T2.CURRENT_WH_DELIVER_DATE<= :startTerm   -- 입고,출고 누적
            GROUP BY T2.INITIAL_DELIVER_NUM
         ) Y
         ,(
            SELECT T2.INITIAL_DELIVER_NUM
                  ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                  ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
              FROM INVENTORY_MGMT_DELIVER T2
            WHERE T2.CURRENT_WH_DELIVER_DATE > :startTerm   -- 입고누적
    --        AND T2.DELIVER_TYPE='20'
            GROUP BY T2.INITIAL_DELIVER_NUM
         ) Z
         ,HLDC_PO_ITEM_MST K
 WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
   AND D.DELIVER_NUM = X.DELIVER_NUM(+)
   AND D.DELIVER_NUM = B.DELIVER_NUM(+)
   AND D.DELIVER_NUM = A.DELIVER_NUM(+)
   AND D.DELIVER_NUM = Y.INITIAL_DELIVER_NUM(+)
   AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
   AND D.ITEM_CD = K.ITEM_CODE(+)

   AND D.DELIVER_STATUS <> '10' --가입고 제외
   AND D.DELIVER_TYPE ='10'     --정상입고
   --AND D.FIRST_DELIVER_DATE <= :startTerm
   AND NVL(A.RELEASE_QUANTITY,0) =0    --출고가 없는 건만 20151118 전윤희
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 2016.04.18 재고수량에서 재고금액 기준으로 변경, 조건은 쿼리 제일 하단으로 이동*/
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) >= 0
        <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
        </#if>
   <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
   </#if>

   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 */
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고포함*/
        <#else>
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
        </#if>
   <#else>
          AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
   </#if>

   <#if deliverType?has_content>
       AND D.DELIVER_TYPE = :deliverType        /*입고유형*/
   </#if>
   <#if deliverStatus?has_content>
       AND D.DELIVER_STATUS = :deliverStatus      /*입고상태*/
   </#if>
    <#if search?has_content>
        <#if searchContents?has_content>
           <#if search == "A"> /* PO No */
               AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
           <#elseif search == "B"> /* 창고명 */
               AND D.WH_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "C"> /* 매입처명 */
               AND D.SPLR_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "D"> /* 매출처명 */
               AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "E"> /* 품목명 */
               AND D.ITEM_NM LIKE '%'||:searchContents||'%'
              </#if>
          </#if>
   </#if>
    <#if attachDept?has_content>
       AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
   </#if>
    <#if deliverNum?has_content>
       AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
   </#if>

UNION ALL
      --이동입고 2
      SELECT
       '2' FLAG,
       D.FIRST_DELIVER_DATE AS RELEASE_DATE ,
       '이동입고' AS DELIVER_STATUS,   /* 입고상태 */
       D.PO_ORDER_NUM,               /* PO NUM */
       D.DELIVER_NUM,
        D.INITIAL_DELIVER_NUM,
       NVL(D.DELIVER_NUM, D.INITIAL_DELIVER_NUM) AS ORDER_DELIVER_NUM,
       D.ATTACH_DEPT,                /* 귀속부서 코드 */
       SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
       D.SPLR_CD,                  /* 매입처코드 */
       D.SPLR_NM,                  /* 매입처명 */
       D.SALSPLCE_CD,              /* 매출처 */
       D.SALSPLCE_NM,              /* 매출처명 */
       (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
        WHERE T.SABUN = T2.DRAFTER_ID
        AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
        ) AS SALE_PRCG_NM,           /*담당자*/

       D.LAST_SALE_EDATE,            /* 최종판매종료일 */
       D.ITEM_CD,                    /* 품목코드 */
       K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
       D.WH_CD,                      /* 창고코드 */
       D.WH_NM,                      /* 창고명 */
       CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
           C.BL_NUM
       ELSE
          (
            SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
            WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
            AND D.ITEM_CD = T.ITEM_CD
            AND D.ITEM_SEQ = T.ITEM_SEQ
          )
       END AS BL_NUM,              /* BL NO */

       D.FIRST_DELIVER_DATE,         /* 최초입고일 */
       D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
       D.UNIT,                       /* 입고단위 */
           NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.RELEASE_QUANTITY,0)
           ELSE
               NVL(A.RELEASE_QUANTITY,0) +NVL(Z.DELIVER_QUANTITY,0)
           END
           RELEASE_QUANTITY,

           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(D.DELIVER_QUANTITY,0) - (NVL(A.RELEASE_QUANTITY,0) )
           ELSE
               NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0)
           END
          AS INVENTORY_QUANTITY,   --시점재고


           NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.REAL_WGT,0)
           ELSE
               NVL(A.REAL_WGT,0)
           END
           RELEASE_WGT,
	       CASE WHEN D.DELIVER_TYPE = '10' THEN
	           NVL(A.REAL_WGT,0)
	       ELSE
	           NVL(A.REAL_WGT,0)
	       END
	       REAL_WGT, /* 실출고중량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(D.DELIVER_WGT,0) - (NVL(A.RELEASE_WGT,0) )
           ELSE
               NVL(D.DELIVER_WGT,0) - NVL(A.RELEASE_WGT,0)
           END
           AS INVENTORY_WGT,   --시점재고

--       ROUND(D.DELIVER_UPRICE_KRW) AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */
       CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
           0
       ELSE
          ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
       END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */


       D.DELIVER_AMT +NVL(X.DIV_AMT,0) AS DELIVER_AMT,                /* 입고금액 --수정 */
       NULL SALE_AMT,                   /* 출고금액(판매금액) */
       NULL  AS SALE_CST,                   /* 출고원가금액(판매원가) */

--       ROUND(ROUND(D.DELIVER_UPRICE_KRW) * DECODE(D.UNIT, 'KG', NVL(D.DELIVER_WGT,0),  NVL(D.DELIVER_QUANTITY,0)  )) AS INVENTORY_AMT,
       ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT,0))
       -
       (SUM( NVL(A.BUY_CST,0) ) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.CDATE  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)))
       AS INVENTORY_AMT,

--       ROUND((A.SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)))) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       NULL AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       CASE WHEN A.SALE_AMT = 0 THEN 0
       ELSE
           ROUND((A.SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
       END AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

       ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
       NULL AS RELEASE_BOX,           /* 출고BOX */
       D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
       ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
       D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
       ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
       D.RMA_QUANTITY,           /* 반품수량 */
       ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
       D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
       ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
       D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
       ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
       A.CDATE,
       A.RELEASE_NUM

        FROM INVENTORY_MGMT_DELIVER D,
             PO_ORDER_MST           C,
             (
                SELECT
                      T.DELIVER_NUM
                    , T2.SALE_AMT AS SALE_AMT
                    , T2.RELEASE_QUANTITY AS RELEASE_QUANTITY
                    , T2.RELEASE_WGT AS RELEASE_WGT
                    , T2.REAL_WGT AS REAL_WGT

                    , T2.PURCHASE_RETURN_QUANTITY AS PURCHASE_RETURN_QUANTITY
                    , T2.PURCHASE_RETURN_WGT AS PURCHASE_RETURN_WGT
                    , T2.CDATE  AS CDATE
                    , T2.RELEASE_NUM  AS RELEASE_NUM
                    , T2.BUY_CST
                    , T2.SALE_UPRICE
                    , T2.REAL_SALE_AMT
                FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
                WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
                AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
                AND T2.RELEASE_DATE <= :startTerm              --재고포함
             ) A,
             (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                 GROUP BY T.DELIVER_NUM
               ) X
             ,(
                SELECT T2.INITIAL_DELIVER_NUM
                      ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                      ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
                  FROM INVENTORY_MGMT_DELIVER T2
                WHERE T2.CURRENT_WH_DELIVER_DATE<= :startTerm   -- 입고,출고 누적
                GROUP BY T2.INITIAL_DELIVER_NUM
             ) Y
             ,(
                SELECT T2.INITIAL_DELIVER_NUM
                      ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                      ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
                  FROM INVENTORY_MGMT_DELIVER T2
                WHERE T2.CURRENT_WH_DELIVER_DATE > :startTerm   -- 입고누적
        --        AND T2.DELIVER_TYPE='20'
                GROUP BY T2.INITIAL_DELIVER_NUM
             ) Z
             ,HLDC_PO_ITEM_MST K
       WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
         AND D.DELIVER_NUM = X.DELIVER_NUM(+)
         AND D.DELIVER_NUM = A.DELIVER_NUM(+)
         AND D.DELIVER_NUM = Y.INITIAL_DELIVER_NUM(+)
         AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
         AND D.ITEM_CD = K.ITEM_CODE(+)
         AND D.DELIVER_STATUS <> '10' --가입고 제외
         AND D.DELIVER_TYPE ='20'     --이동입고
         --AND D.FIRST_DELIVER_DATE <= :startTerm
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 */
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고포함*/
        <#else>
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
        </#if>
   <#else>
       AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
   </#if>
   <#if deliverType?has_content>
       AND D.DELIVER_TYPE = :deliverType        /*입고유형*/
   </#if>
   <#if deliverStatus?has_content>
       AND D.DELIVER_STATUS = :deliverStatus      /*입고상태*/
   </#if>
    <#if search?has_content>
        <#if searchContents?has_content>
           <#if search == "A"> /* PO No */
               AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
           <#elseif search == "B"> /* 창고명 */
               AND D.WH_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "C"> /* 매입처명 */
               AND D.SPLR_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "D"> /* 매출처명 */
               AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "E"> /* 품목명 */
               AND D.ITEM_NM LIKE '%'||:searchContents||'%'
              </#if>
          </#if>
   </#if>
    <#if attachDept?has_content>
       AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
   </#if>
    <#if deliverNum?has_content>
       AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
   </#if>
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 2016.04.18 재고수량에서 재고금액 기준으로 변경, 조건은 쿼리 제일 하단으로 이동 */
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) >= 0
        <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
        </#if>
   <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
   </#if>

      UNION ALL

SELECT
       '3' FLAG,
       A.RELEASE_DATE,
       '출고' AS DELIVER_STATUS,   /* 입고상태 */
       D.PO_ORDER_NUM,               /* PO NUM */
       D.DELIVER_NUM,
               D.INITIAL_DELIVER_NUM,
       NVL(D.DELIVER_NUM, D.INITIAL_DELIVER_NUM) AS ORDER_DELIVER_NUM,
       D.ATTACH_DEPT,                /* 귀속부서 코드 */
       SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
       D.SPLR_CD,                  /* 매입처코드 */
       D.SPLR_NM,                  /* 매입처명 */
       A.CUST_CD AS SALSPLCE_CD,
       (SELECT T.CUSTNM FROM ST_CUST T WHERE T.CUSTCD = A.CUST_CD AND T.USE_YN='Y' ) AS SALSPLCE_NM,
       (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
        WHERE T.SABUN = T2.DRAFTER_ID
        AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
        ) AS SALE_PRCG_NM,           /*담당자*/

       D.LAST_SALE_EDATE,            /* 최종판매종료일 */
       D.ITEM_CD,                    /* 품목코드 */
       --D.ITEM_NM,                    /* 품목명 */
       K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
       D.WH_CD,                      /* 창고코드 */
       D.WH_NM,                      /* 창고명 */
       CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
           C.BL_NUM
       ELSE
          (
            SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
            WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
            AND D.ITEM_CD = T.ITEM_CD
            AND D.ITEM_SEQ = T.ITEM_SEQ
          )
       END AS BL_NUM,              /* BL NO */

       D.FIRST_DELIVER_DATE,         /* 최초입고일 */
       D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
       D.UNIT,                       /* 입고단위 */
             --NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
       CASE WHEN RANK() OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE) = 1 THEN
           NVL(D.DELIVER_QUANTITY,0)
       ELSE
            0
       END AS DELIVER_QUANTITY,           /* 입고금액 */

       NVL(A.RELEASE_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0) AS RELEASE_QUANTITY,           /* 출고수량 */
       NVL(D.DELIVER_QUANTITY,0)  - (SUM(NVL(A.RELEASE_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0) + NVL(K.DELIVER_QUANTITY,0)) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW))
       AS INVENTORY_QUANTITY,

       --NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
       CASE WHEN RANK() OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE) = 1 THEN
           NVL(D.DELIVER_WGT,0)
       ELSE
            0
       END AS DELIVER_WGT,           /* 입고금액 */

       NVL(A.RELEASE_WGT,0)  + NVL(K.DELIVER_WGT,0)  + NVL(K.DELIVER_WGT,0) AS RELEASE_WGT,           /* 출고중량 */
       NVL(A.REAL_WGT,0)  + NVL(K.DELIVER_WGT,0)  + NVL(K.DELIVER_WGT,0) AS REAL_WGT,           /* 실출고중량 */
--       NVL(D.DELIVER_WGT,0)  - NVL(K.DELIVER_WGT,0)  - NVL(K.DELIVER_WGT,0) - NVL(A.RELEASE_WGT,0) AS INVENTORY_WGT,   /* 재고중량 */
       NVL(D.DELIVER_WGT,0)  - (SUM(NVL(A.RELEASE_WGT,0) + NVL(K.DELIVER_WGT,0) + NVL(K.DELIVER_WGT,0)) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW))
       AS INVENTORY_WGT,


       CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
           0
       ELSE
          ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
       END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

--       NULL AS DELIVER_AMT,                /* 입고금액 --수정 */
       CASE WHEN RANK() OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD, D.ITEM_SEQ ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE) = 1 THEN
           CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
               0
           ELSE
              ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)))
           END
       ELSE
            0
       END AS DELIVER_AMT,           /* 입고금액 */

       ROUND(A.REAL_SALE_AMT) SALE_AMT,
       --(D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)  AS SALE_CST,                   /* 출고원가금액(판매원가) */
       A.BUY_CST AS SALE_CST,                   /* 출고원가금액(판매원가) */

       ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT,0))
       -
       (SUM( A.BUY_CST ) OVER(PARTITION BY D.DELIVER_NUM,D.ITEM_CD ORDER BY D.DELIVER_NUM, A.RELEASE_NUM, D.ITEM_CD, D.ITEM_SEQ, A.RELEASE_DATE, A.CDATE  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)))
       AS INVENTORY_AMT,

       --(A.SALE_UPRICE * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY )  - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)))  AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
       NVL((ROUND(A.REAL_SALE_AMT) - A.BUY_CST),0) AS GAIN_AMT,
       CASE WHEN A.SALE_UPRICE * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY )  = 0 THEN 0
       ELSE
           ROUND((A.SALE_UPRICE * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY )  - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
       END AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

       ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
       ROUND(NVL(B.RELEASE_QUANTITY, 0),0) AS RELEASE_BOX,           /* 출고BOX */
       D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
       ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
       D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
       ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
       D.RMA_QUANTITY,           /* 반품수량 */
       ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
       D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
       ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
       D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
       ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
       A.CDATE,
       A.RELEASE_NUM
  FROM INVENTORY_MGMT_DELIVER D,
       PO_ORDER_MST           C,
       ENTRY_MST              G,
       SALE_ORDER_ITEM_MGMT   B,
       RELEASE_ITEM_MGMT      A,
       SALE_ORDER             F,
       (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
           GROUP BY T.DELIVER_NUM
         ) X,
       (SELECT
              T.DELIVER_NUM
            , SUM(T2.SALE_AMT) AS SALE_AMT
            , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
            , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
            , SUM(T2.REAL_WGT) AS REAL_WGT

            , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
            , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
        FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
        WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
        AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
              /* 재고포함 */
                 AND T2.RELEASE_DATE <= :startTerm              --재고포함
        GROUP BY T.DELIVER_NUM
       ) Y
             ,(
                SELECT T2.INITIAL_DELIVER_NUM
                      ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                      ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
                  FROM INVENTORY_MGMT_DELIVER T2
                WHERE T2.CURRENT_WH_DELIVER_DATE<= :startTerm   -- 입고,출고 누적
                GROUP BY T2.INITIAL_DELIVER_NUM
             ) K
             ,(
                SELECT T2.INITIAL_DELIVER_NUM
                      ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
                      ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
                  FROM INVENTORY_MGMT_DELIVER T2
                WHERE T2.CURRENT_WH_DELIVER_DATE > :startTerm   -- 입고누적
        --        AND T2.DELIVER_TYPE='20'
                GROUP BY T2.INITIAL_DELIVER_NUM
             ) Z
       ,HLDC_PO_ITEM_MST K
 WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
   AND D.ENTRY_NUM = G.ENTRY_NUM(+)    --내수도 조회
   AND D.PO_ORDER_NUM = B.PO_ORDER_NUM(+)
   AND D.DELIVER_NUM = B.DELIVER_NUM(+)
   AND B.SALE_ORDER_NUM = A.SALE_ORDER_NUM
   AND B.SALE_ORDER_NUM_SEQ = A.SALE_ORDER_NUM_SEQ
   AND B.SALE_ORDER_NUM = F.SALE_ORDER_NUM(+)
   AND D.DELIVER_NUM = K.INITIAL_DELIVER_NUM(+)
   AND   D.DELIVER_NUM = X.DELIVER_NUM(+)

   AND D.DELIVER_NUM = Y.DELIVER_NUM(+)
   AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
   AND D.ITEM_CD = K.ITEM_CODE(+)
   AND D.DELIVER_STATUS <> '10' --가입고 제외
   AND A.RELEASE_DATE  <= :startTerm
   --AND D.FIRST_DELIVER_DATE <= :startTerm


   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 */
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고포함*/
        <#else>
            AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
        </#if>
   <#else>
       AND D.CURRENT_WH_DELIVER_DATE <= :startTerm   /*입고일자 --시점재고 대상 재고미포함*/
   </#if>
   <#if deliverType?has_content>
       AND D.DELIVER_TYPE = :deliverType        /*입고유형*/
   </#if>
   <#if deliverStatus?has_content>
       AND D.DELIVER_STATUS = :deliverStatus      /*입고상태*/
   </#if>
    <#if search?has_content>
        <#if searchContents?has_content>
           <#if search == "A"> /* PO No */
               AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
           <#elseif search == "B"> /* 창고명 */
               AND D.WH_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "C"> /* 매입처명 */
               AND D.SPLR_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "D"> /* 매출처명 */
               AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
           <#elseif search == "E"> /* 품목명 */
               AND D.ITEM_NM LIKE '%'||:searchContents||'%'
              </#if>
          </#if>
   </#if>
    <#if attachDept?has_content>
       AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
   </#if>
    <#if deliverNum?has_content>
       AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
   </#if>
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 2016.04.18 재고수량에서 재고금액 기준으로 변경, 조건은 쿼리 제일 하단으로 이동 */
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(Y.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) >= 0
        <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(Y.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
        </#if>
   <#else>
            --AND NVL(D.DELIVER_QUANTITY,0) - NVL(Y.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) - NVL(D.RMA_QUANTITY,0) - NVL(A.PURCHASE_RETURN_QUANTITY,0) > 0
   </#if>




) T
WHERE 1=1
   <#if chkInventoryYn?has_content>
        <#if chkInventoryYn == "Y"> /* 재고포함 2016.04.18 재고수량에서 재고금액 기준으로 변경, 조건은 쿼리 제일 하단으로 이동 */
            AND DECODE(FLAG,1,1,INVENTORY_AMT)  >= 0
        <#else>
            AND DECODE(FLAG,1,1,INVENTORY_AMT)  > 0
        </#if>
   <#else>
            AND DECODE(FLAG,1,1,INVENTORY_AMT)  > 0
   </#if>


        ]]>
	</statement>

	<!-- 출고내역을 조회한다. -->
	<statement name="releaseDescInquery" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.releaseDescInquery */
		<![CDATA[
SELECT (SELECT SCC_CODE_NM('PO_TYPE', PO_TYPE)
          FROM PO_PROPOSAL_MST
         WHERE PO_PROPOSAL_NUM = C.PO_PROPOSAL_NUM) AS PO_TYPE_NM,  /* 구매형태 */
       SCC_CODE_NM('SHIPMENT_TYPE_CD', A.SHIPMENT_TYPE) AS SHIPMENT_TYPE_NM,    /* 주문유형 */
       SCC_CODE_NM('RELEASE_STATUS_CD', A.RELEASE_STATUS_CD) AS RELEASE_STATUS_NM, /* 출고상태 */
       B.PO_ORDER_NUM,                  /* PO NO */
       SCC_CODE_NM('ATTACH_DEPT', A.ATTACH_DEPT) AS ATTACH_DEPT_NM,                /* 귀속부서 */
       SCC_CODE_NM('SALE_AGED', A.SALE_AGED) AS SALE_AGED_NM,   /* 판매경로 */
       CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
           C.BL_NUM
       ELSE
          (
            SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
            WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
            AND D.ITEM_CD = T.ITEM_CD
            AND D.ITEM_SEQ = T.ITEM_SEQ
          )
       END AS BL_NUM,              /* BL NO */
       D.INCOME_DTR_DSCT_NUM,        /* 수입유통식별번호 */
       A.RELEASE_NUM,                   /* 출고번호 */
       A.ITEM_CD,                    /* 품목코드 */
       --A.ITEM_NM,                    /* 품목명 */
       Y.ITEM_NAME||' '||Y.ITEM_SIZE AS ITEM_NM,
       F.ORDER_DATE,                 /* 주문일자 */
       A.RELEASE_CONFIRM_DATE,       /* 출고일(출고확정일자) */
       F.RELEASEPLCE_CD,             /* 출고처코드(판매처코드) */
       F.RELEASEPLCE_NM,             /* 출고처명(판매처명) */
       ROUND(A.RELEASE_WGT, 2) AS RELEASE_WGT,             /* 출고중량 */
       ROUND(A.REAL_WGT, 2) AS REAL_WGT,                   /* 실중량 */
       A.UNIT,           /* 단위 */
       A.SALE_UPRICE,    /* 판매단가*/
       --ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))  SALE_CST,                   /* 출고원가금액(판매원가) */
       A.BUY_CST AS SALE_CST,
       A.SALE_AMT,       /* 판매금액*/
       A.REAL_SALE_AMT,  /* 실판매금액*/
       CASE WHEN Y.TAX_CODE = '100' THEN --과세
           ROUND( A.REAL_SALE_AMT * 0.1)
       ELSE
           0
       END VAT_AMT,  --부가세

       A.REAL_SALE_AMT
       +
       CASE WHEN Y.TAX_CODE = '100' THEN --과세
           ROUND( A.REAL_SALE_AMT * 0.1)
       ELSE
           0
       END AS TOT_AMT,

       (A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))) AS GAIN_AMT,              /* 이익액(출 */
       NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
       NVL(B.RELEASE_QUANTITY,0) AS RELEASE_QUANTITY,           /* 출고수량 */
       NVL((NVL(D.DELIVER_QUANTITY,0) - NVL(B.RELEASE_QUANTITY,0)),0) AS INVENTORY_QUANTIRY,      /* 재고수량 */
       D.FIRST_DELIVER_DATE,         /* 최초입고일 */
       D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
       D.SPLR_NM,                  /* 매입처명 */
       D.SALSPLCE_NM,              /* 매출처명 */
       (SELECT T.NM_KOR
          FROM HR_PERSONAL T
             , SCC_CC T2
         WHERE T2.CC_CD = T.CC_CD
           AND T.SABUN = (SELECT DRAFTER_ID
                            FROM PO_PROPOSAL_MST
                           WHERE PO_PROPOSAL_NUM = C.PO_PROPOSAL_NUM)) AS DRAFTER_NM,  /* 구매담당자(기안자) */
       (SELECT T.NM_KOR
          FROM HR_PERSONAL T
             , SCC_CC T2
         WHERE T2.CC_CD = T.CC_CD
           AND A.SALE_PRCG_ID =T.SABUN) AS SALE_PRCG_NM,                      /* 판매담당자 */
       D.WH_CD,                         /* 창고코드 */
       D.WH_NM,                         /* 창고명 */
       A.RELEASE_PUBLISH_YN,            /* 출고증발행여부 */
       A.RELEASE_PUBLISH_NUM_OF_TIMES,  /* 출고증발행횟수 */
       (SELECT NM_KOR
          FROM SCC_USERINFO
         WHERE SABUN = A.CUSER) AS CUSER,                         /* 등록자 */
       TO_CHAR(A.CDATE, 'YYYYMMDD') AS CDATE,                         /* 등록일 */
       (SELECT NM_KOR
          FROM SCC_USERINFO
         WHERE SABUN = A.UUSER) AS UUSER,                         /* 수정자 */
       TO_CHAR(A.UDATE, 'YYYYMMDD') AS UDATE                          /* 수정일 */
  FROM RELEASE_ITEM_MGMT      A,
       SALE_ORDER_ITEM_MGMT   B,
       PO_ORDER_MST           C,
       INVENTORY_MGMT_DELIVER D,
       ENTRY_ITEM_DETAIL      E,
       SALE_ORDER             F,
       (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
           GROUP BY T.DELIVER_NUM
         ) X,
       HLDC_PO_ITEM_MST Y
 WHERE A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
   AND B.PO_ORDER_NUM = C.PO_ORDER_NUM
   AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
   AND B.DELIVER_NUM = D.DELIVER_NUM
   AND D.ENTRY_NUM = E.ENTRY_NUM(+)
   AND D.ENTRY_ITEM_SEQ = E.ENTRY_ITEM_SEQ(+)
   AND F.SALE_ORDER_NUM = B.SALE_ORDER_NUM
   AND D.DELIVER_NUM = X.DELIVER_NUM(+)
   AND A.ITEM_CD = Y.ITEM_CODE(+)
   <#if term?has_content>
       <#if term == "A">   /* 주문일자 */
           AND F.ORDER_DATE BETWEEN :startTerm AND :endTerm
       <#elseif term == "B">   /* 승인요청일자 */
           AND A.APPRV_REQ_DATE BETWEEN :startTerm AND :endTerm
       <#elseif term == "C">   /* 승인일자 */
           AND A.APPRV_DATE BETWEEN :startTerm AND :endTerm
       <#elseif term == "D">    /* 출고확정일자 */
           AND A.RELEASE_CONFIRM_DATE BETWEEN :startTerm AND :endTerm
       <#elseif term == "E">    /* 출고일자 */
           AND A.RELEASE_DATE BETWEEN :startTerm AND :endTerm
       </#if>
   </#if>

   <#if search?has_content && searchContents?has_content>
       <#if search == "A"> /* PO No */
           AND B.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
       <#elseif search == "B"> /* 출고번호 */
           AND A.RELEASE_NUM LIKE '%'||:searchContents||'%'
       <#elseif search == "C"> /* 출고처 */
       AND EXISTS
            (
             SELECT
                    C.UPJANGNM AS CUSTNM
             FROM   ST_CUST A,
                    ST_UPJANG B,
                    FMS_UPJANG_V C
             WHERE  B.CUSTCD = A.CUSTCD
             AND    C.UPJANG = B.UPJANG
             AND B.CC_CD IN (
               SELECT A.SET1
               FROM   SCC_COMMON_CODE A
               WHERE  A.GROUP_CODE = 'ATTACH_DEPT'
               AND    A.USE_YN = 'Y'
             )
             AND    A.CUSTCD = A.CUST_CD
             AND    CUSTNM LIKE '%'||:searchContents||'%'
            )
       </#if>
   </#if>

   <#if shipmentTypeCd?has_content>
       AND A.SHIPMENT_TYPE = :shipmentTypeCd
   </#if>

   <#if releaseStatusCd?has_content>
       AND A.RELEASE_STATUS_CD = :releaseStatusCd
   </#if>

   <#if attachDept?has_content>
       AND A.ATTACH_DEPT = :attachDept
   </#if>

   <#if saleAged?has_content>
       AND F.SALE_AGED = :saleAged
   </#if>

 ORDER BY D.PO_ORDER_NUM,
          A.RELEASE_NUM        DESC,
          A.SALE_ORDER_NUM,
          A.SALE_ORDER_NUM_SEQ DESC

        ]]>
	</statement>

	<!-- 창고/품목별 재고대장 -->
	<statement name="whItemInquery" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.whItemInquery */
		<![CDATA[
  SELECT
     T.PO_ORDER_NUM,               /* PO NUM */
     T.LC_NUM,
     T.ITEM_CD,                    /* 품목코드 */
     T.ITEM_NM,                    /* 품목명 */
     T.WH_CD,                      /* 창고코드 */
     T.WH_NM,                      /* 창고명 */
     T.CURRENT_WH_DELIVER_DATE AS FIRST_DELIVER_DATE ,    /* 현재창고입고일 */
     T.UNIT,                       /* 입고단위 */
     SUM(T.INVENTORY_QUANTITY) AS INVENTORY_QUANTITY,
     SUM(T.INVENTORY_WGT) AS INVENTORY_WGT

     ,SUM(T.DELIVER_QUANTITY) AS DELIVER_QUANTITY
     ,SUM(T.DELIVER_WGT) AS DELIVER_WGT

     ,SUM(T.RELEASE_QUANTITY) AS RELEASE_QUANTITY
     ,SUM(T.RELEASE_WGT) AS RELEASE_WGT


     ,NVL(SUM(T.RELEASE_WAIT_QUANTITY),0) AS RELEASE_WAIT_QUANTITY       /*출고대기수량*/
     ,NVL(SUM(T.RELEASE_WAIT_WGT),0)  AS  RELEASE_WAIT_WGT           /*출고대기중량*/
     ,NVL(SUM(T.RELEASE_QUANTITY),0)  AS RELEASE_END_QUANTITY       /**출고완료수량*/
     ,NVL(SUM(T.RELEASE_WGT),0)  AS RELEASE_END_WGT            /**출고완료중량*/

     ,NVL(SUM(T.ORDER_REMAIN_QUANTITY),0)  AS ORDER_REMAIN_QUANTITY  /**주문수량*/
     ,NVL(SUM(T.ORDER_REMAIN_WGT),0)  AS ORDER_REMAIN_WGT          /**주문중량*/

     ,NVL(SUM(NVL(T.PURCHASE_RETURN_QUANTITY,0)),0)  AS PURCHASE_RETURN_QUANTITY   --환입수량
     ,NVL(SUM(NVL(T.PURCHASE_RETURN_WGT,0)),0)  AS PURCHASE_RETURN_WGT         --환입중량

     ,NVL(SUM(NVL(T.RELEASE_WAIT_WGT,0)) -SUM(NVL(T.RELEASE_END_QUANTITY,0)),0)   RELEASE_END_REMAIN_QTY  /**출고완료잔량*/
     ,NVL(SUM(T.RMA_QUANTITY),0)  AS RMA_QUANTITY          /*반품수량*/
     ,NVL(SUM(T.RMA_WGT),0)  AS RMA_WGT             /*반품중량*/
     ,NVL(SUM(T.WH_MOVE_QUANTITY),0)  AS WH_MOVE_QUANTITY           /*창고이동수량*/
     ,NVL(SUM(T.WH_MOVE_WGT),0)  AS WH_MOVE_WGT                /*창고이동중량*/
     ,NVL(SUM(T.INVENTORY_CONTROL_QUANTITY),0)  AS INVENTORY_CONTROL_QUANTITY
     ,NVL(SUM(T.INVENTORY_CONTROL_WGT),0)  AS INVENTORY_CONTROL_WGT

  FROM
  (
      SELECT SCC_CODE_NM('DELIVER_STATUS', D.DELIVER_STATUS) AS DELIVER_STATUS,   /* 입고상태 */
             D.PO_ORDER_NUM,               /* PO NUM */
             D.ATTACH_DEPT,                /* 귀속부서 코드 */
             SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
             D.SPLR_CD,                  /* 매입처코드 */
             D.SPLR_NM,                  /* 매입처명 */
             D.SALSPLCE_CD,              /* 매출처 */
             D.SALSPLCE_NM,              /* 매출처명 */
             C.LC_NUM,
             (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
              WHERE T.SABUN = T2.DRAFTER_ID
              AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
              ) AS SALE_PRCG_NM,           /*담당자*/

             D.LAST_SALE_EDATE,            /* 최종판매종료일 */
             D.ITEM_CD,                    /* 품목코드 */
             K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
             D.WH_CD,                      /* 창고코드 */
             D.WH_NM,                      /* 창고명 */
             CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
                 C.BL_NUM
             ELSE
                (
                  SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                  WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
                  AND D.ITEM_CD = T.ITEM_CD
                  AND D.ITEM_SEQ = T.ITEM_SEQ
                )
             END AS BL_NUM,              /* BL NO */

             D.FIRST_DELIVER_DATE,         /* 최초입고일 */
             D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
             D.UNIT,                       /* 입고단위 */
             NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0)
           ELSE
               NVL(A.RELEASE_QUANTITY,0)
           END
           RELEASE_QUANTITY,
             /*
            NVL((MAX(D.DELIVER_QUANTITY) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM))),0)
            -
            NVL(((SUM( D.DELIVER_QUANTITY  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )) -D.DELIVER_QUANTITY),0)
            - NVL(A.RELEASE_QUANTITY,0)
            - NVL(D.WH_MOVE_QUANTITY,0)
            AS INVENTORY_QUANTITY,   --시점재고
            */

            D.DELIVER_QUANTITY - NVL(A.RELEASE_QUANTITY,0)  - NVL(Y.DELIVER_QUANTITY,0) AS INVENTORY_QUANTITY,

            NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
            CASE WHEN D.DELIVER_TYPE = '10' THEN
                NVL(A.RELEASE_WGT,0) + NVL(Y.DELIVER_WGT,0)
            ELSE
                NVL(A.RELEASE_WGT,0)
            END
            RELEASE_WGT,
            D.DELIVER_WGT - NVL(A.RELEASE_WGT,0)  - NVL(Y.DELIVER_WGT,0) AS INVENTORY_WGT,   --시점재고

             CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
                 0
             ELSE
                ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
             END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

             NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) AS DELIVER_AMT,                /* 입고금액 --수정 */
             --A.BUY_CST AS DELIVER_AMT,
             NVL(A.SALE_AMT,0) AS SALE_AMT,                   /* 출고금액(판매금액) */
             --ROUND(NVL(ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)),0))  AS SALE_CST,                   /* 출고원가금액(판매원가) */
             A.BUY_CST  AS SALE_CST,                   /* 출고원가금액(판매원가) */

             --NVL(D.DELIVER_UPRICE_KRW * DECODE(D.UNIT, 'KG', (NVL(D.DELIVER_WGT,0) - NVL(A.REAL_WGT,0)),  (NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0))  ),0) AS INVENTORY_AMT,
             ROUND((SUM(  D.DELIVER_AMT+NVL(X.DIV_AMT,0)  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING))
             -BUY_CST )
             AS INVENTORY_AMT,

             --NVL((A.SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
             NVL((A.SALE_AMT - A.BUY_CST),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */

             NVL(CASE WHEN A.SALE_AMT = 0 THEN 0
             ELSE
                 ROUND((A.SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
             END,0) AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

             ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
             ROUND(NVL(B.RELEASE_QUANTITY, 0),0) AS RELEASE_BOX,           /* 출고BOX */
             D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
             ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
             D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
             ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
             D.RMA_QUANTITY,           /* 반품수량 */
             ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
             D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
             ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
             D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
             ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
             D.INVENTORY_CONTROL_QUANTITY AS INVENTORY_CONTROL_QUANTITY,        /* 주문잔여중량 */
             ROUND(D.INVENTORY_CONTROL_WGT, 2) AS INVENTORY_CONTROL_WGT,        /* 주문잔여중량 */
             A.PURCHASE_RETURN_QUANTITY,
             A.PURCHASE_RETURN_WGT
      FROM
      (
          SELECT * FROM INVENTORY_MGMT_DELIVER T
          WHERE T.FIRST_DELIVER_DATE<=:startTerm
          AND T.DELIVER_TYPE='10'
          UNION ALL
          SELECT * FROM INVENTORY_MGMT_DELIVER T2
          WHERE T2.CURRENT_WH_DELIVER_DATE<=:startTerm
          AND T2.DELIVER_TYPE='20'
      ) D,
       PO_ORDER_MST           C,
       (SELECT T.DELIVER_NUM
             , SUM(RELEASE_QUANTITY) AS RELEASE_QUANTITY
             , SUM(RELEASE_WGT) AS RELEASE_WGT

        FROM SALE_ORDER_ITEM_MGMT T GROUP BY T.DELIVER_NUM ) B,
       (SELECT
              T.DELIVER_NUM
            , ROUND(SUM(T2.REAL_SALE_AMT)) AS SALE_AMT
            , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
            , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
            , SUM(T2.REAL_WGT) AS REAL_WGT
            , SUM(T2.BUY_CST) AS BUY_CST

            , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
            , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
        FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
        WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
        AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
        AND T2.RELEASE_DATE <= :startTerm              --재고미포함
        GROUP BY T.DELIVER_NUM
       ) A,
       (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
           GROUP BY T.DELIVER_NUM
         ) X
      ,(
         SELECT T2.INITIAL_DELIVER_NUM
               ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
               ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
           FROM INVENTORY_MGMT_DELIVER T2
         WHERE T2.CURRENT_WH_DELIVER_DATE<= :startTerm   -- 입고,출고 누적
         GROUP BY T2.INITIAL_DELIVER_NUM
      ) Y
      ,(
         SELECT T2.INITIAL_DELIVER_NUM
               ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
               ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
           FROM INVENTORY_MGMT_DELIVER T2
         WHERE T2.CURRENT_WH_DELIVER_DATE > :startTerm   -- 입고누적
--         AND T2.DELIVER_TYPE='20'
         GROUP BY T2.INITIAL_DELIVER_NUM
      ) Z
      ,HLDC_PO_ITEM_MST K
      WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
      AND D.DELIVER_NUM = X.DELIVER_NUM(+)
      AND D.DELIVER_NUM = B.DELIVER_NUM(+)
      AND D.DELIVER_NUM = A.DELIVER_NUM(+)
      AND D.DELIVER_NUM = Y.INITIAL_DELIVER_NUM(+)
      AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
      AND D.ITEM_CD = K.ITEM_CODE(+)
      AND D.DELIVER_STATUS <> '10' --가입고 제외

     <#if whNm?has_content>
         AND D.WH_NM LIKE '%' || :whNm || '%'
     </#if>

     <#if itemNm?has_content>
         AND D.ITEM_NM LIKE '%' || :itemNm || '%'
     </#if>
     <#if attachDept?has_content>
         AND D.ATTACH_DEPT=:attachDept
     </#if>
     ORDER BY D.PO_ORDER_NUM       DESC,
          D.DELIVER_NUM,
          D.CDATE DESC
  ) T
  WHERE 1=1
    AND T.CURRENT_WH_DELIVER_DATE <= :startTerm
  <#if chkInventoryYn?has_content>
       <#if chkInventoryYn == "Y"> /* 재고포함 */
           AND T.INVENTORY_QUANTITY >=0
       <#else>
           AND T.INVENTORY_QUANTITY >0
       </#if>
  <#else>
          AND T.INVENTORY_QUANTITY >0
  </#if>

 GROUP BY T.WH_CD,
          T.WH_NM,
          T.ITEM_CD,
          T.ITEM_NM,
          T.PO_ORDER_NUM,
          T.CURRENT_WH_DELIVER_DATE,
          T.LC_NUM,
          T.UNIT


        ]]>
	</statement>

	<!-- 품목/창고별 재고대장 -->
	<statement name="itemWhInquery" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.itemWhInquery */
		<![CDATA[
  SELECT
     T.PO_ORDER_NUM,               /* PO NUM */
     T.LC_NUM,
     T.ITEM_CD,                    /* 품목코드 */
     T.ITEM_NM,                    /* 품목명 */
     T.WH_CD,                      /* 창고코드 */
     T.WH_NM,                      /* 창고명 */
     T.CURRENT_WH_DELIVER_DATE AS FIRST_DELIVER_DATE ,    /* 현재창고입고일 */
     T.UNIT,                       /* 입고단위 */
     SUM(T.INVENTORY_QUANTITY) AS INVENTORY_QUANTITY,
     SUM(T.INVENTORY_WGT) AS INVENTORY_WGT

     ,SUM(T.DELIVER_QUANTITY) AS DELIVER_QUANTITY
     ,SUM(T.DELIVER_WGT) AS DELIVER_WGT

     ,SUM(T.RELEASE_QUANTITY) AS RELEASE_QUANTITY
     ,SUM(T.RELEASE_WGT) AS RELEASE_WGT


     ,NVL(SUM(T.RELEASE_WAIT_QUANTITY),0) AS RELEASE_WAIT_QUANTITY       /*출고대기수량*/
     ,NVL(SUM(T.RELEASE_WAIT_WGT),0)  AS  RELEASE_WAIT_WGT           /*출고대기중량*/
     ,NVL(SUM(T.RELEASE_QUANTITY),0)  AS RELEASE_END_QUANTITY       /**출고완료수량*/
     ,NVL(SUM(T.RELEASE_WGT),0)  AS RELEASE_END_WGT            /**출고완료중량*/

     ,NVL(SUM(T.ORDER_REMAIN_QUANTITY),0)  AS ORDER_REMAIN_QUANTITY  /**주문수량*/
     ,NVL(SUM(T.ORDER_REMAIN_WGT),0)  AS ORDER_REMAIN_WGT          /**주문중량*/

     ,NVL(SUM(NVL(T.PURCHASE_RETURN_QUANTITY,0)),0)  AS PURCHASE_RETURN_QUANTITY   --환입수량
     ,NVL(SUM(NVL(T.PURCHASE_RETURN_WGT,0)),0)  AS PURCHASE_RETURN_WGT         --환입중량

     ,NVL(SUM(NVL(T.RELEASE_WAIT_WGT,0)) -SUM(NVL(T.RELEASE_END_QUANTITY,0)),0)   RELEASE_END_REMAIN_QTY  /**출고완료잔량*/
     ,NVL(SUM(T.RMA_QUANTITY),0)  AS RMA_QUANTITY          /*반품수량*/
     ,NVL(SUM(T.RMA_WGT),0)  AS RMA_WGT             /*반품중량*/
     ,NVL(SUM(T.WH_MOVE_QUANTITY),0)  AS WH_MOVE_QUANTITY           /*창고이동수량*/
     ,NVL(SUM(T.WH_MOVE_WGT),0)  AS WH_MOVE_WGT                /*창고이동중량*/
     ,NVL(SUM(T.INVENTORY_CONTROL_QUANTITY),0)  AS INVENTORY_CONTROL_QUANTITY
     ,NVL(SUM(T.INVENTORY_CONTROL_WGT),0)  AS INVENTORY_CONTROL_WGT

  FROM
  (
      SELECT SCC_CODE_NM('DELIVER_STATUS', D.DELIVER_STATUS) AS DELIVER_STATUS,   /* 입고상태 */
             D.PO_ORDER_NUM,               /* PO NUM */
             D.ATTACH_DEPT,                /* 귀속부서 코드 */
             SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
             D.SPLR_CD,                  /* 매입처코드 */
             D.SPLR_NM,                  /* 매입처명 */
             D.SALSPLCE_CD,              /* 매출처 */
             D.SALSPLCE_NM,              /* 매출처명 */
             C.LC_NUM,
             (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
              WHERE T.SABUN = T2.DRAFTER_ID
              AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
              ) AS SALE_PRCG_NM,           /*담당자*/

             D.LAST_SALE_EDATE,            /* 최종판매종료일 */
             D.ITEM_CD,                    /* 품목코드 */
             --D.ITEM_NM,                    /* 품목명 */
             K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
             D.WH_CD,                      /* 창고코드 */
             D.WH_NM,                      /* 창고명 */
             CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
                 C.BL_NUM
             ELSE
                (
                  SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                  WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
                  AND D.ITEM_CD = T.ITEM_CD
                  AND D.ITEM_SEQ = T.ITEM_SEQ
                )
             END AS BL_NUM,              /* BL NO */

             D.FIRST_DELIVER_DATE,         /* 최초입고일 */
             D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
             D.UNIT,                       /* 입고단위 */
             NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
             CASE WHEN D.DELIVER_TYPE = '10' THEN
                 NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0)
             ELSE
                 NVL(A.RELEASE_QUANTITY,0)
             END
             RELEASE_QUANTITY,
               /*
              NVL((MAX(D.DELIVER_QUANTITY) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM))),0)
              -
              NVL(((SUM( D.DELIVER_QUANTITY  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )) -D.DELIVER_QUANTITY),0)
              - NVL(A.RELEASE_QUANTITY,0)
              - NVL(D.WH_MOVE_QUANTITY,0)
              AS INVENTORY_QUANTITY,   --시점재고
              */

              D.DELIVER_QUANTITY - NVL(A.RELEASE_QUANTITY,0)  - NVL(Y.DELIVER_QUANTITY,0) AS INVENTORY_QUANTITY,

              NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
              CASE WHEN D.DELIVER_TYPE = '10' THEN
                  NVL(A.RELEASE_WGT,0) + NVL(Y.DELIVER_WGT,0)
              ELSE
                  NVL(A.RELEASE_WGT,0)
              END
              RELEASE_WGT,
              D.DELIVER_WGT - NVL(A.RELEASE_WGT,0)  - NVL(Y.DELIVER_WGT,0) AS INVENTORY_WGT,   --시점재고


             CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
                 0
             ELSE
                ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
             END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

             NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) AS DELIVER_AMT,                /* 입고금액 --수정 */
             --A.BUY_CST AS DELIVER_AMT,
             NVL(A.SALE_AMT,0) AS SALE_AMT,                   /* 출고금액(판매금액) */
             --ROUND(NVL(ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)),0))  AS SALE_CST,                   /* 출고원가금액(판매원가) */
             A.BUY_CST  AS SALE_CST,                   /* 출고원가금액(판매원가) */

             --NVL(D.DELIVER_UPRICE_KRW * DECODE(D.UNIT, 'KG', (NVL(D.DELIVER_WGT,0) - NVL(A.REAL_WGT,0)),  (NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0))  ),0) AS INVENTORY_AMT,
             ROUND((SUM(  D.DELIVER_AMT+NVL(X.DIV_AMT,0)  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING))
             -BUY_CST )
             AS INVENTORY_AMT,

             --NVL((A.SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
             NVL((A.SALE_AMT - A.BUY_CST),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */

             NVL(CASE WHEN A.SALE_AMT = 0 THEN 0
             ELSE
                 ROUND((A.SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
             END,0) AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

             ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
             ROUND(NVL(B.RELEASE_QUANTITY, 0),0) AS RELEASE_BOX,           /* 출고BOX */
             D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
             ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
             D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
             ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
             D.RMA_QUANTITY,           /* 반품수량 */
             ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
             D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
             ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
             D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
             ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
             D.INVENTORY_CONTROL_QUANTITY AS INVENTORY_CONTROL_QUANTITY,        /* 주문잔여중량 */
             ROUND(D.INVENTORY_CONTROL_WGT, 2) AS INVENTORY_CONTROL_WGT,        /* 주문잔여중량 */
             A.PURCHASE_RETURN_QUANTITY,
             A.PURCHASE_RETURN_WGT
      FROM
      (
          SELECT * FROM INVENTORY_MGMT_DELIVER T
          WHERE T.FIRST_DELIVER_DATE<=:startTerm
          AND T.DELIVER_TYPE='10'
          UNION ALL
          SELECT * FROM INVENTORY_MGMT_DELIVER T2
          WHERE T2.CURRENT_WH_DELIVER_DATE<=:startTerm
          AND T2.DELIVER_TYPE='20'
      ) D,
       PO_ORDER_MST           C,
       (SELECT T.DELIVER_NUM
             , SUM(RELEASE_QUANTITY) AS RELEASE_QUANTITY
             , SUM(RELEASE_WGT) AS RELEASE_WGT

        FROM SALE_ORDER_ITEM_MGMT T GROUP BY T.DELIVER_NUM ) B,
       (SELECT
              T.DELIVER_NUM
            , ROUND(SUM(T2.REAL_SALE_AMT)) AS SALE_AMT
            , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
            , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
            , SUM(T2.REAL_WGT) AS REAL_WGT
            , SUM(T2.BUY_CST) AS BUY_CST

            , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
            , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
        FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
        WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
        AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
        AND T2.RELEASE_DATE <= :startTerm              --재고미포함
        GROUP BY T.DELIVER_NUM
       ) A,
       (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
           GROUP BY T.DELIVER_NUM
         ) X
      ,(
         SELECT T2.INITIAL_DELIVER_NUM
               ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
               ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
           FROM INVENTORY_MGMT_DELIVER T2
         WHERE T2.CURRENT_WH_DELIVER_DATE<= :startTerm   -- 입고,출고 누적
         GROUP BY T2.INITIAL_DELIVER_NUM
      ) Y
      ,(
         SELECT T2.INITIAL_DELIVER_NUM
               ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
               ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
           FROM INVENTORY_MGMT_DELIVER T2
         WHERE T2.CURRENT_WH_DELIVER_DATE > :startTerm   -- 입고누적
--         AND T2.DELIVER_TYPE='20'
         GROUP BY T2.INITIAL_DELIVER_NUM
      ) Z
      ,HLDC_PO_ITEM_MST K
      WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
      AND D.DELIVER_NUM = X.DELIVER_NUM(+)
      AND D.DELIVER_NUM = B.DELIVER_NUM(+)
      AND D.DELIVER_NUM = A.DELIVER_NUM(+)
      AND D.DELIVER_NUM = Y.INITIAL_DELIVER_NUM(+)
      AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
      AND D.ITEM_CD = K.ITEM_CODE(+)
      AND D.DELIVER_STATUS <> '10' --가입고 제외

     <#if whNm?has_content>
         AND D.WH_NM LIKE '%' || :whNm || '%'
     </#if>

     <#if itemNm?has_content>
         AND D.ITEM_NM LIKE '%' || :itemNm || '%'
     </#if>
     <#if attachDept?has_content>
         AND D.ATTACH_DEPT=:attachDept
     </#if>
     ORDER BY D.PO_ORDER_NUM       DESC,
          D.DELIVER_NUM,
          D.CDATE DESC
  ) T
  WHERE 1=1
    AND T.CURRENT_WH_DELIVER_DATE <= :startTerm
  <#if chkInventoryYn?has_content>
       <#if chkInventoryYn == "Y"> /* 재고포함 */
           AND T.INVENTORY_QUANTITY >=0
       <#else>
           AND T.INVENTORY_QUANTITY >0
       </#if>
  <#else>
          AND T.INVENTORY_QUANTITY >0
  </#if>

 GROUP BY T.WH_CD,
          T.WH_NM,
          T.ITEM_CD,
          T.ITEM_NM,
          T.PO_ORDER_NUM,
          T.CURRENT_WH_DELIVER_DATE,
          T.LC_NUM,
          T.UNIT

 ORDER BY T.ITEM_CD,
          T.WH_CD,
          T.PO_ORDER_NUM,
          T.CURRENT_WH_DELIVER_DATE,
          T.LC_NUM,
          T.UNIT
        ]]>
	</statement>

	<!-- 영업사원별 매출현황 -->
	<statement name="poSalsStatus" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.poSalsStatus */
		<![CDATA[
--영업사원별 매출현황
WITH LV_LIST AS
(
--매출
  SELECT
      NVL( A.SALE_PRCG_ID,'999999999') AS SALE_PRCG_ID  /* 영업담당자 */
    , '101' AS GUBUN  /* 매출액 */
    , NVL(D.SALE_TYPE,'999999999') AS SALE_TYPE     /* 판매유형 */
    , D.ATTACH_DEPT   /* 귀속부서 */
    , C.RELEASE_CONFIRM_DATE /* 출고확정 일자 */
    , ROWNUM AS NUM
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '01', ROUND(C.REAL_SALE_AMT), 0) AS "01"
    , NULL AS "01_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '02', ROUND(C.REAL_SALE_AMT), 0) AS "02"
    , NULL AS "02_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '03', ROUND(C.REAL_SALE_AMT), 0) AS "03"
    , NULL AS "03_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '04', ROUND(C.REAL_SALE_AMT), 0) AS "04"
    , NULL AS "04_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '05', ROUND(C.REAL_SALE_AMT), 0) AS "05"
    , NULL AS "05_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '06', ROUND(C.REAL_SALE_AMT), 0) AS "06"
    , NULL AS "06_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '07', ROUND(C.REAL_SALE_AMT), 0) AS "07"
    , NULL AS "07_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '08', ROUND(C.REAL_SALE_AMT), 0) AS "08"
    , NULL AS "08_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '09', ROUND(C.REAL_SALE_AMT), 0) AS "09"
    , NULL AS "09_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '10', ROUND(C.REAL_SALE_AMT), 0) AS "10"
    , NULL AS "10_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '11', ROUND(C.REAL_SALE_AMT), 0) AS "11"
    , NULL AS "11_B"
    , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '12', ROUND(C.REAL_SALE_AMT), 0) AS "12"
    , NULL AS "12_B"
    , NULL  AS TOT_AMT_A
    , NULL  AS TOT_AMT_B
    , NULL  AS TOT_AMT
  FROM SALE_ORDER A
      ,SALE_ORDER_ITEM_MGMT B
      ,RELEASE_ITEM_MGMT C
      ,PO_ORDER_MST D
  WHERE A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
  AND B.SALE_ORDER_NUM = C.SALE_ORDER_NUM
  AND B.SALE_ORDER_NUM_SEQ = C.SALE_ORDER_NUM_SEQ
  AND B.PO_ORDER_NUM = D.PO_ORDER_NUM
  AND C.RELEASE_CONFIRM_DATE BETWEEN SUBSTR(:startTerm,1,4)||'0101' AND :startTerm
  <#if attachDept?has_content>
      AND D.ATTACH_DEPT=:attachDept
  </#if>
), LV_LIST2 AS --매출이익
(
   SELECT NVL( A.SALE_PRCG_ID,'999999999') AS SALE_PRCG_ID  /* 영업담당자 */
        , '102' AS GUBUN  /* 매출이익액 */
        , NVL(D.SALE_TYPE,'999999999') AS SALE_TYPE     /* 판매유형 */
        , D.ATTACH_DEPT   /* 귀속부서 */
        , C.RELEASE_CONFIRM_DATE /* 출고 확정 일자 */
        , ROWNUM AS NUM
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '01', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "01"
        , NULL AS "01_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '02', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "02"
        , NULL AS "02_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '03', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "03"
        , NULL AS "03_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '04', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "04"
        , NULL AS "04_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '05', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "05"
        , NULL AS "05_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '06', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "06"
        , NULL AS "06_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '07', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "07"
        , NULL AS "07_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '08', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "08"
        , NULL AS "08_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '09', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "09"
        , NULL AS "09_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '10', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "10"
        , NULL AS "10_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '11', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "11"
        , NULL AS "11_B"
        , DECODE(SUBSTR(C.RELEASE_CONFIRM_DATE, 5, 2), '12', (ROUND(C.REAL_SALE_AMT) - C.BUY_CST), 0) AS "12"
        , NULL AS "12_B"
        , NULL  AS TOT_AMT_A
        , NULL  AS TOT_AMT_B
        , NULL  AS TOT_AMT
          FROM SALE_ORDER A
              ,SALE_ORDER_ITEM_MGMT B
              ,RELEASE_ITEM_MGMT C
              ,PO_ORDER_MST D
          WHERE A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
          AND B.SALE_ORDER_NUM = C.SALE_ORDER_NUM
          AND B.SALE_ORDER_NUM_SEQ = C.SALE_ORDER_NUM_SEQ
          AND B.PO_ORDER_NUM = D.PO_ORDER_NUM
          AND C.RELEASE_CONFIRM_DATE BETWEEN SUBSTR(:startTerm,1,4)||'0101' AND :startTerm
          <#if attachDept?has_content>
              AND D.ATTACH_DEPT=:attachDept
          </#if>

)
SELECT PP.SALE_PRCG_ID
     , (SELECT T.NM_KOR
          FROM HR_PERSONAL T
             , SCC_CC T2
         WHERE T2.CC_CD = T.CC_CD
           AND PP.SALE_PRCG_ID = T.SABUN
       ) AS SALE_PRCG_NM
     , PP.GUBUN
     , CASE WHEN PP.GUBUN = '101' THEN '매출'
            WHEN PP.GUBUN = '102' THEN '매출이익액'
            WHEN PP.GUBUN = '103' THEN '이익률'
       END AS GUBUN_NM
     , PP.CODE
     , SCC_CODE_NM('SALE_TYPE', PP.CODE) AS CODE_NAME

     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."01", 0)), 0, 0, SUM(NVL(X."01_B", 0)) / SUM(NVL(X."01", 0))) *100
       ELSE
           SUM(NVL(X."01", 0))
       END,1) AS "01"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."02", 0)), 0, 0, SUM(NVL(X."02_B", 0)) / SUM(NVL(X."02", 0))) *100
       ELSE
           SUM(NVL(X."02", 0))
       END,1) AS "02"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."03", 0)), 0, 0, SUM(NVL(X."03_B", 0)) / SUM(NVL(X."03", 0))) *100
       ELSE
           SUM(NVL(X."03", 0))
       END,1) AS "03"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."04", 0)), 0, 0, SUM(NVL(X."04_B", 0)) / SUM(NVL(X."04", 0))) *100
       ELSE
           SUM(NVL(X."04", 0))
       END,1) AS "04"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."05", 0)), 0, 0, SUM(NVL(X."05_B", 0)) / SUM(NVL(X."05", 0))) *100
       ELSE
           SUM(NVL(X."05", 0))
       END,1) AS "05"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."06", 0)), 0, 0, SUM(NVL(X."06_B", 0)) / SUM(NVL(X."06", 0))) *100
       ELSE
           SUM(NVL(X."06", 0))
       END,1) AS "06"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."07", 0)), 0, 0, SUM(NVL(X."07_B", 0)) / SUM(NVL(X."07", 0))) *100
       ELSE
           SUM(NVL(X."07", 0))
       END,1) AS "07"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."08", 0)), 0, 0, SUM(NVL(X."08_B", 0)) / SUM(NVL(X."08", 0))) *100
       ELSE
           SUM(NVL(X."08", 0))
       END,1) AS "08"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."09", 0)), 0, 0, SUM(NVL(X."09_B", 0)) / SUM(NVL(X."09", 0))) *100
       ELSE
           SUM(NVL(X."09", 0))
       END,1) AS "09"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."10", 0)), 0, 0, SUM(NVL(X."10_B", 0)) / SUM(NVL(X."10", 0))) *100
       ELSE
           SUM(NVL(X."10", 0))
       END,1) AS "10"

     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."11", 0)), 0, 0, SUM(NVL(X."11_B", 0)) / SUM(NVL(X."11", 0))) *100
       ELSE
           SUM(NVL(X."11", 0))
       END,1) AS "11"
     , ROUND(CASE WHEN PP.GUBUN = '103' THEN
           DECODE( SUM(NVL(X."12", 0)), 0, 0, SUM(NVL(X."12_B", 0)) / SUM(NVL(X."12", 0))) *100
       ELSE
           SUM(NVL(X."12", 0))
       END,1) AS "12"

     , NVL(ROUND(CASE WHEN PP.GUBUN = '103' THEN
          SUM( TOT_AMT_B ) / SUM( TOT_AMT_A ) *100
       ELSE
        SUM(NVL(X."01", 0)) +
        SUM(NVL(X."02", 0)) +
        SUM(NVL(X."03", 0)) +
        SUM(NVL(X."04", 0)) +
        SUM(NVL(X."05", 0)) +
        SUM(NVL(X."06", 0)) +
        SUM(NVL(X."07", 0)) +
        SUM(NVL(X."08", 0)) +
        SUM(NVL(X."09", 0)) +
        SUM(NVL(X."10", 0)) +
        SUM(NVL(X."11", 0)) +
        SUM(NVL(X."12", 0))
       END,1),0) AS TOT_AMT


  FROM (
        SELECT SP.SALE_PRCG_ID
             , GB.GUBUN
             , CD.CODE
          FROM (
                 SELECT DISTINCT SALE_PRCG_ID
                   FROM SALE_ORDER
                ) SP
              , (
                 SELECT '101' AS GUBUN FROM DUAL       -- 매출
                 UNION
                 SELECT '102' AS GUBUN FROM DUAL       -- 매출이릭액
                 UNION
                 SELECT '103' AS GUBUN FROM DUAL       -- 이익률
                ) GB
              , (
                 SELECT CODE
                   FROM SCC_COMMON_CODE
                  WHERE GROUP_CODE = 'SALE_TYPE'
                    AND USE_YN = 'Y'
                ) CD
         ORDER BY 1, 2, 3
        ) PP
      , (
         SELECT RL.*
           FROM (
                 SELECT * FROM LV_LIST
                 UNION ALL
                 SELECT * FROM LV_LIST2
                 UNION ALL
                 SELECT A.SALE_PRCG_ID
                      , '103' AS GUBUN
                      , A.SALE_TYPE
                      , A.ATTACH_DEPT
                      , A.RELEASE_CONFIRM_DATE
                      , ROWNUM AS NUM
                      , A."01" AS "01"
                      , B."01" AS "01_B"
                      , A."02" AS "02"
                      , B."02" AS "02_B"
                      , A."03" AS "03"
                      , B."03" AS "03_B"
                      , A."04" AS "04"
                      , B."04" AS "04_B"
                      , A."05" AS "05"
                      , B."05" AS "05_B"
                      , A."06" AS "06"
                      , B."06" AS "06_B"
                      , A."07" AS "07"
                      , B."07" AS "07_B"
                      , A."08" AS "08"
                      , B."08" AS "08_B"
                      , A."09" AS "09"
                      , B."09" AS "09_B"
                      , A."10" AS "10"
                      , B."10" AS "10_B"
                      , A."11" AS "11"
                      , B."11" AS "11_B"
                      , A."12" AS "12"
                      , B."12" AS "12_B"
                      , A."01" + A."02" +A."03" +A."04" +A."05" +A."06" +A."07" +A."08" +A."09" +A."10" +A."11" +A."12"  AS TOT_AMT_A
                      , B."01" + B."02" +B."03" +B."04" +B."05" +B."06" +B."07" +B."08" +B."09" +B."10" +B."11" +B."12"  AS TOT_AMT_B
                      , A."01" + A."02" +A."03" +A."04" +A."05" +A."06" +A."07" +A."08" +A."09" +A."10" +A."11" +A."12" +
                        B."01" + B."02" +B."03" +B."04" +B."05" +B."06" +B."07" +B."08" +B."09" +B."10" +B."11" +B."12"  AS TOT_AMT
                    FROM LV_LIST A
                       , LV_LIST2 B
                    WHERE 1=1
                    AND A.SALE_TYPE = B.SALE_TYPE
                    AND A.SALE_PRCG_ID = B.SALE_PRCG_ID
                ) RL
          WHERE 1 = 1
        ) X
 WHERE PP.SALE_PRCG_ID = X.SALE_PRCG_ID(+)
   AND PP.GUBUN = X.GUBUN(+)
   AND PP.CODE = X.SALE_TYPE(+)
 GROUP BY PP.SALE_PRCG_ID, PP.GUBUN, PP.CODE
 ORDER BY 2, 3, 5
        ]]>
	</statement>

	<!-- PO별 기타선급금 미착 금액 상세 -->
	<statement name="pobyPrepayamtNonarrivAmtDetail" type="select">
		/*+
		com.hwfs.ft.ftr.dao.FtStatsDAO.pobyPrepayamtNonarrivAmtDetail */
		<![CDATA[
SELECT X.*
  FROM (
          <#if searchFlag == "0"> /* 미착 */
            SELECT SCC_CODE_NM('ATTACH_DEPT', X.ATTACH_DEPT) AS ATTACH_DEPT_NM  /* 귀속부서 */
                 , SCC_CODE_NM('SALE_TYPE', X.SALE_TYPE) AS SALE_TYPE_NM    /* 판매유형 */
                 , X.PO_ORDER_NUM    /* PO No */
                 , Y.COMM_AMT        /* 미착금액 */
                 , X.SALSPLCE_NM     /* 매출처 */
                 , X.SPLR_NM         /* 매입처 */
                 , Z.PROC_DATE AS PROPOSAL_APPRV_DATE	/* 전표승인일자*/
                 /*
                 , (
                   SELECT TO_CHAR(APPROV_DATE, 'YYYYMMDD')
                     FROM SCC_SIGN_INFO
                    WHERE SIGN_INSTANCE_ID = (SELECT A.SIGN_INSTANCE_ID
                                                FROM PO_PROPOSAL_MST A
                                               WHERE A.PO_PROPOSAL_NUM = X.PO_PROPOSAL_NUM)
                   ) AS PROPOSAL_APPRV_DATE
                   */
                 , (
                    SELECT A.PROPOSAL_SALE_EDATE
                      FROM PO_PROPOSAL_MST A
                     WHERE A.PO_PROPOSAL_NUM = X.PO_PROPOSAL_NUM
                   ) AS PROPOSAL_SALE_EDATE  /* 품의판매종료일자 */
                 , (
                    SELECT LISTAGG (ITEM_NM, ',') WITHIN GROUP (ORDER BY ITEM_NM )
                      FROM PO_ORDER_ITEM_DETAIL T
                     WHERE X.PO_ORDER_NUM = T.PO_ORDER_NUM
                   ) ITEM_NM   /*품목명*/
                 , '부대비' AS DETAIL_NM
              FROM PO_ORDER_MST X
                 , PO_ORDER_OTHER_AMT Y
                 ,(
                    SELECT CODE
                      FROM SCC_COMMON_CODE T
                     WHERE T.GROUP_CODE = 'COMM_CLASS'
                       AND T.USE_YN = 'Y'
                  ) H
                  ,FT_SAP_INTERFACE Z
             WHERE 1 = 1
               AND X.PO_ORDER_NUM = Y.PO_ORDER_NUM
               AND Y.COMM_CLASS = H.CODE(+)
               AND Y.SLIP_NUM = Z.SLIP_NUM
               AND Z.SLIP_STATUS IN ('V','P')
               --AND (Y.NONARRIV_SLIP_CREATION_YN IS NULL OR Y.NONARRIV_SLIP_CREATION_YN = 'N')
               <#if attachDept?has_content>
                   AND X.ATTACH_DEPT =:attachDept      /*귀속부서*/
               </#if>
               <#if search?has_content>
                  AND X.PO_ORDER_NUM  LIKE '%'||:search||'%'
               </#if>

            UNION ALL
            SELECT SCC_CODE_NM('ATTACH_DEPT', X.ATTACH_DEPT) AS ATTACH_DEPT_NM  /* 귀속부서 */
                 , SCC_CODE_NM('SALE_TYPE', X.SALE_TYPE) AS SALE_TYPE_NM               /* 판매유형 */
                 , X.PO_ORDER_NUM           /* PO No */
--                 , Y.SIGN_AMT AS COMM_AMT               /* 미착금액 */
                 ,(SELECT SUM(WONWTR_AMT_KRW) AS WONWTR_AMT_KRW
                   FROM PO_ORDER_ITEM_DETAIL T
                   WHERE X.PO_ORDER_NUM = T.PO_ORDER_NUM
                   GROUP BY PO_ORDER_NUM ) AS SIGN_AMT	/* 미착금액 */

                 , X.SALSPLCE_NM                        /* 매출처 */
                 , X.SPLR_NM                /* 매입처 */
                 , Z.PROC_DATE AS PROPOSAL_APPRV_DATE	/* 전표승인일자*/
                 /*
                 , (
                   SELECT TO_CHAR(APPROV_DATE, 'YYYYMMDD')
                     FROM SCC_SIGN_INFO
                    WHERE SIGN_INSTANCE_ID = (SELECT A.SIGN_INSTANCE_ID
                                                FROM PO_PROPOSAL_MST A
                                               WHERE A.PO_PROPOSAL_NUM = X.PO_PROPOSAL_NUM)
                   ) AS PROPOSAL_APPRV_DATE
                 */
                 , (
                    SELECT A.PROPOSAL_SALE_EDATE
                      FROM PO_PROPOSAL_MST A
                     WHERE A.PO_PROPOSAL_NUM = X.PO_PROPOSAL_NUM
                   ) AS PROPOSAL_SALE_EDATE  /* 품의판매종료일자 */
                 , (
                    SELECT LISTAGG (ITEM_NM, ',') WITHIN GROUP (ORDER BY ITEM_NM )
                      FROM PO_ORDER_ITEM_DETAIL T
                     WHERE X.PO_ORDER_NUM = T.PO_ORDER_NUM
                   ) ITEM_NM   /*품목명*/
                 , '원물대' AS DETAIL_NM
              FROM PO_ORDER_MST X
                 , GDSPAYM_MST Y
                 , PO_PROPOSAL_MST A
                 ,FT_SAP_INTERFACE Z
             WHERE 1 = 1
               AND X.PO_ORDER_NUM = Y.PO_ORDER_NUM
               AND X.PO_PROPOSAL_NUM = A.PO_PROPOSAL_NUM
               AND Y.SLIP_NUM = Z.SLIP_NUM
               AND Z.SLIP_STATUS IN ('V','P')
               AND A.PO_TYPE='10'	--수입만
               --AND (Y.NONARRIV_SLIP_CREATION_YN IS NULL OR Y.NONARRIV_SLIP_CREATION_YN = 'N')
               <#if attachDept?has_content>
                   AND X.ATTACH_DEPT =:attachDept      /*귀속부서*/
               </#if>
               <#if search?has_content>
                  AND X.PO_ORDER_NUM  LIKE '%'||:search||'%'
               </#if>


       <#else>

            SELECT SCC_CODE_NM('ATTACH_DEPT', X.ATTACH_DEPT) AS ATTACH_DEPT_NM  /* 귀속부서 */
                 , SCC_CODE_NM('SALE_TYPE', X.SALE_TYPE) AS SALE_TYPE_NM    /* 판매유형 */
                 , X.PO_ORDER_NUM    /* PO No */
                 , Y.PREPAYAMT_AMT AS COMM_AMT       /* 미착금액 */
                 , X.SALSPLCE_NM     /* 매출처 */
                 , X.SPLR_NM         /* 매입처 */
                 , Z.PROC_DATE AS PROPOSAL_APPRV_DATE  /* 전표승인일자*/
                 /*
                 , (
                   SELECT TO_CHAR(APPROV_DATE, 'YYYYMMDD')
                     FROM SCC_SIGN_INFO
                    WHERE SIGN_INSTANCE_ID = (SELECT A.SIGN_INSTANCE_ID
                                                FROM PO_PROPOSAL_MST A
                                               WHERE A.PO_PROPOSAL_NUM = X.PO_PROPOSAL_NUM)
                   ) AS PROPOSAL_APPRV_DATE
                   */
                 , (
                    SELECT A.PROPOSAL_SALE_EDATE
                      FROM PO_PROPOSAL_MST A
                     WHERE A.PO_PROPOSAL_NUM = X.PO_PROPOSAL_NUM
                   ) AS PROPOSAL_SALE_EDATE  /* 품의판매종료일자 */
                 , (
                    SELECT LISTAGG (ITEM_NM, ',') WITHIN GROUP (ORDER BY ITEM_NM )
                      FROM PO_ORDER_ITEM_DETAIL T
                     WHERE X.PO_ORDER_NUM = T.PO_ORDER_NUM
                   ) ITEM_NM   /*품목명*/
                 , '기타선급금' AS DETAIL_NM
              FROM PO_ORDER_MST X
                 , ETC_PREPAYAMT_ADJUST Y
                 ,(
                    SELECT CODE
                      FROM SCC_COMMON_CODE T
                     WHERE T.GROUP_CODE = 'PREPAYAMT_CLASS'
                       AND T.USE_YN = 'Y'
                  ) H
                  ,FT_SAP_INTERFACE Z
             WHERE 1 = 1
               AND X.PO_ORDER_NUM = Y.PO_ORDER_NUM
               AND Y.PREPAYAMT_CLASS = H.CODE(+)
               AND Y.SLIP_NUM = Z.SLIP_NUM
               AND Z.SLIP_STATUS IN ('V','P')
               --AND (Y.NONARRIV_SLIP_CREATION_YN IS NULL OR Y.NONARRIV_SLIP_CREATION_YN = 'N')
               <#if attachDept?has_content>
                   AND X.ATTACH_DEPT =:attachDept      /*귀속부서*/
               </#if>
               <#if search?has_content>
                  AND X.PO_ORDER_NUM  LIKE '%'||:search||'%'
               </#if>

           </#if>
       ) X
       WHERE X.PROPOSAL_APPRV_DATE <=:startTerm
 ORDER BY 1, 2, 3
        ]]>
	</statement>

	<!-- 해당시점일자별 재고현황을 조회한다. -->
	<statement name="ddbyInventoryPoorInventoryDet" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.ddbyInventoryPoorInventoryDet
		*/
		<![CDATA[
--일별 재고 부진재고 상세
SELECT PP.CD1
     , DECODE(PP.CD_NM1, 'TOT_CD_NAME', '합계',
                         'TRATE_NAME', '비중(%)', PP.CD_NM1) AS CD_NM1
     , PP.CD2
     , PP.CD_NM2
     , SUM(NVL(X."20", 0)) AS "20"
     , SUM(NVL(X."10", 0)) AS "10"
     , SUM(NVL(X."30", 0)) AS "30"
     , DECODE(PP.CD1, 'TRATE_CD', SUM(X.TOT)
     , (
        SUM(NVL(X."20", 0)) +
        SUM(NVL(X."10", 0)) +
        SUM(NVL(X."30", 0))
       )) TOT_AMT
  FROM (
        SELECT SP.CODE AS CD1
             , SP.CODE_NAME AS CD_NM1
             , GB.CODE AS CD2
             , GB.CODE_NAME AS CD_NM2
          FROM (
                 SELECT CODE, CODE_NAME
                   FROM SCC_COMMON_CODE
                  WHERE GROUP_CODE = 'SALE_TYPE'
                    AND USE_YN = 'Y'
                 UNION ALL
                 SELECT 'TOT_CD' AS TOT_CD, 'TOT_CD_NAME' AS TOT_CD_NM FROM DUAL
                 UNION ALL
                 SELECT 'TRATE_CD' AS TOT_CD, 'TRATE_NAME' AS TOT_CD_NM FROM DUAL
                ) SP
              , (
                 SELECT CODE, CODE_NAME
                   FROM SCC_COMMON_CODE
                  WHERE GROUP_CODE = 'PO_KIND'
                    AND USE_YN = 'Y'
                  ORDER BY SORT_SEQ
                ) GB
         ORDER BY 1, 2
        ) PP
      , (
         SELECT RL.*
           FROM (
              SELECT
                  A.SALE_ORDER_TYPE
                , A.PO_KIND
                , DECODE(A.ATTACH_DEPT, '20', SUM(NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0)), 0) AS "20"
                , DECODE(A.ATTACH_DEPT, '10', SUM(NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0)), 0) AS "10"
                , DECODE(A.ATTACH_DEPT, '30', SUM(NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0)), 0) AS "30"
                , 0 TOT
              FROM
              (
                SELECT
                     A.DELIVER_NUM
                    ,A.DELIVER_QUANTITY
                    ,A.DELIVER_WGT
                    ,A.DELIVER_AMT
                    ,A.ATTACH_DEPT
                    ,C.PO_KIND
                    ,C.SALE_TYPE AS SALE_ORDER_TYPE
                FROM INVENTORY_MGMT_DELIVER A
                    ,DELIVERITEM_OTHER_AMT_DIV   B
                    ,PO_PROPOSAL_MST        C
                    ,PO_ORDER_MST           D
                WHERE A.DELIVER_NUM = B.DELIVER_NUM(+)
                AND A.PO_ORDER_NUM = D.PO_ORDER_NUM
                AND C.PO_PROPOSAL_NUM = D.PO_PROPOSAL_NUM

                AND (TO_DATE(:startTerm,'YYYYMMDD') - 90) >= A.LAST_SALE_EDATE
              ) A
              ,(SELECT T.DELIVER_NUM
                      , SUM(T2.RELEASE_QUANTITY) AS SUM_RELEASE_QUANTITY, SUM(T2.RELEASE_WGT) AS SUM_RELEASE_WGT
                      ,SUM(T2.BUY_CST) AS BUY_CST
                FROM
                  SALE_ORDER_ITEM_MGMT T
                 ,RELEASE_ITEM_MGMT T2
               WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
               AND T.SALE_ORDER_NUM_SEQ = T2.SALE_ORDER_NUM_SEQ
               AND T2.RELEASE_DATE <= :startTerm
               GROUP BY T.DELIVER_NUM
              ) B
              ,(SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                 GROUP BY T.DELIVER_NUM
               ) X
              WHERE A.DELIVER_NUM = B.DELIVER_NUM(+)
              AND A.DELIVER_NUM = X.DELIVER_NUM(+)
              GROUP BY
                  A.ATTACH_DEPT
                , A.SALE_ORDER_TYPE
                , A.PO_KIND

         UNION

             SELECT
                  'TOT_CD' AS SALE_ORDER_TYPE
                , A.PO_KIND
                , DECODE(A.ATTACH_DEPT, '20', SUM(NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0)), 0) AS "20"
                , DECODE(A.ATTACH_DEPT, '10', SUM(NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0)), 0) AS "10"
                , DECODE(A.ATTACH_DEPT, '30', SUM(NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0)), 0) AS "30"
                , 0
              FROM
              (
                SELECT
                     A.DELIVER_NUM
                    ,A.DELIVER_QUANTITY
                    ,A.DELIVER_WGT
                    ,A.DELIVER_AMT
                    ,A.ATTACH_DEPT
                    ,C.PO_KIND
                    ,C.SALE_TYPE AS SALE_ORDER_TYPE
                FROM INVENTORY_MGMT_DELIVER A
                    ,DELIVERITEM_OTHER_AMT_DIV   B
                    ,PO_PROPOSAL_MST        C
                    ,PO_ORDER_MST           D
                WHERE A.DELIVER_NUM = B.DELIVER_NUM(+)
                AND A.PO_ORDER_NUM = D.PO_ORDER_NUM
                AND C.PO_PROPOSAL_NUM = D.PO_PROPOSAL_NUM

                AND (TO_DATE(:startTerm,'YYYYMMDD') - 90) >= A.LAST_SALE_EDATE
              ) A
              ,(SELECT T.DELIVER_NUM
                      , SUM(T2.RELEASE_QUANTITY) AS SUM_RELEASE_QUANTITY, SUM(T2.RELEASE_WGT) AS SUM_RELEASE_WGT
                      ,SUM(T2.BUY_CST) AS BUY_CST
                FROM
                  SALE_ORDER_ITEM_MGMT T
                 ,RELEASE_ITEM_MGMT T2
               WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
               AND T.SALE_ORDER_NUM_SEQ = T2.SALE_ORDER_NUM_SEQ
               AND T2.RELEASE_DATE <= :startTerm
               GROUP BY T.DELIVER_NUM
              ) B
              ,(SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                 GROUP BY T.DELIVER_NUM
               ) X
              WHERE A.DELIVER_NUM = B.DELIVER_NUM(+)
              AND A.DELIVER_NUM = X.DELIVER_NUM(+)
              GROUP BY
                  A.ATTACH_DEPT
                , A.PO_KIND


         UNION
              SELECT
                  'TRATE_CD' AS SALE_ORDER_TYPE
                , MAX(PO_KIND)  PO_KIND

                ,ROUND(CASE WHEN SUM(DECODE(A.ATTACH_DEPT, '20', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)) = 0 THEN
                     0
                 ELSE
                   SUM(CASE WHEN A.PO_KIND = 'B' THEN
                       DECODE(A.ATTACH_DEPT, '20', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)
                   END)/
                   SUM(DECODE(A.ATTACH_DEPT, '20', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0))
                   *100
                 END,1) AS "20"

                ,ROUND(CASE WHEN SUM(DECODE(A.ATTACH_DEPT, '10', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)) = 0 THEN
                     0
                 ELSE
                   SUM(CASE WHEN A.PO_KIND = 'B' THEN
                       DECODE(A.ATTACH_DEPT, '10', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)
                   END)/
                   SUM(DECODE(A.ATTACH_DEPT, '10', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0))
                   *100
                 END,1) AS "10"
                ,ROUND(CASE WHEN SUM(DECODE(A.ATTACH_DEPT, '30', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)) = 0 THEN
                     0
                 ELSE
                   SUM(CASE WHEN A.PO_KIND = 'B' THEN
                       DECODE(A.ATTACH_DEPT, '30', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)
                   END)/
                   SUM(DECODE(A.ATTACH_DEPT, '30', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0))
                   *100
                 END,1) AS "30"

                ,ROUND(
                   SUM(CASE WHEN A.PO_KIND = 'B' THEN
                       NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0)
                   END)/
                   SUM(NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0))
                   *100,1)
                  AS TOT

              FROM
              (
                SELECT
                     A.DELIVER_NUM
                    ,A.DELIVER_QUANTITY
                    ,A.DELIVER_WGT
                    ,A.DELIVER_AMT
                    ,A.ATTACH_DEPT
                    ,C.PO_KIND
                    ,C.SALE_TYPE AS SALE_ORDER_TYPE
                FROM INVENTORY_MGMT_DELIVER A
                    ,DELIVERITEM_OTHER_AMT_DIV   B
                    ,PO_PROPOSAL_MST        C
                    ,PO_ORDER_MST           D
                WHERE A.DELIVER_NUM = B.DELIVER_NUM(+)
                AND A.PO_ORDER_NUM = D.PO_ORDER_NUM
                AND C.PO_PROPOSAL_NUM = D.PO_PROPOSAL_NUM

                AND (TO_DATE(:startTerm,'YYYYMMDD') - 90) >= A.LAST_SALE_EDATE
              ) A
              ,(SELECT T.DELIVER_NUM
                      , SUM(T2.RELEASE_QUANTITY) AS SUM_RELEASE_QUANTITY, SUM(T2.RELEASE_WGT) AS SUM_RELEASE_WGT
                      ,SUM(T2.BUY_CST) AS BUY_CST
                FROM
                  SALE_ORDER_ITEM_MGMT T
                 ,RELEASE_ITEM_MGMT T2
               WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
               AND T.SALE_ORDER_NUM_SEQ = T2.SALE_ORDER_NUM_SEQ
               --AND T2.RELEASE_DATE < TO_CHAR(ADD_MONTHS(LAST_DAY(TO_DATE(:startTerm, 'YYYYMMDD')),-1), 'YYYYMMDD')
               AND T2.RELEASE_DATE <= :startTerm
               GROUP BY T.DELIVER_NUM
              ) B
              ,(SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                 GROUP BY T.DELIVER_NUM
               ) X
              WHERE A.DELIVER_NUM = B.DELIVER_NUM(+)
              AND A.DELIVER_NUM = X.DELIVER_NUM(+)
         UNION
              SELECT
                  'TRATE_CD' AS SALE_ORDER_TYPE
                , MIN(PO_KIND)  PO_KIND

                ,ROUND(CASE WHEN SUM(DECODE(A.ATTACH_DEPT, '20', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)) = 0 THEN
                     0
                 ELSE
                   SUM(CASE WHEN A.PO_KIND = 'A' THEN
                       DECODE(A.ATTACH_DEPT, '20', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)
                   END)/
                   SUM(DECODE(A.ATTACH_DEPT, '20', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0))
                   *100
                 END,1) AS "20"

                ,ROUND(CASE WHEN SUM(DECODE(A.ATTACH_DEPT, '10', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)) = 0 THEN
                     0
                 ELSE
                   SUM(CASE WHEN A.PO_KIND = 'A' THEN
                       DECODE(A.ATTACH_DEPT, '10', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)
                   END)/
                   SUM(DECODE(A.ATTACH_DEPT, '10', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0))
                   *100
                 END,1) AS "10"
                ,ROUND(CASE WHEN SUM(DECODE(A.ATTACH_DEPT, '30', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)) = 0 THEN
                     0
                 ELSE
                   SUM(CASE WHEN A.PO_KIND = 'A' THEN
                       DECODE(A.ATTACH_DEPT, '30', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0)
                   END)/
                   SUM(DECODE(A.ATTACH_DEPT, '30', NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0),0))
                   *100
                 END,1) AS "30"
                ,
                 ROUND(SUM(CASE WHEN A.PO_KIND = 'A' THEN
                       NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0)
                   END)/
                   SUM(NVL(A.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) - NVL(B.BUY_CST,0))
                   *100
                 ,1)
                  AS TOT
              FROM
              (
                SELECT
                     A.DELIVER_NUM
                    ,A.DELIVER_QUANTITY
                    ,A.DELIVER_WGT
                    ,A.DELIVER_AMT
                    ,A.ATTACH_DEPT
                    ,C.PO_KIND
                    ,C.SALE_TYPE AS SALE_ORDER_TYPE
                FROM INVENTORY_MGMT_DELIVER A
                    ,DELIVERITEM_OTHER_AMT_DIV   B
                    ,PO_PROPOSAL_MST        C
                    ,PO_ORDER_MST           D
                WHERE A.DELIVER_NUM = B.DELIVER_NUM(+)
                AND A.PO_ORDER_NUM = D.PO_ORDER_NUM
                AND C.PO_PROPOSAL_NUM = D.PO_PROPOSAL_NUM

                AND (TO_DATE(:startTerm,'YYYYMMDD') - 90) >= A.LAST_SALE_EDATE
              ) A
              ,(SELECT T.DELIVER_NUM
                      , SUM(T2.RELEASE_QUANTITY) AS SUM_RELEASE_QUANTITY, SUM(T2.RELEASE_WGT) AS SUM_RELEASE_WGT
                      ,SUM(T2.BUY_CST) AS BUY_CST
                FROM
                  SALE_ORDER_ITEM_MGMT T
                 ,RELEASE_ITEM_MGMT T2
               WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
               AND T.SALE_ORDER_NUM_SEQ = T2.SALE_ORDER_NUM_SEQ
               AND T2.RELEASE_DATE <= :startTerm
               GROUP BY T.DELIVER_NUM
              ) B
              ,(SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                 GROUP BY T.DELIVER_NUM
               ) X
              WHERE A.DELIVER_NUM = B.DELIVER_NUM(+)
              AND A.DELIVER_NUM = X.DELIVER_NUM(+)
                ) RL
          WHERE 1 = 1
       ) X
 WHERE PP.CD1 = X.SALE_ORDER_TYPE(+)
   AND PP.CD2 = X.PO_KIND(+)
 GROUP BY PP.CD1, PP.CD_NM1, PP.CD2, PP.CD_NM2
 ORDER BY 1, 3
        ]]>
	</statement>

	<!-- 월별 PO별 판매완료 조회한다. -->
	<statement name="mmbyPobySalend" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.mmbyPobySalend */
		<![CDATA[
SELECT
       A.SALSPLCE_NM  /* 매출처 */
     , A.ITEM_CD
     , A.ITEM_NM      /* 판매상품 */
     , A.ATTACH_DEPT
     , A.WGT          /* 품의중량 */
     , A.BUY_PRICE  /* 매입단가 */
     , A.SALS_UPRICE   /* 매출단가 */
     , A.BUY_AMT       /* 매입액 */
     , A.SALS_AMT      /* 매출액 */
     , A.SALS_GAIN_AMT /* 매출이익 */
     , A.SALS_GAIN_RAT /* 매출이익율 */
     , A.DRCT_GAIN_AMT /* 직접이익 */
     , A.DRCT_GAIN_RAT /* 직접이익율 */
     , A.MFG_DATE      /* 제조일자 */
     , A.DELIVER_SCHD_DATE     /* 입고예정일(입고예정일) */
     , A.PROPOSAL_SALE_EDATE   /* 예상판매종료일(재고소진일) */
     , A.JAEGO_TERM

     , A.RELEASE_QUANTITY             /* 출고수량 */
     , A.RELEASE_WGT                  /* 출고중량 */
     , A.SALE_CST                      /* 판매가 */
     , A.BUY_CST                     /* 매입액(KRW) */
     , A.WONWTR_AMT                /* 매입USD */
     , A.SALE_AMT                    /* 매출액 */
     , A.GAIN_AMT              /* 이익액(출 */
     , A.GAIN_RATE      /* 매출이익률 */

     , A.FIRST_DELIVER_DATE  /* 최초입고일 */
     , A.RELEASE_CONFIRM_DATE   /* 출고일(출고확정일자) */
     , A.RELEASE_TERM  /* 재고기간 */

     , A.WH_CHARG_COST   --보관비
     , A.WTRLRG_TARIFF_INT   --입촐고비

     , A.LSHIP_EXCHANGE_RATE           --선적환율
     , A.SIGN_EXCHANGE_RATE            --결재환율
     , CASE WHEN NVL(A.SIGN_EXCHANGE_RATE,0) = 0 THEN
           0
       ELSE
           ROUND((NVL(A.SIGN_EXCHANGE_RATE,0) - NVL(A.LSHIP_EXCHANGE_RATE,0)) /NVL(A.SIGN_EXCHANGE_RATE,0)*100,2)
       END  AS EXCHANGE_LOSS  --환차손익:(결재환율 - 선적환율) / 결재환율

     --환차손익 : (결재환율 * 매앱USD ) - ( 선적환율 * 매앱USD)
     , (A.SIGN_EXCHANGE_RATE * WONWTR_AMT ) - ( A.LSHIP_EXCHANGE_RATE * WONWTR_AMT) AS EXCHANGE_LOSS_AMT
     --직접이익 : 매출이익액 - ( 창고료 + 보관이자 + 환차손익 )
     , A.GAIN_AMT - ( A.WH_CHARG_COST + A.WTRLRG_TARIFF_INT + (A.SIGN_EXCHANGE_RATE * WONWTR_AMT ) - ( A.LSHIP_EXCHANGE_RATE * WONWTR_AMT) ) AS DRCT_GAIN
     --직접이익율 :직접이익 / 매출액
     ,ROUND((( A.GAIN_AMT - ( A.WH_CHARG_COST + A.WTRLRG_TARIFF_INT + (A.SIGN_EXCHANGE_RATE * WONWTR_AMT ) - ( A.LSHIP_EXCHANGE_RATE * WONWTR_AMT) ) ) / A.SALE_AMT *100),2) AS DRCT_GAIN_RATE
     --품의대비 직접이익:직접이익 - 품의 직접이익액
     , CASE WHEN A.GAIN_AMT - ( A.WH_CHARG_COST + A.WTRLRG_TARIFF_INT + (A.SIGN_EXCHANGE_RATE * WONWTR_AMT ) - ( A.LSHIP_EXCHANGE_RATE * WONWTR_AMT) ) - A.DRCT_GAIN_AMT  > 0 THEN
           '+'||TO_CHAR(A.GAIN_AMT - ( A.WH_CHARG_COST + A.WTRLRG_TARIFF_INT + (A.SIGN_EXCHANGE_RATE * WONWTR_AMT ) - ( A.LSHIP_EXCHANGE_RATE * WONWTR_AMT) ) - A.DRCT_GAIN_AMT,'FM999,999,999,999')
       ELSE
           '△'|| TO_CHAR(ABS(A.GAIN_AMT - ( A.WH_CHARG_COST + A.WTRLRG_TARIFF_INT + (A.SIGN_EXCHANGE_RATE * WONWTR_AMT ) - ( A.LSHIP_EXCHANGE_RATE * WONWTR_AMT) ) - A.DRCT_GAIN_AMT),'FM999,999,999,999')
       END  AS PROPOSAL_DRCT_GAIN
     --품의대비 직접이익율:직접이익율 - 품의직접이익율
     ,CASE WHEN ROUND((( A.GAIN_AMT - ( A.WH_CHARG_COST + A.WTRLRG_TARIFF_INT + (A.SIGN_EXCHANGE_RATE * WONWTR_AMT ) - ( A.LSHIP_EXCHANGE_RATE * WONWTR_AMT) ) ) / A.SALE_AMT *100),2)  -A.DRCT_GAIN_RAT > 0 THEN
          '↑'||TO_CHAR(ROUND((( A.GAIN_AMT - ( A.WH_CHARG_COST + A.WTRLRG_TARIFF_INT + (A.SIGN_EXCHANGE_RATE * WONWTR_AMT ) - ( A.LSHIP_EXCHANGE_RATE * WONWTR_AMT) ) ) / A.SALE_AMT *100),2)  -A.DRCT_GAIN_RAT)||'%p'
      ELSE
          '↓'||TO_CHAR(ABS(ROUND((( A.GAIN_AMT - ( A.WH_CHARG_COST + A.WTRLRG_TARIFF_INT + (A.SIGN_EXCHANGE_RATE * WONWTR_AMT ) - ( A.LSHIP_EXCHANGE_RATE * WONWTR_AMT) ) ) / A.SALE_AMT *100),2)  -A.DRCT_GAIN_RAT))||'%p'
      END AS PROPOSAL_DRCT_GAIN_RATE
     ,A.SALE_ORDER_TYPE_NM
     ,A.PO_ORDER_NUM
     ,A.BL_NUM
FROM
(
    SELECT G.SALSPLCE_NM  /* 매출처 */
         , H.ITEM_CD
         , K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM
         , D.ATTACH_DEPT
         , ROUND(H.WGT, 2) WGT          /* 품의중량 */
         , H.BUY_PRICE  /* 매입단가 */
         , H.SALS_UPRICE   /* 매출단가 */
         , H.BUY_AMT       /* 매입액 */
         , H.SALS_AMT      /* 매출액 */
         , H.SALS_GAIN_AMT /* 매출이익 */
         , H.SALS_GAIN_RAT /* 매출이익율 */
         , H.DRCT_GAIN_AMT /* 직접이익 */
         , H.DRCT_GAIN_RAT /* 직접이익율 */
         , D.MFG_DATE      /* 제조일자 */
         , G.DELIVER_SCHD_DATE     /* 입고예정일(입고예정일) */
         , G.PROPOSAL_SALE_EDATE   /* 예상판매종료일(재고소진일) */
         , TO_DATE(G.PROPOSAL_SALE_EDATE) - TO_DATE(G.DELIVER_SCHD_DATE) +1  AS JAEGO_TERM

         , B.RELEASE_QUANTITY             /* 출고수량 */
         , B.RELEASE_WGT                  /* 출고중량 */
         , B.SALE_CST                      /* 판매가 */
         , A.BUY_CST AS BUY_CST                     /* 매입액(KRW) */
         , (SELECT SUM(X.WONWTR_AMT)
              FROM PO_ORDER_ITEM_DETAIL X
             WHERE C.PO_ORDER_NUM = X.PO_ORDER_NUM
               AND H.ITEM_CD = X.ITEM_CD) AS WONWTR_AMT                /* 매입USD */
         , A.REAL_SALE_AMT AS SALE_AMT                    /* 매출액 */
         --, (A.REAL_SALE_AMT - B.SALE_CST) AS GAIN_AMT              /* 이익액(출고금액-출고원가금액) */
         ,(A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))) AS GAIN_AMT              /* 이익액(출 */
         , CASE WHEN A.REAL_SALE_AMT = 0 THEN 0
           ELSE
               ROUND((A.REAL_SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.REAL_SALE_AMT * 100, 1)
           END AS GAIN_RATE      /* 매출이익률 */

         , D.FIRST_DELIVER_DATE  /* 최초입고일 */
         , A.RELEASE_CONFIRM_DATE   /* 출고일(출고확정일자) */
         , TO_DATE(A.RELEASE_DATE) - TO_DATE(D.FIRST_DELIVER_DATE) +1 AS RELEASE_TERM  /* 재고기간 */

         --, B.WH_CHARG_COST                       /* 창고료 */
         --, B.WTRLRG_TARIFF_INT                   /* 보관이자 */
         , ROUND(TO_NUMBER(DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ))  *   TO_NUMBER(NVL(Y.CHARG_COST,0)) * (TO_DATE(A.RELEASE_DATE) - TO_DATE(D.FIRST_DELIVER_DATE) +1)) AS WH_CHARG_COST   --보관비
         , ROUND(TO_NUMBER(DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ))  *   TO_NUMBER(NVL(Y.IOUT_COST,0)) * (TO_DATE(A.RELEASE_DATE) - TO_DATE(D.FIRST_DELIVER_DATE) +1)) AS WTRLRG_TARIFF_INT   --입촐고비

         , NVL(D.LSHIP_EXCHANGE_RATE,0) AS LSHIP_EXCHANGE_RATE           --선적환율
         , NVL(D.SIGN_EXCHANGE_RATE,0) AS SIGN_EXCHANGE_RATE            --결재환율
         , F.SALE_ORDER_TYPE
         , (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE  GROUP_CODE = 'SALE_TYPE' AND CODE =F.SALE_ORDER_TYPE  ) AS SALE_ORDER_TYPE_NM
           , C.PO_ORDER_NUM
         , CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
             C.BL_NUM
           ELSE
            (
                SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                WHERE B.PO_ORDER_NUM = T.PO_ORDER_NUM
                AND B.ITEM_CD = T.ITEM_CD
                AND B.ITEM_SEQ = T.ITEM_SEQ
              )
           END AS BL_NUM
      FROM RELEASE_ITEM_MGMT      A,
           SALE_ORDER_ITEM_MGMT   B,
           PO_ORDER_MST           C,
           INVENTORY_MGMT_DELIVER D,
           ENTRY_ITEM_DETAIL      E,
           SALE_ORDER             F,
           PO_PROPOSAL_MST        G,
           PO_PROPOSAL_ITEM_DTL   H,
           (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
               GROUP BY T.DELIVER_NUM
             ) X,
           WHBY_ITEMBY_CHARG_AMT Y,
           (SELECT
                  T.DELIVER_NUM
                , SUM(T2.SALE_AMT) AS SALE_AMT
                , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
                , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
                , SUM(T2.REAL_WGT) AS REAL_WGT

                , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
                , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
            FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
            WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
            AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
            <#if chkInventoryYn?has_content>
                <#if chkInventoryYn == "N"> /* 재고포함 */
                   AND T2.RELEASE_DATE <= LAST_DAY(TO_DATE(:startTerm||'01' , 'YYYYMMDD'))   /*출고일자 --시점재고 대상 재고미포함*/
                <#else>
                   AND T2.RELEASE_DATE <= LAST_DAY(TO_DATE(:startTerm||'01' , 'YYYYMMDD'))   /*출고일자 --시점재고 대상 재고포함*/
                </#if>
            <#else>
                   AND T2.RELEASE_DATE <= LAST_DAY(TO_DATE(:startTerm||'01' , 'YYYYMMDD'))   /*출고일자 --시점재고 대상 재고미포함*/
            </#if>
            GROUP BY T.DELIVER_NUM
           ) Z
           ,HLDC_PO_ITEM_MST K
     WHERE 1 = 1
       AND A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
       AND B.PO_ORDER_NUM = C.PO_ORDER_NUM
       AND G.PO_PROPOSAL_NUM = C.PO_PROPOSAL_NUM
       AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
       AND B.DELIVER_NUM = D.DELIVER_NUM
       AND D.ENTRY_NUM = E.ENTRY_NUM(+)
       AND D.ENTRY_ITEM_SEQ = E.ENTRY_ITEM_SEQ(+)
       AND F.SALE_ORDER_NUM = B.SALE_ORDER_NUM
       AND G.PO_PROPOSAL_NUM = H.PO_PROPOSAL_NUM

       AND D.ITEM_CD = H.ITEM_CD
       AND D.ITEM_SEQ = H.PROPOSAL_SEQ

       AND D.DELIVER_NUM = X.DELIVER_NUM(+)

       AND A.WH_CD = Y.WH_CD(+)
       AND A.ITEM_CD = Y.ITEM_CD(+)
       AND A.UNIT = Y.CHARGCOST_TYPE(+)

       AND D.DELIVER_NUM = Z.DELIVER_NUM(+)
       AND A.ITEM_CD = K.ITEM_CODE(+)
       <#if attachDept?has_content>
          AND D.ATTACH_DEPT = :attachDept
       </#if>

        <#if chkInventoryYn?has_content>
            <#if chkInventoryYn == "N"> /* 재고포함 */
               AND D.FIRST_DELIVER_DATE <= LAST_DAY(TO_DATE(:startTerm||'01' , 'YYYYMMDD'))   /*입고일자 --시점재고 대상 재고미포함*/
               AND A.RELEASE_DATE <= LAST_DAY(TO_DATE(:startTerm||'01' , 'YYYYMMDD'))   /*출고일자 --시점재고 대상 재고미포함*/
               AND NVL(D.DELIVER_QUANTITY,0) - NVL(Z.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) = 0	--시점재고
            <#else>
               AND D.FIRST_DELIVER_DATE <= LAST_DAY(TO_DATE(:startTerm||'01' , 'YYYYMMDD'))   /*입고일자 --시점재고 대상 재고미포함*/
               AND A.RELEASE_DATE <= LAST_DAY(TO_DATE(:startTerm||'01' , 'YYYYMMDD'))   /*출고일자 --시점재고 대상 재고포함*/
               AND NVL(D.DELIVER_QUANTITY,0) - NVL(Z.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) = 0	--시점재고
            </#if>
        <#else>
               AND D.FIRST_DELIVER_DATE <= LAST_DAY(TO_DATE(:startTerm||'01' , 'YYYYMMDD'))   /*입고일자 --시점재고 대상 재고포함*/
               AND A.RELEASE_DATE <= LAST_DAY(TO_DATE(:startTerm||'01' , 'YYYYMMDD'))   /*출고일자 --시점재고 대상 재고미포함*/
               AND NVL(D.DELIVER_QUANTITY,0) - NVL(Z.RELEASE_QUANTITY,0) - NVL(D.WH_MOVE_QUANTITY,0) = 0	--시점재고
        </#if>
        <#if search?has_content>
           AND D.PO_ORDER_NUM LIKE '%'||:search||'%'
        </#if>
       ORDER BY G.SALSPLCE_NM, H.ITEM_NM
) A
        ]]>
	</statement>

	<!-- 입고 PO 품목별 원가/판가 상세 - 수입 조회한다. -->
	<statement name="deliverPoItembyDetailIncome" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.deliverPoItembyDetailIncome
		*/
		<![CDATA[
SELECT
     A.DELIVER_NUM
    ,A.ITEM_CD
    ,A.ITEM_NM
    ,ROUND(
        (   NVL(A.WTR_AMT,0)
          + NVL(A.DIV_AMT1,0)
          + NVL(A.DIV_AMT2,0)
          + NVL(A.DIV_AMT3,0)
          + NVL(A.DIV_AMT4,0)
          + NVL(A.DIV_AMT5,0)
          + NVL(A.DIV_AMT6,0)
          + NVL(A.DIV_AMT7,0)
        )
        / DECODE(A.UNIT, 'KG', DELIVER_WGT, DELIVER_QUANTITY)
     ) AS WON_AMT--원가 :합계/수량
    , (NVL(A.WTR_AMT,0)
     + NVL(A.DIV_AMT1,0)
     + NVL(A.DIV_AMT2,0)
     + NVL(A.DIV_AMT3,0)
     + NVL(A.DIV_AMT4,0)
     + NVL(A.DIV_AMT5,0)
     + NVL(A.DIV_AMT6,0)
     + NVL(A.DIV_AMT7,0)
     ) AS TOT_AMT --합계
    ,(SELECT KG_CONVERT_RATE
        FROM HLDC_PO_ITEM_MST
       WHERE ITEM_CODE = A.ITEM_CD) AS ITEM_SIZE
    ,A.DELIVER_WGT AS WGT
    ,A.DELIVER_QUANTITY AS QUANTITY
    ,A.DELIVER_UPRICE_FOREIGN_CURRENC AS UPRICE
    --,A.DELIVER_UPRICE_FOREIGN_CURRENC * DECODE(A.UNIT, 'KG', DELIVER_WGT, DELIVER_QUANTITY) AS WONWTR_AMT --총금액(USD)
    ,ENTRY_REQ_WONWTR_AMT AS WONWTR_AMT --총금액(USD)
    ,A.LSHIP_EXCHANGE_RATE AS EXCHANGE_RATE  --선적환율
    ,A.WTR_AMT               --물대
    ,NVL(A.DIV_AMT1,0) AS DIV_AMT1
    ,NVL(A.DIV_AMT2,0) AS DIV_AMT2
    ,NVL(A.DIV_AMT3,0) AS DIV_AMT3
    ,NVL(A.DIV_AMT4,0) AS DIV_AMT4
    ,NVL(A.DIV_AMT5,0) AS DIV_AMT5
    ,NVL(A.DIV_AMT6,0) AS DIV_AMT6
    ,NVL(A.DIV_AMT7,0) AS DIV_AMT7
FROM
(
    SELECT
         F.DELIVER_NUM
        ,F.ITEM_CD
        ,F.ITEM_NM
        ,F.DELIVER_AMT
        --,C.WONWTR_AMT
        ,F.LSHIP_EXCHANGE_RATE
--        ,ROUND(F.DELIVER_UPRICE_FOREIGN_CURRENC * DECODE(F.UNIT, 'KG', DELIVER_WGT, DELIVER_QUANTITY) * F.LSHIP_EXCHANGE_RATE) AS WTR_AMT  -- 물대금액 : 총금액(USD)/선적환율
        ,ROUND(E.ENTRY_REQ_WONWTR_AMT * F.LSHIP_EXCHANGE_RATE) AS WTR_AMT  -- 물대금액 : 총금액(USD)/선적환율
        ,F.DELIVER_QUANTITY
        ,F.DELIVER_WGT
        ,F.UNIT
        ,F.DELIVER_UPRICE_FOREIGN_CURRENC
        ,E.ENTRY_REQ_WONWTR_AMT
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='B-01' ) AS DIV_AMT1
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='A-05' ) AS DIV_AMT2
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='B-18' ) AS DIV_AMT3
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='B-05' ) AS DIV_AMT4
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='B-07' ) AS DIV_AMT5
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS IN ('B-09','B-10' )) AS DIV_AMT6
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T
           WHERE T.DELIVER_NUM =F.DELIVER_NUM
             AND COMM_CLASS NOT IN ('B-01','A-05','B-18','B-05','B-07','B-09','B-10') ) AS DIV_AMT7
    FROM ENTRY_ITEM_DETAIL E
        ,INVENTORY_MGMT_DELIVER F
    WHERE  1=1
    AND E.ENTRY_NUM = F.ENTRY_NUM
    AND E.ENTRY_ITEM_SEQ = F.ENTRY_ITEM_SEQ
    AND F.DELIVER_STATUS='20'
    <#if attachDept?has_content>
        AND F.ATTACH_DEPT =:attachDept      /*귀속부서*/
    </#if>

    <#if search?has_content>
       AND F.PO_ORDER_NUM LIKE '%'||:search||'%'
    </#if>
    <#if search1?has_content>
       AND EXISTS (
              SELECT 1 FROM PO_ORDER_MST T
              WHERE T.PO_ORDER_NUM = F.PO_ORDER_NUM
           AND T.BL_NUM  LIKE '%'||:search1||'%'

       )
    </#if>
    <#if search2?has_content>
    AND EXISTS (
                SELECT 1
                  FROM INVENTORY_MGMT_DELIVER Y
                 WHERE Y.ITEM_CD = F.ITEM_CD
                   AND Y.WH_NM LIKE '%' || :search2 || '%'
               )
    </#if>
    <#if startTerm?has_content>
    AND EXISTS (
                SELECT 1
                  FROM INVENTORY_MGMT_DELIVER Y
                 WHERE Y.ITEM_CD = F.ITEM_CD
                   AND Y.FIRST_DELIVER_DATE = :startTerm
               )
    </#if>
) A
        ]]>
	</statement>

	<!-- 입고 PO 품목별 원가/판가 상세 - 판매 조회한다. -->
	<statement name="deliverPoItembyDetailDmt" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.deliverPoItembyDetailDmt */
		<![CDATA[
SELECT
     A.DELIVER_NUM
    ,A.ITEM_CD
    ,A.ITEM_NM
    ,ROUND(
        (   NVL(A.WTR_AMT,0)
          + NVL(A.DIV_AMT1,0)
          + NVL(A.DIV_AMT2,0)
          + NVL(A.DIV_AMT3,0)
          + NVL(A.DIV_AMT4,0)
          + NVL(A.DIV_AMT5,0)
          + NVL(A.DIV_AMT6,0)
          + NVL(A.DIV_AMT7,0)
        )
        / DECODE(A.UNIT, 'KG', DELIVER_WGT, DELIVER_QUANTITY)
     ) AS WON_AMT--원가 :합계/수량
    , (NVL(A.WTR_AMT,0)
     + NVL(A.DIV_AMT1,0)
     + NVL(A.DIV_AMT2,0)
     + NVL(A.DIV_AMT3,0)
     + NVL(A.DIV_AMT4,0)
     + NVL(A.DIV_AMT5,0)
     + NVL(A.DIV_AMT6,0)
     + NVL(A.DIV_AMT7,0)
     ) AS TOT_AMT --합계
    ,(SELECT KG_CONVERT_RATE
        FROM HLDC_PO_ITEM_MST
       WHERE ITEM_CODE = A.ITEM_CD) AS ITEM_SIZE
    ,A.DELIVER_WGT AS WGT
    ,A.DELIVER_QUANTITY AS QUANTITY
    ,A.DELIVER_UPRICE_FOREIGN_CURRENC AS UPRICE
    --,A.DELIVER_UPRICE_FOREIGN_CURRENC * DECODE(A.UNIT, 'KG', DELIVER_WGT, DELIVER_QUANTITY) AS WONWTR_AMT --총금액(USD)
    ,ENTRY_REQ_WONWTR_AMT AS WONWTR_AMT --총금액(USD)
    ,A.SIGN_EXCHANGE_RATE AS EXCHANGE_RATE  --선적환율
    ,A.WTR_AMT               --물대
    ,NVL(A.DIV_AMT1,0) AS DIV_AMT1
    ,NVL(A.DIV_AMT2,0) AS DIV_AMT2
    ,NVL(A.DIV_AMT3,0) AS DIV_AMT3
    ,NVL(A.DIV_AMT4,0) AS DIV_AMT4
    ,NVL(A.DIV_AMT5,0) AS DIV_AMT5
    ,NVL(A.DIV_AMT6,0) AS DIV_AMT6
    ,NVL(A.DIV_AMT7,0) AS DIV_AMT7
FROM
(
    SELECT
         F.DELIVER_NUM
        ,F.ITEM_CD
        ,F.ITEM_NM
        ,F.DELIVER_AMT
       -- ,C.WONWTR_AMT
        ,F.SIGN_EXCHANGE_RATE
        ,ROUND(E.ENTRY_REQ_WONWTR_AMT * F.LSHIP_EXCHANGE_RATE) AS WTR_AMT  -- 물대금액 : 총금액(USD)/선적환율
--        ,ROUND(F.DELIVER_UPRICE_FOREIGN_CURRENC * DECODE(F.UNIT, 'KG', DELIVER_WGT, DELIVER_QUANTITY) * F.SIGN_EXCHANGE_RATE) AS WTR_AMT  -- 물대금액 : 총금액(USD)/선적환율
        ,F.DELIVER_QUANTITY
        ,F.DELIVER_WGT
        ,F.UNIT
        ,F.DELIVER_UPRICE_FOREIGN_CURRENC
        ,E.ENTRY_REQ_WONWTR_AMT
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='B-01' ) AS DIV_AMT1
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='A-05' ) AS DIV_AMT2
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='B-18' ) AS DIV_AMT3
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='B-05' ) AS DIV_AMT4
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS='B-07' ) AS DIV_AMT5
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T WHERE T.DELIVER_NUM =F.DELIVER_NUM AND COMM_CLASS IN ('B-09','B-10' )) AS DIV_AMT6
        ,(SELECT SUM(T.DIV_AMT) FROM DELIVERITEM_OTHER_AMT_DIV T
           WHERE T.DELIVER_NUM =F.DELIVER_NUM
             AND COMM_CLASS NOT IN ('B-01','A-05','B-18','B-05','B-07','B-09','B-10') ) AS DIV_AMT7
    FROM ENTRY_ITEM_DETAIL E
        ,INVENTORY_MGMT_DELIVER F
  WHERE  1=1
    AND E.ENTRY_NUM = F.ENTRY_NUM
    AND E.ENTRY_ITEM_SEQ = F.ENTRY_ITEM_SEQ
    AND F.DELIVER_STATUS='20'
    <#if attachDept?has_content>
        AND F.ATTACH_DEPT =:attachDept      /*귀속부서*/
    </#if>
    <#if search?has_content>
       AND F.PO_ORDER_NUM  LIKE '%'||:search||'%'
    </#if>
    <#if search1?has_content>
       AND EXISTS (
              SELECT 1 FROM PO_ORDER_MST T
              WHERE T.PO_ORDER_NUM = F.PO_ORDER_NUM
           AND T.BL_NUM  LIKE '%'||:search1||'%'

       )
    </#if>
    <#if search2?has_content>
    AND EXISTS (
                SELECT 1
                  FROM INVENTORY_MGMT_DELIVER Y
                 WHERE Y.ITEM_CD = F.ITEM_CD
                   AND Y.WH_NM LIKE '%' || :search2 || '%'
               )
    </#if>
    <#if startTerm?has_content>
    AND EXISTS (
                SELECT 1
                  FROM INVENTORY_MGMT_DELIVER Y
                 WHERE Y.ITEM_CD = F.ITEM_CD
                   AND Y.FIRST_DELIVER_DATE = :startTerm
               )
    </#if>
) A
        ]]>
	</statement>



	<!-- 영업사원 계획 등록(사업계획)을 조회. -->
	<statement name="salesmanPlanRegList" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.salesmanPlanRegList */
		<![CDATA[
SELECT
    A.ATTACH_DEPT
    ,(SELECT CODE_NAME FROM SCC_COMMON_CODE
      WHERE  GROUP_CODE = 'ATTACH_DEPT'
      AND CODE = A.ATTACH_DEPT ) AS ATTACH_DEPT_NM   /*귀속부서명 */
    ,A.SALES_EMP
    ,(SELECT X.NM_KOR FROM SCC_USERINFO X WHERE X.SABUN = A.SALES_EMP) AS SALES_EMP_NM
    ,NVL(SUM(DECODE(A.MM, 1, A.SALS)),0) SALS1
    ,NVL(SUM(DECODE(A.MM, 2, A.SALS)),0) SALS2
    ,NVL(SUM(DECODE(A.MM, 3, A.SALS)),0) SALS3
    ,NVL(SUM(DECODE(A.MM, 4, A.SALS)),0) SALS4
    ,NVL(SUM(DECODE(A.MM, 5, A.SALS)),0) SALS5
    ,NVL(SUM(DECODE(A.MM, 6, A.SALS)),0) SALS6
    ,NVL(SUM(DECODE(A.MM, 7, A.SALS)),0) SALS7
    ,NVL(SUM(DECODE(A.MM, 8, A.SALS)),0) SALS8
    ,NVL(SUM(DECODE(A.MM, 9, A.SALS)),0) SALS9
    ,NVL(SUM(DECODE(A.MM,10, A.SALS)),0) SALS10
    ,NVL(SUM(DECODE(A.MM,11, A.SALS)),0) SALS11
    ,NVL(SUM(DECODE(A.MM,12, A.SALS)),0) SALS12

    ,NVL(SUM(DECODE(A.MM, 1, A.SALS_GAIN)),0) SALS_GAIN1
    ,NVL(SUM(DECODE(A.MM, 2, A.SALS_GAIN)),0) SALS_GAIN2
    ,NVL(SUM(DECODE(A.MM, 3, A.SALS_GAIN)),0) SALS_GAIN3
    ,NVL(SUM(DECODE(A.MM, 4, A.SALS_GAIN)),0) SALS_GAIN4
    ,NVL(SUM(DECODE(A.MM, 5, A.SALS_GAIN)),0) SALS_GAIN5
    ,NVL(SUM(DECODE(A.MM, 6, A.SALS_GAIN)),0) SALS_GAIN6
    ,NVL(SUM(DECODE(A.MM, 7, A.SALS_GAIN)),0) SALS_GAIN7
    ,NVL(SUM(DECODE(A.MM, 8, A.SALS_GAIN)),0) SALS_GAIN8
    ,NVL(SUM(DECODE(A.MM, 9, A.SALS_GAIN)),0) SALS_GAIN9
    ,NVL(SUM(DECODE(A.MM,10, A.SALS_GAIN)),0) SALS_GAIN10
    ,NVL(SUM(DECODE(A.MM,11, A.SALS_GAIN)),0) SALS_GAIN11
    ,NVL(SUM(DECODE(A.MM,12, A.SALS_GAIN)),0) SALS_GAIN12

    ,NVL(SUM(DECODE(A.MM, 1, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 2, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 3, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 4, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 5, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 6, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 7, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 8, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 9, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 10, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 11, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 12, A.SALS)),0)
    AS TOT_SALS

    ,NVL(SUM(DECODE(A.MM, 1, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 2, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 3, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 4, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 5, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 6, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 7, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 8, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 9, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 10, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 11, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 12, A.SALS_GAIN)),0)
    AS TOT_SALS_GAIN
FROM FTR_SALESMAN_PLAN A
    ,HR_PERSONAL B
WHERE 1=1
AND A.SALES_EMP = B.SABUN(+)
AND A.YEAR = :year
AND A.PLAN_CLASS='A'
<#if attachDept?has_content>
    AND A.ATTACH_DEPT =:attachDept      /*귀속부서*/
</#if>
 <#if salesEmp?has_content>
    AND A.SALES_EMP =:salesEmp      /*사원번호*/
</#if>
GROUP BY A.PLAN_CLASS, A.ATTACH_DEPT, A.SALES_EMP, B.JIK_KUP
ORDER BY DECODE(A.ATTACH_DEPT,'20',1,'10',2,'30',3) , B.JIK_KUP
        ]]>
	</statement>

	<!-- 영업사원 계획 등록(수정계획)을 조회. -->
	<statement name="salesmanPlanRegList2" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.salesmanPlanRegList2 */
		<![CDATA[
SELECT
    A.ATTACH_DEPT
    ,(SELECT CODE_NAME FROM SCC_COMMON_CODE
      WHERE  GROUP_CODE = 'ATTACH_DEPT'
      AND CODE = A.ATTACH_DEPT ) AS ATTACH_DEPT_NM   /*귀속부서명 */
    ,A.SALES_EMP
    ,(SELECT X.NM_KOR FROM SCC_USERINFO X WHERE X.SABUN = A.SALES_EMP) AS SALES_EMP_NM
    ,NVL(SUM(DECODE(A.MM, 1, A.SALS)),0) SALS1
    ,NVL(SUM(DECODE(A.MM, 2, A.SALS)),0) SALS2
    ,NVL(SUM(DECODE(A.MM, 3, A.SALS)),0) SALS3
    ,NVL(SUM(DECODE(A.MM, 4, A.SALS)),0) SALS4
    ,NVL(SUM(DECODE(A.MM, 5, A.SALS)),0) SALS5
    ,NVL(SUM(DECODE(A.MM, 6, A.SALS)),0) SALS6
    ,NVL(SUM(DECODE(A.MM, 7, A.SALS)),0) SALS7
    ,NVL(SUM(DECODE(A.MM, 8, A.SALS)),0) SALS8
    ,NVL(SUM(DECODE(A.MM, 9, A.SALS)),0) SALS9
    ,NVL(SUM(DECODE(A.MM,10, A.SALS)),0) SALS10
    ,NVL(SUM(DECODE(A.MM,11, A.SALS)),0) SALS11
    ,NVL(SUM(DECODE(A.MM,12, A.SALS)),0) SALS12

    ,NVL(SUM(DECODE(A.MM, 1, A.SALS_GAIN)),0) SALS_GAIN1
    ,NVL(SUM(DECODE(A.MM, 2, A.SALS_GAIN)),0) SALS_GAIN2
    ,NVL(SUM(DECODE(A.MM, 3, A.SALS_GAIN)),0) SALS_GAIN3
    ,NVL(SUM(DECODE(A.MM, 4, A.SALS_GAIN)),0) SALS_GAIN4
    ,NVL(SUM(DECODE(A.MM, 5, A.SALS_GAIN)),0) SALS_GAIN5
    ,NVL(SUM(DECODE(A.MM, 6, A.SALS_GAIN)),0) SALS_GAIN6
    ,NVL(SUM(DECODE(A.MM, 7, A.SALS_GAIN)),0) SALS_GAIN7
    ,NVL(SUM(DECODE(A.MM, 8, A.SALS_GAIN)),0) SALS_GAIN8
    ,NVL(SUM(DECODE(A.MM, 9, A.SALS_GAIN)),0) SALS_GAIN9
    ,NVL(SUM(DECODE(A.MM,10, A.SALS_GAIN)),0) SALS_GAIN10
    ,NVL(SUM(DECODE(A.MM,11, A.SALS_GAIN)),0) SALS_GAIN11
    ,NVL(SUM(DECODE(A.MM,12, A.SALS_GAIN)),0) SALS_GAIN12

    ,NVL(SUM(DECODE(A.MM, 1, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 2, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 3, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 4, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 5, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 6, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 7, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 8, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 9, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 10, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 11, A.SALS)),0)
    +NVL(SUM(DECODE(A.MM, 12, A.SALS)),0)
    AS TOT_SALS

    ,NVL(SUM(DECODE(A.MM, 1, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 2, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 3, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 4, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 5, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 6, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 7, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 8, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 9, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 10, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 11, A.SALS_GAIN)),0)
    +NVL(SUM(DECODE(A.MM, 12, A.SALS_GAIN)),0)
    AS TOT_SALS_GAIN
FROM FTR_SALESMAN_PLAN A
     ,HR_PERSONAL B
WHERE 1=1
AND A.SALES_EMP = B.SABUN(+)
AND A.YEAR = :year
AND A.PLAN_CLASS='B'
<#if attachDept?has_content>
    AND A.ATTACH_DEPT =:attachDept      /*귀속부서*/
</#if>
 <#if salesEmp?has_content>
    AND A.SALES_EMP =:salesEmp      /*사원번호*/
</#if>
GROUP BY A.PLAN_CLASS, A.ATTACH_DEPT, A.SALES_EMP, B.JIK_KUP
ORDER BY DECODE(A.ATTACH_DEPT,'20',1,'10',2,'30',3) , B.JIK_KUP
        ]]>
	</statement>

	<!-- 영업사원 계획 등록(사업계획,수정계획)을 등록 -->
	<statement name="salesmanPlanReg" type="insert">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.salesmanPlanReg */
		<![CDATA[
           MERGE INTO FTR_SALESMAN_PLAN
           USING
           (
               SELECT COUNT(*) CNT
               FROM   FTR_SALESMAN_PLAN
               WHERE  PLAN_CLASS = :planClass
               AND    ATTACH_DEPT = :attachDept
               AND    SALES_EMP =:salesEmp
               AND    YEAR =:year
               AND    MM =:mm
           ) T
           ON (T.CNT > 0)
           WHEN MATCHED THEN
               UPDATE SET
                SALS = :sals,
                SALS_GAIN = :salsGain,
                UUSER = :loginSabun,
                UDATE = SYSDATE
            WHERE  PLAN_CLASS = :planClass
            AND    ATTACH_DEPT = :attachDept
            AND    SALES_EMP = :salesEmp
            AND    YEAR = :year
            AND    MM = :mm
           WHEN NOT MATCHED THEN
               INSERT
            (
             PLAN_CLASS,
             ATTACH_DEPT,
             SALES_EMP,
             YEAR,
             MM,
             SALS,
             SALS_GAIN,
             CUSER,
             CDATE,
             UUSER,
             UDATE
            ) VALUES (
             :planClass,
             :attachDept,
             :salesEmp,
             :year,
             :mm,
            <#if sals?exists> :sals, <#else> null, </#if>
            <#if salsGain?exists> :salsGain, <#else> null, </#if>
             :loginSabun,
             SYSDATE,
             :loginSabun,
             SYSDATE
            )

        ]]>
	</statement>

	<!-- 영업사원 계획 등록(사업계획,수정계획)을 삭제 -->
	<statement name="deleteSalesmanPlanReg" type="insert">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.deleteSalesmanPlanReg */
		<![CDATA[
            DELETE
            FROM   FTR_SALESMAN_PLAN
            WHERE  PLAN_CLASS = :planClass
            AND    ATTACH_DEPT = :attachDept
            AND    SALES_EMP = :salesEmp
            AND    YEAR = :year
            AND    MM = :mm
        ]]>
	</statement>


	<!-- 영업사원 계획 실적 조회. -->
	<statement name="salesmanPlanRegAct" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.salesmanPlanRegAct */
		<![CDATA[

--최종
WITH LV_LIST AS
(
--매출
    SELECT
        '1' FLAG
        ,GROUPING(B.YEAR)||GROUPING(B.ATTACH_DEPT)||GROUPING(A.SABUN) AS LVL
        ,NVL(B.ATTACH_DEPT,'999999999') AS ATTACH_DEPT
        ,(SELECT CODE_NAME FROM SCC_COMMON_CODE
          WHERE  GROUP_CODE = 'ATTACH_DEPT'
          AND CODE = B.ATTACH_DEPT ) AS ATTACH_DEPT_NM   /*귀속부서명 */
        ,NVL(A.SABUN,'999999999') AS SABUN
        ,(SELECT T.NM_KOR FROM SCC_USERINFO T WHERE T.SABUN = A.SABUN) AS UUSER

        ,NVL( ROUND(SUM(B.SA0_SALS)/1000) ,0)   AS SA0_SALS          -- 0 월 사업계획
        ,NVL( ROUND(SUM(B.SU0_SALS)/1000) ,0)   AS SU0_SALS          -- 0 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT0)/1000) ,0) AS REAL_SALE_AMT0   --0  월 실적
        ,NVL( CASE WHEN SUM(B.SA0_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT0)/1000)   / (SUM(B.SA0_SALS)/1000) *100) END,0) AS SA_SALS0_RATE    --0  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU0_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT0)/1000)   / (SUM(B.SU0_SALS)/1000) *100)  END,0) AS SU_SALS0_RATE    --0  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT0)/1000) ,0) AS PREV_REAL_SALE_AMT0   --전년0  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT0)/1000) / (SUM(D.REAL_SALE_AMT0)/1000) ) ,0) PREV_REAL_SALE_AMT0_RATE      --전년0  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT0)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT0)/1000)   / (SUM(D.REAL_SALE_AMT0)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT0_RATE    --0  전년0  월 실적비

        ,NVL( ROUND(SUM(B.SA1_SALS)/1000) ,0)   AS SA1_SALS          -- 1 월 사업계획
        ,NVL( ROUND(SUM(B.SU1_SALS)/1000) ,0)   AS SU1_SALS          -- 1 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT1)/1000) ,0) AS REAL_SALE_AMT1   --1  월 실적
        ,NVL( CASE WHEN SUM(B.SA1_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT1)/1000)   / (SUM(B.SA1_SALS)/1000) *100) END,0) AS SA_SALS1_RATE    --1  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU1_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT1)/1000)   / (SUM(B.SU1_SALS)/1000) *100)  END,0) AS SU_SALS1_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT1)/1000) ,0) AS PREV_REAL_SALE_AMT1   --전년1  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT1)/1000) / (SUM(D.REAL_SALE_AMT1)/1000) ) ,0) PREV_REAL_SALE_AMT1_RATE      --전년1  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT1)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT1)/1000)   / (SUM(D.REAL_SALE_AMT1)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT1_RATE    --0  전년1  월 실적비

        ,NVL( ROUND(SUM(B.SA2_SALS)/1000) ,0)   AS SA2_SALS          -- 2 월 사업계획
        ,NVL( ROUND(SUM(B.SU2_SALS)/1000) ,0)   AS SU2_SALS          -- 2 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT2)/1000) ,0) AS REAL_SALE_AMT2   --2  월 실적
        ,NVL( CASE WHEN SUM(B.SA2_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT2)/1000)   / (SUM(B.SA2_SALS)/1000) *100) END,0) AS SA_SALS2_RATE    --2  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU2_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT2)/1000)   / (SUM(B.SU2_SALS)/1000) *100)  END,0) AS SU_SALS2_RATE    --2  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT2)/1000) ,0) AS PREV_REAL_SALE_AMT2   --전년2  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT2)/1000) / (SUM(D.REAL_SALE_AMT2)/1000) ) ,0) PREV_REAL_SALE_AMT2_RATE      --전년2  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT2)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT2)/1000)   / (SUM(D.REAL_SALE_AMT2)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT2_RATE    --0  전년2  월 실적비

        ,NVL( ROUND(SUM(B.SA3_SALS)/1000) ,0)   AS SA3_SALS          -- 3 월 사업계획
        ,NVL( ROUND(SUM(B.SU3_SALS)/1000) ,0)   AS SU3_SALS          -- 3 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT3)/1000) ,0) AS REAL_SALE_AMT3   --3  월 실적
        ,NVL( CASE WHEN SUM(B.SA3_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT3)/1000)   / (SUM(B.SA3_SALS)/1000) *100) END,0) AS SA_SALS3_RATE    --3  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU3_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT3)/1000)   / (SUM(B.SU3_SALS)/1000) *100)  END,0) AS SU_SALS3_RATE    --3  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT3)/1000) ,0) AS PREV_REAL_SALE_AMT3   --전년3  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT3)/1000) / (SUM(D.REAL_SALE_AMT3)/1000) ) ,0) PREV_REAL_SALE_AMT3_RATE      --전년3  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT3)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT3)/1000)   / (SUM(D.REAL_SALE_AMT3)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT3_RATE    --0  전년3  월 실적비

        ,NVL( ROUND(SUM(B.SA4_SALS)/1000) ,0)   AS SA4_SALS          -- 4 월 사업계획
        ,NVL( ROUND(SUM(B.SU4_SALS)/1000) ,0)   AS SU4_SALS          -- 4 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT4)/1000) ,0) AS REAL_SALE_AMT4   --4  월 실적
        ,NVL( CASE WHEN SUM(B.SA4_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT4)/1000)   / (SUM(B.SA4_SALS)/1000) *100) END,0) AS SA_SALS4_RATE    --4  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU4_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT4)/1000)   / (SUM(B.SU4_SALS)/1000) *100)  END,0) AS SU_SALS4_RATE    --4  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT4)/1000) ,0) AS PREV_REAL_SALE_AMT4   --전년4  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT4)/1000) / (SUM(D.REAL_SALE_AMT4)/1000) ) ,0) PREV_REAL_SALE_AMT4_RATE      --전년4  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT4)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT4)/1000)   / (SUM(D.REAL_SALE_AMT4)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT4_RATE    --0  전년4  월 실적비

        ,NVL( ROUND(SUM(B.SA5_SALS)/1000) ,0)   AS SA5_SALS          -- 5 월 사업계획
        ,NVL( ROUND(SUM(B.SU5_SALS)/1000) ,0)   AS SU5_SALS          -- 5 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT5)/1000) ,0) AS REAL_SALE_AMT5   --5  월 실적
        ,NVL( CASE WHEN SUM(B.SA5_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT5)/1000)   / (SUM(B.SA5_SALS)/1000) *100) END,0) AS SA_SALS5_RATE    --5  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU5_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT5)/1000)   / (SUM(B.SU5_SALS)/1000) *100)  END,0) AS SU_SALS5_RATE    --5  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT5)/1000) ,0) AS PREV_REAL_SALE_AMT5   --전년5  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT5)/1000) / (SUM(D.REAL_SALE_AMT5)/1000) ) ,0) PREV_REAL_SALE_AMT5_RATE      --전년5  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT5)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT5)/1000)   / (SUM(D.REAL_SALE_AMT5)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT5_RATE    --0  전년5  월 실적비

        ,NVL( ROUND(SUM(B.SA6_SALS)/1000) ,0)   AS SA6_SALS          -- 6 월 사업계획
        ,NVL( ROUND(SUM(B.SU6_SALS)/1000) ,0)   AS SU6_SALS          -- 6 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT6)/1000) ,0) AS REAL_SALE_AMT6   --6  월 실적
        ,NVL( CASE WHEN SUM(B.SA6_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT6)/1000)   / (SUM(B.SA6_SALS)/1000) *100) END,0) AS SA_SALS6_RATE    --6  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU6_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT6)/1000)   / (SUM(B.SU6_SALS)/1000) *100)  END,0) AS SU_SALS6_RATE    --6  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT6)/1000) ,0) AS PREV_REAL_SALE_AMT6   --전년6  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT6)/1000) / (SUM(D.REAL_SALE_AMT6)/1000) ) ,0) PREV_REAL_SALE_AMT6_RATE      --전년6  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT6)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT6)/1000)   / (SUM(D.REAL_SALE_AMT6)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT6_RATE    --0  전년6  월 실적비

        ,NVL( ROUND(SUM(B.SA7_SALS)/1000) ,0)   AS SA7_SALS          -- 7 월 사업계획
        ,NVL( ROUND(SUM(B.SU7_SALS)/1000) ,0)   AS SU7_SALS          -- 7 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT7)/1000) ,0) AS REAL_SALE_AMT7   --7  월 실적
        ,NVL( CASE WHEN SUM(B.SA7_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT7)/1000)   / (SUM(B.SA7_SALS)/1000) *100) END,0) AS SA_SALS7_RATE    --7  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU7_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT7)/1000)   / (SUM(B.SU7_SALS)/1000) *100)  END,0) AS SU_SALS7_RATE    --7  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT7)/1000) ,0) AS PREV_REAL_SALE_AMT7   --전년7  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT7)/1000) / (SUM(D.REAL_SALE_AMT7)/1000) ) ,0) PREV_REAL_SALE_AMT7_RATE      --전년7  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT7)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT7)/1000)   / (SUM(D.REAL_SALE_AMT7)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT7_RATE    --0  전년7  월 실적비

        ,NVL( ROUND(SUM(B.SA8_SALS)/1000) ,0)   AS SA8_SALS          -- 8 월 사업계획
        ,NVL( ROUND(SUM(B.SU8_SALS)/1000) ,0)   AS SU8_SALS          -- 8 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT8)/1000) ,0) AS REAL_SALE_AMT8   --8  월 실적
        ,NVL( CASE WHEN SUM(B.SA8_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT8)/1000)   / (SUM(B.SA8_SALS)/1000) *100) END,0) AS SA_SALS8_RATE    --8  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU8_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT8)/1000)   / (SUM(B.SU8_SALS)/1000) *100)  END,0) AS SU_SALS8_RATE    --8  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT8)/1000) ,0) AS PREV_REAL_SALE_AMT8   --전년8  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT8)/1000) / (SUM(D.REAL_SALE_AMT8)/1000) ) ,0) PREV_REAL_SALE_AMT8_RATE      --전년8  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT8)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT8)/1000)   / (SUM(D.REAL_SALE_AMT8)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT8_RATE    --0  전년8  월 실적비

        ,NVL( ROUND(SUM(B.SA9_SALS)/1000) ,0)   AS SA9_SALS          -- 9 월 사업계획
        ,NVL( ROUND(SUM(B.SU9_SALS)/1000) ,0)   AS SU9_SALS          -- 9 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT9)/1000) ,0) AS REAL_SALE_AMT9   --9  월 실적
        ,NVL( CASE WHEN SUM(B.SA9_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT9)/1000)   / (SUM(B.SA9_SALS)/1000) *100) END,0) AS SA_SALS9_RATE    --9  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU9_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT9)/1000)   / (SUM(B.SU9_SALS)/1000) *100)  END,0) AS SU_SALS9_RATE    --9  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT9)/1000) ,0) AS PREV_REAL_SALE_AMT9   --전년9  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT9)/1000) / (SUM(D.REAL_SALE_AMT9)/1000) ) ,0) PREV_REAL_SALE_AMT9_RATE      --전년9  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT9)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT9)/1000)   / (SUM(D.REAL_SALE_AMT9)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT9_RATE    --0  전년9  월 실적비

        ,NVL( ROUND(SUM(B.SA10_SALS)/1000) ,0)   AS SA10_SALS          -- 10 월 사업계획
        ,NVL( ROUND(SUM(B.SU10_SALS)/1000) ,0)   AS SU10_SALS          -- 10 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT10)/1000) ,0) AS REAL_SALE_AMT10   --10  월 실적
        ,NVL( CASE WHEN SUM(B.SA10_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT10)/1000)   / (SUM(B.SA10_SALS)/1000) *100) END,0) AS SA_SALS10_RATE    --10  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU10_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT10)/1000)   / (SUM(B.SU10_SALS)/1000) *100)  END,0) AS SU_SALS10_RATE    --10  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT10)/1000) ,0) AS PREV_REAL_SALE_AMT10   --전년10  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT10)/1000) / (SUM(D.REAL_SALE_AMT10)/1000) ) ,0) PREV_REAL_SALE_AMT10_RATE      --전년10  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT10)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT10)/1000)   / (SUM(D.REAL_SALE_AMT10)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT10_RATE    --0  전년10  월 실적비

        ,NVL( ROUND(SUM(B.SA11_SALS)/1000) ,0)   AS SA11_SALS          -- 11 월 사업계획
        ,NVL( ROUND(SUM(B.SU11_SALS)/1000) ,0)   AS SU11_SALS          -- 11 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT11)/1000) ,0) AS REAL_SALE_AMT11   --11  월 실적
        ,NVL( CASE WHEN SUM(B.SA11_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT11)/1000)   / (SUM(B.SA11_SALS)/1000) *100) END,0) AS SA_SALS11_RATE    --11  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU11_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT11)/1000)   / (SUM(B.SU11_SALS)/1000) *100)  END,0) AS SU_SALS11_RATE    --11  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT11)/1000) ,0) AS PREV_REAL_SALE_AMT11   --전년11  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT11)/1000) / (SUM(D.REAL_SALE_AMT11)/1000) ) ,0) PREV_REAL_SALE_AMT11_RATE      --전년11  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT11)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT11)/1000)   / (SUM(D.REAL_SALE_AMT11)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT11_RATE    --0  전년11  월 실적비

        ,NVL( ROUND(SUM(B.SA12_SALS)/1000) ,0)   AS SA12_SALS          -- 12 월 사업계획
        ,NVL( ROUND(SUM(B.SU12_SALS)/1000) ,0)   AS SU12_SALS          -- 12 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT12)/1000) ,0) AS REAL_SALE_AMT12   --12  월 실적
        ,NVL( CASE WHEN SUM(B.SA12_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT12)/1000)   / (SUM(B.SA12_SALS)/1000) *100) END,0) AS SA_SALS12_RATE    --12  월 사업계획비
        ,NVL( CASE WHEN SUM(B.SU12_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT12)/1000)   / (SUM(B.SU12_SALS)/1000) *100)  END,0) AS SU_SALS12_RATE    --12  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT12)/1000) ,0) AS PREV_REAL_SALE_AMT12   --전년12  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT12)/1000) / (SUM(D.REAL_SALE_AMT12)/1000) ) ,0) PREV_REAL_SALE_AMT12_RATE      --전년12  월 실적비
        ,NVL( CASE WHEN SUM(D.REAL_SALE_AMT12)   = 0 THEN 0 ELSE ROUND( (SUM(C.REAL_SALE_AMT12)/1000)   / (SUM(D.REAL_SALE_AMT12)/1000) *100)  END,0) AS PREV_REAL_SALE_AMT12_RATE    --0  전년12  월 실적비

    FROM
         (
          SELECT A.SABUN,
                 A.NM_KOR,
                 B.MU_CD,
                 (SELECT MU_NM FROM SCC_MU WHERE MU_CD = B.MU_CD) AS MU_NM,
                 B.TM_CD,
                 B.TM_NM,
                 A.JIK_WI
          FROM   HR_PERSONAL A,
                 HLDC_SC_DEPT_V B
          WHERE  B.CC_CD = A.CC_CD
          AND    B.MU_CD = '2004'
          AND    A.CC_CD = '316840'
          AND    A.GB_JAEJIK = 'AA'
         ) A
         ,(
            SELECT
               A.YEAR
              ,A.MM
              ,A.ATTACH_DEPT
              ,(SELECT CODE_NAME FROM SCC_COMMON_CODE
                WHERE  GROUP_CODE = 'ATTACH_DEPT'
                AND CODE = A.ATTACH_DEPT ) AS ATTACH_DEPT_NM   /*귀속부서명 */
              ,A.SALES_EMP
              ,(SELECT X.NM_KOR FROM SCC_USERINFO X WHERE X.SABUN = A.SALES_EMP) AS SALES_EMP_NM
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' THEN NVL(A.SALS,0) END),0) AS SA0_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 1  THEN NVL(A.SALS,0) END),0) AS SA1_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 2  THEN NVL(A.SALS,0) END),0) AS SA2_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 3  THEN NVL(A.SALS,0) END),0) AS SA3_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 4  THEN NVL(A.SALS,0) END),0) AS SA4_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 5  THEN NVL(A.SALS,0) END),0) AS SA5_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 6  THEN NVL(A.SALS,0) END),0) AS SA6_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 7  THEN NVL(A.SALS,0) END),0) AS SA7_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 8  THEN NVL(A.SALS,0) END),0) AS SA8_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 9  THEN NVL(A.SALS,0) END),0) AS SA9_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 10 THEN NVL(A.SALS,0) END),0) AS SA10_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 11 THEN NVL(A.SALS,0) END),0) AS SA11_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 12 THEN NVL(A.SALS,0) END),0) AS SA12_SALS

              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' THEN A.SALS END),0) AS SU0_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 1  THEN A.SALS END),0) AS SU1_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 2  THEN A.SALS END),0) AS SU2_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 3  THEN A.SALS END),0) AS SU3_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 4  THEN A.SALS END),0) AS SU4_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 5  THEN A.SALS END),0) AS SU5_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 6  THEN A.SALS END),0) AS SU6_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 7  THEN A.SALS END),0) AS SU7_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 8  THEN A.SALS END),0) AS SU8_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 9  THEN A.SALS END),0) AS SU9_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 10 THEN A.SALS END),0) AS SU10_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 11 THEN A.SALS END),0) AS SU11_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 12 THEN A.SALS END),0) AS SU12_SALS

            FROM FTR_SALESMAN_PLAN A
            WHERE 1=1
            AND A.YEAR = :year
            <#if attachDept?has_content>
                AND A.ATTACH_DEPT = :attachDept
            </#if>
            <#if salesEmp?has_content>
                AND A.SALES_EMP = :salesEmp
            </#if>

            GROUP BY A.YEAR,A.MM, A.PLAN_CLASS, A.ATTACH_DEPT, A.SALES_EMP
         ) B
         ,(
           SELECT
                A.ATTACH_DEPT
               ,F.SALE_PRCG_ID
               ,TO_NUMBER(SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6)) MM
               ,SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6)
               , NVL(SUM(A.REAL_SALE_AMT),0) REAL_SALE_AMT0                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '01', A.REAL_SALE_AMT)),0) REAL_SALE_AMT1                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '02', A.REAL_SALE_AMT)),0) REAL_SALE_AMT2                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '03', A.REAL_SALE_AMT)),0) REAL_SALE_AMT3                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '04', A.REAL_SALE_AMT)),0) REAL_SALE_AMT4                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '05', A.REAL_SALE_AMT)),0) REAL_SALE_AMT5                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '06', A.REAL_SALE_AMT)),0) REAL_SALE_AMT6                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '07', A.REAL_SALE_AMT)),0) REAL_SALE_AMT7                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '08', A.REAL_SALE_AMT)),0) REAL_SALE_AMT8                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '09', A.REAL_SALE_AMT)),0) REAL_SALE_AMT9                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '10', A.REAL_SALE_AMT)),0) REAL_SALE_AMT10                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '11', A.REAL_SALE_AMT)),0) REAL_SALE_AMT11                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '12', A.REAL_SALE_AMT)),0) REAL_SALE_AMT12                   /* 매출액 */

            FROM RELEASE_ITEM_MGMT      A,
                 SALE_ORDER_ITEM_MGMT   B,
                 PO_ORDER_MST           C,
                 INVENTORY_MGMT_DELIVER D,
                 ENTRY_ITEM_DETAIL      E,
                 SALE_ORDER             F,
                 PO_PROPOSAL_MST        G,
                 PO_PROPOSAL_ITEM_DTL   H,
                 (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                     GROUP BY T.DELIVER_NUM
                   ) X
           WHERE 1 = 1
             AND A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
             AND B.PO_ORDER_NUM = C.PO_ORDER_NUM
             AND G.PO_PROPOSAL_NUM = C.PO_PROPOSAL_NUM
             AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
             AND B.DELIVER_NUM = D.DELIVER_NUM
             AND D.ENTRY_NUM = E.ENTRY_NUM(+)
             AND D.ENTRY_ITEM_SEQ = E.ENTRY_ITEM_SEQ(+)
             AND F.SALE_ORDER_NUM = B.SALE_ORDER_NUM
             AND G.PO_PROPOSAL_NUM = H.PO_PROPOSAL_NUM

             AND D.ITEM_CD = H.ITEM_CD
             AND D.ITEM_SEQ = H.PROPOSAL_SEQ

             AND D.DELIVER_NUM = X.DELIVER_NUM(+)

             AND SUBSTR(A.SALS_CONFIRM_DATE, 1, 4) = :year
             GROUP BY F.SALE_PRCG_ID, SUBSTR(A.SALS_CONFIRM_DATE, 1, 6), A.ATTACH_DEPT
          ) C
         ,(
           SELECT
                A.ATTACH_DEPT
               ,F.SALE_PRCG_ID
               ,TO_NUMBER(SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6)) MM
               ,SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6)
               , NVL(SUM(A.REAL_SALE_AMT),0) REAL_SALE_AMT0                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '01', A.REAL_SALE_AMT)),0) REAL_SALE_AMT1                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '02', A.REAL_SALE_AMT)),0) REAL_SALE_AMT2                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '03', A.REAL_SALE_AMT)),0) REAL_SALE_AMT3                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '04', A.REAL_SALE_AMT)),0) REAL_SALE_AMT4                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '05', A.REAL_SALE_AMT)),0) REAL_SALE_AMT5                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '06', A.REAL_SALE_AMT)),0) REAL_SALE_AMT6                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '07', A.REAL_SALE_AMT)),0) REAL_SALE_AMT7                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '08', A.REAL_SALE_AMT)),0) REAL_SALE_AMT8                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '09', A.REAL_SALE_AMT)),0) REAL_SALE_AMT9                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '10', A.REAL_SALE_AMT)),0) REAL_SALE_AMT10                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '11', A.REAL_SALE_AMT)),0) REAL_SALE_AMT11                   /* 매출액 */
               , NVL(SUM(DECODE( SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6), '12', A.REAL_SALE_AMT)),0) REAL_SALE_AMT12                   /* 매출액 */

            FROM RELEASE_ITEM_MGMT      A,
                 SALE_ORDER_ITEM_MGMT   B,
                 PO_ORDER_MST           C,
                 INVENTORY_MGMT_DELIVER D,
                 ENTRY_ITEM_DETAIL      E,
                 SALE_ORDER             F,
                 PO_PROPOSAL_MST        G,
                 PO_PROPOSAL_ITEM_DTL   H,
                 (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                     GROUP BY T.DELIVER_NUM
                   ) X
           WHERE 1 = 1
             AND A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
             AND B.PO_ORDER_NUM = C.PO_ORDER_NUM
             AND G.PO_PROPOSAL_NUM = C.PO_PROPOSAL_NUM
             AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
             AND B.DELIVER_NUM = D.DELIVER_NUM
             AND D.ENTRY_NUM = E.ENTRY_NUM(+)
             AND D.ENTRY_ITEM_SEQ = E.ENTRY_ITEM_SEQ(+)
             AND F.SALE_ORDER_NUM = B.SALE_ORDER_NUM
             AND G.PO_PROPOSAL_NUM = H.PO_PROPOSAL_NUM

             AND D.ITEM_CD = H.ITEM_CD
             AND D.ITEM_SEQ = H.PROPOSAL_SEQ

             AND D.DELIVER_NUM = X.DELIVER_NUM(+)

             AND SUBSTR(A.SALS_CONFIRM_DATE, 1, 4) = :prev
             GROUP BY F.SALE_PRCG_ID, SUBSTR(A.SALS_CONFIRM_DATE, 1, 6), A.ATTACH_DEPT
          ) D
    WHERE 1=1
    AND A.SABUN = B.SALES_EMP

    AND B.SALES_EMP  = C.SALE_PRCG_ID(+)
    AND B.ATTACH_DEPT  = C.ATTACH_DEPT(+)
    AND B.MM= C.MM(+)

    AND B.SALES_EMP  = D.SALE_PRCG_ID(+)
    AND B.ATTACH_DEPT  = D.ATTACH_DEPT(+)
    AND B.MM= D.MM(+)

    GROUP BY ROLLUP (B.YEAR,B.ATTACH_DEPT, A.SABUN) HAVING GROUPING(B.YEAR)||GROUPING(B.ATTACH_DEPT)||GROUPING(A.SABUN) IN (000,111,001)
    ORDER BY GROUPING(B.ATTACH_DEPT)  DESC, B.ATTACH_DEPT, GROUPING(B.YEAR)||GROUPING(B.ATTACH_DEPT)||GROUPING(A.SABUN) DESC,  A.SABUN


), LV_LIST2 AS --매출이익
(
    SELECT
        '2' FLAG
        ,GROUPING(B.YEAR)||GROUPING(B.ATTACH_DEPT)||GROUPING(A.SABUN) AS LVL
        ,NVL(B.ATTACH_DEPT,'999999999') AS ATTACH_DEPT
        ,(SELECT CODE_NAME FROM SCC_COMMON_CODE
          WHERE  GROUP_CODE = 'ATTACH_DEPT'
          AND CODE = B.ATTACH_DEPT ) AS ATTACH_DEPT_NM   /*귀속부서명 */
        ,NVL(A.SABUN,'999999999') AS SABUN
        ,(SELECT T.NM_KOR FROM SCC_USERINFO T WHERE T.SABUN = A.SABUN) AS UUSER

       ,NVL( ROUND(SUM(B.SA0_SALS)/1000) ,0)   AS SA0_SALS          -- 0 월 사업계획
        ,NVL( ROUND(SUM(B.SU0_SALS)/1000) ,0)   AS SU0_SALS          -- 0 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT0)/1000) ,0) AS REAL_SALE_AMT0   --0  월 실적
        --,NVL( CASE WHEN SUM(B.SA0_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT0,0))/1000)   -ROUND(SUM(NVL(B.SA0_SALS,0))/1000) ) END,0) AS SA_SALS0_RATE    --0  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT0,0))/1000)   -ROUND(SUM(NVL(B.SA0_SALS,0))/1000) ) ,0) AS SA_SALS0_RATE    --0  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU0_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT0,0))/1000)   -ROUND(SUM(NVL(B.SU0_SALS,0))/1000) )  END,0) AS SU_SALS0_RATE    --0  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT0,0))/1000)   -ROUND(SUM(NVL(B.SU0_SALS,0))/1000) ) ,0) AS SU_SALS0_RATE    --0  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT0)/1000) ,0) AS PREV_REAL_SALE_AMT0   --전년0  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT0)/1000) / (SUM(D.REAL_SALE_AMT0)/1000) ) ,0) PREV_REAL_SALE_AMT0_RATE      --전년0  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT0)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT0,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT0,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT0_RATE    --전년0  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT0,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT0,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT0_RATE    --전년0  월 실적비

        ,NVL( ROUND(SUM(B.SA1_SALS)/1000) ,0)   AS SA1_SALS          -- 1 월 사업계획
        ,NVL( ROUND(SUM(B.SU1_SALS)/1000) ,0)   AS SU1_SALS          -- 1 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT1)/1000) ,0) AS REAL_SALE_AMT1   --1  월 실적
        --,NVL( CASE WHEN SUM(B.SA1_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT1,0))/1000)   -ROUND(SUM(NVL(B.SA1_SALS,0))/1000) ) END,0) AS SA_SALS1_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT1,0))/1000)   -ROUND(SUM(NVL(B.SA1_SALS,0))/1000) ) ,0) AS SA_SALS1_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU1_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT1,0))/1000)   -ROUND(SUM(NVL(B.SU1_SALS,0))/1000) )  END,0) AS SU_SALS1_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT1,0))/1000)   -ROUND(SUM(NVL(B.SU1_SALS,0))/1000) ) ,0) AS SU_SALS1_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT1)/1000) ,0) AS PREV_REAL_SALE_AMT1   --전년1  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT1)/1000) / (SUM(D.REAL_SALE_AMT1)/1000) ) ,0) PREV_REAL_SALE_AMT1_RATE      --전년1  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT1)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT1,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT1,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT1_RATE    --전년1  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT1,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT1,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT1_RATE    --전년1  월 실적비

        ,NVL( ROUND(SUM(B.SA2_SALS)/1000) ,0)   AS SA2_SALS          -- 2 월 사업계획
        ,NVL( ROUND(SUM(B.SU2_SALS)/1000) ,0)   AS SU2_SALS          -- 2 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT2)/1000) ,0) AS REAL_SALE_AMT2   --2  월 실적
        --,NVL( CASE WHEN SUM(B.SA2_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT2,0))/1000)   -ROUND(SUM(NVL(B.SA2_SALS,0))/1000) ) END,0) AS SA_SALS2_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU2_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT2,0))/1000)   -ROUND(SUM(NVL(B.SU2_SALS,0))/1000) )  END,0) AS SU_SALS2_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT2,0))/1000)   -ROUND(SUM(NVL(B.SA2_SALS,0))/1000) ) ,0) AS SA_SALS2_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT2,0))/1000)   -ROUND(SUM(NVL(B.SU2_SALS,0))/1000) ) ,0) AS SU_SALS2_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT2)/1000) ,0) AS PREV_REAL_SALE_AMT2   --전년2  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT2)/1000) / (SUM(D.REAL_SALE_AMT2)/1000) ) ,0) PREV_REAL_SALE_AMT2_RATE      --전년2  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT2)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT2,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT2,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT2_RATE    --전년2  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT2,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT2,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT2_RATE    --전년2  월 실적비

        ,NVL( ROUND(SUM(B.SA3_SALS)/1000) ,0)   AS SA3_SALS          -- 3 월 사업계획
        ,NVL( ROUND(SUM(B.SU3_SALS)/1000) ,0)   AS SU3_SALS          -- 3 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT3)/1000) ,0) AS REAL_SALE_AMT3   --3  월 실적
        --,NVL( CASE WHEN SUM(B.SA3_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT3,0))/1000)   -ROUND(SUM(NVL(B.SA3_SALS,0))/1000) ) END,0) AS SA_SALS3_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU3_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT3,0))/1000)   -ROUND(SUM(NVL(B.SU3_SALS,0))/1000) )  END,0) AS SU_SALS3_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT3,0))/1000)   -ROUND(SUM(NVL(B.SA3_SALS,0))/1000) ) ,0) AS SA_SALS3_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT3,0))/1000)   -ROUND(SUM(NVL(B.SU3_SALS,0))/1000) ) ,0) AS SU_SALS3_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT3)/1000) ,0) AS PREV_REAL_SALE_AMT3   --전년3  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT3)/1000) / (SUM(D.REAL_SALE_AMT3)/1000) ) ,0) PREV_REAL_SALE_AMT3_RATE      --전년3  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT3)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT3,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT3,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT3_RATE    --전년3  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT3,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT3,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT3_RATE    --전년3  월 실적비

        ,NVL( ROUND(SUM(B.SA4_SALS)/1000) ,0)   AS SA4_SALS          -- 4 월 사업계획
        ,NVL( ROUND(SUM(B.SU4_SALS)/1000) ,0)   AS SU4_SALS          -- 4 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT4)/1000) ,0) AS REAL_SALE_AMT4   --4  월 실적
        --,NVL( CASE WHEN SUM(B.SA4_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT4,0))/1000)   -ROUND(SUM(NVL(B.SA4_SALS,0))/1000) ) END,0) AS SA_SALS4_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU4_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT4,0))/1000)   -ROUND(SUM(NVL(B.SU4_SALS,0))/1000) )  END,0) AS SU_SALS4_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT4,0))/1000)   -ROUND(SUM(NVL(B.SA4_SALS,0))/1000) ) ,0) AS SA_SALS4_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT4,0))/1000)   -ROUND(SUM(NVL(B.SU4_SALS,0))/1000) ) ,0) AS SU_SALS4_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT4)/1000) ,0) AS PREV_REAL_SALE_AMT4   --전년4  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT4)/1000) / (SUM(D.REAL_SALE_AMT4)/1000) ) ,0) PREV_REAL_SALE_AMT4_RATE      --전년4  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT4)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT4,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT4,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT4_RATE    --전년4  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT4,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT4,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT4_RATE    --전년4  월 실적비

        ,NVL( ROUND(SUM(B.SA5_SALS)/1000) ,0)   AS SA5_SALS          -- 5 월 사업계획
        ,NVL( ROUND(SUM(B.SU5_SALS)/1000) ,0)   AS SU5_SALS          -- 5 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT5)/1000) ,0) AS REAL_SALE_AMT5   --5  월 실적
        --,NVL( CASE WHEN SUM(B.SA5_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT5,0))/1000)   -ROUND(SUM(NVL(B.SA5_SALS,0))/1000) ) END,0) AS SA_SALS5_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU5_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT5,0))/1000)   -ROUND(SUM(NVL(B.SU5_SALS,0))/1000) )  END,0) AS SU_SALS5_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT5,0))/1000)   -ROUND(SUM(NVL(B.SA5_SALS,0))/1000) ) ,0) AS SA_SALS5_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT5,0))/1000)   -ROUND(SUM(NVL(B.SU5_SALS,0))/1000) ) ,0) AS SU_SALS5_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT5)/1000) ,0) AS PREV_REAL_SALE_AMT5   --전년5  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT5)/1000) / (SUM(D.REAL_SALE_AMT5)/1000) ) ,0) PREV_REAL_SALE_AMT5_RATE      --전년5  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT5)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT5,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT5,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT5_RATE    --전년5  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT5,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT5,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT5_RATE    --전년5  월 실적비

        ,NVL( ROUND(SUM(B.SA6_SALS)/1000) ,0)   AS SA6_SALS          -- 6 월 사업계획
        ,NVL( ROUND(SUM(B.SU6_SALS)/1000) ,0)   AS SU6_SALS          -- 6 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT6)/1000) ,0) AS REAL_SALE_AMT6   --6  월 실적
        --,NVL( CASE WHEN SUM(B.SA6_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT6,0))/1000)   -ROUND(SUM(NVL(B.SA6_SALS,0))/1000) ) END,0) AS SA_SALS6_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU6_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT6,0))/1000)   -ROUND(SUM(NVL(B.SU6_SALS,0))/1000) )  END,0) AS SU_SALS6_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT6,0))/1000)   -ROUND(SUM(NVL(B.SA6_SALS,0))/1000) ) ,0) AS SA_SALS6_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT6,0))/1000)   -ROUND(SUM(NVL(B.SU6_SALS,0))/1000) ) ,0) AS SU_SALS6_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT6)/1000) ,0) AS PREV_REAL_SALE_AMT6   --전년6  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT6)/1000) / (SUM(D.REAL_SALE_AMT6)/1000) ) ,0) PREV_REAL_SALE_AMT6_RATE      --전년6  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT6)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT6,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT6,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT6_RATE    --전년6  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT6,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT6,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT6_RATE    --전년6  월 실적비

        ,NVL( ROUND(SUM(B.SA7_SALS)/1000) ,0)   AS SA7_SALS          -- 7 월 사업계획
        ,NVL( ROUND(SUM(B.SU7_SALS)/1000) ,0)   AS SU7_SALS          -- 7 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT7)/1000) ,0) AS REAL_SALE_AMT7   --7  월 실적
        --,NVL( CASE WHEN SUM(B.SA7_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT7,0))/1000)   -ROUND(SUM(NVL(B.SA7_SALS,0))/1000) ) END,0) AS SA_SALS7_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU7_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT7,0))/1000)   -ROUND(SUM(NVL(B.SU7_SALS,0))/1000) )  END,0) AS SU_SALS7_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT7,0))/1000)   -ROUND(SUM(NVL(B.SA7_SALS,0))/1000) ) ,0) AS SA_SALS7_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT7,0))/1000)   -ROUND(SUM(NVL(B.SU7_SALS,0))/1000) ) ,0) AS SU_SALS7_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT7)/1000) ,0) AS PREV_REAL_SALE_AMT7   --전년7  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT7)/1000) / (SUM(D.REAL_SALE_AMT7)/1000) ) ,0) PREV_REAL_SALE_AMT7_RATE      --전년7  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT7)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT7,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT7,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT7_RATE    --전년7  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT7,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT7,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT7_RATE    --전년7  월 실적비

        ,NVL( ROUND(SUM(B.SA8_SALS)/1000) ,0)   AS SA8_SALS          -- 8 월 사업계획
        ,NVL( ROUND(SUM(B.SU8_SALS)/1000) ,0)   AS SU8_SALS          -- 8 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT8)/1000) ,0) AS REAL_SALE_AMT8   --8  월 실적
        --,NVL( CASE WHEN SUM(B.SA8_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT8,0))/1000)   -ROUND(SUM(NVL(B.SA8_SALS,0))/1000) ) END,0) AS SA_SALS8_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU8_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT8,0))/1000)   -ROUND(SUM(NVL(B.SU8_SALS,0))/1000) )  END,0) AS SU_SALS8_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT8,0))/1000)   -ROUND(SUM(NVL(B.SA8_SALS,0))/1000) ) ,0) AS SA_SALS8_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT8,0))/1000)   -ROUND(SUM(NVL(B.SU8_SALS,0))/1000) ) ,0) AS SU_SALS8_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT8)/1000) ,0) AS PREV_REAL_SALE_AMT8   --전년8  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT8)/1000) / (SUM(D.REAL_SALE_AMT8)/1000) ) ,0) PREV_REAL_SALE_AMT8_RATE      --전년8  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT8)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT8,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT8,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT8_RATE    --전년8  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT8,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT8,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT8_RATE    --전년8  월 실적비

        ,NVL( ROUND(SUM(B.SA9_SALS)/1000) ,0)   AS SA9_SALS          -- 9 월 사업계획
        ,NVL( ROUND(SUM(B.SU9_SALS)/1000) ,0)   AS SU9_SALS          -- 9 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT9)/1000) ,0) AS REAL_SALE_AMT9   --9  월 실적
        --,NVL( CASE WHEN SUM(B.SA9_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT9,0))/1000)   -ROUND(SUM(NVL(B.SA9_SALS,0))/1000) ) END,0) AS SA_SALS9_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU9_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT9,0))/1000)   -ROUND(SUM(NVL(B.SU9_SALS,0))/1000) )  END,0) AS SU_SALS9_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT9,0))/1000)   -ROUND(SUM(NVL(B.SA9_SALS,0))/1000) ) ,0) AS SA_SALS9_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT9,0))/1000)   -ROUND(SUM(NVL(B.SU9_SALS,0))/1000) ) ,0) AS SU_SALS9_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT9)/1000) ,0) AS PREV_REAL_SALE_AMT9   --전년9  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT9)/1000) / (SUM(D.REAL_SALE_AMT9)/1000) ) ,0) PREV_REAL_SALE_AMT9_RATE      --전년9  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT9)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT9,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT9,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT9_RATE    --전년9  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT9,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT9,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT9_RATE    --전년9  월 실적비

        ,NVL( ROUND(SUM(B.SA10_SALS)/1000) ,0)   AS SA10_SALS          -- 10 월 사업계획
        ,NVL( ROUND(SUM(B.SU10_SALS)/1000) ,0)   AS SU10_SALS          -- 10 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT10)/1000) ,0) AS REAL_SALE_AMT10   --10  월 실적
        --,NVL( CASE WHEN SUM(B.SA10_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT10,0))/1000)   -ROUND(SUM(NVL(B.SA10_SALS,0))/1000) ) END,0) AS SA_SALS10_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU10_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT10,0))/1000)   -ROUND(SUM(NVL(B.SU10_SALS,0))/1000) )  END,0) AS SU_SALS10_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT10,0))/1000)   -ROUND(SUM(NVL(B.SA10_SALS,0))/1000) ) ,0) AS SA_SALS10_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT10,0))/1000)   -ROUND(SUM(NVL(B.SU10_SALS,0))/1000) ) ,0) AS SU_SALS10_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT10)/1000) ,0) AS PREV_REAL_SALE_AMT10   --전년10  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT10)/1000) / (SUM(D.REAL_SALE_AMT10)/1000) ) ,0) PREV_REAL_SALE_AMT10_RATE      --전년10  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT10)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT10,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT10,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT10_RATE    --전년10  월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT10,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT10,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT10_RATE    --전년10  월 실적비

        ,NVL( ROUND(SUM(B.SA11_SALS)/1000) ,0)   AS SA11_SALS          -- 11 월 사업계획
        ,NVL( ROUND(SUM(B.SU11_SALS)/1000) ,0)   AS SU11_SALS          -- 11 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT11)/1000) ,0) AS REAL_SALE_AMT11   --11  월 실적
        --,NVL( CASE WHEN SUM(B.SA11_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT11,0))/1000)   -ROUND(SUM(NVL(B.SA11_SALS,0))/1000) ) END,0) AS SA_SALS11_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU11_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT11,0))/1000)   -ROUND(SUM(NVL(B.SU11_SALS,0))/1000) )  END,0) AS SU_SALS11_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT11,0))/1000)   -ROUND(SUM(NVL(B.SA11_SALS,0))/1000) ) ,0) AS SA_SALS11_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT11,0))/1000)   -ROUND(SUM(NVL(B.SU11_SALS,0))/1000) ) ,0) AS SU_SALS11_RATE    --1  월 수정계획비        
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT11)/1000) ,0) AS PREV_REAL_SALE_AMT11   --전년11  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT11)/1000) / (SUM(D.REAL_SALE_AMT11)/1000) ) ,0) PREV_REAL_SALE_AMT11_RATE      --전년11  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT11)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT11,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT11,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT11_RATE    --전년11 월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT11,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT11,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT11_RATE    --전년11 월 실적비

        ,NVL( ROUND(SUM(B.SA12_SALS)/1000) ,0)   AS SA12_SALS          -- 12 월 사업계획
        ,NVL( ROUND(SUM(B.SU12_SALS)/1000) ,0)   AS SU12_SALS          -- 12 월 수정계획
        ,NVL( ROUND(SUM(C.REAL_SALE_AMT12)/1000) ,0) AS REAL_SALE_AMT12   --12  월 실적
        --,NVL( CASE WHEN SUM(B.SA12_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT12,0))/1000)   -ROUND(SUM(NVL(B.SA12_SALS,0))/1000) ) END,0) AS SA_SALS12_RATE    --1  월 사업계획비
        --,NVL( CASE WHEN SUM(B.SU12_SALS)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT12,0))/1000)   -ROUND(SUM(NVL(B.SU12_SALS,0))/1000) )  END,0) AS SU_SALS12_RATE    --1  월 수정계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT12,0))/1000)   -ROUND(SUM(NVL(B.SA12_SALS,0))/1000) ) ,0) AS SA_SALS12_RATE    --1  월 사업계획비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT12,0))/1000)   -ROUND(SUM(NVL(B.SU12_SALS,0))/1000) ) ,0) AS SU_SALS12_RATE    --1  월 수정계획비
        ,NVL( ROUND(SUM(D.REAL_SALE_AMT12)/1000) ,0) AS PREV_REAL_SALE_AMT12   --전년12  월 실적
        --,NVL( ROUND((SUM(C.REAL_SALE_AMT12)/1000) / (SUM(D.REAL_SALE_AMT12)/1000) ) ,0) PREV_REAL_SALE_AMT12_RATE      --전년12  월 실적비
        --,NVL( CASE WHEN SUM(D.REAL_SALE_AMT12)   = 0 THEN 0 ELSE ROUND( (SUM(NVL(C.REAL_SALE_AMT12,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT12,0))/1000) )  END,0) AS PREV_REAL_SALE_AMT12_RATE    --전년12 월 실적비
        ,NVL( ROUND( (SUM(NVL(C.REAL_SALE_AMT12,0))/1000)   -ROUND(SUM(NVL(D.REAL_SALE_AMT12,0))/1000) ) ,0) AS PREV_REAL_SALE_AMT12_RATE    --전년12 월 실적비

    FROM
         (
          SELECT A.SABUN,
                 A.NM_KOR,
                 B.MU_CD,
                 (SELECT MU_NM FROM SCC_MU WHERE MU_CD = B.MU_CD) AS MU_NM,
                 B.TM_CD,
                 B.TM_NM
          FROM   HR_PERSONAL A,
                 HLDC_SC_DEPT_V B
          WHERE  B.CC_CD = A.CC_CD
          AND    B.MU_CD = '2004'
          AND    A.CC_CD = '316840'
          AND    A.GB_JAEJIK = 'AA'
         ) A
         ,(
            SELECT
               A.YEAR
              ,A.MM
              ,A.ATTACH_DEPT
              ,(SELECT CODE_NAME FROM SCC_COMMON_CODE
                WHERE  GROUP_CODE = 'ATTACH_DEPT'
                AND CODE = A.ATTACH_DEPT ) AS ATTACH_DEPT_NM   /*귀속부서명 */
              ,A.SALES_EMP
              ,(SELECT X.NM_KOR FROM SCC_USERINFO X WHERE X.SABUN = A.SALES_EMP) AS SALES_EMP_NM
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' THEN NVL(A.SALS_GAIN,0) END),0) AS SA0_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 1  THEN NVL(A.SALS_GAIN,0) END),0) AS SA1_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 2  THEN NVL(A.SALS_GAIN,0) END),0) AS SA2_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 3  THEN NVL(A.SALS_GAIN,0) END),0) AS SA3_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 4  THEN NVL(A.SALS_GAIN,0) END),0) AS SA4_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 5  THEN NVL(A.SALS_GAIN,0) END),0) AS SA5_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 6  THEN NVL(A.SALS_GAIN,0) END),0) AS SA6_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 7  THEN NVL(A.SALS_GAIN,0) END),0) AS SA7_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 8  THEN NVL(A.SALS_GAIN,0) END),0) AS SA8_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 9  THEN NVL(A.SALS_GAIN,0) END),0) AS SA9_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 10 THEN NVL(A.SALS_GAIN,0) END),0) AS SA10_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 11 THEN NVL(A.SALS_GAIN,0) END),0) AS SA11_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'A' AND A.MM = 12 THEN NVL(A.SALS_GAIN,0) END),0) AS SA12_SALS

              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' THEN A.SALS_GAIN END),0) AS SU0_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 1  THEN A.SALS_GAIN END),0) AS SU1_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 2  THEN A.SALS_GAIN END),0) AS SU2_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 3  THEN A.SALS_GAIN END),0) AS SU3_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 4  THEN A.SALS_GAIN END),0) AS SU4_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 5  THEN A.SALS_GAIN END),0) AS SU5_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 6  THEN A.SALS_GAIN END),0) AS SU6_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 7  THEN A.SALS_GAIN END),0) AS SU7_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 8  THEN A.SALS_GAIN END),0) AS SU8_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 9  THEN A.SALS_GAIN END),0) AS SU9_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 10 THEN A.SALS_GAIN END),0) AS SU10_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 11 THEN A.SALS_GAIN END),0) AS SU11_SALS
              ,NVL(SUM(CASE WHEN A.PLAN_CLASS = 'B' AND A.MM = 12 THEN A.SALS_GAIN END),0) AS SU12_SALS

            FROM FTR_SALESMAN_PLAN A
            WHERE 1=1
            AND A.YEAR = :year
            <#if attachDept?has_content>
                AND A.ATTACH_DEPT = :attachDept
            </#if>
            <#if salesEmp?has_content>
                AND A.SALES_EMP = :salesEmp
            </#if>

            GROUP BY A.YEAR,A.MM, A.PLAN_CLASS, A.ATTACH_DEPT, A.SALES_EMP
         ) B
         ,(
           SELECT
                A.ATTACH_DEPT
               ,F.SALE_PRCG_ID
               ,TO_NUMBER(SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6)) MM
               ,SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6)
--               ,SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)))) AS REAL_SALE_AMT1              /* 이익액(출 */

               ,SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)))) AS REAL_SALE_AMT0    /*1월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '01' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT1    /*1월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '02' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT2    /*2월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '03' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT3    /*3월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '04' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT4    /*4월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '05' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT5    /*5월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '06' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT6    /*6월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '07' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT7    /*7월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '08' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT8    /*8월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '09' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT9    /*9월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '10' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT10    /*10월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '11' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT11    /*11월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '12' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT12    /*12월 이익액(출 */
            FROM RELEASE_ITEM_MGMT      A,
                 SALE_ORDER_ITEM_MGMT   B,
                 PO_ORDER_MST           C,
                 INVENTORY_MGMT_DELIVER D,
                 ENTRY_ITEM_DETAIL      E,
                 SALE_ORDER             F,
                 PO_PROPOSAL_MST        G,
                 PO_PROPOSAL_ITEM_DTL   H,
                 (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                     GROUP BY T.DELIVER_NUM
                   ) X
           WHERE 1 = 1
             AND A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
             AND B.PO_ORDER_NUM = C.PO_ORDER_NUM
             AND G.PO_PROPOSAL_NUM = C.PO_PROPOSAL_NUM
             AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
             AND B.DELIVER_NUM = D.DELIVER_NUM
             AND D.ENTRY_NUM = E.ENTRY_NUM(+)
             AND D.ENTRY_ITEM_SEQ = E.ENTRY_ITEM_SEQ(+)
             AND F.SALE_ORDER_NUM = B.SALE_ORDER_NUM
             AND G.PO_PROPOSAL_NUM = H.PO_PROPOSAL_NUM

             AND D.ITEM_CD = H.ITEM_CD
             AND D.ITEM_SEQ = H.PROPOSAL_SEQ

             AND D.DELIVER_NUM = X.DELIVER_NUM(+)

             AND SUBSTR(A.SALS_CONFIRM_DATE, 1, 4) = :year
             GROUP BY F.SALE_PRCG_ID, SUBSTR(A.SALS_CONFIRM_DATE, 1, 6), A.ATTACH_DEPT
          ) C
         ,(
           SELECT
                A.ATTACH_DEPT
               ,F.SALE_PRCG_ID
               ,TO_NUMBER(SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6)) MM
               ,SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6)
               ,SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)))) AS REAL_SALE_AMT0    /*0월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '01' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT1    /*1월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '02' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT2    /*2월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '03' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT3    /*3월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '04' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT4    /*4월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '05' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT5    /*5월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '06' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT6    /*6월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '07' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT7    /*7월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '08' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT8    /*8월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '09' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT9    /*9월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '10' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT10    /*10월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '11' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT11    /*11월 이익액(출 */
               ,CASE WHEN SUBSTR(SUBSTR(A.SALS_CONFIRM_DATE, 1, 6),5,6) = '12' THEN
                    SUM((A.REAL_SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))
                END AS REAL_SALE_AMT12    /*12월 이익액(출 */

            FROM RELEASE_ITEM_MGMT      A,
                 SALE_ORDER_ITEM_MGMT   B,
                 PO_ORDER_MST           C,
                 INVENTORY_MGMT_DELIVER D,
                 ENTRY_ITEM_DETAIL      E,
                 SALE_ORDER             F,
                 PO_PROPOSAL_MST        G,
                 PO_PROPOSAL_ITEM_DTL   H,
                 (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
                     GROUP BY T.DELIVER_NUM
                   ) X
           WHERE 1 = 1
             AND A.SALE_ORDER_NUM = B.SALE_ORDER_NUM
             AND B.PO_ORDER_NUM = C.PO_ORDER_NUM
             AND G.PO_PROPOSAL_NUM = C.PO_PROPOSAL_NUM
             AND A.SALE_ORDER_NUM_SEQ = B.SALE_ORDER_NUM_SEQ
             AND B.DELIVER_NUM = D.DELIVER_NUM
             AND D.ENTRY_NUM = E.ENTRY_NUM(+)
             AND D.ENTRY_ITEM_SEQ = E.ENTRY_ITEM_SEQ(+)
             AND F.SALE_ORDER_NUM = B.SALE_ORDER_NUM
             AND G.PO_PROPOSAL_NUM = H.PO_PROPOSAL_NUM

             AND D.ITEM_CD = H.ITEM_CD
             AND D.ITEM_SEQ = H.PROPOSAL_SEQ

             AND D.DELIVER_NUM = X.DELIVER_NUM(+)

             AND SUBSTR(A.SALS_CONFIRM_DATE, 1, 4) = :prev
             GROUP BY F.SALE_PRCG_ID, SUBSTR(A.SALS_CONFIRM_DATE, 1, 6), A.ATTACH_DEPT
          ) D
    WHERE 1=1
    AND A.SABUN = B.SALES_EMP

    AND B.SALES_EMP  = C.SALE_PRCG_ID(+)
    AND B.ATTACH_DEPT  = C.ATTACH_DEPT(+)
    AND B.MM= C.MM(+)

    AND B.SALES_EMP  = D.SALE_PRCG_ID(+)
    AND B.ATTACH_DEPT  = D.ATTACH_DEPT(+)
    AND B.MM= D.MM(+)

    GROUP BY ROLLUP (B.YEAR,B.ATTACH_DEPT, A.SABUN) HAVING GROUPING(B.YEAR)||GROUPING(B.ATTACH_DEPT)||GROUPING(A.SABUN) IN (000,111,001)
    ORDER BY GROUPING(B.ATTACH_DEPT)  DESC, B.ATTACH_DEPT, GROUPING(B.YEAR)||GROUPING(B.ATTACH_DEPT)||GROUPING(A.SABUN) DESC,  A.SABUN
)
SELECT
    --ROW_NUMBER() OVER(PARTITION BY  A.FLAG ORDER BY LVL DESC,A.FLAG,ATTACH_DEPT, A.SABUN ) AS RANK
     DECODE(FLAG,'1','매출','2','매출이익','3','매출이익률') AS FLAG_NM
    ,FLAG
    ,LVL
    ,ATTACH_DEPT
    ,ATTACH_DEPT_NM
    ,A.SABUN
    ,UUSER

    ,SA0_SALS
    ,SU0_SALS
    ,REAL_SALE_AMT0
    ,SA_SALS0_RATE
    ,SU_SALS0_RATE
    ,PREV_REAL_SALE_AMT0
    ,PREV_REAL_SALE_AMT0_RATE

    ,SA1_SALS
    ,SU1_SALS
    ,REAL_SALE_AMT1
    ,SA_SALS1_RATE
    ,SU_SALS1_RATE
    ,PREV_REAL_SALE_AMT1
    ,PREV_REAL_SALE_AMT1_RATE
    ,SA2_SALS
    ,SU2_SALS
    ,REAL_SALE_AMT2
    ,SA_SALS2_RATE
    ,SU_SALS2_RATE
    ,PREV_REAL_SALE_AMT2
    ,PREV_REAL_SALE_AMT2_RATE
    ,SA3_SALS
    ,SU3_SALS
    ,REAL_SALE_AMT3
    ,SA_SALS3_RATE
    ,SU_SALS3_RATE
    ,PREV_REAL_SALE_AMT3
    ,PREV_REAL_SALE_AMT3_RATE
    ,SA4_SALS
    ,SU4_SALS
    ,REAL_SALE_AMT4
    ,SA_SALS4_RATE
    ,SU_SALS4_RATE
    ,PREV_REAL_SALE_AMT4
    ,PREV_REAL_SALE_AMT4_RATE
    ,SA5_SALS
    ,SU5_SALS
    ,REAL_SALE_AMT5
    ,SA_SALS5_RATE
    ,SU_SALS5_RATE
    ,PREV_REAL_SALE_AMT5
    ,PREV_REAL_SALE_AMT5_RATE
    ,SA6_SALS
    ,SU6_SALS
    ,REAL_SALE_AMT6
    ,SA_SALS6_RATE
    ,SU_SALS6_RATE
    ,PREV_REAL_SALE_AMT6
    ,PREV_REAL_SALE_AMT6_RATE
    ,SA7_SALS
    ,SU7_SALS
    ,REAL_SALE_AMT7
    ,SA_SALS7_RATE
    ,SU_SALS7_RATE
    ,PREV_REAL_SALE_AMT7
    ,PREV_REAL_SALE_AMT7_RATE
    ,SA8_SALS
    ,SU8_SALS
    ,REAL_SALE_AMT8
    ,SA_SALS8_RATE
    ,SU_SALS8_RATE
    ,PREV_REAL_SALE_AMT8
    ,PREV_REAL_SALE_AMT8_RATE
    ,SA9_SALS
    ,SU9_SALS
    ,REAL_SALE_AMT9
    ,SA_SALS9_RATE
    ,SU_SALS9_RATE
    ,PREV_REAL_SALE_AMT9
    ,PREV_REAL_SALE_AMT9_RATE
    ,SA10_SALS
    ,SU10_SALS
    ,REAL_SALE_AMT10
    ,SA_SALS10_RATE
    ,SU_SALS10_RATE
    ,PREV_REAL_SALE_AMT10
    ,PREV_REAL_SALE_AMT10_RATE
    ,SA11_SALS
    ,SU11_SALS
    ,REAL_SALE_AMT11
    ,SA_SALS11_RATE
    ,SU_SALS11_RATE
    ,PREV_REAL_SALE_AMT11
    ,PREV_REAL_SALE_AMT11_RATE
    ,SA12_SALS
    ,SU12_SALS
    ,REAL_SALE_AMT12
    ,SA_SALS12_RATE
    ,SU_SALS12_RATE
    ,PREV_REAL_SALE_AMT12
    ,PREV_REAL_SALE_AMT12_RATE
FROM
(
  SELECT * FROM LV_LIST
  UNION ALL
  SELECT * FROM LV_LIST2
  UNION ALL
  SELECT
        '3' FLAG
--        ,DECODE(T.SABUN, NULL,'111','000') LVL
        ,T.LVL LVL
        ,T.ATTACH_DEPT
        ,T.ATTACH_DEPT_NM   /*귀속부서명 */
        ,T.SABUN
        ,T.UUSER
 
        ,CASE WHEN T.SA0_SALS  = 0 THEN 0 ELSE ROUND(T2.SA0_SALS /T.SA0_SALS *100,1) END          -- 0  월 사업계획
        ,CASE WHEN T.SU0_SALS  = 0 THEN 0 ELSE ROUND(T2.SU0_SALS /T.SU0_SALS *100,1) END          -- 0  월 수정계획
        ,CASE WHEN T.REAL_SALE_AMT0  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT0 /T.REAL_SALE_AMT0 *100,1) END          -- 0  월 실적비
        ,CASE WHEN T.SA0_SALS  = 0 THEN 0 ELSE ROUND(T2.SA0_SALS /T.SA0_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT0  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT0 /T.REAL_SALE_AMT0 *100,1) END  --0월 사업계획비
        ,CASE WHEN T.SU0_SALS  = 0 THEN 0 ELSE ROUND(T2.SU0_SALS /T.SU0_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT0  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT0 /T.REAL_SALE_AMT0 *100,1) END  --0월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT0  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT0 /T.PREV_REAL_SALE_AMT0 *100,1) END          --0월 전년
        --,CASE WHEN T.REAL_SALE_AMT0  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT0 /T.REAL_SALE_AMT0 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT0  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT0 /T.PREV_REAL_SALE_AMT0 *100,1) END  --0월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT0  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT0 /T.PREV_REAL_SALE_AMT0 *100,1) END - CASE WHEN T.REAL_SALE_AMT0  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT0 /T.REAL_SALE_AMT0 *100,1) END  --0월전년비

        ,CASE WHEN T.SA1_SALS  = 0 THEN 0 ELSE ROUND(T2.SA1_SALS /T.SA1_SALS *100,1) END          -- 1  월 사업계획
        ,CASE WHEN T.SU1_SALS  = 0 THEN 0 ELSE ROUND(T2.SU1_SALS /T.SU1_SALS *100,1) END          -- 1  월 수정계획
        ,CASE WHEN T.REAL_SALE_AMT1  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT1 /T.REAL_SALE_AMT1 *100,1) END          -- 1  월 실적비
        ,CASE WHEN T.SA1_SALS  = 0 THEN 0 ELSE ROUND(T2.SA1_SALS /T.SA1_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT1  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT1 /T.REAL_SALE_AMT1 *100,1) END  --1월 사업계획비
        ,CASE WHEN T.SU1_SALS  = 0 THEN 0 ELSE ROUND(T2.SU1_SALS /T.SU1_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT1  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT1 /T.REAL_SALE_AMT1 *100,1) END  --1월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT1  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT1 /T.PREV_REAL_SALE_AMT1 *100,1) END          --1월 전년
        --,CASE WHEN T.REAL_SALE_AMT1  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT1 /T.REAL_SALE_AMT1 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT1  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT1 /T.PREV_REAL_SALE_AMT1 *100,1) END  --1월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT1  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT1 /T.PREV_REAL_SALE_AMT1 *100,1) END - CASE WHEN T.REAL_SALE_AMT1  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT1 /T.REAL_SALE_AMT1 *100,1) END  --1월전년비

        ,CASE WHEN T.SA2_SALS  = 0 THEN 0 ELSE ROUND(T2.SA2_SALS /T.SA2_SALS *100,1) END          -- 2  월 사업계획
        ,CASE WHEN T.SU2_SALS  = 0 THEN 0 ELSE ROUND(T2.SU2_SALS /T.SU2_SALS *100,1) END          -- 2  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT2  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT2 /T.REAL_SALE_AMT2 *100,1) END          -- 2  월 실적비
        ,CASE WHEN T.SA2_SALS  = 0 THEN 0 ELSE ROUND(T2.SA2_SALS /T.SA2_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT2  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT2 /T.REAL_SALE_AMT2 *100,1) END  --2월 사업계획비
        ,CASE WHEN T.SU2_SALS  = 0 THEN 0 ELSE ROUND(T2.SU2_SALS /T.SU2_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT2  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT2 /T.REAL_SALE_AMT2 *100,1) END  --2월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT2  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT2 /T.PREV_REAL_SALE_AMT2 *100,1) END          --2월 전년
        --,CASE WHEN T.REAL_SALE_AMT2  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT2 /T.REAL_SALE_AMT2 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT2  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT2 /T.PREV_REAL_SALE_AMT2 *100,1) END  --2월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT2  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT2 /T.PREV_REAL_SALE_AMT2 *100,1) END - CASE WHEN T.REAL_SALE_AMT2  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT2 /T.REAL_SALE_AMT2 *100,1) END  --2월전년비

        ,CASE WHEN T.SA3_SALS  = 0 THEN 0 ELSE ROUND(T2.SA3_SALS /T.SA3_SALS *100,1) END          -- 3  월 사업계획
        ,CASE WHEN T.SU3_SALS  = 0 THEN 0 ELSE ROUND(T2.SU3_SALS /T.SU3_SALS *100,1) END          -- 3  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT3  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT3 /T.REAL_SALE_AMT3 *100,1) END          -- 3  월 실적비
        ,CASE WHEN T.SA3_SALS  = 0 THEN 0 ELSE ROUND(T2.SA3_SALS /T.SA3_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT3  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT3 /T.REAL_SALE_AMT3 *100,1) END  --3월 사업계획비
        ,CASE WHEN T.SU3_SALS  = 0 THEN 0 ELSE ROUND(T2.SU3_SALS /T.SU3_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT3  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT3 /T.REAL_SALE_AMT3 *100,1) END  --3월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT3  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT3 /T.PREV_REAL_SALE_AMT3 *100,1) END          --3월 전년
        --,CASE WHEN T.REAL_SALE_AMT3  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT3 /T.REAL_SALE_AMT3 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT3  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT3 /T.PREV_REAL_SALE_AMT3 *100,1) END  --3월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT3  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT3 /T.PREV_REAL_SALE_AMT3 *100,1) END - CASE WHEN T.REAL_SALE_AMT3  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT3 /T.REAL_SALE_AMT3 *100,1) END  --3월전년비

        ,CASE WHEN T.SA4_SALS  = 0 THEN 0 ELSE ROUND(T2.SA4_SALS /T.SA4_SALS *100,1) END          -- 4  월 사업계획
        ,CASE WHEN T.SU4_SALS  = 0 THEN 0 ELSE ROUND(T2.SU4_SALS /T.SU4_SALS *100,1) END          -- 4  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT4  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT4 /T.REAL_SALE_AMT4 *100,1) END          -- 4  월 실적비
        ,CASE WHEN T.SA4_SALS  = 0 THEN 0 ELSE ROUND(T2.SA4_SALS /T.SA4_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT4  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT4 /T.REAL_SALE_AMT4 *100,1) END  --4월 사업계획비
        ,CASE WHEN T.SU4_SALS  = 0 THEN 0 ELSE ROUND(T2.SU4_SALS /T.SU4_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT4  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT4 /T.REAL_SALE_AMT4 *100,1) END  --4월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT4  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT4 /T.PREV_REAL_SALE_AMT4 *100,1) END          --4월 전년
        --,CASE WHEN T.REAL_SALE_AMT4  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT4 /T.REAL_SALE_AMT4 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT4  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT4 /T.PREV_REAL_SALE_AMT4 *100,1) END  --4월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT4  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT4 /T.PREV_REAL_SALE_AMT4 *100,1) END - CASE WHEN T.REAL_SALE_AMT4  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT4 /T.REAL_SALE_AMT4 *100,1) END  --4월전년비

        ,CASE WHEN T.SA5_SALS  = 0 THEN 0 ELSE ROUND(T2.SA5_SALS /T.SA5_SALS *100,1) END          -- 5  월 사업계획
        ,CASE WHEN T.SU5_SALS  = 0 THEN 0 ELSE ROUND(T2.SU5_SALS /T.SU5_SALS *100,1) END          -- 5  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT5  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT5 /T.REAL_SALE_AMT5 *100,1) END          -- 5  월 실적비
        ,CASE WHEN T.SA5_SALS  = 0 THEN 0 ELSE ROUND(T2.SA5_SALS /T.SA5_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT5  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT5 /T.REAL_SALE_AMT5 *100,1) END  --5월 사업계획비
        ,CASE WHEN T.SU5_SALS  = 0 THEN 0 ELSE ROUND(T2.SU5_SALS /T.SU5_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT5  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT5 /T.REAL_SALE_AMT5 *100,1) END  --5월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT5  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT5 /T.PREV_REAL_SALE_AMT5 *100,1) END          --5월 전년
        --,CASE WHEN T.REAL_SALE_AMT5  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT5 /T.REAL_SALE_AMT5 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT5  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT5 /T.PREV_REAL_SALE_AMT5 *100,1) END  --5월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT5  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT5 /T.PREV_REAL_SALE_AMT5 *100,1) END - CASE WHEN T.REAL_SALE_AMT5  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT5 /T.REAL_SALE_AMT5 *100,1) END  --5월전년비

        ,CASE WHEN T.SA6_SALS  = 0 THEN 0 ELSE ROUND(T2.SA6_SALS /T.SA6_SALS *100,1) END          -- 6  월 사업계획
        ,CASE WHEN T.SU6_SALS  = 0 THEN 0 ELSE ROUND(T2.SU6_SALS /T.SU6_SALS *100,1) END          -- 6  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT6  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT6 /T.REAL_SALE_AMT6 *100,1) END          -- 6  월 실적비
        ,CASE WHEN T.SA6_SALS  = 0 THEN 0 ELSE ROUND(T2.SA6_SALS /T.SA6_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT6  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT6 /T.REAL_SALE_AMT6 *100,1) END  --6월 사업계획비
        ,CASE WHEN T.SU6_SALS  = 0 THEN 0 ELSE ROUND(T2.SU6_SALS /T.SU6_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT6  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT6 /T.REAL_SALE_AMT6 *100,1) END  --6월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT6  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT6 /T.PREV_REAL_SALE_AMT6 *100,1) END          --6월 전년
        --,CASE WHEN T.REAL_SALE_AMT6  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT6 /T.REAL_SALE_AMT6 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT6  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT6 /T.PREV_REAL_SALE_AMT6 *100,1) END  --6월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT7 /T.PREV_REAL_SALE_AMT7 *100,1) END - CASE WHEN T.REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT7 /T.REAL_SALE_AMT7 *100,1) END  --7월전년비

        ,CASE WHEN T.SA7_SALS  = 0 THEN 0 ELSE ROUND(T2.SA7_SALS /T.SA7_SALS *100,1) END          -- 7  월 사업계획
        ,CASE WHEN T.SU7_SALS  = 0 THEN 0 ELSE ROUND(T2.SU7_SALS /T.SU7_SALS *100,1) END          -- 7  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT7 /T.REAL_SALE_AMT7 *100,1) END          -- 7  월 실적비
        ,CASE WHEN T.SA7_SALS  = 0 THEN 0 ELSE ROUND(T2.SA7_SALS /T.SA7_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT7 /T.REAL_SALE_AMT7 *100,1) END  --7월 사업계획비
        ,CASE WHEN T.SU7_SALS  = 0 THEN 0 ELSE ROUND(T2.SU7_SALS /T.SU7_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT7 /T.REAL_SALE_AMT7 *100,1) END  --7월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT7 /T.PREV_REAL_SALE_AMT7 *100,1) END          --7월 전년
        --,CASE WHEN T.REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT7 /T.REAL_SALE_AMT7 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT7 /T.PREV_REAL_SALE_AMT7 *100,1) END  --7월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT7 /T.PREV_REAL_SALE_AMT7 *100,1) END - CASE WHEN T.REAL_SALE_AMT7  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT7 /T.REAL_SALE_AMT7 *100,1) END  --7월전년비


        ,CASE WHEN T.SA8_SALS  = 0 THEN 0 ELSE ROUND(T2.SA8_SALS /T.SA8_SALS *100,1) END          -- 8  월 사업계획
        ,CASE WHEN T.SU8_SALS  = 0 THEN 0 ELSE ROUND(T2.SU8_SALS /T.SU8_SALS *100,1) END          -- 8  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT8  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT8 /T.REAL_SALE_AMT8 *100,1) END          -- 8  월 실적비
        ,CASE WHEN T.SA8_SALS  = 0 THEN 0 ELSE ROUND(T2.SA8_SALS /T.SA8_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT8  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT8 /T.REAL_SALE_AMT8 *100,1) END  --8월 사업계획비
        ,CASE WHEN T.SU8_SALS  = 0 THEN 0 ELSE ROUND(T2.SU8_SALS /T.SU8_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT8  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT8 /T.REAL_SALE_AMT8 *100,1) END  --8월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT8  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT8 /T.PREV_REAL_SALE_AMT8 *100,1) END          --8월 전년
        --,CASE WHEN T.REAL_SALE_AMT8  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT8 /T.REAL_SALE_AMT8 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT8  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT8 /T.PREV_REAL_SALE_AMT8 *100,1) END  --8월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT8  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT8 /T.PREV_REAL_SALE_AMT8 *100,1) END - CASE WHEN T.REAL_SALE_AMT8  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT8 /T.REAL_SALE_AMT8 *100,1) END  --8월전년비

        ,CASE WHEN T.SA9_SALS  = 0 THEN 0 ELSE ROUND(T2.SA9_SALS /T.SA9_SALS *100,1) END          -- 9  월 사업계획
        ,CASE WHEN T.SU9_SALS  = 0 THEN 0 ELSE ROUND(T2.SU9_SALS /T.SU9_SALS *100,1) END          -- 9  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT9  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT9 /T.REAL_SALE_AMT9 *100,1) END          -- 9  월 실적비
        ,CASE WHEN T.SA9_SALS  = 0 THEN 0 ELSE ROUND(T2.SA9_SALS /T.SA9_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT9  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT9 /T.REAL_SALE_AMT9 *100,1) END  --9월 사업계획비
        ,CASE WHEN T.SU9_SALS  = 0 THEN 0 ELSE ROUND(T2.SU9_SALS /T.SU9_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT9  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT9 /T.REAL_SALE_AMT9 *100,1) END  --9월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT9  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT9 /T.PREV_REAL_SALE_AMT9 *100,1) END          --9월 전년
        --,CASE WHEN T.REAL_SALE_AMT9  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT9 /T.REAL_SALE_AMT9 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT9  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT9 /T.PREV_REAL_SALE_AMT9 *100,1) END  --9월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT9  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT9 /T.PREV_REAL_SALE_AMT9 *100,1) END - CASE WHEN T.REAL_SALE_AMT9  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT9 /T.REAL_SALE_AMT9 *100,1) END  --9월전년비

        ,CASE WHEN T.SA10_SALS  = 0 THEN 0 ELSE ROUND(T2.SA10_SALS /T.SA10_SALS *100,1) END          -- 10  월 사업계획
        ,CASE WHEN T.SU10_SALS  = 0 THEN 0 ELSE ROUND(T2.SU10_SALS /T.SU10_SALS *100,1) END          -- 10  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT10  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT10 /T.REAL_SALE_AMT10 *100,1) END          -- 10  월 실적비
        ,CASE WHEN T.SA10_SALS  = 0 THEN 0 ELSE ROUND(T2.SA10_SALS /T.SA10_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT10  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT10 /T.REAL_SALE_AMT10 *100,1) END  --10월 사업계획비
        ,CASE WHEN T.SU10_SALS  = 0 THEN 0 ELSE ROUND(T2.SU10_SALS /T.SU10_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT10  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT10 /T.REAL_SALE_AMT10 *100,1) END  --10월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT10  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT10 /T.PREV_REAL_SALE_AMT10 *100,1) END          --10월 전년
        --,CASE WHEN T.REAL_SALE_AMT10  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT10 /T.REAL_SALE_AMT10 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT10  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT10 /T.PREV_REAL_SALE_AMT10 *100,1) END  --10월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT10  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT10 /T.PREV_REAL_SALE_AMT10 *100,1) END - CASE WHEN T.REAL_SALE_AMT10  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT10 /T.REAL_SALE_AMT10 *100,1) END  --10월전년비

        ,CASE WHEN T.SA11_SALS  = 0 THEN 0 ELSE ROUND(T2.SA11_SALS /T.SA11_SALS *100,1) END          -- 11  월 사업계획
        ,CASE WHEN T.SU11_SALS  = 0 THEN 0 ELSE ROUND(T2.SU11_SALS /T.SU11_SALS *100,1) END          -- 11  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT11  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT11 /T.REAL_SALE_AMT11 *100,1) END          -- 11  월 실적비
        ,CASE WHEN T.SA11_SALS  = 0 THEN 0 ELSE ROUND(T2.SA11_SALS /T.SA11_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT11  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT11 /T.REAL_SALE_AMT11 *100,1) END  --11월 사업계획비
        ,CASE WHEN T.SU11_SALS  = 0 THEN 0 ELSE ROUND(T2.SU11_SALS /T.SU11_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT11  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT11 /T.REAL_SALE_AMT11 *100,1) END  --11월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT11  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT11 /T.PREV_REAL_SALE_AMT11 *100,1) END          --11월 전년
        --,CASE WHEN T.REAL_SALE_AMT11  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT11 /T.REAL_SALE_AMT11 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT11  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT11 /T.PREV_REAL_SALE_AMT11 *100,1) END  --11월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT11  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT11 /T.PREV_REAL_SALE_AMT11 *100,1) END - CASE WHEN T.REAL_SALE_AMT11  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT11 /T.REAL_SALE_AMT11 *100,1) END  --11월전년비

        ,CASE WHEN T.SA12_SALS  = 0 THEN 0 ELSE ROUND(T2.SA12_SALS /T.SA12_SALS *100,1) END          -- 12  월 사업계획
        ,CASE WHEN T.SU12_SALS  = 0 THEN 0 ELSE ROUND(T2.SU12_SALS /T.SU12_SALS *100,1) END          -- 12  월 수정계획비
        ,CASE WHEN T.REAL_SALE_AMT12  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT12 /T.REAL_SALE_AMT12 *100,1) END          -- 12  월 실적비
        ,CASE WHEN T.SA12_SALS  = 0 THEN 0 ELSE ROUND(T2.SA12_SALS /T.SA12_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT12  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT12 /T.REAL_SALE_AMT12 *100,1) END  --12월 사업계획비
        ,CASE WHEN T.SU12_SALS  = 0 THEN 0 ELSE ROUND(T2.SU12_SALS /T.SU12_SALS *100,1) END - CASE WHEN T.REAL_SALE_AMT12  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT12 /T.REAL_SALE_AMT12 *100,1) END  --12월 수정계획비
        ,CASE WHEN T.PREV_REAL_SALE_AMT12  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT12 /T.PREV_REAL_SALE_AMT12 *100,1) END          --12월 전년
        --,CASE WHEN T.REAL_SALE_AMT12  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT12 /T.REAL_SALE_AMT12 *100,1) END - CASE WHEN T.PREV_REAL_SALE_AMT12  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT12 /T.PREV_REAL_SALE_AMT12 *100,1) END  --12월전년비
        ,CASE WHEN T.PREV_REAL_SALE_AMT12  = 0 THEN 0 ELSE ROUND(T2.PREV_REAL_SALE_AMT12 /T.PREV_REAL_SALE_AMT12 *100,1) END - CASE WHEN T.REAL_SALE_AMT12  = 0 THEN 0 ELSE ROUND(T2.REAL_SALE_AMT12 /T.REAL_SALE_AMT12 *100,1) END  --12월전년비
 
  FROM LV_LIST T
     , LV_LIST2 T2
  WHERE 1=1
  AND T.ATTACH_DEPT = T2.ATTACH_DEPT(+)
  AND T.SABUN = T2.SABUN(+)
  AND T.LVL=T2.LVL(+)
) A, HR_PERSONAL B
WHERE A.SABUN = B.SABUN(+)
ORDER BY A.FLAG,  SUBSTR(A.ATTACH_DEPT,2,1)  DESC, DECODE(A.ATTACH_DEPT,'20',1,'10',2,'30',3) , LVL DESC,   B.JIK_KUP
        ]]>
	</statement>


	<!-- SAP 전표 전송 목록을 조회한다. -->
	<statement name="sapSlipSendStatus" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.sapSlipSendStatus */
		<![CDATA[
 SELECT DISTINCT
        '0' CHK
        ,M.SLIP_NUM
        ,M.SLIP_TYPE
        ,(
            SELECT  DISTINCT B.MU_CD
            FROM   HR_PERSONAL A,
                   HLDC_SC_DEPT_V B
            WHERE B.CC_CD =N.ATTACH_DEPT
         ) MU_CD
        ,(
            SELECT  DISTINCT B.MU_NM
            FROM   HR_PERSONAL A,
                   HLDC_SC_DEPT_V B
            WHERE B.CC_CD =N.ATTACH_DEPT
         ) MU_NM
        ,SCC_CODE_NM('SLIP_TYPE', M.SLIP_TYPE) SLIP_TYPE_NM
        ,M.SLIP_EVIDENCE_DATE
        ,M.SLIP_PERIOD_DATE
        ,M.SLIP_TEXT
        ,M.WRITE_EMP_SABUN
        ,M.SYS_CD
        ,SCC_CODE_NM('SYS_CD', M.SYS_CD) SYS_NM
        ,M.ELCTN_SIGN_ID
        ,L.SLIP_STATUS
        ,SCC_CODE_NM('SLIP_STATUS',L.SLIP_STATUS) SLIP_STATUS_NM
        ,M.SIGN_STATUS
        ,Q.INSTANCE_ID

        ,SCC_SIGN_STATUS_FUN(Q.INSTANCE_ID) SIGN_PROGRESS_STATUS    -- 결재진행상태
        ,DECODE(M.SLIP_TYPE,'7D','서면결재',SCC_CODE_NM('SIGN_PROGRESS_STATUS',SCC_SIGN_STATUS_FUN(Q.INSTANCE_ID))) SIGN_PROGRESS_STATUS_NM
        ,N.ITEM_TEXT AS REMARK
        ,SCC_GET_TM_BY_CC('CODE',N.ATTACH_DEPT) TM_CD
        ,SCC_GET_TM_BY_CC('NAME',N.ATTACH_DEPT) TM_NM
        ,N.ATTACH_DEPT
        ,(SELECT DISTINCT MU.CC_NM FROM HLDC_SC_DEPT_V MU WHERE N.ATTACH_DEPT = MU.CC_CD) ATTACH_DEPT_NM
        ,N.LCAL_AMT AS D_AMT
        ,N.C_AMT
        ,L.PROC_DATE
        ,L.RESULT_MSG
FROM    SAP_IF.SAP_IFC_SLIP_MST M
        ,(SELECT T.SLIP_NUM
              , MAX(T.ATTACH_DEPT) AS ATTACH_DEPT
              , MAX(T.MU_CD) AS MU_CD
              , MAX(T.ITEM_TEXT) AS ITEM_TEXT
              , SUM(DECODE(T.DR_CR_CLASS,1,T.SLIP_CURRENCY_AMT)) AS LCAL_AMT
              , SUM(DECODE(T.DR_CR_CLASS,2,T.SLIP_CURRENCY_AMT)) AS C_AMT
          FROM SAP_IF.SAP_IFC_SLIP_DTL T
          GROUP BY T.SLIP_NUM
         ) N
        ,FT_SAP_INTERFACE L
        ,SIGN_IF.TB_EVT_INFO Q
WHERE M.SLIP_NUM =N.SLIP_NUM
AND   N.SLIP_NUM = L.SLIP_NUM
AND   M.ELCTN_SIGN_ID = Q.CLIENT_ID(+)
AND     N.ATTACH_DEPT IN (
        SELECT  A.CC_CD
        FROM    SCC_CC A
                ,HLDC_SC_DEPT_V B
        WHERE   B.CC_CD = A.CC_CD
        AND     A.START_DATE <= TO_CHAR(SYSDATE,'YYYYMMDD')
        AND     A.END_DATE > TO_CHAR(SYSDATE,'YYYYMMDD')
        )
<#if slipPeriodDateFrom?has_content && slipPeriodDateTo?has_content>
    AND     M.SLIP_PERIOD_DATE BETWEEN :slipPeriodDateFrom AND :slipPeriodDateTo
</#if>
<#if slipType?has_content>
    AND     M.SLIP_TYPE = :slipType
</#if>
<#if slipStatus?has_content>
    AND     L.SLIP_STATUS = :slipStatus
</#if>
<#if attachDept?has_content>
    AND     N.ATTACH_DEPT = :attachDept
</#if>
<#if signProgressStatus?has_content>
    AND     SCC_SIGN_STATUS_FUN(Q.INSTANCE_ID) = :signProgressStatus
</#if>
ORDER BY M.SLIP_NUM DESC


        ]]>
	</statement>


	<!-- SAP 전표 전송 내역 목록을 조회한다. -->
	<statement name="sapSlipSendStatusDtlList" type="select">
		/*+
		com.hwfs.sm.srm.dao.SapSlipSendReptPopDAO.sapSlipSendStatusDtlList
		*/
		<![CDATA[
            SELECT   T.SLIP_NUM                                               -- 외부문서번호
                    ,T.BU_CD                                                  -- 회사코드
                    ,DTL_NUM                                                -- 회계전표의개별항목번호
                    ,T.SLIP_TYPE                                              -- 전표유형
                    ,SCC_CODE_NM('SLIP_TYPE', T.SLIP_TYPE) SLIP_TYPE_NM
                    ,T.SLIP_EVIDENCE_DATE                                     -- 증빙일
                    ,T.SLIP_PERIOD_DATE                                       -- 전기일
                    ,DECODE(DR_CR_CLASS,'1',MASTER_ACCT,'') D_ACCT_CD       -- 차변계정
                    ,DECODE(DR_CR_CLASS,'1',SCC_ACCT_NM_FUN(MASTER_ACCT),'') D_ACCT_NM
                    ,DECODE(DR_CR_CLASS,'2',MASTER_ACCT,'') C_ACCT_CD       -- 대변계정
                    ,DECODE(DR_CR_CLASS,'2',SCC_ACCT_NM_FUN(MASTER_ACCT),'') C_ACCT_NM
                    ,DECODE(DR_CR_CLASS,'1',T.SLIP_CURRENCY_AMT,0) D_AMT               -- 대변금액
                    ,DECODE(DR_CR_CLASS,'2',T.SLIP_CURRENCY_AMT,0) C_AMT               -- 차변금액
                    ,DR_CR_CLASS                                            -- 차대구분
                    ,DECODE(DR_CR_CLASS,'1','차변','대변') DR_CR_CLASS_NM
                    ,NEXT_BU_CD                                             -- 다음회사코드
                    ,CC_CD                                                  -- 코스트센터
                    ,SCC_CC_NM_FUN(CC_CD) CC_NM
                    ,ORDER_NUM                                              -- 오더번호
                    ,FNCT_PRVN                                              -- 기능영역
                    ,PL_CENTER                                              -- 손익센터
                    ,MINUS_PERIOD_YN                                        -- 지시자:마이너스전기
                    ,SLIP_CURRENCY_AMT                                      -- 전표통화금액
                    ,SUPPLYPLCE_NUM                                         -- 공급처번호
                    ,GUEST_NUM                                              -- 고객번호
                    ,FO_SUPPLYPLCE_NUM                                      -- FO공급처번호
                    ,FO_CUST_NM                                             -- FO거래명
                    ,MU_CD                                                  -- 사업영역
                    ,SCC_MU_NM_FUN(MU_CD) MU_NM
                    ,INLT_YN                                                -- 분양관련여부
                    ,ITEM_TEXT                                              -- 품목텍스트
                    ,VAT_CD                                                 -- 부가가치세코드
                    ,(SELECT V.VAT_NM FROM SLA_VAT_CD_MST V WHERE V.VAT_CD = T.VAT_CD) VAT_NM
                    ,UPJANG                                                 -- 사업장
                    ,STD_AMT                                                -- 과세표준금액(전표통화)
                    ,TAX_AMT                                                -- 세액(전표통화)
                    ,QUANTITY                                               -- 수량
                    ,UNIT                                                   -- 단위
                    ,PAYER_NAME                                             -- 수취인/지급인
                    ,EXPIRE_CAL_BASIS_DATE                                  -- 만기계산기준일
                    ,PAY_MTOD                                               -- 지급방법
                    ,PAY_COND                                               -- 지급조건키
                    ,PAY_DFER                                               -- 지급보류키
                    ,PAY_REF                                                -- 지급참조
                    ,LC_NUM                                                 -- LC번호
                    ,MEMB_NUM                                               -- 회원권번호
                    ,REAL_USER                                              -- 실사용자
                    ,TEL_NUM                                                -- 전화번호
                    ,USE_NO_MAN                                             -- 사용인원
                    ,ASSIGN_NUM                                             -- 지정번호
                    ,PO_NUM                                                 -- PO번호
                    ,ATTACH_DEPT                                            -- 귀속부서
                    ,MGMT_DEPT                                              -- 관리부서
                    ,MGMT_ARTICLE                                           -- 관리항목
                    ,REASON_CD                                              -- 사유코드
                    ,CRGLEFT_CLASS                                          -- 계좌구분코드(Banktype)
                    ,SINGLE_PAY_YN                                          -- 전표에서개별수취인체크마크
                    ,TEMP_CUST_NM                                           -- 일회성거래처명
                    ,BANK_ACCT_NO                                           -- 은행계정번호
                    ,BANK_ACCT_OWNR                                         -- 예금주
                    ,BANK_CD                                                -- 은행번호
                    ,CO_PA_GUEST                                            -- CO-PA고객
                    ,CO_PA_CC_CD                                            -- CO-PA코스트센터
                    ,START_DATE                                             -- 기간From
                    ,END_DATE                                               -- 기간To
                    ,BL_DATE                                                -- BL일자
                    ,ASSET_NUM                                              -- 주요자산번호
                    ,ASSET_LLEVEL_NUM                                       -- 자산하위번호
                    ,MGMT_GUEST                                             -- 관리고객
                    ,MGMT_SUPPLYPLCE                                        -- 관리공급처
                    ,CUST_REMARK                                            -- 거래처(TXT)
                    ,REF_DATE                                               -- 참조일자
                    ,LSHIP_DATE                                             -- 선적일자
                    ,TAX_STD_AMT                                            -- 과세표준액
                    ,MM_AMT                                                 -- 월세
                    ,TAX_RATE                                               -- 세율
                    ,INT_RATE                                               -- 이자율
                    ,GU_OFFICE_NUM                                          -- 구청번호
                    ,REMARK1                                                -- 참조텍스트(30)
                    ,REMARK2                                                -- 참조텍스트(100)
                    ,ADDR                                                   -- 주소
                    ,ETC                                                    -- 기타6
                    ,CARD_SRL_NUM                                           -- 카드일련번호
                    ,CARD_INTERFACE_NUM                                     -- 카드I/FNO
                    ,CARD_NUM                                               -- 카드번호
--                    ,INTERFACE_LOG_NUM                                      -- InterfaceLogNo.
                    ,T2.ELCTNTAX_BILL_APPRVNUM ELCTNTAX_BILL_APPRVNUM                -- 전자세금 계산서 승인번호
            FROM    SAP_IF.SAP_IFC_SLIP_DTL T
                   ,SAP_IF.SAP_IFC_SLIP_MST T2
            WHERE T.SLIP_NUM = T2.SLIP_NUM
            AND T.SLIP_NUM = :slipNum
            ORDER BY DTL_NUM
        ]]>
	</statement>


	<!-- PO별 미착 재고 현황 -->
	<statement name="pobyNonarrivInventoryStatus" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.pobyNonarrivInventoryStatus
		*/
		<![CDATA[
--PO별 미착 재고 현황
SELECT
    A.PO_ORDER_NUM
   ,D.ATTACH_DEPT
   ,(SELECT CODE_NAME FROM SCC_COMMON_CODE
     WHERE  GROUP_CODE = 'ATTACH_DEPT'
     AND CODE = D.ATTACH_DEPT ) AS ATTACH_DEPT_NM   /*귀속부서명 SAP*/
   ,D.SPLR_NM               --매입처명
   ,D.SALSPLCE_NM           --매출처명
   ,(SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
      WHERE T.SABUN = T2.DRAFTER_ID
      AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
    ) AS SALE_PRCG_NM               /*담당자*/
   ,D.BL_NUM AS BL_NUM              /* BL NO */
   ,NVL(A.WONWTR_AMT_KRW,0)  AS DELIVER_AMT
FROM
(
    SELECT PO_ORDER_NUM, SUM(DR_AMT)-SUM(CR_AMT), SUM(SLIP_CURRENCY_AMT) AS WONWTR_AMT_KRW
      FROM (
            -- 미착 발생(원물대) 
            SELECT A.PO_ORDER_NUM, A.WONWTR_AMT_KRW AS DR_AMT, 0 AS CR_AMT, DECODE(B.DR_CR_CLASS, '1', 1, -1) * B.SLIP_CURRENCY_AMT AS SLIP_CURRENCY_AMT, B.DR_CR_CLASS, B.SLIP_NUM 
              FROM 
                   (
                    SELECT A.PO_ORDER_NUM, A.SLIP_NUM, SUM(B.WONWTR_AMT_KRW) WONWTR_AMT_KRW
                      FROM GDSPAYM_MST A
                         , PO_ORDER_ITEM_DETAIL B
                     WHERE A.PO_ORDER_NUM = B.PO_ORDER_NUM
                       AND A.SLIP_NUM IS NOT NULL
                     GROUP BY A.PO_ORDER_NUM, A.SLIP_NUM       
                   ) A
                 , (
                     SELECT F.SLIP_NUM, D.SLIP_CURRENCY_AMT, D.DR_CR_CLASS
                     FROM   
                              SAP_IF.SAP_IFC_SLIP_MST M
                            , SAP_IF.SAP_IFC_SLIP_DTL D
                            , FT_SAP_INTERFACE F
                     WHERE    M.SLIP_NUM =D.SLIP_NUM
                     AND      D.SLIP_NUM = F.SLIP_NUM
                     AND      M.SLIP_PERIOD_DATE <= :startTerm
                     AND      F.SLIP_STATUS IN ('P','V')
                     AND      D.MASTER_ACCT='11404000'
                   ) B
             WHERE A.SLIP_NUM = B.SLIP_NUM
            UNION ALL 
            -- 미착 대체(원물대) 
            SELECT A.PO_ORDER_NUM, 0 AS DR_AMT, A.WONWTR_AMT_KRW AS CR_AMT, DECODE(B.DR_CR_CLASS, '1', 1, -1) * B.SLIP_CURRENCY_AMT AS SLIP_CURRENCY_AMT, B.DR_CR_CLASS, B.SLIP_NUM 
              FROM 
                   (
                    SELECT A.PO_ORDER_NUM, A.ALT_FISCAL_SLIP_NUM, SUM(B.WONWTR_AMT_KRW) WONWTR_AMT_KRW
                      FROM GDSPAYM_MST A
                         , PO_ORDER_ITEM_DETAIL B
                     WHERE A.PO_ORDER_NUM = B.PO_ORDER_NUM
                       AND A.ALT_FISCAL_SLIP_NUM IS NOT NULL
                     GROUP BY A.PO_ORDER_NUM, A.ALT_FISCAL_SLIP_NUM       
                   ) A
                 , (
                     SELECT F.SLIP_NUM, D.SLIP_CURRENCY_AMT, D.DR_CR_CLASS
                     FROM   
                              SAP_IF.SAP_IFC_SLIP_MST M
                            , SAP_IF.SAP_IFC_SLIP_DTL D
                            , FT_SAP_INTERFACE F
                     WHERE    M.SLIP_NUM =D.SLIP_NUM
                     AND      D.SLIP_NUM = F.SLIP_NUM
                     AND      M.SLIP_PERIOD_DATE <= :startTerm 
                     AND      F.SLIP_STATUS IN ('P','V')
                     AND      D.MASTER_ACCT='11404000'
                   ) B
             WHERE A.ALT_FISCAL_SLIP_NUM = B.SLIP_NUM
            UNION ALL 
            -- 미착 발생(부대비)
            select A.PO_ORDER_NUM, A.COMM_AMT AS DR_AMT, 0 AS CR_AMT, DECODE(B.DR_CR_CLASS, '1', 1, -1) * B.SLIP_CURRENCY_AMT AS SLIP_CURRENCY_AMT, B.DR_CR_CLASS, B.SLIP_NUM
              from PO_ORDER_OTHER_AMT A
                 , (
                     SELECT F.SLIP_NUM, D.SLIP_CURRENCY_AMT, D.DR_CR_CLASS
                     FROM   
                              SAP_IF.SAP_IFC_SLIP_MST M
                            , SAP_IF.SAP_IFC_SLIP_DTL D
                            , FT_SAP_INTERFACE F
                     WHERE    M.SLIP_NUM =D.SLIP_NUM
                     AND      D.SLIP_NUM = F.SLIP_NUM
                     AND      M.SLIP_PERIOD_DATE <= :startTerm 
                     AND      F.SLIP_STATUS IN ('P','V')
                     AND      D.MASTER_ACCT='11404000'
                   ) B
             WHERE A.SLIP_NUM = B.SLIP_NUM 
            UNION ALL   
            -- 미착 대체(부대비)   
            select A.PO_ORDER_NUM, 0 AS DR_AMT, A.DIV_AMT AS CR_AMT, DECODE(B.DR_CR_CLASS, '1', 1, -1) * B.SLIP_CURRENCY_AMT AS SLIP_CURRENCY_AMT, B.DR_CR_CLASS, B.SLIP_NUM
              from (SELECT A.PO_ORDER_NUM, B.ALT_FISCAL_SLIP_NUM, SUM(B.DIV_AMT) DIV_AMT 
                      FROM INVENTORY_MGMT_DELIVER A
                         , DELIVERITEM_OTHER_AMT_DIV  B
                     WHERE A.DELIVER_NUM = B.DELIVER_NUM
                       AND B.ALT_FISCAL_SLIP_NUM IS NOT NULL
                     GROUP BY A.PO_ORDER_NUM, B.ALT_FISCAL_SLIP_NUM
                   ) A
                 , (
                     SELECT F.SLIP_NUM, D.SLIP_CURRENCY_AMT, D.DR_CR_CLASS
                     FROM   
                              SAP_IF.SAP_IFC_SLIP_MST M
                            , SAP_IF.SAP_IFC_SLIP_DTL D
                            , FT_SAP_INTERFACE F
                     WHERE    M.SLIP_NUM =D.SLIP_NUM
                     AND      D.SLIP_NUM = F.SLIP_NUM
                     AND      M.SLIP_PERIOD_DATE <= :startTerm 
                     AND      F.SLIP_STATUS IN ('P','V')
                     AND      D.MASTER_ACCT='11404000'
                   ) B
             WHERE A.ALT_FISCAL_SLIP_NUM = B.SLIP_NUM
      )
    GROUP BY PO_ORDER_NUM
) A
, PO_ORDER_MST D
WHERE A.PO_ORDER_NUM = D.PO_ORDER_NUM
<#if attachDept?has_content>
    AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
</#if>
AND NVL(A.WONWTR_AMT_KRW,0) >0

        ]]>
	</statement>

	<statement name="pobyNonarrivInventoryStatus_back" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.pobyNonarrivInventoryStatus
		*/
		<![CDATA[
--PO별 미착 재고 현황
SELECT
    A.PO_ORDER_NUM
   ,D.ATTACH_DEPT
   ,(SELECT CODE_NAME FROM SCC_COMMON_CODE
     WHERE  GROUP_CODE = 'ATTACH_DEPT'
     AND CODE = D.ATTACH_DEPT ) AS ATTACH_DEPT_NM   /*귀속부서명 SAP*/
   ,D.SPLR_NM               --매입처명
   ,D.SALSPLCE_NM           --매출처명
   ,(SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
      WHERE T.SABUN = T2.DRAFTER_ID
      AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
    ) AS SALE_PRCG_NM               /*담당자*/
   ,D.BL_NUM AS BL_NUM              /* BL NO */
   ,NVL(A.WONWTR_AMT_KRW,0)  AS DELIVER_AMT
FROM
(
  SELECT
      T.PO_ORDER_NUM
     ,SUM(WONWTR_AMT_KRW) AS WONWTR_AMT_KRW
  FROM
  (
      SELECT
           T.PO_ORDER_NUM
          ,SUM(WONWTR_AMT_KRW) AS WONWTR_AMT_KRW
      FROM
      (
        SELECT
            A.PO_ORDER_NUM
           ,TRUNC((SELECT SUM(T.WONWTR_AMT_KRW) FROM PO_ORDER_ITEM_DETAIL T WHERE A.PO_ORDER_NUM = PO_ORDER_NUM),0) AS WONWTR_AMT_KRW
        FROM GDSPAYM_MST A
            ,SAP_IF.SAP_IFC_SLIP_MST X
        WHERE 1=1
        AND A.SLIP_NUM = X.SLIP_NUM
        AND X.SLIP_EVIDENCE_DATE <=:startTerm
        AND A.PO_ORDER_NUM LIKE '100%'
        GROUP BY A.PO_ORDER_NUM

        UNION ALL

        SELECT
            A.PO_ORDER_NUM
            ,SUM(A.COMM_AMT) AS SIGN_AMT
        FROM
            PO_ORDER_OTHER_AMT A
            ,SAP_IF.SAP_IFC_SLIP_MST X
            ,SCC_COMMON_CODE Y
        WHERE A.SLIP_NUM = X.SLIP_NUM
        AND A.COMM_CLASS = Y.CODE
        AND A.PO_ORDER_NUM LIKE '100%'
        AND X.SLIP_EVIDENCE_DATE <=:startTerm
        AND Y.ATTR02='Y'         --배부타입 Y 만
        GROUP BY A.PO_ORDER_NUM
      ) T
      GROUP BY T.PO_ORDER_NUM

  UNION ALL

      SELECT
          A.PO_ORDER_NUM
         ,-(NVL(A.DELIVER_AMT,0) + NVL(C.DIV_AMT,0))  AS DELIVER_AMT
      FROM
      (SELECT
              T.PO_ORDER_NUM
             ,NVL(SUM(T2.DELIVER_AMT),0) AS  DELIVER_AMT
        FROM ENTRY_ITEM_DETAIL T
            ,INVENTORY_MGMT_DELIVER T2
        WHERE T.ENTRY_NUM = T2.ENTRY_NUM
         AND T.ENTRY_ITEM_SEQ = T2.ENTRY_ITEM_SEQ
         AND T.PO_ORDER_NUM LIKE '100%'
        GROUP BY T.PO_ORDER_NUM
       ) A
      , GDSPAYM_MST B
      ,(
           SELECT
                 T.PO_ORDER_NUM
                ,NVL(SUM(T2.DIV_AMT),0) AS DIV_AMT
           FROM INVENTORY_MGMT_DELIVER T
               ,DELIVERITEM_OTHER_AMT_DIV T2
               ,PO_ORDER_OTHER_AMT  T3
               ,SAP_IF.SAP_IFC_SLIP_MST X
               ,SAP_IF.SAP_IFC_SLIP_STATUS Y
           WHERE T.DELIVER_NUM = T2.DELIVER_NUM
           AND T.PO_ORDER_NUM = T3.PO_ORDER_NUM
           AND T2.OTHER_AMT_SEQ =T3.OTHER_AMT_SEQ
           AND T2.ALT_FISCAL_SLIP_NUM = X.SLIP_NUM(+)
           AND X.SLIP_NUM = Y.SLIP_NUM
           AND T.PO_ORDER_NUM LIKE '100%'

           AND X.SLIP_EVIDENCE_DATE <=:startTerm
           GROUP BY T.PO_ORDER_NUM
      ) C
      , SAP_IF.SAP_IFC_SLIP_MST X
      , SAP_IF.SAP_IFC_SLIP_MST Y
      , SAP_IF.SAP_IFC_SLIP_STATUS Z
      WHERE A.PO_ORDER_NUM = B.PO_ORDER_NUM
      AND A.PO_ORDER_NUM = C.PO_ORDER_NUM
      AND B.SLIP_NUM = X.SLIP_NUM(+)  --미착 대상중에서
      AND B.ALT_FISCAL_SLIP_NUM = Y.SLIP_NUM(+)
      AND B.ALT_FISCAL_SLIP_NUM = Z.SLIP_NUM(+)
      AND DECODE(Y.SLIP_EVIDENCE_DATE,NULL,'99999999',Y.SLIP_EVIDENCE_DATE) <=:startTerm
  ) T
  GROUP BY T.PO_ORDER_NUM
) A
, PO_ORDER_MST D
WHERE A.PO_ORDER_NUM = D.PO_ORDER_NUM
<#if attachDept?has_content>
    AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
</#if>
AND NVL(A.WONWTR_AMT_KRW,0) >0

        ]]>
	</statement>

	<!-- PO별 상품 재고 현황을 조회한다. -->
	<statement name="pobyGoodsInventoryStatus" type="select">
		/*+ com.hwfs.ft.ftr.dao.FtStatsDAO.pobyGoodsInventoryStatus */
		<![CDATA[
/*PO별 상품 재고 현황*/
SELECT
   T.DELIVER_STATUS,   /* 입고상태 */
   T.PO_ORDER_NUM,               /* PO NUM */
   T.ATTACH_DEPT,                /* 귀속부서 코드 */
   T.ATTACH_DEPT_NM,         /* 귀속부서명 */
   T.SPLR_CD,                  /* 매입처코드 */
   T.SPLR_NM,                  /* 매입처명 */
   T.SALSPLCE_CD,              /* 매출처 */
   T.SALSPLCE_NM,              /* 매출처명 */
   T.SALE_PRCG_NM,           /*담당자*/
   T.LAST_SALE_EDATE,            /* 최종판매종료일 */
   T.ITEM_CD,                    /* 품목코드 */
   T.ITEM_NM,                    /* 품목명 */
   T.WH_CD,                      /* 창고코드 */
   T.WH_NM,                      /* 창고명 */
   T.BL_NUM,              /* BL NO */
   T.FIRST_DELIVER_DATE,         /* 최초입고일 */
   T.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
   T.UNIT,                       /* 입고단위 */
   T.DELIVER_QUANTITY,           /* 입고수량 */
   T.RELEASE_QUANTITY,           /* 출고수량 */
   --T.INVENTORY_QUANTITY,   --시점재고 : 입고 - 누적 수량
   NVL(T.DELIVER_QUANTITY,0) - NVL(T.RELEASE_QUANTITY,0) - NVL(T.CONTROL_QUANTITY,0) AS INVENTORY_QUANTITY,
   T.DELIVER_WGT,           /* 입고중량 */
   T.RELEASE_WGT,           /* 출고중량 */
   T.REAL_WGT,           /* 실출고중량 */
   --T.INVENTORY_WGT,      --시점재고 : 입고 - 누적 수량
   NVL(T.DELIVER_WGT,0) - NVL(T.REAL_WGT,0) - NVL(T.CONTROL_WGT,0) AS INVENTORY_WGT,
   T.DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

   ROUND(T.DELIVER_AMT) AS DELIVER_AMT,                /* 입고금액 --수정 */
   T.SALE_AMT,                   /* 출고금액(판매금액) */
   T.SALE_CST AS SALE_CST,                   /* 출고원가금액(판매원가) */
   ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) AS INVENTORY_AMT,              /* 재고금액 */

   --T.DELIVER_UPRICE_KRW * DECODE(T.UNIT,'KG',T.INVENTORY_WGT,T.INVENTORY_QUANTITY) AS INVENTORY_AMT,
   --ROUND(T.DELIVER_AMT) - T.SALE_CST AS INVENTORY_AMT,
   --T.INVENTORY_AMT,
   T.GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
   CASE WHEN T.SALE_AMT =0 THEN
          0
   ELSE
          ROUND(T.GAIN_AMT/T.SALE_AMT*100,1)
   END AS GAIN_RATE,	/* 이익률((이익액/출고금액)*100) */
   T.DELIVER_BOX,           /* 입고BOX */
   T.RELEASE_BOX,           /* 출고BOX */
   T.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
   T.RELEASE_WAIT_WGT,       /* 출고대기중량 */
   T.RELEASE_END_QUANTITY,   /* 출고완료수량 */
   T.RELEASE_END_WGT,        /* 출고완료중량 */
   T.RMA_QUANTITY,           /* 반품수량 */
   T.RMA_WGT,                /* 반품중량 */
   T.WH_MOVE_QUANTITY,       /* 창고이동수량 */
   T.WH_MOVE_WGT,            /* 창고이동중량 */
   T.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
   T.ORDER_REMAIN_WGT,       /* 주문잔여중량 */
   T.CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
   T.CONTROL_WGT,            /* 재고(폐기)조정중량*/
   T.CONTROL_AMT             /* 재고(폐기)조정금액*/   
FROM
(
    SELECT SCC_CODE_NM('DELIVER_STATUS', D.DELIVER_STATUS) AS DELIVER_STATUS,   /* 입고상태 */
           D.PO_ORDER_NUM,               /* PO NUM */
           D.ATTACH_DEPT,                /* 귀속부서 코드 */
           SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
           D.SPLR_CD,                  /* 매입처코드 */
           D.SPLR_NM,                  /* 매입처명 */
           D.SALSPLCE_CD,              /* 매출처 */
           D.SALSPLCE_NM,              /* 매출처명 */
           (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
            WHERE T.SABUN = T2.DRAFTER_ID
            AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
            ) AS SALE_PRCG_NM,           /*담당자*/

           D.LAST_SALE_EDATE,            /* 최종판매종료일 */
           D.ITEM_CD,                    /* 품목코드 */
           K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
           D.WH_CD,                      /* 창고코드 */
           D.WH_NM,                      /* 창고명 */
           CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
               C.BL_NUM
           ELSE
              (
                SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
                AND D.ITEM_CD = T.ITEM_CD
                AND D.ITEM_SEQ = T.ITEM_SEQ
              )
           END AS BL_NUM,              /* BL NO */

           D.FIRST_DELIVER_DATE,         /* 최초입고일 */
           D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
           D.UNIT,                       /* 입고단위 */
           NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
           --NVL(A.RELEASE_QUANTITY,0) AS RELEASE_QUANTITY,           /* 출고수량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0)
           ELSE
               NVL(A.RELEASE_QUANTITY,0)
           END
           RELEASE_QUANTITY,

           D.DELIVER_QUANTITY - NVL(A.RELEASE_QUANTITY,0)  - NVL(Y.DELIVER_QUANTITY,0) AS INVENTORY_QUANTITY,
/*
          NVL((MAX(D.DELIVER_QUANTITY) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM))),0)
          -
          NVL(((SUM( D.DELIVER_QUANTITY  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )) -D.DELIVER_QUANTITY),0)
          - NVL(A.RELEASE_QUANTITY,0)
          AS INVENTORY_QUANTITY,   --시점재고
*/

           NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
           --NVL(A.REAL_WGT,0) AS RELEASE_WGT,           /* 출고중량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.RELEASE_WGT,0) + NVL(Y.DELIVER_WGT,0)
           ELSE
               NVL(A.RELEASE_WGT,0)
           END
           RELEASE_WGT,
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.REAL_WGT,0) + NVL(Y.DELIVER_WGT,0)
           ELSE
               NVL(A.REAL_WGT,0)
           END
           REAL_WGT,           
          --시점재고 : 입고 - 누적 수량
          /*
          NVL((MAX(D.DELIVER_WGT) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM))),0)
          -
          NVL(((SUM( D.DELIVER_WGT ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )) -D.DELIVER_WGT),0)
          - NVL(A.REAL_WGT,0)
          AS INVENTORY_WGT,   --시점재고
*/
           D.DELIVER_WGT - NVL(A.RELEASE_WGT,0)  - NVL(Y.DELIVER_WGT,0) AS INVENTORY_WGT,   --시점재고


           CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
               0
           ELSE
              ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
           END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

           NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) AS DELIVER_AMT,                /* 입고금액 --수정 */
           --A.BUY_CST AS DELIVER_AMT,
           NVL(A.SALE_AMT,0) AS SALE_AMT,                   /* 출고금액(판매금액) */
           --ROUND(NVL(ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)),0))  AS SALE_CST,                   /* 출고원가금액(판매원가) */
           ROUND(A.BUY_CST)  AS SALE_CST,                   /* 출고원가금액(판매원가) */

           --NVL(D.DELIVER_UPRICE_KRW * DECODE(D.UNIT, 'KG', (NVL(D.DELIVER_WGT,0) - NVL(A.REAL_WGT,0)),  (NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0))  ),0) AS INVENTORY_AMT,
           ROUND((SUM(  D.DELIVER_AMT+NVL(X.DIV_AMT,0)  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING))
           -BUY_CST )
           AS INVENTORY_AMT,

           --NVL((A.SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
           NVL((A.SALE_AMT - A.BUY_CST),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */

           NVL(CASE WHEN A.SALE_AMT = 0 THEN 0
           ELSE
               ROUND((A.SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
           END,0) AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

           ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
           ROUND(NVL(B.RELEASE_QUANTITY, 0),0) AS RELEASE_BOX,           /* 출고BOX */
           D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
           ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
           D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
           ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
           D.RMA_QUANTITY,           /* 반품수량 */
           ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
           D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
           ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
           D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
           ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,        /* 주문잔여중량 */
           NVL(L.CONTROL_QUANTITY, 0) AS CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
           NVL(L.CONTROL_WGT, 0) AS CONTROL_WGT,                 /* 재고(폐기)조정중량*/
           NVL(L.CONTROL_AMT, 0) AS CONTROL_AMT                  /* 재고(폐기)조정금액*/           
    FROM
     (
        SELECT
              T2.*
          FROM INVENTORY_MGMT_DELIVER T2
              ,ENTRY_MST X
              ,GDSPAYM_MST Y
              ,SAP_IF.SAP_IFC_SLIP_MST Z
        WHERE T2.ENTRY_NUM = X.ENTRY_NUM
        AND X.PO_ORDER_NUM = Y.PO_ORDER_NUM
        AND Y.ALT_FISCAL_SLIP_NUM = Z.SLIP_NUM
        AND Z.SLIP_EVIDENCE_DATE <= '20160418'   -- 입고 누적
     ) D
     ,(
        SELECT T2.INITIAL_DELIVER_NUM
              ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
              ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
          FROM INVENTORY_MGMT_DELIVER T2
              ,ENTRY_MST X
              ,GDSPAYM_MST Y
              ,SAP_IF.SAP_IFC_SLIP_MST Z
        WHERE T2.ENTRY_NUM = X.ENTRY_NUM
        AND X.PO_ORDER_NUM = Y.PO_ORDER_NUM
        AND Y.ALT_FISCAL_SLIP_NUM = Z.SLIP_NUM
        AND Z.SLIP_EVIDENCE_DATE <= '20160418'
        GROUP BY T2.INITIAL_DELIVER_NUM
     ) Y
     ,(
        SELECT T2.INITIAL_DELIVER_NUM
              ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
              ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
          FROM INVENTORY_MGMT_DELIVER T2
              ,ENTRY_MST X
              ,GDSPAYM_MST Y
              ,SAP_IF.SAP_IFC_SLIP_MST Z
        WHERE T2.ENTRY_NUM = X.ENTRY_NUM
        AND X.PO_ORDER_NUM = Y.PO_ORDER_NUM
        AND Y.ALT_FISCAL_SLIP_NUM = Z.SLIP_NUM
        AND Z.SLIP_EVIDENCE_DATE > '20160418'
        GROUP BY T2.INITIAL_DELIVER_NUM
     ) Z
     ,PO_ORDER_MST           C,
     (SELECT T.DELIVER_NUM
           , SUM(RELEASE_QUANTITY) AS RELEASE_QUANTITY
           , SUM(RELEASE_WGT) AS RELEASE_WGT

      FROM SALE_ORDER_ITEM_MGMT T GROUP BY T.DELIVER_NUM ) B,
     (SELECT
            T.DELIVER_NUM
          , ROUND(SUM(T2.REAL_SALE_AMT)) AS SALE_AMT
          , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
          , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
          , SUM(T2.REAL_WGT) AS REAL_WGT
          , SUM(T2.BUY_CST) AS BUY_CST

          , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
          , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
      FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
      WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
      AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
      AND T2.RELEASE_DATE <= '20160418'              --재고미포함
      GROUP BY T.DELIVER_NUM
     ) A,
     (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN
        FROM DELIVERITEM_OTHER_AMT_DIV T
            ,SAP_IF.SAP_IFC_SLIP_MST Z
      WHERE T.ALT_FISCAL_SLIP_NUM = Z.SLIP_NUM
      AND Z.SLIP_EVIDENCE_DATE <= '20160418'
      GROUP BY T.DELIVER_NUM
       ) X
     ,HLDC_PO_ITEM_MST K
     ,INVENTORY_CONTROL_LOG L
    WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
    AND D.DELIVER_NUM = X.DELIVER_NUM(+)
    AND D.DELIVER_NUM = B.DELIVER_NUM(+)
    AND D.DELIVER_NUM = A.DELIVER_NUM(+)
    AND D.DELIVER_NUM = Y.INITIAL_DELIVER_NUM(+)
    AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
    AND D.DELIVER_NUM = L.DELIVER_NUM(+)
    AND D.ITEM_CD = K.ITEM_CODE(+)
    AND D.DELIVER_STATUS <> '10' --가입고 제외
    <#if search?has_content>
         <#if searchContents?has_content>
            <#if search == "A"> /* PO No */
                AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
            <#elseif search == "B"> /* 창고명 */
                AND D.WH_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "C"> /* 매입처명 */
                AND D.SPLR_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "D"> /* 매출처명 */
                AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "E"> /* 품목명 */
                AND D.ITEM_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "F"> /* BL NO */
               AND C.BL_NUM LIKE '%'||:searchContents||'%'
            </#if>
           </#if>
    </#if>
     <#if attachDept?has_content>
        AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
    </#if>
     <#if deliverNum?has_content>
        AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
    </#if>
    ORDER BY D.PO_ORDER_NUM       DESC,
                D.DELIVER_NUM,
              D.CDATE DESC
) T
WHERE 1=1
<#if chkInventoryYn?has_content>
     <#if chkInventoryYn == "Y"> /* 재고포함 */
         --AND T.INVENTORY_QUANTITY >=0
         AND ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) >= 0
     <#else>
         --AND T.INVENTORY_QUANTITY >0
         AND ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) > 0
     </#if>
<#else>
        --AND T.INVENTORY_QUANTITY >0
        AND ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) > 0
</#if>

UNION ALL

SELECT
   T.DELIVER_STATUS,   /* 입고상태 */
   T.PO_ORDER_NUM,               /* PO NUM */
   T.ATTACH_DEPT,                /* 귀속부서 코드 */
   T.ATTACH_DEPT_NM,         /* 귀속부서명 */
   T.SPLR_CD,                  /* 매입처코드 */
   T.SPLR_NM,                  /* 매입처명 */
   T.SALSPLCE_CD,              /* 매출처 */
   T.SALSPLCE_NM,              /* 매출처명 */
   T.SALE_PRCG_NM,           /*담당자*/
   T.LAST_SALE_EDATE,            /* 최종판매종료일 */
   T.ITEM_CD,                    /* 품목코드 */
   T.ITEM_NM,                    /* 품목명 */
   T.WH_CD,                      /* 창고코드 */
   T.WH_NM,                      /* 창고명 */
   T.BL_NUM,              /* BL NO */
   T.FIRST_DELIVER_DATE,         /* 최초입고일 */
   T.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
   T.UNIT,                       /* 입고단위 */
   T.DELIVER_QUANTITY,           /* 입고수량 */
   T.RELEASE_QUANTITY,           /* 출고수량 */
   --T.INVENTORY_QUANTITY,   --시점재고 : 입고 - 누적 수량
   NVL(T.DELIVER_QUANTITY,0) - NVL(T.RELEASE_QUANTITY,0) - NVL(T.CONTROL_QUANTITY,0) AS INVENTORY_QUANTITY,
   T.DELIVER_WGT,           /* 입고중량 */
   T.RELEASE_WGT,           /* 출고중량 */
   T.REAL_WGT,           /* 실출고중량 */
   --T.INVENTORY_WGT,      --시점재고 : 입고 - 누적 수량
   NVL(T.DELIVER_WGT,0) - NVL(T.REAL_WGT,0) - NVL(T.CONTROL_WGT,0) AS INVENTORY_WGT,
   T.DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

   ROUND(T.DELIVER_AMT) AS DELIVER_AMT,                /* 입고금액 --수정 */
   T.SALE_AMT,                   /* 출고금액(판매금액) */
   T.SALE_CST AS SALE_CST,                   /* 출고원가금액(판매원가) */
   ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) AS INVENTORY_AMT,              /* 재고금액 */

   --T.DELIVER_UPRICE_KRW * DECODE(T.UNIT,'KG',T.INVENTORY_WGT,T.INVENTORY_QUANTITY) AS INVENTORY_AMT,
   --ROUND(T.DELIVER_AMT) - T.SALE_CST AS INVENTORY_AMT,
   --T.INVENTORY_AMT,
   T.GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
   CASE WHEN T.SALE_AMT =0 THEN
          0
   ELSE
          ROUND(T.GAIN_AMT/T.SALE_AMT*100,1)
   END AS GAIN_RATE,	/* 이익률((이익액/출고금액)*100) */
   T.DELIVER_BOX,           /* 입고BOX */
   T.RELEASE_BOX,           /* 출고BOX */
   T.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
   T.RELEASE_WAIT_WGT,       /* 출고대기중량 */
   T.RELEASE_END_QUANTITY,   /* 출고완료수량 */
   T.RELEASE_END_WGT,        /* 출고완료중량 */
   T.RMA_QUANTITY,           /* 반품수량 */
   T.RMA_WGT,                /* 반품중량 */
   T.WH_MOVE_QUANTITY,       /* 창고이동수량 */
   T.WH_MOVE_WGT,            /* 창고이동중량 */
   T.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
   T.ORDER_REMAIN_WGT,       /* 주문잔여중량 */
   T.CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
   T.CONTROL_WGT,            /* 재고(폐기)조정중량*/
   T.CONTROL_AMT             /* 재고(폐기)조정금액*/   
FROM
(
    SELECT SCC_CODE_NM('DELIVER_STATUS', D.DELIVER_STATUS) AS DELIVER_STATUS,   /* 입고상태 */
           D.PO_ORDER_NUM,               /* PO NUM */
           D.ATTACH_DEPT,                /* 귀속부서 코드 */
           SCC_CODE_NM('ATTACH_DEPT', D.ATTACH_DEPT) AS ATTACH_DEPT_NM,         /* 귀속부서명 */
           D.SPLR_CD,                  /* 매입처코드 */
           D.SPLR_NM,                  /* 매입처명 */
           D.SALSPLCE_CD,              /* 매출처 */
           D.SALSPLCE_NM,              /* 매출처명 */
           (SELECT NM_KOR FROM HR_PERSONAL T, PO_PROPOSAL_MST T2
            WHERE T.SABUN = T2.DRAFTER_ID
            AND D.PO_PROPOSAL_NUM = T2.PO_PROPOSAL_NUM
            ) AS SALE_PRCG_NM,           /*담당자*/

           D.LAST_SALE_EDATE,            /* 최종판매종료일 */
           D.ITEM_CD,                    /* 품목코드 */
           K.ITEM_NAME||' '||K.ITEM_SIZE AS ITEM_NM,
           D.WH_CD,                      /* 창고코드 */
           D.WH_NM,                      /* 창고명 */
           CASE WHEN D.PO_TYPE= '10' THEN    --수입(KRW)
               C.BL_NUM
           ELSE
              (
                SELECT T.ITEM_BL_NUM FROM PO_ORDER_ITEM_DETAIL T
                WHERE D.PO_ORDER_NUM = T.PO_ORDER_NUM
                AND D.ITEM_CD = T.ITEM_CD
                AND D.ITEM_SEQ = T.ITEM_SEQ
              )
           END AS BL_NUM,              /* BL NO */

           D.FIRST_DELIVER_DATE,         /* 최초입고일 */
           D.CURRENT_WH_DELIVER_DATE,    /* 현재창고입고일 */
           D.UNIT,                       /* 입고단위 */
           NVL(D.DELIVER_QUANTITY,0) AS DELIVER_QUANTITY,           /* 입고수량 */
           --NVL(A.RELEASE_QUANTITY,0) AS RELEASE_QUANTITY,           /* 출고수량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.RELEASE_QUANTITY,0) + NVL(Y.DELIVER_QUANTITY,0)
           ELSE
               NVL(A.RELEASE_QUANTITY,0)
           END
           RELEASE_QUANTITY,

           D.DELIVER_QUANTITY - NVL(A.RELEASE_QUANTITY,0)  - NVL(Y.DELIVER_QUANTITY,0) AS INVENTORY_QUANTITY,
/*
          NVL((MAX(D.DELIVER_QUANTITY) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM))),0)
          -
          NVL(((SUM( D.DELIVER_QUANTITY  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )) -D.DELIVER_QUANTITY),0)
          - NVL(A.RELEASE_QUANTITY,0)
          AS INVENTORY_QUANTITY,   --시점재고
*/

           NVL(D.DELIVER_WGT,0) AS DELIVER_WGT,           /* 입고중량 */
           --NVL(A.REAL_WGT,0) AS RELEASE_WGT,           /* 출고중량 */
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.RELEASE_WGT,0) + NVL(Y.DELIVER_WGT,0)
           ELSE
               NVL(A.RELEASE_WGT,0)
           END
           RELEASE_WGT,
           CASE WHEN D.DELIVER_TYPE = '10' THEN
               NVL(A.REAL_WGT,0) + NVL(Y.DELIVER_WGT,0)
           ELSE
               NVL(A.REAL_WGT,0)
           END
           REAL_WGT,           
          --시점재고 : 입고 - 누적 수량
          /*
          NVL((MAX(D.DELIVER_WGT) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM))),0)
          -
          NVL(((SUM( D.DELIVER_WGT ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING )) -D.DELIVER_WGT),0)
          - NVL(A.REAL_WGT,0)
          AS INVENTORY_WGT,   --시점재고
*/
           D.DELIVER_WGT - NVL(A.RELEASE_WGT,0)  - NVL(Y.DELIVER_WGT,0) AS INVENTORY_WGT,   --시점재고


           CASE WHEN DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY) = 0 THEN
               0
           ELSE
              ROUND((NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0)) / DECODE(D.UNIT,'KG',D.DELIVER_WGT,D.DELIVER_QUANTITY))
           END  AS DELIVER_UPRICE_KRW,         /* 입고단가(원화) */

           NVL(D.DELIVER_AMT,0) +NVL(X.DIV_AMT,0) AS DELIVER_AMT,                /* 입고금액 --수정 */
           --A.BUY_CST AS DELIVER_AMT,
           NVL(A.SALE_AMT,0) AS SALE_AMT,                   /* 출고금액(판매금액) */
           --ROUND(NVL(ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY)),0))  AS SALE_CST,                   /* 출고원가금액(판매원가) */
           ROUND(A.BUY_CST)  AS SALE_CST,                   /* 출고원가금액(판매원가) */

           --NVL(D.DELIVER_UPRICE_KRW * DECODE(D.UNIT, 'KG', (NVL(D.DELIVER_WGT,0) - NVL(A.REAL_WGT,0)),  (NVL(D.DELIVER_QUANTITY,0) - NVL(A.RELEASE_QUANTITY,0))  ),0) AS INVENTORY_AMT,
           ROUND((SUM(  D.DELIVER_AMT+NVL(X.DIV_AMT,0)  ) OVER(PARTITION BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) ORDER BY NVL(D.INITIAL_DELIVER_NUM,D.DELIVER_NUM) , D.CURRENT_WH_DELIVER_DATE, D.CDATE  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING))
           -BUY_CST )
           AS INVENTORY_AMT,

           --NVL((A.SALE_AMT - ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */
           NVL((A.SALE_AMT - A.BUY_CST),0) AS GAIN_AMT,              /* 이익액(출고금액-출고원가금액) */

           NVL(CASE WHEN A.SALE_AMT = 0 THEN 0
           ELSE
               ROUND((A.SALE_AMT - (ROUND((D.DELIVER_AMT+NVL(X.DIV_AMT,0)) * DECODE(D.UNIT, 'KG', A.REAL_WGT, A.RELEASE_QUANTITY ) /  DECODE(D.UNIT, 'KG', D.DELIVER_WGT, D.DELIVER_QUANTITY))))/A.SALE_AMT * 100, 1)
           END,0) AS GAIN_RATE,      /* 이익률((이익액/출고금액)*100) */

           ROUND(NVL(D.DELIVER_QUANTITY, 0),0) AS DELIVER_BOX,           /* 입고BOX */
           ROUND(NVL(B.RELEASE_QUANTITY, 0),0) AS RELEASE_BOX,           /* 출고BOX */
           D.RELEASE_WAIT_QUANTITY,  /* 출고대기수량 */
           ROUND(D.RELEASE_WAIT_WGT, 2) AS RELEASE_WAIT_WGT,       /* 출고대기중량 */
           D.RELEASE_END_QUANTITY,   /* 출고완료수량 */
           ROUND(D.RELEASE_END_WGT, 2) AS RELEASE_END_WGT,        /* 출고완료중량 */
           D.RMA_QUANTITY,           /* 반품수량 */
           ROUND(D.RMA_WGT, 2) AS RMA_WGT,                /* 반품중량 */
           D.WH_MOVE_QUANTITY,       /* 창고이동수량 */
           ROUND(D.WH_MOVE_WGT, 2) AS WH_MOVE_WGT,            /* 창고이동중량 */
           D.ORDER_REMAIN_QUANTITY,  /* 주문잔여수량 */
           ROUND(D.ORDER_REMAIN_WGT, 2) AS ORDER_REMAIN_WGT,      /* 주문잔여중량 */
           NVL(L.CONTROL_QUANTITY, 0) AS CONTROL_QUANTITY,       /* 재고(폐기)조정수량*/
           NVL(L.CONTROL_WGT, 0) AS CONTROL_WGT,                 /* 재고(폐기)조정중량*/
           NVL(L.CONTROL_AMT, 0) AS CONTROL_AMT                  /* 재고(폐기)조정금액*/

    FROM
     INVENTORY_MGMT_DELIVER D
     ,(
        SELECT T2.INITIAL_DELIVER_NUM
              ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
              ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
          FROM INVENTORY_MGMT_DELIVER T2
        WHERE T2.CURRENT_WH_DELIVER_DATE<= '20160418'   -- 입고,출고 누적
        AND T2.PO_TYPE='20'	--내수
        GROUP BY T2.INITIAL_DELIVER_NUM
     ) Y
     ,(
        SELECT T2.INITIAL_DELIVER_NUM
              ,SUM(T2.DELIVER_QUANTITY) AS DELIVER_QUANTITY
              ,SUM(T2.DELIVER_WGT) AS DELIVER_WGT
          FROM INVENTORY_MGMT_DELIVER T2
        WHERE T2.CURRENT_WH_DELIVER_DATE > '20160418'   -- 입고누적
        AND T2.PO_TYPE='20'	--내수
        GROUP BY T2.INITIAL_DELIVER_NUM
     ) Z
     ,PO_ORDER_MST           C,
     (SELECT T.DELIVER_NUM
           , SUM(RELEASE_QUANTITY) AS RELEASE_QUANTITY
           , SUM(RELEASE_WGT) AS RELEASE_WGT

      FROM SALE_ORDER_ITEM_MGMT T GROUP BY T.DELIVER_NUM ) B,
     (SELECT
            T.DELIVER_NUM
          , ROUND(SUM(T2.REAL_SALE_AMT)) AS SALE_AMT
          , SUM(T2.RELEASE_QUANTITY) AS RELEASE_QUANTITY
          , SUM(T2.RELEASE_WGT) AS RELEASE_WGT
          , SUM(T2.REAL_WGT) AS REAL_WGT
          , SUM(T2.BUY_CST) AS BUY_CST

          , SUM(T2.PURCHASE_RETURN_QUANTITY) AS PURCHASE_RETURN_QUANTITY
          , SUM(T2.PURCHASE_RETURN_WGT) AS PURCHASE_RETURN_WGT
      FROM SALE_ORDER_ITEM_MGMT T, RELEASE_ITEM_MGMT T2
      WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
      AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
                  AND T2.RELEASE_DATE <= '20160418'              --재고미포함
      GROUP BY T.DELIVER_NUM
     ) A,
     (SELECT T.DELIVER_NUM, SUM(T.DIV_AMT) AS DIV_AMT, NVL(MAX(T.NONARRIV_ALT_YN),'N') AS NONARRIV_ALT_YN FROM DELIVERITEM_OTHER_AMT_DIV T
         GROUP BY T.DELIVER_NUM
       ) X
     ,HLDC_PO_ITEM_MST K
     ,INVENTORY_CONTROL_LOG L
    WHERE D.PO_ORDER_NUM = C.PO_ORDER_NUM
    AND D.DELIVER_NUM = X.DELIVER_NUM(+)
    AND D.DELIVER_NUM = B.DELIVER_NUM(+)
    AND D.DELIVER_NUM = A.DELIVER_NUM(+)
    AND D.DELIVER_NUM = Y.INITIAL_DELIVER_NUM(+)
    AND D.DELIVER_NUM = Z.INITIAL_DELIVER_NUM(+)
    AND D.DELIVER_NUM = L.DELIVER_NUM(+)
    AND D.ITEM_CD = K.ITEM_CODE(+)
    AND D.DELIVER_STATUS <> '10' --가입고 제외
    AND D.PO_TYPE='20'	--내수
    --AND D.FIRST_DELIVER_DATE <= :startTerm
    AND D.CURRENT_WH_DELIVER_DATE <= :startTerm
    <#if deliverType?has_content>
        AND D.DELIVER_TYPE = :deliverType        /*입고유형*/
    </#if>
    <#if deliverStatus?has_content>
        AND D.DELIVER_STATUS = :deliverStatus      /*입고상태*/
    </#if>
     <#if search?has_content>
         <#if searchContents?has_content>
            <#if search == "A"> /* PO No */
                AND D.PO_ORDER_NUM LIKE '%'||:searchContents||'%'
            <#elseif search == "B"> /* 창고명 */
                AND D.WH_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "C"> /* 매입처명 */
                AND D.SPLR_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "D"> /* 매출처명 */
                AND D.SALSPLCE_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "E"> /* 품목명 */
                AND D.ITEM_NM LIKE '%'||:searchContents||'%'
            <#elseif search == "F"> /* BL NO */
               AND C.BL_NUM LIKE '%'||:searchContents||'%'
            </#if>
           </#if>
    </#if>
     <#if attachDept?has_content>
        AND D.ATTACH_DEPT =:attachDept      /*귀속부서*/
    </#if>
     <#if deliverNum?has_content>
        AND D.DELIVER_NUM =:deliverNum      /*입고번호*/
    </#if>
    ORDER BY D.PO_ORDER_NUM       DESC,
             D.DELIVER_NUM,
             D.CDATE DESC
) T
WHERE 1=1

<#if chkInventoryYn?has_content>
     <#if chkInventoryYn == "Y"> /* 재고포함 */
         --AND T.INVENTORY_QUANTITY >=0
         AND ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) >= 0
     <#else>
         --AND T.INVENTORY_QUANTITY >0
         --AND ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) > 0
			  AND (T.PO_ORDER_NUM) IN (
			    SELECT D.PO_ORDER_NUM
			      FROM INVENTORY_MGMT_DELIVER D,
			           (SELECT T.DELIVER_NUM ,
			                   SUM(T2.BUY_CST) AS BUY_CST
			              FROM SALE_ORDER_ITEM_MGMT T,
			                   RELEASE_ITEM_MGMT T2
			             WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
			               AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
			               AND T2.RELEASE_DATE <= '20160418' --재고미포함
			             GROUP BY T.DELIVER_NUM ) A,
			           (SELECT T.DELIVER_NUM,
			                   SUM(T.DIV_AMT) AS DIV_AMT
			              FROM DELIVERITEM_OTHER_AMT_DIV T
			             GROUP BY T.DELIVER_NUM ) X,
			           (SELECT T.DELIVER_NUM,
			                   SUM(T.CONTROL_AMT) AS CONTROL_AMT
			              FROM INVENTORY_CONTROL_LOG T
			             GROUP BY T.DELIVER_NUM ) L
			     WHERE D.DELIVER_NUM = X.DELIVER_NUM(+)
			       AND D.DELIVER_NUM = A.DELIVER_NUM(+)
			       AND D.DELIVER_NUM = L.DELIVER_NUM(+)
			       AND D.DELIVER_STATUS <> '10' --가입고 제외
			     GROUP BY D.PO_ORDER_NUM
			    HAVING SUM(ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT, 0))) - NVL(A.BUY_CST, 0) - NVL(L.CONTROL_AMT, 0)) > 0
			   )             
     </#if>
<#else>
        --AND T.INVENTORY_QUANTITY >0
        --AND ROUND(NVL(T.DELIVER_AMT,0) - NVL(SALE_CST,0)) - NVL(T.CONTROL_AMT,0) > 0
			  AND (T.PO_ORDER_NUM) IN (
			    SELECT D.PO_ORDER_NUM
			      FROM INVENTORY_MGMT_DELIVER D,
			           (SELECT T.DELIVER_NUM ,
			                   SUM(T2.BUY_CST) AS BUY_CST
			              FROM SALE_ORDER_ITEM_MGMT T,
			                   RELEASE_ITEM_MGMT T2
			             WHERE T.SALE_ORDER_NUM = T2.SALE_ORDER_NUM
			               AND T.SALE_ORDER_NUM_SEQ =T2.SALE_ORDER_NUM_SEQ
			               AND T2.RELEASE_DATE <= '20160418' --재고미포함
			             GROUP BY T.DELIVER_NUM ) A,
			           (SELECT T.DELIVER_NUM,
			                   SUM(T.DIV_AMT) AS DIV_AMT
			              FROM DELIVERITEM_OTHER_AMT_DIV T
			             GROUP BY T.DELIVER_NUM ) X,
			           (SELECT T.DELIVER_NUM,
			                   SUM(T.CONTROL_AMT) AS CONTROL_AMT
			              FROM INVENTORY_CONTROL_LOG T
			             GROUP BY T.DELIVER_NUM ) L
			     WHERE D.DELIVER_NUM = X.DELIVER_NUM(+)
			       AND D.DELIVER_NUM = A.DELIVER_NUM(+)
			       AND D.DELIVER_NUM = L.DELIVER_NUM(+)
			       AND D.DELIVER_STATUS <> '10' --가입고 제외
			     GROUP BY D.PO_ORDER_NUM
			    HAVING SUM(ROUND((D.DELIVER_AMT +NVL(X.DIV_AMT, 0))) - NVL(A.BUY_CST, 0) - NVL(L.CONTROL_AMT, 0)) > 0
			   )            
</#if>

        ]]>
	</statement>

</hqml>
