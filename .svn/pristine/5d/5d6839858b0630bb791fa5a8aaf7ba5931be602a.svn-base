<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.4">
  <TypeDefinition url="../../../default_typedef.xml"/>
  <Form id="SCC95000P" onload="form_onload" titletext="출력화면" position="absolute 0 0 800 600" scrollbars="none">
    <Layouts>
      <Layout>
        <Button id="btn_Close" onclick="btn_Close_OnClick" taborder="1" text="닫기" position="absolute 739 6 791 28" class="btn_POP_Default" image="" style="align:left;"/>
        <ImageViewer id="Image0" image="URL('theme://convertImages/n_icon.png')" taborder="3" position="absolute 9 10 15 24"/>
        <Static id="Static0" text="미리보기 팝업" position="absolute 19 12 114 23" class="sta_WF_Title01"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_Report"/>
    </Objects>
    <Script type="xscript4.0"><![CDATA[include "U_lib::lib_conversionCom.xjs";
//Report Orientation 구성 상수
var vsrAutoOrient = 0;
var vsrLandscape = 2;
var vsrPortrait = 1;

//section 구성 상수
var vsrDetail = 0;
var vsrHeader = 1;
var vsrFooter = 2;
var vsrPageHeader  = 3;
var vsrPageFooter  = 4;
var vsrGroupHeader1  = 5;
var vsrGroupHeader2  = 7;
var vsrGroupHeader3  = 9;
var vsrGroupHeader4  = 11;
var vsrGroupFooter1  = 6;
var vsrGroupFooter1  = 8;
var vsrGroupFooter1  = 10;
var vsrGroupFooter1  = 12;

//LineSlant 구성 상수
var vsrLSNoLine = 0;
var vsrLSNoSlant = 1;
var vsrLSDown = 2;
var vsrLSUp = 3;

//Field Align 구성 상수
var vsrGeneral = -1;
var vsrLeftTop = 0;
var vsrCenterTop = 1;
var vsrRightTop = 2;
var vsrLeftBottom = 3;
var vsrCenterBottom = 4;
var vsrRightBottom = 5;
var vsrLeftMiddle = 6;
var vsrCenterMiddle = 7;
var vsrRightMiddle = 8;
var vsrJustTop = 9;
var vsrJustBottom = 10;
var vsrJustMiddle = 11;

//BorderStyle 구성 상수
var vsrBSTransparent = 0;
var vsrBSSolid = 1;
var vsrBSDash = 2;
var vsrBSDot = 3;
var vsrBSDashDot = 4;
var vsrBSDashDotDot = 5;

//paper size 상수
var vsrPSA4 = 9;
var vsrPSA3 = 8;

//sorting 구성 상수
var vsrAscending = 1;
var vsrDescending = 2;
var vsrNoSort = 0;

//Boolean 상수
var sTrue = -1;
var sFalse = 0;

//넘겨받는 변수
var sArgGrid;
var sArgDS;
var sArgTitle;
var sArgSubTitle;
var sArgInfo;

//리포트 관련 상수 정의
var PAGE_A4_LANDSCAPE = 13958.4;
var PAGE_A4_PORTRAIT  = 1440 * 8.5; //1인치: 1440
var FONT_PER_LENGTH   = 1440 * (1 / 72); 

var PIXEL_LENGTH = 14.4;
var REPORT_HEIGHT;
var REPORT_WIDTH;
var HEADER_HEIGHT  = 1550;
var PFOOTER_HEIGHT = 300;
var FOOTER_HEIGHT  = 300;
var MARGIN_LENGTH  = 1440 * 0.5;

//전역변수
var aPos   = new Array(4); //[left, Top, width, height]
var aColLeft; 
var aColWidth;
var sColPrefix = "col";
var nHeadHeight;
var nRowHeight;

//호출파라메터
var fa_grid_ID;
var fa_grid_Title;
var fa_grid_SubTitle;
var fa_grid_Name;

function btn_Close_OnClick(obj:Button, e:ClickEventInfo)
{
	this.close();
}

function form_onload(obj:Form, e:LoadEventInfo)
{
	gfn_formOnLoad(obj, false);

	prMakeGridToRpt(VsReport, fa_grid_ID, fa_grid_Title, fa_grid_SubTitle, fa_grid_Name, vsrLandscape);	
}

function prMakeGridToRpt(VRptObj, GridID, Title, subTitle, Info, Orientation) 
{
	var GridObj = eval(GridID);

	//alert(GridObj.BindDataset);
	VRptObj.clear();

	//리포트의 기본 속성 설정
	prRptSet(VRptObj, GridObj, Orientation);

	//그리드의 contents정보를 검사
	prSetGrdInfo(GridObj);

	//Header 섹션 생성
	prMakeRptHeader(VRptObj, GridObj, Title, subTitle, Info);

	//Page Header 섹션 생성
	prMakeRptPHeader(VRptObj, GridObj);

	//detail 섹션 생성
	prMakeRptDetail(VRptObj, GridObj);

	//Group 섹션 생성
	//prMakeRptGroup(VRptObj, GridObj);

	//Page footer 섹션 생성
	prMakeRptPFooter(VRptObj, GridObj);

	//footer 섹션 생성
	prMakeRptFooter(VRptObj, GridObj, Info);

	//리포트 표시
	VRptObj.Render(VsView);

	//VsView0.SaveDoc("c:\\temp\\tempReport.xml", False);
}

//리포트의 기본 속성 설정
function prRptSet(VRptObj, GridObj, Orientation) 
{
   //폰트
   VRptObj.style.font.face = "Tahoma";
   VRptObj.style.font.size = 9;
   
   //출력 방향 및 폭
   //vsrPortrait
   
   switch (Orientation)
   {
	   case vsrAutoOrient:
		   VRptObj.Layout.Orientation = Orientation; 
		   break;
	   case vsrPortrait:
		   VRptObj.Layout.Orientation = Orientation;
	       VRptObj.Layout.position.width = PAGE_A4_PORTRAIT;
	       VRptObj.layout.PaperSize = vsrPSA4;
		   break;
	   case vsrLandscape:
		   VRptObj.Layout.Orientation = Orientation; 
	       VRptObj.Layout.position.width = PAGE_A4_LANDSCAPE; 
	       VRptObj.layout.PaperSize = vsrPSA4;
		   break;
	   default:
		   VRptObj.Layout.Orientation = vsrPortrait; 
		   VRptObj.Layout.position.width = PAGE_A4_PORTRAIT; 
		   VRptObj.layout.PaperSize = vsrPSA4;
		   break;
   }
   
   REPORT_WIDTH = VRptObj.Layout.position.width - 2 * MARGIN_LENGTH;
   VRptObj.layout.MarginLeft = MARGIN_LENGTH;
   VRptObj.layout.MarginRight = MARGIN_LENGTH;
   VRptObj.layout.MarginTop = MARGIN_LENGTH;
   VRptObj.layout.MarginBottom = MARGIN_LENGTH;
   
}

function prSetGrdInfo(GridObj)
{
	var nColCnt = GridObj.getColCount();
	var oGridDS = eval(GridObj.Binddataset);

	prMakeContent(GridObj);

	/* RowHeight은 지원되지 않는 속성입니다.*/ nRowHeight  = GridObj.RowHeight;
	/* HeadHeight은 지원되지 않는 속성입니다.*/ nHeadHeight = GridObj.HeadHeight;

	aColLeft  = new Array(nColCnt);
	aColWidth = new Array(nColCnt);

	aColLeft[0] = 0;
	for ( i = 0 ; i < nColCnt; i++ )
	{
		aColWidth[i] = GridObj.getFormatColProperty(i,"size");
		aColLeft[i+1] = aColLeft[i] + aColWidth[i];
	}
}

//Header 섹션 설정
function prMakeRptHeader(VRptObj, GridObj, Title, subTitle, Info)
{
	var oField;

	//header section 정보
	VRptObj.Sections[vsrHeader].position.height = HEADER_HEIGHT; 
	VRptObj.Sections[vsrHeader].visible = sTrue;
	// VRptObj.Sections[vsrHeader].BackColor = "#ffffff";

	//header section 필드추가
	//Add(Name, Text, Left, Top, Width, Height);
	var sName = "FldFtrLeft";
	var sText = '"인쇄자 : ' + Info + ' ' + '( " & Now() & ")"';
	aPos[0] = 0;
	aPos[1] = 0;
	aPos[2] = REPORT_WIDTH;
	aPos[3] = 9 * FONT_PER_LENGTH;

	//var f = fnAddHeader(VRptObj, vsrHeader, True, vsrLeftTop, vsrBSTransparent, sName, sText, aPos);
	oField = VRptObj.Sections[vsrHeader].Fields.Add(sName, sText, aPos[0], aPos[1], aPos[2], aPos[3]);
	oField.Calculated = sTrue;
	oField.BorderStyle = vsrBSTransparent;
	oField.style.align.halign = vsrLeftTop;

	sName = "Title";
	aPos[0] = 0;
	aPos[1] = 500;
	aPos[2] = REPORT_WIDTH;
	aPos[3] = 24 * FONT_PER_LENGTH;

	//var f = fnAddHeader(VRptObj, vsrHeader, False, vsrCenterMiddle, vsrBSTransparent, sName, Title, aPos);
	oField = VRptObj.Sections[vsrHeader].Fields.Add(sName, Title, aPos[0], aPos[1], aPos[2], aPos[3]);
	oField.Calculated = sFalse;
	oField.BorderStyle = vsrBSTransparent;
	oField.style.align.halign = vsrCenterMiddle;

	oField.style.font.size = 24;
	oField.FontBold = sTrue;
	oField.ForeColor = "black";
	

	sName = "subTitle";
	aPos[0] = 0;
	aPos[1] = 1050;
	aPos[2] = REPORT_WIDTH;
	aPos[3] = 16 * FONT_PER_LENGTH;

	//f = fnAddHeader(VRptObj, vsrHeader, False, vsrLeftMiddle, vsrBSTransparent, sName, subTitle, aPos);
	oField = VRptObj.Sections[vsrHeader].Fields.Add(sName, subTitle, aPos[0], aPos[1], aPos[2], aPos[3]);
	oField.Calculated = sFalse;
	oField.BorderStyle = vsrBSTransparent;
	oField.style.align.halign = vsrLeftMiddle;

	oField.style.font.size = 16;
	oField.FontBold = sTrue;
	oField.ForeColor = "black";
}

//Page Header 섹션 설정
function prMakeRptPHeader(VRptObj, GridObj) 
{
   //page header 섹션
   VRptObj.Sections[vsrPageHeader].visible = sTrue;
   VRptObj.FontBold = sTrue;
   
   var sName,sText;
   var iRow, iCol, iRowSpan, iColSpan, RowSpanCnt=1;
   //var nCellCnt = grd_report.GetCellCount('head');
   var nCellCnt = GridObj.getCellCount('head');
   var oField;
   //Add(Name, Text, Left, Top, Width, Height);
   
   for(var i=0; i < nCellCnt; i++) {
       	sName     = "HLabel" + i;
		sText     = GridObj.getCellProperty("head",i,"text");
		iRow      = GridObj.getCellProperty("head",i,"row");
		iRowSpan  = parseInt(GridObj.getCellProperty("head",i,"rowspan"));
		iCol      = parseInt(GridObj.getCellProperty("head",i,"col"));
		iColSpan  = parseInt(GridObj.getCellProperty("head",i,"colspan"));
        
        //Left 설정
        aPos[0] = aColLeft[iCol] * PIXEL_LENGTH;
        
        //Top 설정
        if(iRowSpan == 0) iRowSpan = 1;
        aPos[1] = iRow * iRowSpan * nHeadHeight * PIXEL_LENGTH;
        
        //width 설정
        if(iColSpan == 0) iColSpan = 1;
        aPos[2] = 0;
        for(var nCol = iCol;nCol < iCol+iColSpan;nCol++) {
			aPos[2] += aColWidth[nCol] * PIXEL_LENGTH;
        }
        
        //Height 설정
        aPos[3] = 0;
        for(var nRow = iRow;nRow < iRow+iRowSpan;nRow++) {
			aPos[3] += nHeadHeight * PIXEL_LENGTH;
        }
        
        if(RowSpanCnt < iRowSpan) RowSpanCnt = iRowSpan;
        oField = VRptObj.Sections[vsrPageHeader].Fields.Add(sName, sText, aPos[0], aPos[1], aPos[2], aPos[3]);
		oField.Calculated = sFalse;
		oField.BorderStyle = vsrBSSolid;
		oField.style.align.halign = vsrCenterMiddle;
   }
   VRptObj.Sections[vsrPageHeader].position.height  = RowSpanCnt * PIXEL_LENGTH;
}

//Detail 섹션 설정
function prMakeRptDetail(VRptObj, GridObj) 
{
   //var GridDS = Object(GridObj.BindDataset);
   //page header 섹션
   VRptObj.Sections[vsrDetail].visible = sTrue;
   VRptObj.FontBold = sFalse;
   
   var sName,sText, sExpr, sAlign, oField;
   var iRow, iCol, iRowSpan, iColSpan, RowSpanCnt=1;
   var nCellCnt = GridObj.getCellCount('body');
   
   //Add(Name, Text, Left, Top, Width, Height);
   for(var i=0; i < nCellCnt; i++) {
       	sName     = "Field" + i;
		//sText     = GridObj.GetCellProp("body",i,"colid");
		//sText     = sColPrefix + i;
		sText     = sColPrefix + gfn_lPad(gfn_toString(i),"0",2);
		iRow      = GridObj.getCellProperty("body",i,"row");
		iRowSpan  = parseInt(GridObj.getCellProperty("body",i,"rowspan"));
		iCol      = parseInt(GridObj.getCellProperty("body",i,"col"));
		iColSpan  = parseInt(GridObj.getCellProperty("body",i,"colspan"));
        //sExpr     = GridObj.GetCellProp("body",i,"Expr");
        sAlign    = GridObj.getCellProperty("body",i,"align");
        
        //Left 설정
        //aPos[0] = iCol * colWidth[iCol-1] * PIXEL_LENGTH;
        aPos[0] = aColLeft[iCol] * PIXEL_LENGTH;
        //Top 설정
        if(iRowSpan == 0) iRowSpan = 1;
        aPos[1] = iRow * iRowSpan * nRowHeight * PIXEL_LENGTH;
        
        //width 설정
        if(iColSpan == 0) iColSpan = 1;
        aPos[2] = 0;
        for(var nCol = iCol;nCol < iCol+iColSpan;nCol++) {
			aPos[2] += aColWidth[nCol] * PIXEL_LENGTH;
        }
        
        //Height 설정
        aPos[3] = 0;
        for(var nRow = iRow;nRow < iRow+iRowSpan;nRow++) {
			aPos[3] += nRowHeight * PIXEL_LENGTH;
        }
                
        switch(ToLower(sAlign)) {
			case "left":
				sAlign = vsrLeftMiddle;
				break;
			case "right":
			    sAlign = vsrRightMiddle;
			    break;
			case "center":
			    sAlign = vsrCenterMiddle;
				break;
			default:
			    sAlign = vsrGeneral;
			    break;
        }
        
        if(RowSpanCnt < iRowSpan) RowSpanCnt = iRowSpan;
        oField = VRptObj.Sections[vsrDetail].Fields.Add(sName, sText, aPos[0], aPos[1], aPos[2], aPos[3]);
	    oField.Calculated = sTrue;
	    oField.BorderStyle = vsrBSSolid;
	    oField.style.align.halign = sAlign;
   }
   VRptObj.Sections[vsrDetail].position.height  = RowSpanCnt * PIXEL_LENGTH;
}


function prMakeRptGroup(VRptObj, GridObj)
{
   var Group;
   var GridDs = eval(GridObj.Binddataset);
   if(gfn_length(GridDs.keystring)== 0) return;
   
   var aGroupKeys = gfn_split(GridDs.keystring, ",");
   if(gfn_length(aGroupKeys)== 1) aGroupKeys[0] = GridDs.keystring;
   
   var sName,sText, sExpr, sAlign, oField;
   var iRow, iCol, iRowSpan, iColSpan, RowSpanCnt=1;
   var nCellCnt = GridObj.getCellCount('body');
   
   for(var nGrpCnt = 0;nGrpCnt < gfn_length(aGroupKeys); nGrpCnt++) {
	   gfn_alert(aGroupKeys[nGrpCnt]);
	   Group = VRptObj.Groups.Add("Group" + nGrpCnt, aGroupKeys[nGrpCnt], vsrNoSort);
	   Group.SectionFooter.visible = sTrue;
	   
	   for(var i=0; i < nCellCnt; i++) {
	   
			sName     = "Field" + i;
			sText     = GridObj.getCellProperty("body",i,"subsumtext");
			iRow      = GridObj.getCellProperty("body",i,"row");
			iRowSpan  = parseInt(GridObj.getCellProperty("body",i,"rowspan"));
			iCol      = parseInt(GridObj.getCellProperty("body",i,"col"));
			iColSpan  = parseInt(GridObj.getCellProperty("body",i,"colspan"));
			sExpr     = GridObj.getCellProperty("body",i,"subsumexpr");
			sAlign    = GridObj.getCellProperty("body",i,"align");
			//Left 설정
			//aPos[0] = iCol * colWidth[iCol-1] * PIXEL_LENGTH;
			aPos[0] = aColLeft[iCol] * PIXEL_LENGTH;
			//Top 설정
			if(iRowSpan == 0) iRowSpan = 1;
			aPos[1] = iRow * iRowSpan * nRowHeight * PIXEL_LENGTH;
			
			//width 설정
			if(iColSpan == 0) iColSpan = 1;
			aPos[2] = 0;
			for(var nCol = iCol;nCol < iCol+iColSpan;nCol++) {
				aPos[2] += aColWidth[nCol] * PIXEL_LENGTH;
			}
			
			//Height 설정
			aPos[3] = 0;
			for(var nRow = iRow;nRow < iRow+iRowSpan;nRow++) {
				aPos[3] += nRowHeight * PIXEL_LENGTH;
			}
					
			if(gfn_length(sExpr)> 0) sText = fnGetGrpExpr(sExpr, gfn_length(aGroupKeys)- nGrpCnt - 1);
			
			switch(ToLower(sAlign)) {
				case "left":
					sAlign = vsrLeftMiddle;
					break;
				case "right":
					sAlign = vsrRightMiddle;
					break;
				case "center":
					sAlign = vsrCenterMiddle;
					break;
				default:
					sAlign = vsrGeneral;
					break;
			}
			
			if(RowSpanCnt < iRowSpan) RowSpanCnt = iRowSpan;
			oField = Group.SectionFooter.Fields.Add(sName, sText, aPos[0], aPos[1], aPos[2], aPos[3]);
			oField.Calculated = sTrue;
			oField.BorderStyle = vsrBSSolid;
			oField.style.align.halign = sAlign;
	   }
	   Group.SectionFooter.position.height = RowSpanCnt * PIXEL_LENGTH;
   }
}

//Page footer 섹션 설정
function prMakeRptPFooter(VRptObj, GridObj) 
{
	var aPos = new Array(4);
	var oField;
	VsReport.Sections[vsrPageFooter].position.height  = PFOOTER_HEIGHT;
	VsReport.Sections[vsrPageFooter].visible = sTrue;

	var sName = "FldLine";
	aPos[0] = 0;
	aPos[1] = 0;
	aPos[2] = REPORT_WIDTH;
	aPos[3] = 20;
	var BorderColor = "#000000";

	//fnAddLine(VRptObj, vsrPageFooter, vsrLSNoSlant, vsrBSSolid, BorderColor, sName, aPos);
    oField = VRptObj.Sections[vsrPageFooter].Fields.Add(sName, "", aPos[0], aPos[1], aPos[2], aPos[3]);
	oField.LineSlant = vsrLSNoSlant;
	oField.BorderStyle = vsrBSSolid;

	sName = "FldFtrRight";
	var sText = '"Page " & Page & " of " & Pages';
	aPos[0] = 0;
	aPos[1] = 0;
	aPos[2] = REPORT_WIDTH;
	aPos[3] = 9 * FONT_PER_LENGTH;

	//fnAddHeader(VRptObj, vsrPageFooter, True, vsrCenterTop, vsrBSTransparent, sName, sText, aPos);
	oField = VRptObj.Sections[vsrPageFooter].Fields.Add(sName, sText, aPos[0], aPos[1], aPos[2], aPos[3]);
	oField.Calculated = sTrue;
	oField.BorderStyle = vsrBSTransparent;
	oField.style.align.halign = vsrCenterTop;
}

//footer 섹션 설정
function prMakeRptFooter(VRptObj, GridObj) 
{
   
}

/* =============================================================
=  expression 관련 Report용 함수 및 표현식으로 변환하는 함수들
=
===============================================================*/
function fngetVBScript(sExpr) {
    return fnRegTest(sExpr);
}

function fnRegTest(sExpr) {
   var oRegExp = createRegExp(SET_PATTERN, OPTION);
   var strRet = sExpr;
   /* 
   result.index 
   result.length 
   result.lastIndex 
   result
   */
	var aToken = fnMakeToken(strRet);
	var nlength = aToken.length;
	for(var i = 0; i < aToken.length; i++){
		switch(gfn_lTrim(ToUpper(aToken[i]))) {
			case "DECODE":
			    if(aToken[i+1] == "(") {
					aToken = fnDecodeParse(aToken, i);
					i = -1;
			    }
				break;
			default:
			    //strRet += aToken[i];
				break;
		}
	}
	strRet = "";
	for(var i = 0; i < aToken.length; i++) strRet += aToken[i];
	
	//집합함수 패턴 처리
	if(oRegExp.Test(strRet))
	{
		strRet = fnSetParse(strRet);
	}
	
	//== 패턴 처리함수
	oRegExp.Compile(EQUAL_PATTERN, OPTION);
	strRet = gfn_replace(oRegExp,strRet, "="); 
	return strRet;
}

function fnSetParse(strRet) {
	
	var oRegExp = createRegExp(SET_PATTERN, OPTION);
	var oResult = oRegExp.Exec(strRet);
	var aValue;
	
	while(oResult != null) {
		if(confirm(oResult) == false) close();
		aValue = gfn_split(oResult, ".");
		strRet = gfn_subStr(strRet, 0, oResult.index)+ aValue[1] + "(" + aValue[0] + ")"
			   + gfn_subStr(strRet, oResult.lastIndex);
	    oResult = oRegExp.Exec(strRet);
	}
	return strRet;
}

function fnDecodeParse(aToken, nIdx) {
	
	var nBox = 0;
	var nNext;
	var strToken = "";
	var strRet = "";
	
	for(var i = 0; i < nIdx; i++) strRet += aToken[i];
	
	for(var i = nIdx; i < aToken.length; i++){
		switch(aToken[i]) {
			case ")":
				strToken += aToken[i];
				if(nBox == 1) {
					strToken = fnDecodeToVBScript(strToken);
					nNext = i + 1;
					i = aToken.length;
				}
				--nBox;
				break;
			case "(":
			    strToken += aToken[i];
			    ++nBox;
			    break;
		    default: 
				strToken += aToken[i];
				break;
		}
	}
	strRet += strToken;
	
	for(var i = nNext; i < aToken.length; i++) strRet += aToken[i];
	return fnMakeToken(strRet);
}

function fnDecodeToVBScript(sExpr) {
	var strRet = sExpr;
	var strToken;
	var nBox = 0;
	var strText = gfn_subStr(strRet, 7, strRet.length-7-1);
	var aToken  = new Array();
	var nIndex  = 0;
	for(var i = 0; i < strText.length; i++){
		switch(charAt(strText, i)) {
			case ",":
			    if(nBox == 0) {
					aToken[nIndex++] = strToken;
					strToken = "";
			    }
			    else {
					strToken += charAt(strText, i);
			    }
			    break;
			case ")":
				--nBox;
				strToken += charAt(strText, i);
				break;
			case "(":
			    ++nBox;
			    strToken += charAt(strText, i);
			    break;
		    default: 
				strToken += charAt(strText, i);
				break;
		}
	}
	aToken[nIndex] = strToken;
    return fnMakeIIF(aToken);
}

function fnMakeIIF(aToken)
{
	var strWord = aToken[0];
	var nArrCnt = gfn_length(aToken);
	var strRet; 
	var nbox = 0;
	
	strRet = aToken[nArrCnt-1] + ")";
	if((nArrCnt % 2) == 1) strRet = aToken[nArrCnt-1] + "," + strRet;
	--nbox;
	for(var i = nArrCnt-2; i > 0; i--) {
		switch(i % 2) {
			case 0:
				strRet = aToken[i] + "," + strRet;
				break;
			case 1:
				strRet = "iif(" + strWord + "=" + aToken[i] + "," + strRet;
				++nbox;
				break;
		}
	}
	for(i=nbox; i > 0; i--) strRet += ")";
	return strRet;
}

function fnMakeToken(strText) {
    var aToken  = new Array();
    var strToken = "";
    var nIndex = 0;
	for(var i = 0; i < gfn_length(strText); i++){
		switch(charAt(strText, i)) {
			case ",":
			    if(gfn_length(strToken)> 0) aToken[nIndex++] = strToken;
				aToken[nIndex++] = ",";
				strToken = "";
			    break;
			case ")":
				if(gfn_length(strToken)> 0) aToken[nIndex++] = strToken;
				aToken[nIndex++] = ")";
				strToken = "";
				break;
			case "(":
			    if(gfn_length(strToken)> 0) aToken[nIndex++] = strToken;
				aToken[nIndex++] = "(";
				strToken = "";
			    break;
			case " ":
				if(gfn_length(strToken)> 0) strToken += charAt(strText, i);
				break;
			default:
			    strToken += charAt(strText, i);
				break;
		}
	}
	if(gfn_length(strToken)> 0) aToken[nIndex] = strToken;
	return aToken;
}


function prMakeContent(GridObj) {
   var nColCnt = GridObj.getColCount();
   var DSObj   = eval(GridObj.Binddataset);
   
   for(var i = 0; i < nColCnt; i++) {
		ds_Report.addColumn(sColPrefix + gfn_lPad(gfn_toString(i),"0",2), "STRING");
   }
   
   for(var i = 0; i < DSObj.rowcount; i++) {
	   ds_Report.insertRow(i);
	   for(var j = 0; j < nColCnt; j++) {
		    ds_Report.setColumn(i, j, GetCellText(GridObj,"body", i, j));
	   }
   }
   trace(SaveXML(ds_Report,null));
}

]]></Script>
  </Form>
</FDL>
