<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="guide.sample.guideEncDAO">
	<desc>개인정보보호 항목에 대한 암복호 처리 및 마스킹 처리 샘플 Query</desc>

	<!-- 개인정보보호 항목을 개인정보처리등급에 따른 마스킹 값(:loginPersMask)에 따라 마스킹 처리하여 조회한다. -->
	<statement name="selectMask" type="select">
		<![CDATA[
		SELECT ID,
			   '*******' AS PWD_ENC,
			   SCC_CRYPTO.MASK_FUN (SSN_ENC,1,:loginPersMask) AS SSN_ENC,
       		   SCC_CRYPTO.MASK_FUN (DLN_ENC,2,:loginPersMask) AS DLN_ENC,
       		   SCC_CRYPTO.MASK_FUN (PPN_ENC,3,:loginPersMask) AS PPN_ENC,
       		   SCC_CRYPTO.MASK_FUN (FRN_ENC,4,:loginPersMask) AS FRN_ENC,
       		   SCC_CRYPTO.MASK_FUN (CDN_ENC,5,:loginPersMask) AS CDN_ENC,
       		   SCC_CRYPTO.MASK_FUN (ACN_ENC,6,:loginPersMask) AS ACN_ENC,
       		   SCC_CRYPTO.MASK_FUN (EMAIL_ENC,7,:loginPersMask) AS EMAIL_ENC,
       		   SCC_CRYPTO.MASK_FUN (HP_ENC,8,:loginPersMask) AS HP_ENC,
       		   SCC_CRYPTO.MASK_FUN (TEL_ENC,9,:loginPersMask) AS TEL_ENC,
       		   SCC_CRYPTO.MASK_FUN (DTL_ADDR_ENC,10,:loginPersMask) AS DTL_ADDR_ENC,
       		   SCC_CRYPTO.MASK_FUN (ROAD_ADDR_ENC,11,:loginPersMask) AS ROAD_ADDR_ENC,
       		   SCC_CRYPTO.MASK_FUN (NAME,12,:loginPersMask) AS NAME,
       		   SCC_CRYPTO.MASK_FUN (BIRTH,13,:loginPersMask) AS BIRTH,
       		   SCC_CRYPTO.MASK_FUN (IPV4,14,:loginPersMask) AS IPV4,
       		   SCC_CRYPTO.MASK_FUN (IPV6,14,:loginPersMask) AS IPV6
		FROM   GUIDE_ENC_SAMPLE
		WHERE  1=1
		<#if id?has_content>
		AND    ID = :id
		</#if>
		<#if name?has_content>
		AND    NAME LIKE '%' || :name || '%'
		</#if>
		]]>
	</statement>

	<!-- 비밀번호를 제외한 개인정보보호 항목의 입력을 위한 경우에는 개인정보처리등급에 따른 마스킹 값(:loginPersMask)과 권한에 따라 마스킹하여 조회한다. -->
	<statement name="selectMaskAuth" type="select">
		<![CDATA[
		SELECT A.ID,
		       A.PWD_ENC,
		       A.SSN_ENC,
		       A.DLN_ENC,
		       A.PPN_ENC,
		       A.FRN_ENC,
		       A.CDN_ENC,
		       A.ACN_ENC,
		       A.EMAIL_ENC,
               A.HP_ENC,
               SCC_TELNO_SPLIT_FUN(HP_ENC, 1) AS HP1,
               SCC_TELNO_SPLIT_FUN(HP_ENC, 2) AS HP2,
               SCC_TELNO_SPLIT_FUN(HP_ENC, 3) AS HP3,
               A.TEL_ENC,
               SCC_TELNO_SPLIT_FUN(TEL_ENC, 1) AS TEL1,
               SCC_TELNO_SPLIT_FUN(TEL_ENC, 2) AS TEL2,
               SCC_TELNO_SPLIT_FUN(TEL_ENC, 3) AS TEL3,
		       A.DTL_ADDR_ENC,
		       A.ROAD_ADDR_ENC,
		       A.NAME,
		       A.BIRTH,
		       A.IPV4,
		       A.IPV6
		FROM   (SELECT ID,
			           '*******' AS PWD_ENC,
       		           SCC_CRYPTO.MASKAUTH_FUN (SSN_ENC,1,:loginPersMask,:maskAuth) AS SSN_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (DLN_ENC,2,:loginPersMask,:maskAuth) AS DLN_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (PPN_ENC,3,:loginPersMask,:maskAuth) AS PPN_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (FRN_ENC,4,:loginPersMask,:maskAuth) AS FRN_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (CDN_ENC,5,:loginPersMask,:maskAuth) AS CDN_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (ACN_ENC,6,:loginPersMask,:maskAuth) AS ACN_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (EMAIL_ENC,7,:loginPersMask,:maskAuth) AS EMAIL_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (HP_ENC,8,:loginPersMask,:maskAuth) AS HP_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (TEL_ENC,9,:loginPersMask,:maskAuth) AS TEL_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (DTL_ADDR_ENC,10,:loginPersMask,:maskAuth) AS DTL_ADDR_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (ROAD_ADDR_ENC,11,:loginPersMask,:maskAuth) AS ROAD_ADDR_ENC,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (NAME,12,:loginPersMask,:maskAuth) AS NAME,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (BIRTH,13,:loginPersMask,:maskAuth) AS BIRTH,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (IPV4,14,:loginPersMask,:maskAuth) AS IPV4,
       		   		   SCC_CRYPTO.MASKAUTH_FUN (IPV6,14,:loginPersMask,:maskAuth) AS IPV6       		           
		        FROM   GUIDE_ENC_SAMPLE
		        WHERE  1=1
		        <#if id?has_content>
		        AND    ID = :id
		        </#if>
		        <#if name?has_content>
		        AND    NAME LIKE '%' || :name || '%'
		        </#if>
		        ) A
		]]>
	</statement>

	<!-- 비밀번호를 제외한 개인정보보호 항목의 입력을 위한 경우에는 복호화하여 조회한다. -->
	<statement name="select" type="select">
		<![CDATA[
		SELECT A.ID,
		       A.PWD_ENC,
		       A.SSN_ENC,
		       A.DLN_ENC,
		       A.PPN_ENC,
		       A.FRN_ENC,
		       A.CDN_ENC,
		       A.ACN_ENC,
		       A.EMAIL_ENC,
               A.HP_ENC,
               SCC_TELNO_SPLIT_FUN(HP_ENC, 1) AS HP1,
               SCC_TELNO_SPLIT_FUN(HP_ENC, 2) AS HP2,
               SCC_TELNO_SPLIT_FUN(HP_ENC, 3) AS HP3,
               A.TEL_ENC,
               SCC_TELNO_SPLIT_FUN(TEL_ENC, 1) AS TEL1,
               SCC_TELNO_SPLIT_FUN(TEL_ENC, 2) AS TEL2,
               SCC_TELNO_SPLIT_FUN(TEL_ENC, 3) AS TEL3,
		       A.DTL_ADDR_ENC,
		       A.ROAD_ADDR_ENC,
		       A.NAME,
		       A.BIRTH,
		       A.IPV4,
		       A.IPV6
		FROM   (SELECT ID,
			           '*******' AS PWD_ENC,
			           SCC_CRYPTO.DEC_FUN (SSN_ENC) AS SSN_ENC,
       		           SCC_CRYPTO.DEC_FUN (DLN_ENC) AS DLN_ENC,
       		           SCC_CRYPTO.DEC_FUN (PPN_ENC) AS PPN_ENC,
       		           SCC_CRYPTO.DEC_FUN (FRN_ENC) AS FRN_ENC,
       		           SCC_CRYPTO.DEC_FUN (CDN_ENC) AS CDN_ENC,
       		           SCC_CRYPTO.DEC_FUN (ACN_ENC) AS ACN_ENC,
       		           SCC_CRYPTO.DEC_FUN (EMAIL_ENC) AS EMAIL_ENC,
       		           SCC_CRYPTO.DEC_FUN (HP_ENC) AS HP_ENC,
       		           SCC_CRYPTO.DEC_FUN (TEL_ENC) AS TEL_ENC,
       		           SCC_CRYPTO.DEC_FUN (DTL_ADDR_ENC) AS DTL_ADDR_ENC,
       		           SCC_CRYPTO.DEC_FUN (ROAD_ADDR_ENC) AS ROAD_ADDR_ENC,
       		           NAME,
               		   BIRTH,
       	        	   IPV4,
       		           IPV6
		        FROM   GUIDE_ENC_SAMPLE
		        WHERE  1=1
		        <#if id?has_content>
		        AND    ID = :id
		        </#if>
		        <#if name?has_content>
		        AND    NAME LIKE '%' || :name || '%'
		        </#if>
		        ) A
		]]>
	</statement>

	<!-- 개인정보보호 항목을 개인정보처리등급에 따른 마스킹 값(:loginPersMask)에 따라 마스킹 처리하여 조회한다. -->
	<statement name="selectMgmtMask" type="select">
		<![CDATA[
		SELECT A.ID,
		       A.PWD_ENC,
		       A.SSN_ENC,
		       A.DLN_ENC,
		       A.PPN_ENC,
		       A.FRN_ENC,
		       A.CDN_ENC,
		       A.EMAIL_ENC,
               A.HP_ENC,
               SCC_TELNO_SPLIT_FUN(HP_ENC, 1) AS HP1,
               SCC_TELNO_SPLIT_FUN(HP_ENC, 2) AS HP2,
               SCC_TELNO_SPLIT_FUN(HP_ENC, 3) AS HP3,
               A.TEL_ENC,
               SCC_TELNO_SPLIT_FUN(TEL_ENC, 1) AS TEL1,
               SCC_TELNO_SPLIT_FUN(TEL_ENC, 2) AS TEL2,
               SCC_TELNO_SPLIT_FUN(TEL_ENC, 3) AS TEL3,
		       A.DTL_ADDR_ENC,
		       A.ROAD_ADDR_ENC,
		       A.NAME,
		       A.BIRTH,
		       A.IPV4,
		       A.IPV6
        FROM   (SELECT ID,
			           '*******' AS PWD_ENC,
			           SCC_CRYPTO.MASK_FUN (SSN_ENC,1,:loginPersMask) AS SSN_ENC,
       		           SCC_CRYPTO.MASK_FUN (DLN_ENC,2,:loginPersMask) AS DLN_ENC,
       		           SCC_CRYPTO.MASK_FUN (PPN_ENC,3,:loginPersMask) AS PPN_ENC,
       		           SCC_CRYPTO.MASK_FUN (FRN_ENC,4,:loginPersMask) AS FRN_ENC,
       		           SCC_CRYPTO.MASK_FUN (CDN_ENC,5,:loginPersMask) AS CDN_ENC,
       		           SCC_CRYPTO.MASK_FUN (ACN_ENC,6,:loginPersMask) AS ACN_ENC,
       		           SCC_CRYPTO.MASK_FUN (EMAIL_ENC,7,:loginPersMask) AS EMAIL_ENC,
       		           SCC_CRYPTO.MASK_FUN (HP_ENC,8,:loginPersMask) AS HP_ENC,
       		           SCC_CRYPTO.MASK_FUN (TEL_ENC,9,:loginPersMask) AS TEL_ENC,
       		           SCC_CRYPTO.MASK_FUN (DTL_ADDR_ENC,10,:loginPersMask) AS DTL_ADDR_ENC,
       		           SCC_CRYPTO.MASK_FUN (ROAD_ADDR_ENC,11,:loginPersMask) AS ROAD_ADDR_ENC,
       		           SCC_CRYPTO.MASK_FUN (NAME,12,:loginPersMask) AS NAME,
       		           SCC_CRYPTO.MASK_FUN (BIRTH,13,:loginPersMask) AS BIRTH,
       		           SCC_CRYPTO.MASK_FUN (IPV4,14,:loginPersMask) AS IPV4,
       		           SCC_CRYPTO.MASK_FUN (IPV6,14,:loginPersMask) AS IPV6
		        FROM   GUIDE_ENC_SAMPLE
		        WHERE  1=1
		        <#if id?has_content>
		        AND    ID = :id
		        </#if>
		        <#if name?has_content>
		        AND    NAME LIKE '%' || :name || '%'
		        </#if>
		        ) A
		]]>
	</statement>

	<!-- 쿼리에 대한 설명을 기술하세요. -->
	<statement name="insert" type="insert">
		<![CDATA[
		INSERT INTO GUIDE_ENC_SAMPLE 
		(
		       ID,
		       NAME,
		       PWD_ENC,
		       SSN_ENC,
		       DLN_ENC,
		       PPN_ENC,
		       FRN_ENC,
		       CDN_ENC,
		       ACN_ENC,
		       EMAIL_ENC,
		       HP_ENC,
		       TEL_ENC,
		       DTL_ADDR_ENC,
		       ROAD_ADDR_ENC,
		       BIRTH,
		       IPV4,
		       IPV6,
		       CUSER,
		       CDATE,
		       UUSER,
		       UDATE
		)
		VALUES
		(
		       :id,
		       :name,
		       <#if pwdEnc?has_content> SCC_CRYPTO.ONEWAY_ENC_FUN(:pwdEnc), <#else> null, </#if>
		       <#if ssnEnc?has_content> SCC_CRYPTO.ENC_FUN(:ssnEnc), <#else> null, </#if>
		       <#if dlnEnc?has_content> SCC_CRYPTO.ENC_FUN(:dlnEnc), <#else> null, </#if>
		       <#if ppnEnc?has_content> SCC_CRYPTO.ENC_FUN(:ppnEnc), <#else> null, </#if>
		       <#if frnEnc?has_content> SCC_CRYPTO.ENC_FUN(:frnEnc), <#else> null, </#if>
		       <#if cdnEnc?has_content> SCC_CRYPTO.ENC_FUN(:cdnEnc), <#else> null, </#if>
		       <#if acnEnc?has_content> SCC_CRYPTO.ENC_FUN(:acnEnc), <#else> null, </#if>
		       <#if emailEnc?has_content> SCC_CRYPTO.ENC_FUN(:emailEnc), <#else> null, </#if>
		       <#if hpEnc?has_content> SCC_CRYPTO.ENC_FUN(:hpEnc), <#else> null, </#if>
		       <#if telEnc?has_content> SCC_CRYPTO.ENC_FUN(:telEnc), <#else> null, </#if>
		       <#if dtlAddrEnc?has_content> SCC_CRYPTO.ENC_FUN(:dtlAddrEnc), <#else> null, </#if>
		       <#if roadAddrEnc?has_content> SCC_CRYPTO.ENC_FUN(:roadAddrEnc), <#else> null, </#if>
		       <#if birth?has_content> :birth, <#else> null, </#if>
		       <#if ipv4?has_content> :ipv4, <#else> null, </#if>
		       <#if ipv6?has_content> :ipv6, <#else> null, </#if>
		       :loginSabun,
		       SYSDATE,
		       :loginSabun,
		       SYSDATE
		)
		]]>
	</statement>
	
	<!-- 쿼리에 대한 설명을 기술하세요. -->
	<statement name="update" type="update">
		<![CDATA[
		UPDATE GUIDE_ENC_SAMPLE 
		SET    NAME = :name,
		       SSN_ENC = SCC_CRYPTO.ENC_FUN(:ssnEnc),
		       DLN_ENC = SCC_CRYPTO.ENC_FUN(:dlnEnc),
		       PPN_ENC = SCC_CRYPTO.ENC_FUN(:ppnEnc),
		       FRN_ENC = SCC_CRYPTO.ENC_FUN(:frnEnc),
		       CDN_ENC = SCC_CRYPTO.ENC_FUN(:cdnEnc),
		       ACN_ENC = SCC_CRYPTO.ENC_FUN(:acnEnc),
		       EMAIL_ENC = SCC_CRYPTO.ENC_FUN(:emailEnc),
		       HP_ENC  = SCC_CRYPTO.ENC_FUN(:hpEnc),
		       TEL_ENC = SCC_CRYPTO.ENC_FUN(:telEnc),
		       DTL_ADDR_ENC = SCC_CRYPTO.ENC_FUN(:dtlAddrEnc),
		       ROAD_ADDR_ENC = SCC_CRYPTO.ENC_FUN(:roadAddrEnc),
		       BIRTH = :birth,
		       IPV4 = :ipv4,
		       IPV6 = :ipv6,
		       UUSER = :loginSabun,
		       UDATE = SYSDATE
		WHERE  ID = :id
		]]>
	</statement>

	<!-- 쿼리에 대한 설명을 기술하세요. -->
	<statement name="delete" type="delete">
		<![CDATA[
		DELETE 
		FROM   GUIDE_ENC_SAMPLE 
		WHERE  ID = :id
		]]>
	</statement>

</hqml>
