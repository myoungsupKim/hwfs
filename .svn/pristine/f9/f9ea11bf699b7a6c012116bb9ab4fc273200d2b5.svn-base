<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="sm.sar.receiveMgntPopDAO">
	<desc>입금처리 HQML Query</desc>

	<!-- 입금처리 목록을 조회한다. -->
	<statement name="selectList" type="select"><![CDATA[
			SELECT 
					RECEIVE_NUM
				,	RECEIVE_DATE
				,	RECEIVE_OCCUR_CLASS
				,	RECEIVE_TYPE_CD
				,	SYS_CLASS
				,	MU_CD
				,	MU_NM
				,	CC_CD
				,	CC_NM
				,	CUST_CD
				,   (SELECT CUSTNM FROM ST_CUST WHERE  CUSTCD=CUST_CD) AS CUST_NM
				,	RECEIVE_AMT
				,	DEDUC_AMT
				,	AR_WITHDRAW_AMT
				,	ADVANCE_OCCUR
				,	ADVANCE_ALT
				,   ALT_NUM
				,	REF_NUM
				,	BATCH_ID
				,	REMARK
				,	INQUERY_START_DATE
				,	INQUERY_END_DATE
				,	INQUERY_MU_CD
				,	INQUERY_TM_CD
				,	(SELECT DISTINCT  TM_NM FROM   HLDC_SC_DEPT_V WHERE CC_CD = INQUERY_CC_CD) AS INQUERY_TM_NM
				,	INQUERY_CC_CD
				,	INQUERY_CC_NM
				,	INQUERY_CUST_CD
				,	INQUERY_CUST_NM
				,	INQUERY_AR_TYPE_CD
				,	INQUERY_AR_NUM
				,	RECD_STATUS
				,	ALL_EDIT_AMT
				,	TRANS_CUST_CD
				,   (SELECT CUSTNM FROM ST_CUST WHERE  CUSTCD=TRANS_CUST_CD) AS TRANS_CUST_NM
				,	TRANS_CC_CD
				,   (SELECT CC_NM FROM SCC_CC WHERE CC_CD = TRANS_CC_CD) AS TRANS_CC_NM
				,   SUSPENSE_AMT
				,   RECEIVE_DATE_FROM
				,   RECEIVE_DATE_TO
				,   SEQ
				,   SALS_CLASS
				,   ACCT_CD
				,   UPJANG_CD
				,   UPJANG_NM
			FROM (		
				SELECT A.RECEIVE_NUM,
				       A.RECEIVE_DATE,
				       A.RECEIVE_OCCUR_CLASS,
				       A.RECEIVE_TYPE_CD,
				       A.SYS_CLASS,
				       A.MU_CD,
				       (SELECT DISTINCT MU_NM FROM   HLDC_SC_DEPT_V WHERE MU_CD = A.MU_CD)  AS MU_NM,
				       A.CC_CD,
				       (SELECT  CC_NM FROM SCC_CC WHERE CC_CD = A.CC_CD) AS CC_NM,
				       A.CUST_CD,
				       A.RECEIVE_AMT,
				       A.DEDUC_AMT,
				       A.AR_WITHDRAW_AMT,
				       A.ADVANCE_OCCUR,
				       A.ADVANCE_ALT,
				       A.ADVANCE_ALT AS ALT_NUM,
				       A.REF_NUM,
				       A.BATCH_ID,
				       A.REMARK,
				       A.INQUERY_START_DATE,
				       A.INQUERY_END_DATE,
				       A.INQUERY_MU_CD,
				       A.INQUERY_TM_CD,
				       A.INQUERY_CC_CD,
				       (SELECT  CC_NM FROM SCC_CC WHERE CC_CD = A.INQUERY_CC_CD) AS INQUERY_CC_NM,
				       A.INQUERY_CUST_CD,
				       (SELECT CUSTNM FROM ST_CUST WHERE  CUSTCD=A.INQUERY_CUST_CD) AS INQUERY_CUST_NM,
				       A.INQUERY_AR_TYPE_CD,
				       A.INQUERY_AR_NUM,
				       A.RECD_STATUS,
				       '' AS ALL_EDIT_AMT,
				       (SELECT DISTINCT CUST_CD FROM SLA_AR_MST AR WHERE AR.REF_NUM = A.RECEIVE_NUM) AS TRANS_CUST_CD,
				       (SELECT DISTINCT CC_CD FROM SLA_AR_MST AR WHERE AR.REF_NUM = A.RECEIVE_NUM) AS TRANS_CC_CD,
				       '' AS SUSPENSE_AMT,
				       '' AS RECEIVE_DATE_FROM,
				       '' AS RECEIVE_DATE_TO,
				       '' AS SEQ,
				       '' AS SALS_CLASS,
				       '' AS ACCT_CD,
				       A.INQUERY_UPJANG_CD AS UPJANG_CD,
				       (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.INQUERY_UPJANG_CD) AS UPJANG_NM
				FROM   SLA_AR_RECEIVE_MST A
				WHERE  1=1 AND A.RECD_STATUS='L'
				<#if receiveNum?has_content>		AND    A.RECEIVE_NUM = :receiveNum</#if>
				<#if receiveDate?has_content>		AND    A.RECEIVE_DATE = :receiveDate</#if>
				<#if receiveOccurClass?has_content>	AND    A.RECEIVE_OCCUR_CLASS = :receiveOccurClass</#if>
				<#if receiveTypeCd?has_content>		AND    A.RECEIVE_TYPE_CD = :receiveTypeCd</#if>
				<#if muCd?has_content>				AND    A.MU_CD = :muCd</#if>
				<#if tmCd?has_content>				AND    SCC_GET_TM_BY_CC('CODE',A.CC_CD) = :tmCd</#if>
				<#if ccCd?has_content>				AND    A.CC_CD = :ccCd</#if>
				<#if custCd?has_content>			AND    A.CUST_CD = :custCd</#if>
			)
		]]></statement>

	<!-- 입금수단을 조회한다. -->
	<statement name="selectReceiveWayList" type="select">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.selectReceiveWayList
		*/
		<![CDATA[
			SELECT RECEIVE_NUM,
			       SEQ,
			       RECEIVE_TYPE_CD,
			       CUST_CD,
			       AR_TYPE_CD,
			       AR_NUM,
			       NVL((SELECT SUM(B.RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL B WHERE B.AR_NUM=W.AR_NUM AND B.RECD_STATUS='L'), 0) AS AR_RECEIVE_AMT,
			       BUYCPNY_CD,
			       SELF_BU_CLASS_CD,
			       CREDIT_CARD_NUM,
			       APPRV_NUM,
			       VALID_YYMM,
			       RECEIVE_BANKCD,
			       IMNO_CRGLEFT_NUM,
			       SUSPENSE_DATE,
			       IMNO_RECEIVE_SEQ,
			       SUSPENSE_SRLNUM,
			       IMNO_ALT_NUM,
			       RECEIVE_AMT,
			       RECD_STATUS,
			       CUSER,
			       CDATE,
			       UUSER,
			       UDATE
			FROM   SLA_AR_RECEIVE_WAY W
			WHERE  RECEIVE_NUM = :receiveNum
			AND    SEQ = :seq
		]]>
	</statement>

	<!-- 입금처리 번호를 생성한다. -->
	<statement name="selectMaxReceiveNum" type="select">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.selectMaxReceiveNum */
		<![CDATA[
	       SELECT SLA_GET_MAX_RECEIVE_NUM(:receiveDate)  AS maxReceiveNum		--:receiveDate || SLA_AR_RECEIVE_MST_S.NEXTVAL  AS maxReceiveNum
	       FROM   DUAL
		]]>
	</statement>

	<!-- 채권대체번호 생성한다. -->
	<statement name="selectMaxArAltNum" type="select">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.selectMaxArAltNum */
		<![CDATA[
			SELECT SLA_AR_RECEIVE_DETAIL_SEQ.NEXTVAL AS maxArAltNum
			FROM SLA_AR_RECEIVE_DETAIL
		]]>
	</statement>

	<!-- 입금처리(을)를 등록한다. -->
	<statement name="insertMst" type="insert">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.insertMst */
		<![CDATA[
			INSERT INTO SLA_AR_RECEIVE_MST
			(
				 RECEIVE_NUM,
				 RECEIVE_DATE,
				 RECEIVE_OCCUR_CLASS,
				 RECEIVE_TYPE_CD,
				 SYS_CLASS,
				 MU_CD,
				 CC_CD,
				 CUST_CD,
				 RECEIVE_AMT,
				 DEDUC_AMT,
				 AR_WITHDRAW_AMT,
				 ADVANCE_OCCUR,
				 ADVANCE_ALT,
				 REF_NUM,
				 BATCH_ID,
				 REMARK,
				 INQUERY_START_DATE,
				 INQUERY_END_DATE,
				 INQUERY_MU_CD,
				 INQUERY_TM_CD,
				 INQUERY_CC_CD,
				 INQUERY_CUST_CD,
				 INQUERY_AR_TYPE_CD,
				 INQUERY_AR_NUM,
				 INQUERY_UPJANG_CD,
				 RECD_STATUS,
				 CUSER,
				 CDATE,
				 UUSER,
				 UDATE
			) VALUES (
				 :receiveNum,
				<#if receiveDate?exists> :receiveDate, <#else> null, </#if>
				<#if receiveOccurClass?exists> :receiveOccurClass, <#else> null, </#if>
				<#if receiveTypeCd?exists> :receiveTypeCd, <#else> null, </#if>
				<#if sysClass?exists> :sysClass, <#else> null, </#if>
				<#if muCd?exists> :muCd, <#else> null, </#if>
				<#if ccCd?exists> :ccCd, <#else> null, </#if>
				<#if custCd?exists> :custCd, <#else> null, </#if>
				 :receiveAmt,
				 :deducAmt,
				<#if arWithdrawAmt?exists> :arWithdrawAmt, <#else> null, </#if>
				<#if advanceOccur?exists> :advanceOccur, <#else> null, </#if>
				<#if advanceAlt?exists> :advanceAlt, <#else> 0, </#if>
				<#if refNum?exists> :refNum, <#else> null, </#if>
				<#if batchId?exists> :batchId, <#else> null, </#if>
				<#if remark?exists> :remark, <#else> null, </#if>
				<#if inqueryStartDate?exists> :inqueryStartDate, <#else> null, </#if>
				<#if inqueryEndDate?exists> :inqueryEndDate, <#else> null, </#if>
				<#if inqueryMuCd?exists> :inqueryMuCd, <#else> null, </#if>
				<#if inqueryTmCd?exists> :inqueryTmCd, <#else> null, </#if>
				<#if inqueryCcCd?exists> :inqueryCcCd, <#else> null, </#if>
				<#if inqueryCustCd?exists> :inqueryCustCd, <#else> null, </#if>
				<#if inqueryArTypeCd?exists> :inqueryArTypeCd, <#else> null, </#if>
				<#if inqueryArNum?exists> :inqueryArNum, <#else> null, </#if>
				<#if upjangCd?exists> :upjangCd, <#else> null, </#if>
				<#if recdStatus?exists> :recdStatus, <#else> 'L', </#if>
				 :loginSabun,
				 SYSDATE,
				 :loginSabun,
				 SYSDATE
			)
		]]>
	</statement>

	<!-- 입금처리(을)를 수정한다. -->
	<statement name="updateMst" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.updateMst */
		<![CDATA[
			UPDATE SLA_AR_RECEIVE_MST SET
				<#if receiveDate?exists> RECEIVE_DATE = :receiveDate, </#if>
				<#if receiveOccurClass?exists> RECEIVE_OCCUR_CLASS = :receiveOccurClass, </#if>
				<#if receiveTypeCd?exists> RECEIVE_TYPE_CD = :receiveTypeCd, </#if>
				<#if sysClass?exists> SYS_CLASS = :sysClass, </#if>
				<#if muCd?exists> MU_CD = :muCd, </#if>
				<#if ccCd?exists> CC_CD = :ccCd, </#if>
				<#if custCd?exists> CUST_CD = :custCd, </#if>
			    RECEIVE_AMT = :receiveAmt,
			    DEDUC_AMT = :deducAmt,
				<#if arWithdrawAmt?exists> AR_WITHDRAW_AMT = :arWithdrawAmt, </#if>
				<#if advanceOccur?exists> ADVANCE_OCCUR = :advanceOccur, </#if>
			    <#if advanceAlt?exists> ADVANCE_ALT = :advanceAlt, </#if>
				<#if refNum?exists> REF_NUM = :refNum, </#if>
				<#if batchId?exists> BATCH_ID = :batchId, </#if>
				<#if remark?exists> REMARK = :remark, </#if>
				<#if inqueryStartDate?exists> INQUERY_START_DATE = :inqueryStartDate, </#if>
				<#if inqueryEndDate?exists> INQUERY_END_DATE = :inqueryEndDate, </#if>
				<#if inqueryMuCd?exists> INQUERY_MU_CD = :inqueryMuCd, </#if>
				<#if inqueryTmCd?exists> INQUERY_TM_CD = :inqueryTmCd, </#if>
				<#if inqueryCcCd?exists> INQUERY_CC_CD = :inqueryCcCd, </#if>
				<#if inqueryCustCd?exists> INQUERY_CUST_CD = :inqueryCustCd, </#if>
				<#if inqueryArTypeCd?exists> INQUERY_AR_TYPE_CD = :inqueryArTypeCd, </#if>
				<#if inqueryArNum?exists> INQUERY_AR_NUM = :inqueryArNum, </#if>
				<#if upjangCd?exists> INQUERY_UPJANG_CD = :upjangCd, </#if>
				<#if recdStatus?exists> RECD_STATUS = :recdStatus, </#if>
			    UUSER = :loginSabun,
			    UDATE = SYSDATE
			WHERE  RECEIVE_NUM = :receiveNum

		]]>
	</statement>

	<!-- 입금처리(을)를 수정한다. -->
	<statement name="updateMstAtlNum" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.updateMstAtlNum */
		<![CDATA[
			UPDATE SLA_AR_RECEIVE_MST SET
			    ADVANCE_ALT = :atlNum,
			    UUSER = :loginSabun,
			    UDATE = SYSDATE
			WHERE  RECEIVE_NUM = :receiveNum

		]]>
	</statement>

	<!-- 입금처리(을)를 취소한다. -->
	<statement name="cancleMst" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.cancleMst */
		<![CDATA[
		UPDATE SLA_AR_RECEIVE_MST SET
			RECD_STATUS = 'D',
		    UUSER = :loginSabun,
		    UDATE = SYSDATE		
		WHERE  RECEIVE_NUM = :receiveNum
		]]>
	</statement>

	<!-- 입금처리 상세(을)를 조회한다. -->
	<statement name="selectDetail" type="select">
		<![CDATA[
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.selectDetail */
		<#if receiveNum?exists>
			SELECT X.AR_ALT_NUM
				, DECODE(X.AR_ALT_NUM, 0, 0, 1) AS CHK
				, X.AR_NUM
				, X.RECEIVE_NUM
				, X.FISCAL_DATE
				, X.OCCUR_DATE
				, X.RECEIVE_DATE
				, X.AR_AMT
				, X.WITHDRAW_AMT
				, X.AR_BAL_AMT
				, X.RECEIVE_AMT
				, X.BAL_AMT
				, X.MU_CD
				, X.MU_NM
				, X.CC_CD
				, X.CC_NM
				, X.ACCT_CD
				, (SELECT DISTINCT ACCT.ACCTNM FROM HLDC_ST_ACCOUNT_V ACCT WHERE ACCT.ACCTCD = X.ACCT_CD) AS ACCT_NM
				, X.CUST_CD
				, X.CUST_NM
				, X.MNGMV_AR_NUM
				, X.REF_NUM
				, X.REMARKS
				, X.RECD_STATUS
				, X.SYS_CLASS
				, X.JOURNALZ_NUM
				, X.JOURNALZ_YN
				, X.REMARK
				, SLA_GET_TAX_SHET_OCCUR_YN('AR', X.AR_NUM) TAX_YN
				, X.UPJANG_CD
				, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = X.UPJANG_CD) UPJANG_NM
				, X.TRANS_ALT_COUNT
				-- CH201702_00668 제휴사후불 구분되도록 입금관리 팝업에 채권유형 필드추가 20170329
        		, X.TYPE_NM
        		, X.RECEIPT_NUM
				, X.SUBINV
        		, X.UPJANGCD AS SALES_UPJANG_CD
        		, (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = X.UPJANGCD) AS SALES_UPJANG_NM 
			FROM (
					SELECT NVL(A.AR_ALT_NUM, '0') AS AR_ALT_NUM,
					       NVL(A.AR_NUM, B.AR_NUM) AS AR_NUM,
					       A.RECEIVE_NUM,
					       B.FISCAL_DATE,
					       NVL(A.OCCUR_DATE, B.OCCUR_DATE) AS OCCUR_DATE,
					       A.RECEIVE_DATE,
					       NVL(A.AR_AMT, B.AR_AMT) AS AR_AMT,
					       NVL(B.WITHDRAW_AMT,0) AS WITHDRAW_AMT,
		                   --(NVL(B.AR_AMT,0) - NVL(B.WITHDRAW_AMT,0) + NVL(A.RECEIVE_AMT,0)) AS AR_BAL_AMT,
		                   <#if receiveNum?has_content>
								(NVL(B.AR_AMT,0) - NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL RD WHERE RD.AR_NUM=B.AR_NUM AND RD.RECD_STATUS='L' AND RD.RECEIVE_NUM <> NVL(A.RECEIVE_NUM,'0')),0)) AS AR_BAL_AMT,
						   <#else>
						   	   --POS에서 후불정산 하고 마감 전인 채권잔액 포함(중복입금처리 방지) 20200224 김호석
							   (NVL(B.AR_AMT,0) - NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL RD WHERE RD.AR_NUM=B.AR_NUM AND RD.RECD_STATUS='L' AND RD.RECEIVE_NUM <> NVL(A.RECEIVE_NUM,'0')),0))							    
        	                   - NVL((SELECT SUM(IA.WITHDRAW_AMT) FROM SLA_IF_AR_PAY_ADJUST_AR IA WHERE IA.DDDD_CLOSE_YN = 'N' AND IA.RECD_STATUS = 'L' AND IA.AR_NUM = B.AR_NUM),0)  AS AR_BAL_AMT,
        	               </#if>                           
					       NVL(A.RECEIVE_AMT, 0) AS RECEIVE_AMT,
					       NVL(A.BAL_AMT,0) AS BAL_AMT,
					       NVL(A.MU_CD, B.MU_CD) AS MU_CD,
					       (SELECT DISTINCT MU_NM FROM   HLDC_SC_DEPT_V WHERE MU_CD = NVL(A.MU_CD, B.MU_CD))  AS MU_NM,
					       NVL(A.CC_CD, B.CC_CD) AS CC_CD,
					       (SELECT  CC_NM FROM SCC_CC WHERE CC_CD = NVL(A.CC_CD, B.CC_CD)) AS CC_NM,
					       B.ACCT_CD AS ACCT_CD,
					       NVL(A.CUST_CD, B.CUST_CD) AS CUST_CD,
					       (SELECT CUSTNM FROM ST_CUST WHERE  CUSTCD=NVL(A.CUST_CD, B.CUST_CD)) AS CUST_NM,
					       B.MNGMV_AR_NUM,
					       B.REF_NUM,
					       A.REMARKS,
                 		   C.TYPE_NM,
					       A.RECD_STATUS,
					       B.SYS_CLASS,
					       A.JOURNALZ_NUM,
                           NVL(A.JOURNALZ_YN, 'N') AS JOURNALZ_YN,
                           B.REMARK,
                           B.UPJANG_CD,
                    	   (SELECT COUNT(*) FROM SLA_AR_RECEIVE_DETAIL DD, SLA_AR_MST AM WHERE DD.AR_NUM = AM.AR_NUM AND AM.MNGMV_AR_NUM = B.AR_NUM AND AM.REF_NUM = A.RECEIVE_NUM AND DD.RECD_STATUS='L' AND AM.RECD_STATUS='L') AS TRANS_ALT_COUNT
                    	   , B.RECEIPT_NUM    
                 		   , TRIM(REGEXP_SUBSTR(B.RECEIPT_NUM, '[^-]+', 1, 2)) AS SUBINV
                 		   , (SELECT UPJANG FROM HLDC_PO_SUBINVENTORY WHERE SUBINV_CODE = TRIM(REGEXP_SUBSTR(B.RECEIPT_NUM, '[^-]+', 1, 2))) AS UPJANGCD                                                           
					FROM   SLA_AR_RECEIVE_DETAIL A, SLA_AR_MST B, SLA_TYPE_CD_MST C, HLDC_SC_DEPT_V D
					WHERE A.AR_NUM(+) = B.AR_NUM AND B.AR_TYPE_CD <> 'A04'	--상품권 접수에 대한 채권은 상품권 처리에서 함.				
						AND A.RECD_STATUS(+) = 'L'
						AND B.RECD_STATUS = 'L'						
            			AND B.AR_TYPE_CD = C.TYPE_CD(+)
            			--SCC_GET_TM_BY_CC함수로 속도저하현상, HLDC_SC_DEPT_V 조인으로 변경 2018.03.13 김호석(선조치)
                  		AND   B.CC_CD = D.CC_CD
					    AND	C.TYPE_GRP_CD = '001'
					<#if receiveNum?has_content>
						AND A.RECEIVE_NUM = :receiveNum				
					<#else>
						AND A.RECEIVE_NUM(+) = :receiveNum
						<#if inqueryStartDate?has_content>AND    B.FISCAL_DATE >= :inqueryStartDate</#if>
						<#if inqueryEndDate?has_content>AND    B.FISCAL_DATE <= :inqueryEndDate</#if>
						<#if inqueryMuCd?has_content>AND    B.MU_CD = :inqueryMuCd</#if>
						<#if inqueryTmCd?has_content>
							--AND    SCC_GET_TM_BY_CC('CODE',B.CC_CD) = :inqueryTmCd
							AND   D.TM_CD = :inqueryTmCd						
						</#if>
						<#if inqueryCcCd?has_content>AND    B.CC_CD = :inqueryCcCd</#if>
						<#if inqueryCustCd?has_content>AND    B.CUST_CD = :inqueryCustCd</#if>
						<#if inqueryArNum?has_content>AND B.AR_NUM = :inqueryArNum</#if>
						<#if upjangCd?has_content> AND B.UPJANG_CD = :upjangCd</#if>
					
					</#if>
				--		AND (((NVL(B.AR_AMT,0) - NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL RD WHERE RD.AR_NUM=A.AR_NUM AND RD.RECD_STATUS='L'),0)) != 0) OR (A.RECEIVE_AMT IS NOT NULL))
			) X
			WHERE 1 = 1
			<#if receiveNum?has_content>
				AND 1 = 1
			<#else>
			 	AND X.AR_BAL_AMT != 0
			 </#if>
			ORDER BY X.RECEIVE_NUM DESC, OCCUR_DATE ASC

		<#else> 	

			SELECT '0' AS AR_ALT_NUM,
			       B.AR_NUM,
			       DECODE(:receiveNum,'1','0',:receiveNum),
			       '' AS RECEIVE_NUM,
			       B.FISCAL_DATE,
			       B.OCCUR_DATE,
			       '' AS RECEIVE_DATE,
			       B.AR_AMT,
			       NVL(B.WITHDRAW_AMT,0) AS WITHDRAW_AMT,
                   --(NVL(B.AR_AMT,0) - NVL(B.WITHDRAW_AMT,0)) AS AR_BAL_AMT,
                   (NVL(B.AR_AMT,0) - NVL((SELECT SUM(RECEIVE_AMT) FROM SLA_AR_RECEIVE_DETAIL RD WHERE RD.AR_NUM=B.AR_NUM AND RD.RECD_STATUS='L' AND RD.RECEIVE_NUM <> NVL(A.RECEIVE_NUM,'0')),0)) AS AR_BAL_AMT,
                   <#if allEditAmt?exists>:allEditAmt<#else>0</#if> AS RECEIVE_AMT,
			       0 AS BAL_AMT,
			       B.MU_CD,
			       (SELECT DISTINCT MU_NM FROM   HLDC_SC_DEPT_V WHERE MU_CD = B.MU_CD)  AS MU_NM,
			       B.CC_CD,
			       (SELECT  CC_NM FROM SCC_CC WHERE CC_CD = B.CC_CD) AS CC_NM,
			       B.ACCT_CD,
			       B.CUST_CD,
			       (SELECT CUSTNM FROM ST_CUST WHERE  CUSTCD=B.CUST_CD) AS CUST_NM,
			       '' AS REMARKS,
			       'L' AS RECD_STATUS,
			       B.SYS_CLASS
			FROM   SLA_AR_MST B
			WHERE 1=1
			AND    B.RECD_STATUS = 'L'
				<#if inqueryStartDate?has_content>AND    B.FISCAL_DATE >= :inqueryStartDate</#if>
				<#if inqueryEndDate?has_content>AND    B.FISCAL_DATE <= :inqueryEndDate</#if>
				<#if inqueryMuCd?has_content>AND    B.MU_CD = :inqueryMuCd</#if>
				<#if inqueryCcCd?has_content>AND    B.CC_CD = :inqueryCcCd</#if>
				<#if inqueryCustCd?has_content>AND    B.CUST_CD = :inqueryCustCd</#if>
				<#if inqueryArNum?has_content>AND B.AR_NUM = :inqueryArNum</#if>
				<#if upjangCd?has_content> AND B.UPJANG_CD = :upjangCd</#if>
				AND NVL(AR_AMT,0) - NVL(WITHDRAW_AMT,0) > 0		
					
		</#if>
		]]>
	</statement>

	<!-- 입금처리 상세(을)를 등록한다. -->
	<statement name="insertDetail" type="insert">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.insertDetail */
		<![CDATA[
			INSERT INTO SLA_AR_RECEIVE_DETAIL
			(
				 AR_ALT_NUM,
				 AR_NUM,
				 RECEIVE_NUM,
				 OCCUR_DATE,
				 RECEIVE_DATE,
				 AR_AMT,
				 RECEIVE_AMT,
				 BAL_AMT,
				 MU_CD,
				 CC_CD,
				 ACCT_CD,
				 CUST_CD,
				 REMARKS,
				 RECD_STATUS,
				 CUSER,
				 CDATE,
				 UUSER,
				 UDATE
			) VALUES (
				 SLA_AR_RECEIVE_DETAIL_SEQ.NEXTVAL,
				 :arNum,
				<#if receiveNum?exists> :receiveNum, <#else> null, </#if>
				<#if occurDate?exists> :occurDate, <#else> null, </#if>
				<#if receiveDate?exists> :receiveDate, <#else> null, </#if>
				<#if arAmt?exists> :arAmt, <#else> null, </#if>
				<#if receiveAmt?exists> :receiveAmt, <#else> null, </#if>
				<#if balAmt?exists> :balAmt, <#else> null, </#if>
				<#if muCd?exists> :muCd, <#else> null, </#if>
				<#if ccCd?exists><#if receiveTypeCd?exists>NVL((SELECT CC_CD FROM SLA_TYPE_CD_MST WHERE   USE_YN = 'Y' AND TYPE_GRP_CD = '002' AND TYPE_CD = :receiveTypeCd), :ccCd), <#else> :ccCd, </#if> <#else> null, </#if>
				<#if acctCd?exists> :acctCd, <#else> null, </#if>
				<#if custCd?exists> :custCd, <#else> null, </#if>
				<#if remarks?exists> :remarks, <#else> null, </#if>
				<#if recdStatus?exists> :recdStatus, <#else> 'L', </#if>
				 :loginSabun,
				 SYSDATE,
				 :loginSabun,
				 SYSDATE
			)
		]]>
	</statement>

	<!-- 입금상세 처리(을)를 수정한다. -->
	<statement name="updateDetail" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.updateDetail */
		<![CDATA[
			UPDATE SLA_AR_RECEIVE_DETAIL SET
			    AR_NUM = :arNum,
				<#if receiveNum?exists> RECEIVE_NUM = :receiveNum, </#if>
				<#if occurDate?exists> OCCUR_DATE = :occurDate, </#if>
				<#if receiveDate?exists> RECEIVE_DATE = :receiveDate, </#if>
				<#if arAmt?exists> AR_AMT = :arAmt, </#if>
				<#if receiveAmt?exists> RECEIVE_AMT = :receiveAmt, </#if>
				<#if balAmt?exists> BAL_AMT = :balAmt, </#if>
				<#if muCd?exists> MU_CD = :muCd, </#if>
				<#if ccCd?exists> CC_CD = :ccCd, </#if>
				<#if acctCd?exists> ACCT_CD = :acctCd, </#if>
				<#if custCd?exists> CUST_CD = :custCd, </#if>
				<#if remarks?exists> REMARKS = :remarks, </#if>
				<#if recdStatus?exists> RECD_STATUS = :recdStatus, </#if>
			    UUSER = :loginSabun,
			    UDATE = SYSDATE
			WHERE  AR_ALT_NUM = :arAltNum
		]]>
	</statement>

	<!-- 입금처리 상세를 삭제 처리 한다. -->
	<statement name="deleteDetail" type="delete">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.deleteDetail */
		<![CDATA[
			UPDATE SLA_AR_RECEIVE_DETAIL SET
				RECD_STATUS = 'D',
			    UUSER = :loginSabun,
			    UDATE = SYSDATE		
			WHERE  AR_ALT_NUM = :arAltNum			
		]]>
	</statement>

	<!-- 입금처리를 취소 처리 한다. -->
	<statement name="cancleDetail" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.cancleDetail */
		<![CDATA[
			UPDATE SLA_AR_RECEIVE_DETAIL SET
				RECD_STATUS = 'D',
			    UUSER = :loginSabun,
			    UDATE = SYSDATE		
			WHERE  AR_ALT_NUM = :arAltNum
		]]>
	</statement>

	<!-- 입금처리 수단을 등록한다. -->
	<statement name="insertReceiveWay" type="insert">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.insertReceiveWay */
		<![CDATA[
			INSERT INTO SLA_AR_RECEIVE_WAY
			(
				 RECEIVE_NUM,
				 SEQ,
				 RECEIVE_TYPE_CD,
				 CUST_CD,
				 AR_TYPE_CD,
				 AR_NUM,
				 BUYCPNY_CD,
				 SELF_BU_CLASS_CD,
				 CREDIT_CARD_NUM,
				 APPRV_NUM,
				 VALID_YYMM,
				 RECEIVE_BANKCD,
				 IMNO_CRGLEFT_NUM,
				 SUSPENSE_DATE,
				 IMNO_RECEIVE_SEQ,
				 SUSPENSE_SRLNUM,
				 IMNO_ALT_NUM,
				 RECEIVE_AMT,
				 RECD_STATUS,
				 CUSER,
				 CDATE,
				 UUSER,
				 UDATE
			) VALUES (
				 :receiveNum,
				 (SELECT NVL(MAX(SEQ),0) + 1 FROM SLA_AR_RECEIVE_WAY WHERE RECEIVE_NUM = :receiveNum),
				 :receiveTypeCd,
				<#if custCd?exists> :custCd, <#else> null, </#if>
				<#if arTypeCd?exists> :arTypeCd, <#else> null, </#if>
				<#if arNum?exists> :arNum, <#else> null, </#if>
				<#if buycpnyCd?exists> :buycpnyCd, <#else> null, </#if>
				<#if selfBuClassCd?exists> :selfBuClassCd, <#else> null, </#if>
				<#if creditCardNum?exists> :creditCardNum, <#else> null, </#if>
				<#if apprvNum?exists> :apprvNum, <#else> null, </#if>
				<#if validYymm?exists> :validYymm, <#else> null, </#if>
				<#if receiveBankcd?exists> :receiveBankcd, <#else> null, </#if>
				<#if imnoCrgleftNum?exists> :imnoCrgleftNum, <#else> null, </#if>
				<#if suspenseDate?exists> :suspenseDate, <#else> null, </#if>
				<#if imnoReceiveSeq?exists> :imnoReceiveSeq, <#else> null, </#if>
				<#if suspenseSrlnum?exists> :suspenseSrlnum, <#else> null, </#if>
				<#if imnoAltNum?exists> :imnoAltNum, <#else> null, </#if>
				<#if receiveAmt?exists> :receiveAmt, <#else> null, </#if>
				 'L',
				 :loginSabun,
				 SYSDATE,
				 :loginSabun,
				 SYSDATE
			)
		]]>
	</statement>
	<!-- 입금 처리 수단(을)를 수정한다. -->
	<statement name="updateReceiveWay" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.updateReceiveWay */
		<![CDATA[
			UPDATE SLA_AR_RECEIVE_WAY SET
			       RECEIVE_TYPE_CD = :receiveTypeCd,
				<#if custCd?exists> CUST_CD = :custCd, </#if>
				<#if arTypeCd?exists> AR_TYPE_CD = :arTypeCd, </#if>
				<#if arNum?exists> AR_NUM = :arNum, </#if>
				<#if buycpnyCd?exists> BUYCPNY_CD = :buycpnyCd, </#if>
				<#if selfBuClassCd?exists> SELF_BU_CLASS_CD = :selfBuClassCd, </#if>
				<#if creditCardNum?exists> CREDIT_CARD_NUM = :creditCardNum, </#if>
				<#if apprvNum?exists> APPRV_NUM = :apprvNum, </#if>
				<#if validYymm?exists> VALID_YYMM = :validYymm, </#if>
				<#if receiveBankcd?exists> RECEIVE_BANKCD = :receiveBankcd, </#if>
				<#if imnoCrgleftNum?exists> IMNO_CRGLEFT_NUM = :imnoCrgleftNum, </#if>
				<#if suspenseDate?exists> SUSPENSE_DATE = :suspenseDate, </#if>
				<#if imnoReceiveSeq?exists> IMNO_RECEIVE_SEQ = :imnoReceiveSeq, </#if>
				<#if suspenseSrlnum?exists> SUSPENSE_SRLNUM = :suspenseSrlnum, </#if>
				<#if imnoAltNum?exists> IMNO_ALT_NUM = :imnoAltNum, </#if>
				<#if receiveAmt?exists> RECEIVE_AMT = :receiveAmt, </#if>
				<#if recdStatus?exists> RECD_STATUS = :recdStatus, </#if>
			       UUSER = :loginSabun,
			       UDATE = SYSDATE
			WHERE  RECEIVE_NUM = :receiveNum
				<#if seq?has_content>AND    SEQ = :seq</#if>
				<#if arNum?has_content>AND    AR_NUM = :arNum</#if>
		]]>
	</statement>

	<!-- 입금 처리 수단 가수금대체번호(을)를 수정한다. -->
	<statement name="updateReceiveWayAtlNum" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.updateReceiveWayAtlNum
		*/
		<![CDATA[
			UPDATE SLA_AR_RECEIVE_WAY SET
			    IMNO_ALT_NUM = :atlNum,
			    UUSER = :loginSabun,
			    UDATE = SYSDATE
			WHERE  RECEIVE_NUM = :receiveNum

		]]>
	</statement>

	<!-- 입금 처리 수단을 취소 처리 한다. -->
	<statement name="cancleReceiveWay" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.cancleReceiveWay */
		<![CDATA[
			UPDATE SLA_AR_RECEIVE_WAY SET
				RECD_STATUS = 'D',
			    UUSER = :loginSabun,
			    UDATE = SYSDATE		
			WHERE  RECEIVE_NUM = :receiveNum
		]]>
	</statement>

	<!-- 입금처리 목록을 조회한다. -->
	<statement name="selectDeduc" type="select">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.selectDeduc */
		<![CDATA[
			SELECT RECEIVE_NUM,
			       SEQ,
			       DEDUC_SEQ,
			       RECEIVE_DEDUC_TYPE,
			       ACCT_CD,
			       SYS_CLASS,
			       MU_CD,
			       CC_CD,
			       DR_CR_CLASS,
			       DEDUC_AMT,
			       DECODE(VAT_YN, 'Y', 1, 0) AS VAT_YN,
			       VAT_AMT,
			       CUST_CD,
			       REMARKS,
			       DECODE(MANU_REG_YN, 'Y', 1, 0) AS MANU_REG_YN,
			       RECD_STATUS,
			       CUSER,
			       CDATE,
			       UUSER,
			       UDATE
			FROM   SLA_RECEIVE_DEDUC_ARTICLE
			WHERE  RECEIVE_NUM = :receiveNum
		]]>
	</statement>

	<!-- 공제사항을 등록한다. -->
	<statement name="insertDeduc" type="insert">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.insertDeduc */
		<![CDATA[
			INSERT INTO SLA_RECEIVE_DEDUC_ARTICLE
			(
				 RECEIVE_NUM,
				 SEQ,
				 DEDUC_SEQ,
				 RECEIVE_DEDUC_TYPE,
				 ACCT_CD,
				 SYS_CLASS,
				 MU_CD,
				 CC_CD,
				 DR_CR_CLASS,
				 DEDUC_AMT,
				 VAT_YN,
				 VAT_AMT,
				 CUST_CD,
				 REMARKS,
				 MANU_REG_YN,
				 RECD_STATUS,
				 CUSER,
				 CDATE,
				 UUSER,
				 UDATE
			) VALUES (
				 :receiveNum,
				 (SELECT NVL(MAX(SEQ),0) + 1 FROM SLA_RECEIVE_DEDUC_ARTICLE WHERE RECEIVE_NUM=:receiveNum),
				 (SELECT NVL(MAX(DEDUC_SEQ),0) + 1 FROM SLA_RECEIVE_DEDUC_ARTICLE WHERE RECEIVE_NUM=:receiveNum),
				 :receiveDeducType,
				 (SELECT ACCT_CD FROM SLA_TYPE_CD_MST WHERE TYPE_GRP_CD ='003' AND TYPE_CD = :receiveDeducType),
				<#if sysClass?exists> :sysClass, <#else> null, </#if>
				<#if muCd?exists> :muCd, <#else> null, </#if>
				<#if ccCd?exists> :ccCd, <#else> null, </#if>
				 (SELECT DR_CR_CLASS FROM SLA_TYPE_CD_MST WHERE TYPE_GRP_CD ='003' AND TYPE_CD = :receiveDeducType),
				<#if deducAmt?exists> :deducAmt, <#else> null, </#if>
				<#if vatYn?exists> DECODE(:vatYn, '1', 'Y', 'N'), <#else> null, </#if>
				<#if vatAmt?exists> :vatAmt, <#else> null, </#if>
				<#if custCd?exists> :custCd, <#else> null, </#if>
				<#if remarks?exists> :remarks, <#else> null, </#if>
				<#if manuRegYn?exists> DECODE(:manuRegYn, '1', 'Y', 'N'), <#else> null, </#if>
				<#if recdStatus?exists> :recdStatus, <#else> null, </#if>
				 :loginSabun,
				 SYSDATE,
				 :loginSabun,
				 SYSDATE
			)

		]]>
	</statement>
	<!-- 공제사항(을)를 수정한다. -->
	<statement name="updateDeduc" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.updateDeduc */
		<![CDATA[
			UPDATE SLA_RECEIVE_DEDUC_ARTICLE SET
			       RECEIVE_DEDUC_TYPE = :receiveDeducType,
			       ACCT_CD = (SELECT ACCT_CD FROM SLA_TYPE_CD_MST WHERE TYPE_GRP_CD ='003' AND TYPE_CD = :receiveDeducType),
				<#if sysClass?exists> SYS_CLASS = :sysClass, </#if>
				<#if muCd?exists> MU_CD = :muCd, </#if>
				<#if ccCd?exists> CC_CD = :ccCd, </#if>
			       DR_CR_CLASS = (SELECT DR_CR_CLASS FROM SLA_TYPE_CD_MST WHERE TYPE_GRP_CD ='003' AND TYPE_CD = :receiveDeducType),
				<#if deducAmt?exists> DEDUC_AMT = :deducAmt, </#if>
				<#if vatYn?exists> VAT_YN = DECODE(:vatYn, '1', 'Y', 'N'), </#if>
				<#if vatAmt?exists> VAT_AMT = :vatAmt, </#if>
				<#if custCd?exists> CUST_CD = :custCd, </#if>
				<#if remarks?exists> REMARKS = :remarks, </#if>
				<#if manuRegYn?exists> MANU_REG_YN = DECODE(:manuRegYn, '1', 'Y', 'N'), </#if>
				<#if recdStatus?exists> RECD_STATUS = :recdStatus, </#if>
			       UUSER = :loginSabun,
			       UDATE = SYSDATE
			WHERE  RECEIVE_NUM = :receiveNum
			AND    SEQ = :seq
			AND    DEDUC_SEQ = :deducSeq

		]]>
	</statement>

	<!-- 공제사항을 삭제 처리 한다. -->
	<statement name="deleteDeduc" type="delete">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.deleteDeduc */
		<![CDATA[
			DELETE
			FROM   SLA_RECEIVE_DEDUC_ARTICLE
			WHERE  RECEIVE_NUM = :receiveNum
			AND    SEQ = :seq
			AND    DEDUC_SEQ = :deducSeq
		]]>
	</statement>

	<!-- 공제사항을 취소 처리 한다. -->
	<statement name="cancleDeduc" type="update">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.cancleDeduc */
		<![CDATA[
			UPDATE SLA_RECEIVE_DEDUC_ARTICLE SET
				RECD_STATUS = 'D',
			    UUSER = :loginSabun,
			    UDATE = SYSDATE		
			WHERE  RECEIVE_NUM = :receiveNum
			<#if seq?has_content>AND    SEQ = :seq</#if>
			<#if deducSeq?has_content>AND    DEDUC_SEQ = :deducSeq</#if>
		]]>
	</statement>

	<!-- 입금수단을 삭제 처리 한다. -->
	<statement name="deleteReceiveWay" type="delete">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.deleteReceiveWay */
		<![CDATA[
			DELETE
			FROM   SLA_AR_RECEIVE_WAY
			WHERE  RECEIVE_NUM = :receiveNum
		]]>
	</statement>

	<!-- 수수료 금액을 들고온다.. -->
	<statement name="selectCharge" type="select">
		/*+ com.hwfs.sm.sar.dao.ReceiveMgntPopDAO.selectCharge */
		<![CDATA[
		SELECT (:receiveAmt * (SELECT MAX(CMIS_RATE)
				FROM SLA_BUY_CPNY_MGMT  C, SLA_FRNC_STOR_MGMT S
				WHERE S.BUYCPNY_CD = C.BUYCPNY_CD
		   		AND C.CUST_CD = :custCd
		   		AND S.MU_CD = :muCd
		   		--AND S.CARD_CLASS = 'N'
		   		<#if upjangCd?has_content>AND S.UPJANG_CD = :upjangCd</#if>) / 100) CHARGE_AMT
   		FROM DUAL
		]]>
	</statement>
</hqml>
