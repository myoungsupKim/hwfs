<?xml version="1.0" encoding="euc-kr"?>
<query dynamic="true">
    <type>select</type>
    <description><![CDATA[월별손익보고서]]></description>
    <reload>true</reload>
    <monitoring>true</monitoring>
    <result-count>1</result-count>
    <statement>

SELECT A.*
  FROM (
       
    <isEqual col="S_TYPE" value = "1">
        SELECT B.L_ACCT_CLASS
    </isEqual>
    <isEqual col="S_TYPE" value = "2">
        SELECT B.L_ACCT_CLASS
             , B.M_ACCT_CLASS
    </isEqual>
    <isEqual col="S_TYPE" value = "3">
        SELECT B.L_ACCT_CLASS
             , B.M_ACCT_CLASS
             , B.S_ACCT_CLASS
    </isEqual>
    <isEqual col="CLOSE_TYPE" value="C05C">
             , SUM(NVL(ROUND(NVL(A.MM_AMT_01, 0) / 1000), 0)) MM_AMT_01
             , SUM(NVL(ROUND(NVL(A.MM_AMT_02, 0) / 1000), 0)) MM_AMT_02
             , SUM(NVL(ROUND(NVL(A.MM_AMT_03, 0) / 1000), 0)) MM_AMT_03
             , SUM(NVL(ROUND(NVL(A.MM_AMT_04, 0) / 1000), 0)) MM_AMT_04
             , SUM(NVL(ROUND(NVL(A.MM_AMT_05, 0) / 1000), 0)) MM_AMT_05
             , SUM(NVL(ROUND(NVL(A.MM_AMT_06, 0) / 1000), 0)) MM_AMT_06
             , SUM(NVL(ROUND(NVL(A.MM_AMT_07, 0) / 1000), 0)) MM_AMT_07
             , SUM(NVL(ROUND(NVL(A.MM_AMT_08, 0) / 1000), 0)) MM_AMT_08
             , SUM(NVL(ROUND(NVL(A.MM_AMT_09, 0) / 1000), 0)) MM_AMT_09
             , SUM(NVL(ROUND(NVL(A.MM_AMT_10, 0) / 1000), 0)) MM_AMT_10
             , SUM(NVL(ROUND(NVL(A.MM_AMT_11, 0) / 1000), 0)) MM_AMT_11
             , SUM(NVL(ROUND(NVL(A.MM_AMT_12, 0) / 1000), 0)) MM_AMT_12
             , SUM(NVL(ROUND((  NVL(A.MM_AMT_01, 0)
                              + NVL(A.MM_AMT_02, 0)
                              + NVL(A.MM_AMT_03, 0)
                              + NVL(A.MM_AMT_04, 0)
                              + NVL(A.MM_AMT_05, 0)
                              + NVL(A.MM_AMT_06, 0)
                              + NVL(A.MM_AMT_07, 0)
                              + NVL(A.MM_AMT_08, 0)
                              + NVL(A.MM_AMT_09, 0)
                              + NVL(A.MM_AMT_10, 0)
                              + NVL(A.MM_AMT_11, 0)
                              + NVL(A.MM_AMT_12, 0)) / 1000 ), 0)) SUM_AMT
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_01, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_01
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_02, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_02
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_03, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_03
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_04, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_04
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_05, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_05
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_06, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_06
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_07, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_07
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_08, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_08
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_09, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_09
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_10, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_10
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_11, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_11
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND(NVL(A.MM_AMT_12, 0) / 1000), 0) ELSE 0 END) SG_MM_AMT_12
     , SUM(CASE WHEN CC_GB = 'SG' THEN NVL(ROUND((  NVL(A.MM_AMT_01, 0)
                      + NVL(A.MM_AMT_02, 0)
                      + NVL(A.MM_AMT_03, 0)
                      + NVL(A.MM_AMT_04, 0)
                      + NVL(A.MM_AMT_05, 0)
                      + NVL(A.MM_AMT_06, 0)
                      + NVL(A.MM_AMT_07, 0)
                      + NVL(A.MM_AMT_08, 0)
                      + NVL(A.MM_AMT_09, 0)
                      + NVL(A.MM_AMT_10, 0)
                      + NVL(A.MM_AMT_11, 0)
                      + NVL(A.MM_AMT_12, 0)) / 1000 ), 0) ELSE 0 END) SG_SUM_AMT
    </isEqual>
    <isEqual col="CLOSE_TYPE" value="C05D">
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_01, 0) * NVL(MM_MARGIN_RATE_01, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_01, 0) / 1000), 0)
                    END) MM_AMT_01
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_02, 0) * NVL(MM_MARGIN_RATE_02, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_02, 0) / 1000), 0)
                    END) MM_AMT_02
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_03, 0) * NVL(MM_MARGIN_RATE_03, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_03, 0) / 1000), 0)
                    END) MM_AMT_03
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_04, 0) * NVL(MM_MARGIN_RATE_04, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_04, 0) / 1000), 0)
                    END) MM_AMT_04
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_05, 0) * NVL(MM_MARGIN_RATE_05, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_05, 0) / 1000), 0)
                    END) MM_AMT_05
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_06, 0) * NVL(MM_MARGIN_RATE_06, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_06, 0) / 1000), 0)
                    END) MM_AMT_06
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_07, 0) * NVL(MM_MARGIN_RATE_07, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_07, 0) / 1000), 0)
                    END) MM_AMT_07
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')  THEN NVL(ROUND(NVL(A.MM_AMT_08, 0) * NVL(MM_MARGIN_RATE_08, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_08, 0) / 1000), 0)
                    END) MM_AMT_08
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_09, 0) * NVL(MM_MARGIN_RATE_09, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_09, 0) / 1000), 0)
                    END) MM_AMT_09
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_10, 0) * NVL(MM_MARGIN_RATE_10, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_10, 0) / 1000), 0)
                    END) MM_AMT_10
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_11, 0) * NVL(MM_MARGIN_RATE_11, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_11, 0) / 1000), 0)
                    END) MM_AMT_11
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_12, 0) * NVL(MM_MARGIN_RATE_12, 100) / 100000), 0)
                        ELSE NVL(ROUND(NVL(A.MM_AMT_12, 0) / 1000), 0)
                    END) MM_AMT_12
             , SUM(CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203') 
                        THEN NVL(ROUND((  NVL(A.MM_AMT_01 * NVL(MM_MARGIN_RATE_01, 100), 0)
                                        + NVL(A.MM_AMT_02 * NVL(MM_MARGIN_RATE_02, 100), 0)
                                        + NVL(A.MM_AMT_03 * NVL(MM_MARGIN_RATE_03, 100), 0)
                                        + NVL(A.MM_AMT_04 * NVL(MM_MARGIN_RATE_04, 100), 0)
                                        + NVL(A.MM_AMT_05 * NVL(MM_MARGIN_RATE_05, 100), 0)
                                        + NVL(A.MM_AMT_06 * NVL(MM_MARGIN_RATE_06, 100), 0)
                                        + NVL(A.MM_AMT_07 * NVL(MM_MARGIN_RATE_07, 100), 0)
                                        + NVL(A.MM_AMT_08 * NVL(MM_MARGIN_RATE_08, 100), 0)
                                        + NVL(A.MM_AMT_09 * NVL(MM_MARGIN_RATE_09, 100), 0)
                                        + NVL(A.MM_AMT_10 * NVL(MM_MARGIN_RATE_10, 100), 0)
                                        + NVL(A.MM_AMT_11 * NVL(MM_MARGIN_RATE_11, 100), 0)
                                        + NVL(A.MM_AMT_12 * NVL(MM_MARGIN_RATE_12, 100), 0)) / 100000 ), 0)
                        ELSE NVL(ROUND((  NVL(A.MM_AMT_01, 0)
                                        + NVL(A.MM_AMT_02, 0)
                                        + NVL(A.MM_AMT_03, 0)
                                        + NVL(A.MM_AMT_04, 0)
                                        + NVL(A.MM_AMT_05, 0)
                                        + NVL(A.MM_AMT_06, 0)
                                        + NVL(A.MM_AMT_07, 0)
                                        + NVL(A.MM_AMT_08, 0)
                                        + NVL(A.MM_AMT_09, 0)
                                        + NVL(A.MM_AMT_10, 0)
                                        + NVL(A.MM_AMT_11, 0)
                                        + NVL(A.MM_AMT_12, 0)) / 1000), 0)
                    END) AS SUM_AMT
      , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')  THEN NVL(ROUND(NVL(A.MM_AMT_01, 0) * NVL(MM_MARGIN_RATE_01, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_01, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_01
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_02, 0) * NVL(MM_MARGIN_RATE_02, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_02, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_02
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_03, 0) * NVL(MM_MARGIN_RATE_03, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_03, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_03
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_04, 0) * NVL(MM_MARGIN_RATE_04, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_04, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_04
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_05, 0) * NVL(MM_MARGIN_RATE_05, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_05, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_05
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_06, 0) * NVL(MM_MARGIN_RATE_06, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_06, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_06
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_07, 0) * NVL(MM_MARGIN_RATE_07, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_07, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_07
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_08, 0) * NVL(MM_MARGIN_RATE_08, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_08, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_08
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_09, 0) * NVL(MM_MARGIN_RATE_09, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_09, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_09
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_10, 0) * NVL(MM_MARGIN_RATE_10, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_10, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_10
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_11, 0) * NVL(MM_MARGIN_RATE_11, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_11, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_11
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')   THEN NVL(ROUND(NVL(A.MM_AMT_12, 0) * NVL(MM_MARGIN_RATE_12, 100) / 100000), 0)
                ELSE NVL(ROUND(NVL(A.MM_AMT_12, 0) / 1000), 0)
            END
            ELSE 0 END) SG_MM_AMT_12
     , SUM(CASE WHEN CC_GB = 'SG' THEN
            CASE WHEN SUBSTR(B.ACCT_CD,1,5) IN ('42203')
                THEN NVL(ROUND((  NVL(A.MM_AMT_01 * NVL(MM_MARGIN_RATE_01, 100), 0)
                                + NVL(A.MM_AMT_02 * NVL(MM_MARGIN_RATE_02, 100), 0)
                                + NVL(A.MM_AMT_03 * NVL(MM_MARGIN_RATE_03, 100), 0)
                                + NVL(A.MM_AMT_04 * NVL(MM_MARGIN_RATE_04, 100), 0)
                                + NVL(A.MM_AMT_05 * NVL(MM_MARGIN_RATE_05, 100), 0)
                                + NVL(A.MM_AMT_06 * NVL(MM_MARGIN_RATE_06, 100), 0)
                                + NVL(A.MM_AMT_07 * NVL(MM_MARGIN_RATE_07, 100), 0)
                                + NVL(A.MM_AMT_08 * NVL(MM_MARGIN_RATE_08, 100), 0)
                                + NVL(A.MM_AMT_09 * NVL(MM_MARGIN_RATE_09, 100), 0)
                                + NVL(A.MM_AMT_10 * NVL(MM_MARGIN_RATE_10, 100), 0)
                                + NVL(A.MM_AMT_11 * NVL(MM_MARGIN_RATE_11, 100), 0)
                                + NVL(A.MM_AMT_12 * NVL(MM_MARGIN_RATE_12, 100), 0)) / 100000 ), 0)
                ELSE NVL(ROUND((  NVL(A.MM_AMT_01, 0)
                                + NVL(A.MM_AMT_02, 0)
                                + NVL(A.MM_AMT_03, 0)
                                + NVL(A.MM_AMT_04, 0)
                                + NVL(A.MM_AMT_05, 0)
                                + NVL(A.MM_AMT_06, 0)
                                + NVL(A.MM_AMT_07, 0)
                                + NVL(A.MM_AMT_08, 0)
                                + NVL(A.MM_AMT_09, 0)
                                + NVL(A.MM_AMT_10, 0)
                                + NVL(A.MM_AMT_11, 0)
                                + NVL(A.MM_AMT_12, 0)) / 1000), 0)
            END
            ELSE 0 END) AS SG_SUM_AMT
    </isEqual>
    <isNotEqual col = "S_TYPE" value = "1">
             , DECODE(B.M_ACCT_CLASS, '매출액', '1', '재료비', '2', '인건비', '3', '경비', '4') AS SKEY    
    </isNotEqual>
        FROM (
              SELECT B.UPJANG_CD AS UPJANG
                   , A.ACCT_CD
                   , A.FISCAL_YEAR
                   , A.MM_AMT_01
                   , A.MM_AMT_02
                   , A.MM_AMT_03
                   , A.MM_AMT_04
                   , A.MM_AMT_05
                   , A.MM_AMT_06
                   , A.MM_AMT_07
                   , A.MM_AMT_08
                   , A.MM_AMT_09
                   , A.MM_AMT_10
                   , A.MM_AMT_11
                   , A.MM_AMT_12
                   , '0' AS SUM_AMT
                   , C.CST_PLNKGVRN_CLASS_CD AS CC_GB
                FROM MAP_UPJANG_PL A
                   , (SELECT DISTINCT TM_CD, UPJANG_CD, CC_CD 
                        FROM FSO_ACC_OBJECT_V 
                       WHERE 1=1
					     <isNotNull col="BASE_YY">
					     AND ACC_MON LIKE #BASE_YY# || '%'
					     </isNotNull>
                         AND UPJANG_CD IS NOT NULL) B
                   , SCC_CC C
               WHERE 1=1
                 --2019.02.07 김명섭 팀/본부 조회 시 판관CC 제외
                 <isNull col="UPJANG">
                 --AND A.CC_CD NOT IN (SELECT CC_CD FROM SCC_CC WHERE CST_PLNKGVRN_CLASS_CD = 'SG')
                 </isNull>
                 AND A.CC_CD = B.CC_CD
                 AND A.PL_CLASS = 'KS'
                 AND A.FISCAL_YEAR = #YY#
                 AND A.CC_CD = C.CC_CD(+)
             <isNotNull col="MU_CD">
                 AND B.MU_CD = #MU_CD#
             </isNotNull>
             <isNotNull col="TM_CD">
                 <isNotEqual col="HOMEPLUS" value="1"> 
				   <isEqual col="BONBUCHK" value="N"> 
				   AND B.TM_CD = #TM_CD#
		 		   </isEqual>
				   <isEqual col="BONBUCHK" value="Y"> 
				   AND B.TM_CD LIKE #TM_CD# || '%'
		 		   </isEqual>
		         </isNotEqual>         
             </isNotNull>
             <isNotNull col="UPJANG">
                 <isNotEqual col="HOMEPLUS" value="1"> 
		         AND B.UPJANG_CD = #UPJANG#
		         </isNotEqual>
		     <isEqual col="HOMEPLUS" value="1"> 
 		         AND B.UPJANG_CD    IN  (SELECT Z.CODE FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'UPJANG_GROUP' AND Z.USE_YN = 'Y' AND SET1 = #UPJANG#   )
 		     </isEqual>
             </isNotNull>
             ) A
           , (
              SELECT SEQ
                   , ACCTNM1 L_ACCT_CLASS
                   , ACCTNM2 M_ACCT_CLASS
                   , ACCTNM3 S_ACCT_CLASS
                   , ACCTNM4 AS ACCT_NM
                   , ACCTCD AS ACCT_CD
                FROM MAS_ST_ACCOUNT
             ) B
           , (
              SELECT A.*
                FROM MAP_MARGIN_RATE_MGMT A
                   , (SELECT DISTINCT TM_CD, UPJANG_CD, CC_CD 
                        FROM FSO_ACC_OBJECT_V 
                       WHERE 1=1
					     <isNotNull col="BASE_YY">
					     AND ACC_MON LIKE #BASE_YY# || '%'
					     </isNotNull>
                         AND UPJANG_CD IS NOT NULL) B
               WHERE A.UPJANG(+) = B.UPJANG_CD
                 AND A.YY = #YY#
                 AND A.CLASS = 'R'
             <isNotNull col="MU_CD">
                 AND B.MU_CD = #MU_CD#
             </isNotNull>
             <isNotNull col="TM_CD">
                 <isNotEqual col="HOMEPLUS" value="1"> 
				   <isEqual col="BONBUCHK" value="N"> 
				   AND B.TM_CD = #TM_CD#
		 		   </isEqual>
				   <isEqual col="BONBUCHK" value="Y"> 
				   AND B.TM_CD LIKE #TM_CD# || '%'
		 		   </isEqual>
		         </isNotEqual>         
             </isNotNull>
             <isNotNull col="UPJANG">
                 <isNotEqual col="HOMEPLUS" value="1"> 
		         AND B.UPJANG_CD = #UPJANG#
		         </isNotEqual>
		         <isEqual col="HOMEPLUS" value="1"> 
 		         AND B.UPJANG_CD    IN  (SELECT Z.CODE FROM SCC_COMMON_CODE Z WHERE Z.GROUP_CODE = 'UPJANG_GROUP' AND Z.USE_YN = 'Y' AND SET1 = #UPJANG#   )
 		         </isEqual>
             </isNotNull>
             ) C
       WHERE B.ACCT_CD = A.ACCT_CD(+)
         AND A.UPJANG = C.UPJANG(+)
         AND A.UPJANG NOT IN (SELECT TO_NUMBER(CODE) FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'MA0048' AND USE_YN = 'Y')
         --2019.12.13 김명섭 블로킹대상자 조회 제외 업장 체크
         AND NOT EXISTS (SELECT 'x'
                           FROM SCC_COMMON_CODE CCODE1, SCC_COMMON_CODE CCODE2
                          WHERE CCODE1.GROUP_CODE = 'EXLDOWN_BLOCKING'
                            AND CCODE1.CODE = #UUSER#
                            AND CCODE1.USE_YN = 'Y'
                            AND CCODE2.GROUP_CODE = 'UPJANG_BLOCKING'
                            AND CCODE2.CODE = A.UPJANG
                            AND CCODE2.USE_YN = 'Y')
   <isEqual col="S_TYPE" value = "1">
       GROUP BY B.L_ACCT_CLASS
   </isEqual>
   <isEqual col="S_TYPE" value = "2">
       GROUP BY B.L_ACCT_CLASS, B.M_ACCT_CLASS
   </isEqual>
   <isEqual col="S_TYPE" value = "3">
       GROUP BY B.L_ACCT_CLASS, B.M_ACCT_CLASS, B.S_ACCT_CLASS
   </isEqual>
       ) A
     , (
       <isEqual col="S_TYPE" value = "1">
        SELECT MIN(SEQ) AS SEQ
             , ACCTNM1 L_ACCT_CLASS
          FROM MAS_ST_ACCOUNT
         GROUP BY ACCTNM1
       </isEqual>
       <isEqual col="S_TYPE" value = "2">
        SELECT MIN(SEQ) AS SEQ
             , ACCTNM2 M_ACCT_CLASS
          FROM MAS_ST_ACCOUNT
         GROUP BY ACCTNM2
       </isEqual>
       <isEqual col="S_TYPE" value = "3">
        SELECT MIN(SEQ) AS SEQ
             , ACCTNM3 S_ACCT_CLASS
          FROM MAS_ST_ACCOUNT
         GROUP BY ACCTNM3
       </isEqual>
       ) B
<isEqual col="S_TYPE" value = "1">
 WHERE A.L_ACCT_CLASS = B.L_ACCT_CLASS
</isEqual>
<isEqual col="S_TYPE" value = "2">
 WHERE A.M_ACCT_CLASS = B.M_ACCT_CLASS
</isEqual>
<isEqual col="S_TYPE" value = "3">
 WHERE A.S_ACCT_CLASS = B.S_ACCT_CLASS
</isEqual>
 ORDER BY B.SEQ

    </statement>
    <input default-name="ds_in">
    </input>
    <output default-name="ds_out">
    </output>
</query>