<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="ls.lsm.monthlyPlanMgmtDAO">
    <desc>월계획 조정 관리</desc>

    <!-- 월계획 조정 수립 조회 DATA를 조회한다. -->
    <statement name="selectList" type="select">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.selectList */
        <![CDATA[
/* 월계획 조정 수립 조회 */
SELECT A.YEAR
     , A.PLAN_CLSFI
     , A.PLANCLASS
     , A.MM
     , A.MCALSS_CD
     , (SELECT MGRP_CD FROM LCM_SPECM_TYPE_MCALSS WHERE MCALSS_CD = A.MCALSS_CD) AS MGRP_CD
     , (SELECT SPECM_TYPE FROM LCM_SPECM_TYPE_MCALSS WHERE MCALSS_CD = A.MCALSS_CD) AS SPECM_TYPE
     , (SELECT MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS WHERE MCALSS_CD = A.MCALSS_CD) AS MCALSS_NM
     , ROW_NUMBER() OVER(PARTITION BY A.YEAR, A.PLANCLASS, A.MM ORDER BY A.YEAR, A.PLANCLASS, A.MM, A.MCALSS_CD) AS RN
  FROM LSM_ANNUPLAN_MONTH_MST A
 WHERE A.YEAR = :planYear
   AND A.PLAN_CLSFI = :planClsfi
   AND A.PLANCLASS = :planclass
   AND A.MM = :planMonth
   <#if mcalssCdSearch?has_content> AND A.MCALSS_CD = :mcalssCdSearch </#if>
 ORDER BY TO_NUMBER(A.MM)
        ]]>
    </statement>

    <!-- 검체유형항목 DATA를 조회한다. -->
    <statement name="selectClassList" type="select">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.selectClassList */
        <![CDATA[
/* 검체유형항목 조회 */
SELECT A.SPECM_TYPE
     , A.MGRP_CD
     , A.MGRP_NM
     , B.MCALSS_CD
     , B.MCALSS_NM
  FROM LCM_SPECM_TYPE_MGRP A
     , LCM_SPECM_TYPE_MCALSS B
 WHERE A.SPECM_TYPE = :specmType
<#if mcalssCd?has_content> AND B.MCALSS_CD = :mcalssCd </#if>
<#if edtSearch?has_content> AND B.MCALSS_NM LIKE '%' || :edtSearch || '%' </#if>
   AND A.SPECM_TYPE = B.SPECM_TYPE
   AND A.MGRP_CD = B.MGRP_CD
   AND A.USE_YN = 'Y'
   AND B.USE_YN = 'Y'
 ORDER BY A.SPECM_TYPE
        , A.MGRP_CD
        , B.MCALSS_CD
        ]]>
    </statement>

    <!-- 월계획 조정 조회 - 년간시료수 DATA를 조회한다. -->
    <statement name="selectTestCnt" type="select">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.selectTestCnt */
        <![CDATA[
/* 월계획 조정 조회 - 년간시료수 조회 */
SELECT A.MM
     , (
        SELECT COUNT(1)
          FROM LSM_ANNUPLAN_MONTH_DTL Z
         WHERE 1 = 1
           AND Z.YEAR = A.YEAR
           AND Z.PLAN_CLSFI = A.PLAN_CLSFI
           AND Z.PLANCLASS = A.PLANCLASS
           AND Z.MM = A.MM
           AND Z.INSPT_YN = 'Y'
       ) || '(' ||
       (
        (SELECT COUNT(1)    /* 자재에 등록된 품목 */
           FROM HLDC_PO_ITEM_MST Y
          WHERE Y.USE_YN = 'Y'
            AND EXISTS (
                        SELECT 1
                          FROM LSM_ANNUPLAN_MONTH_DTL X
                         WHERE X.YEAR = A.YEAR
                           AND X.PLAN_CLSFI = A.PLAN_CLSFI
                           AND X.PLANCLASS =  A.PLANCLASS
                           AND X.MM = A.MM
                           AND X.MCALSS_CD = A.MCALSS_CD
                           AND X.MCALSS_CD = Y.FOODCD
                       )) +
        (SELECT COUNT(1)    /* 기타검체유형에 등록된 품목 */
           FROM LCM_ETC_SPECM_TYPE Y
          WHERE 1 = 1
            AND Y.SPECM_CLASS IN ('102')
            AND Y.SPECM_TYPE = '101'
            AND EXISTS (
                        SELECT 1
                          FROM LSM_ANNUPLAN_MONTH_DTL X
                         WHERE X.YEAR = A.YEAR
                           AND X.PLAN_CLSFI = A.PLAN_CLSFI
                           AND X.PLANCLASS =  A.PLANCLASS
                           AND X.MM = A.MM
                           AND X.MCALSS_CD = A.MCALSS_CD
                           AND X.MCALSS_CD = Y.MCALSS_CD
                       ))
       )
       || ')'
       AS TOT_CNT
  FROM LSM_ANNUPLAN_MONTH_DTL A
 WHERE 1 = 1
   AND A.YEAR = :planYear
   AND A.PLAN_CLSFI = :planClsfi
   AND A.PLANCLASS = :planclass
   AND A.MM = :planMonth
   <#if mcalssCdSearch?has_content> AND A.MCALSS_CD = :mcalssCdSearch </#if>
 GROUP BY A.YEAR, A.PLAN_CLSFI, A.PLANCLASS, A.MM, A.MCALSS_CD
        ]]>
    </statement>

    <!-- 월계획 조정 조회 - 화학 검사 수 DATA를 조회한다. -->
    <statement name="selectMicbioCnt" type="select">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.selectMicbioCnt */
        <![CDATA[
/* 월계획 조정 조회 - 화학 검사 수 조회 */
SELECT NVL(X.MM, :planMonth) AS MM
     , NVL(X.TOT_CNT, 0)
       || '(' ||
            (
             SELECT NVL(SUM(COUNT(1)), 0)
               FROM LSM_ANNUPLAN_MONTH_DTL Z
                  , LCM_SPECM_TEST_MAPPING X
                  , LCM_TEST_ARTICLE Y
              WHERE Z.YEAR = :planYear
                AND Z.PLAN_CLSFI = :planClsfi
                AND Z.PLANCLASS = :planclass
                AND Z.INSPT_YN = 'Y'
                AND Z.MICBIO_INSPT_YN = 'Y'
                AND Z.MM = :planMonth
                AND Z.INSPT_MTOD = X.INSPT_PURP
                AND Z.MCALSS_CD = X.MCALSS_CD
                AND X.ARTICLE_CD = Y.ARTICLE_CD
                AND Y.INSPT_FLD = '101'
              GROUP BY X.MCALSS_CD, X.ARTICLE_CD
            )
       || ')'
       AS TOT_CNT
  FROM (
        SELECT A.MM
             , COUNT(1) AS TOT_CNT
          FROM LSM_ANNUPLAN_MONTH_DTL A
         WHERE 1 = 1
           AND A.YEAR = :planYear
           AND A.PLAN_CLSFI = :planClsfi
           AND A.PLANCLASS = :planclass
           AND A.MM = :planMonth
           <#if mcalssCdSearch?has_content> AND A.MCALSS_CD = :mcalssCdSearch </#if>
           AND A.INSPT_YN = 'Y'
           AND A.MICBIO_INSPT_YN = 'Y'
         GROUP BY A.YEAR, A.PLAN_CLSFI, A.PLANCLASS, A.MM
      ) X RIGHT JOIN DUAL ON 1 = 1
        ]]>
    </statement>

    <!-- 월계획 조정 조회 - 생물 검사 수 DATA를 조회한다. -->
    <statement name="selectPhyChemCnt" type="select">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.selectPhyChemCnt */
        <![CDATA[
/* 월계획 조정 조회 - 생물 검사 수 조회 */
SELECT NVL(X.MM, :planMonth) AS MM
     , NVL(X.TOT_CNT, 0)
       || '(' ||
            (
             SELECT NVL(SUM(COUNT(1)), 0)
               FROM LSM_ANNUPLAN_MONTH_DTL Z
                  , LCM_SPECM_TEST_MAPPING X
                  , LCM_TEST_ARTICLE Y
              WHERE Z.YEAR = :planYear
                AND Z.PLAN_CLSFI = :planClsfi
                AND Z.PLANCLASS = :planclass
                AND Z.INSPT_YN = 'Y'
                AND Z.PHYCHEM_INSPT_YN = 'Y'
                AND Z.MM = :planMonth
                AND Z.INSPT_MTOD = X.INSPT_PURP
                AND Z.MCALSS_CD = X.MCALSS_CD
                AND X.ARTICLE_CD = Y.ARTICLE_CD
                AND Y.INSPT_FLD = '102'
              GROUP BY X.MCALSS_CD, X.ARTICLE_CD
            )
       || ')'
       AS TOT_CNT
  FROM (
        SELECT A.MM
             , COUNT(1) AS TOT_CNT
          FROM LSM_ANNUPLAN_MONTH_DTL A
         WHERE 1 = 1
           AND A.YEAR = :planYear
           AND A.PLAN_CLSFI = :planClsfi
           AND A.PLANCLASS = :planclass
           AND A.MM = :planMonth
           <#if mcalssCdSearch?has_content> AND A.MCALSS_CD = :mcalssCdSearch </#if>
           AND A.INSPT_YN = 'Y'
           AND A.PHYCHEM_INSPT_YN = 'Y'
         GROUP BY A.YEAR, A.PLAN_CLSFI, A.PLANCLASS, A.MM
     ) X RIGHT JOIN DUAL ON 1 = 1
        ]]>
    </statement>

    <!-- 자재 목록 DATA를 조회한다. -->
    <statement name="selectItemList" type="select">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.selectItemList */
        <![CDATA[
/* 자재 목록 조회 */
SELECT A.ITEM_CODE AS MATERIAL_CD				/* 자재코드 */
     , A.ITEM_NAME AS MATERIAL_NM			/* 자재명 */
     , A.FOODCD
     , A.MAKER AS CUSTNM   /* 매입처 */
     , ROUND(NVL((SELECT AVG(SUM(C.TRANS_QTY))
                    FROM HLDC_PO_TRANSACTION C
                   WHERE A.ITEM_CODE = C.ITEM_CODE
                     AND C.TRANS_TYPE IN ( 'I001', 'I002' )
                     --AND C.MVT = '101'
                     AND C.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - 3), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                   GROUP BY C.ITEM_CODE
            ), 0), 2) AS TRANS_QTY   /* 최근 3개월 수량 평균 */
     , ROUND(NVL((SELECT SUM(C.UNIT_PRICE)
                    FROM HLDC_PO_TRANSACTION C
                   WHERE A.ITEM_CODE = C.ITEM_CODE
                     AND C.TRANS_TYPE IN ( 'I001', 'I002' )
                     --AND C.MVT = '101'
                     AND C.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - 3), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
            ), 0), 2) AS UNIT_PRICE   /* 매입단가 */
     , ROUND(NVL((SELECT SUM(C.UNIT_AMOUNT)
                    FROM HLDC_PO_TRANSACTION C
                   WHERE A.ITEM_CODE = C.ITEM_CODE
                     AND C.TRANS_TYPE IN ( 'I001', 'I002' )
                     --AND C.MVT = '101'
                     AND C.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - 3), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
            ), 0), 2) AS UNIT_AMOUNT   /* 총매입금액(매입단가*수량) */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.ITEM_CODE
           AND SI.ACCEPTDD BETWEEN :planYear || '0101' AND :planYear || '1231'
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                      )
       ) AS TEST_CNT                /* 당해년도 검사이력 */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.ITEM_CODE
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '101'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS MICBIO_NOT_FIT_QTY                /* 미생물 부적합건수 */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.ITEM_CODE
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '102'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS PHYCHEM_NOT_FIT_QTY                /* 이화학 부적합건수 */
     , (
        SELECT CASE WHEN MAX(X.MICBIO_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.MICBIO_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.MICBIO_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.MICBIO_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.MICBIO_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.FOODCD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS MICBIO_DANGER_GRADE                /* 미생물 위험도 등급 */
     , (
        SELECT CASE WHEN MAX(X.PHYCHEM_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.PHYCHEM_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.PHYCHEM_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.PHYCHEM_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.PHYCHEM_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.FOODCD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS PHYCHEM_DANGER_GRADE              /* 이화학 위험도 등급 */
     , B.INSPT_YN							/* 검사 여부 */
     , B.MICBIO_INSPT_YN					/* 미생물 검사 여부 */
     , B.PHYCHEM_INSPT_YN					/* 이화학 검사 여부 */
     , B.INSPT_MTOD							/* 검사 방법 */
     , (SELECT LISTAGG(T.NOT_FIT_CLSFI_NM||' '||T.NOT_FIT_CNT||'('||X.INSPT_CNT||')건', ',') WITHIN GROUP(ORDER BY T.NOT_FIT_CLSFI_NM)
          FROM (
                SELECT LI.SPECM_CD
                     , COUNT(SPECM_CD) AS INSPT_CNT
                  FROM LRM_SPECM_INFO LI
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                 GROUP BY LI.SPECM_CD
               ) X
             , (
                SELECT LI.SPECM_CD
                     , H.NOT_FIT_CLSFI_NM
                     , COUNT(SPECM_CD) AS NOT_FIT_CNT
                  FROM LRM_SPECM_INFO LI
                     , (
                         SELECT NF.REQ_NUM
                              , NF.ACCEPT_NUM
                              , NF.NOT_FIT_CLSFI_NM
                           FROM (
                                  SELECT /*+ INDEX_FFS(Y) */
                                         Y.REQ_NUM
                                       , Y.ACCEPT_NUM
                                       , SCC_CODE_NM('NOT_FIT_CLSFI', P.NOT_FIT_CLSFI) AS NOT_FIT_CLSFI_NM
                                       , ROW_NUMBER() OVER(PARTITION BY Y.REQ_NUM, Y.ACCEPT_NUM ORDER BY Y.REQ_NUM, Y.ACCEPT_NUM, P.NOT_FIT_CLSFI DESC) AS RN
                                    FROM LTM_TEST_DIARY Y
                                       , LCM_TEST_ARTICLE P
                                   WHERE 1 = 1
                                     AND Y.ARTICLE_CD = P.ARTICLE_CD
                                     AND Y.LAST_DECISION <> '101'
                                ) NF
                          WHERE NF.RN = 1
                       ) H
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                   AND LI.REQ_NUM = H.REQ_NUM
                   AND LI.ACCEPT_NUM = H.ACCEPT_NUM
                   AND LTM_TEST_LAST_DECISION_FUN(LI.REQ_NUM, LI.ACCEPT_NUM) <> '101'
                 GROUP BY LI.SPECM_CD, H.NOT_FIT_CLSFI_NM
               ) T
         WHERE X.SPECM_CD = T.SPECM_CD
           AND X.SPECM_CD = A.ITEM_CODE
       ) AS ITEM_NOT_FIT_HISTORY                 /* 최근 3년치 자재 부적합 이력 */
     , EPROCUSR.FN_ITEM_PROCURE_MTG_UNS('100', A.ITEM_CODE) AS ITEM_UNS  /* 불용자재 여부 */
     , CASE WHEN (
                   SELECT COUNT(1)
                     FROM LSM_ANNUPLAN_MONTH_DTL
                    WHERE YEAR = :planYear
                      AND PLAN_CLSFI = :planClsfi
                      AND PLANCLASS = :planclass
                      AND TO_NUMBER(MM) < TO_NUMBER(:planMonth)
                      AND MCALSS_CD = :mcalssCd
                      AND MATERIAL_CD = A.ITEM_CODE
                      AND INSPT_YN = 'Y'
                 ) > 0 THEN '1'
       ELSE
           '0'
       END PRE_USE_YN   /* 검사예정 자재 */
  FROM HLDC_PO_ITEM_MST A
     , (
         SELECT MATERIAL_CD
              , INSPT_YN							/* 검사 여부 */
              , MICBIO_INSPT_YN					/* 미생물 검사 여부 */
              , PHYCHEM_INSPT_YN					/* 이화학 검사 여부 */
              , INSPT_MTOD
            FROM LSM_ANNUPLAN_MONTH_DTL
           WHERE YEAR = :planYear
             AND PLAN_CLSFI = :planClsfi
             AND PLANCLASS = :planclass
             AND MM = :planMonth
             AND MCALSS_CD = :mcalssCd
       ) B
 WHERE A.ITEM_CLASS1 = 'F'
   --AND A.FOOD_CLS = :specmType
   AND A.FOODCD = :mcalssCd
   AND A.ITEM_CODE = B.MATERIAL_CD(+)
   AND A.USE_YN = 'Y'
UNION ALL
SELECT A.SPECM_CD AS MATERIAL_CD               /* 자재코드 */
     , A.SPECM_NM AS MATERIAL_NM           /* 자재명 */
     , A.MCALSS_CD
     , A.MFGWON AS CUSTNM   /* 매입처 */
     , 0 AS TRANS_QTY   /* 수량 */
     , 0 AS UNIT_PRICE   /* 매입단가 */
     , 0 AS UNIT_AMOUNT   /* 총매입금액(매입단가*수량) */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.SPECM_CD
           AND SI.ACCEPTDD BETWEEN :planYear || '0101' AND :planYear || '1231'
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                      )
       ) AS TEST_CNT                /* 당해년도 검사이력 */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.SPECM_CD
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '101'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS MICBIO_NOT_FIT_QTY                /* 미생물 부적합건수 */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.SPECM_CD
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '102'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS PHYCHEM_NOT_FIT_QTY                /* 이화학 부적합건수 */
     , (
        SELECT CASE WHEN MAX(X.MICBIO_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.MICBIO_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.MICBIO_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.MICBIO_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.MICBIO_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.MCALSS_CD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS MICBIO_DANGER_GRADE                /* 미생물 위험도 등급 */
     , (
        SELECT CASE WHEN MAX(X.PHYCHEM_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.PHYCHEM_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.PHYCHEM_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.PHYCHEM_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.PHYCHEM_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.MCALSS_CD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS PHYCHEM_DANGER_GRADE              /* 이화학 위험도 등급 */
     , B.INSPT_YN                           /* 검사 여부 */
     , B.MICBIO_INSPT_YN                    /* 미생물 검사 여부 */
     , B.PHYCHEM_INSPT_YN                   /* 이화학 검사 여부 */
     , B.INSPT_MTOD                         /* 검사 방법 */
     , (SELECT LISTAGG(T.NOT_FIT_CLSFI_NM||' '||T.NOT_FIT_CNT||'('||X.INSPT_CNT||')건', ',') WITHIN GROUP(ORDER BY T.NOT_FIT_CLSFI_NM)
          FROM (
                SELECT LI.SPECM_CD
                     , COUNT(SPECM_CD) AS INSPT_CNT
                  FROM LRM_SPECM_INFO LI
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                 GROUP BY LI.SPECM_CD
               ) X
             , (
                SELECT LI.SPECM_CD
                     , H.NOT_FIT_CLSFI_NM
                     , COUNT(SPECM_CD) AS NOT_FIT_CNT
                  FROM LRM_SPECM_INFO LI
                     , (
                         SELECT NF.REQ_NUM
                              , NF.ACCEPT_NUM
                              , NF.NOT_FIT_CLSFI_NM
                           FROM (
                                  SELECT /*+ INDEX_FFS(Y) */
                                         Y.REQ_NUM
                                       , Y.ACCEPT_NUM
                                       , SCC_CODE_NM('NOT_FIT_CLSFI', P.NOT_FIT_CLSFI) AS NOT_FIT_CLSFI_NM
                                       , ROW_NUMBER() OVER(PARTITION BY Y.REQ_NUM, Y.ACCEPT_NUM ORDER BY Y.REQ_NUM, Y.ACCEPT_NUM, P.NOT_FIT_CLSFI DESC) AS RN
                                    FROM LTM_TEST_DIARY Y
                                       , LCM_TEST_ARTICLE P
                                   WHERE 1 = 1
                                     AND Y.ARTICLE_CD = P.ARTICLE_CD
                                     AND Y.LAST_DECISION <> '101'
                                ) NF
                          WHERE NF.RN = 1
                       ) H
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                   AND LI.REQ_NUM = H.REQ_NUM
                   AND LI.ACCEPT_NUM = H.ACCEPT_NUM
                   AND LTM_TEST_LAST_DECISION_FUN(LI.REQ_NUM, LI.ACCEPT_NUM) <> '101'
                 GROUP BY LI.SPECM_CD, H.NOT_FIT_CLSFI_NM
               ) T
         WHERE X.SPECM_CD = T.SPECM_CD
           AND X.SPECM_CD = A.SPECM_CD
       ) AS ITEM_NOT_FIT_HISTORY                 /* 자재 부적합 이력 */
     , <#if specmType=='101'>EPROCUSR.FN_ITEM_PROCURE_MTG_UNS('100', A.SPECM_CD)<#else>'UP'</#if> AS ITEM_UNS /* 불용자재 여부 */
     , CASE WHEN (
                   SELECT COUNT(1)
                     FROM LSM_ANNUPLAN_MONTH_DTL
                    WHERE YEAR = :planYear
                      AND PLAN_CLSFI = :planClsfi
                      AND PLANCLASS = :planclass
                      AND TO_NUMBER(MM) < TO_NUMBER(:planMonth)
                      AND MCALSS_CD = :mcalssCd
                      AND MATERIAL_CD = A.SPECM_CD
                      AND INSPT_YN = 'Y'
                 ) > 0 THEN '1'
       ELSE
           '0'
       END PRE_USE_YN   /* 검사예정 자재 */
  FROM LCM_ETC_SPECM_TYPE A
     , (
         SELECT MCALSS_CD
              , MATERIAL_CD
              , INSPT_YN                            /* 검사 여부 */
              , MICBIO_INSPT_YN                 /* 미생물 검사 여부 */
              , PHYCHEM_INSPT_YN                    /* 이화학 검사 여부 */
              , INSPT_MTOD
           FROM LSM_ANNUPLAN_MONTH_DTL
          WHERE YEAR = :planYear
            AND PLAN_CLSFI = :planClsfi
            AND PLANCLASS = :planclass
            AND MM = :planMonth
            AND MCALSS_CD = :mcalssCd
       ) B
 WHERE 1 = 1
   AND A.SPECM_CD = B.MATERIAL_CD(+)
   AND A.MCALSS_CD = :mcalssCd
   AND A.SPECM_CLASS IN ('102')
   AND A.SPECM_TYPE = :specmType
 ORDER BY 5 DESC, 1
        ]]>
    </statement>

    <!-- 자재 목록 위생_기타 DATA를 조회한다. -->
    <statement name="selectEtcItemList" type="select">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.selectEtcItemList */
        <![CDATA[
/* 자재 목록(위생_기타) 조회 */
SELECT A.SPECM_CD AS MATERIAL_CD           /* 자재코드 */
     , A.SPECM_NM AS MATERIAL_NM       /* 자재명 */
     , A.SPECM_TYPE
     , A.MCALSS_CD
     , A.MFGWON AS CUSTNM   /* 매입처 */
     , 0 AS TRANS_QTY   /* 수량 */
     , 0 AS UNIT_PRICE   /* 매입단가 */
     , 0 AS UNIT_AMOUNT   /* 총매입금액(매입단가*수량) */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.SPECM_CD
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '101'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS MICBIO_NOT_FIT_QTY                /* 미생물 부적합건수 */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.SPECM_CD
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '102'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS PHYCHEM_NOT_FIT_QTY                /* 이화학 부적합건수 */
     , (
        SELECT CASE WHEN MAX(X.MICBIO_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.MICBIO_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.MICBIO_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.MICBIO_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.MICBIO_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.MCALSS_CD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS MICBIO_DANGER_GRADE                /* 미생물 위험도 등급 */
     , (
        SELECT CASE WHEN MAX(X.PHYCHEM_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.PHYCHEM_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.PHYCHEM_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.PHYCHEM_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.PHYCHEM_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.MCALSS_CD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS PHYCHEM_DANGER_GRADE              /* 이화학 위험도 등급 */
     , B.INSPT_YN                           /* 검사 여부 */
     , B.MICBIO_INSPT_YN                    /* 미생물 검사 여부 */
     , B.PHYCHEM_INSPT_YN                   /* 이화학 검사 여부 */
     , B.INSPT_MTOD                         /* 검사 방법 */
     , (SELECT LISTAGG(T.NOT_FIT_CLSFI_NM||' '||T.NOT_FIT_CNT||'('||X.INSPT_CNT||')건', ',') WITHIN GROUP(ORDER BY T.NOT_FIT_CLSFI_NM)
          FROM (
                SELECT LI.SPECM_CD
                     , COUNT(SPECM_CD) AS INSPT_CNT
                  FROM LRM_SPECM_INFO LI
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                 GROUP BY LI.SPECM_CD
               ) X
             , (
                SELECT LI.SPECM_CD
                     , H.NOT_FIT_CLSFI_NM
                     , COUNT(SPECM_CD) AS NOT_FIT_CNT
                  FROM LRM_SPECM_INFO LI
                     , (
                         SELECT NF.REQ_NUM
                              , NF.ACCEPT_NUM
                              , NF.NOT_FIT_CLSFI_NM
                           FROM (
                                  SELECT /*+ INDEX_FFS(Y) */
                                         Y.REQ_NUM
                                       , Y.ACCEPT_NUM
                                       , SCC_CODE_NM('NOT_FIT_CLSFI', P.NOT_FIT_CLSFI) AS NOT_FIT_CLSFI_NM
                                       , ROW_NUMBER() OVER(PARTITION BY Y.REQ_NUM, Y.ACCEPT_NUM ORDER BY Y.REQ_NUM, Y.ACCEPT_NUM, P.NOT_FIT_CLSFI DESC) AS RN
                                    FROM LTM_TEST_DIARY Y
                                       , LCM_TEST_ARTICLE P
                                   WHERE 1 = 1
                                     AND Y.ARTICLE_CD = P.ARTICLE_CD
                                     AND Y.LAST_DECISION <> '101'
                                ) NF
                          WHERE NF.RN = 1
                       ) H
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                   AND LI.REQ_NUM = H.REQ_NUM
                   AND LI.ACCEPT_NUM = H.ACCEPT_NUM
                   AND LTM_TEST_LAST_DECISION_FUN(LI.REQ_NUM, LI.ACCEPT_NUM) <> '101'
                 GROUP BY LI.SPECM_CD, H.NOT_FIT_CLSFI_NM
               ) T
         WHERE X.SPECM_CD = T.SPECM_CD
           AND X.SPECM_CD = A.SPECM_CD
       ) AS ITEM_NOT_FIT_HISTORY                 /* 자재 부적합 이력 */
     , 'UP' AS ITEM_UNS /* 불용자재여부 */
     , CASE WHEN (
                   SELECT COUNT(1)
                     FROM LSM_ANNUPLAN_MONTH_DTL
                    WHERE YEAR = :planYear
                      AND PLAN_CLSFI = :planClsfi
                      AND PLANCLASS = :planclass
                      AND TO_NUMBER(MM) < TO_NUMBER(:planMonth)
                      AND MCALSS_CD = :mcalssCd
                      AND MATERIAL_CD = A.SPECM_CD
                      AND INSPT_YN = 'Y'
                 ) > 0 THEN '1'
       ELSE
           '0'
       END PRE_USE_YN   /* 검사예정 자재 */
  FROM LCM_ETC_SPECM_TYPE A
     , (
         SELECT MATERIAL_CD
              , INSPT_YN                            /* 검사 여부 */
              , MICBIO_INSPT_YN                 /* 미생물 검사 여부 */
              , PHYCHEM_INSPT_YN                    /* 이화학 검사 여부 */
              , INSPT_MTOD
            FROM LSM_ANNUPLAN_MONTH_DTL
           WHERE YEAR = :planYear
             AND PLAN_CLSFI = :planClsfi
             AND PLANCLASS = :planclass
             AND MM = :planMonth
             AND MCALSS_CD = :mcalssCd
       ) B
 WHERE 1 = 1
   AND A.MCALSS_CD = :mcalssCd
   AND A.SPECM_CLASS = '103'
   AND A.SPECM_CD = B.MATERIAL_CD(+)

 ORDER BY 5 DESC, 1
        ]]>
    </statement>

    <!-- 월계획 조정 Master 생성한다. -->
    <statement name="insertMstList" type="insert">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.insertMstList */
        <![CDATA[
/* 월계획 조정 Master 생성 */
MERGE INTO LSM_ANNUPLAN_MONTH_MST
USING DUAL
ON (
    YEAR = :planYear
    AND PLAN_CLSFI = :planClsfi
    AND PLANCLASS = :planclass
    AND MM = :planMonth
    AND MCALSS_CD = :mcalssCd
)
WHEN NOT MATCHED THEN
    INSERT
    (
     YEAR,
     PLAN_CLSFI,
     PLANCLASS,
     MM,
     SPECM_TYPE,
     MGRP_CD,
     MCALSS_CD,
     CUSER,
     CDATE,
     UUSER,
     UDATE
    ) VALUES (
     :planYear,
     :planClsfi,
     :planclass,
     :planMonth,
    <#if specmType?exists> :specmType, <#else> null, </#if>
    <#if mgrpCd?exists> :mgrpCd, <#else> null, </#if>
    <#if mcalssCd?exists> :mcalssCd, <#else> null, </#if>
     :loginSabun,
     SYSDATE,
     :loginSabun,
     SYSDATE
    )
        ]]>
    </statement>

    <!-- 월계획 조정 Master 삭제한다. -->
    <statement name="deleteMstList" type="delete">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.deleteMstList */
        <![CDATA[
/* 월계획 조정 Master 삭제 */
DELETE
FROM   LSM_ANNUPLAN_MONTH_MST
WHERE  YEAR = :planYear
AND    PLAN_CLSFI = :planClsfi
AND    PLANCLASS = :planclass
AND    MM = :planMonth
AND    MCALSS_CD = :mcalssCd
        ]]>
    </statement>

    <!-- 월계획 조정 Detail 생성/수정 한다. -->
    <statement name="updateDtlList" type="update">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.deleteMstList */
        <![CDATA[
/* 월계획 조정 Detail 생성/수정 */
MERGE INTO LSM_ANNUPLAN_MONTH_DTL
USING DUAL
ON (
    YEAR = :planYear
    AND PLAN_CLSFI = :planClsfi
    AND PLANCLASS = :planclass
    AND MM = :planMonth
    AND MCALSS_CD = :mcalssCd
    AND MATERIAL_CD = :materialCd
)
WHEN MATCHED THEN
  UPDATE SET
    <#if materialNm?exists> MATERIAL_NM = :materialNm, </#if>
    <#if micbioNotFitQty?exists> MICBIO_NOT_FIT_QTY = :micbioNotFitQty, </#if>
    <#if phychemNotFitQty?exists> PHYCHEM_NOT_FIT_QTY = :phychemNotFitQty, </#if>
    <#if micbioDangerGrade?exists> MICBIO_DANGER_GRADE = :micbioDangerGrade, </#if>
    <#if phychemDangerGrade?exists> PHYCHEM_DANGER_GRADE = :phychemDangerGrade, </#if>
    <#if insptYn?exists> INSPT_YN = :insptYn, </#if>
    <#if micbioInsptYn?exists> MICBIO_INSPT_YN = :micbioInsptYn, </#if>
    <#if phychemInsptYn?exists> PHYCHEM_INSPT_YN = :phychemInsptYn, </#if>
    <#if insptMtod?exists> INSPT_MTOD = :insptMtod, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHEN NOT MATCHED THEN
    INSERT (
         YEAR,
         PLAN_CLSFI,
         PLANCLASS,
         MM,
         MCALSS_CD,
         MATERIAL_CD,
         MATERIAL_NM,
         MICBIO_NOT_FIT_QTY,
         PHYCHEM_NOT_FIT_QTY,
         MICBIO_DANGER_GRADE,
         PHYCHEM_DANGER_GRADE,
         INSPT_YN,
         MICBIO_INSPT_YN,
         PHYCHEM_INSPT_YN,
         INSPT_MTOD,
         CUSER,
         CDATE,
         UUSER,
         UDATE
    ) VALUES (
         :planYear,
         :planClsfi,
         :planclass,
         :planMonth,
         :mcalssCd,
         :materialCd,
        <#if materialNm?exists> :materialNm, <#else> null, </#if>
        <#if micbioNotFitQty?exists> :micbioNotFitQty, <#else> null, </#if>
        <#if phychemNotFitQty?exists> :phychemNotFitQty, <#else> null, </#if>
        <#if micbioDangerGrade?exists> :micbioDangerGrade, <#else> null, </#if>
        <#if phychemDangerGrade?exists> :phychemDangerGrade, <#else> null, </#if>
        <#if insptYn?exists> :insptYn, <#else> null, </#if>
        <#if micbioInsptYn?exists> :micbioInsptYn, <#else> null, </#if>
        <#if phychemInsptYn?exists> :phychemInsptYn, <#else> null, </#if>
        <#if insptMtod?exists> :insptMtod, <#else> null, </#if>
         :loginSabun,
         SYSDATE,
         :loginSabun,
         SYSDATE
    )
        ]]>
    </statement>

    <!-- 월계획 조정 Detail 삭제한다. -->
    <statement name="deleteDtlList" type="delete">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.deleteDtlList */
        <![CDATA[
/* 월계획 조정 Detail 삭제 */
DELETE
FROM   LSM_ANNUPLAN_MONTH_DTL
WHERE  YEAR = :planYear
AND    PLAN_CLSFI = :planClsfi
AND    PLANCLASS = :planclass
AND    MM = :planMonth
AND    MCALSS_CD = :mcalssCd
        ]]>
    </statement>

    <!-- 월계획 조정 세부 내역를 조회한다. -->
    <statement name="selectItemDtlList" type="select">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.selectItemDtlList */
        <![CDATA[
/* 월계획 조정 세부 내역 조회 */
SELECT SCC_CODE_NM('SPECM_TYPE', (
                                  SELECT U.SPECM_TYPE
                                    FROM LCM_SPECM_TYPE_MCALSS U
                                   WHERE U.MCALSS_CD = B.MCALSS_CD
                                 )
       ) AS SPECM_TYPE_NM
     , (SELECT P.MGRP_NM
          FROM LCM_SPECM_TYPE_MGRP P
         WHERE P.MGRP_CD = (
                            SELECT U.MGRP_CD
                              FROM LCM_SPECM_TYPE_MCALSS U
                             WHERE U.MCALSS_CD = B.MCALSS_CD
                           )
       ) AS MGRP_NM
     , (SELECT U.MCALSS_NM
          FROM LCM_SPECM_TYPE_MCALSS U
         WHERE U.MCALSS_CD = B.MCALSS_CD
       ) AS MCALSS_NM
     , A.ITEM_CODE AS MATERIAL_CD               /* 자재코드 */
     , A.ITEM_NAME AS MATERIAL_NM           /* 자재명 */
     , A.FOODCD
     , A.MAKER AS CUSTNM   /* 매입처 */
     , ROUND(NVL((SELECT AVG(SUM(C.TRANS_QTY))
                   FROM HLDC_PO_TRANSACTION C
                  WHERE A.ITEM_CODE = C.ITEM_CODE
                    AND C.TRANS_TYPE IN ( 'I001', 'I002' )
                    --AND C.MVT = '101'
                    AND C.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - 3), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                  GROUP BY C.ITEM_CODE
            ), 0), 2) AS TRANS_QTY   /* 수량 */
     , ROUND(NVL((SELECT SUM(C.UNIT_PRICE)
                    FROM HLDC_PO_TRANSACTION C
                   WHERE A.ITEM_CODE = C.ITEM_CODE
                     AND C.TRANS_TYPE IN ( 'I001', 'I002' )
                     --AND C.MVT = '101'
                     AND C.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - 3), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
            ), 0), 2) AS UNIT_PRICE   /* 매입단가 */
     , ROUND(NVL((SELECT SUM(C.UNIT_AMOUNT)
                    FROM HLDC_PO_TRANSACTION C
                   WHERE A.ITEM_CODE = C.ITEM_CODE
                     AND C.TRANS_TYPE IN ( 'I001', 'I002' )
                     --AND C.MVT = '101'
                     AND C.TRANS_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - 3), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
            ), 0), 2) AS UNIT_AMOUNT   /* 총매입금액(매입단가*수량) */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.ITEM_CODE
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '101'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS MICBIO_NOT_FIT_QTY                /* 미생물 부적합건수 */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.ITEM_CODE
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '102'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS PHYCHEM_NOT_FIT_QTY                /* 이화학 부적합건수 */
     , (
        SELECT CASE WHEN MAX(X.MICBIO_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.MICBIO_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.MICBIO_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.MICBIO_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.MICBIO_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.FOODCD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS MICBIO_DANGER_GRADE                /* 미생물 위험도 등급 */
     , (
        SELECT CASE WHEN MAX(X.PHYCHEM_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.PHYCHEM_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.PHYCHEM_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.PHYCHEM_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.PHYCHEM_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.FOODCD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS PHYCHEM_DANGER_GRADE              /* 이화학 위험도 등급 */
     , B.INSPT_YN                           /* 검사 여부 */
     , B.MICBIO_INSPT_YN                    /* 미생물 검사 여부 */
     , B.PHYCHEM_INSPT_YN                   /* 이화학 검사 여부 */
     , SCC_CODE_NM('INSPT_MTOD', B.INSPT_MTOD) AS INSPT_MTOD                         /* 검사 방법 */
     , (SELECT LISTAGG(T.NOT_FIT_CLSFI_NM||' '||T.NOT_FIT_CNT||'('||X.INSPT_CNT||')건', ',') WITHIN GROUP(ORDER BY T.NOT_FIT_CLSFI_NM)
          FROM (
                SELECT LI.SPECM_CD
                     , COUNT(SPECM_CD) AS INSPT_CNT
                  FROM LRM_SPECM_INFO LI
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                 GROUP BY LI.SPECM_CD
               ) X
             , (
                SELECT LI.SPECM_CD
                     , H.NOT_FIT_CLSFI_NM
                     , COUNT(SPECM_CD) AS NOT_FIT_CNT
                  FROM LRM_SPECM_INFO LI
                     , (
                         SELECT NF.REQ_NUM
                              , NF.ACCEPT_NUM
                              , NF.NOT_FIT_CLSFI_NM
                           FROM (
                                  SELECT /*+ INDEX_FFS(Y) */
                                         Y.REQ_NUM
                                       , Y.ACCEPT_NUM
                                       , SCC_CODE_NM('NOT_FIT_CLSFI', P.NOT_FIT_CLSFI) AS NOT_FIT_CLSFI_NM
                                       , ROW_NUMBER() OVER(PARTITION BY Y.REQ_NUM, Y.ACCEPT_NUM ORDER BY Y.REQ_NUM, Y.ACCEPT_NUM, P.NOT_FIT_CLSFI DESC) AS RN
                                    FROM LTM_TEST_DIARY Y
                                       , LCM_TEST_ARTICLE P
                                   WHERE 1 = 1
                                     AND Y.ARTICLE_CD = P.ARTICLE_CD
                                     AND Y.LAST_DECISION <> '101'
                                ) NF
                          WHERE NF.RN = 1
                       ) H
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                   AND LI.REQ_NUM = H.REQ_NUM
                   AND LI.ACCEPT_NUM = H.ACCEPT_NUM
                   AND LTM_TEST_LAST_DECISION_FUN(LI.REQ_NUM, LI.ACCEPT_NUM) <> '101'
                 GROUP BY LI.SPECM_CD, H.NOT_FIT_CLSFI_NM
               ) T
         WHERE X.SPECM_CD = T.SPECM_CD
           AND X.SPECM_CD = A.ITEM_CODE
       ) AS ITEM_NOT_FIT_HISTORY                 /* 자재 부적합 이력 */
     , EPROCUSR.FN_ITEM_PROCURE_MTG_UNS('100', A.ITEM_CODE) AS ITEM_UNS  /* 불용자재 여부 */
     , CASE WHEN (
                   SELECT COUNT(1)
                     FROM LSM_ANNUPLAN_MONTH_DTL
                    WHERE YEAR = :planYear
                      AND PLAN_CLSFI = :planClsfi
                      AND PLANCLASS = :planclass
                      AND TO_NUMBER(MM) < TO_NUMBER(:planMonth)
                      AND MATERIAL_CD = A.ITEM_CODE
                      AND INSPT_YN = 'Y'
                 ) > 0 THEN '1'
       ELSE
           '0'
       END PRE_USE_YN   /* 검사예정 자재 */
  FROM HLDC_PO_ITEM_MST A
     , (
         SELECT MCALSS_CD
              , MATERIAL_CD
              , INSPT_YN                            /* 검사 여부 */
              , MICBIO_INSPT_YN                 /* 미생물 검사 여부 */
              , PHYCHEM_INSPT_YN                    /* 이화학 검사 여부 */
              , INSPT_MTOD
            FROM LSM_ANNUPLAN_MONTH_DTL
           WHERE YEAR = :planYear
             AND PLAN_CLSFI = :planClsfi
             AND PLANCLASS = :planclass
             AND MM = TO_NUMBER(:planMonth)
       ) B
 WHERE A.ITEM_CLASS1 = 'F'
   AND A.ITEM_CODE = B.MATERIAL_CD
   AND A.USE_YN = 'Y'
UNION ALL
SELECT SCC_CODE_NM('SPECM_TYPE', (
                                  SELECT U.SPECM_TYPE
                                    FROM LCM_SPECM_TYPE_MCALSS U
                                   WHERE U.MCALSS_CD = B.MCALSS_CD
                                 )
       ) AS SPECM_TYPE_NM
     , (SELECT P.MGRP_NM
          FROM LCM_SPECM_TYPE_MGRP P
         WHERE P.MGRP_CD = (
                            SELECT U.MGRP_CD
                              FROM LCM_SPECM_TYPE_MCALSS U
                             WHERE U.MCALSS_CD = B.MCALSS_CD
                           )
       ) AS MGRP_NM
     , (SELECT U.MCALSS_NM
          FROM LCM_SPECM_TYPE_MCALSS U
         WHERE U.MCALSS_CD = B.MCALSS_CD
       ) AS MCALSS_NM
     , A.SPECM_CD AS MATERIAL_CD               /* 자재코드 */
     , A.SPECM_NM AS MATERIAL_NM           /* 자재명 */
     , A.MCALSS_CD
     , A.MFGWON AS CUSTNM   /* 매입처 */
     , 0 AS TRANS_QTY   /* 수량 */
     , 0 AS UNIT_PRICE   /* 매입단가 */
     , 0 AS UNIT_AMOUNT   /* 총매입금액(매입단가*수량) */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.SPECM_CD
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '101'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS MICBIO_NOT_FIT_QTY                /* 미생물 부적합건수 */
     , (
        SELECT COUNT(1)
          FROM LRM_SPECM_INFO SI
         WHERE SI.SPECM_CD = A.SPECM_CD
           AND EXISTS (
                        SELECT 1
                          FROM LRM_TEST_INFO TI
                             , LTM_TEST_DIARY TD
                         WHERE SI.REQ_NUM = TI.REQ_NUM
                           AND SI.ACCEPT_NUM = TI.ACCEPT_NUM
                           AND SI.REQ_NUM = TD.REQ_NUM
                           AND SI.ACCEPT_NUM = TD.ACCEPT_NUM
                           AND TI.ARTICLE_CD = TD.ARTICLE_CD
                           AND TI.INSPT_FLD = '102'
                           AND TD.LAST_DECISION NOT IN ('101')
                      )
       ) AS PHYCHEM_NOT_FIT_QTY                /* 이화학 부적합건수 */
     , (
        SELECT CASE WHEN MAX(X.MICBIO_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.MICBIO_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.MICBIO_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.MICBIO_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.MICBIO_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.MCALSS_CD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS MICBIO_DANGER_GRADE                /* 미생물 위험도 등급 */
     , (
        SELECT CASE WHEN MAX(X.PHYCHEM_1_GRADE) = 'Y' THEN '1'
                    WHEN MAX(X.PHYCHEM_2_GRADE) = 'Y' THEN '2'
                    WHEN MAX(X.PHYCHEM_3_GRADE) = 'Y' THEN '3'
                    WHEN MAX(X.PHYCHEM_4_GRADE) = 'Y' THEN '4'
                    WHEN MAX(X.PHYCHEM_5_GRADE) = 'Y' THEN '5'
               END
          FROM LCM_SPECM_DANGER_MAPPING X
             , LCM_SPECM_TYPE_MCALSS Y
         WHERE X.MCALSS_CD = A.MCALSS_CD
           AND X.SPECM_TYPE = Y.SPECM_TYPE
           AND X.MGRP_CD = Y.MGRP_CD
           AND X.MCALSS_CD = Y.MCALSS_CD
           AND Y.USE_YN = 'Y'
       )
       AS PHYCHEM_DANGER_GRADE              /* 이화학 위험도 등급 */
     , B.INSPT_YN                           /* 검사 여부 */
     , B.MICBIO_INSPT_YN                    /* 미생물 검사 여부 */
     , B.PHYCHEM_INSPT_YN                   /* 이화학 검사 여부 */
     , SCC_CODE_NM('INSPT_MTOD', B.INSPT_MTOD) AS INSPT_MTOD                         /* 검사 방법 */
     , (SELECT LISTAGG(T.NOT_FIT_CLSFI_NM||' '||T.NOT_FIT_CNT||'('||X.INSPT_CNT||')건', ',') WITHIN GROUP(ORDER BY T.NOT_FIT_CLSFI_NM)
          FROM (
                SELECT LI.SPECM_CD
                     , COUNT(SPECM_CD) AS INSPT_CNT
                  FROM LRM_SPECM_INFO LI
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                 GROUP BY LI.SPECM_CD
               ) X
             , (
                SELECT LI.SPECM_CD
                     , H.NOT_FIT_CLSFI_NM
                     , COUNT(SPECM_CD) AS NOT_FIT_CNT
                  FROM LRM_SPECM_INFO LI
                     , (
                         SELECT NF.REQ_NUM
                              , NF.ACCEPT_NUM
                              , NF.NOT_FIT_CLSFI_NM
                           FROM (
                                  SELECT /*+ INDEX_FFS(Y) */
                                         Y.REQ_NUM
                                       , Y.ACCEPT_NUM
                                       , SCC_CODE_NM('NOT_FIT_CLSFI', P.NOT_FIT_CLSFI) AS NOT_FIT_CLSFI_NM
                                       , ROW_NUMBER() OVER(PARTITION BY Y.REQ_NUM, Y.ACCEPT_NUM ORDER BY Y.REQ_NUM, Y.ACCEPT_NUM, P.NOT_FIT_CLSFI DESC) AS RN
                                    FROM LTM_TEST_DIARY Y
                                       , LCM_TEST_ARTICLE P
                                   WHERE 1 = 1
                                     AND Y.ARTICLE_CD = P.ARTICLE_CD
                                     AND Y.LAST_DECISION <> '101'
                                ) NF
                          WHERE NF.RN = 1
                       ) H
                 WHERE LI.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
                   AND LI.REQ_NUM = H.REQ_NUM
                   AND LI.ACCEPT_NUM = H.ACCEPT_NUM
                   AND LTM_TEST_LAST_DECISION_FUN(LI.REQ_NUM, LI.ACCEPT_NUM) <> '101'
                 GROUP BY LI.SPECM_CD, H.NOT_FIT_CLSFI_NM
               ) T
         WHERE X.SPECM_CD = T.SPECM_CD
           AND X.SPECM_CD = A.SPECM_CD
       ) AS ITEM_NOT_FIT_HISTORY                 /* 자재 부적합 이력 */
     , 'UP' AS ITEM_UNS  /* 불용자재 여부 */
     , CASE WHEN (
                   SELECT COUNT(1)
                     FROM LSM_ANNUPLAN_MONTH_DTL
                    WHERE YEAR = :planYear
                      AND PLAN_CLSFI = :planClsfi
                      AND PLANCLASS = :planclass
                      AND TO_NUMBER(MM) < TO_NUMBER(:planMonth)
                      AND MATERIAL_CD = A.SPECM_CD
                      AND INSPT_YN = 'Y'
                 ) > 0 THEN '1'
       ELSE
           '0'
       END PRE_USE_YN   /* 검사예정 자재 */
  FROM LCM_ETC_SPECM_TYPE A
     , (
         SELECT MCALSS_CD
              , MATERIAL_CD
              , INSPT_YN                            /* 검사 여부 */
              , MICBIO_INSPT_YN                 /* 미생물 검사 여부 */
              , PHYCHEM_INSPT_YN                    /* 이화학 검사 여부 */
              , INSPT_MTOD
            FROM LSM_ANNUPLAN_MONTH_DTL
           WHERE YEAR = :planYear
             AND PLAN_CLSFI = :planClsfi
             AND PLANCLASS = :planclass
             AND MM = TO_NUMBER(SUBSTR(:yymm, 5, 2))
       ) B
 WHERE 1 = 1
   AND A.SPECM_CD = B.MATERIAL_CD
   AND A.SPECM_CLASS IN ('102', '103')
 ORDER BY 1, 2, 3, 4
        ]]>
    </statement>

    <!-- 년간계획 월계획 Master를 복사한다. -->
    <statement name="saveYearPlanMstMigration" type="insert">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.saveYearPlanMstMigration */
        <![CDATA[
/* 년간계획 월계획 Master를 복사 */
MERGE INTO LSM_ANNUPLAN_MONTH_MST A
USING (
    SELECT YEAR
         , PLAN_CLSFI
         , PLANCLASS
         , MM
         , MCALSS_CD
         , SPECM_TYPE
         , MGRP_CD
      FROM LSM_ANNUPLAN_MST
     WHERE YEAR = :planYear
       AND PLAN_CLSFI = :planClsfi
       AND PLANCLASS = :planclass
       AND MM = :planMonth
) B
ON (
    A.YEAR = :planYear
    AND A.PLAN_CLSFI = :planClsfi
    AND A.PLANCLASS = :planclass
    AND A.MM = :planMonth
    AND A.YEAR = B.YEAR
    AND A.PLAN_CLSFI = B.PLAN_CLSFI
    AND A.PLANCLASS = B.PLANCLASS
    AND A.MM = B.MM
    AND A.MCALSS_CD = B.MCALSS_CD
)
--WHEN MATCHED THEN
--    UPDATE SET
--         SPECM_TYPE = SPECM_TYPE
--       , MGRP_CD = B.MGRP_CD
--       , UUSER = :loginSabun
--       , UDATE = SYSDATE
WHEN NOT MATCHED THEN
    INSERT
    (
     YEAR,
     PLAN_CLSFI,
     PLANCLASS,
     MM,
     MCALSS_CD,
     SPECM_TYPE,
     MGRP_CD,
     CUSER,
     CDATE,
     UUSER,
     UDATE
    ) VALUES (
     B.YEAR,
     B.PLAN_CLSFI,
     B.PLANCLASS,
     B.MM,
     B.MCALSS_CD,
     B.SPECM_TYPE,
     B.MGRP_CD,
     :loginSabun,
     SYSDATE,
     :loginSabun,
     SYSDATE
    )
        ]]>
    </statement>

    <!-- 년간계획 월계획 Detail을 복사한다. -->
    <statement name="saveYearPlanDtlMigration" type="insert">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.saveYearPlanDtlMigration */
        <![CDATA[
/* 년간계획 월계획 Detail을 복사 */
MERGE INTO LSM_ANNUPLAN_MONTH_DTL A
USING (
    SELECT YEAR
         , PLAN_CLSFI
         , PLANCLASS
         , MM
         , MCALSS_CD
         , MATERIAL_CD
         , MATERIAL_NM
         , MICBIO_NOT_FIT_QTY
         , PHYCHEM_NOT_FIT_QTY
         , MICBIO_DANGER_GRADE
         , PHYCHEM_DANGER_GRADE
         , INSPT_YN
         , MICBIO_INSPT_YN
         , PHYCHEM_INSPT_YN
         , INSPT_MTOD
      FROM LSM_ANNUPLAN_DTL
     WHERE YEAR = :planYear
       AND PLAN_CLSFI = :planClsfi
       AND PLANCLASS = :planclass
       AND MM = :planMonth
) B
ON (
    A.YEAR = :planYear
    AND A.PLAN_CLSFI = :planClsfi
    AND A.PLANCLASS = :planclass
    AND A.MM = :planMonth
    AND A.YEAR = B.YEAR
    AND A.PLAN_CLSFI = B.PLAN_CLSFI
    AND A.PLANCLASS = B.PLANCLASS
    AND A.MM = B.MM
    AND A.MCALSS_CD = B.MCALSS_CD
    AND A.MATERIAL_CD = B.MATERIAL_CD
)
--WHEN MATCHED THEN
--    UPDATE SET
--         MATERIAL_NM          = B.MATERIAL_NM
--       , MICBIO_NOT_FIT_QTY   = B.MICBIO_NOT_FIT_QTY
--       , PHYCHEM_NOT_FIT_QTY  = B.PHYCHEM_NOT_FIT_QTY
--       , MICBIO_DANGER_GRADE  = B.MICBIO_DANGER_GRADE
--       , PHYCHEM_DANGER_GRADE = B.PHYCHEM_DANGER_GRADE
--       , INSPT_YN             = B.INSPT_YN
--       , MICBIO_INSPT_YN      = B.MICBIO_INSPT_YN
--       , PHYCHEM_INSPT_YN     = B.PHYCHEM_INSPT_YN
--       , INSPT_MTOD           = B.INSPT_MTOD
--       , UUSER = :loginSabun
--       , UDATE = SYSDATE
WHEN NOT MATCHED THEN
    INSERT
    (
     YEAR,
     PLAN_CLSFI,
     PLANCLASS,
     MM,
     MCALSS_CD,
     MATERIAL_CD,
     MATERIAL_NM,
     MICBIO_NOT_FIT_QTY,
     PHYCHEM_NOT_FIT_QTY,
     MICBIO_DANGER_GRADE,
     PHYCHEM_DANGER_GRADE,
     INSPT_YN,
     MICBIO_INSPT_YN,
     PHYCHEM_INSPT_YN,
     INSPT_MTOD,
     CUSER,
     CDATE,
     UUSER,
     UDATE
    ) VALUES (
     B.YEAR,
     B.PLAN_CLSFI,
     B.PLANCLASS,
     B.MM,
     B.MCALSS_CD,
     B.MATERIAL_CD,
     B.MATERIAL_NM,
     B.MICBIO_NOT_FIT_QTY,
     B.PHYCHEM_NOT_FIT_QTY,
     B.MICBIO_DANGER_GRADE,
     B.PHYCHEM_DANGER_GRADE,
     B.INSPT_YN,
     B.MICBIO_INSPT_YN,
     B.PHYCHEM_INSPT_YN,
     B.INSPT_MTOD,
     :loginSabun,
     SYSDATE,
     :loginSabun,
     SYSDATE
    )
        ]]>
    </statement>

    <!-- 년간계획 대비 삭제 데이터 월계획 조정 Master 삭제 -->
    <statement name="deleteYearPlanMstMigration" type="delete">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.deleteYearPlanMstMigration */
        <![CDATA[
/* 년간계획 대비 삭제 데이터 월계획 조정 Master 삭제 */
DELETE FROM LSM_ANNUPLAN_MONTH_MST A
 WHERE 1 = 1
   AND A.YEAR = :planYear
   AND A.PLAN_CLSFI = :planClsfi
   AND A.PLANCLASS = :planclass
   AND A.MM = :planMonth
   AND NOT EXISTS (
                     SELECT 1
                       FROM LSM_ANNUPLAN_MST
                      WHERE YEAR = A.YEAR
                        AND PLAN_CLSFI = A.PLAN_CLSFI
                        AND PLANCLASS = A.PLANCLASS
                        AND MM = A.MM
                        AND MCALSS_CD = A.MCALSS_CD
                  )
        ]]>
    </statement>

    <!-- 년간계획 대비 삭제 데이터 월계획 조정 Detail 삭제 -->
    <statement name="deleteYearPlanDtlMigration" type="delete">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.deleteYearPlanDtlMigration */
        <![CDATA[
/* 년간계획 대비 삭제 데이터 월계획 조정 Detail 삭제 */
DELETE FROM LSM_ANNUPLAN_MONTH_DTL A
 WHERE 1 = 1
   AND A.YEAR = :planYear
   AND A.PLAN_CLSFI = :planClsfi
   AND A.PLANCLASS = :planclass
   AND A.MM = :planMonth
   AND NOT EXISTS (
                     SELECT 1
                       FROM LSM_ANNUPLAN_DTL
                      WHERE YEAR = A.YEAR
                        AND PLAN_CLSFI = A.PLAN_CLSFI
                        AND PLANCLASS = A.PLANCLASS
                        AND MM = A.MM
                        AND MCALSS_CD = A.MCALSS_CD
                  )
        ]]>
    </statement>

    <!-- 시험결과 부적합 이력조회 -->
    <statement name="selectDetailList" type="select">
        /*+ com.hwfs.ls.lsm.dao.MonthlyPlanMgmtDAO.selectDetailList */
        <![CDATA[
/* 시험결과 부적합 이력조회 */
SELECT /*+ INDEX_SS(B) INDEX_FFS(D) */
       B.REQ_DATE,
       A.REQ_NUM,
       A.ACCEPT_NUM,
       A.ACCEPTDD,
       A.SPECM_CD,                      /* 검체 코드 */
       A.SPECM_CLASS,               /* 검체 분류 */
       A.SPECM_NM,                      /* 검체명 */
       A.SPECM_TYPE,                    /* 검체유형(공전유형) */
       SCC_CODE_NM('SPECM_TYPE', A.SPECM_TYPE) AS SPECM_TYPE_NM,    /* 검체유형(공전유형)명 */
       A.MGRP_CD,                   /* 검체유형 대분류 */
       A.MCALSS_CD,                     /* 검체유형 중분류 */
       A.SCLASS_CD,                     /* 검체유형 소분류 */
       ((SELECT X.MGRP_NM FROM LCM_SPECM_TYPE_MGRP X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MGRP_CD = A.MGRP_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.MCALSS_NM FROM LCM_SPECM_TYPE_MCALSS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.MCALSS_CD = A.MCALSS_CD AND X.USE_YN = 'Y') || ' / ' ||
        (SELECT X.SCLASS_NM FROM LCM_SPECM_TYPE_SCLASS X WHERE X.SPECM_TYPE = A.SPECM_TYPE AND X.SCLASS_CD = A.SCLASS_CD AND X.USE_YN = 'Y'))
       AS SPECM_TYPE_DESC,              /* 검체 유형명 ( 대분류명 / 중분류명 / 소분류명 ) */
       A.INSPT_MTOD,                    /* 검사방법 */
       SCC_CODE_NM('INSPT_MTOD', A.INSPT_MTOD) AS INSPT_MTOD_NM,
       A.INSPT_CLASS,               /* 검사구분 */
       SCC_CODE_NM('INSPT_CLASS', A.INSPT_CLASS) AS INSPT_CLASS_NM,
       A.INSPT_PURP_1,                  /* 검사목적1 */
       SCC_CODE_NM('INSPT_PURP_1', A.INSPT_PURP_1) AS INSPT_PURP_1_NM,
       A.INSPT_PURP_2,                  /* 검사목적2 */
       SCC_CODE_NM('INSPT_PURP_2', A.INSPT_PURP_2) AS INSPT_PURP_2_NM,
       A.INSPT_PURP_3,                  /* 검사목적3 */
       SCC_CODE_NM('INSPT_PURP_3', A.INSPT_PURP_3) AS INSPT_PURP_3_NM,
       A.LONGSTORAGE_YN,                /* 장기보존여부 */
       SCC_CODE_NM('LONGSTORAGE_YN', A.LONGSTORAGE_YN) AS LONGSTORAGE_YN_NM,
       A.INSPT_OBJ_1,                   /* 검사대상1 */
       SCC_CODE_NM('INSPT_OBJ_1', A.INSPT_OBJ_1) AS INSPT_OBJ_1_NM,
       A.INSPT_OBJ_2,                   /* 검사대상2 */
       SCC_CODE_NM('INSPT_OBJ_2', A.INSPT_OBJ_2) AS INSPT_OBJ_2_NM,
       A.INSPT_OBJ_3,                   /* 검사대상3 */
       SCC_CODE_NM('INSPT_OBJ_3', A.INSPT_OBJ_3) AS INSPT_OBJ_3_NM,
       A.INSPT_OBJ_4,                   /* 검사대상4 */
       SCC_CODE_NM('INSPT_OBJ_4', A.INSPT_OBJ_4) AS INSPT_OBJ_4_NM,
       A.ORIGIN                        /* 원산지 */
     , CASE WHEN (SELECT COUNT(1) FROM LRM_TEST_INFO WHERE REQ_NUM = A.REQ_NUM) =
                 (SELECT COUNT(1) FROM LTM_TEST_DIARY WHERE REQ_NUM = A.REQ_NUM AND LAST_DECISION IS NOT NULL)
            THEN
              (SELECT TO_CHAR(MAX(UDATE), 'YYYYMMDD')
                 FROM LTM_TEST_DIARY
                WHERE REQ_NUM = A.REQ_NUM)
            ELSE
              ''
       END AS COMPLETE_DD /* 시험완료일자 */
     , (SELECT X.NM_KOR
          FROM SCC_USERINFO X
         WHERE X.SABUN = C.SABUN) AS USER_NM        /* 담당자 */
     , D.DECISION /* 판정 */
     , SCC_CODE_NM('DECISION', D.DECISION) AS DECISION_NM
     , D.LAST_DECISION  /* 최종 판정 */
     , SCC_CODE_NM('LAST_DECISION', D.LAST_DECISION) AS LAST_DECISION_NM
     , B.UPJANG_NM
     , SCC_CODE_NM('ACCEPT_CLASS', B.ACCEPT_CLASS) AS ACCEPT_CLASS
     , C.INSPT_FLD
     , SCC_CODE_NM('INSPT_FLD', C.INSPT_FLD) AS INSPT_FLD_NM    /* 검사분야 */
     , C.ARTICLE_CD
     , (SELECT ARTICLE_NM FROM LCM_TEST_ARTICLE WHERE C.ARTICLE_CD = ARTICLE_CD) AS TEST_ARTICLE_NM   /* 시험항목명 */
     , C.INSPT_METHOD
     , SCC_CODE_NM('INSPT_METHOD', C.INSPT_METHOD) AS INSPT_METHOD_NM /* 검사방법 */
     , U.PROC_CLASS AS PROGRESS_STATUS  /* 진행상태 */
     , SCC_CODE_NM('PROGRESS_STATUS', U.PROC_CLASS) AS PROGRESS_STATUS_NM /* 진행상황 */
     , C.SABUN
     , CASE WHEN U.PROC_CLASS >= '200' THEN   /* 시험완료 승인 */
          'Y'
       ELSE
          'N'
       END AS COMPLETE_YN /* 시험완료승인 */
     , C.BASIS_STAND      /* 기준규격 */
     , D.RESULT             /* 시험일지결과 */
     , (
         SELECT COUNT(1)
           FROM LEM_INSPECT_RPT_ISSUE_LOG
          WHERE REQ_NUM = A.REQ_NUM
            AND PUBLISHDD IS NOT NULL
       ) AS PUBLISH_CNT   /* 발급횟수 */
     , DECODE(B.INSPECT_RPT_ISSUE, NULL, 'N', B.INSPECT_RPT_ISSUE) AS INSPECT_RPT_ISSUE    /* 성적서 발급 여부 */
     , H.INSPT_FLD_NM || '/' || H.NOT_FIT_CLSFI_NM AS NOT_FIT_CLSFI_NM    /* 검사분야 / 부적합분류 */
     , NVL(C.LEGAL_BASIS, 'N') AS LEGAL_BASIS
     , NVL(C.INSIDE_BASIS, 'N') AS INSIDE_BASIS
     , A.DISUSE_YN      /* 폐기 여부 */
     , A.DISUSE_DATE    /* 폐기 일자 */
     , (
        SELECT NVL(SUM(DECODE(Y.COMM_1_USE_YN, 'Y', SUM(Y.COMM_1), 0)) +
                   SUM(DECODE(Y.COMM_2_USE_YN, 'Y', SUM(Y.COMM_2), 0)) +
                   SUM(DECODE(Y.COMM_3_USE_YN, 'Y', SUM(Y.COMM_3), 0)) +
                   SUM(DECODE(Y.COMM_4_USE_YN, 'Y', SUM(Y.COMM_4), 0)) +
                   SUM(DECODE(Y.COMM_5_USE_YN, 'Y', SUM(Y.COMM_5), 0)), 0)
          FROM LRM_SPECM_INFO X
             , LRM_TEST_INFO Y
             , LTM_TEST_DIARY TD
         WHERE 1 = 1
           AND X.REQ_NUM = A.REQ_NUM
           AND X.ACCEPT_NUM = A.ACCEPT_NUM
           AND X.REQ_NUM = Y.REQ_NUM
           AND X.ACCEPT_NUM = Y.ACCEPT_NUM
           AND Y.REQ_NUM = C.REQ_NUM
           AND Y.ACCEPT_NUM = C.ACCEPT_NUM
           AND Y.ARTICLE_CD = C.ARTICLE_CD
           AND Y.REQ_NUM = TD.REQ_NUM(+)
           AND Y.ACCEPT_NUM = TD.ACCEPT_NUM(+)
           AND Y.ARTICLE_CD = TD.ARTICLE_CD(+)
           AND TD.LAST_DECISION IS NOT NULL /* 완료 */
           AND Y.SABUN = C.SABUN
         GROUP BY Y.COMM_1_USE_YN, Y.COMM_2_USE_YN, Y.COMM_3_USE_YN, Y.COMM_4_USE_YN, Y.COMM_5_USE_YN
       ) AS COMM_TOT_AMT
     , SCC_CODE_NM('URGENT_YN', A.MFG_VENDOR) AS URGENT_YN  /* 긴급여부 */
     , I.UDATE AS SEND_DATE    /* 전송 일자 */
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '01'), 'TK', '중지', 'TP', '사용', '') AS MATERIAL_STATUS_NM_1 /* 자재쪽 직영 실제 중지/사용 상태명 */
     , DECODE(EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.SPECM_CD, '02'), 'TK', '중지', 'TP', '사용', '') AS MATERIAL_STATUS_NM_2 /* 자재쪽 식재 실제 중지/사용 상태명 */
FROM   LRM_SPECM_INFO A
     , LRM_TEST_REQ_ACCEPT B
     , LRM_TEST_INFO C
     , LTM_TEST_DIARY D
     , (
        SELECT PD.REQ_NUM
             , PD.PROC_USER
             , PD.PROCDD
             , PD.PROC_REASON
             , PD.PROC_CLASS
             , PD.SEQ
          FROM (
                SELECT Y.REQ_NUM
                     , Y.PROC_USER
                     , Y.PROCDD
                     , Y.PROC_REASON
                     , Y.PROC_CLASS
                     , Y.SEQ
                     , ROW_NUMBER() OVER (PARTITION BY Y.REQ_NUM ORDER BY Y.REQ_NUM, Y.SEQ DESC) AS RN
                  FROM LRM_PROC_DESC Y
               ) PD
         WHERE RN = 1
       ) U
     , (
        SELECT /*+ INDEX_SS(Y) */
               Y.REQ_NUM
             , Y.ACCEPT_NUM
             , Y.ARTICLE_CD
             , P.INSPT_FLD
             , SCC_CODE_NM('INSPT_FLD', P.INSPT_FLD) AS INSPT_FLD_NM
             , Y.LAST_DECISION
             , P.ARTICLE_NM
             , P.NOT_FIT_CLSFI
             , SCC_CODE_NM('NOT_FIT_CLSFI', P.NOT_FIT_CLSFI) AS NOT_FIT_CLSFI_NM
             , ROW_NUMBER() OVER(PARTITION BY Y.REQ_NUM, Y.ACCEPT_NUM ORDER BY Y.REQ_NUM, Y.ACCEPT_NUM, P.NOT_FIT_CLSFI DESC) AS RN
          FROM LTM_TEST_DIARY Y
             , LCM_TEST_ARTICLE P
         WHERE 1 = 1
           AND Y.ARTICLE_CD = P.ARTICLE_CD
           AND Y.LAST_DECISION <> '101'
       ) H
     , LRM_MATERIAL_INFO I
WHERE  1 = 1
  AND  A.REQ_NUM = B.REQ_NUM
  AND  A.REQ_NUM = C.REQ_NUM
  AND  A.ACCEPT_NUM = C.ACCEPT_NUM
  AND  A.REQ_NUM = U.REQ_NUM
  AND  C.REQ_NUM = H.REQ_NUM
  AND  C.ACCEPT_NUM = H.ACCEPT_NUM
  AND  C.ARTICLE_CD = H.ARTICLE_CD
  AND  C.REQ_NUM = D.REQ_NUM(+)
  AND  C.ACCEPT_NUM = D.ACCEPT_NUM(+)
  AND  C.ARTICLE_CD = D.ARTICLE_CD(+)
  AND  C.SABUN = D.SABUN(+)
  AND  D.LAST_DECISION IS NOT NULL /* 완료 */
  AND  A.ACCEPTDD BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, - (12 * 3)), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
  AND  A.SPECM_CD = :materialCd
  AND  A.REQ_NUM = I.REQ_NUM(+)
  AND  A.ACCEPT_NUM = I.ACCEPT_NUM(+)
  AND  A.SPECM_CD = I.SPECM_CD(+)
ORDER  BY A.REQ_NUM, A.ACCEPT_NUM, C.ARTICLE_CD
        ]]>
    </statement>

</hqml>
