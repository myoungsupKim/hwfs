<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/**
 * @fileOverview
 * Transaction 관련 함수 모음
 */

/**
 * @class 공통 transaction 함수
 * @param objForm         - Form Object(this)
 * @param strSvcID        - 트랜잭션을 구분하기 위한 ID
 * @param strURL          - 트랜잭션을 요청할 주소
 * @param strInDatasets   - 트랜잭션을 요청할 때 입력값으로 보낼 데이터셋의 ID
 * @param strOutDatasets  - 트랜잭션을 처리 결과를 받을 데이터셋의 ID
 * @param strArgument     - 트랜잭션을 위한 인자값
 * @param strCallbackFunc - 트랜잭션의 결과를 돌려줄 함수의 이름
 * @param bAsync          - 비동기 여부(true: Async, false : Sync)
 * @param bProgress       - Wait Cursor 표시여부 (true : 사용, false : 사용안함)
 * @param bComp           - 통신시 PostData를 압축할지 여부 (Default : false)
 * @return 없음
 */
function gfn_transaction(objForm, strSvcID, strURL, strInDatasets, strOutDatasets, strArgument, strCallbackFunc, bAsync, bProgress, bComp) 
{
	//트랜잭션 발생시마다 세션 만료시간을 초기화(BottomFrame에서 사용)
	gv_sessionInit = "Y";		//세션 만료시간 초기화 여부
	
    // Wait Cursor 표시여부
    if ((bProgress != true) && (bProgress != false)) bProgress = true;
    
    // 비동기 여부
    if ((bAsync != true) && (bAsync != false)) bAsync = true;
    
    // Wait Cursor 표시 설정
    try 
    {
        if ( bProgress == true )
        {
            setWaitCursor(true, true);
        }
        else {
			setWaitCursor(false, false);
        }
    } catch(e) {
        setWaitCursor(true, true);
    }
    
    try 
    {        
        //Frame ID
        var strFrameId = objForm.getOwnerFrame().name;
        
        //Transaction Start Time
        var objDate = new Date();
        var nStartTime = objDate.getTime(); //Milliseconds
        
        //Transaction ID
        var strTranId = strFrameId + "|" + bProgress.toString() + "|" + strSvcID + "|" + nStartTime + "|" + strCallbackFunc;
        
        // Argument 처리 (Global변수 추가)
        strArgument = strArgument + gfn_getGlobalVariable();

		strURL = "svc::" + strURL;
	        
        //전송형태 : 0(XML 타입), 1(Binary 타입), 2(SSV 타입)
        var nDataType = 1; //성능테스트 시 0으로 변경
        
        //통신시 포스트데이터를 압축할지 여부
        var bCompress = true; //성능테스트 시 false로 변경

		// 실행모드가 UX Studio 일때 전송형태, 압축여부 변경
		if ( gv_runMode == "L" ) {
			nDataType = 0;
			bCompress = false;
		}
		
		//압축 설정이 있는 경우 by kksoo
		if ( !gfn_isNull(bComp) ) bCompress = bComp;
		
		//Cookie에 Transaction DataType 추가 설정 by kksoo
		gv_xp_txdatatype=nDataType;
		
        transaction(strTranId, strURL, strInDatasets, strOutDatasets, strArgument, "gfn_callBack", bAsync, nDataType, bCompress);
        
    } catch(e) {
        setWaitCursor(false, true);
        trace(e.message);
    }
}

/**
 * @class 공통 Callback 서비스
 * @param strTranId   - Client에서 임의로 생성하는 트랜잭션 ID
 * @param nErrorCode  - 에러코드
 * @param strErrorMag - 에러메시지
 * @return 없음
 */
function gfn_callBack(strTranId, nErrorCode, strErrorMsg) 
{    
    /*** strTranId = strFrameId + "|" + bProgress + "|" + strSvcID + "|" + nStartTime + "|" + strCallbackFunc;  */    
    var arrTranId       = strTranId.split("|");
    var strFrameId      = arrTranId[0];
    var strProgress     = arrTranId[1];
    var strSvcID        = arrTranId[2];
    var nStartTime      = toNumber(arrTranId[3]);
    var strCallbackFunc = arrTranId[4];
    
    // savedToken 저장
	gv_savedToken = outSavedToken;
	
    try {
        if ( strProgress == "true" )
            setWaitCursor(false, true);
    } catch(e) {
        setWaitCursor(false, true);
    }
    
    if (!gfn_chkTransaction(strTranId, nErrorCode, strErrorMsg)) 
    {
// 		// Login서비스시에는 자동 종료
// 		if ( strSvcID == "login" ) 
// 		{
// 			av_close = 'CLOSE_FINISHED';
// 			application.exit();
// 		}
// 		return;
    }
    
    //Transaction End Time
    var objDate    = new Date();
    var nEndTime   = objDate.getTime(); //Milliseconds
    var nElapseSec = (nEndTime - nStartTime) / 1000;
    
    /*
    var strLog  = "FrameID["+strFrameId+"], ServiceID["+strSvcID+"], ErrorCode["+nErrorCode+"], ErrorMsg["+strErrorMsg+"], 처리시간["+nElapseSec+"초]";
    trace(strLog);
    */
    
    if ( gfn_isNull(strCallbackFunc) )    return;
    
    eval(strCallbackFunc + "('" + strSvcID + "', nErrorCode, strErrorMsg)");
}

/**
 * @class Transaction 호출 후 정리 처리등의 메세지 처리
 * @param strTranId   - Client에서 임의로 생성하는 트랜잭션 ID
 * @param nErrorCode  - 에러코드
 * @param strErrorMag - 에러메시지
 * @return 없음
 */
function gfn_chkTransaction(strTranId, nErrorCode, strErrorMsg) 
{
    if (nErrorCode >= 0) 
    {
      return true;
    } 
    else {    
		var arrTranId       = strTranId.split("|");
		var strSvcID        = arrTranId[2];
		
		// 실행모드가 UX Studio 일때만 오류 출력
		if ( gv_runMode == "L" ) {   
			trace("Svc ID : " + strSvcID); 
			trace("Error Code : " + nErrorCode); 
			trace("Error Msg : " + strErrorMsg);
		} 
        // nErrorCode == -100 인경우 Business Logic 에서 Error Check 한 경우
        // Error Code == 0 과 동이하게 단위 업무 화면으로 넘긴다.
        // 에러처리는 단위업무 화면에서 알아서 처리한다.
        if (nErrorCode == -100) // || nErrorCode == 100) 
        {
            return true;        
        }
        // Session TimeOut 시 로그인창 호출        
        else if (nErrorCode == -99) {
			afrm_Bottom.form.fn_reLogin();        
        } 
        // 나머지는 에러메시지 팝업으로 표시        
        else { 
			//오류팝업 호출전 ARGUMENT 설정
			var objArg = new Array();
			
			// 실행모드가 UX Studio 일때만 오류 메시지 보임 처리
			//if ( gv_runMode == "L" ) {
				objArg[0] = nErrorCode;     // nErrorCode
				objArg[1] = strSvcID + " 서비스에서 아래와 같은 오류가 발생하였습니다.\n\n" + strErrorMsg;    // strErrorMsg
			//}
			//else {
			//	objArg[0] ="SYSTEM0001";
			//	objArg[1] ="시스템에러 - 시스템관리자에게 문의해 주세요.";
			//}
			
			gfn_alert(objArg[1]);
			return false;
        }
    }

    return true;
}

/**
 * @class 공통서비스 Callback 함수
 * @param strSvcID    - Service ID
 * @param nErrorCode  - 에러코드
 * @param strErrorMsg - 에러메시지
 * @return 없음
 */ 
function gfn_cmnCallback(strSvcID, nErrorCode, strErrorMsg)
{
    switch(strSvcID)
    {            
      	// yyy
        case "yyy" :
            break;     
    }
}

/**
 * @class 데이타셋리스트 배열로 변환
 * @param objString  - 데이타셋리스트
 * @param type       - in/out구분(0:in, 1:out)
 * @return objReturn - 데이타셋 배열
 */
function gfn_splitDsName(objString, type) 
{
    var strDsMapping;    //mapping string
    var objArr;          //dataset name array
    var objReturn = new Array();
    
    strDsMapping = objString.split(" ");
    
    for (var i = 0; i < strDsMapping.length ; i++ ) {
        objArr = strDsMapping[i].split("=");
        if (type == 0)
            objReturn[i] = objArr[0];
        else
            objReturn[i] = objArr[1];
    }
    
    return objReturn;
}

/**
 * @class 서버에 전송할 Global 변수 정의
 * @param 없음
 * @return 공통변수값
 */
function gfn_getGlobalVariable() 
{
	var strVal  = "";

	strVal += " appId=" + wrapQuote(g_AppId);    					// App ID
	strVal += " sysType=" + wrapQuote(g_SystemId);    				// Syetem ID
	strVal += " menuId=" + wrapQuote(gv_menuId);    				// 메뉴ID        
	strVal += " prgId=" + wrapQuote(gv_progrmId);  					// 프로그램 ID
	strVal += " ktagTokenField=" + wrapQuote(gv_ktagTokenField);   	// TokenField        	
	strVal += " savedToken=" + wrapQuote(gv_savedToken);    		// savedToken    		

    return strVal;
}

/**
 * @class 서버에 전송할 Global 변수를 Get Url 방식으로 정의 (FileUp/Down, Report에서 이용) by kksoo
 * @param 없음
 * @return 공통변수값
 */
function gfn_getGlobalVariableUrl() 
{
	var strVal  = "";
	//(주의) wrapQuote 사용하면 안 됨
	strVal += "&appId=" + g_AppId;    					// App ID
	strVal += "&sysType=" + g_SystemId;    				// Syetem ID
	strVal += "&menuId=" + gv_menuId;    				// 메뉴ID        
	strVal += "&prgId=" + gv_progrmId; 					// 프로그램 ID

    return strVal;
}
]]></Script>
