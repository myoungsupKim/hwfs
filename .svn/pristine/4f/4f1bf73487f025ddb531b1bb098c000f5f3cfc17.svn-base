<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/*------------------------------------------------------------------------------------------------------------------------------------------------------
= 프로그램 : 공통처리모듈
= 화 일 명 : sc_comon.js
= 기능설명 : 공통기능을 처리하기 위한 공통처리모듈
------------------------------------------------------------------------------------------------------------------------------------------------------*/

var Gfa_call_param;					// Miplatform 화면에서 화면 호출(미사용)

var vSortST;						//Grid Sort 시 필요한 배열 변수 [호출하는 페이지에서는 배열의 크기를 결정해야 한다.]
var CONST_ASC_MARK="▲";			//Grid Sort Mark
var CONST_DESC_MARK="▼";			//Grid Sort Mark
var ds_debug;						//Debug Dataset
// ↓ ↑
var v_bar_color = new Array(12);
var v_ds_check;	

var v_grd_head;	
var v_col_name;	
var v_col_Index;

var v_find_grd;	

var g_OzUrl   	= "http://203.233.82.173/report/";	// OZ URL
var g_OzAlias   = ["oracle_fsdb", "oracle_hldc"];
var g_OzAliasTest = ["oracle_fsdbtest", "oracle_hldctest"];
var g_OzFsus = 0; var g_OzHldc = 1;
//var g_ServerUrl = "http://203.233.82.50/hwfs/";		// Server URL
var g_ServerUrl = gv_webRoot;							// Server URL
var g_WaterCode = "010708010198";					// 조리용물 자재코드 : 박지영 2008.06.09
var g_Delivery_LOC = "http://foodist.lbcmap.com/FBR-CVO_asr04.asp?cust_cd=";  //TMS 배송추적 SITE

//개발자
var gsccAdmin = "900101004";
var gfmsAdmin = "900101004";

//================================================================================
//Grid Common Script
//================================================================================
/*------------------------------------------------------------------
/기능 : Grid에서 헤더를 클릭하면 해당 셀들이 소트된다
/        (ASC,DESC 토글)
/ 인수 : GridObj  그리드 콤포넌트의 이름 (예 : gridInsert)
/        dsObj    데이터셋 콤포넌트의 이름 (예 : dsGrid01)
/        nCell    해당셀번호 (HeadClick 이벤트에서 받은 nCell을 
/                            그대로 지정)
/        nColCnt  그리드의 컬럼의 수(이 수만큼 토글처리를 한다.)
------------------------------------------------------------------*/
function G_fn_GridSort(Gridobj,dsObj,nCell,nColCnt)
{
	var nheadText,sflag;

	//---------------------------------------------------------
	//  해당하는 셀의 타이틀의 소트마크를 추가 또는 변경한다.
	//---------------------------------------------------------
	if(gfn_right(Gridobj.getCellProperty("head",nCell,"text"),1)== CONST_ASC_MARK)
	{
		Sort(dsObj,Gridobj.getCellProperty("Body",nCell,"text"),false);
		nheadText = Gridobj.getCellProperty("head",nCell,"text");
		nheadText = gfn_replace(nheadText,CONST_ASC_MARK,"");
		nheadText = nheadText + CONST_DESC_MARK;
		sflag = CONST_DESC_MARK;
	}
	else
	{
		Sort(dsObj,Gridobj.getCellProperty("Body",nCell,"text"),true);
		nheadText = Gridobj.getCellProperty("head",nCell,"text");
		nheadText = gfn_replace(nheadText,CONST_DESC_MARK,"");
		nheadText = nheadText + CONST_ASC_MARK;   
		sflag = CONST_ASC_MARK;
	}
	 
	Gridobj.setCellProperty("head",nCell,"text",nheadText);
	
	//---------------------------------------------------------
	//  해당하는 셀 이외의 해더 타이틀의 소트마크를 제거한다.
	//---------------------------------------------------------
	var sRepText="";
	for(i=0;i<nColCnt;i++)
	{
		
		if(nCell <> i) {
			sRepText = gfn_replace(Gridobj.getCellProperty("head",i,"text"), CONST_ASC_MARK,"");
			Gridobj.setCellProperty("head",i,"text", sRepText);
			
			sRepText = gfn_replace(Gridobj.getCellProperty("head",i,"text"), CONST_DESC_MARK,"");
			Gridobj.setCellProperty("head",i,"text", sRepText);
		}
	}

	return sflag;
}


function G_fn_GridSortByflag(Gridobj,dsObj,nCell,nColCnt,flag)
{
	var nheadText;
	//---------------------------------------------------------
	//  해당하는 셀의 타이틀의 소트마크를 추가 또는 변경한다.
	//---------------------------------------------------------
	if(flag == null || flag == CONST_ASC_MARK)
	{
		Sort(dsObj,Gridobj.getCellProperty("Body",nCell,"text"),true);
		nheadText = Gridobj.getCellProperty("head",nCell,"text");
		nheadText = gfn_replace(nheadText,CONST_ASC_MARK,"");
		nheadText = gfn_replace(nheadText,CONST_DESC_MARK,"");
		nheadText = nheadText + CONST_ASC_MARK;
	}
	else
	{
		Sort(dsObj,Gridobj.getCellProperty("Body",nCell,"text"),false);
		nheadText = Gridobj.getCellProperty("head",nCell,"text");
		nheadText = gfn_replace(nheadText,CONST_ASC_MARK,"");
		nheadText = gfn_replace(nheadText,CONST_DESC_MARK,"");
		nheadText = nheadText + CONST_DESC_MARK;
	}
	Gridobj.setCellProperty("head",nCell,"text",nheadText);

	var sRepText="";
	for(i=0;i<nColCnt;i++)
	{
		
		if(nCell <> i) {
			sRepText = gfn_replace(Gridobj.getCellProperty("head",i,"text"), CONST_ASC_MARK,"");
			Gridobj.setCellProperty("head",i,"text", sRepText);
			
			sRepText = gfn_replace(Gridobj.getCellProperty("head",i,"text"), CONST_DESC_MARK,"");
			Gridobj.setCellProperty("head",i,"text", sRepText);
		}
	}

}


function G_fn_GridClearSortFlag(Gridobj,nColCnt)
{
	var sRepText="";
	for(i=0;i<nColCnt;i++)
	{
		sRepText = gfn_replace(Gridobj.getCellProperty("head",i,"text"), CONST_ASC_MARK,"");
		Gridobj.setCellProperty("head",i,"text", sRepText);
		
		sRepText = gfn_replace(Gridobj.getCellProperty("head",i,"text"), CONST_DESC_MARK,"");
		Gridobj.setCellProperty("head",i,"text", sRepText);
	}

}

/*----------------------------------------------------------------
/설  명 : Grid를 정열한다.(다중 Column Sort 가능)
/인  자 : [ds   - 정렬할 Dataset	
           grd  - 정렬할 Grid		
           cell - 선택한 Cell(다중 Column sort 인 경우 - cell;cell;cell) 
	       objFileDialog - 파일오픈, 데이터가 많은 경우 엑셀에 내용이 안나오는 경우가 생긴다. 해서 저장방식으로 전환하여 사용
          ]
----------------------------------------------------------------*/
function G_GridSort(ds, grd, cell, objFileDialog)
{
	var vColSpan;
	var vCol;
	var vText;
	var vExpr;	
	var vHeadTxt;	
	var vTxtPos;
	var vColID;
	var vTemp;	
	var vLenArr;

	if(ds.getRowCount()==0){
		return;
	}
	
	//- 전체 선택일 경우 Sort가 아닌 전체선택 기능 부여 -------------------
	
	if ( grd.getCellProperty("head",cell,"edittype") == "checkbox" ) {
		var allcheck;
		if ( GetCellText(grd,"head",0,cell)== "1" ) 	
			allcheck = "0";
		else	
			allcheck = "1";
		grd.setCellProperty("head",cell,"text",allcheck);	
			
		for(var row=0; row <= GetLastRow(ds)     ; row++) 	
		    ds.setColumn(row,grd.getCellProperty("body",cell,"text"),allcheck);	

		return;
	}
	//---------------------------------------------------------------------
	
	//---------------------------------------------------------------------
    // 엑셀제어
	var strTitle = gfn_replace(this.titletext,"/",",");
	if (gfn_length(strTitle)<= 0) strTitle = "Sheet1";

	if (grd.getCellProperty("head",cell,"backgroundimage") == "ico_Excel") {
	//--------------------------------------------------------//
	// 소속이 남부 지사 이면 무조건 엑셀 Export 할 수 없게..
	// 2009.11.19 FS 식재 사업팀 요청 by 노규완
	//--------------------------------------------------------//	
//		 if ((pos(g_Cc_Nm ,"남부") >= 0) && (g_UserGroup = "리조트") && (g_SystemId = "FICS"))
//		 { 
//			g_Message("EE", "엑셀 변환 권한이 없습니다.");			
//			return;
//		 }
//		 else
//		 {		

			//데이터가 많은 경우 엑셀에 내용이 안나오는 경우가 생긴다. 해서 저장방식으로 전환하여 사용
			if (objFileDialog <> null)
			{
				objFileDialog.Type = "SAVE";
				//objFileDialog.FileName = replace(this.title,"/",",") + ".xls";
				objFileDialog.FileName = strTitle + ".xls";
				//objFileDialog.Filter = "Excel File(*.xls;*.xlsx)|*.xls;*.xlsx";
				objFileDialog.Filter = "Excel File(*.xls)|*.xls";
				if( objFileDialog.Open() )
				{
					if (gfn_right(objFileDialog.FileName,4)<> ".xls") objFileDialog.FileName = objFileDialog.FileName + ".xls";
					//obj.SaveExcelEx(fd_Excel.FilePath + '\\' + fd_Excel.FileName ,replace(this.title,"/",","));
					SaveExcel(grd,objFileDialog.FilePath + '\\' + objFileDialog.FileName, strTitle);
				}
				return;
			}
			if ( gfn_length(gfn_trim(grd.getCellProperty("head",cell,"text")))== 0 ) {
				gfn_exportExcel(grd, strTitle);
				return;
			}
			if (g_Confirm("04","엑셀 변환을 하시겠습니까?")) {
				gfn_exportExcel(grd, strTitle);
				return;
			}
//		 }


	//--------------------------------------------------------//
	// 소속이 남부 지사 이면 무조건 엑셀 Export 할 수 없게..
	// 2009.11.19 FS 식재 사업팀 요청 by 노규완  수정 완료.
	//--------------------------------------------------------//
		return;
	}	
	//---------------------------------------------------------------------		
	//G_grd_UnSort(grd, vLenArr);
	if(/* DatasetType은 지원되지 않는 속성입니다.*/ ds.DatasetType!="Dataset"){	// Logical Dataset인 경우 return, 2008.4.21 박지영 
		return;
	}
	
	for(i=0;i<grd.getCellCount("head");i++) {
		 grd.setCellProperty("head",i,"text",gfn_replace(gfn_replace(grd.getCellProperty("head",i,"text"),"▲",""),"▼",""));
	}	
		
	vLenArr	=Bound(vSortST)-1;
	if(vLenArr==-1){
		vLenArr	=fn_GridCellCount(grd);
		
	}else{
		if(vSortST[vLenArr]!=ds.name){
			vLenArr	=fn_GridCellCount(grd);
		}
	}
	
	vColSpan	= grd.getCellProperty("head", cell, "colspan");	

	vcellmulti = gfn_split(cell,";");

	if ( Bound(vcellmulti)> 1)	{
		vCol		=grd.getCellProperty("head",vcellmulti[0] , "col");	
		vColID		=grd.getCellProperty("body", vCol, "text");	
		for (i = 1; i < Bound(vcellmulti);i++ )	{
			vCol		=grd.getCellProperty("head",vcellmulti[i] , "col");	
			vColID		+="," + grd.getCellProperty("body", vCol, "text") + ":A";	
		}
		cell = toNumber(vcellmulti[0]);
	}
	else {
		vCol		=grd.getCellProperty("head", cell, "col");	
		vColID		=grd.getCellProperty("body", cell, "text");
		//두줄인 경우 반영 안되면 이걸 발견한 사람이 수정하세요... (2008.05.22)
		//vColID		=grd.GetCellProp("body", vCol, "colid");	
	}

	if(gfn_length(vColID)==0){	// 연결된 컬럼이 없는 경우 return, 2008.4.21 박지영 
		return;
	}	
	
	if(vColSpan>1){
		return;
	}	

	for(i=0;i<Bound(vSortST);i++){	
		//trace(cell +":"+i+":"+ vSortST[i]);
		switch(vSortST[i]){
			case "11":
				vTemp	=grd.getCellProperty("head", i, "text");
				vTemp	=gfn_replace(vTemp, "▼", "");
				
				grd.setCellProperty("head", i, "text", vTemp);	
				
				break;
			case "12":
				vTemp	=grd.getCellProperty("head", i, "text");
				vTemp	=gfn_replace(vTemp, "▲", "");
				
				grd.setCellProperty("head", i, "text", vTemp);	
				
				break;
			case "21":
				vTemp	=grd.getCellProperty("head", i, "expr");
				vTemp	=gfn_replace(vTemp, "+'▼'", "");
				
				grd.setCellProperty("head", i, "expr", vTemp);	
				
				break;
			case "22":
				vTemp	=grd.getCellProperty("head", i, "expr");
				vTemp	=gfn_replace(vTemp, "+'▲'", "");
				
				grd.setCellProperty("head", i, "expr", vTemp);	
				
				break;
		}
		if(cell!=i){
			vSortST[i]="";
		}
	}
	
	vText		=grd.getCellProperty("head", cell, "text");
	vExpr		=grd.getCellProperty("head", cell, "expr");	
	
	if(gfn_length(vExpr)==0){		
		vTxtPos		="text";
		
		if(vSortST[cell]=="11"){			
			vHeadTxt	=vText + "▲";			
			Sort(ds,vColID, false);
			
			vSortST[cell]	="12";
		}else{			
			vHeadTxt	=vText + "▼";			
			Sort(ds,vColID, true);
			
			vSortST[cell]	="11";
		}
		
	}else{		
		vTxtPos		="expr";
		if(vSortST[cell]=="21"){			
			vHeadTxt	=vExpr + "+'▲'";			
			Sort(ds,vColID, false);
			
			vSortST[cell]	="22";
		}else{			
			vHeadTxt	=vExpr + "+'▼'";			
			Sort(ds,vColID, true);
			
			vSortST[cell]	="21";
		}
	}	
	grd.setCellProperty("head", cell, vTxtPos, vHeadTxt);	
	vSortST[vLenArr]	=ds.name;	
}


/*----------------------------------------------------------------
/설  명 : Grid Column Count에 따라 배열을 셋팅한다.
/인  자 : [grd - grid]
----------------------------------------------------------------*/
function fn_GridCellCount(grd)
{
	var i;

	i=0;
	
	while ( grd.getCellProperty("head", i, "col") != null){
		i=i+1;
	}	
	vSortST	=new Array(i+1);
	return i;
}

/*----------------------------------------------------------------
/설  명 : Grid Sort 초기화(Head 부분 - ▲ 제거)
/인  자 : [grid_obj - 초기화할 Grid, cellcnt - Grid 셀의개수 ]
----------------------------------------------------------------*/
function G_grd_UnSort(grid_obj, cellcnt)
{
	var tmp_str;
	var f_pos;

	grid_obj.redraw() = false;
	cellcnt = grid_obj.getCellCount("head");
	for ( i = 0 ; i < cellcnt ; i = i + 1 )
		{
			tmp_str = grid_obj.getCellProperty("head",i,"text");
			f_pos = gfn_pos(tmp_str,"▲");
			if ( f_pos > 0 )
			{
				tmp_str = gfn_replace(tmp_str,"▲","");
			}
			else
			{
				f_pos1 = gfn_pos(tmp_str,"▼");
				if ( f_pos1 > 0 )
				{
					tmp_str = gfn_replace(tmp_str,"▼","");
				}
			}
			grid_obj.setCellProperty("head",i,"text", tmp_str );
		}
	grid_obj.redraw() = true;	
}



//================================================================================
// Date Common Stript
//================================================================================
/*------------------------------------------------------------------
/기능 : 현재일자, 주 코드, 주 명칭(한글), 주 명칭(한자), 주 명칭(영문)
/인수 : rMonth-- 반환할 오브젝트, fMonth ~부터, tMonth~까지
/리턴 : 총개월수
		ymd 	-> yyyymmdd 일자
		ymdtm 	-> yyyymmddhh24miss 일자(8)+hhmmss(6)
		tm 		-> hhmmss(6) [ 시분초 중 시는 24시간으로 표현됨 ]
		w_cd 	-> Week Code (일 ∼ 토 : 1 ∼ 7)
		w_kor 	-> Week Name (한글) 
		w_cha 	-> Week Name (한자)
		w_eng 	-> Week Name (영문)
		
------------------------------------------------------------------*/
function fn_CurrDateWeek(rtn_cd)
{
	var	v_result;
	
	//--------------- X - Framework ------------------
	fsp_clear(null);
    //// 조회 
    fsp_addSearch(null, "sc/scz:SCZ_CURR_DATE");
    //// 서버 호출 
    // g_debug("ds_in");
	http.Sync		= true;
    fsp_callService(this, "", "", "", "gds_currdate=gds_currdate", "", "_fn_searchCode");
	http.Sync		= false;
	//--------------- X - Framework ------------------

	switch(rtn_cd)
	{
		case "ymd" : 
			v_result = gds_currdate.getColumn(0, "YMD"); 
			break;
		case "ymdtm" : 
			v_result = gds_currdate.getColumn(0, "YMD_TM"); 
			break;
		case "tm" : 
			v_result = gfn_subStr(gds_currdate.getColumn(0, "YMD_TM"),8,6); 
			break;
		case "w_cd" : 
			v_result = gds_currdate.getColumn(0, "WEEK_CD"); 
			break;
		case "w_kor" : 
			v_result = gds_currdate.getColumn(0, "WEEK_KOR"); 
			break;
		case "w_cha" : 
			v_result = gds_currdate.getColumn(0, "WEEK_CHA"); 
			break;
		case "w_eng" : 
			v_result = gds_currdate.getColumn(0, "WEEK_ENG"); 
			break;
		default:
			v_result = gds_currdate.getColumn(0, "YMD"); 
	} 
	
	this.setWaitCursor(false, true);
	return	v_result;
}
/*------------------------------------------------------------------
/기능 : 입력받은 from월로부터 입력to월까지 개월수반환하기
/인수 : rMonth-- 반환할 오브젝트, fMonth ~부터, tMonth~까지
/리턴 : 총개월수
------------------------------------------------------------------*/
function G_fn_CalcMonth(fMonth,tMonth)
{
  var iMonth   = 0; //계산된 개월수
  var iYear    = 0; //계산된 년도
  var rMonth   = 0; //반환할 개월수

  if(parseInt(fMonth) <= parseInt(tMonth)){
  	  iYear =  parseInt(gfn_subStr(tMonth,0,4))- parseInt(gfn_subStr(fMonth,0,4)) ;
  	  iMonth = parseInt(toNumber(gfn_subStr(tMonth,4,2)))- parseInt(toNumber(gfn_subStr(fMonth,4,2)));
  	  rMonth = (12 * iYear) + iMonth + 1;
  	  return rMonth;
   }else {
 	  return 0;
   }

}

/*------------------------------------------------------------------
/기능 : 입력받은 from월로부터 입력to월까지 개월수반환하기
/인수 : rMonth-- 반환할 오브젝트, fMonth ~부터, tMonth~까지
/리턴 : 총일수
------------------------------------------------------------------*/
function G_fn_CalcDay(fdate,tdate)
{
  //return /* ParseDateTime은 지원되지 않는 메서드입니다. ParseDateTime은 지원되지 않는 메서드입니다.*/ gfn_strToDate(tdate) - gfn_strToDate(fdate); 
  var iMonth    = 0; //계산된 개월수
  var iYear     = 0; //계산된 년도
  var iday      = 0; //계산된 일수
  var iMonthday = 0; //계산된 월의 일수
  var rDay    = 0; 	//반환할 개월수

  if(parseInt(fdate) <= parseInt(tdate)){
    
  	 iYear  = parseInt(tdate.substr(0,4)) - parseInt(fdate.substr(0,4)) ;
  	 iMonth = parseInt(toNumber(tdate.substr(4,2))) - parseInt(toNumber(fdate.substr(4,2)));  	 
  	 
  	 if ( iMonth > 1 )
  	 {
    	 for( i=1 ;i < iMonth; i++)
    	 {
  	      iMonthday += G_fn_MonthLastDay( toNumber(fdate.substr(4,2)) + i );
  	   }
  	 }
  	 
  	 if( iMonth == 0 )
  	 {
    	 iday  =  parseInt(toNumber(tdate.substr(6,2))) - parseInt(toNumber(fdate.substr(6,2)));
  	 } else
  	 {
  	   iday  = G_fn_MonthLastDay( toNumber(fdate.substr(4,2))) - parseInt(toNumber(fdate.substr(6,2)));
  	   iday  = iday + parseInt(toNumber(tdate.substr(6,2)));
  	 }
  	 
  	 rDay = (365 * iYear) + iMonthday + iday;
  	  
  	 return rDay;
  	  
   }else {
 	   return 0;
   }
  
}


/*------------------------------------------------------------------
/기능 : 월에 마지막 날을 가져온다
/인수 : 월
/리턴 : 마지막날
------------------------------------------------------------------*/
function G_fn_MonthLastDay(fmonth)
{
  if ( fmonth == 1 )
    return 31;  
  if ( fmonth == 2 )
    return 29;  
  if ( fmonth == 3 )
    return 31;  
  if ( fmonth == 4 )
    return 30;  
  if ( fmonth == 5 )
    return 31;  
  if ( fmonth == 6 )
    return 30;  
  if ( fmonth == 7 )
    return 31;  
  if ( fmonth == 8 )
    return 31;  
  if ( fmonth == 9 )
    return 30;  
  if ( fmonth == 10 )
    return 31;  
  if ( fmonth == 11 )
    return 30;  
  if ( fmonth == 12 )
    return 31;
}


/*----------------------------------------------------------------
/기능 : 시작일(월), 종료일(월) 비교, 
/인수 : fromStr : 조회시작구간
			toStr :조회마지막구간
			option :  0 =일 1= 월
/리턴 : true(적합), false(부적합)
----------------------------------------------------------------*/
function G_fn_Chk_FrDate( fromStr, toStr, Option ) {
	switch (Option)
	{
		case 0: //일
			//조회조건에 따라.
			//trace("fromStr:" +fromStr + " toStr:"+ toStr);
			if(parseInt(fromStr) - parseInt(toStr) > 0 ) {
				alert("시작일이 큰수입니다. 조회일을 확인하여 주세요"	) ;
				return false;
			} 
			
			break;
		case 1: //월
			//조회조건에 따라.
			if(parseInt(fromStr) - parseInt(toStr) > 0 ) {
				alert("시작월이 큰수 입니다. 월을 확인하여 주세요"	) ;
				return false;
			} 
			
			break;
	}
	return true;
}

function G_fn_GapDay(sStartDate, sEndDate)
{
	/*
	var v_day;
	var j=366;	
	var v_syear;
	var v_eyear;
	var v_gap_year;
	
	if(sday==eday){
		return 0;
	}
	
	v_syear	=Left(sday,4);
	v_eyear	=Left(eday,4);
	
	v_gap_year	=toNumber(v_eyear) - toNumber(v_syear);	
	
	if(gfn_right(sday,4)==gfn_right(eday,4)){
	  return v_gap_year * 365;
	}
	if(gfn_right(sday,4)> gfn_right(eday,4)){
		for(i=1;i<j;i++){			
			v_day	=gfn_addDate(eday, i);			
			
			if(gfn_right(v_day, 4)==gfn_right(sday, 4)){
				break;
			}
		}
		return v_gap_year * 365 - i;
	 }
	if(gfn_right(sday,4)< gfn_right(eday,4)){
		for(i=1;i<j;i++){			
			v_day	=gfn_addDate(sday, i);
			
			if(gfn_right(v_day, 4)==gfn_right(eday, 4)){
				break;
			}
		}
		return v_gap_year * 365 + i;
	}
	*/
	/*
	위의 함수가 이상해서 투비소프트에서 사용하는 함수 가져옴
	위의 함수는 년을 초과하는 기간을 제대로 가져오지 못함
	*/
	if( IsNull(sStartDate) || IsNull(sEndDate) ) return NaN; 

	var vFromDate = new Date(parseInt(sEndDate.substring(0,4), 10), parseInt(sEndDate.substring(4,6)-1, 10), parseInt(sEndDate.substring(6,8), 10)); 
	var vToDate = new Date(parseInt(sStartDate.substring(0,4), 10), parseInt(sStartDate.substring(4,6)-1, 10), parseInt(sStartDate.substring(6,8), 10)); 

	return parseInt((vFromDate - vToDate)/(1000*60*60*24)); 
}

/*----------------------------------------------------------------
/기능 : 두시간간의 시간차 
/인수 :		day : 일자 
			ftime :시작시간
			ttime : 끝시간
			 tp : 시간 인자 형식
/리턴 : 시간차 반환
----------------------------------------------------------------*/
function G_fn_GapTime(day, ftime, ttime, tp)
{	
	var v_time1;
	var v_time2;	
	var v_ret_hh;
	var v_ret_mm;	
	var v_day_time;
	
	v_day_time	=toNumber(day) * 24;
	
	if(tp==":"){
		v_time1	=gfn_split(ftime, ":");
		v_time2	=gfn_split(ttime, ":");
	}else{
		v_time1 	=new Array(2);
		v_time2 	=new Array(2);
		v_time1[0]	=ftime.substr(0,2);
		//v_time1[0]	=Left(ftime,2); //오동작
		
		v_time1[1]	= ftime.substr(2,2);
		//v_time1[1]	=gfn_mid(ftime,2,2); //오동작
		
		v_time2[0]	= gfn_trim(ttime).substr(0,2);
		//v_time2[0]	= Left(ttime,2); //오동작
		v_time2[1]	= gfn_trim(ttime).substr(2,2);
		//v_time2[1]	=gfn_mid(ttime,2,2); //오동작
	}	
		
	v_ret_hh	=toNumber(v_time2[0]) - toNumber(v_time1[0]);	
	v_ret_hh	=toNumber(v_day_time) + toNumber(v_ret_hh);	
	v_ret_mm	=toNumber(v_time2[1]) - toNumber(v_time1[1]);	
	
	if(v_ret_mm<0){
		v_ret_hh	=v_ret_hh-1;
		v_ret_mm	=60 + v_ret_mm;
	}
	
	v_ret_hh	=gfn_right("0" + v_ret_hh, 2);
	v_ret_mm	=gfn_right("0" + v_ret_mm, 2);
	
	if(tp==":"){
		return v_ret_hh +":" + v_ret_mm;
	}else{
		return v_ret_hh + v_ret_mm;
	}
}

/*----------------------------------------------------------------
/기능 : 날짜를 요일로 반환한다.
/인수 : day : 일자 			 
/리턴 : 요일반환
----------------------------------------------------------------*/
function G_fn_DayToWeek(day)
{
	var v_week;
	
	v_week	=gfn_getDay(day);
	
	switch(v_week){
		case "0":
			return "日";
		case "1":
			return "月";
		case "2":
			return "火";
		case "3":
			return "水";
		case "4":
			return "木";
		case "5":
			return "金";
		case "6":
			return "土";		
	}
}

/*----------------------------------------------------------------
/기능 : 날짜를 요일로 반환한다.
/인수 : day : 일자 			 
/리턴 : 요일반환
----------------------------------------------------------------*/
function G_fn_DayToWeek2(day)
{
	var v_week;
	
	v_week = gfn_getDay(day);
	
	switch(v_week){
		case "0":
			return "(일)";
		case "1":
			return "(월)";
		case "2":
			return "(화)";
		case "3":
			return "(수)";
		case "4":
			return "(목)";
		case "5":
			return "(금)";
		case "6":
			return "(토)";		
	}
}

/*------------------------------------------------------------------*/
/* [기능]   사업자번호 형식을 검사한다.                    */
/*                                                        */
/* [인수]   pNum    - 검사할 사업자번호                    */
/*          pTarget - Error 메세지 대상명                 */
/*                      ex) "개인정보"                    */
/*                                                        */
/* [반환]   exact : true                                  */
/*          other : false                                 */
/*                                                        */
/*------------------------------------------------------------------*/
 function G_fn_chkCustNo(pNum,pTarget)

{        
    var tBussNo = pNum;
    var i, nSum, nRemain, nChkValue;
    var aChkDigit = new Array ();		
    var ls_Diaig = "1;3;7;1;3;7;1;3;5";

		aChkDigit = gfn_split(ls_Diaig,";");	
        
    nSum = 0;
    for ( i = 0; i < gfn_length(aChkDigit); i++ )
    {
      nSum += parseInt(aChkDigit[i]) * parseInt(gfn_subStr(tBussNo,i,1));
    }        
 
    nSum = nSum + ( (parseInt(gfn_subStr(tBussNo,8,1)) * 5) / 10);

    nRemain = nSum % 10;
    
    if (parseInt(nRemain) == 0) 
    {
       nChkValue = 0;
    }
    else
    {
       nChkValue = 10 - parseInt(nRemain);
    }

        
    if ( parseInt(gfn_subStr(tBussNo,9,1)) == nChkValue )
    {
       return true;
    }
    else
    {

       return false;
    }

}

/*------------------------------------------------------------------
/기능 : 주민등록번호 적함성 여부 체크 함수
/인수 : val1-주민번호앞6자리 val2-주민번호뒤7자리
/리턴 : 0(적합), -1(부적합)
------------------------------------------------------------------*/
function fnCheckJumin( val1, val2 ) 
{

	var tmp1, tmp2, tmp3;
	var t1, t2, t3, t4, t5, t6, t7;
	
	tmp1 = gfn_subStr(val1, 2, 2 );
	tmp2 = gfn_subStr(val1, 4, 2 );
	tmp3 = gfn_subStr(val2, 0, 1 );
           
	if( fnDoCheckProResnoLength( val1 ) == -1 ) return -1;
	if( fnDoCheckPreResnoLength( val2 ) == -1 ) return -1;
	if ( (tmp1 < "01") || (tmp1 > "12") ) return -1;
	if ( (tmp2 < "01") || (tmp2 > "31") ) return -1;
	if ( (tmp3 < "1" ) || (tmp3 > "4" ) ) return -1;
	
	t1  = gfn_subStr(val1, 0, 1 );
	t2  = gfn_subStr(val1, 1, 1 );
	t3  = gfn_subStr(val1, 2, 1 );
	t4  = gfn_subStr(val1, 3, 1 );
	t5  = gfn_subStr(val1, 4, 1 );
	t6  = gfn_subStr(val1, 5, 1 );
	t11 = gfn_subStr(val2, 0, 1 );
	t12 = gfn_subStr(val2, 1, 1 );
	t13 = gfn_subStr(val2, 2, 1 );
	t14 = gfn_subStr(val2, 3, 1 );
	t15 = gfn_subStr(val2, 4, 1 );
	t16 = gfn_subStr(val2, 5, 1 );
	t17 = gfn_subStr(val2, 6, 1 );    
	
	var tot = parseInt(t1)  * 2 + parseInt(t2)  * 3 + parseInt(t3)  * 4 + parseInt(t4)  * 5 + parseInt(t5)  * 6 + parseInt(t6)  * 7;
	tot    += parseInt(t11) * 8 + parseInt(t12) * 9 + parseInt(t13) * 2 + parseInt(t14) * 3 + parseInt(t15) * 4 + parseInt(t16) * 5 ;
		
	var result = parseInt(tot) % 11;
	result = ( 11 - parseInt(result) ) % 10;
	
	if (result == t17) {
		return 0;
	} else {
		return -1;
	}
}

/*------------------------------------------------------------------
/기능 : 주민번호 형식 check (앞 6자리)
/인수 : 주민번호 앞자리
/리턴 : 0(적합), -1(부적합)
------------------------------------------------------------------*/
function fnDoCheckProResnoLength( szProResno ) 
{				
	if( szProResno.length == 6 ) {
    	return 0;
    } else {
    	return -1;	
    }
}	
/*------------------------------------------------------------------
/기능 : 주민번호 형식 check (뒤 7자리)
/인수 : 주민번호 뒤자리
/리턴 : 0(적합), -1(부적합)
------------------------------------------------------------------*/
function fnDoCheckPreResnoLength( szPreResno ) 
{				
	if( szPreResno.length == 7 ) {
		return 0;
	} else {
		return -1;	
	}
	
} 
/*------------------------------------------------------------------
/기능 : 외국인 주민번호 형식 check
/인수 : 주민번호 
/리턴 : 0(적합), -1(부적합)
------------------------------------------------------------------*/
function fnCheckJumin2(reg_no) {
/*
    var sum = 0;
    var odd = 0;
    
    buf = new Array(13);
    for (i = 0; i < 13; i++) buf[i] = parseInt(reg_no.charAt(i));

    odd = buf[7]*10 + buf[8];
    
    if (odd%2 != 0) {
      return false;
    }

    if ((buf[11] != 6)&&(buf[11] != 7)&&(buf[11] != 8)&&(buf[11] != 9)) {
      return false;
    }
     
    multipliers = [2,3,4,5,6,7,8,9,2,3,4,5];
    for (i = 0, sum = 0; i < 12; i++) sum += (buf[i] *= multipliers[i]);


    sum=11-(sum%11);
    
    if (sum>=10) sum-=10;

    sum += 2;

    if (sum>=10) sum-=10;

    if ( sum != buf[12]) {
        return false;
    }
    else {
        return true;
    }
*/
}
/*------------------------------------------------------------------
/기능 : 날짜 여부를 확인한다.(년월일)
/인수 : sYmd 입력스트링(YYYYMMDD)
/리턴 : 0(적합), -1(부적합) => 적합이면 날짜값
------------------------------------------------------------------*/
function G_fn_IsDateYMD(sYmd)
{
	sYmd = gfn_trim(sYmd);
	
 	if(  gfn_length(sYmd)< 1) {
    	return -1;
  	}
  	
    // 숫자 확인
    if(G_fn_IsNumber(sYmd) == -1) {
    	alert("날짜는 숫자만 입력하십시오.!!!","날짜 체크 오류");
    	return -1;
  	}
  	
  	// 길이 확인
  	if(gfn_length(sYmd) == 8) {
  	} else {
	    alert("일자의 형식을 확인하여 주십시요.","날짜 체크 오류"); //20040111 정인혁(홍과장요구사항)
    	return -1;
  	}
  	
  	var iYear	= toNumber(gfn_subStr(sYmd,0,4));		//년도입력(YYYY)
  	var iMonth	= toNumber(gfn_subStr(sYmd,4,2));		//월입력(MM)
  	var iDay	= toNumber(gfn_subStr(sYmd,6,2));		//일자입력(DD)
  	
  	if((iMonth < 1) ||(iMonth >12)) {
	    alert(iMonth+"월의 입력이 잘못 되었습니다.!!!","날짜 체크 오류");
        return -1;
  	}
  	
  	// 날짜의 존재 여부를 확인
  	if(!gfn_isDate(sYmd)) {
	    alert("해당일자는 존재하지 않습니다.!!!","날짜 체크 오류");
    	return -1;
  	}
  	
  	return 0;
}


/*------------------------------------------------------------------
/기능 : 입력값이 숫자인지를 확인한다
/인수 : sVal 입력스트링
/리턴 : 0(적합), -1(부적합) => 적합이면 숫자값
------------------------------------------------------------------*/
function G_fn_IsNumber(sVal)
{  
  	var i, iBit;  	
  	var ll_str_len;
  	
  	ll_str_len = gfn_length(sVal);  //.length();

  	for(i=0; i<ll_str_len; i++){	    	 
		var iBit = gfn_subStr(sVal,i,1);
		if((iBit < 0 ) || (9 < iBit)){
			return -1;  
		}   
  	} 
  	return 0;
}


/*------------------------------------------------------------------
/기능 : 동일값이 존재하는지 확인한다
/인수 : dsObj 데이터셋 콤포넌트의 이름 (예 : dsGrid01)
		 sCol 비교를 원하는 컬럼명
/리턴 : 동일값이 존재하는 로우값(없을경우엔 0)
------------------------------------------------------------------*/
function G_fn_Duplicate(dsObj,sCol)
{
	for (var i = 0; i < dsObj.getRowCount(); i++){
		for (var j = 0; j < dsObj.getRowCount(); j++){
			if ((i != j) && (dsObj.getColumn(i,sCol) == dsObj.getColumn(j,sCol))){                																																																		
				return j;
			}																																																						
		}
	}
	return -1;
}

/*------------------------------------------------------------------
/기능 : 필수항목 확인
/인수 : dsObj 데이터셋 콤포넌트의 이름 (예 : dsGrid01)
         sCol  필수입력에 해당하는 컬럼명 (예 : sys_cd$sys_nm)
         iCount 필수입력 항목의 컬럼 카운트 예 : 2)
/리턴 : 필수입력 항목이 빈 해당 로우값 없을 경우 0
------------------------------------------------------------------*/
function gprRequired(dsObj, sCol, iCount)
{
	// 필수항목 확인
	for (var i = 0; i < dsObj.getRowCount(); i++){
		for (var j = 1; j <= iCount; j++){
			if((gfn_length(gfn_trim(dsObj.getColumn(i,nToken(sCol, "$", j))))) == 0){
				return i;
			}	
		}
	}
	
	return -1;
} 
  

/*------------------------------------------------------------------
/기능 : 필수항목 확인
/인수 : dsObj 데이터셋 콤포넌트의 이름 (예 : dsGrid01)
         stru  필수입력에 해당하는 컬럼명 (예 : sys_cd$sys_nm)-배열
         stru_nm 필수입력에 해당하는 컬럼명 한글명 - 배열
/리턴 : 필수입력 항목이 빈 해당 로우값 없을 경우 0
------------------------------------------------------------------*/
function G_fn_SaveNullChk(dsObj,stru,stru_nm) 
{
	for (i=0;i<dsObj.getRowCount();i++){
		if(GetRowType(dsObj,i)== "normal") continue; 
		for(j=0;j<gfn_length(stru);j++){
			var data = dsObj.getColumn(i,stru[j]);
			if (( gfn_length(gfn_trim(data+""))== 0 )) {				
				alert("필수 항목을 확인하세요 !\n [ "+stru_nm[j] + " ]" );
				return stru[j]+";"+i;
			} 
		}  
	}
	return  true;
}   
 
//================================================================================
// 4.	Dataset Common Script
//================================================================================
/*------------------------------------------------------------------
/기능 : 데이터셋의 변경유무 체크
/인수 : dsObj 데이터셋 콤포넌트의 이름 (예 : dsGrid01)
         iCount 필수입력 항목의 컬럼 카운트 예 : 2)
/리턴 : 필수입력 항목이 빈 해당 로우값 없을 경우 0
------------------------------------------------------------------*/
function G_fn_IsUpdated(dsObj) 
{
	var RetVal = false;
	var RowCnt;
   var Row;

	RowCnt = dsObj.getRowCount();
	for(Row = 0; Row < RowCnt; Row++) {
		if(GetRowType(dsObj,Row)<> "normal"){
			return true;
		}
	}

   RowCnt = GetORgBuffCount(dsObj);
   for(Row = 0; Row < RowCnt; Row++){
		if(/* GetOrgBuffType은 지원되지 않는 메서드입니다.*/ dsObj.GetOrgBuffType(Row) == "delete"){
			return true;
		}
	}
	
	return false;
}  

/*------------------------------------------------------------------
/기능 : 데이터넷의 내용을 그대로 alert으로 찍어준다.
/인수 : dsObj 데이터셋 콤포넌트의 이름 (예 : dsGrid01)         
------------------------------------------------------------------*/
function G_fn_ShowDataset(dsObj)
{	
	var i,j;
	var tempStr = "";
	var RowCount = dsObj.getRowCount();
	var ColCount = dsObj.getColCount();
	
	//Dataset ID 출력
	tempStr = "[" + dsObj.name + "]\n\n"; 
	
	//Column ID 출력
	tempStr = tempStr + "|";
	for (j=0; j < ColCount; j++)
		tempStr = tempStr + dsObj.getColID(j) + "\t|";
	tempStr = tempStr + "\n\n";
	
	//Column Data 출력 
	for (i=0; i < RowCount; i++) {
		tempStr = tempStr + "Row "+ i + " :\n";
		for (j=0; j < ColCount; j++) {
			tempGetColumn = dsObj.getColumn(i, j);	
			tempStr = tempStr + tempGetColumn;
			
			if ((j == 10)||(j == 20)||(j == 30)||(j == 40)||(j == 50)){
				tempStr = tempStr + "\n|";
			}else{
				tempStr = tempStr + "\t|";
			}
		}
		tempStr = tempStr + "\n\n";
	}
	alert(tempStr);
}

/*------------------------------------------------------------------
/기능 : Radio에 전체를 Data를 추가한다.
/인자 : sDataSet : DataSet,
			sKey       : DataSet의 해달 그룹Key
			iColumnCount :한줄에 표시할 컬럼갯수, 
			iColumnLength : 한컬럼의 길이, 
			allflag  : 첫번째 컬럼에 전체를 추가할 것인가 여부
------------------------------------------------------------------*/
function G_fn_CommonRadio(sDataSet, sKey, iColumnCount, iColumnLength,  allflag)
{
	var i=0;
	var j=0;
	var tmp = 0;;
	var rWidth = 0;
	var iMaxLength = iColumnLength;

	var DefaultSet = ""; 
	strContents = ' <contents>' ;  
				
	for(i=0;i<sDataSet.getRowCount();i++){
		if( sDataSet.getColumn(i, "COMMON_GUBUN") == sKey ){
				
			var code = sDataSet.getColumn(i,"COMMON_CODE");
			var name = sDataSet.getColumn(i,"COMMON_NM");								
			var allMax = 0;
			if(allflag){	
				strContents +='\n <Layout	Code="ALL' +
						'"	Text="전체' +  
					                 '"	Left="' + 0 +
					                 '"	Top="'+ 0 + '"' + 
					                 ' Width="'+  toNumber(iMaxLength)  +
					                 '"	Height="20"' +  
			 				                 ' /> ' ;  
			 				                 
				allMax = toNumber(iMaxLength);
				tmp++;
				if(iColumnCount == 1){
					j++;	
					allMax = 0;
				}	 
				allflag = false;	
					
			} 
	
			var iMax = 0;
			 
			var iSub = 0;  
                        iMax =  toNumber(iMaxLength);
			
			if(i==0) 
			{
				iSub = iMax;	
			} else { 
				iSub = 0;
			}  
			 iSub = iMax;
			strContents +='\n <Layout	Code="' +code +
			                 '"	Text="' + name + 
			                 '"	Left="' + (toNumber(allMax) + (toNumber(rWidth) + toNumber(iMax)) - toNumber(iSub)) +
			                 '"	Top="'+ (j * 20) + '"' + 
			                 ' Width="'+  iMax  + 
			                 '"	Height="20"' +  
				                 ' /> ' ;  
 
			rWidth = toNumber(allMax) + rWidth+toNumber(iMaxLength); 
			 
			tmp++;			
			if(tmp >= toNumber(iColumnCount)) 
			{ 
				j++;
				tmp = 0;	  
				rWidth=0; 
				allMax = 0;
				 
			}	
		}  
	}  
	strContents +=' </contents> ';
	return strContents;
} 

/*------------------------------------------------------------------
/기능 : 데이테셋을 클리어.
/인자 : sDs : DataSet			
------------------------------------------------------------------*/
function G_fn_DSClear(sDs)
{ 
	dscount = gfn_split(sDs," ");
	for(i=0;i<gfn_length(dscount);i++)
	{  
		var cDs = gfn_split(dscount[i],"=");
		eval(cDs[0]).clearData(); 	

	}	
} 

//================================================================================
// Object Common Script
//================================================================================
/*------------------------------------------------------------------
//기능 : 바탕색을 변경해준다.
//인자 : obj - component
------------------------------------------------------------------*/
function G_fn_ObjFocus(obj)
{
	obj.style.background.color = "yellow";
}

/*------------------------------------------------------------------
//기능 : 바탕색을 변경해준다.
//인자 : obj - component
------------------------------------------------------------------*/
function G_fn_ObjKillFocus(obj)
{
	obj.style.background.color = "white";
}




//================================================================================
// Debug Common Script
//================================================================================
/*------------------------------------------------------------------
설명 : 출력할 내용을 미리 보기 위해
ds_obj : 출력할 데이타셋 명
------------------------------------------------------------------*/
function G_debug(ds_obj) {	
	Open("U_MAIN::G_debug.xml", "ds_obj="+wrapQuote(ds_obj) , 800, 400);	
}


/*------------------------------------------------------------------
/기능 : debug New Version	
/인자 : ds -Dataset
------------------------------------------------------------------*/
function g_debugex(ds)
{
	ds_debug	=ds;

	Open("U_MAIN::G_debugex.xml", "", 800, 400);	
}


/*------------------------------------------------------------------
/기능 : 문자열에 있는 모든 공란을 제거한다.
/인자 : pStr - 공백을 제거하고자 하는 스트링
------------------------------------------------------------------*/
function GF_getAllTrim(pStr){

	var tStr = pStr;
	var tReturnStr="";
	var i;

	if (pStr != null ) {
		for(i=0; i<tStr.length ; i++) {
			if (charAt(tStr,i)!= " ") {
				tReturnStr = tReturnStr + charAt(tStr,i);
			}
		}
	}else{
		return;
	}
	return tReturnStr;
}




//================================================================================
// Msessage Common Script
//================================================================================

//================================================================================
// 기타 Common Script
//================================================================================

/*----------------------------------------------------------------
/설  명 : 출력 공통
/인  자 : dshead - head dataset
				dsbody - body dataset
				report - report 파일명
				flag	- "DS_only" 데이터셋 1개로 구성될경우...
----------------------------------------------------------------*/
function G_ToPrint(dshead, dsbody, report, flag)
{
	var arg;
	
	arg	="dshead=" + "DS_Head" + " dsbody="+ "DS_body" + " report="+ report + " flag=" + flag;

	gfn_dialog("", "COMM::G_REPORT_ACC.xml", arg);
}

function G_ToPrint_Obj(dshead, dsbody, report, flag)
{
	var arg;
	
	Copy(DS_Head,dshead);
	Copy(DS_Body,dsbody);	
	
	arg	="dshead=" + "DS_Head" + " dsbody="+ "DS_body" + " report="+ report + " flag=" + flag;
	
	gfn_dialog("", "COMM::G_REPORT_ACC.xml", arg);
}

function fn_ChartColor(chart, gallery, serial_cnt)
{
	v_bar_color[0]	="#0033CC";
	v_bar_color[1]	="#5EBF00";
	v_bar_color[2]	="#FF130F";
	v_bar_color[3]	="#FFD917";
	v_bar_color[4]	="#D12A96";
	v_bar_color[5]	="#9AD000";
	v_bar_color[6]	="#D30067";
	v_bar_color[7]	="#E4B3EC";
	v_bar_color[8]	="#FF5400";
	v_bar_color[9]	="#FFFFFF";
	v_bar_color[10]	="#00B545";
	v_bar_color[11]	="#BEE0F0";
		
	if(gallery=="bar"){
		chart.OpenDataEx(3, serial_cnt,1);	
			for (i=0;i<serial_cnt;i++){
				v_cnt	=i % 12;				
				chart.color(i)	=v_bar_color[v_cnt];
			}
		chart.CloseData(3);
	}else if(gallery=="pie"){
		chart.OpenDataEx(3, serial_cnt,1);		
			for (i=0;i<serial_cnt;i++){
				v_cnt	=i % 12;
				chart.color(i)	=v_bar_color[v_cnt];
			}
		chart.CloseData(3);
	}
}





function fn_LoadMain()
{
	var v_obj;	
	
	if(/* Windows 객체를 지원하지 않습니다. Count은 지원되지 않는 메서드입니다.*/ application.Windows.Count()==2){
		application.MenuBar.visible	=true;
	}
	
	for (i=0;/* Windows 객체를 지원하지 않습니다. Count은 지원되지 않는 메서드입니다.*/ i<application.Windows.Count();i++){		
		if(/* Windows 객체를 지원하지 않습니다.*/ application.Windows[i].url=="MAIN::intro.xml"){			
			return;
		}
	}	
	fn_nwin("", "MAIN::intro.xml", true);	
}


function fn_nwin(formNM,formURL,bDocBar)
{
	if (gfn_length(gfn_trim(formURL))== 0) return;
		 
	var wi = -1;

	while (/* Windows 객체를 지원하지 않습니다. Count은 지원되지 않는 속성입니다.*/ wi < application.Windows.Count){
		wi++;
		if (/* Windows 객체를 지원하지 않습니다.*/ application.Windows[wi].name == formURL) {
			/* Windows 객체를 지원하지 않습니다.*/ application.Windows[wi].setFocus();
			return; 
			}			
	}
	
	if( bDocBar == false ) {
		application.MenuBar.visible = false;			
	} else {
		application.MenuBar.visible = true;			
	}	
	newWindow(formNM,formURL,"", "","", "instance=single,autosize=max", "openstyle=max", -1);

}
		
function fn_exit()
{
	close();
}
		
		
function fn_GoHome()
{
	var v_obj;
	var v_find;
	
	for (i=0;/* Windows 객체를 지원하지 않습니다. Count은 지원되지 않는 메서드입니다.*/ i<application.Windows.Count();i++){		
		if(/* Windows 객체를 지원하지 않습니다.*/ application.Windows[i].url=="U_MAIN::main_intro.xml"){
			v_find	=true;
			/* Windows 객체를 지원하지 않습니다.*/ v_obj	=application.Windows[i];
			
			break;
		}
	}
	
	if(v_find==true){
		v_obj.setFocus();
	}else{
		fn_nwin("", "U_MAIN::main_intro.xml", true);
	}
	
}


function fn_GetHelpG(system)
{
	var v_arg;
	var v_doc;
	var v_title;	
	var v_form_id ;
	var v_nRow;

	//trace("system : " + system);
	//v_form_id = DIV_MAIN.url.replace(toupper(system) + "::", "");
	v_form_id = gfn_replace(nToken(DIV_MAIN.url, "::", 2),":", "");
	//trace("v_form_id : " + v_form_id);
	
	//trace(" DS_com_make_menux.findrow : " + DS_com_make_menux.findrow("PGM_ID",v_form_id));
	v_nRow = DS_com_make_menux.findRow("PGM_ID",v_form_id);
	v_title	=	DS_com_make_menux.getColumn(v_Row, "PGM_TEXT");
	
	v_doc	= 	DS_com_make_menux.getColumn(v_nRow, "PGM_PATH");	
	v_doc	+=	"/" + gfn_replace(v_form_id, ".xml", "");	
	v_doc	+=	"/" + gfn_replace(v_form_id, ".xml", ".htm");	

	v_arg	="title="	+ wrapQuote("System Management - " + v_title);
	v_arg	+=" page="	+ wrapQuote("http://erp.dweng.co.kr/help/" + v_doc);			
	
	trace("v_arg : " + v_arg);

	Open("COMM::G_WEB.xml", v_arg, 850, 600, true, 100, 50);

}

/*
 ******************************************************************************************
 * 함  수  명   : ObjStyleSet
 * 입      력   : obj  = Form Component
 * 반      환   : 없음
 * 기      능   : Form에 있는 Component를 system ID에 따라 스타일을 작성한다.
 * 작  성  자   : 구종화
 * 작성  일자   : 2007-11-16
 * ----------------------------------------------------------------------------------------
 * HISTORY    :
 ******************************************************************************************
 */
function fn_ObjStyleSet(obj)
{
	//-----------------------------------------------
	// Form Object Search
	//-----------------------------------------------
	var objForm = obj;
	
	gds_component.enableevent = false;
	gds_component.deleteAll();
	
	//====================================================================
	//	Form에 있는 Component object를 검색하여 DS_component에 저장한다.
	//====================================================================
	var objComponent;
	var i,nAddRow;
	var strParent,strCompName,strCompType,strCompComposite;
	var strUserdata;
	
	strParent = objForm.name;
	
	for (i=0 ; i < gfn_length(objForm.all);i++)
	{
		// Object를 구한다.
		objComponent = objForm.all[i];
		
		// Dataset에 세트할 데이터를 구한다.
		strCompName 		= objComponent.name;
		strCompType 		= GetType(objComponent);
		strCompComposite 	= IsComposite(objComponent);
		strUserdata 		= "";
		//strUserdata 		= objComponent.UserData;

		//====================================================================
		//	System별 Component에 따른 style을 적용한다.- 시작
		//====================================================================
		
		switch(g_SystemId){
			case "IFIS":
					switch(strCompType){
						case "Grid":
							objComponent.style.background.color 	= "#FFFFFF";
							objComponent.style.background1.color 	= "#F6FCFC";
							break;
					}
				break;
			case "FICS":
					switch(strCompType){
						case "Grid":
							objComponent.style.background.color 	= "#FFFFFF";
							objComponent.style.background1.color 	= "#EEF9E6";
							break;
					}
				break;
			case "FOMS":
					switch(strCompType){
						case "Grid":
							objComponent.style.background.color 	= "#FFFFFF";
							objComponent.style.background1.color 	= "#E5F7F6";
							break;
					}
				break;
		}
		
		//====================================================================
		//	Component에 따른 style을 적용한다.- 끝
		//====================================================================
		//if(strUserdata == "1") {
		//	objComponent.Enable	= false;
		//}
		
		// Dataset을 세트한다.
		nAddRow = gds_component.addRow();
		gds_component.setColumn(nAddRow,"COMP_OWNER",strParent);
		gds_component.setColumn(nAddRow,"COMP_ID",strCompName);
		gds_component.setColumn(nAddRow,"COMP_TYPE",strCompType);
		gds_component.setColumn(nAddRow,"COMP_COMPOSITE",strCompComposite);
		gds_component.setColumn(nAddRow,"COMP_USERDATA",strUserdata);
	
	}
	
	gds_component.enableevent = true;
	gds_component.rowposition = 0;
	
	//G_debug("gds_component");
	
} 

/*
 ******************************************************************************************
 * 함  수  명   : fn_common_code
 *                ex) combo -> fn_common_code("'FS0003','FS0004'", "일반", "일반", "all" , "Y")
 *                ex) etc -> fn_common_code("'FS0003'", "", "", "" , "Y")
 * 입      력   : in_case1  = 공통코드 그룹코드 [ in 조회조건 Sql ]
 *                in_cd     = 검색조건 상세코드
 *                in_cdnm   = 검색조건 상세코드명
 *                in_cbotype= combo type 일때 List View 초기 정보 선택
 *                            non : normal
 *                            blk : 첫라인에 blank 행 삽입 [ 코드: blank, 코드명 : ]
 *                            all : 첫라인에 "전체" 행 삽입 [ 코드 : all, 코드명 : 전체 ]
 *                in_searchyn = "Y" : 조회, "N" : 화면만 Loading [ Popup 서비스 시 사용 ]
 * 반      환   : v_ret = DataSet
 * 기      능   : 공통코드 중 선택된 그룹의 코드 상세정보를 Dataset으로 반환한다.
 * 작  성  자   : 구종화
 * 작성  일자   : 2007-11-16
 * ----------------------------------------------------------------------------------------
 * HISTORY    :
 ******************************************************************************************
 */
	//////////// X - Framework ////////////////////
    //fsp_init(null);
	//fsp_clear(null);
    //// 조회 
    //fsp_addSearch(null, "sc/scc:SCC_COMMON_CODE_SELECT");
    //// 서버 호출 
    //fsp_callService(this, "", "", "", "gds_common_code=gds_common_code", "GROUP_CODE=" + quote(in_case1), "_fn_searchCode");
	//////////// X - Framework ////////////////////
function fn_common_code(in_case1,in_cd,in_cdnm,in_cbotype,in_searchyn)
{
	gds_common_code.clear();
	
	if (in_searchyn == "Y")
	{
		var ActioinVal	= "";
		var OutDS		= "";
		var InDS		= "";
	
		ActionVal		 = "in_case1="+wrapQuote(gfn_trim(in_case1));
		ActionVal		+= " in_cd="+wrapQuote(gfn_trim(in_cd));
		ActionVal		+= " in_cdnm="+wrapQuote(gfn_trim(in_cdnm));
		ActionVal		+= " in_cbotype="+wrapQuote(gfn_trim(in_cbotype));
		OutDS			= "gds_common_code=gds_common_code";
	//alert(ActionVal);	

		//Transaction Start Time
		var objDate = new Date();
		var nStartTime = objDate.getTime(); //Milliseconds
    		
		http.Sync		= true;
//http.Compress = true;
//http.CompressMethod = "ZLIB";
		Transaction("SCC_COMMON_CODE_SELECT" + "&" + nStartTime,"U_svc::" + "sc/scc/SCC_COMMON_CODE_SELECT.jsp",InDS,OutDS,ActionVal,"_fn_searchCode");
		http.Sync		= false;
//http.Compress = false;
//http.CompressMethod = "";
	}

	if (( in_cbotype == "all" ) && ( gds_common_code.rowcount > 1 )) {
		for ( var i = 0; i < gds_common_code.rowcount; i++ ) {
		  if ( gds_common_code.getColumn(i, "CODE_NAME") == "전체" )
			gds_common_code.setColumn(i, "CODE", null);
		}	
	}
	
	v_ret	= gds_common_code;	
	return v_ret;
}

function _fn_searchCode(errCode, errMsg) {
	//alert( gds_common_code.saveXml());
	
}

/*
 ******************************************************************************************
 * 함  수  명   : fn_common_code_popup
 * 입      력   : in_case1  = 공통코드 그룹코드 [ in 조회조건 Sql ]
 *                in_cd     = 검색조건 상세코드
 *                in_cdnm   = 검색조건 상세코드명
 *                in_searchyn = "Y" : 조회, "N" : 화면만 Loading [ Popup 서비스 시 사용 ]
 *                leftPx = Screen 을 기준으로 하는 Dialog 의 왼쪽 좌표
 *                topPx  = Screen을 기준으로 하는 Dialog의 위쪽 좌표
 * 반      환   : v_result = 글로벌 DATASET gds_common_code의 선택된 ROW 위치
 * 기      능   : 공통코드 중 선택된 그룹의 코드 상세정보를 Dataset으로 반환한다.- popup용
 * 작  성  자   : 구종화
 * 작성  일자   : 2007-11-16
 * ----------------------------------------------------------------------------------------
 * HISTORY    :
 ******************************************************************************************
 */
//사용하는 프로그램 없슴 2014-12-10
// function fn_common_code_popup(in_groupcd,in_cd,in_cdnm,in_searchyn,leftPx,topPx)
// {
// 	var	v_result="";
// 	var arg_code= new Array();
// 
// 	fn_common_code(in_groupcd,in_cd,in_cdnm,"non",in_searchyn);
// 	if (gds_common_code.getRowCount() == 1) {
// 			return 0;
// 	}
// 	
// 	arg_code["fa_in_cd"]      = Trim(in_cd);
// 	arg_code["fa_in_groupcd"] = Trim(in_groupcd);
// 	
// 	v_result = gfn_dialog("", "U_SCC::SCCPOPUP1.xfdl", arg_code);
// 
// 	if (v_result == -1 || v_result == null || v_result == "") {
// 		return "";
// 	}
// 	return v_result;
// }

/*
 ******************************************************************************************
 * 함  수  명   : fn_Sql_popup
 * 입      력   : Cwin  	= Popup Code (SCC_POPUP_MST Table)
 *                leftPx 	= Screen 을 기준으로 하는 Dialog 의 왼쪽 좌표
 *                topPx  	= Screen을 기준으로 하는 Dialog의 위쪽 좌표
 *                add_where = 추가 where 조건(단, 서비스에 기술이 되어 있어야하며 [변수=값] 형식으로 전달한다.
 *                field_id  = input DataSet의 field id
 *                field_val = input DataSet의 field id의 value
 *                search_yn = popup 후 Search 유무
 *                v_Call_Type = 서버호출 방식("XML"/"JSP")
 *
 * 반      환   : v_ret = Popup에서 선택된 Row (Global DataSet gds_Cout의 선택된 Row)
 *
 * 기      능   : 서비스(X-FrameWork으로 작성된 Sql code)로 작성된 Sql의 결과를 
 *                POPUP으로 Return하여 Return된 정보중 특정정보를 선택할 수 있다.
 *                (Code Popup 확장판)
 *
 * 작  성  자   : 구종화
 * 작성  일자   : 2007-11-22
 * ----------------------------------------------------------------------------------------
 * HISTORY    :
 ******************************************************************************************
 */
function fn_Sql_popup(Cwin,leftPx,topPx,add_where,field_id,field_val,search_yn)
{
	//v_rst = fn_Sql_popup(obj.UserData,-1,-1,v_add_where,v_field_id,v_field_val,v_search_yn);
	var	v_result="";
	
	gds_Cwin.clear();
	gds_Csqlout.clear();
	// Pop-Up 될 Window 구성 정보를 획득
	//--------------- X - Framework ------------------
    fsp_init(null);
	fsp_clear(null);
    //// 조회 
    fsp_addSearch(null, "sc/scz:SCZ_WIN_SEARCH");
    //// 서버 호출 
	http.Sync		= true;
    fsp_callService(this, "", "", "", "gds_Cwin=gds_Cwin", "POPUP_CODE=" + wrapQuote(Cwin), "_fn_searchCode");
	http.Sync		= false;
	//--------------- X - Framework ------------------
	
	if(gds_Cwin.getRowCount() <> 1) {
		return "ERR : POPUP 정보 오류!!";
	}
	// g_debug("gds_Cwin");
	
	var arg_code		= new Array();
	//var v_open			= "";
	var	v_popup_code 	= gfn_trim(gds_Cwin.getColumn(0, "POPUP_CODE"));
	var v_target_table 	= gfn_trim(gds_Cwin.getColumn(0, "TARGET_TABLE"));
	var v_height		= gds_Cwin.getColumn(0, "WIN_H");
	var v_width			= gds_Cwin.getColumn(0, "WIN_W");
	var v_pre_query_yn	= gds_Cwin.getColumn(0, "PRE_QUERY_YN");
	var v_wintitle		= gfn_trim(gds_Cwin.getColumn(0, "DESCRIPTION"));
	var v_Call_Type 	= gfn_trim(gds_Cwin.getColumn(0, "CALL_TYPE"));
//trace( gds_Cwin.getColumn(0, "TARGET_TABLE") + ">>>>>>>" + gfn_trim(gds_Cwin.getColumn(0, "TARGET_TABLE")) ); 
	arg_code["fa_popup_code"]   = gfn_nvl(v_popup_code);
	//임시수정
	//trace("v_target_table==="+v_target_table);
	//trace(gds_Cwin.saveXML());
	arr_table = v_target_table.split(":");
	//v_target_table = "U_svc::" <--기존코드
	v_target_table = "" 
	               + arr_table[1].substr(0,2).toLowerCase() + "/" 
	               + arr_table[1].substr(0,3).toLowerCase() + "/"
	               + arr_table[1];
	if ( v_Call_Type == "JSP" ) {
		v_target_table = "U_svc::" + v_target_table;
	}

	arg_code["fa_target_table"] = gfn_nvl(v_target_table);
//trace(	"v_target_table==="+v_target_table);
	arg_code["fa_pre_query_yn"] = gfn_nvl(v_pre_query_yn);
	arg_code["fa_wintitle"]     = gfn_nvl(v_wintitle);
	arg_code["fa_w_w"]          = gfn_nvl(v_width);
	arg_code["fa_w_h"]          = gfn_nvl(v_height);
	arg_code["fa_CallType"]     = gfn_nvl(v_Call_Type);
	
	//v_rst = fn_Sql_popup(obj.UserData,-1,-1,add_where,field_id,field_val,search_yn);
	arg_code["fa_add_where"] = gfn_nvl(add_where);
	arg_code["fa_field_id"]  = gfn_nvl(field_id);
	arg_code["fa_field_val"] = gfn_nvl(field_val);
	arg_code["fa_search_yn"] = gfn_nvl(search_yn);
	// PopUP 할 window의 기본 설정값을 설정한다. (Window Open Style : strOpenStyle)
	//v_open	 += "TitleBar=true AutoSize=false";

	v_result = gfn_dialog("", "U_SCC::SCCPOPUP2.xfdl", arg_code, v_width, v_height);
	if (v_result < 0 || gfn_isNull(v_result)) {
		return "";
	}

	return v_result;
}

// /*===============================================================
// = 기능 : Grid Sort UnMask
// = 인수 : i		해당 컬럼 Index
// ===============================================================*/
// function fn_MultiSort_UnMask(i)
// {
// 	replace(replace(v_find_grd.getCellProperty("head",i,"text"),"▲"),"▼");
// 	return;
// }

// /*===============================================================
// = 기능 : Grid Sort UnMask
// = 인수 : i		해당 컬럼 Index
// ===============================================================*/
// function fn_MultiSort_Mask(i, title)
// {
// 	v_find_grd.setCellProperty("head",i,"text",title);
// 	return;
// }

// /*===============================================================
// = 기능 : Find Window에서 지정한 컬럼으로 이동
// = 인수 : _Where		해당 컬럼명
// ===============================================================*/
// function fn_Find_Grid_Position(_Where)
// {
// 	for ( var i = 0 ; i < v_find_grd.getColCount() ; i++) {
// 		if ( _Where == v_find_grd.getCellProperty("body",i,"text") ) {
// 			v_find_grd.enableredraw = false;
// 			v_find_grd.setCellPos(i);
// 			v_find_grd.enableredraw = true;
// 			break;
// 		}
// 	}
// 	return;
// }

/*===============================================================
= 기능 :  엔터키시 다음 탭 지정 컴포넌트로 이동
= 인수 : Gridobj		Grid Object
         nCell			Column Index(Click Head index)
===============================================================*/

function fn_form_OnKeyDown(obj,e)
{
	// 신규 함수로 대체
	gfn_formKeyDown(obj, e);	
// 	if ( nChar == 80 && bControl && ToUpperCase(GetType(objSenderObj))== "GRID" ) // Ctrl+P 키 (출력)
// 	{
// 		if ( eval(objSenderObj.Binddataset).getRowCount() < 1 ) return;
// 
// 		gfn_dialog("",  "U_SCC::SCC95000P.xfdl","fa_grid_ID="+wrapQuote(objSenderObj.name)      
// 									  +" fa_grid_Title="+wrapQuote(objSenderObj.name)   
// 									  +" fa_grid_SubTitle="+wrapQuote(objSenderObj.name) 
// 									  +" fa_grid_Name="+wrapQuote(objSenderObj.name) );
// 			
// 	}
// 	
// // 	서동혁과장 요청 (2008.06.24)
// // 	// Ctrl+E 키 (엑셀변환)
// // 	if ( nChar == 69 && bControl && ToUpperCase(objSenderObj.GetType()) == "GRID" )
// // 	{
// // 		if ( Object(objSenderObj.BindDataset).RowCount() < 1 ) return;
// // 		
// // 			objSenderObj.ExportExcelEx("sheet1");
// // 	}
// 	
// 	//그리드에 첫 칼럼에 엑셀아이콘이 있는 것만 엑셀변환 기능 구동
// 	if ( nChar == 69 && bControl && ToUpperCase(GetType(objSenderObj))== "GRID" )
// 	{
// 		//데이터 없어도 제목으로 구성된 엑셀이라도 만들자
// 		//if ( object(objSenderObj.BindDataset).RowCount() < 1 ) return;
// 
// 		if (objSenderObj.getCellProperty("head",0,"backgroundimage") == "ico_Excel")
// 		{
// 			//objSenderObj.ExportExcelEx(obj.Title);
// 			var strTitle = replace(obj.titletext,"/",",");
// 			if (Length(strTitle)<= 0) strTitle = "Sheet1";
// 			ExportExcelEx(objSenderObj, strTitle);
// 		}
// 	}
// 
// 	// Ctrl+C 키 (그리드셀 클립보드복사)
// 	if ( nChar == 67 && bControl && ToUpperCase(GetType(objSenderObj))== "GRID" )
// 	{
// 		if ( eval(objSenderObj.binddataset).rowcount < 1 ) return;
// 		if ( eval(objSenderObj.binddataset).rowposition < 0 ) return;
// 
// 		system.clearClipboard();
// 		//SetClipBoard("CF_TEXT", objSenderObj.GetCellValue(objSenderObj.CurrentRow,objSenderObj.CurrentCell)); //데이터셑값
// 		system.setClipboard("CF_TEXT", GetCellText(objSenderObj,"body",objSenderObj.currentrow,objSenderObj.currentcell)); //그리드셀값
// 	}
// 	// Ctrl+L 키 (그리드라인 클립보드복사)
// 	if ( nChar == 76 && bControl && ToUpperCase(GetType(objSenderObj))== "GRID" )
// 	{
// 		if ( eval(objSenderObj.binddataset).rowcount < 1 ) return;
// 		if ( eval(objSenderObj.binddataset).rowposition < 0 ) return;
// 		
// 		system.clearClipboard();
// 		var strLine;
// 		for (var iCol=0; iCol<objSenderObj.getCellCount("body"); iCol++)
// 			//strLine += ", " + objSenderObj.GetCellValue(objSenderObj.CurrentRow,iCol);
// 			strLine += ", " + GetCellText(objSenderObj,"body",objSenderObj.currentrow,iCol);
// 		system.setClipboard("CF_TEXT", SubStr(strLine,2));
// 	}
// 	// Ctrl+A 키 (그리드전체 클립보드복사)
// 	if ( nChar == 65 && bControl && ToUpperCase(GetType(objSenderObj))== "GRID" )
// 	{
// 		if ( eval(objSenderObj.binddataset).rowcount < 1 ) return;
// 		
// 		system.clearClipboard();
// 		system.setClipboard("CF_TEXT", objSenderObj.getCsvData(true));  // 외부 Excel에 Ctrl+c로 보낼수 있는 예제
// 	}
// 
// 	// Ctrl+M 키 (다중소트)
// 	if ( nChar == 77 && bControl && ToUpperCase(GetType(objSenderObj))== "GRID" )
// 	{
// 		if ( eval(objSenderObj.binddataset).getRowCount() < 2 ) return;
// 		
// 		v_grd_head  = "";
// 		v_col_name  = "";
// 		v_col_Index = "";
// 		
// 		for(i=0; i<objSenderObj.getCellCount("head"); i++) 
// 		{
// 			if (Length(Trim(objSenderObj.getCellProperty("head",i,"text")))== 0) continue;
// 			//
// 			v_grd_head  = v_grd_head  + ";" + replace(replace(objSenderObj.getCellProperty("head",i,"text"),"▲",""),"▼","");
// 			v_col_name  = v_col_name  + ";" + objSenderObj.getCellProperty('body',i,"text");
// 			v_col_Index = v_col_Index + ";" + objSenderObj.getCellProperty('body',i,"col");
// 		}		
// 		
// 		v_grd_head  = SubStr(v_grd_head,1);
// 		v_col_name  = SubStr(v_col_name,1);
// 		v_col_Index = SubStr(v_col_Index,1);
// 		
// 		v_find_grd = objSenderObj;
// 		var str_result;
// 		str_result = gfn_dialog("",  "U_SCC::SCC93000P.xfdl","fa_ds="+wrapQuote(objSenderObj.binddataset) );
// 		
// 		//alert(str_result);
// 		if ( Length(Trim(str_result))!= 0 ) Sort(eval( objSenderObj.binddataset ),str_result);
// 		
// 	}
// 	
// 	if ( nChar == 70 && bControl && ToUpperCase(GetType(objSenderObj))== "GRID" ) // Ctrl+F 키 (찾기)
// 	{
// 		if ( eval(objSenderObj.binddataset).getRowCount() < 1 ) return;
// 		
// 		v_grd_head = "";
// 		v_col_name = "";
// 
// 		// for(i=0;i<objSenderObj.GetCellCount("head"); i++) 
// 		// {
// 			// if ( objSenderObj.GetCellProp('head',i,"colspan") == "1" ) 
// 				// v_grd_head = v_grd_head + ";" + objSenderObj.GetCellProp('head',i,"text");
// 		// }		
// 
// 		for(i=0;i<objSenderObj.getCellCount("body"); i++) 
// 		{
// 			v_col_name = v_col_name + ";" + objSenderObj.getCellProperty('body',i,"text");
// 			v_grd_head = v_grd_head + ";" + objSenderObj.getCellProperty('head',i,"text");
// 		}		
// 		
// 		v_grd_head = SubStr(v_grd_head,1);
// 		v_col_name = SubStr(v_col_name,1);
// 		
// 		v_find_grd = objSenderObj;
// 		gfn_dialog("",  "U_SCC::SCC92000P.xfdl","fa_ds="+wrapQuote(objSenderObj.binddataset)+" fa_pos="+objSenderObj.getCellPos() );
// 	}
// 	
// 	if ( nChar == 13 ) // Enter 키
// 	{
// 		
// 		// 엔터키 입력시 해당 컴퍼넌트가 텍스트 에어리어인 경우는 걍 패쓰....
// 		if ( ToUpperCase(GetType(objSenderObj))== "TEXTAREA" ) return;
// 		
// 		var tmpObj;
// 		// 컴퍼넌트가 탭인 경우 포커스를 주면 탭버튼에 들어가므로
// 		// 해당 탭의 탭페이지로 따라 들어가줘야 함...
// 
// 		if ( ToUpperCase(GetType(GetNextComponent(obj,true)))== "TAB" )
// 		{
// 			tmpObj = GetNextComponent(obj,true);
// 			tmpObj = GetItem(tmpObj,tmpObj.tabindex);
// 			obj = tmpObj;
// 			//trace(tmpObj.id);
// 			obj.setFocus();
// 		}
// 		else if ( ToUpperCase(GetType(objSenderObj))== "TAB" )
// 		{
// 			tmpObj = GetItem(objSenderObj,objSenderObj.tabindex);
// 			//trace(">>>>>>>>>>>>>>>" + tmpObj.id);
// 			tmpObj.setFocus();
// 		}
// 		else if ( ( ToUpperCase(GetType(objSenderObj))== "GRID" ) && ( /* Editable은 지원되지 않는 속성입니다.*/ objSenderObj.Editable ) )
// 		{
// 			//objSenderObj.redraw = false;
// 			var ret = objSenderObj.moveToNextCell();
// 			//objSenderObj.redraw = true;
// 			var ret = objSenderObj.moveToPrevCell();
// 			var ret = objSenderObj.moveToNextCell();						
// 		
// 			if ( !ret )
// 			{
// 				GetNextComponent(obj,true).setFocus();
// 			}
// 		}
// 		else if ( ToUpperCase(GetType(GetNextComponent(obj,true)))== "COMBO" ) {
// 			var nextobj = GetNextComponent(obj,true);
// 			nextobj.setFocus();
// 			nextobj.dropdown();
// 		}
// 		else
// 		{
// 			GetNextComponent(obj,true).setFocus();
// 		}
// 		
// 		return;
// 	}	
}

function g_Confirm(status, msg)
{
	var blnRtn 		= false;	// 결과값을 반환 [ true, false ]
	var v_open 		= "";		// 창을 띄울때 창의 모양 및 기능을 setting
	var arg_code 	= "";		// 창에 전달될 변수
	var leftPx 		= -1;		// 창의 left 위치
	var topPx 		= -1;		// 창의 top 위치
	var v_width 	= 400;		// 창의 넓이
	var v_height 	= 130;		// 창의 높이
	
	if ( gfn_length(gfn_trim(msg))== 0 ) {
		switch(status)
		{
			case "01":
				msg	= "선택하신 데이터를 삭제 하시겠습니까?";
				break;
			case "02":
				msg	= "데이터를 저장하시겠습니까?";	
				break;
			case "03":
				msg	= "선택하신 데이터를 복사 하시겠습니까?";
				break;
			case "04":
				msg	= "작업을 처리하시겠습니까?";		
				break;
			default:
				msg	= "작업을 처리하시겠습니까?";		
		}
	}
// 	msg 		= replace(msg, " ", "%20");
// 	msg			= replace(msg, "\n", "Wn");
// 	arg_code	= "fa_tp="+"C"+" fa_sta="+wrapQuote(status)+" fa_msg="+msg;
// 	v_open	 	= "TitleBar=false Status=false AutoSize=false Resize=false NoMove=false";
// 	blnRtn 		= gfn_dialog("", "U_MAIN::MESSAGE_BOX.xml", arg_code, v_width, v_height, v_open, leftPx, topPx);

	// 신규 함수로 변경_kimyk
	blnRtn 		= gfn_message("C", msg);
	
	if (blnRtn == -1 || gfn_isNull(blnRtn)) {
		return "";
	}
	
	// blnRtn = confirm(msg);
	
	return blnRtn;
}

function g_Message(status, msg)
{
//	alert(msg);
	var blnRtn 		= false;	// 결과값을 반환 [ true, false ]
	var v_open 		= "";		// 창을 띄울때 창의 모양 및 기능을 setting
	var arg_code 	= "";		// 창에 전달될 변수
	var leftPx 		= -1;		// 창의 left 위치
	var topPx 		= -1;		// 창의 top 위치
	var v_width 	= 400;		// 창의 넓이
	var v_height 	= 130;		// 창의 높이
	
	if ( gfn_length(gfn_trim(msg))== 0 ) {
		switch(status)
		{
			case "01":
				msg	= "데이터가 정상적으로 삭제 되었습니다.";
				break;
			case "02":
				msg	= "데이터가 정상적으로 저장 되었습니다.";	
				break;
			case "03":
				msg	= "데이터가 정상적으로 복사 되었습니다.";
				break;
			case "04":
				msg	= "데이터가 정상적으로 처리 되었습니다.";		
				break;
			case "EE":
				msg	= "Error !! 관리자에게 문의하세요.";		
				break;
			default:
				msg	= "Error !! 관리자에게 문의하세요.";		
		}
	}

	//msg 		= replace(msg, " ", "%20");
	//msg			= replace(msg, "\n", "Wn");
	
	// 신규 함수로 변경_kimyk
	gfn_message("A", msg);
	
// 	arg_code	= "fa_tp="+"M"+" fa_sta="+wrapQuote(status)+" fa_msg="+msg;
// 	v_open	 	= "TitleBar=false Status=false AutoSize=false Resize=false NoMove=false";
// 	blnRtn 		= gfn_dialog("", "U_MAIN::MESSAGE_BOX.xml", arg_code, v_width, v_height, v_open, leftPx, topPx);

	//if (blnRtn == -1 || gfn_isNull(blnRtn)) {
	//	return "";
	//}
	
	// blnRtn = confirm(msg);
	
	// return blnRtn;
}

function g_Working(status)
{
	var blnRtn 		= false;	// 결과값을 반환 [ true, false ]
	var v_open 		= "";		// 창을 띄울때 창의 모양 및 기능을 setting
	var arg_code 	= "";		// 창에 전달될 변수
	var leftPx 		= -1;		// 창의 left 위치
	var topPx 		= -1;		// 창의 top 위치
	var v_width 	= 400;		// 창의 넓이
	var v_height 	= 130;		// 창의 높이
	var msg;

	switch(status)
	{
		case "01":
			msg	= "데이터를 처리중 입니다.";
			break;
		case "02":
			msg	= "작업중 입니다.";	
			break;
		case "03":
			msg	= "인쇄중 입니다.";
			break;
		default:
			break;		
	}
	msg = gfn_replace(msg, " ", "%20");
	msg	= gfn_replace(msg, "\n", "Wn");

	arg_code	= "fa_tp="+"P"+" fa_sta="+wrapQuote(status)+" fa_msg="+msg;
	v_open	 	= "TitleBar=false Status=false AutoSize=false Resize=false NoMove=false";
	blnRtn 		= Open("U_MAIN::MESSAGE_BOX.xml", arg_code, v_width, v_height, v_open, leftPx, topPx);

	//return	blnRtn;
}

function g_ComboBox_OnFocus(obj)
{
	obj.dropdown();
}

function g_Date_OnFocus(obj)
{
	obj.setSelect(0);
}

function g_Date_OnKillFocus(obj)
{
	var currday  = gfn_today();
	var currleng = gfn_length(gfn_trim(obj.value));
	var objValue = gfn_trim(obj.value);

	if (obj.mask == "####-##-##" ) 
	{
		switch(currleng)
		{
			case 1:
				obj.value = gfn_subStr(currday,0,6)+"0"+objValue;
				break;
			case 2:
				obj.value = gfn_subStr(currday,0,6)+objValue;
				break;
			case 3:
				obj.value = gfn_subStr(currday,0,4)+"0"+objValue;
				break;
			case 4:
				obj.value = gfn_subStr(currday,0,4)+objValue;
				break;
			case 5:
				obj.value = gfn_subStr(currday,0,3)+objValue;
				break;
			case 6:
				obj.value = gfn_subStr(currday,0,2)+objValue;
				break;
			case 7:
				obj.value = gfn_subStr(currday,0,1)+objValue;
				break;			
		}

		if ( gfn_length(gfn_trim(obj.value))== 0 ) return;
	
		if ( G_fn_IsDateYMD(obj.value) == -1 ) {
			obj.value = "";
			obj.setFocus();
		}	
	}
	else {
		switch(currleng)
		{
			case 1:
				obj.value = gfn_subStr(currday,0,4)+"0"+objValue;
				break;
			case 2:
				obj.value = gfn_subStr(currday,0,4)+objValue;
				break;
			case 3:
				obj.value = gfn_subStr(currday,0,3)+objValue;
				break;
			case 4:
				obj.value = gfn_subStr(currday,0,2)+objValue;
				break;
			case 5:
				obj.value = gfn_subStr(currday,0,1)+objValue;
				break;
		}
		
		if ( gfn_length(gfn_trim(obj.value))== 0 ) return;
		
		if ( gfn_subStr(obj.value,4,2)< "01" || gfn_subStr(obj.value,4,2)> "12" ) {
			obj.value = "";
			obj.setFocus();
		}		
	}
}

function g_Month_OnKillFocus(obj)
{
	var currday = gfn_today();
	var currleng = gfn_length(gfn_trim(obj.value));
	var objValue = gfn_trim(obj.value);
	
	switch(currleng)
	{
		case 1:
			obj.value = gfn_subStr(currday,0,4)+"0"+objValue;
			break;
		case 2:
			obj.value = gfn_subStr(currday,0,4)+objValue;
			break;
		case 3:
			obj.value = gfn_subStr(currday,0,3)+objValue;
			break;
		case 4:
			obj.value = gfn_subStr(currday,0,2)+objValue;
			break;
		case 5:
			obj.value = gfn_subStr(currday,0,1)+objValue;
			break;
	}
	
	if ( gfn_length(gfn_trim(obj.value))== 0 ) return;
	
	if ( gfn_subStr(obj.value,4,2)< "01" || gfn_subStr(obj.value,4,2)> "12" ) {
		obj.value = "";
		obj.setFocus();
	}	
}

function g_CalButton_OnClick(obj)
{
	var sOldDate = eval(obj.userdata).value;
	
	// 달력
	if ( eval(obj.userdata).mask == "####-##-##" )
	{
		// 과거 달력 팝업
		//eval(obj.userdata).value = gfn_dialog("", "U_SCC::SCC_CALENDAR.xfdl","fa_Date="+eval(obj.userdata).value,-1,-1,"",-1,-1,false,false);
			
		// 신규 달력 div
		var nX = system.clientToScreenX(obj, 0) + obj.position.width  - 167;
		var nY = system.clientToScreenY(obj, 0) + obj.position.height - 1;
		var strDate = gfn_callCalendarPop(obj, eval(obj.userdata).value, nX, nY);
		if(gfn_isNull(strDate)) return;
		eval(obj.userdata).value = strDate;
	}
	// 월력
	else {
		// 과거 월력 팝업
		//eval(obj.userdata).value = gfn_dialog("", "U_SCC::SCC_CALMONTH.xfdl","fa_Date="+eval(obj.userdata).value,-1,-1,"",-1,-1,false,false);	
			
		// 신규 월력 div
		var nX = system.clientToScreenX(obj, 0) - 168 + obj.position.width;
		var nY = system.clientToScreenY(obj, 0) + obj.position.height;
		var strDate = gfn_callMonthPop(obj, eval(obj.userdata).value, nX, nY);
		if(gfn_isNull(strDate)) return;
		eval(obj.userdata).value = strDate;
	}
	//기존 값과 달라진 경우 Change이벤트 발생시킴
	//if (sOldDate <> object(obj.UserData).Value)	eval(obj.UserData + "_OnChanged(" + obj.UserData + ", " + object(obj.UserData).Value + ")");
	
	if (sOldDate <> eval(obj.userdata).value) {
		var objEvent = eval(obj.userdata).ontextchanged.getHandler(0);
		if (!gfn_isNull(objEvent)) 
		{
			//gfn_alert("canchange이벤트 발생");
			//gfn_alert(gfn_replace(obj.userdata,".","_")+ "_canchange()");
			//eval(gfn_replace(obj.userdata,".","_")+ "_OnChanged()");
			eval(gfn_replace(obj.userdata,".","_")+ "_canchange()");
			//온체인지를 캔체인지로 바꿈 엑스플렛폼이기때문에
		}
	}
}

function g_Form_OnUnloadCompleted(obj)
{
	var ret = false;
	if ( gfn_length(gfn_trim(v_ds_check))== 0 ) return true;

	var v_ds_check_array = gfn_split(v_ds_check, ";");

	if ( Bound(v_ds_check_array)> 1)	{
		for (i = 0; i < Bound(v_ds_check_array);i++ )	{
			if ( GetUpdate(eval( v_ds_check_array[i] ))) ret = true;
		}
	}	
	else {
		if ( GetUpdate(eval( v_ds_check_array[0] ))) ret = true;
	}
	
	if ( ret ) {
		if ( g_Confirm("04", "변경된 데이터가 있습니다.\n\n저장하지 않고 계속 하시겠습니까?") ) return true;
		else return false;
	}
	else return true;
}

function g_PopupForm_OnUnloadCompleted(obj)
{
	var ret = g_Form_OnUnloadCompleted(obj);
	
	if (ret == false) return false;
	else return true;
}

//개발자만 메세지를 띄움
function g_Alert(sMsg)
{
	if (application.g_AuthLevel == "999") alert(sMsg);
}

/*----------------------------------------------------------------
/설  명 : DataSet의 내용을 Excel로 저장한다.
/인  자 : dsObj - 저장할Dataset	
          sFullFileName - 저장할 파일명(풀패스)
          sSheetName - 엑셀시트명(생략시 "sheet1")
          isShow - 엑셀화면 보여줄지 여부(기본 보여줌)
----------------------------------------------------------------*/
function g_DataSet2Excel(dsObj, sFullFileName, sSheetName, isShow)
{
	var ExportObject1;

	if (gfn_length(sSheetName)< 1) sSheetName = "sheet1";

	ExportObject1 = new ExportObject();
	/* Excel->ExportTypes.EXCEL*/ ExportObject1.exporttype = "Excel";
	ExportObject1.exportfilename = sFullFileName;
	ExportObject1.activepagename = sSheetName;
	ExportObject1.exportopenmode = "overwrite"; 
	AddExportDataset(ExportObject1,sSheetName + "!" + "A01", dsObj, false, false);
	//ExportObject1.AddExportXML(sSheetName + "!" + "A01", dsObj.SaveXML(), false, false);
	if (isShow == null || isShow == true)
		ExportObject1.export();
	else
	{
		ExportObject1.export(false,false);
		ExportObject1.Save();
		ExportObject1.CloseWorkbook();
	}
	/* Close은 지원되지 않는 메서드입니다.*/ ExportObject1.Close();
	ExportObject1 = null; 	
}

/*----------------------------------------------------------------
/설  명 : 넘어온 값의 양/음 판단.
/인  자 : varValue - 판단할 값
/반  환 : 양수(1), 음수(-1), Zero(0)
----------------------------------------------------------------*/
function fn_Sign(varValue)
{
	if (toNumber(varValue) == 0) return 0;
	if (toNumber(varValue) > 0) return 1;
	if (toNumber(varValue) < 0) return -1;
}

/*----------------------------------------------------------------
/설  명 : 콤보 콤포넌트 초기화
/인  자 : objBindDs - bind dataset
           sBindCol - bind dataset Column ID
           objCombo - combo object
/반  환 : void
----------------------------------------------------------------*/
function gfn_initCombo(objBindDs, sBindCol, objCombo, nComboIdx)
{
	if ( !gfn_isNull(sBindCol) ) {
		objBindDs.setColumn(0,sBindCol,"");
	}
	
	if ( gfn_isNull(nComboIdx) ) {
		objCombo.index = 0;
	} else {
		objCombo.index = nComboIdx;
	}
}

/*----------------------------------------------------------------
/설  명 : 입력값이 날짜 형태 인지 체크하는 함수
/인  자 : strValue(String)
/반  환 : 0(8자리가 아님),-1(날짜형태가아님), YYYYMMDD(정상날짜)
----------------------------------------------------------------*/
function gfn_checkDate8(strValue) 
{
    var sVal = strValue.replace(" ","").replace("-","").replace("_","");
    
	if(gfn_length(sVal) != 8) {
		return 0;
	} else if (!gfn_isDate(sVal)) {
		return -1;
	} else {
		return sVal;
	}	
}

//시스템 작업 기간 동안 입력 작업 방지
//============================================================================================
function mfn_GetSystemWorkCheck(strGubun)
{
	fn_sql_common("P", "SELECT NVL(SYSTEM_YN,'N'), SET1, SET2 FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'SYS_CLS_PRD' AND CODE = '" + strGubun + "' AND TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') BETWEEN REPLACE(REPLACE(REPLACE(SET1,'/',''),' ',''),':','') AND REPLACE(REPLACE(REPLACE(SET2,'/',''),' ',''),':','')");
}
]]></Script>
