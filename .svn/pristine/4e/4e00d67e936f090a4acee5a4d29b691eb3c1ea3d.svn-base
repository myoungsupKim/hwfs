<?xml version="1.0" encoding="euc-kr"?>
<query>
	<type>select</type>
	<description><![CDATA[]]></description>
	<reload>true</reload>
	<monitoring>true</monitoring>
	<result-count>1</result-count>
	<statement>
<![CDATA[
SELECT 0 CREAT,
       AA.RECIPE_CD,
       AA.RECIPE_NAME,
       SUM(NVL(AA.RECIPE_COST, 0) ) RECIPE_COST,
--AA.PHF,
       SUM(NVL(AA.CORN_SALE_PRICE, 0) ) CORN_SALE_PRICE,  --코너별 식단가
       AA.UPJANG,
       AA.MENU_CD,
       AA.RECIPE_COLOR,
       (
       SELECT SET1
         FROM SCC_COMMON_CODE
        WHERE CODE=AA.RECIPE_COLOR
          AND GROUP_CODE='FS0007'
       ) COLOR,
       SUM(NVL(AA.NEED_QTY, 0) ) NEED_QTY,
       0 V_STA,
       0 V_RATE,
       SUM(NVL(AA.CAL, 0) ) CAL,                          --"열량",
       SUM(NVL(AA.WATER, 0) ) WATER,                      --"수분",
       SUM(NVL(AA.PROT, 0) ) PROT,                        --"단백질",
       SUM(NVL(AA.FAT, 0) ) FAT,                          --"지질",
       SUM(NVL(AA.CARBO, 0) ) CARBO,                      --"당질",
       SUM(NVL(AA.FIBER, 0) ) FIBER,                      --"섬유",
       SUM(NVL(AA.ASH, 0) ) ASH,                          --"회분",
       SUM(NVL(AA.CA, 0) ) CA,                            --"칼슘",
       SUM(NVL(AA.P, 0) ) P,                              --"인",
       SUM(NVL(AA.FE, 0) ) FE,                            --"철",
       SUM(NVL(AA.NA, 0) ) NA,                            --"나트륨",
       SUM(NVL(AA.K, 0) ) K,                              --"칼륨",
       SUM(NVL(AA.VITA_A, 0) ) VITA_A,                    --"비타민A",
       SUM(NVL(AA.RETIN, 0) ) RETIN,                      --"레티놀",
       SUM(NVL(AA.B_CAROT, 0) ) B_CAROT,                  --"B_카르틴",
       SUM(NVL(AA.THIA, 0) ) THIA,                        --"비타민B1",
       SUM(NVL(AA.RIBO, 0) ) RIBO,                        --"비타민B2",
       SUM(NVL(AA.NIACIN, 0) ) NIACIN,                    --"나이아신",
       SUM(NVL(AA.VITA_C, 0) ) VITA_C,                    --"비타민C",
       SUM(NVL(AA.CHOLE, 0) ) CHOLE,                      --"콜레스테롤"
-- 폐기율 적용 영양소 보기체크시  가식부량에 의한 영양소
       SUM(ROUND( (NVL(CAL, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100)/1000, 2) ) S_KCAL,        --"열량",
       SUM(ROUND( (NVL(WATER, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_WATER,         --"수분",
       SUM(ROUND( (NVL(PROT, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_PROT,           --"단백질",
       SUM(ROUND( (NVL(FAT, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_FAT,             --"지질",
       SUM(ROUND( (NVL(CARBO, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_CARBO,         --"당질",
       SUM(ROUND( (NVL(FIBER, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_FIBER,         --"섬유",
       SUM(ROUND( (NVL(ASH, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_ASH,             --"회분",
       SUM(ROUND( (NVL(CA, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_CA,               --"칼슘",
       SUM(ROUND( (NVL(P, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_P,                 --"인",
       SUM(ROUND( (NVL(FE, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_FE,               --"철",
       SUM(ROUND( (NVL(NA, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_NA,               --"나트륨",
       SUM(ROUND( (NVL(K, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_K,                 --"칼륨",
       SUM(ROUND( (NVL(VITA_A, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_VITA,         --"비타민A",
       SUM(ROUND( (NVL(RETIN, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_RETIN,         --"레티놀",
       SUM(ROUND( (NVL(B_CAROT, 0)* (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_B_CAROT,      --"B_카르틴",
       SUM(ROUND( (NVL(THIA, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_THIA,           --"비타민B1",
       SUM(ROUND( (NVL(RIBO, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_RIBO,           --"비타민B2",
       SUM(ROUND( (NVL(NIACIN, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_NIASIN,       --"나이아신",
       SUM(ROUND( (NVL(VITA_C, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_VITA_C,       --"비타민C",
       SUM(ROUND( (NVL(CHOLE, 0) * (AA.NEED_QTY*(100-AA.DISUSE_RATE) ) / 100) , 2) ) S_CHOLE,         --"콜레스테롤"
-- 폐기율 미적용 영양소 보기체크시 1인소요량에의한 영양가 계산
       SUM(ROUND( (NVL(CAL, 0) * AA.NEED_QTY / 100)/1000, 2) ) SS_KCAL,                               --"열량",
       SUM(ROUND( (NVL(WATER, 0) * AA.NEED_QTY / 100) , 2) ) SS_WATER,                                --"수분",
       SUM(ROUND( (NVL(PROT, 0) * AA.NEED_QTY / 100) , 2) ) SS_PROT,                                  --"단백질",
       SUM(ROUND( (NVL(FAT, 0) * AA.NEED_QTY / 100) , 2) ) SS_FAT,                                    --"지질",
       SUM(ROUND( (NVL(CARBO, 0) * AA.NEED_QTY / 100) , 2) ) SS_CARBO,                                --"당질",
       SUM(ROUND( (NVL(FIBER, 0) * AA.NEED_QTY / 100) , 2) ) SS_FIBER,                                --"섬유",
       SUM(ROUND( (NVL(ASH, 0) * AA.NEED_QTY / 100) , 2) ) SS_ASH,                                    --"회분",
       SUM(ROUND( (NVL(CA, 0) * AA.NEED_QTY / 100) , 2) ) SS_CA,                                      --"칼슘",
       SUM(ROUND( (NVL(P, 0) * AA.NEED_QTY / 100) , 2) ) SS_P,                                        --"인",
       SUM(ROUND( (NVL(FE, 0) * AA.NEED_QTY / 100) , 2) ) SS_FE,                                      --"철",
       SUM(ROUND( (NVL(NA, 0) * AA.NEED_QTY / 100) , 2) ) SS_NA,                                      --"나트륨",
       SUM(ROUND( (NVL(K, 0) * AA.NEED_QTY / 100) , 2) ) SS_K,                                        --"칼륨",
       SUM(ROUND( (NVL(VITA_A, 0) * AA.NEED_QTY / 100) , 2) ) SS_VITA,                                --"비타민A",
       SUM(ROUND( (NVL(RETIN, 0) * AA.NEED_QTY / 100) , 2) ) SS_RETIN,                                --"레티놀",
       SUM(ROUND( (NVL(B_CAROT, 0) * AA.NEED_QTY / 100) , 2) ) SS_B_CAROT,                            --"B_카르틴",
       SUM(ROUND( (NVL(THIA, 0) * AA.NEED_QTY / 100) , 2) ) SS_THIA,                                  --"비타민B1",
       SUM(ROUND( (NVL(RIBO, 0) * AA.NEED_QTY / 100) , 2) ) SS_RIBO,                                  --"비타민B2",
       SUM(ROUND( (NVL(NIACIN, 0) * AA.NEED_QTY / 100) , 2) ) SS_NIASIN,                              --"나이아신",
       SUM(ROUND( (NVL(VITA_C, 0) * AA.NEED_QTY / 100) , 2) ) SS_VITA_C,                              --"비타민C",
       SUM(ROUND( (NVL(CHOLE, 0) * AA.NEED_QTY / 100) , 2) ) SS_CHOLE                                 --"콜레스테롤"
  FROM
       (
       SELECT /*+ USE_HASH(A B) */
              A.UPJANG,
              A.MENU_CD,
              A.RECIPE_CD,
              A.RECIPE_NAME,
              A.RECIPE_COLOR,
              A.SALE_PRICE,               --판매가
              A.PHF,
              A.CORN_SALE_PRICE,          --코너별 식단가
              B.OP_PRICE RECIPE_COST,     --레시피원가
              A.ITEM_CODE,
              A.NEED_QTY,
              C.CAL,
              C.WATER,
              C.PROT,
              C.FAT,
              C.CARBO,
              C.FIBER,
              C.ASH,
              C.CA,
              C.P ,
              C.FE,
              C.NA,
              C.K,
              C.VITA_A,
              C.RETIN,
              C.B_CAROT,
              C.THIA,
              C.RIBO,
              C.NIACIN ,
              C.VITA_C,
              C.CHOLE,
              C.DISUSE_RATE
         FROM
              (
              SELECT A.UPJANG,
                     A.RECIPE_CD,
                     A.RECIPE_NAME,
                     A.RECIPE_CLASS,
                     A.RECIPE_TYPE,
                     A.CUISINE_TYPE,
                     A.SALE_PRICE,
                     B.ITEM_CODE,
                     B.NEED_QTY,
                     A.PHF,
                     A.EXPECT_SALE_QTY,
                     A.MAJOR_DISH_INFO,
                     C.SALE_PRICE CORN_SALE_PRICE,
                     C.MENU_CD,
                     A.RECIPE_COLOR
                FROM FMM_RECIPE A ,
                     FMM_RECIPE_ITEM B ,
                     FMM_MENU C
               WHERE A.UPJANG = B.UPJANG
                 AND A.MENU_CD = B.MENU_CD
                 AND A.RECIPE_CD = B.RECIPE_CD
                 AND A.UPJANG = C.UPJANG
                 AND A.MENU_CD = C.MENU_CD
                 AND C.MENU_CD = #MENU_DATE#||'-'||#SUBINV_CODE#||#MEAL#||#CORNER#
                 AND A.UPJANG = #UPJANG#  -- 업장
              ) A,   --메뉴별 레시피및 자재조회
              (
              SELECT /*+ USE_HASH (C A) */
                     A.ITEM_CODE,
                     DECODE(SIGN(NVL(C.OP_PRICE, 0) ) , 0, SCC_CEIL(A.SALE_PRICE + ROUND(A.SALE_PRICE * NVL(C.OP_RATE, 0) / 100),C.CEIL_VAL) , C.OP_PRICE) AS OP_PRICE  --운영단가(1인원가)
                FROM FMS_ITEM_V B,
                     FMU_OP_RATE C ,
                     (
                     SELECT /*+ INDEX_DESC(C PO_CONTRACT_FSALE_U1) */ #UPJANG# AS UPJANG,
                            NVL( '' , TO_CHAR(SYSDATE, 'YYYYMMDD' ) ) AS NEED_DATE,
                            C.ITEM_CODE,
                            TO_NUMBER(SUBSTR(MAX(C.ROWID||C.SALE_PRICE) , 19, 100) ) SALE_PRICE,
                            C.CENTER_CODE
                       FROM HLDC_PO_CONTRACT_FSALE C,
                            HLDC_PO_UPJANG_CENTER D,
                            HLDC_ST_UPJANG E
                      WHERE C.CENTER_CODE = D.CENTER_CODE
                        AND D.UPJANG = E.AP_UNITPRICE_UPJANG
                        AND E.UPJANG = #UPJANG#
                        AND C.UPJANG = E.AP_UNITPRICE_UPJANG
                        AND C.ITEM_CODE > ' '
                        AND C.CONTRACT_START <= NVL( '' , TO_CHAR(SYSDATE, 'YYYYMMDD' ) )
                        AND C.SALE_PRICE > 0
                        AND EXISTS
                            (
                            SELECT 1
                              FROM HLDC_PO_TREAT_UPJANG X
                             WHERE X.ITEM_CODE = C.ITEM_CODE
                               AND X.UPJANG = C.UPJANG
                            )
                      GROUP BY C.CENTER_CODE,
                            C.UPJANG,
                            C.ITEM_CODE
                     -----------
                      UNION ALL
                     -----------
                     SELECT #UPJANG# AS UPJANG,
                            NVL( '' , TO_CHAR(SYSDATE, 'YYYYMMDD' ) ) AS NEED_DATE ,
                            A.ITEM_CODE,
                            A.SALE_PRICE,
                            0 CENTER_CODE
                       FROM FMP_OTCUST_PRICE_AVA_V A ,
                            (
                            SELECT UPJANG,
                                   ITEM_CODE,
                                   MAX(SDATE) AS SDATE
                              FROM FMP_OTCUST_PRICE_AVA_V
                             WHERE UPJANG =
                                   (
                                   SELECT OTCUST_PRICE_UPJANG
                                     FROM FMS_UPJANG
                                    WHERE UPJANG = #UPJANG#
                                   )
                               AND SDATE <= NVL( '' , TO_CHAR(SYSDATE, 'YYYYMMDD' ) )
                             GROUP BY UPJANG,
                                   ITEM_CODE
                            ) B
                      WHERE A.UPJANG = B.UPJANG
                        AND A.SDATE = B.SDATE
                        AND A.ITEM_CODE = B.ITEM_CODE
                        AND A.SALE_PRICE > 0
                        AND A.USE_YN = 'Y'
                     ) A
               WHERE A.ITEM_CODE = B.ITEM_CODE
                 AND A.UPJANG = C.UPJANG(+)
                 AND A.NEED_DATE BETWEEN C.SDATE(+) AND C.EDATE(+)
                 AND A.ITEM_CODE BETWEEN C.ITEM_CODE(+) AND C.ITEM_CODE(+)||'9999'
                 AND C.USE_YN(+) = 'Y'
              ) B,   -- 자재 원가
              (
              SELECT A.ITEM_CODE,
                     A.ITEM_NAME,
                     A.ITEM_SIZE,
                     A.PO_UOM,
                     A.KG_CONVERT_RATE ,
                     B.CAL,
                     B.WATER,
                     B.PROT,
                     B.FAT,
                     B.CARBO,
                     B.FIBER,
                     B.ASH,
                     B.CA,
                     B.P ,
                     B.FE,
                     B.NA,
                     B.K,
                     B.VITA_A,
                     B.RETIN,
                     B.B_CAROT,
                     B.THIA,
                     B.RIBO,
                     B.NIACIN ,
                     B.VITA_C,
                     B.CHOLE,
                     B.DISUSE_RATE
                FROM
                     (
                     SELECT B.ITEM_CODE,
                            B.ITEM_NAME,
                            B.ITEM_SIZE,
                            B.PO_UOM,
                            B.TAX_CODE,
                            B.KG_CONVERT_RATE
                       FROM HLDC_PO_ITEM_MST B,
                            HLDC_PO_TREAT_UPJANG A
                      WHERE A.ITEM_CODE = B.ITEM_CODE
                        AND B.ITEM_CODE BETWEEN '010000000000' AND '019999999999'
                        AND A.UPJANG =
                            (
                            SELECT C.AP_UNITPRICE_UPJANG
                              FROM HLDC_ST_UPJANG C
                             WHERE C.UPJANG = #UPJANG#
                            )
                        AND A.USE_YN = 'Y'
                        AND B.USE_YN = 'Y'
                      UNION ALL
                     SELECT A.ITEM_CODE,
                            A.ITEM_NAME,
                            A.ITEM_SIZE,
                            A.PO_UOM,
                            A.TAX_CODE,
                            A.KG_CONVERT_RATE
                       FROM FMP_OTCUST_ITEM A,
                           (
                            SELECT E.ITEM_CODE
                              FROM FMP_OTCUST_PRICE_AVA_V E
                                 ,(SELECT UPJANG, ITEM_CODE, MAX(SDATE) AS SDATE
                                     FROM FMP_OTCUST_PRICE_AVA_V
                                    WHERE UPJANG = (SELECT OTCUST_PRICE_UPJANG FROM FMS_UPJANG WHERE UPJANG = #UPJANG#)
                                      AND SDATE <= NVL( '' , TO_CHAR(SYSDATE, 'YYYYMMDD' ) )
                                    GROUP BY UPJANG, ITEM_CODE) F
                             WHERE E.UPJANG = F.UPJANG
                               AND E.SDATE = F.SDATE
                               AND E.ITEM_CODE = F.ITEM_CODE
                               AND E.SALE_PRICE > 0
                               AND E.USE_YN = 'Y'
                           ) B
                      WHERE A.ITEM_CODE = B.ITEM_CODE
                        AND A.USE_YN = 'Y'
                     ) A,
                     (
                     SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE
                       FROM	FMP_ITEM_NUT
                      WHERE	UPJANG = #UPJANG#
                      UNION ALL
                            (
                            SELECT ITEM_CODE, CAL, WATER, PROT, FAT, CARBO, FIBER, ASH, CA, P, FE, NA, K, VITA_A, RETIN, B_CAROT, THIA, RIBO, NIACIN, VITA_C, CHOLE, DISUSE_RATE
                              FROM	FSI_ITEM_NUT
                             WHERE ITEM_CODE IN
                                   (
                                   SELECT ITEM_CODE
                                     FROM FSI_ITEM_NUT MINUS
                                   SELECT ITEM_CODE
                                     FROM FMP_ITEM_NUT
                                    WHERE UPJANG = #UPJANG#
                                   )
                            )
                     ) B
               WHERE A.ITEM_CODE = B.ITEM_CODE
              ) C    --자재리스트
        WHERE A.ITEM_CODE=B.ITEM_CODE(+)  --원가
          AND A.ITEM_CODE=C.ITEM_CODE(+)  --영양가
       ) AA
 GROUP BY AA.RECIPE_CD,
       AA.RECIPE_NAME,
       AA.UPJANG,
       AA.MENU_CD,
       AA.RECIPE_COLOR	]]></statement>
	<input default-name="ds_in">
		<col name="UPJANG" size="255" type="DECIMAL" description="" /> 
		<col name="MENU_DATE" size="255" type="VARCHAR" description="" /> 
		<col name="SUBINV_CODE" size="255" type="VARCHAR" description="" /> 
		<col name="MEAL" size="255" type="VARCHAR" description="" /> 
		<col name="CORNER" size="255" type="VARCHAR" description="" /> 
	</input>
	<output default-name="ds_Menu">
	</output>
</query>
