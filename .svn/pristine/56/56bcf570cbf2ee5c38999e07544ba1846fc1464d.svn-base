<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[
/*================================================================================
 *  프로그램 설명 : 서버와의 통신 처리를 담당하는 스크립트
 *  작성일자 : 
 *  버전 : 1.0
 *  변경 이력 
    일자            작성자          비고
    ------------------------------------------------------------
    
 * Global 변수 추가 사항 
   GV_ISLOCAL - 로컬 실행 여부 
   GV_HTTPCODE - 트랜잭션 시 HTTP 코드 
   
   Type Definitioin 추가사항 
   svc_prod - 운영서버 접속 주소 
   svc_dev - 로컬서버 접속 주소 
================================================================================*/
/*===============================================================================
*   상수 선언 
================================================================================*/
var errorTrace;
var errorSqlStatus;	// sql status code
var errorSqlCode;
var FSP_DS_CMD_NM = "fsp_ds_cmd";
var FSP_CURR_BIZ = "";
var FSP_DS_OBJ = null;
var FSP_IS_CREATE_DS = false;	// 데이터셋 생성 여부 

var fsp_svcTrace = "";
/*****************************************************************
* Action 정보를 보내기 위한 기초 정보 생성
* @return 없음
******************************************************************/
function fsp_init(formObj) {    
    if ( FSP_IS_CREATE_DS ) {
        return;
    }
    
    // 데이터 셋 생성 
    var dsObj = new Dataset;
	FSP_IS_CREATE_DS = true;
	dsObj.name = FSP_DS_CMD_NM;
	this.addChild(FSP_DS_CMD_NM, dsObj);
	//FSP_DS_OBJ = dsObj;  --> 아래로 이동함(Line : 78)
	
	dsObj.addColumn("TX_NAME", "string", 100);
	dsObj.addColumn("TYPE", "string", 10);
	dsObj.addColumn("SQL_ID", "string", 200);
	dsObj.addColumn("KEY_SQL_ID", "string", 200);
	dsObj.addColumn("KEY_INCREMENT", "INT", 10);
	dsObj.addColumn("CALLBACK_SQL_ID", "STRING", 200);
	dsObj.addColumn("INSERT_SQL_ID", "STRING", 200);
	dsObj.addColumn("UPDATE_SQL_ID", "STRING", 200);
	dsObj.addColumn("DELETE_SQL_ID", "STRING", 200);
	dsObj.addColumn("SAVE_FLAG_COLUMN", "STRING", 200);	// save 처리 시에 flag 처리 컬럼 
	dsObj.addColumn("USE_INPUT", "STRING", 1);		// input 으로 사용할지 여부 
	dsObj.addColumn("USE_ORDER", "STRING", 1);		// dataset order 사용 여부 
	dsObj.addColumn("KEY_ZERO_LEN", "INT", 10);		// key 증가 시 key 의 문자 변환 값의 자리수 
	dsObj.addColumn("BIZ_NAME", "STRING", 100);			
	
	dsObj.addColumn("PAGE_NO", "INT", 10);
	dsObj.addColumn("PAGE_SIZE", "INT", 10);
	dsObj.addColumn("READ_ALL", "STRING", 1);	// Y - 또는 N 	( 페이지 단위 처리 시 전체 조회 여부 )
	
	// N : 에러 발생 시 전체 rollback 시킴. 
	// N1 : 에러 발생 시 해당 부분의 에러를 무시 하고 계속 수행 -> 뒤의 sql은 처리 
	// N2 : 에러 발생 시 해당 부분 에러 전까지의 처리 결과는 commit 처리 , 뒷 부분은 수행하지 않음. 
	// Exception 은 발생하고 처리는 하지 않음. 
	dsObj.addColumn("EXEC_TYPE", "STRING", 2);	// 처리 방법 - B ( 배치 ), N( 단건 )
	
	// return 되는 정보 
	dsObj.addColumn("EXEC", "STRING", 1);	// 처리 여부
	dsObj.addColumn("FAIL", "STRING", 1);	// 실패 여부 
	dsObj.addColumn("FAIL_MSG", "STRING", 200);		// 실패 메시지
	dsObj.addColumn("EXEC_CNT", "INT", 1);	// 반영건수
	dsObj.addColumn("MSG", "STRING", 200);	// 메시지  

	FSP_DS_OBJ = dsObj;  //2015.10.12 :: 김재섭... addColumn 전에 할당한 것을 addColumn 이후에 할당하도록 이동함.
}

/*****************************************************************
* 자바 코딩 없이 사용할 경우 Action 호출 정보 초기화하기 
* @param formObj 폼 객체 정보 
* @return  Action 정보를 저장하고 있는 Dataset이 초기화 된다. 
******************************************************************/
function fsp_clearActionInfo(formObj) {
    eval(FSP_DS_CMD_NM).clearData();
}

/*****************************************************************
* 조회용 Action 정보 생성 ( 자바 코드 없이 사용할 경우 )
* @param formObj 폼 객체 정보 
* @param sqlName 조회할 SQL ID 
* @param isUseInput 조회한 결과는 Input Dataset으로 사용할지 여부 
* @return 없음
******************************************************************/
function fsp_addSearchActionInfo(formObj, sqlName, isUseInput) {
    fsp_add(formObj
        , "N"
        , sqlName
        , ""
        , ""
        , ""
        , ""
        , ""
        , ""
        , "");
    if ( isUseInput == true ) {
        var cmdDs = eval(FSP_DS_CMD_NM);
        cmdDs.setColumn(cmdDs.getRowCount() - 1, "USE_INPUT", "Y");
    }
}

/*****************************************************************
* 자바 코딩 없이 사용할 경우 서버에서 처리하기 위한 Action 호출 
* 정보를 추가
* @param formObj 폼 객체 정보 
* @param txType 호출하는 Transaction 타입 
         S - Insert, Update , Delete 동시 처리 
         M - 주어진 SQL 정보에 대해 Dataset이 존재하는 건 만큼 반복처리 
         CSV - 조회용 SQL 만 가능하며, 데이터 조회 후 CSV 형태로 데이터를 넘겨 줌.
* @param sqlName 처리할 Main SQL ID
                 txType이 'S'인 경우에는 해당 sql은 사용되지 않는다. 
* @param keySqlName PK 조회용 SQL ID 
* @param keyIncrement keySqlName이 존재할 경우만 사용되며, 
                      반복적인 처리 Sql의 경우 다음 정보 key 증가 값 
                      현재는 integer 형의 숫자형 key만 처리 가능 
* @param callbackSql 처리가 완료된 후 결과로써 반환할 Sql Id 
* @param insertSql  txType이 'S'인 경우 또는 sqlName 파라메터가 존재하면서 해당하는 
                    main sql에 대해서 master-detail 구조일 경우 
                    insert를 처리할 SQL ID 
* @param updateSql  txType이 'S'인 경우 또는 sqlName 파라메터가 존재하면서 해당하는 
                    main sql에 대해서 master-detail 구조일 경우 
                    update를 처리할 SQL ID            
* @param deleteSql  txType이 'S'인 경우 또는 sqlName 파라메터가 존재하면서 해당하는 
                    main sql에 대해서 master-detail 구조일 경우 
                    delete를 처리할 SQL ID     
* @param saveFlagColumn  insertSql, updateSql, deleteSql이 존재하여 신규, 수정, 삭제를 
                         처리할 경우 기본적으로 Dataset의 getRowStates()로 판단하여 처리
                         하나 이를 Flag 컬럼으로 대체하고 싶은 경우 사용
                         해당 Flag 컬럼의 값은 신규 - I , 수정 - U , 삭제 - D의 값을 
                         가져야 한다. 
* @return 없음
******************************************************************/
function fsp_add(
    formObj
    , txType
    , sqlName
    , keySqlName
    , keyIncrement
    , callbackSql
    , insertSql
    , updateSql
    , deleteSql
    , saveFlagColumn
    , keyZeroLen
    , execType ) {
    
	var cmdDs = FSP_DS_OBJ; //this.all(FSP_DS_CMD_NM);
    var row = cmdDs.addRow();
    
    cmdDs.setColumn(row, "TYPE", txType);
    cmdDs.setColumn(row, "SQL_ID", sqlName);
    cmdDs.setColumn(row, "KEY_SQL_ID", keySqlName);
    if ( gfn_isNull(keyIncrement) || keyIncrement < 0 ) {
        keyIncrement = "0";
    }
    if ( gfn_isNull(keyZeroLen) || keyZeroLen < 0 ) {
        keyZeroLen = "0";
    }
    
    cmdDs.setColumn(row, "KEY_INCREMENT", keyIncrement);
    cmdDs.setColumn(row, "CALLBACK_SQL_ID", callbackSql);
    cmdDs.setColumn(row, "INSERT_SQL_ID", insertSql);
    cmdDs.setColumn(row, "UPDATE_SQL_ID", updateSql);
    cmdDs.setColumn(row, "DELETE_SQL_ID", deleteSql);
    cmdDs.setColumn(row, "SAVE_FLAG_COLUMN", saveFlagColumn);
    cmdDs.setColumn(row, "KEY_ZERO_LEN", keyZeroLen);
    cmdDs.setColumn(row, "BIZ_NAME", FSP_CURR_BIZ);
    
    if( execType == null || execType.length == 0 ) {
		cmdDs.setColumn(row, "EXEC_TYPE", "B");
    } else {
		cmdDs.setColumn(row, "EXEC_TYPE", execType);
    }   
     
}

/*****************************************************************
* 조회용 Action 정보 생성 ( 자바 코드 없이 사용할 경우 )
* @param formObj 폼 객체 정보 
* @param sqlName 조회할 SQL ID 
* @param isUseInput 조회한 결과는 Input Dataset으로 사용할지 여부 
* @return 없음
******************************************************************/
function fsp_addSearch(formObj, sqlName, isUseInput, isNotUseOrder, rtnDsId) {
	fsp_add(formObj
        , "N"
        , sqlName
        , ""
        , ""
        , ""
        , ""
        , ""
        , ""
        , rtnDsId);
	
	if ( isUseInput == true ) {
        var cmdDs = FSP_DS_OBJ; //this.all(FSP_DS_CMD_NM);
        cmdDs.setColumn(cmdDs.getRowCount() - 1, "USE_INPUT", "Y");
    }
    
    if ( isNotUseOrder == true ) {
		var cmdDs = FSP_DS_OBJ; //this.all(FSP_DS_CMD_NM);
        cmdDs.setColumn(cmdDs.getRowCount() - 1, "USE_ORDER", "N");
    }
}
/*****************************************************************
* 페이지 단위 조회용 Action 정보 생성 ( 자바 코드 없이 사용할 경우 )
* @param sqlName 조회할 SQL ID 
* @param pageNo 페이지 번호 
* @param pageSize 페이지 사이즈 
* @param isAllRead 주어진 페이지 이후로 전체 데이터를 읽을지 유무 
* @param isUseInput 조회한 결과는 Input Dataset으로 사용할지 여부 
* @param isNotUseOrder Dataset 컬럼 생성시 정렬할지 여부  
* @return 없음
******************************************************************/
function fsp_addPageSearch( formObj, sqlName, pageNo, pageSize, isAllRead, isUseInput, isNotUseOrder) {
    fsp_addSearch( formObj, sqlName, isUseInput, isNotUseOrder);
    
    var cmdDs = FSP_DS_OBJ; //this.all(FSP_DS_CMD_NM);
    
    if ( isAllRead ) {
		cmdDs.setColumn(cmdDs.getRowCount() - 1, "READ_ALL", "Y");
    } else {
		cmdDs.setColumn(cmdDs.getRowCount() - 1, "READ_ALL", "N");
    }
    
    cmdDs.setColumn(cmdDs.getRowCount() - 1, "PAGE_NO", pageNo);
    cmdDs.setColumn(cmdDs.getRowCount() - 1, "PAGE_SIZE", pageSize);
}


/*****************************************************************
* 조회용 Action 정보 생성 ( 자바 코드 없이 사용할 경우 )
* CSV 용으로 사용 
* @param formObj 폼 객체 정보 
* @param sqlName 조회할 SQL ID 
* @param recvCount  전송받을 Count ( 정의하지 않을 경우 기본 : 100 )
* @return 없음
******************************************************************/
function fsp_addCSVSearch(formObj, sqlName , recvCount ) {
	fsp_add(formObj
        , "CSV"
        , sqlName
        , ""
        , recvCount
        , ""
        , ""
        , ""
        , ""
        , "");
}
/*****************************************************************
* 단일 처리 Action 정보 생성 
* @param formObj 폼 객체 정보 
* @param sqlName 단일 처리 SQL ID 
* @param keySqlName PK 조회용 SQL ID 
* @param keyIncrement keySqlName이 존재할 경우만 사용되며, 
                      반복적인 처리 Sql의 경우 다음 정보 key 증가 값 
                      현재는 integer 형의 숫자형 key만 처리 가능 
* @param callbackSql 처리가 완료된 후 결과로써 반환할 Sql Id 
* @return 없음
******************************************************************/
function fsp_addSingle(formObj, sqlName, keySqlName, keyIncrement, callbackSql, execType) {
    fsp_add(
    		formObj
    		, "N"
    		, sqlName
    		, keySqlName
    		, keyIncrement
    		, callbackSql
            , ""
            , ""
            , ""
            , ""
            , null
            , execType);
}
/*****************************************************************
* 단일 처리 SaveAction 정보 생성 
* @param formObj 폼 객체 정보 
* @param insertSql  txType이 'S'인 경우 또는 sqlName 파라메터가 존재하면서 해당하는 
                    main sql에 대해서 master-detail 구조일 경우 
                    insert를 처리할 SQL ID 
* @param updateSql  txType이 'S'인 경우 또는 sqlName 파라메터가 존재하면서 해당하는 
                    main sql에 대해서 master-detail 구조일 경우 
                    update를 처리할 SQL ID            
* @param deleteSql  txType이 'S'인 경우 또는 sqlName 파라메터가 존재하면서 해당하는 
                    main sql에 대해서 master-detail 구조일 경우 
                    delete를 처리할 SQL ID     
* @param saveFlagColumn  insertSql, updateSql, deleteSql이 존재하여 신규, 수정, 삭제를 
                         처리할 경우 기본적으로 Dataset의 getRowStates()로 판단하여 처리
                         하나 이를 Flag 컬럼으로 대체하고 싶은 경우 사용
                         해당 Flag 컬럼의 값은 신규 - I , 수정 - U , 삭제 - D의 값을 
                         가져야 한다. 
* @param keySqlName PK 조회용 SQL ID 
* @param keyIncrement keySqlName이 존재할 경우만 사용되며, 
                      반복적인 처리 Sql의 경우 다음 정보 key 증가 값 
                      현재는 integer 형의 숫자형 key만 처리 가능 
* @param callbackSql 처리가 완료된 후 결과로써 반환할 Sql Id                          
* @return 없음
******************************************************************/
function fsp_addSave(formObj, insertSql, updateSql
    , deleteSql
    , saveFlagColumn
    , keySqlName
    , keyIncrement
    , callbackSql
    , keyZeroLen
	, execType) {
	
	execType = 'N';
	
    fsp_add(
    		formObj
    		, "S"
    		, ""
    		, keySqlName
    		, keyIncrement
    		, callbackSql
            , insertSql
            , updateSql
            , deleteSql
            , saveFlagColumn
            , keyZeroLen
            , execType);
}
/*****************************************************************
* 주어진 SQL을 Dataset 건수 만큼 반복적으로 처리하는 action 정보 생성 
* @param formObj 폼 객체 정보 
* @param sqlId  처리할 SQL 
* @param keySqlName  Key SQL이 존재할 경우 SQL ID          
* @param keyIncrement  Key 증가 값 
* @param callbackSql  처리 완료 후 반환할 정보를 조회할 SQL ID   
* @return 없음
******************************************************************/
function fsp_addMulti(formObj
		, sqlId
		, keySqlName
		, keyIncrement
		, callbackSql
		, keyZeroLen
		, execType) {
	
	execType = 'N';
	
	fsp_add(formObj
			, "M"
			, sqlId
			, keySqlName
			, keyIncrement
			, callbackSql
	        , ""
	        , ""
	        , ""
	        , ""
	        , keyZeroLen
	        , execType);
}
/*****************************************************************
* SELECT를 수행한 후 정보 존재 유무에 따라 별도의 SQL을 처리할 수 있는 
  Action 정보 생성 
* @param formObj 폼 객체 정보 
* @param selectSqlId  조회 처리용 SQL 
* @param notFoundSql  조회 결과 없을 경우 처리할 SQL          
* @param foundSql  조회 결과가 존재할 경우 처리할 SQL     
* @return 없음
******************************************************************/
function fsp_addSelectExecute(formObj, selectSqlId, notFoundSql, foundSql, execType) {
    fsp_add(formObj
    		, "AS"
    		, selectSqlId
    		, ""
    		, ""
    		, ""
            , foundSql
            , notFoundSql
            , ""
            , ""
            , ""
            , execType);
}

/*****************************************************************
* 자바 코딩 없이 사용할 경우 Action 호출 정보 초기화하기 
* @param formObj 폼 객체 정보 
* @return  Action 정보를 저장하고 있는 Dataset이 초기화 된다. 
******************************************************************/
function fsp_clear(formObj) {
	FSP_CURR_BIZ = "";
	FSP_DS_OBJ.clearData();
}
/*****************************************************************
** quote 붙이기 
******************************************************************/
function fsp_quote(str) {
	if( str == null ) {
		return "\"\"";
	}
	
	return "\"" + str + "\"";
}
/****************************************************************
 * 서버 호출
 * @param formObj 해당 스크립트를 호출하는 Form 객체 
                  호출 Form에서 보통 this 로 넘김. 
 * @param actionName  서버에서 호출할 Action의 별명 
                      기본은 defaultAction을 호출하도록 되어있다. 
 * @param cmdName  Action 안에서 호출해야 하는 메소드 명 
                   기본은 execute를 호출하도록 되어있다. 
 * @param inData  서버로 전송할 DataSet 객체 Str
                  예: ds_select=dst_select:A ds_select2=dst_select2
 * @param outData  서버로부터 전송 받을  DataSet 객체 String
                   예:  dst_master=ds_servername     
 * @param otherArg  서버로 전송할 기타 Argument 정보 String
                    예: key=value key2=value2
 * @param callBackFnc  서버에서 처리가 완료된 후 Callback 받을 Function 명
                       메소드 작성은 callBackFnc(errCode, errMsg) 형태로 작성 
 * @param isErrorNotCall  에러 발생 시 Callback 함수 호출 여부                           
 * @param isNotShow  처리중입니다. 메시지 창 보여줄지 여부 설정하기   
 * @param isSync  동기식으로 설정할지 여부                          
 * @return 없음
 * 호출 예 : fsp_callService(this, "", "actionName, "search", "dst_master=ds_master");
***************************************************************/
function fsp_callService(
        formObj
        , actionName
        , cmdName
        , inData
        , outData
        , otherArg
        , callBackFnc
        , isErrorNotCall 
        , isNotShow
        , isSync
        , trId
        , svcDataUrl) {

	if ( isErrorNotCall == null ) {
        isErrorNotCall = false;
	}
	
    //Transaction Start Time
    var objDate = new Date();
    var nStartTime = objDate.getTime(); //Milliseconds

	//동일 트랜으로 인식해서 Sendbox 방지를 위해... 
    var strRequstTime = Math.random() * 100000000000000000;
    
	var param = callBackFnc + "&" + isErrorNotCall + "&" + trId + "&" + nStartTime + "&" + strRequstTime;
	//var param = callBackFnc + "&" + isErrorNotCall + "&" + trId;
	
	// Argument 처리 
	var arg = "";
	actionName = fn_getActionName(actionName);
	arg += "fsp_action=" + fsp_quote( actionName );
	
	if ( cmdName == null || cmdName.length == 0 ) {
        cmdName = "execute";
	}
	
	arg += " fsp_cmd=" + fsp_quote(cmdName);
	
	// global variable 처리 
	arg += " g_AuthLevel=" + fsp_quote(g_AuthLevel);
	arg += " g_Deptid=" + fsp_quote(g_Deptid);
	arg += " g_EmpNo=" + fsp_quote(g_EmpNo);
	arg += " g_Name=" + fsp_quote(g_Name);
	arg += " g_SystemId=" + fsp_quote(g_SystemId);
	arg += " g_Upjang=" + fsp_quote(g_Upjang);
    arg += " g_UserKind=" + fsp_quote(g_UserKind);
    arg += " g_UpjangGroup=" + fsp_quote(g_UpjangGroup);
	arg += " g_Main_Upjang=" + fsp_quote(g_Main_Upjang);
	arg += " g_Tm_Cd=" + fsp_quote(g_Tm_Cd);
	arg += " g_Cc_Cd=" + fsp_quote(g_Cc_Cd);
	arg += " g_Sc_Cd=" + fsp_quote(g_Sc_Cd);
	
	//[[김재섭:개인정보 보안과 관련된 정보를 추가함.
	arg += " g_PersInfoAgreeYn=" + fsp_quote(g_PersInfoAgreeYn); 
	arg += " g_PersInfoMask=" + fsp_quote(g_PersInfoMask); 
	arg += " g_PersInfoProcLevel=" + fsp_quote(g_PersInfoProcLevel); 
	//김재섭:개인정보 보안과 관련된 정보를 추가함.]]

	// log id 처리 
	var clientId = "all";//ext_GetIPAddress();
	arg += " fsp_logId=" + fsp_quote( clientId );
	
	if ( otherArg != null && otherArg.length > 0 ) {
        arg += " " + otherArg;
	}
	
	// Local인 경우 Local service 타도록
	var strDataGroup = "svc";	
	if( !gfn_isNull(svcDataUrl)) {
		strDataGroup = svcDataUrl;
	}
	
	if ( FSP_IS_CREATE_DS  ) {
		// 공백부터 시작할 경우 Error 발생 
		if( inData != null &&  inData.length > 0 ) {
			inData += " fsp_ds_cmd=" + FSP_DS_CMD_NM;
		} else {
			inData = "fsp_ds_cmd=" + FSP_DS_CMD_NM;
		}
		if( outData != null &&  outData.length > 0 ) {
			outData += " " + FSP_DS_CMD_NM + "=fsp_ds_cmd";
		} else {
			outData = FSP_DS_CMD_NM + "=fsp_ds_cmd";
		}
	}   
	// Application 그룹별 서버 접속 Url 가져오기 
	var serverUrl = strDataGroup + "::XMain";
	
	//공통 파라미터를 Url에 추가 by kksoo
    serverUrl += fn_getGlobalVariableUrl() + "&callBack=" + actionName + ":" + callBackFnc;
 
    if ( isNotShow == null || isNotShow == false ) {
        // 처리중입니다. 메시지 처리 
    //    fn_createWait("",this);
    }  
    
    
//     var isHttpAsync = true;
//     // 동기식 설정 
//     if ( isSync != null && isSync == true ) {
//         isHttpAsync = false;
//     }
//     GV_HTTPCODE="";	
// 	param += "&" + "1234";	// timem();
// 	transaction(param,serverUrl,inData,outData,arg, "fsp_result", isHttpAsync);
    
    // 동기식 설정 
    if ( isSync != null && isSync == true ) {
        http.Sync = true;
    } else if ( isSync != null && isSync == false ) {
		http.Sync = false;
    }
    
    Transaction(param, serverUrl, inData, outData, arg, "fsp_result");
}
/****************************************************************
###### JSP를 통해 서버 호출시 Error Code, Sync, 처리중 팝업메세지  처리하는 공통함수 ###########################
* @param formObj 해당 스크립트를 호출하는 Form 객체 
                 호출 Form에서 보통 this 로 넘김. 
* @param svcID 서비스 ID
* @param svcUrl 서비스 URL
* @param inData  서버로 전송할 DataSet 객체 Str
                 예: ds_select=dst_select:A ds_select2=dst_select2
* @param outData  서버로부터 전송 받을  DataSet 객체 String
                  예:  dst_master=ds_servername     
* @param otherArg  서버로 전송할 기타 Argument 정보 String
                   예: key=value key2=value2
* @param callBackFnc  서버에서 처리가 완료된 후 Callback 받을 Function 명
                      메소드 작성은 callBackFnc(errCode, errMsg) 형태로 작성 
* @param isErrorNotCall  에러 발생 시 Callback 함수 호출 여부                        
* @param isNotShow  처리중입니다. 메시지 창 보여줄지 여부 설정하기   
* @param isSync  동기식으로 설정할지 여부                          
* @return 없음
* 호출 예 : jsp_transaction(this,"FSP00030E_T004", "S_FSP::FSP00030E_T004.jsp","ds_potype=ds_potype", "dst_master=ds_master","aa=aa","callback",true,false,false);
***************************************************************/
function jsp_transaction(
		  formObj
       , svcID
       , svcUrl
       , inData
       , outData
       , otherArg
       , callBackFnc
       , isErrorNotCall
       , isNotShow
       , isSync
       , trId
       , svcDataUrl) {
	
	if ( isErrorNotCall == null ) {
       isErrorNotCall = false;
	}

    //Transaction Start Time
    var objDate = new Date();
    var nStartTime = objDate.getTime(); //Milliseconds

	//동일 트랜으로 인식해서 Sendbox 방지를 위해... 
    var strRequstTime = Math.random() * 100000000000000000;
    
	var param = callBackFnc + "&" + isErrorNotCall + "&" + svcID + "&" + nStartTime + "&" + strRequstTime;
	//var param = callBackFnc + "&" + isErrorNotCall + "&" + svcID;
	
	// Argument 처리 
	var arg = "";
	
	// global variable 처리 
	arg += "g_AuthLevel=" + fsp_quote(g_AuthLevel);
	arg += " g_Deptid=" + fsp_quote(g_Deptid);
	arg += " g_EmpNo=" + fsp_quote(g_EmpNo);
	arg += " g_Name=" + fsp_quote(g_Name);
	arg += " g_SystemId=" + fsp_quote(g_SystemId);
	arg += " g_Upjang=" + fsp_quote(g_Upjang);
	arg += " g_UserKind=" + fsp_quote(g_UserKind);
	arg += " g_UpjangGroup=" + fsp_quote(g_UpjangGroup);
	arg += " g_Main_Upjang=" + fsp_quote(g_Main_Upjang);
	arg += " g_Tm_Cd=" + fsp_quote(g_Tm_Cd);
	arg += " g_Cc_Cd=" + fsp_quote(g_Cc_Cd);
	arg += " g_Sc_Cd=" + fsp_quote(g_Sc_Cd);
	
	//[[김재섭:개인정보 보안과 관련된 정보를 추가함.
	arg += " g_PersInfoAgreeYn=" + fsp_quote(g_PersInfoAgreeYn); 
	arg += " g_PersInfoMask=" + fsp_quote(g_PersInfoMask); 
	arg += " g_PersInfoProcLevel=" + fsp_quote(g_PersInfoProcLevel); 
	//김재섭:개인정보 보안과 관련된 정보를 추가함.]]

	//공통 파라미터를 Url에 추가 by kksoo
    svcUrl += fn_getGlobalVariableUrl() + "&callBack=" + svcID + ":" + callBackFnc;
	
	if ( otherArg != null && otherArg.length > 0 ) {
       arg += " " + otherArg;
	}
	
   // 메시지 초기화 
   errorTrace = "";
   
//    // 동기식 설정 
//    var isHttpAsync = true;
//    // 동기식 설정 
//    if ( isSync != null && isSync == true ) {
//        isHttpAsync = false;
//    }   
// 	GV_HTTPCODE="";	
// 	param += "&" + "1234";	// timem();
// 	transaction(param,serverUrl,inData,outData,arg, "fsp_result", isHttpAsync);
	
    // 동기식 설정 
    if ( isSync != null && isSync == true ) {
        http.Sync = true;
    }
    else {
		http.Sync = false;
    }
    
    /*
    if ( !http.Sync ) {
		Transaction_async(param, svcUrl, inData, outData, arg, "fsp_result");    	
	} else {
		Transaction(param, svcUrl, inData, outData, arg, "fsp_result");
	}
	*/
	Transaction(param, svcUrl, inData, outData, arg, "fsp_result");
}

/*
	##### jsp_transaction_ASYNC #####
*/
function jsp_transaction_async(
		  formObj
       , svcID
       , svcUrl
       , inData
       , outData
       , otherArg
       , callBackFnc
       , isErrorNotCall
       , isNotShow
       , isSync
       , trId
       , svcDataUrl) {
	
	if ( isErrorNotCall == null ) {
       isErrorNotCall = false;
	}

    //Transaction Start Time
    var objDate = new Date();
    var nStartTime = objDate.getTime(); //Milliseconds

	//동일 트랜으로 인식해서 Sendbox 방지를 위해... 
    var strRequstTime = Math.random() * 100000000000000000;
    
	var param = callBackFnc + "&" + isErrorNotCall + "&" + svcID + "&" + nStartTime + "&" + strRequstTime;
	//var param = callBackFnc + "&" + isErrorNotCall + "&" + svcID;
	
	// Argument 처리 
	var arg = "";
	
	// global variable 처리 
	arg += "g_AuthLevel=" + fsp_quote(g_AuthLevel);
	arg += " g_Deptid=" + fsp_quote(g_Deptid);
	arg += " g_EmpNo=" + fsp_quote(g_EmpNo);
	arg += " g_Name=" + fsp_quote(g_Name);
	arg += " g_SystemId=" + fsp_quote(g_SystemId);
	arg += " g_Upjang=" + fsp_quote(g_Upjang);
	arg += " g_UserKind=" + fsp_quote(g_UserKind);
	arg += " g_UpjangGroup=" + fsp_quote(g_UpjangGroup);
	arg += " g_Main_Upjang=" + fsp_quote(g_Main_Upjang);
	arg += " g_Tm_Cd=" + fsp_quote(g_Tm_Cd);
	arg += " g_Cc_Cd=" + fsp_quote(g_Cc_Cd);
	arg += " g_Sc_Cd=" + fsp_quote(g_Sc_Cd);
	
	//[[김재섭:개인정보 보안과 관련된 정보를 추가함.
	arg += " g_PersInfoAgreeYn=" + fsp_quote(g_PersInfoAgreeYn); 
	arg += " g_PersInfoMask=" + fsp_quote(g_PersInfoMask); 
	arg += " g_PersInfoProcLevel=" + fsp_quote(g_PersInfoProcLevel); 
	//김재섭:개인정보 보안과 관련된 정보를 추가함.]]

	//공통 파라미터를 Url에 추가 by kksoo
    svcUrl += fn_getGlobalVariableUrl() + "&callBack=" + svcID + ":" + callBackFnc;
	
	if ( otherArg != null && otherArg.length > 0 ) {
       arg += " " + otherArg;
	}
	
   // 메시지 초기화 
   errorTrace = "";
   
//    // 동기식 설정 
//    var isHttpAsync = true;
//    // 동기식 설정 
//    if ( isSync != null && isSync == true ) {
//        isHttpAsync = false;
//    }   
// 	GV_HTTPCODE="";	
// 	param += "&" + "1234";	// timem();
// 	transaction(param,serverUrl,inData,outData,arg, "fsp_result", isHttpAsync);
	
    // 동기식 설정 
    if ( isSync != null && isSync == true ) {
        http.Sync = true;
    }
    else {
		http.Sync = false;
    }
    
	Transaction_async(param, svcUrl, inData, outData, arg, "fsp_result");    	
}

 /****************************************************************
 * 서버 호출후 전체 공통 Callback 서비스 
 * @param param 
 * @param errCode 에러 Code  
 * @param errMsg  에러 메시지 
 * @return 없음
******************************************************************/
function fsp_result(param, ErrorCode, ErrorMsg) 
{    
	//trace("fsp_result : " + param);
	setWaitCursor(false, true);
	
	var str = param.split( "&" );

// 	// Http Error
// 	if( GV_HTTPCODE.length > 0){
// 		var arrErrorList = GV_HTTPCODE.split(chr(30));
// 		ErrorCode = parseInt(arrErrorList[0]);
// 		ErrorMsg = arrErrorList[1];
// 		
// 		ErrorMsg = ErrorMsg.replace(ErrorCode.toString() + ":","");		
// 		
// 		if((ErrorCode == -2085613056) || (ErrorCode == -2085605317)) {
// 			ErrorMsg += "\n\n동일한 현상이 발생할 경우, 시스템 관리자에게 연락하시기 바랍니다.";
// 		} else if((ErrorCode == -2085601264) || (ErrorCode == -2085613056)) {
// 			ErrorMsg = ErrorMsg.replace('해당경로에 파일을 찾을수 없습니다','네트워크 연결에 실패 하였습니다');
// 			ErrorMsg += "\n\n동일한 현상이 발생할 경우, 시스템 관리자에게 연락하시기 바랍니다.";
// 		}
// 	}
    if ( ErrorCode != 0 ) 
    {
		// nErrorCode == -100 인경우 Business Logic 에서 Error Check 한 경우
        if ( ErrorCode == -100 ) 
        {
            // Business Exception 처리 : 메시지 처리하지 않고, 화면에서 처리
        }
        // Session TimeOut 시 로그인창 호출
        else if ( ErrorCode == -99 ) 
        {
            afrm_Bottom.form.fn_reLogin();	//by kksoo
            return;
        } 
        else {            
			var objArg = new Array();
			// 실행모드가 UX Studio 일때만 오류 메시지 보임 처리
//			if ( gv_runMode == "L" ) {			
				objArg[0] = ErrorCode;
				objArg[1] = "시스템에러 - 아래와 같은 오류가 발생하였습니다.\n\n" + ErrorMsg;
// 			}
// 			else {
// 				objArg[0] = ErrorCode;
// 				objArg[1] = "시스템에러 - 시스템관리자에게 문의해 주세요.";
// 			}
			
			gfn_alert(objArg[1]);
//             var SYS_MSG = errorTrace;
//             
//             // 메시지 초기화 
//             errorTrace = "";
//             if( SYS_MSG == undefined ) {
// 				SYS_MSG = "";
//             }                
//             if ( gfn_length(SYS_MSG)!= 0 ) {
//                 alert("오류발생:관리자에서 문의하세요!\n" + SYS_MSG);
//             } else {
//                 alert("오류발생:관리자에서 문의하세요!\n" + ErrorMsg);
//             }
        }
        
        // 업무 호출 
        if ( str[1] != "true" ) {
        	if ( !gfn_isNull(str[0]) ) {
				if ( str[0].indexOf("(") > -1 ) {
					var sFunction = str[0].substr(0,str[0].length-2);
					eval(sFunction + "( ErrorCode, ErrorMsg, str[2] )");
				} else {
					eval(str[0] + "( ErrorCode, ErrorMsg, str[2] )");
				}
            }  
        }  
    } else {
		if ( !gfn_isNull(str[0]) ) {
			if ( str[0].indexOf("(") > -1 ) {
				var sFunction = str[0].substr(0,str[0].length-2);
				eval(sFunction + "( ErrorCode, ErrorMsg, str[2] )");
			} else {
				eval(str[0] + "( ErrorCode, ErrorMsg, str[2] )");
			}
        }  
    }  
}
/****************************************************************
* 서버를 호출하여 처리한 서비스에 대한 트레이스를 가져온다.
* @return 서비스 호출 트레이스 
******************************************************************/
function fsp_getServiceTrace() {
	return fsp_svcTrace;
}
/****************************************************************
* action Name 가져오기  
* @param actionName 현재 처리해야 하는 action name 
* @return 없음
******************************************************************/
function fn_getActionName(actionName) {
	if ( gfn_length(actionName) == 0 ) {
		actionName = "xDefaultAction";
	}
	
	return actionName;
}
/******************************************************
 * 서버에서 처리한 후의 에러 메시지 창 표시 
******************************************************/
function fn_showSysError(sMsg) {
//	if ( IsExistFunc("fsp_fn_showSysError") ) {
//		fsp_fn_showSysError(sMsg);
//	} else {
		alert(sMsg);
//	}	
}
/******************************************************
*  로그인이 안되어 있을 경우 처리 
******************************************************/
function fn_notLogin() {
//	if ( IsExistFunc("fsp_fn_notLogin") ) {
//		fsp_fn_notLogin();
//	} else {
		alert("로그아웃 되었습니다.");
//	}	
}
/**************************************************************************************
* 처리해야 하는 비지니스 명 
* @param  newBizName  - 업무 비지니스 명 
**************************************************************************************/
function fsp_setBiz(newBizName) {
	FSP_CURR_BIZ = newBizName;
}
/**************************************************************************************
* 처리해야 하는 비지니스 명 초기화 
**************************************************************************************/
function fsp_clearBiz() {
	FSP_CURR_BIZ = "";
}



/**************************************************************************************
                              FILE UPLOAD / DOWNLOAD 
**************************************************************************************/

// 파일 업로드 경로
var GV_SERVER_URL      = gv_webRoot;
var GF_FILE_SERVER_URL = gv_webRoot;

// 파일 업로드 관련 컴포넌트 생성여부
var IS_FILE_UPLOAD_EXIST = false;
// 파일 다운로드 관련 컴포넌트 생성여부
var IS_FILE_DOWNLOAD_EXIST = false;
// 파일 업/다운로드 리턴 에러코드
var _FILE_PROC_RTN = "";
// 파일 업/다운로드 리턴 에러메시지
var _FILE_PROC_MSG = "";
// 파일 업/다운로드 서비스 명
var GF_FILE_SERVICE_NAME = "FileUploader";
// 파일 업로드 결과 데이터셋
var GF_FILE_RETURN_DS_NAME = "fsp_ds_fileupload_rtn";

var GF_FILE_UPLOAD_SIZE = 10485760;   // 1M : 1048576; 4096000
var GF_FILE_DOWNLOAD_SIZE = 10485760;

var HttpFile;
var httpFile;
/******************************************************
 *  서버로 파일 전송 처리 
 * @param  httpfileObj  (현재 사용 불가)http file 처리 객체  
 * @param  serverSaveDir  서버에 저장할 디렉토리 별명 
 * @param  localFilePath 로컬 경로 
 * @param  localFileName 로컬 파일명 
 * @param  sendFileName  (현재 사용불가) 서버에 전송하고 싶은 이름 
 * @param  fileProcType  (현재 사용불가) 서버에서 기존 파일을 처리하는 타입 정의  
 * @param  deleteFileName 서버에서 삭제해야 하는 파일 명 
******************************************************/
function fsp_fileWrite(
		httpfileObj
		, serverSaveDir
		, localFilePath
		, localFileName
		, sendFileName
		, fileProcType
		, deleteFileName
		){
	
	if( localFilePath==undefined||localFilePath==""||localFilePath==null
		||localFileName==undefined||localFileName==""||localFileName==null ) {
		alert("파일을 선택해주세요.");
		return false;
	}
	var localFileFullPath = localFilePath + localFileName;

	//첨부파일 점검 김재섭
	var strFileExt  = gfn_getFileExt(localFileName).toLowerCase(); 	//확장자, 일괄 소문자로 변경하여 검사
	
	if (fv_UPLOAD_PROHIBITED_FILE_EXTENTION.indexOf(strFileExt) >= 0) {
		gfn_alert("msg.err.noExtentionFile", fv_UPLOAD_PROHIBITED_FILE_EXTENTION);	// 첨부할 수 없는 형식의 파일입니다.
		return false;
	}
	
	if(deleteFileName==undefined||deleteFileName==""||deleteFileName==null){
		deleteFileName = "";
	}
	
	// fileupload 명
	var sDataset = "fsp_ds_fileupload";
	
	// fileupload 객체 명
	var sFileUpload = "fsp_fileupload";
		
	if(!IS_FILE_UPLOAD_EXIST){
		IS_FILE_UPLOAD_EXIST = true;
		
		//fileupload 용 데이터셋 생성
		var dsObj = new Dataset;
		dsObj.name = sDataset;
		this.addChild(sDataset, dsObj);
		var objDataset = dsObj;
		objDataset.addColumn("FILENAME", "string", 100);
		
		// fileupload 객체 생성
		var fileUpload = new FileUpload;
		fileUpload.name = sFileUpload;
		this.addChild(sFileUpload,fileUpload);
		var objFileUpload = fileUpload;
		
		objFileUpload.innerdataset = sDataset;
		objFileUpload.filecolumn = "FILENAME";
		objFileUpload.async = false;	//업로드 결과 처리를 위해서 동기처리
		objFileUpload.visible = false;
		objFileUpload.onload.addHandler(fsp_afterFileWrite);
		
		objFileUpload.show();
		
		// return dataset 생성
		dsObj = new Dataset;
		dsObj.name = GF_FILE_RETURN_DS_NAME;
		this.addChild(GF_FILE_RETURN_DS_NAME, dsObj);
	}
	
	eval("var objDataset = "+sDataset+";");
	objDataset.clearData();
	objDataset.addRow();
	objDataset.setColumn(0,"FILENAME", localFileFullPath);
	
	eval("var objFileUpload = "+sFileUpload+";");
	objFileUpload.uploadurl = GV_SERVER_URL + GF_FILE_SERVICE_NAME 
			+"?mode=upload&subDir=" + encodeURI(serverSaveDir)
			+ "&deleteFileName=" + encodeURI(deleteFileName);
	
	var arrRtn = new Array(4);

	if( !objFileUpload.upload() ){
		arrRtn[0] = "E";
		arrRtn[1] = "서버 파일 전송 실패";
		return arrRtn;
	}
	//첨부할 수 없는 형식의 파일 처리 추가 by kksoo
	if( fsp_ds_fileupload_rtn.getRowCount()==0){
		arrRtn[0] = "E";
		arrRtn[1] = "서버 파일 전송 실패::서버오류@첨부할 수 없는 형식의 파일입니다.(" + fv_UPLOAD_PROHIBITED_FILE_EXTENTION + ")";
		return arrRtn;
	}
	
	eval("var objReturnDataset = " + GF_FILE_RETURN_DS_NAME + ";");
	arrRtn[0] = "S";
	arrRtn[1] = objReturnDataset.getColumn(0,"FILE_PATH");
	arrRtn[2] = objReturnDataset.getColumn(0,"FILE_NAME");
	arrRtn[3] = objReturnDataset.getColumn(0,"FILE_SIZE");
	
	return arrRtn;
}

/******************************************************
 *  서버로 파일 전송 처리 callback
******************************************************/
function fsp_afterFileWrite(obj:FileUpload,  e:FileUploadLoadEventInfo)
{
	// return dataset 명
	eval("var objReturnDataset = " + GF_FILE_RETURN_DS_NAME + ";");
	objReturnDataset.copyData(e.datasets[0]);
}

/******************************************************
 *  서버로 파일 삭제 처리 
 * @param  serverSaveDir  서버에 저장할 디렉토리 별명 
 * @param  serverFileName 서버의 파일명 
 * @param  isNeedRtn 처리 결과 
 * @return  필요시 처리 성공 여부 : true / 그외 false 
 ******************************************************/
 var ErrorMsg;
function fsp_fileDelete(serverSaveDir, serverFileName, isNeedRtn) {
    var serverUrl = GV_SERVER_URL + GF_FILE_SERVICE_NAME + "?mode=delete";
	serverUrl = serverUrl + "&subDir=" + encodeURI(serverSaveDir) 
        + "&fileName=" + encodeURI(serverFileName);
    
	_FILE_PROC_RTN = "";
	_FILE_PROC_MSG = "";
    
    transaction("", serverUrl, "", "", "", "", !isNeedRtn);    
    
    if ( isNeedRtn == true ) {
        // 결과 전송 
        return ErrorMsg=="OK";
    }
}
/******************************************************
 *  서버에서 파일 복사 처리 
 * @param  srcFileDir  서버에서 복사원본  디렉토리 별명 
 * @param  targerDir  서버에서 복사할 디렉토리 별명  
 * @param  srcFileName 서버에서 복사 원본 파일명 
 * @param  targetFileName 서버에서 복사 대상 파일명 ( rename 하고자할 경우만 정의 )   
 * @param  isDelete  복사후 삭제 여부 : 삭제시 ( true )
 * @param  isNeedRtn 처리 결과 
 * @return  필요시 처리 성공 여부 : true / 그외 false 
 ******************************************************/
function fsp_fileCopy(srcFileDir, targerDir, srcFileName, targetFileName, isDelete, isNeedRtn) {
    var serverUrl = GV_SERVER_URL + GF_FILE_SERVICE_NAME + "?mode=copy";
    
    var isDel ="N";
    if ( isDelete == true ) {
        isDel = "Y";
    }
    if ( targetFileName != undefined && targetFileName.length == 0 ) {
        targetFileName = srcFileName;
    }
    
    serverUrl = serverUrl + "&srcFileDir=" + encodeURI(srcFileDir) 
        + "&targetFileDir=" + encodeURI(targerDir)
        + "&isDelete=" + isDel
        + "&targetFileName=" + encodeURI(targetFileName)
        + "&srcFileName=" + encodeURI(srcFileName);
	
	_FILE_PROC_RTN = "";
    _FILE_PROC_MSG = "";
    
    transaction("", serverUrl, "", "", "", "", !isNeedRtn);    
    
    if ( isNeedRtn == true ) {
        // 결과 전송 
        return _FILE_PROC_RTN;
    }
}

/******************************************************
 *  서버로 파일 다운로드 처리 
 * @param  httpfileObj  (현재 사용 불가) http file 처리 객체 
 * @param  serverSaveDir  서버에 저장할 디렉토리 별명 
 * @param  serverFileName  서버에서 전송 받아야 하는 이름  
 * @param  localFilePath (현재 사용 불가) 로컬 경로 
 * @param  localFileName 로컬 파일명 
******************************************************/
function fsp_fileRead(httpFileObj, serverSaveDir, serverFileName, localFilePath, localFileName)
{
	if(serverSaveDir==undefined || serverSaveDir==null){
		serverSaveDir = "";
	}
	
	var arrRtn = new Array(4);
	
	if(serverFileName==undefined || serverFileName==null || serverFileName.length==0){
		arrRtn[0] = "E";
		arrRtn[1] = "서버에서 확인할 파일명이 존재하지 않습니다.";
		return arrRtn;
	}
	
	if(gfn_isNull(localFileName)) localFileName = serverFileName;
	
	var sFileDownload = "fsp_fileDownload";
	var sFileDialog = "fsp_fileDialog";

	if(!IS_FILE_DOWNLOAD_EXIST){
		
		IS_FILE_DOWNLOAD_EXIST = true;
		
		// HttpObject 객체 생성
		var httpObject = new HttpObject;
		httpObject.name = sFileDownload;
		this.addChild(sFileDownload,httpObject);
		var objHttpObject = httpObject;
		objHttpObject.onload.addHandler(fsp_afterFileRead);
		
		// FileDialog 객체 생성
		var fileDialog = new FileDialog;
		fileDialog.name = sFileDialog;
		this.addChild(sFileDialog,fileDialog);
		var objFileDialog = fileDialog;
	}

	eval("var objHttpObject = " + sFileDownload + ";");
	eval("var objFileDialog = " + sFileDialog + ";");
	
	//var objVirtualFile = objFileDialog.open("file download",FileDialog.SAVE ,"%DOCUMENT%",localFileName);
	var objVirtualFile = objFileDialog.open("file download",FileDialog.SAVE ,"",localFileName);
	
	if( objVirtualFile == undefined ) {
		arrRtn[0] = "E";
		arrRtn[1] = "파일 다운로드가 취소 되었습니다.";
		return arrRtn;
	}
	
	var sUrl = GV_SERVER_URL + GF_FILE_SERVICE_NAME 
			+"?mode=download&subDir=" + encodeURI(serverSaveDir)
			+ "&fileName=" + encodeURI(serverFileName);
	
	_FILE_PROC_RTN = "";
	_FILE_PROC_MSG = "";
	MSG = "";
	
	if(objHttpObject.download(sUrl,objVirtualFile,false))
	{
		if(_FILE_PROC_RTN != 0)
		{
			arrRtn[0] = "E";
			arrRtn[1] = "서버 파일 다운로드 실패"+_FILE_PROC_MSG;
			return arrRtn;
		}
		if(MSG.length>0){
			arrRtn[0] = "E";
			arrRtn[1] = MSG;
			return arrRtn;
		}
		arrRtn[0] = "S";
		return arrRtn;
	}	
}

/******************************************************
 *  서버로 파일 다운 처리 callback
******************************************************/
function fsp_afterFileRead(obj:HttpObject, e:HttpObjLoadEventInfo)
{
	_FILE_PROC_RTN = e.errorcode;
	_FILE_PROC_MSG = e.errormsg;
}

/******************************************************
 *  서버에서 실제 이미지 경로 가져오기 
 * @param  serverSaveDir  서버에 저장할 디렉토리 별명 
 * @param  fileName  보여줄 파일명 ( 옵션 )
 * @return  서버 전제 url 경로 
 ******************************************************/
var _DIR_LIST = "";
var GF_DIR_LIS_ARRAY;
function fsp_getServerDir(serverSaveDir, fileName) 
{
    if ( GF_DIR_LIS_ARRAY == null ) {
        var serverUrl = GV_SERVER_URL + GF_FILE_SERVICE_NAME + "?mode=getSaveDirList";
    
        _DIR_LIST = "";

        transaction("", serverUrl, "", "", "", "", false);
        
        if ( _DIR_LIST != undefined && _DIR_LIST != null && _DIR_LIST.length > 0 ) {
            GF_DIR_LIS_ARRAY = _DIR_LIST.split(":");
        }
    }
    
    var defUrl = "";
    var rootUrl = "";
    
    for( var i = 0; i < GF_DIR_LIS_ARRAY.length; i++ ) {
        var sub = GF_DIR_LIS_ARRAY[i].split("=");

        if ( sub[0] == "_root" ) {
            rootUrl = sub[1];  
            if( defUrl == undefined || defUrl == null || defUrl.length == 0 ) {
                defUrl = sub[1];
            } else {
                break;
            }
        } 
        
        if ( sub[0] == serverSaveDir ) {
            defUrl = sub[1];
            if ( rootUrl != undefined && rootUrl != null && rootUrl.length > 0 ) {
                break;
            }
        }
    }   
    var url = GV_SERVER_URL;
    
    // root url 
    if ( url.substr(url.length-1,1) != "/" && rootUrl.substr(0, 1)!= "/") {
        url += "/";
    } 
    // (service.xml에서 설정한 ../upload/ 에서 ../ 제거)
    url += gfn_replace(rootUrl,"../","");
    
    if ( defUrl != rootUrl ) {
        if ( url.substr(url.length-1,1 )!= "/" && defUrl.substr(0, 1)!= "/") {
            url += "/";
        } 
        url += defUrl;
    }
            
    if ( fileName != undefined && fileName != null && fileName.length > 0 ) {
        if ( url.substr(url.length-1,1)!= "/") {
            url += "/" + fileName;
        } else {
            url += fileName;
        }
    }     
    return url;
}

/**
 * @class 서버에 전송할 Global 변수를 Get Url 방식으로 정의 by kksoo
 * @param 없음
 * @return 공통변수값
 */
function fn_getGlobalVariableUrl() 
{
	var strVal  = "";
	//(주의) wrapQuote 사용하면 안 됨
	strVal += "?appId=" + g_AppId;    					// App ID
	strVal += "&sysType=" + g_SystemId;    				// Syetem ID
	strVal += "&menuId=" + gv_menuId;    				// 메뉴ID        
	strVal += "&prgId=" + gv_progrmId; 					// 프로그램 ID

    return strVal;
}]]></Script>
