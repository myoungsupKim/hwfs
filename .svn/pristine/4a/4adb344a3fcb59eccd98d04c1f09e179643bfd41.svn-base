<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="sc.scu.userIdRequestDAO">
	<desc>사용자 계정(ID) HQML Query</desc>

	<!-- 사용자 계정(ID) 목록을 조회한다. -->
	<statement name="selectList" type="select">
		/*+ com.hwfs.sc.scu.dao.UserIdRequestDAO.selectList */
		<![CDATA[
SELECT A.REQUEST_CLASS,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = '사용자군' AND SET1 = '외부' AND CODE = A.REQUEST_CLASS) AS REQUEST_NAME,
       TO_CHAR(TO_DATE(A.REQUEST_DATE, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD') AS V_REQUEST_DATE,
       A.REQUEST_DATE,
       A.REQUEST_CD,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'ACCT_STATUS' AND CODE = A.REQUEST_CD) AS REQUEST_NM,
       A.UPJANG,
       (SELECT UPJANGNM FROM ST_UPJANG WHERE UPJANG = A.UPJANG) AS UPJANGNM,
       A.OTCUSTCD,
       (SELECT OTCUSTNM FROM FMP_OTHER_CUST WHERE OTCUSTCD = A.OTCUSTCD) AS OTCUSTNM,
       A.USER_ID,
       B.SABUN,
       B.NM_KOR,
       A.REQUEST_REASON,
       A.REQ_USER_SABUN,
       C.NM_KOR AS REQ_USER_NAME,
       TO_CHAR(A.APPRV_DATE, 'YYYY-MM-DD') AS APPRV_DATE,
       A.APPROV_USER_SABUN,
       D.NM_KOR AS APPROV_USER_NAME,
       A.STATUS_CD,
       (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'STATUS_CD' AND CODE = A.STATUS_CD) AS STATUS_NM,
       A.RTN_REASON,
       B.MAIN_TYPE,
       (SELECT MAX(AUTHLEVEL) AS AUTHLEVEL FROM SCC_USER_AUTHLEVEL WHERE SABUN = B.SABUN) AS USER_AUTH_LEVEL 
FROM   SCC_USERID_REQUEST A,
       SCC_USERINFO B,
       SCC_USERINFO C,
       SCC_USERINFO D
WHERE  B.USERID = A.USER_ID
AND    A.REQ_USER_SABUN = C.SABUN
AND    A.APPROV_USER_SABUN = D.SABUN(+)
<#if requestDateFrom?has_content>
AND    A.REQUEST_DATE >= :requestDateFrom || '000000'
</#if>
<#if requestDateTo?has_content>
AND    A.REQUEST_DATE <= :requestDateTo || '235959'
</#if>
<#if statusCd?has_content>
AND    A.STATUS_CD = :statusCd
</#if>
AND    A.REQ_USER_SABUN = :loginSabun
		]]>
	</statement>

	<!-- 사용자 계정(ID)(을)를 등록한다. -->
	<statement name="selectUserCheck" type="select">
		/*+ com.hwfs.sc.scu.dao.UserIdRequestDAO.selectUserCheck */
		<![CDATA[
SELECT COUNT(*) AS CNT
FROM   SCC_USERINFO
WHERE  USERID = :userid
		]]>
	</statement>

	<!-- 사용자 정보(을)를 등록한다. -->
	<statement name="insertUserInfo" type="insert">
		/*+ com.hwfs.sc.scu.dao.userIdRequestDAO.insertUserInfo */
		<![CDATA[
INSERT INTO SCC_USERINFO
(
 SABUN,
 USERID,
 PASSWORD,
 NM_KOR,
 USER_GROUP,
 USER_TYPE,
 UPJANG,
 OTCUSTCD,
 JOIN_DATE,
 PWD_CHG_DATE,
 REMARK,
 USE_YN,
 ACCT_STATUS,
 PERS_INFO_AGREE_YN,
 MAIN_TYPE,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :sabun,
 :userId,
 SCC_CRYPTO.ONEWAY_ENC_FUN(SUBSTR(:sabun, 3)),
<#if nmKor?exists> :nmKor, <#else> null, </#if>
<#if requestClass?exists> :requestClass, <#else> null, </#if>
 '외부',
<#if upjang?exists> :upjang, <#else> null, </#if>
<#if otcustcd?exists> :otcustcd, <#else> null, </#if> 
 TO_CHAR(SYSDATE, 'YYYYMMDD'),
 TO_CHAR(SYSDATE, 'YYYYMMDD'),
<#if requestReason?exists> :requestReason, <#else> null, </#if>
 'N',
<#if requestCd?exists> :requestCd, <#else> null, </#if>
 'N',
 :mainType,
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 사용자 권한레벨(을)를 등록한다. -->
	<statement name="insertAuthLevel" type="insert">
		/*+ com.hwfs.sc.scu.dao.userIdRequestDAO.insertAuthLevel */
		<![CDATA[
INSERT INTO SCC_USER_AUTHLEVEL
(
 SABUN,
 AUTHLEVEL,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :sabun,
 :userAuthLevel,
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 사용자 권한레벨(을)를 삭제한다. -->
	<statement name="deleteAuthLevel" type="delete">
		/*+ com.hwfs.sc.scu.dao.userIdRequestDAO.deleteAuthLevel */
		<![CDATA[
DELETE
FROM   SCC_USER_AUTHLEVEL
WHERE  SABUN = :sabun
		]]>
	</statement>


	<!-- 사용자 정보(을)를 등록한다. -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.sc.scu.dao.userIdRequestDAO.insert */
		<![CDATA[
INSERT INTO SCC_USERID_REQUEST
(
 REQUEST_CLASS,
 REQUEST_DATE,
 REQUEST_CD,
 USER_ID,
 UPJANG,
 OTCUSTCD,
 REQ_USER_SABUN,
 REQUEST_REASON,
 APPROV_USER_SABUN,
 APPRV_DATE,
 STATUS_CD,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :requestClass,
 :requestDate || TO_CHAR(SYSDATE, 'HH24MISS'),
 :requestCd,
 :userId,
<#if upjang?exists> :upjang, <#else> null, </#if>
<#if otcustcd?exists> :otcustcd, <#else> null, </#if>
 :loginSabun,
<#if requestReason?exists> :requestReason, <#else> null, </#if>
<#if approvUserSabun?exists> :approvUserSabun, <#else> null, </#if>
<#if apprvDate?exists> :apprvDate, <#else> null, </#if>
 '00',
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 사용자 정보(을)를 수정한다. -->
	<statement name="updateUserInfo" type="update"><![CDATA[
UPDATE SCC_USERINFO SET
	   USE_YN = 'N',
       ACCT_STATUS = :requestCd,
<#if acctLkReasonCd?has_content>
       ACCT_LK_REASON_CD = :acctLkReasonCd,
       ACCT_LK_DD = SYSDATE,
</#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  USERID = :userId
		]]></statement>

</hqml>
