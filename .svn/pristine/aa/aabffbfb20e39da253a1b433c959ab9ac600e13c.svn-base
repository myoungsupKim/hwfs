<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="rc.sle.menuMgmtDAO">
	<desc>영업장 메뉴 등록 관리</desc>

	<!-- DATA를 조회한다. -->
	<statement name="selectListItemPool" type="select"><![CDATA[
	
	SELECT 
		   0 AS CHK,
		   POOL.MENU_CD , 
	       POOL.MENU_CLASS , 
	       POOL.MENU_CLSFI ,  
	       POOL.MENU_SCLASS , 
	       
	       A.MENU_CLSFI_NM AS MENU_CLASS_NM , 
	       B.MENU_CLSFI_NM AS MENU_CLSFI_NM, 
	       C.MENU_CLSFI_NM AS MENU_SCLASS_NM ,
	       
	       POOL.MENU_NM , 
	       POOL.MENU_ABBR , 
	       POOL.LANGAE1 , 
	       POOL.LANGAE2 , 
	       POOL.LANGAE3 , 
	       POOL.BASIS_PRICE , 
	       POOL.CST , 
	       DECODE(POOL.USE_CLASS, 'Y', 1, 0) AS USE_CLASS,
	       POOL.CONVERT_QUANTITY , 
	       POOL.EXPL , 
	       POOL.UNIT , 
	       UNIT.CODE_NAME      AS UNIT_NM,
	       POOL.BAR_CD , 
	       POOL.MATERIAL_CD , 
	       POOL.RECP_CD , 
	       DECODE(POOL.USE_YN, 'Y', 1, 0) AS USE_YN,
	      TO_CHAR(POOL.CDATE,'YYYY-MM-DD PMHH:MI:SS') AS CDATE,
	      TO_CHAR(POOL.UDATE,'YYYY-MM-DD PMHH:MI:SS') AS UDATE,
	      DECODE(NVL(POOL.MATERIAL_CD,''),'','Y', SLE_MENU_POOL_VAT_FUN(POOL.MATERIAL_CD)) TAX_YN,
	      	(SELECT WM_CONCAT(UJM.UPJANG_NM)
									FROM (
										SELECT MENU_CD AS G_CD,
						  						(SELECT SUV.UPJANGNM FROM SCO_UPJANG_MST_V SUV WHERE SUV.UPJANG = RURCM.OUTLET_CD) AS UPJANG_NM
						 				FROM SLE_OUTLET_MENU RURCM 
                    WHERE RURCM.USE_YN = 'Y'
								) UJM
                WHERE UJM.G_CD = POOL.MENU_CD
								GROUP BY UJM.G_CD) AS U_NM --사용업장 리스트
	  FROM SLE_OUTLET_MENU_GRP GROP
	   	--대분류
		LEFT OUTER  JOIN   SLE_OUTLET_MENU_GRP   A  ON A.OUTLET_CD   = GROP.OUTLET_CD 
                                                   AND A.MENU_CLASS  = GROP.MENU_CLASS 
                                                   AND A.MENU_CLSFI  = '00' 
                                                   AND A.MENU_SCLASS = '00'
        --중부류               
		LEFT OUTER  JOIN  SLE_OUTLET_MENU_GRP    B  ON B.OUTLET_CD   = GROP.OUTLET_CD 
												   AND B.MENU_CLASS  = GROP.MENU_CLASS  
												   AND B.MENU_CLSFI  = GROP.MENU_CLSFI 
												   AND B.MENU_SCLASS = '00'
        --소분류               
		LEFT OUTER  JOIN  SLE_OUTLET_MENU_GRP   C  ON C.OUTLET_CD   = GROP.OUTLET_CD 
		                                          AND C.MENU_CLASS  = GROP.MENU_CLASS  
		                                          AND C.MENU_CLSFI  = GROP.MENU_CLSFI 
		                                          AND C.MENU_SCLASS = GROP.MENU_SCLASS
        
	   INNER JOIN SLE_MENU_POOL POOL        ON POOL.MENU_CLASS = GROP.MENU_CLASS AND POOL.MENU_CLSFI = GROP.MENU_CLSFI AND POOL.MENU_SCLASS = GROP.MENU_SCLASS 
	   LEFT OUTER JOIN SCC_COMMON_CODE UNIT ON UNIT.GROUP_CODE = 'F0007'         AND UNIT.CODE       = POOL.UNIT        
	   LEFT OUTER JOIN SLE_OUTLET_MENU MENU ON MENU.OUTLET_CD  = GROP.OUTLET_CD  AND MENU.MENU_CD    = POOL.MENU_CD    AND MENU.USE_YN = 'Y' 

	 WHERE POOL.USE_YN = 'Y' AND POOL.USE_CLASS ='Y'
	   AND MENU.MENU_CD IS NULL 
	   AND GROP.OUTLET_CD = :outletCd 
	   
	   	<#if menuClass?has_content>   AND  POOL.MENU_CLASS     = :menuClass     </#if>
		<#if menuClsfi?has_content>   AND  POOL.MENU_CLSFI     = DECODE(:menuClsfi,'00', POOL.MENU_CLSFI,:menuClsfi)     </#if>
		<#if menuSclass?has_content>  AND  POOL.MENU_SCLASS    = DECODE(:menuSclass,'00',POOL.MENU_SCLASS,:menuSclass)    </#if>
		
		<#if menuNm?has_content>   AND  LOWER(POOL.MENU_NM)    LIKE '%' || LOWER(:menuNm) || '%'    </#if>
		<#if itemCd?has_content>   AND  LOWER(POOL.MENU_CD)    LIKE '%' || LOWER(:itemCd) || '%'    </#if>
	    
	 ORDER BY MENU_CD

	]]></statement>


	<!-- DATA를 조회한다. -->
	<statement name="selectList" type="select"><![CDATA[
	
	SELECT  0 AS CHK_YN, MENU.MENU_CD,
	        MENU.OUTLET_CD, SHOP.OUTLET_NM AS OUTLET_NM,
	        MENU.MENU_CLASS,
	        MENU.MENU_CLSFI,
	        MENU.MENU_SCLASS,
	        MENU.MENU_NM,
	        MENU.MENU_ABBR,
	        MENU.LANGAE1,
	        MENU.LANGAE2,
	        MENU.LANGAE3,
	        MENU.BASIS_PRICE,
	        NVL(MENU.CST,0) AS CST,
	        MENU.APPLY_DD,
	        NVL(MENU.APPLY_PRICE,0) AS APPLY_PRICE,
	        MENU.END_DD,
	      
	        DECODE(MENU.USE_CLASS, 'Y', 1, 0) AS USE_CLASS,
	        MENU.CONVERT_QUANTITY,
	        MENU.EXPL,
	        MENU.UNIT,
	        MENU.DPST_CD,
	        
	        DECODE(MENU.UPRICE_CHG_POSS_YN, 'Y', 1, 0) AS UPRICE_CHG_POSS_YN,
	        
	        MENU.SESN_APPLY_YN,
	        MENU.MENU_TYPE,
	        MENU.BAR_CD,
	        
	        MENU.MATERIAL_CD,		--자재코드
	        MATERIAL.ITEM_NAME AS MATERIAL_CD_NM,
	        
	        MENU.RECP_CD,		--레시피코드
	        (SELECT RECIPE_NM  FROM   RSS_UPJANG_RECIPE_CD_MST WHERE UPJANG_CD = MENU.OUTLET_CD AND STD_RECIPE_CD = MENU.RECP_CD) AS RECP_CD_NM,
	        
	           
	        MENU.PIC_PLACE,
	        MENU.TAX_YN,
	        MENU.CAL_METHOD,
	        MENU.SVC,
	        MENU.SPEC_TAX,
	        MENU.EDU_TAX,
	        MENU.FF_TAX,
	        MENU.VAT,
	        MENU.FUND,
	        MENU.DISCNT_POSS_YN,
	        MENU.TICKET_PRINT_YN,
	        
	        MENU.KTCN_PRINT_NM,

	        MENU.KTCN_PRINT_YN1,
	        MENU.KTCN_PRINT_YN2,
	        MENU.KTCN_PRINT_YN3,
	        MENU.KTCN_PRINT_YN4,
	        
	        MENU.KTCN_PRTR_CD1,
	        MENU.KTCN_PRTR_CD2,
	        MENU.KTCN_PRTR_CD3,
	        MENU.KTCN_PRTR_CD4,
	        
	        KTCN1.KTCN_PRTR_NM AS KTCN_PRTR_CD1_NM,
	        KTCN2.KTCN_PRTR_NM AS KTCN_PRTR_CD2_NM,
	        KTCN3.KTCN_PRTR_NM AS KTCN_PRTR_CD3_NM,
	        KTCN4.KTCN_PRTR_NM AS KTCN_PRTR_CD4_NM,
	        
	        MENU.CUST_CD,
	        MENU.COMM_RAT,
	    	MENU.OTHER_BU_MENU_CD,
	        DECODE(MENU.USE_YN, 'Y', 1, 0) AS USE_YN,
	          
	        SCLAS.MENU_CLSFI_NM AS MENU_SCLASS_NM,
	        CLSFI.MENU_CLSFI_NM AS MENU_CLSFI_NM,
	        CLASS.MENU_CLSFI_NM AS MENU_CLASS_NM,
	
	        USECLASS.CODE_NAME  AS USE_CLASS_NM,
	        UNIT.CODE_NAME      AS UNIT_NM,
	        MENUTYPE.CODE_NAME  AS MENU_TYPE_NM,
	        SESNYN.CODE_NAME    AS SESN_APPLY_YN_NM,
	        TAXYN.CODE_NAME     AS TAX_YN_NM,
	        CALMETHOD.CODE_NAME AS CAL_METHOD_NM,
	        DISPOSYN.CODE_NAME  AS DISCNT_POSS_YN_NM,
	        PRIPOSYN.CODE_NAME  AS UPRICE_CHG_POSS_YN_NM,
	        KTCNYN1.CODE_NAME   AS KTCN_PRINT_YN1_NM,
	        KTCNYN2.CODE_NAME   AS KTCN_PRINT_YN2_NM,
	        KTCNYN3.CODE_NAME   AS KTCN_PRINT_YN3_NM,
	        KTCNYN4.CODE_NAME   AS KTCN_PRINT_YN4_NM,
	        TICKER.CODE_NAME    AS TICKET_PRINT_YN_NM,
	        USEYN.CODE_NAME     AS USE_YN_NM,
			MENU.RELEASE_TYPE   AS RELEASE_TYPE,
		    NVL(MENU.MODIFY_YN,'Y')      AS MODIFY_YN,
		    NVL(MENU.MODIFY_YN,'Y')      AS MODIFY_YNOLD,
		    
		    MENU.WH_CD,
		    INV.SUBINV_NAME AS WH_CD_NM,
            --NVL(ASG.PIC_PLACE,' ') AS POS_PLACE
            -- CH201703_00534 이다미 요청으로 지정키위치 추가함, 지정키 그룹명 앞에 붙임 20170328 김호석
            --CASE WHEN (ASG.PIC_PLACE_GRP_NM is null) THEN ' ' ELSE PIC_PLACE_GRP_NM || ':' || ASG.PIC_PLACE  END AS POS_PLACE
            NVL((SELECT WM_CONCAT(UJM.PLACE)
			 FROM (SELECT AIG.OUTLET_CD, AIG.CD_NUM, AKG.PIC_PLACE_GRP_NM || ':' || AIG.PIC_PLACE AS PLACE 
			  		FROM SLE_ASSIGN_KEY AIG 
			 			LEFT OUTER JOIN SLE_ASSIGN_KEY_GRP AKG 
			 			ON AIG.OUTLET_CD = AKG.OUTLET_CD AND AIG.PIC_PLACE_GRP = AKG.PIC_PLACE_GRP AND AIG.PIC_PLACE_SUB_GRP = AKG.PIC_PLACE_SUB_GRP  
			 			AND AIG.POS_NUM = AKG.POS_NUM AND AIG.PIC_PLACE_SUB_GRP = AKG.PIC_PLACE_SUB_GRP
			 				WHERE AKG.PIC_PLACE_GRP_NM IS NOT NULL AND AIG.USE_YN = 'Y') UJM			                
			                WHERE UJM.OUTLET_CD = MENU.OUTLET_CD AND UJM.CD_NUM = MENU.MENU_CD
											GROUP BY UJM.OUTLET_CD, UJM.CD_NUM), ' ') AS POS_PLACE
            
	FROM SLE_OUTLET_MENU MENU
	INNER      JOIN SLE_OUTLET_MST  SHOP  ON SHOP.OUTLET_CD    = MENU.OUTLET_CD  -- 업장 코드
	LEFT OUTER JOIN SLE_OUTLET_MENU_GRP SCLAS  ON SCLAS.OUTLET_CD   = MENU.OUTLET_CD
	                                     AND SCLAS.MENU_CLASS  = MENU.MENU_CLASS
	                                     AND SCLAS.MENU_CLSFI  = MENU.MENU_CLSFI
	                                     AND SCLAS.MENU_SCLASS = MENU.MENU_SCLASS
	                                     AND SCLAS.MENU_SCLASS <> '00'
	INNER JOIN SLE_OUTLET_MENU_GRP CLSFI  ON CLSFI.OUTLET_CD   = MENU.OUTLET_CD
	                                     AND CLSFI.MENU_CLASS  = MENU.MENU_CLASS
	                                     AND CLSFI.MENU_CLSFI  = MENU.MENU_CLSFI
	                                     AND CLSFI.MENU_SCLASS = '00'
	INNER JOIN SLE_OUTLET_MENU_GRP CLASS  ON CLASS.OUTLET_CD   = MENU.OUTLET_CD
	                                     AND CLASS.MENU_CLASS  = MENU.MENU_CLASS
	                                     AND CLASS.MENU_CLSFI  = '00'
	                                     AND CLASS.MENU_SCLASS = '00'
	                                     
	INNER JOIN SCC_COMMON_CODE USECLASS   ON USECLASS.GROUP_CODE  = 'SLE_0003' AND USECLASS.CODE  = DECODE(MENU.USE_CLASS, 'Y', 1, 0)
	INNER JOIN SCC_COMMON_CODE MENUTYPE   ON MENUTYPE.GROUP_CODE  = 'SLE_0005' AND MENUTYPE.CODE  = MENU.MENU_TYPE
	INNER JOIN SCC_COMMON_CODE SESNYN     ON SESNYN.GROUP_CODE    = 'SLE_0008' AND SESNYN.CODE    = MENU.SESN_APPLY_YN
	INNER JOIN SCC_COMMON_CODE TAXYN      ON TAXYN.GROUP_CODE     = 'SLE_0006' AND TAXYN.CODE     = MENU.TAX_YN
	INNER JOIN SCC_COMMON_CODE CALMETHOD  ON CALMETHOD.GROUP_CODE = 'SLE_0002' AND CALMETHOD.CODE = MENU.CAL_METHOD
	INNER JOIN SCC_COMMON_CODE DISPOSYN   ON DISPOSYN.GROUP_CODE  = 'SLE_0008' AND DISPOSYN.CODE  = MENU.DISCNT_POSS_YN
	INNER JOIN SCC_COMMON_CODE PRIPOSYN   ON PRIPOSYN.GROUP_CODE  = 'SLE_0003' AND PRIPOSYN.CODE  = DECODE(MENU.UPRICE_CHG_POSS_YN, 'Y', 1, 0) 
	INNER JOIN SCC_COMMON_CODE KTCNYN1    ON KTCNYN1.GROUP_CODE   = 'SLE_0004' AND KTCNYN1.CODE   = MENU.KTCN_PRINT_YN1
	INNER JOIN SCC_COMMON_CODE KTCNYN2    ON KTCNYN2.GROUP_CODE   = 'SLE_0004' AND KTCNYN2.CODE   = MENU.KTCN_PRINT_YN2
	INNER JOIN SCC_COMMON_CODE KTCNYN3    ON KTCNYN3.GROUP_CODE   = 'SLE_0004' AND KTCNYN3.CODE   = MENU.KTCN_PRINT_YN3
	INNER JOIN SCC_COMMON_CODE KTCNYN4    ON KTCNYN4.GROUP_CODE   = 'SLE_0004' AND KTCNYN4.CODE   = MENU.KTCN_PRINT_YN4
	INNER JOIN SCC_COMMON_CODE TICKER     ON TICKER.GROUP_CODE    = 'SLE_0004' AND TICKER.CODE    = MENU.TICKET_PRINT_YN
	INNER JOIN SCC_COMMON_CODE USEYN      ON USEYN.GROUP_CODE     = 'SLE_0003' AND USEYN.CODE     = DECODE(MENU.USE_YN, 'Y', 1, 0)  
	
	LEFT OUTER JOIN SCC_COMMON_CODE UNIT  ON UNIT.GROUP_CODE      = 'SLE_0007' AND UNIT.CODE      = MENU.UNIT
	
	LEFT OUTER JOIN (SELECT OUTLET_CD,  KTCN_PRTR_CD,  MAX(KTCN_PRTR_NM) AS KTCN_PRTR_NM   
						FROM            SLE_KTCN_PRTR GROUP BY OUTLET_CD,  KTCN_PRTR_CD
					) KTCN1 ON KTCN1.OUTLET_CD = MENU.OUTLET_CD AND KTCN1.KTCN_PRTR_CD = MENU.KTCN_PRTR_CD1
					
	LEFT OUTER JOIN (SELECT OUTLET_CD,  KTCN_PRTR_CD,  MAX(KTCN_PRTR_NM) AS KTCN_PRTR_NM   
						FROM            SLE_KTCN_PRTR GROUP BY OUTLET_CD,  KTCN_PRTR_CD
					) KTCN2 ON KTCN2.OUTLET_CD = MENU.OUTLET_CD AND KTCN2.KTCN_PRTR_CD = MENU.KTCN_PRTR_CD2
					
	LEFT OUTER JOIN (SELECT OUTLET_CD,  KTCN_PRTR_CD,  MAX(KTCN_PRTR_NM) AS KTCN_PRTR_NM   
						FROM            SLE_KTCN_PRTR GROUP BY OUTLET_CD,  KTCN_PRTR_CD
					) KTCN3 ON KTCN3.OUTLET_CD = MENU.OUTLET_CD AND KTCN3.KTCN_PRTR_CD = MENU.KTCN_PRTR_CD3
					
	LEFT OUTER JOIN (SELECT OUTLET_CD,  KTCN_PRTR_CD,  MAX(KTCN_PRTR_NM) AS KTCN_PRTR_NM   
						FROM            SLE_KTCN_PRTR GROUP BY OUTLET_CD,  KTCN_PRTR_CD
					) KTCN4 ON KTCN4.OUTLET_CD = MENU.OUTLET_CD AND KTCN4.KTCN_PRTR_CD = MENU.KTCN_PRTR_CD4
					
	LEFT OUTER JOIN  HLDC_PO_ITEM_MST MATERIAL ON MATERIAL.ITEM_CLASS1= 'G' AND MATERIAL.ITEM_CODE = MENU.MATERIAL_CD 
	
	
	--창고코드  eprocusr.VO_SUBINVENTORY INV ON INV.subinv_code = MENU.WH_CD
	LEFT OUTER JOIN 	

					(SELECT A.SUBINV_CODE CODE, A.UPJANG AS OUTLET_CD
						     , DECODE(A.USE_YN,'N','폐장')||A.SUBINV_CODE||' '||A.SUBINV_NAME||'('||B.UPJANGNM||')' AS SUBINV_NAME
						     , SUBSTR(D.CENTER_TYPE,1,2) AS CENTER_TYPE 
						  FROM HLDC_PO_SUBINVENTORY A
						     , ST_UPJANG B 
						     , HLDC_PO_UPJANG_CENTER C
						     , HLDC_PO_CENTER D 
						 WHERE A.UPJANG = B.UPJANG 
						       AND B.AP_UNITPRICE_UPJANG = C.UPJANG 
						       AND C.CENTER_CODE         = D.CENTER_CODE 
						       --AND A.UPJANG              = TO_NUMBER(:outletCd)
						       AND A.USE_YN              = 'Y' 	
						) INV ON INV.OUTLET_CD = MENU.OUTLET_CD AND INV.CODE = MENU.WH_CD
	
	
	
	WHERE MENU.USE_YN = 'Y'  
	<#if outletCd?has_content>    AND  MENU.OUTLET_CD      = :outletCd   </#if>
	<#if menuClass?has_content>   AND  MENU.MENU_CLASS     = :menuClass  </#if>
	<#if menuClsfi?has_content>   AND  MENU.MENU_CLSFI     = :menuClsfi  </#if>
	<#if menuSclass?has_content>  AND  MENU.MENU_SCLASS    = :menuSclass </#if>
	<#if menuNm?has_content>  	  AND  (LOWER(MENU.MENU_NM)     LIKE '%' || LOWER(:menuNm) || '%' OR LOWER(MENU.MENU_CD) LIKE '%' || LOWER(:menuNm) || '%' ) </#if>	
	<#if itemCd?has_content>   AND  LOWER(MENU.MENU_CD)    LIKE '%' || LOWER(:itemCd) || '%'    </#if>
	<#if chkPrice?has_content>    AND  NVL(MENU.APPLY_PRICE,0) = 0 </#if>	
	<#if chkUseYn == 'N' >    AND  MENU.USE_CLASS      = 'Y'   </#if>
	 
	ORDER BY  MENU.OUTLET_CD, MENU.MENU_NM
	
	]]></statement>

	<!--  DATA를 저장한다. -->
	<statement name="insertData" type="insert">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.insertData */
		
		
MERGE INTO SLE_OUTLET_MENU A
USING DUAL
ON (		   OUTLET_CD = :outletCd
		AND    MENU_CD   = :menuCd	
)
WHEN MATCHED THEN
    UPDATE SET
										MENU_CLASS = :menuClass,
										MENU_CLSFI = :menuClsfi,
										MENU_SCLASS = :menuSclass,
		<#if menuNm?exists> 			MENU_NM = :menuNm, </#if>
		<#if menuAbbr?exists> 			MENU_ABBR = :menuAbbr, </#if>
		<#if langae1?exists> 			LANGAE1 = :langae1, </#if>
		<#if langae2?exists> 			LANGAE2 = :langae2, </#if>
		<#if langae3?exists> 			LANGAE3 = :langae3, </#if>
		<#if basisPrice?exists> 		BASIS_PRICE = :basisPrice, </#if>
		<#if cst?exists> 				CST = :cst, </#if>
		<#if applyDd?exists> 			APPLY_DD = :applyDd, </#if>
		<#if applyPrice?exists> 		APPLY_PRICE = :applyPrice, </#if>
		<#if endDd?exists> 				END_DD = :endDd, </#if>

		<#if useClass?exists> 			USE_CLASS = DECODE(:useClass, '1', 'Y', 'N'), </#if>
		<#if convertQuantity?exists> 	CONVERT_QUANTITY = :convertQuantity, </#if>
		<#if expl?exists> 				EXPL = :expl, </#if>
		<#if unit?exists> 				UNIT = :unit, </#if>
		<#if dpstCd?exists> 			DPST_CD = :dpstCd, </#if>
		<#if upriceChgPossYn?exists> 	UPRICE_CHG_POSS_YN = DECODE(:upriceChgPossYn, '1', 'Y', 'N'), </#if>
		<#if sesnApplyYn?exists> 		SESN_APPLY_YN = :sesnApplyYn, </#if>
		<#if menuType?exists> 			MENU_TYPE = :menuType, </#if>
		<#if barCd?exists> 				BAR_CD =  DECODE(:useClass, '1',:barCd,null), </#if>
		<#if materialCd?exists> 		MATERIAL_CD = :materialCd, </#if>
		<#if recpCd?exists> 			RECP_CD = :recpCd, </#if>
		<#if picPlace?exists> 			PIC_PLACE = :picPlace, </#if>
		<#if taxYn?exists> 				TAX_YN = :taxYn, </#if>
		<#if calMethod?exists> 			CAL_METHOD = :calMethod, </#if>
		<#if svc?exists> 				SVC = :svc, </#if>
		<#if specTax?exists> 			SPEC_TAX = :specTax, </#if>
		<#if eduTax?exists> 			EDU_TAX = :eduTax, </#if>
		<#if ffTax?exists> 				FF_TAX = :ffTax, </#if>
		<#if vat?exists> 				VAT = :vat, </#if>
		<#if fund?exists> 				FUND = :fund, </#if>
		<#if discntPossYn?exists> 		DISCNT_POSS_YN = :discntPossYn, </#if>
		<#if ktcnPrintNm?exists> 		KTCN_PRINT_NM = :ktcnPrintNm, </#if>
		<#if ktcnPrtrCd1?exists> 		KTCN_PRTR_CD1 = :ktcnPrtrCd1, </#if>
		<#if ktcnPrintYn1?exists> 		KTCN_PRINT_YN1 = :ktcnPrintYn1,  </#if>
		<#if ticketPrintYn?exists> 		TICKET_PRINT_YN = :ticketPrintYn, </#if>
		<#if ktcnPrintYn2?exists> 		KTCN_PRINT_YN2 = :ktcnPrintYn2,  </#if>
		<#if ktcnPrintYn3?exists> 		KTCN_PRINT_YN3 = :ktcnPrintYn3, </#if>
		<#if ktcnPrintYn4?exists> 		KTCN_PRINT_YN4 = :ktcnPrintYn4, </#if>
		<#if ktcnPrtrCd2?exists> 		KTCN_PRTR_CD2 = :ktcnPrtrCd2, </#if>
		<#if ktcnPrtrCd3?exists> 		KTCN_PRTR_CD3 = :ktcnPrtrCd3, </#if>
		<#if ktcnPrtrCd4?exists> 		KTCN_PRTR_CD4 = :ktcnPrtrCd4, </#if>
		<#if custCd?exists> 			CUST_CD = :custCd, </#if>
		<#if commRat?exists> 			COMM_RAT = :commRat, </#if>
		<#if otherBuMenuCd?exists>      OTHER_BU_MENU_CD = :otherBuMenuCd, </#if>
		
		<#if whCd?exists>               WH_CD    = :whCd, </#if>
		
		<#if releaseType?exists>      RELEASE_TYPE = :releaseType, </#if>
		<#if modifyYn?exists>         MODIFY_YN    = :modifyYn, </#if>
		
		<#if useYn?exists> 				USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
								       	UDATE = SYSDATE,
								       	UUSER = :loginSabun
WHEN NOT MATCHED THEN
	 INSERT (
			OUTLET_CD,
			MENU_CD,
			MENU_CLASS,
			MENU_CLSFI,
			MENU_SCLASS,
			MENU_NM,
			MENU_ABBR,
			LANGAE1,
			LANGAE2,
			LANGAE3,
			BASIS_PRICE,
			CST,
			APPLY_DD,
			APPLY_PRICE,
			END_DD,
			USE_CLASS,
			CONVERT_QUANTITY,
			EXPL,
			UNIT,
			DPST_CD,
			UPRICE_CHG_POSS_YN,
			SESN_APPLY_YN,
			MENU_TYPE,
			BAR_CD,
			MATERIAL_CD,
			RECP_CD,
			PIC_PLACE,
			TAX_YN,
			CAL_METHOD,
			SVC,
			SPEC_TAX,
			EDU_TAX,
			FF_TAX,
			VAT,
			FUND,
			DISCNT_POSS_YN,
			KTCN_PRINT_NM,
			KTCN_PRTR_CD1,
			KTCN_PRINT_YN1,
			TICKET_PRINT_YN,
			KTCN_PRINT_YN2,
			KTCN_PRINT_YN3,
			KTCN_PRINT_YN4,
			KTCN_PRTR_CD2,
			KTCN_PRTR_CD3,
			KTCN_PRTR_CD4,
			CUST_CD,
			COMM_RAT,
			OTHER_BU_MENU_CD,
			RELEASE_TYPE , 
			MODIFY_YN,
			WH_CD,
		 
			USE_YN,
			CDATE,
			CUSER,
			UDATE,
			UUSER
			) VALUES (
			 :outletCd,
			 :menuCd,
			 :menuClass,
			 :menuClsfi,
			 :menuSclass,
			<#if menuNm?exists> 		 :menuNm, 					<#else> null, </#if>
			<#if menuAbbr?exists> 		 :menuAbbr, 				<#else> null, </#if>
			<#if langae1?exists> 		 :langae1, 					<#else> null, </#if>
			<#if langae2?exists> 		 :langae2, 					<#else> null, </#if>
			<#if langae3?exists> 		 :langae3, 					<#else> null, </#if>
			<#if basisPrice?exists>      :basisPrice, 			 	<#else> null, </#if>
			<#if cst?exists>             :cst, 					 	<#else> null, </#if>
			<#if applyDd?exists>         :applyDd, 				 	<#else> null, </#if>
			<#if applyPrice?exists>      :applyPrice, 			 	<#else> null, </#if>
			<#if endDd?exists>           :endDd, 				 	<#else> null, </#if>
			<#if useClass?exists> DECODE(:useClass, '1', 'Y', 'N'), <#else> null, </#if>
			<#if convertQuantity?exists> :convertQuantity, 		 	<#else> null, </#if>
			<#if expl?exists>            :expl, 				 	<#else> null, </#if>
			<#if unit?exists>            :unit, 				 	<#else> null, </#if>
			<#if dpstCd?exists>          :dpstCd, 				 	<#else> null, </#if>
			<#if upriceChgPossYn?exists> DECODE(:upriceChgPossYn, '1', 'Y', 'N'), <#else> null, </#if>
			<#if sesnApplyYn?exists> 	 :sesnApplyYn, 			 	<#else> null, </#if>
			<#if menuType?exists> 		 :menuType, 			 	<#else> null, </#if>
			<#if barCd?exists> 			 :barCd, 			 	 	<#else> null, </#if>
			<#if materialCd?exists> 	 :materialCd, 			 	<#else> null, </#if>
			<#if recpCd?exists> 		 :recpCd, 				 	<#else> null, </#if>
			<#if picPlace?exists> 		 :picPlace, 			 	<#else> null, </#if>
			<#if taxYn?exists> 			 :taxYn, 				 	<#else> null, </#if>
			<#if calMethod?exists> 		 :calMethod,    		 	<#else> null, </#if>
			<#if svc?exists> 			 :svc, 						<#else> null, </#if>
			<#if specTax?exists> 		 :specTax, 				 	<#else> null, </#if>
			<#if eduTax?exists> 		 :eduTax, 				 	<#else> null, </#if>
			<#if ffTax?exists> 			 :ffTax, 				 	<#else> null, </#if>
			<#if vat?exists> 			 :vat, 					 	<#else> null, </#if>
			<#if fund?exists> 			 :fund, 			     	<#else> null, </#if>
			<#if discntPossYn?exists> 	 :discntPossYn, 		 	<#else> null, </#if>
			<#if ktcnPrintNm?exists> 	 :ktcnPrintNm, 			 	<#else> null, </#if>
			<#if ktcnPrtrCd1?exists> 	 :ktcnPrtrCd1, 		  	 	<#else> null, </#if>
			<#if ktcnPrintYn1?exists>  	 :ktcnPrintYn1,  		 	<#else> null, </#if>
			<#if ticketPrintYn?exists> 	 :ticketPrintYn, 		 	<#else> null, </#if>
			<#if ktcnPrintYn2?exists>  	 :ktcnPrintYn2,  		 	<#else> null, </#if>
			<#if ktcnPrintYn3?exists>    :ktcnPrintYn3,  		 	<#else> null, </#if>
			<#if ktcnPrintYn4?exists>    :ktcnPrintYn4, 		 	<#else> null, </#if>
			<#if ktcnPrtrCd2?exists>     :ktcnPrtrCd2, 			 	<#else> null, </#if>
			<#if ktcnPrtrCd3?exists>     :ktcnPrtrCd3, 			 	<#else> null, </#if>
			<#if ktcnPrtrCd4?exists>     :ktcnPrtrCd4, 			 	<#else> null, </#if>
			<#if custCd?exists>          :custCd, 				 	<#else> null, </#if>
			<#if commRat?exists>         :commRat, 				 	<#else> null, </#if>
			<#if otherBuMenuCd?exists>   :otherBuMenuCd, 			<#else> null, </#if>
			
			<#if releaseYype?exists>     :releaseYype , 			<#else> null, </#if>
			<#if modifyYn?exists>        :modifyYn,                 <#else> 'Y',  </#if>
			<#if whCd?exists>            :whCd,                     <#else> null,  </#if>
			
			<#if useYn?exists>    DECODE(:useYn, '1', 'Y', 'N'), 	<#else> null, </#if>
			 SYSDATE,
			 :loginSabun,
			 SYSDATE,
			 :loginSabun
			)
		
		]]>
	</statement>

	<!--  DATA를 수정한다. -->
	<statement name="updateData" type="update">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.updateData */
		
 	
 	UPDATE SLE_OUTLET_MENU SET
										MENU_CLASS = :menuClass,
										MENU_CLSFI = :menuClsfi,
										MENU_SCLASS = :menuSclass,
		<#if menuNm?exists> 			MENU_NM = :menuNm, </#if>
		<#if menuAbbr?exists> 			MENU_ABBR = :menuAbbr, </#if>
		<#if langae1?exists> 			LANGAE1 = :langae1, </#if>
		<#if langae2?exists> 			LANGAE2 = :langae2, </#if>
		<#if langae3?exists> 			LANGAE3 = :langae3, </#if>
		<#if basisPrice?exists> 		BASIS_PRICE = :basisPrice, </#if>
		<#if cst?exists> 				CST = :cst, </#if>
		<#if applyDd?exists> 			APPLY_DD = :applyDd, </#if>
		<#if applyPrice?exists> 		APPLY_PRICE = :applyPrice, </#if>
		<#if endDd?exists> 				END_DD = :endDd, </#if>

		<#if useClass?exists> 			USE_CLASS = DECODE(:useClass, '1', 'Y', 'N'), </#if>
		<#if convertQuantity?exists> 	CONVERT_QUANTITY = :convertQuantity, </#if>
		<#if expl?exists> 				EXPL = :expl, </#if>
		<#if unit?exists> 				UNIT = :unit, </#if>
		<#if dpstCd?exists> 			DPST_CD = :dpstCd, </#if>
		<#if upriceChgPossYn?exists> 	UPRICE_CHG_POSS_YN = DECODE(:upriceChgPossYn, '1', 'Y', 'N'), </#if>
		<#if sesnApplyYn?exists> 		SESN_APPLY_YN = :sesnApplyYn, </#if>
		<#if menuType?exists> 			MENU_TYPE = :menuType, </#if>
		<#if barCd?exists> 				BAR_CD = DECODE(:useClass, '1',:barCd,null), </#if>
		<#if materialCd?exists> 		MATERIAL_CD = :materialCd, </#if>
		<#if recpCd?exists> 			RECP_CD = :recpCd, </#if>
		<#if picPlace?exists> 			PIC_PLACE = :picPlace, </#if>
		<#if taxYn?exists> 				TAX_YN = :taxYn, </#if>
		<#if calMethod?exists> 			CAL_METHOD = :calMethod, </#if>
		<#if svc?exists> 				SVC = :svc, </#if>
		<#if specTax?exists> 			SPEC_TAX = :specTax, </#if>
		<#if eduTax?exists> 			EDU_TAX = :eduTax, </#if>
		<#if ffTax?exists> 				FF_TAX = :ffTax, </#if>
		<#if vat?exists> 				VAT = :vat, </#if>
		<#if fund?exists> 				FUND = :fund, </#if>
		<#if discntPossYn?exists> 		DISCNT_POSS_YN = :discntPossYn, </#if>
		<#if ktcnPrintNm?exists> 		KTCN_PRINT_NM = :ktcnPrintNm, </#if>
		<#if ktcnPrtrCd1?exists> 		KTCN_PRTR_CD1 = :ktcnPrtrCd1, </#if>
		<#if ktcnPrintYn1?exists> 		KTCN_PRINT_YN1 = :ktcnPrintYn1,  </#if>
		<#if ticketPrintYn?exists> 		TICKET_PRINT_YN = :ticketPrintYn, </#if>
		<#if ktcnPrintYn2?exists> 		KTCN_PRINT_YN2 = :ktcnPrintYn2,  </#if>
		<#if ktcnPrintYn3?exists> 		KTCN_PRINT_YN3 = :ktcnPrintYn3, </#if>
		<#if ktcnPrintYn4?exists> 		KTCN_PRINT_YN4 = :ktcnPrintYn4, </#if>
		<#if ktcnPrtrCd2?exists> 		KTCN_PRTR_CD2 = :ktcnPrtrCd2, </#if>
		<#if ktcnPrtrCd3?exists> 		KTCN_PRTR_CD3 = :ktcnPrtrCd3, </#if>
		<#if ktcnPrtrCd4?exists> 		KTCN_PRTR_CD4 = :ktcnPrtrCd4, </#if>
		<#if custCd?exists> 			CUST_CD = :custCd, </#if>
		<#if commRat?exists> 			COMM_RAT = :commRat, </#if>
		<#if otherBuMenuCd?exists>      OTHER_BU_MENU_CD = :otherBuMenuCd, </#if>
		
		<#if releaseType?exists>        RELEASE_TYPE = :releaseType, </#if>
		<#if modifyYn?exists>           MODIFY_YN    = :modifyYn, </#if>         
		<#if whCd?exists>               WH_CD    = :whCd, </#if>                          
		<#if useYn?exists> 				USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
								       	UDATE = SYSDATE,
								       	UUSER = :loginSabun
		WHERE  OUTLET_CD = :outletCd
		AND    MENU_CD   = :menuCd
 		
 
		]]>
	</statement>

	<!--  DATA를 수정한다. -->
	<statement name="deleteData" type="update">
	
	<![CDATA[
	UPDATE SLE_OUTLET_MENU SET
				USE_CLASS = 'N',
			 	UDATE = SYSDATE,
				UUSER = :loginSabun
		WHERE MENU_CD = :menuCd
		AND OUTLET_CD = :outletCd
		
--DELETE SLE_OUTLET_MENU
-- WHERE OUTLET_CD = :outletCd
--   AND MENU_CD   = :menuCd
--   AND MENU_CD NOT IN (SELECT MENU_CD FROM SLE_SALS_GOODS WHERE OUTLET_CD = :outletCd
--   															AND MENU_CD   = :menuCd
--   															AND RECEIPT_STATUS IN ('Q','R','E')
--   															AND SALS_CLASS = '0')
   															
]]></statement>

	<!--  DATA를 거색 한다. -->
	<statement name="selectListBarCd" type="select">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.selectListBarCd */
		
			SELECT OUTLET_CD,
			       MENU_CD,
			       BAR_CD,
			       DECODE(USE_YN, 'Y', 1, 0) AS USE_YN,
			       CDATE,
			       CUSER,
			       UDATE,
			       UUSER
			FROM   SLE_OUTLET_BARCD_MST
			WHERE  OUTLET_CD = :outletCd
			AND    MENU_CD   = :menuCd
 
		]]>
	</statement>



	<!--  DATA를 거색 한다. -->
	<statement name="searchBarCd" type="select">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.searchBarCd */
		
			SELECT BAR.OUTLET_CD,
			       BAR.MENU_CD, MST.MENU_NM AS MENU_NM,
			       BAR.BAR_CD,
			       DECODE(BAR.USE_YN, 'Y', 1, 0) AS USE_YN,
			       BAR.CDATE,
			       BAR.CUSER,
			       BAR.UDATE,
			       BAR.UUSER
			FROM   SLE_OUTLET_BARCD_MST BAR
			INNER JOIN SLE_OUTLET_MENU  MST ON MST.OUTLET_CD = BAR.OUTLET_CD AND MST.MENU_CD = BAR.MENU_CD
			WHERE  BAR.OUTLET_CD = :outletCd
			AND    BAR.BAR_CD    = :barCd
 
		]]>
	</statement>

	<!--  DATA를 저장 한다. -->
	<statement name="insertDataBarCd" type="insert">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.insertDataBarCd */
		
			INSERT INTO SLE_OUTLET_BARCD_MST
				(
					 OUTLET_CD,
					 MENU_CD,
					 BAR_CD,
					 USE_YN,
					 CDATE,
					 CUSER,
					 UDATE,
					 UUSER
				) VALUES (
					 :outletCd,
					 :menuCd,
					 :barCd,
					<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> null, </#if>
					 SYSDATE,
					 :loginSabun,
					 SYSDATE,
					 :loginSabun
				)
		]]>
	</statement>

	<!--  DATA를 수정 한다. -->
	<statement name="updateDataBarCd" type="update">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.updateDataBarCd */
		
			UPDATE SLE_OUTLET_BARCD_MST SET
					 MENU_CD   = :menuCd,
					  <#if useYn?exists>   USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
									       UDATE = SYSDATE,
									       UUSER = :loginSabun
				       
				WHERE  OUTLET_CD = :outletCd
			  --AND    MENU_CD   = :menuCd
				AND    BAR_CD    = :barCd
		]]>
	</statement>

	<!--  DATA를 조회 한다. -->
	<statement name="selectSaleBarList" type="select">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.selectSaleBarList */
		
		
	SELECT UPJANG.MU_CD
	      ,UPJANG.TM_CD
	      ,MST.OUTLET_CD
	      ,MST.OUTLET_NM
	      ,MENU.MENU_CD
	      --,MENU.MENU_NM
	      --단축명으로 변경 20180524 김호석(염병문차장 요청)
	      ,NVL(MENU.MENU_ABBR, MENU.MENU_NM) AS MENU_NM
	      ,MENU.APPLY_PRICE
	      ,BAR.BAR_CD
	      ,POOL.MENU_CLASS
	      ,POOL.MENU_CLSFI 
	      ,POOL.MENU_SCLASS
	      ,A.MENU_CLSFI_NM AS MENU_CLASS_NM
	      ,B.MENU_CLSFI_NM AS MENU_CLSFI_NM 
	      ,C.MENU_CLSFI_NM AS MENU_SCLASS_NM
	  FROM SLE_OUTLET_BARCD_MST BAR
	INNER JOIN SLE_OUTLET_MENU MENU ON MENU.OUTLET_CD = BAR.OUTLET_CD AND MENU.MENU_CD = BAR.MENU_CD
	INNER JOIN SLE_OUTLET_MST  MST  ON MST.OUTLET_CD = BAR.OUTLET_CD
	INNER JOIN  SCO_UPJANG_V   UPJANG ON  UPJANG.UPJANG = TO_NUMBER(MST.OUTLET_CD)
	
	        --대분류
	    LEFT OUTER  JOIN   SLE_OUTLET_MENU_GRP   A  ON A.OUTLET_CD   = MENU.OUTLET_CD 
	                                                   AND A.MENU_CLASS  = MENU.MENU_CLASS 
	                                                   AND A.MENU_CLSFI  = '00' 
	                                                   AND A.MENU_SCLASS = '00'
	        --중분류               
		LEFT OUTER  JOIN  SLE_OUTLET_MENU_GRP    B  ON B.OUTLET_CD   = MENU.OUTLET_CD 
													   AND B.MENU_CLASS  = MENU.MENU_CLASS  
													   AND B.MENU_CLSFI  = MENU.MENU_CLSFI 
													   AND B.MENU_SCLASS = '00'
	        --소분류               
		LEFT OUTER  JOIN  SLE_OUTLET_MENU_GRP    C  ON C.OUTLET_CD   = MENU.OUTLET_CD 
			                                           AND C.MENU_CLASS  = MENU.MENU_CLASS  
			                                           AND C.MENU_CLSFI  = MENU.MENU_CLSFI 
			                                           AND C.MENU_SCLASS = MENU.MENU_SCLASS
	INNER JOIN SLE_MENU_POOL POOL        ON POOL.MENU_CD = MENU.MENU_CD AND POOL.MENU_CLASS = MENU.MENU_CLASS AND MENU.MENU_CLSFI = MENU.MENU_CLSFI AND POOL.MENU_SCLASS = MENU.MENU_SCLASS
	LEFT OUTER JOIN SCC_COMMON_CODE UNIT ON UNIT.GROUP_CODE = 'F0007'         AND UNIT.CODE       = POOL.UNIT
	WHERE POOL.USE_YN = 'Y' AND POOL.USE_CLASS ='Y'
	  AND MENU.OUTLET_CD = :outletCd
	  AND UPJANG.MU_CD = :muCd
	  AND UPJANG.TM_CD = :tmCd
	  <#if menuClass?has_content>   AND  POOL.MENU_CLASS     = :menuClass     </#if>
	  <#if menuClsfi?has_content>   AND  POOL.MENU_CLSFI     = DECODE(:menuClsfi,'00', POOL.MENU_CLSFI,:menuClsfi)     </#if>
	  <#if menuSclass?has_content>  AND  POOL.MENU_SCLASS    = DECODE(:menuSclass,'00',POOL.MENU_SCLASS,:menuSclass)    </#if>
	ORDER BY MENU.MENU_CD

		]]>
	</statement>

	<!--  DATA를 DELETE 한다. -->
	<statement name="deleteSaleBarList" type="delete">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.deleteSaleBarList */
		
		
			DELETE SLE_BAR_REPORT WHERE 1=1 AND CUSER = :cuser 
		
		]]>
	</statement>

	<!--  DATA를 INSERT 한다. -->
	<statement name="saveSaleBarList" type="insert">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.saveSaleBarList */
		
		INSERT INTO SLE_BAR_REPORT
		(
			CUSER,
			OUTLET_CD,
		    MENU_CD,
		    MENU_NM,
		    BAR_CD,
		    APPLY_PRICE
		)
		VALUES
		(
			:cuser,
		    :outletCd,
		    :menuCd,
		    :menuNm,
		    :barCd,
		    :applyPrice
		) 
		]]>
	</statement>


	<!-- 2015.12.07 추가 DATA를 수정한다. -->
	<statement name="updateDataMenuBar" type="update">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.updateDataMenuBar */
		
 	
 	UPDATE SLE_OUTLET_MENU SET

		 BAR_CD = NVL(:barCd,''),  
		 UDATE = SYSDATE,
		 UUSER = :loginSabun
		WHERE  OUTLET_CD = :outletCd
		AND    MENU_CD    = :menuCd
 		
 
		]]>
	</statement>

	<!--  DATA를 삭제 한다. -->
	<statement name="deleteDataBarCd" type="delete">
	<![CDATA[
		/*+ com.hwfs.rc.sle.dao.menuMgmtDAO.deleteDataBarCd */
		
		DELETE SLE_OUTLET_BARCD_MST 
		WHERE  OUTLET_CD = :outletCd
		AND    BAR_CD      = :barCd
	]]>
	</statement>


	<statement name="selectFsItemPool">
	<![CDATA[
	SELECT 
        0 AS CHK,
        A.MENU_CD,
        A.MENU_CLASS,
        A.MENU_CLSFI,
        A.MENU_SCLASS,
        (SELECT DISTINCT MENU_CLSFI_NM 
           FROM SLE_MENU_CLSFI 
          WHERE MENU_CLASS = A.MENU_CLASS AND MENU_SCLASS = '00' AND MENU_CLSFI = '00') MENU_CLASS_NM,
        (SELECT DISTINCT MENU_CLSFI_NM 
           FROM SLE_MENU_CLSFI 
          WHERE MENU_CLASS = A.MENU_CLASS AND MENU_SCLASS = '00' AND MENU_CLSFI = A.MENU_CLSFI) MENU_SCLASS_NM,
        (SELECT DISTINCT MENU_CLSFI_NM 
           FROM SLE_MENU_CLSFI 
          WHERE MENU_CLASS = A.MENU_CLASS AND MENU_SCLASS = A.MENU_SCLASS AND MENU_CLSFI = A.MENU_CLSFI) MENU_CLSFI_NM,
        A.MENU_NM , 
	    A.MENU_ABBR , 
	    A.LANGAE1 , 
	    A.LANGAE2 , 
	    A.LANGAE3 , 
	    A.BASIS_PRICE , 
	    A.CST , 
	    DECODE(A.USE_CLASS, 'Y', 1, 0) AS USE_CLASS,
	    A.CONVERT_QUANTITY , 
	    A.EXPL , 
	    A.UNIT , 
	    (SELECT CODE_NAME FROM SCC_COMMON_CODE WHERE GROUP_CODE = 'SLE_0007' AND CODE = A.UNIT) AS UNIT_NM,
	    A.BAR_CD , 
	    A.MATERIAL_CD , 
	    A.RECP_CD , 
	    DECODE(A.USE_YN, 'Y', 1, 0) AS USE_YN,
	    TO_CHAR(A.CDATE,'YYYY-MM-DD PMHH:MI:SS') AS CDATE,
	    TO_CHAR(A.UDATE,'YYYY-MM-DD PMHH:MI:SS') AS UDATE,
	    DECODE(NVL(A.MATERIAL_CD,''),'','Y', SLE_MENU_POOL_VAT_FUN(A.MATERIAL_CD)) TAX_YN
  FROM SLE_MENU_POOL A,
       (
         SELECT DISTINCT C.ITEM_CODE 
           FROM HLDC_PO_ONHAND_MONTH C 
          WHERE C.ONHAND_YM   = (SELECT MAX(ONHAND_YM) 
                                   FROM HLDC_PO_ONHAND_MONTH 
                                  WHERE SUBINV_CODE IN (SELECT SUBINV_CODE FROM SLE_POS_SET WHERE OUTLET_CD = :outletCd) )
            AND C.SUBINV_CODE IN (SELECT SUBINV_CODE FROM SLE_POS_SET WHERE OUTLET_CD = :outletCd)
         UNION ALL 
         SELECT DISTINCT D.ITEM_CODE
           --FROM HLDC_PO_TRANSACTION D
           FROM (
			   SELECT DT.TRANS_DATE,
					  HD.SHOP_CD AS TRANS_UPJANG,
					  DT.WH_CD AS SUBINV_CODE,
					  DT.ITEM_CD AS ITEM_CODE
					
					FROM   EPROCUSR.ESIMGHD HD,				
					
					/* 수불헤더*/
					
					  (SELECT PDT.SYS_ID ,
					               PDT.COMP_CD ,
					               PDT.MG_DATE AS TRANS_DATE ,
					               PDT.MG_NO ,
					               PDT.IVT_INSP_NO ,
					               PDT.MOVEMENT_TYP ,
					               PDT.PROC_TYP_CD ,
					               PDT.PURC_UNIT_RATE ,
					               PDT.GR_QTY,
					               PDT.GR_BUY_AMT,
					               PDT.GR_PURC_QTY,
					               PDT.GR_MGT_PRICE,
					               PDT.GR_MGT_AMT,
					               PDT.GR_BUY_PRICE ,
					               PDT.GI_QTY,
					               PDT.GI_BUY_AMT,
					               PDT.GI_PURC_QTY,
					               PDT.GI_MGT_PRICE,
					               PDT.GI_MGT_AMT,
					               PDT.GI_BUY_PRICE ,
					               PDT.PO_NO ,
					               PDT.PO_LNO ,
					               PDT.WH_CD ,
					               PDT.CC_WH_CD ,
					               PDT.MV_WH_CD ,
					               PDT.ITEM_CD ,
					               PDT.VD_CD ,
					               PDT.JRNL_TYP_CD
					        FROM   EPROCUSR.ESIMGDT PDT
					        WHERE  PDT.SYS_ID = '100'
					        AND    PDT.COMP_CD = 'HFC'
					        AND    PDT.MOVEMENT_TYP NOT IN ('561', '562', '998', '999', '901', '902', '801', '802', '111', '112', '211', '212') /* 기초 , 기말 재고,배송입출고,  직송 가상입출고  제외 */
					        AND    PDT.STS <> 'D'
					        AND    PDT.WH_CD IN (SELECT subinv_code
					        FROM   sle_pos_set
					        WHERE  outlet_cd = :outletCd)
					
					---------------------------
					        AND    PDT.MOVEMENT_TYP NOT IN ('701', '702')
					
					---------------------------
					        UNION ALL
					SELECT PDT.SYS_ID ,
					               PDT.COMP_CD ,
					               PA.INSP_DATE AS TRANS_DATE ,
					               PDT.MG_NO ,
					               PDT.IVT_INSP_NO ,
					               PDT.MOVEMENT_TYP ,
					               PDT.PROC_TYP_CD ,
					               PDT.PURC_UNIT_RATE ,
					               PDT.GR_QTY,
					               PDT.GR_BUY_AMT,
					               PDT.GR_PURC_QTY,
					               PDT.GR_MGT_PRICE,
					               PDT.GR_MGT_AMT,
					               PDT.GR_BUY_PRICE ,
					               PDT.GI_QTY,
					               PDT.GI_BUY_AMT,
					               PDT.GI_PURC_QTY,
					               PDT.GI_MGT_PRICE,
					               PDT.GI_MGT_AMT,
					               PDT.GI_BUY_PRICE ,
					               PDT.PO_NO ,
					               PDT.PO_LNO ,
					               -- PDT.WH_CD || '' AS WH_CD, IF PDT.MOVEMENT_TYP IN ('701', '702') THEN PDT.WH_CD=PA.WH_CD 2017/06/21 최학진대리확인받음
					               PA.WH_CD  AS WH_CD,
					               PDT.CC_WH_CD || '' AS CC_WH_CD,
					               PDT.MV_WH_CD || '' AS MV_WH_CD ,
					               PDT.ITEM_CD || '' AS ITEM_CD,
					               PDT.VD_CD || '' AS VD_CD,
					               PDT.JRNL_TYP_CD
					        FROM   EPROCUSR.ESIMGDT PDT,
					               EPROCUSR.ESIMIHD PA
					        WHERE  PDT.SYS_ID = '100'
					        AND    PDT.COMP_CD = 'HFC'
					        AND    PA.SYS_ID = '100'
					        AND    PA.COMP_CD = 'HFC'
					        AND    PA.STS <> 'D'
					        AND    PDT.WH_CD IN (SELECT subinv_code
					        FROM   sle_pos_set
					        WHERE  outlet_cd = :outletCd)
					
					---
					        AND    PA.SYS_ID = PDT.SYS_ID
					        AND    PA.COMP_CD = PDT.COMP_CD
					        AND    PA.IVT_INSP_NO = PDT.IVT_INSP_NO
					
					---
					        AND    PDT.MOVEMENT_TYP NOT IN ('561', '562', '998', '999', '901', '902', '801', '802', '111', '112', '211', '212') /* 기초 , 기말 재고,배송입출고,  직송 가상입출고  제외 */
					        AND    PDT.STS <> 'D'
					
					---------------------------
					        AND    PDT.MOVEMENT_TYP IN ('701', '702')
					
					---------------------------
					               ) DT
					
					
					WHERE  HD.SYS_ID = '100'
					AND    HD.COMP_CD = 'HFC'
					AND    HD.BU_CD IN ('1000', '2000')
					AND    HD.SYS_ID = DT.SYS_ID
					AND    HD.COMP_CD = DT.COMP_CD
					AND    HD.WH_CD = DT.WH_CD
					AND    HD.ITEM_CD = DT.ITEM_CD
           
           ) D
            
          WHERE D.TRANS_DATE BETWEEN (SELECT NVL(MAX(ONHAND_YM), SUBSTR(TO_CHAR(SYSDATE,'YYYYMMDD'),1,6)) || '01' 
                                        FROM HLDC_PO_ONHAND_MONTH 
                                       WHERE  SUBINV_CODE IN (SELECT SUBINV_CODE FROM SLE_POS_SET WHERE OUTLET_CD = :outletCd) ) AND TO_CHAR(SYSDATE, 'YYYYMMDD') 
            AND D.SUBINV_CODE IN (SELECT SUBINV_CODE FROM SLE_POS_SET WHERE OUTLET_CD = :outletCd)
            AND D.TRANS_UPJANG = :outletCd
         GROUP BY D.SUBINV_CODE, D.ITEM_CODE
         MINUS
         (
         SELECT DISTINCT A.MATERIAL_CD
           FROM SLE_OUTLET_MENU A
          WHERE A.MATERIAL_CD LIKE 'G%'
            AND A.OUTLET_CD = :outletCd
         UNION ALL
         SELECT DISTINCT A.MENU_CD
           FROM SLE_OUTLET_MENU A
          WHERE A.MATERIAL_CD LIKE 'G%'
            AND A.OUTLET_CD = :outletCd
         )
       ) B  
 WHERE A.MATERIAL_CD = B.ITEM_CODE
   AND A.MATERIAL_CD LIKE 'G%']]></statement>

	<!--  DATA를 수정 한다. -->
	<statement name="updateItemData"><![CDATA[
	UPDATE SLE_MENU_POOL SET
	<#if menuClass?exists> MENU_CLASS = :menuClass, </#if>
	<#if menuClsfi?exists> MENU_CLSFI = :menuClsfi, </#if>
	<#if menuSclass?exists> MENU_SCLASS = :menuSclass, </#if>
	<#if menuNm?exists> MENU_NM = :menuNm, </#if>
	<#if menuAbbr?exists> MENU_ABBR = :menuAbbr, </#if>
	<#if langae1?exists> LANGAE1 = :langae1, </#if>
	<#if langae2?exists> LANGAE2 = :langae2, </#if>
	<#if langae3?exists> LANGAE3 = :langae3, </#if> 
	<#if basisPrice?exists> BASIS_PRICE = :basisPrice, </#if>
	<#if cst?exists> CST = :cst, </#if>
	<#if useClass?exists> USE_CLASS = DECODE(:useClass, '1', 'Y', 'N'), </#if>
	<#if convertQuantity?exists> CONVERT_QUANTITY = :convertQuantity, </#if>
	<#if expl?exists> EXPL = :expl, </#if>
	<#if unit?exists> UNIT = :unit, </#if>
	<#if barCd?exists> BAR_CD = DECODE(:useClass, '1',:barCd,null), </#if>
	<#if materialCd?exists> MATERIAL_CD = :materialCd, </#if>
	<#if recpCd?exists> RECP_CD = :recpCd, </#if>
	<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
	UDATE = SYSDATE,
	UUSER = :loginSabun
	WHERE MENU_CD = :menuCd	
	]]></statement>

	<!--  DATA를 삭제 한다. -->
	<statement name="deleteItemData"><![CDATA[
		UPDATE SLE_MENU_POOL SET
				USE_YN = 'N',
			 	UDATE = SYSDATE,
				UUSER = :loginSabun
		WHERE MENU_CD = :menuCd
		--DELETE SLE_MENU_POOL
 		-- WHERE MENU_CD = :menuCd
 		-- AND MENU_CD NOT IN (SELECT MENU_CD FROM SLE_SALS_GOODS WHERE MENU_CD   = :menuCd
   															AND RECEIPT_STATUS IN ('Q','R','E')
   															AND SALS_CLASS = '0')
	]]></statement>
</hqml>
