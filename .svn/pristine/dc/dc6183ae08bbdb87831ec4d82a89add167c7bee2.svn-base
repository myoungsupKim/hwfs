<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="ms.mim.foodReservesReportDAO">
	<desc>FoodReservesReport HQML Query</desc>

	<!-- 식재료비현황 목록을 조회한다. -->
	<statement name="selectList" type="select">
	/*+ com.hwfs.ms.mim.foodReservesReportDAO.selectList */
	<![CDATA[
	SELECT BASE_DD
       , WEEK_NAME  /* 요일 */
       , SP_AMT
       , SR_AMT
       , SS_AMT
       , MP_AMT
       , MR_AMT
       , MS_AMT
       , TO_CHAR(P_RATE,'FM999,990.0') AS P_RATE
       , TO_CHAR(S_RATE,'FM999,990.0') AS S_RATE
       , DECODE(SIGN(S_RATE - P_RATE), -1, '△', 1, '+') || TO_CHAR(ABS(S_RATE - P_RATE),'FM999,990.0') AS RDP_RATE                                 /* 식재료비율 - 계획대비 - 차이(%P) */
    FROM (        
        SELECT A.BASE_DD    /* 기준일 */
                 , A.WEEK_NAME  /* 요일 */
                 , A.WE_COLOR   /* 요일색상 */
                 , NVL(B.SP_AMT, 0) AS SP_AMT     /* 매출액 - 식음료매출 계획 */
                 , NVL(B.SR_AMT, 0) AS SR_AMT     /* 매출액 - 식음료매출 추정 */
                 , NVL(C.SS_AMT, 0) AS SS_AMT    /* 매출액 - 식음료매출 실적 */
                 , NVL(D.MP_AMT, 0) AS MP_AMT    /* 재료비 - 식음료원가 계획 */
                 , NVL(D.MR_AMT, 0) AS MR_AMT    /* 재료비 - 식음료원가 추정 */
                 , NVL(E.MS_AMT1, 0) - NVL(G.MS_AMT3, 0) AS MS_AMT     /* 재료비 - 식음료매출 실적 */
                 , NVL(E.MS_AMT1, 0) AS MS_AMT1   /* 식음료매출 실적 - 전산구매 */
                 , NVL(F.MS_AMT2, 0) AS MS_AMT2   /* 식음료매출 실적 - 현지구매 */
                 , NVL(G.MS_AMT3, 0) AS MS_AMT3   /* 식음료매출 실적 - 복리후생식대비 */
                 , ROUND(DECODE(B.SP_AMT, 0, 0, D.MP_AMT / B.SP_AMT * 100), 2) AS P_RATE   /* 식재료율 - 계획 */
                 , ROUND(DECODE(B.SR_AMT, 0, 0, D.MR_AMT / B.SR_AMT * 100), 2) AS R_RATE   /* 식재료율 - 추정 */
                 , ROUND(DECODE(NVL(C.SS_AMT, 0), 0, 0, (NVL(E.MS_AMT1, 0) - NVL(G.MS_AMT3, 0)) / C.SS_AMT * 100), 2) AS S_RATE   /* 식재료율 - 실적 */
                 , NVL(I.IS_AMT, 0) AS IS_AMT
            FROM (
                  /* 일자 기준정보 */     
                  SELECT A.FDAY AS BASE_DD
                       , A.WEEK_NAME
                       , DECODE(A.WEEK_NAME,'일','FFCC00','토','99CCFF','FFFFFF') AS WE_COLOR
                    FROM (SELECT FDAY
                               , TO_CHAR(TO_DATE(FDAY, 'YYYYMMDD'), 'DY', 'NLS_DATE_LANGUAGE=KOREAN') AS WEEK_NAME
                            FROM (SELECT TO_CHAR(TO_DATE(:startDate, 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS FDAY
                                    FROM DUAL
                                  CONNECT BY LEVEL <= TO_DATE(:endDate, 'YYYYMMDD') - TO_DATE(:startDate, 'YYYYMMDD') + 1)) A
                 ) A
               , (
                  /* 매출 - 식음료매출 계획(P), 추정(R) */
                  SELECT YMD AS BASE_DD
                       , NVL(SUM(PAMT), 0) AS SP_AMT
                       , NVL(SUM(RAMT), 0) AS SR_AMT
                    FROM (
                          SELECT B.YMD
                               , DECODE(B.DAY_CLASS, 'P', SUM(B.DD_AMT), 0) AS PAMT
                               , DECODE(B.DAY_CLASS, 'R', SUM(B.DD_AMT), 0) AS RAMT
                            FROM MAP_DAY_LOG_MGMT A
                               , MAP_DAY_PLAN B
                           WHERE A.UPJANG = B.UPJANG
                             AND B.UPJANG = :upjang  
                             AND A.YY = B.YY
                             AND A.MM = B.MM
                             AND A.DAY_CLASS = B.DAY_CLASS
                             AND A.CONFIRM_YN = 'Y'
                             AND B.YMD BETWEEN :startDate AND :endDate
                             AND B.ACCT_CD IN ('41203010', '41203020', '41203030')
                           GROUP BY YMD, B.DAY_CLASS
                          )
                   GROUP BY YMD     
                 ) B 
               , (
                  /* 매출 - 식음료매출 실적 (내부이용포함) */
                  SELECT A.OCCUR_DATE AS BASE_DD
                       , SUM(B.NET_AMT) AS SS_AMT
                    FROM SLA_IF_UPJANG_SALS_MST A
                       , SLA_IF_UPJANG_SALS_DETAIL B
                   WHERE A.OCCUR_DATE = B.OCCUR_DATE
                     AND A.SYS_CLASS = B.SYS_CLASS
                     AND A.UPJANG_CD = B.UPJANG_CD
                     AND A.UPJANG_CD = :upjang  
                     AND A.OCCUR_DATE BETWEEN :startDate AND :endDate
                     AND A.RECEIPT_NUM = B.RECEIPT_NUM
                     /* 1103 : FS식음료매출, 2001 : FS POS식음료매출, 1106 : 기타매출-기타, 1204 : 외식식음료매출-식료, 1205 : 외식식음료매출-음료, 2101 : 외식 POS식음료매출-식료, 2102 : 외식 POS식음료매출-음료 */
                     AND B.SALS_CLASS IN ('1103', '2001', '1106', '1204', '1205', '2101', '2102') 
                   GROUP BY A.OCCUR_DATE                
                 ) C
               , (
                  /* 재료비 - 식음료원가 계획, 추정 */
                  SELECT YMD AS BASE_DD
                       , NVL(SUM(PAMT), 0) AS MP_AMT
                       , NVL(SUM(RAMT), 0) AS MR_AMT
                    FROM (
                          SELECT B.YMD
                               , DECODE(B.DAY_CLASS, 'P', SUM(B.DD_AMT), 0) AS PAMT
                               , DECODE(B.DAY_CLASS, 'R', SUM(B.DD_AMT), 0) AS RAMT
                            FROM MAP_DAY_LOG_MGMT A
                               , MAP_DAY_PLAN B
                           WHERE A.UPJANG = B.UPJANG
                             AND B.UPJANG = :upjang  
                             AND A.YY = B.YY
                             AND A.MM = B.MM
                             AND A.DAY_CLASS = B.DAY_CLASS
                             AND A.CONFIRM_YN = 'Y'
                             AND B.YMD BETWEEN :startDate AND :endDate
                             AND B.ACCT_CD IN ('42203010', '42203020', '42203030')  -- 식음료원가_식료(FC음료포함)
                           GROUP BY YMD, B.DAY_CLASS
                          )
                   GROUP BY YMD     
                 ) D 
               , (
                  /* 재료비 - 실적 - 전산구매 */
                  SELECT /*+ USE_NL(A.HD A.DT) */ TRANS_DATE AS BASE_DD
                       , ROUND(NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( MARGIN_AMOUNT ) ), 0)) AS MS_AMT1
                   FROM HLDC_PO_TRANSACTION_NHASH A
                       , HLDC_PO_SUBINVENTORY B
                   WHERE A.SUBINV_CODE = B.SUBINV_CODE
                     AND A.TRANS_DATE BETWEEN :startDate AND :endDate
                     AND A.TRANS_UPJANG = :upjang  
                     AND A.TRANS_TYPE LIKE 'O%'        -- 출고
                     AND A.TRANS_TYPE <> 'O002'  -- 이동출고 제외
                     AND A.ACCTCD IN ('42203010', '42203020', '42203030')         -- 식재료 (FS사업부 식음료 출고계정 : '42203030', 외식사업부 식음료 출고계정 : '42203010', '42203020')
                   GROUP BY TRANS_DATE, B.OUTVAT_FLAG     
                 ) E 
               , (
                  /* 재료비 - 실적 - 현재구매 */
                  SELECT /*+ USE_NL(A.HD A.DT) */ TRANS_DATE AS BASE_DD
                       , ROUND(NVL( DECODE(B.OUTVAT_FLAG, 'Y', SUM( MARGIN_AMOUNT * DECODE( TAX_CODE, '100', DECODE( MATERIAL_ACCTCD, '11402000', 1.1, 1) ) ), SUM( MARGIN_AMOUNT ) ), 0)) AS MS_AMT2
                    FROM HLDC_PO_TRANSACTION_NHASH A
                       , HLDC_PO_SUBINVENTORY B
                   WHERE A.SUBINV_CODE = B.SUBINV_CODE
                     AND A.TRANS_DATE BETWEEN :startDate AND :endDate
                     AND A.TRANS_UPJANG = :upjang  
                     AND A.TRANS_TYPE LIKE 'I%'        -- 입고
                     AND A.PO_TYP = 'BP'               -- BP : 정산용, UP : 전산구매
                     AND A.ITEM_CODE LIKE 'F%'         -- 식재료
                   GROUP BY TRANS_DATE, B.OUTVAT_FLAG     
                 ) F 
               , (
                  /* 복리후생 식대비 - 일수로 Split */
                  SELECT ROUND(NVL(SUM(AMT), 0) / TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE(:startDate)), 'DD')), 0) AS MS_AMT3
                    FROM MAS_WELFARE
                   WHERE UPJANG = :upjang  
                     AND APPLY_MM = TO_CHAR(TO_DATE(:startDate, 'YYYYMMDD'), 'YYYYMM')
                 ) G
               , (
                  /* 재고실적금액 */
                  SELECT A.BASE_DD
                       , SUM(NVL(A.STOCK_AMT, 0)) AS IS_AMT
                    FROM (
                          SELECT A.BASE_DD
                               , SUM(B.STOCK_AMT) AS STOCK_AMT
                            FROM (
                                  /* 일자 기준정보 */     
                                  SELECT A.FDAY AS BASE_DD
                                       , A.WEEK_NAME
                                       , DECODE(A.WEEK_NAME,'일','FFCC00','토','99CCFF','FFFFFF') AS WE_COLOR
                                    FROM (SELECT FDAY
                                               , TO_CHAR(TO_DATE(FDAY, 'YYYYMMDD'), 'DY', 'NLS_DATE_LANGUAGE=KOREAN') AS WEEK_NAME
                                            FROM (SELECT TO_CHAR(TO_DATE(:startDate, 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS FDAY
                                                    FROM DUAL
                                                  CONNECT BY LEVEL <= TO_DATE(:endDate, 'YYYYMMDD') - TO_DATE(:startDate, 'YYYYMMDD') + 1)) A                  
                                 ) A
                               , (
                      SELECT C.PHYSIC_DATE AS BASE_DD
                           , ROUND(SUM(A.ONHAND_MAMOUNT - A.LOSS_MAMOUNT)) AS STOCK_AMT     -- 실사재고금액
                              FROM HLDC_PO_PHYSICAL_INVENTORY A 
                                 , HLDC_PO_ITEM_MST B 
                                 , (SELECT DISTINCT 
                                           A.PHYSIC_ID
                                         , A.PHYSIC_DATE
                                         , A.CANCEL_YN
                                      FROM HLDC_PO_PHYSICAL_INVENTORY A 
                                         , (SELECT PHYSIC_DATE
                                                 , SUBINV_CODE
                                                 , ITEM_CODE AS ITEM_CODE 
                                                 , MAX(UPDATE_DATE) AS UPDATE_DATE 
                                              FROM HLDC_PO_PHYSICAL_INVENTORY 
                                             WHERE PHYSIC_DATE BETWEEN :startDate AND :endDate -- 조사일
                                               AND SUBINV_CODE IN (SELECT SUBINV_CODE FROM HLDC_PO_SUBINVENTORY WHERE UPJANG = :upjang   AND SUBINV_CODE LIKE 'C%')
                                             GROUP BY PHYSIC_DATE, SUBINV_CODE, ITEM_CODE) B 
                                     WHERE A.PHYSIC_DATE = B.PHYSIC_DATE
                                       AND A.SUBINV_CODE = B.SUBINV_CODE
                                       AND A.ITEM_CODE = B.ITEM_CODE 
                                       AND A.UPDATE_DATE = B.UPDATE_DATE
                                   ) C 
                             WHERE A.ITEM_CODE   = B.ITEM_CODE 
                               AND A.PHYSIC_ID   = C.PHYSIC_ID 
                               AND A.SUBINV_CODE IN (SELECT SUBINV_CODE FROM HLDC_PO_SUBINVENTORY WHERE UPJANG = :upjang  )
                               AND A.PHYSIC_DATE BETWEEN :startDate AND :endDate -- 조사일
                               AND (A.PHYSIC_QTY <> 0 OR A.LOSS_QTY <> 0) 
                               AND C.CANCEL_YN = 'N' 
                             GROUP BY C.PHYSIC_DATE                           
                                 ) B
                             WHERE A.BASE_DD = B.BASE_DD(+)
                             GROUP BY A.BASE_DD
                         ) A
                   GROUP BY A.BASE_DD, A.STOCK_AMT     
                 ) I
               , (                                                                                                                                                                                             
                  SELECT BASE_DD                                                                                                                                                                               
                       , ROUND(DECODE(SUM(SALE_AMT),0,0,SUM(EXPECT_COST) / SUM(SALE_AMT)) * 100,1) EXPECT_RATE                                                                                                 
                       , SUM(EXPECT_COST) EXPECT_COST                                                                                                                                                          
                       , SUM(SALE_AMT) EXPECT_SALE                                                                                                                                                             
                    FROM (                                                                                                                                                                                     
                          SELECT A.MENU_DATE AS BASE_DD                                                                                                                                                        
                               , SUM(A.SALE_PRICE * A.EXPECT_MEAL_QTY) SALE_AMT                                                                                                                                
                               , 0 EXPECT_COST                                                                                                                                                                 
                            FROM FSM_REAL_MENU_MST A                                                                                                                                                           
                               , SCC_COMMON_CODE B                                                                                                                                                             
                           WHERE SUBSTR(A.HALL_CD,1,3) = B.CODE                                                                                                                                                
                             AND B.GROUP_CODE= 'FS0019'                                                                                                                                                        
                             AND A.MENU_DATE BETWEEN :startDate AND :endDate                                                                                                               
                             AND A.UPJANG = :upjang                                                                                                                                                     
                             AND B.ATTR02 <> 'Y'                                                                                                                                                               
                             AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)                                                              
                           GROUP BY A.MENU_DATE                                                                                                                                                                
                          UNION ALL                                                                                                                                                                            
                          SELECT A.MENU_DATE AS BASE_DD                                                                                                                                                        
                               , SUM(C.SALE_PRICE * C.EXPECT_SALE_QTY) SALE_AMT                                                                                                                                
                               , 0 EXPECT_COST                                                                                                                                                                 
                            FROM FSM_REAL_MENU_MST A                                                                                                                                                           
                               , SCC_COMMON_CODE B                                                                                                                                                             
                               , FSM_REAL_RECIPE_MST C                                                                                                                                                         
                           WHERE SUBSTR(A.HALL_CD,1,3) = B.CODE                                                                                                                                                
                             AND A.UPJANG = C.UPJANG                                                                                                                                                           
                             AND A.MENU_CD = C.MENU_CD                                                                                                                                                         
                             AND B.GROUP_CODE = 'FS0019'                                                                                                                                                       
                             AND A.MENU_DATE BETWEEN :startDate AND :endDate                                                                                                               
                             AND A.UPJANG = :upjang                                                                                                                                                     
                             AND B.ATTR02 = 'Y'                                                                                                                                                                
                             AND EXISTS (SELECT 1 FROM FSM_REAL_RECIPE_ITEM X WHERE X.UPJANG = A.UPJANG AND X.MENU_CD = A.MENU_CD AND ROWNUM = 1)                                                              
                           GROUP BY A.MENU_DATE                                                                                                                                                                
                          UNION ALL                                                                                                                                                                            
                          SELECT MENU_DATE AS BASE_DD                                                                                                                                                          
                               , 0 SALE_AMT                                                                                                                                                                    
                               , SUM(EXPECT_COST) EXPECT_COST                                                                                                                                                  
                            FROM (                                                                                                                                                                             
                                  SELECT A.UPJANG                                                                                                                                                              
                                       , A.MENU_CD                                                                                                                                                             
                                       , A.MENU_DATE                                                                                                                                                           
                                       , A.RECIPE_CD                                                                                                                                                           
                                       , ROUND(SUM(A.NEED_QTY*ROUND((A.MARGIN_PRICE/B.KG_CONVERT_RATE/1000),2))) * A.QTY AS EXPECT_COST                                                                        
                                    FROM HLDC_PO_ITEM_MST B                                                                                                                                                    
                                       , (                                                                                                                                                                     
                                          SELECT A.UPJANG                                                                                                                                                      
                                               , A.MENU_CD                                                                                                                                                     
                                               , A.MENU_DATE                                                                                                                                                   
                                               , B.RECIPE_CD                                                                                                                                                   
                                               , C.ITEM_CODE                                                                                                                                                   
                                               , DECODE(E.ATTR02,'Y', B.EXPECT_SALE_QTY, DECODE(E.SET3, 'Y', B.EXPECT_SALE_QTY, A.EXPECT_MEAL_QTY)) QTY                                                        
                                               , C.NEED_QTY                                                                                                                                                    
                                               , C.MARGIN_PRICE                                                                                                                                                
                                            FROM FSM_REAL_MENU_MST A                                                                                                                                           
                                               , FSM_REAL_RECIPE_MST B                                                                                                                                         
                                               , FSM_REAL_RECIPE_ITEM C                                                                                                                                        
                                               , (SELECT * FROM SCC_COMMON_CODE WHERE GROUP_CODE= 'FS0019') E                                                                                                  
                                           WHERE A.UPJANG = B.UPJANG                                                                                                                                           
                                             AND A.MENU_CD = B.MENU_CD                                                                                                                                         
                                             AND B.UPJANG = C.UPJANG                                                                                                                                           
                                             AND B.MENU_CD = C.MENU_CD                                                                                                                                         
                                             AND B.RECIPE_CD = C.RECIPE_CD                                                                                                                                     
                                             AND SUBSTR(A.HALL_CD,1,3) = E.CODE                                                                                                                                
                                             AND A.MENU_DATE BETWEEN :startDate AND :endDate                                                                                               
                                             AND A.UPJANG = :upjang                                                                                                                              
                                         ) A                                                                                                                                                                   
                                   WHERE A.ITEM_CODE = B.ITEM_CODE                                                                                                                                             
                                   GROUP BY A.UPJANG, A.MENU_CD, A.MENU_DATE, A.RECIPE_CD, A.QTY                                                                                                               
                                 )                                                                                                                                                                             
                           GROUP BY MENU_DATE                                                                                                                                                                  
                         )                                                                                                                                                                                     
                   GROUP BY BASE_DD                                                                                                                                                                            
                 ) J                                                                                                                                                                                                
           WHERE A.BASE_DD = B.BASE_DD(+)
             AND A.BASE_DD = C.BASE_DD(+)
             AND A.BASE_DD = D.BASE_DD(+)
             AND A.BASE_DD = E.BASE_DD(+)   
             AND A.BASE_DD = F.BASE_DD(+)   
             AND A.BASE_DD = I.BASE_DD(+)
             AND A.BASE_DD = J.BASE_DD(+)         
           ORDER BY A.BASE_DD ASC
    )
	]]></statement>
</hqml>
