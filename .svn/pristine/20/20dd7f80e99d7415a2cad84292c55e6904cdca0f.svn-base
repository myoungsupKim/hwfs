<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="batch.rc.rrm.rrmUseSumJobDAO">
	<desc>업장레시피 목표사용량/투입재료비 배치 HQML Query</desc>

	<!-- 업장레시피 목록을 조회한다. -->
	<statement name="selectList" type="select">
	/*+ com.hwfs.batch.rc.rrm.rrmUseSumJobDAO.selectList	*/
	<![CDATA[
	SELECT MU_CD
	     , UPJANG_CD
	     , STD_RECIPE_CD
	  FROM RSS_UPJANG_RECIPE_CD_MST
	 WHERE USE_YN = 'Y'
	 GROUP BY MU_CD, UPJANG_CD, STD_RECIPE_CD
	 ORDER BY MU_CD, UPJANG_CD, STD_RECIPE_CD

	]]>
	</statement>

	<!-- 업장레시피를 조회한다. -->
	<statement name="selectRecipeList" type="select">
	/*+ com.hwfs.batch.rc.rrm.rrmUseSumJobDAO.selectRecipeList	*/
	<![CDATA[
	SELECT MU_CD
	     , UPJANG_CD
	     , STD_RECIPE_CD
	     , RECIPE_NM
	     , STD_RECIPE_CD AS MATERIAL_CD
	     , RECIPE_NM AS MATERIAL_CD_NM
	     , TO_CHAR(SYSDATE, 'YYYYMMDD') AS SDATE
	     , '' AS EDATE
	     , 0 AS NEED_QTY
	     , 0 AS SUM_NEED_QTY
	     , 0 AS CST_AMT
	     , 'G' AS PO_UNIT
	     , '' AS RECIPE_APPLY_UNIT
	     , '' AS LOSS_RATE
	     , 'Y' AS SEMI_GOODS_YN
	     , 0 AS INVEST_AMT
	     , 0 AS TREE_LEVEL
	     , '' AS GRAM_PRICE
	     , 0 AS APPLY_QTY
	     , UPJANG_TYPE
	     , TO_CHAR(SYSDATE, 'YYYYMMDD') AS STD_DATE
	     , '' AS MAIN_RECIPE_CD
	     , :loginSabun AS LOGIN_SABUN
	     , :loginSabun AS LOGIN_USERID
	     , '' AS LOGIN_PERS_MASK
	  FROM RSS_UPJANG_RECIPE_CD_MST
	 WHERE UPJANG_CD = :upjangCd
	   AND STD_RECIPE_CD = :stdRecipeCd
	   AND MU_CD = :muCd

	]]>
	</statement>

	<!-- 업장레시피를 조회한다. -->
	<statement name="selectRecipeDetail" type="select">
	/*+ com.hwfs.batch.rc.rrm.rrmUseSumJobDAO.selectRecipeDetail	*/
	<![CDATA[
	SELECT A.MU_CD
	     , A.UPJANG_CD
	     , A.STD_RECIPE_CD
	     , A.RECIPE_NM
	     , A.MATERIAL_CD
	     , DECODE(A.SEMI_GOODS_YN, 'Y', A.SUB_RECIPE_NM, A.ITEM_NAME) AS MATERIAL_CD_NM
	     , A.SDATE
	     , A.EDATE
	     , A.NEED_QTY
	     , CASE WHEN A.LOSS_RATE > 100
	            THEN ROUND(A.NEED_QTY * (A.LOSS_RATE / 100), 3)
	            ELSE ROUND(A.NEED_QTY * (A.LOSS_RATE / 100), 3)
	        END AS SUM_NEED_QTY
	     , A.CONTRACT_PRICE AS CST_AMT
	     , A.PO_UNIT
	     , A.RECIPE_APPLY_UNIT
	     , A.LOSS_RATE
	     , A.SEMI_GOODS_YN
	     , CASE WHEN A.SEMI_GOODS_YN = 'Y'
	            THEN CASE WHEN A.LOSS_RATE > 100
	                      THEN ROUND((A.NEED_QTY * (A.LOSS_RATE / 100)) * A.G_PRICE, 3)
	                      ELSE ROUND((A.NEED_QTY * (A.LOSS_RATE / 100)) * A.G_PRICE, 3)
	                  END
	            ELSE ROUND(A.NEED_QTY * (A.CONTRACT_PRICE  / A.KG_CONVERT_RATE / 1000), 3)
	        END AS INVEST_AMT
	     , :treeLevel AS TREE_LEVEL
	     , DECODE(A.SEMI_GOODS_YN, 'Y', ROUND(A.G_PRICE, 2), ROUND(A.CONTRACT_PRICE / A.KG_CONVERT_RATE / 1000, 2)) AS GRAM_PRICE
	     , 0 AS APPLY_QTY
	     , A.UPJANG_TYPE
	     , TO_CHAR(SYSDATE, 'YYYYMMDD') AS STD_DATE
	     , '' AS MAIN_RECIPE_CD
	     , :loginSabun AS LOGIN_SABUN
	     , :loginSabun AS LOGIN_USERID
	     , '' AS LOGIN_PERS_MASK
	  FROM (
	        SELECT /*+ PUSH_PRED(D) */
	               B.MU_CD
	             , A.UPJANG_CD
	             , A.UPJANG_TYPE
	             , A.STD_RECIPE_CD
	             , B.RECIPE_NM
	             , A.MATERIAL_CD
	             , E.RECIPE_NM AS SUB_RECIPE_NM
	             , C.ITEM_NAME
	             , A.SDATE
	             , A.EDATE
	             , NVL(A.NEED_QTY, 0) AS NEED_QTY
	             , A.LOSS_RATE
	             , NVL(D.CONTRACT_PRICE, 0) AS CONTRACT_PRICE
	             , DECODE(C.KG_CONVERT_RATE, 0, 1, C.KG_CONVERT_RATE) AS KG_CONVERT_RATE
	             , A.PO_UNIT
	             , A.RECIPE_APPLY_UNIT
	             , A.SEMI_GOODS_YN
	             --, DECODE(A.SEMI_GOODS_YN, 'Y', FN_RECIPE_AMT_FUN(A.UPJANG_CD, A.MATERIAL_CD, TO_CHAR(SYSDATE, 'YYYYMMDD'), '1'), 0) AS G_PRICE
	             , DECODE(A.SEMI_GOODS_YN, 'Y', (SELECT FN_RECIPE_AMT_FUN(A.UPJANG_CD, A.MATERIAL_CD, TO_CHAR(SYSDATE, 'YYYYMMDD'), '1') FROM DUAL), 0) AS G_PRICE
	             , A.SORT_ORDER
	          FROM RSS_UPJANG_RECIPE_CD_DETAIL A
	             , RSS_UPJANG_RECIPE_CD_MST B
	             , HLDC_PO_ITEM_MST C
	             , (
	                SELECT /*+ LEADING(A.UP) INDEX(A.MR IX_ESPSSGPITM_03)  */
	                       ITEM_CODE
	                     , MAX(CONTRACT_START) AS CONTRACT_START
	                     , MAX(CONTRACT_END) AS CONTRACT_END
	                     , AVG(CONTRACT_PRICE) AS  CONTRACT_PRICE
	                     , UPJANG
	                  --FROM HLDC_PO_CONTRACT_F
                   	  FROM	EPROCUSR.VO_CONTRACT_F_RCP -- 논리적 분사이후 단가불러오는 뷰 변경 20200309	                  
	                 WHERE 1 = 1
	                   AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN CONTRACT_START AND CONTRACT_END
	                   --AND UPJANG = :upjangCd
	                   -- 논리적 분사이후 신규조직 매핑 20200309
	                   AND UPJANG IN (SELECT C.N_CC_CD
                                        FROM ST_UPJANGV B
                                           , SAP_IF.SAP_IFC_CC_MAP C
                                         WHERE B.UPJANG = :upjangCd
	                                        AND B.CC_CD = C.O_CC_CD)
	                 GROUP BY ITEM_CODE, UPJANG
	               ) D
	             , RSS_UPJANG_RECIPE_CD_MST E
	         WHERE A.UPJANG_CD = B.UPJANG_CD(+)
	           AND A.STD_RECIPE_CD = B.STD_RECIPE_CD(+)
	           AND A.MATERIAL_CD = C.ITEM_CODE(+)
	           AND A.MATERIAL_CD = D.ITEM_CODE(+)
	           AND A.UPJANG_CD = D.UPJANG(+)
	           AND A.UPJANG_CD = E.UPJANG_CD(+)
	           AND A.MATERIAL_CD = E.STD_RECIPE_CD(+)
	           AND A.UPJANG_CD = :upjangCd
	           AND A.STD_RECIPE_CD = :stdRecipeCd
	           AND B.MU_CD = :muCd
	           AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN A.SDATE AND A.EDATE
	       ) A
	 ORDER BY A.SEMI_GOODS_YN ASC, A.SORT_ORDER ASC

	]]>
	</statement>

	<!-- 업장레시피를 등록한다. -->
	<statement name="insert" type="insert">
	/*+ com.hwfs.batch.rc.rrm.rrmUseSumJobDAO.insert	*/
	<![CDATA[
		INSERT INTO RSS_UPJANG_RECIPE_DAILY_DTL
		(
		   MU_CD
		 , UPJANG_CD
		 , UPJANG_TYPE
		 , STD_DATE
		 , MAIN_RECIPE_CD
		 , STD_RECIPE_CD
		 , MATERIAL_CD
		 , SEMI_GOODS_YN
		 , LOSS_RATE
		 , NEED_QTY
		 , APPLY_QTY
		 , GRAM_PRICE
		 , SDATE
		 , EDATE
		 , CUSER
		 , CDATE
		 , UUSER
		 , UDATE
		 , INVEST_AMT
		)
		VALUES
		(
		   :muCd
		 , :upjangCd
		 , :upjangType
		 , :stdDate
		 , :mainRecipeCd
		 , :stdRecipeCd
		 , :materialCd
		 , :semiGoodsYn
		 , :lossRate
		 , :needQty
		 , :applyQty
		 , :gramPrice
		 , :sdate
		 , :edate
		 , :loginSabun
		 , SYSDATE
		 , :loginSabun
		 , SYSDATE
		 , :investAmt
		)

	]]>
	</statement>

	<!-- 업장레시피를 삭제한다. -->
	<statement name="delete" type="delete">
	/*+ com.hwfs.batch.rc.rrm.rrmUseSumJobDAO.delete	*/
	<![CDATA[
	DELETE
	  FROM RSS_UPJANG_RECIPE_DAILY_DTL
	 WHERE STD_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')

	]]>
	</statement>

</hqml>