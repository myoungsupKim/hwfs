<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/**
 * Popup을 처리하기 위한 공통 스크립트
 * @ClassName SCPopup.xjs
 * @Description SCPopup Javascript
 * @Modification-Information
 *    수정일      수정자         수정내용
 *  ----------   ----------   -------------------------------
 *  2015.02.26    김재섭       최초 생성
 *
 * @author FC종합전산구축 : COM 김재섭
 * @since 2015.02.26.
 * @version 1.0
 * @see 
 * 
 *  Copyright (C) 2014 by HANWHA S&C CO.,LTD. All right reserved.
 */
var SCPopup = {
	runTimeMode : "As-Is",
	option : {isMainUpjang:""},
	form : null,
	TmSearch : "SCPopup.TmSearch", //팀검색
	UserSearch : "SCPopup.UserSearch", //사용자검색
	PersonalSearch : "SCPopup.PersonalSearch", //사원검색
	ZipSearch : "SCPopup.ZipSearch", //우편번호검색(삭제)
	AddrSearch : "SCPopup.AddrSearch", //주소검색
	StUpjang : "SCPopup.StUpjang", //업장정보
	CustSearch : "SCPopup.CustSearch", //거래처 팝업.
	UpjangDataSet : new Dataset(), //업장에서 사용하는 DataSet
	
	Address : {
	    dataSet : null,
	    addrKey : "addrKey",
	    addrInfo : "addrInfo",
	    etcAddr : "etcAddr",
	    
	    // JSON String을 JSON Object로 변환
		toJson : function(val) {
			return eval("(" + val + ")");
		},
		
		//JSON Object를 JSON String으로 변환
		toString : function(object) {
			var isArray = (object.join && object.pop && object.push
                    && object.reverse && object.shift && object.slice && object.splice);
			var results = [];
			
			for (var i in object) {
				var value = object[i];

				if (typeof value == "object"){
					results.push((isArray ? "" : "\"" + i.toString() + "\" : ") + gfn_jsonObjectToString(value));
				}
				else {
					value=gfn_addSlash(value);
					results.push((isArray ? "" : "\"" + i.toString() + "\" : ") + (typeof value == "string" ? "\"" + value + "\"" : value));
				}
			}
			
			return (isArray ? "[" : "{") + results.join(", ") + (isArray ? "]" : "}");
		},
		
		//기타주소의 변경을 적용한다.
		bind : function(ds, row) {
			var json = this.toJson(ds.getColumn(row, this.addrInfo));
			json.etcAddr = ds.getColumn(row, this.etcAddr);
			ds.setColumn(row, this.addrInfo, this.toString(json));
		},
		
		newData : function(ds, row) {
			var val = '{"addrKey":"","addrClass":"","confirmYn":"","zipCode1":"","baseAddr1":"","detailAddr1":"","lat1":"","lon1":"","zipCode2":"","baseAddr2":"","detailAddr2":"","lat2":"","lon2":"","buildingMgmtNum":"","etcAddr":"","oldAddrKey":""}';
			
			if (arguments.length == 3) {
				ds.setColumn(row, arguments[2], val);
			}
			else {
				ds.setColumn(row, SCPopup.Address.addrInfo, val);
			}
		},
		
		clearData : function(ds, row) {
			var json = this.toJson(ds.getColumn(row, this.addrInfo));
			json.addrKey = "";
			json.zipCode1 = "";
			json.zipCode2 = "";
			json.baseAddr1 = "";
			json.baseAddr2 = "";
			json.detailAddr1 = "";
			json.detailAddr2 = "";
			json.lat1 = "";
			json.lat2 = "";
			json.lon1 = "";
			json.lon2 = "";
			json.buildingMgmtNum = "";
			json.etcAddr = "";
			json.confirmYn = "";
			json.addrClass = "";
			ds.setColumn(row, this.addrInfo, this.toString(json));
			ds.setColumn(row, this.addrKey, "");
		},
		
		deleteData : function(ds, row) {
			this.clearData(row);
			
			ds.updatecontrol = false;
			ds.setRowType(row, Dataset.ROWTYPE_NORMAL);
			ds.updatecontrol = true;
		},

		modifyEtcAddress : function(obj, e, columnId) {
			var json = gfn_jsonStringToObject(obj[columnId]);
			var ds = eval(obj.binddataset);
			var addrJson = this.toJson(ds.getColumn(e.row, json.option.addrInfo));
			
			if (addrJson.addrKey != "") {
				var strId       = "EtcAddrPop";
				var strURL      = "cmn::AddrSearchEtcAddrPop.xfdl";
				var objArgument = {
				  P_ETC_ADDR : addrJson.etcAddr
				};
				var nWidth      = -1;
				var nHeight     = -1;
				var strStyle    = "";
				var nLeft       = -1;
				var nTop        = -1;
				var isModeless  = false;
				var bShowTitle  = true;
				var strAlign    = "-1";
				
				var arrRtn = gfn_dialog(strId, strURL, objArgument, nWidth, nHeight, strStyle, nLeft, nTop, isModeless, bShowTitle, strAlign);
				
				if (arrRtn != undefined) {
					addrJson.etcAddr = arrRtn;
					ds.setColumn(e.row, this.addrInfo, this.toString(addrJson));
					ds.setColumn(e.row, json.option.etcAddr, arrRtn);
				}
			}
		},
		
		//Address Class를 초기화한다.
		init : function(dataSet, addrKey, addrInfo, etcAddr) {
			this.dataSet = dataSet;
			this.addrInfo = addrInfo;
			this.etcAddr = etcAddr;
		}
	},
	
	RoleSet : {
		StUpjang : {
			designTitle : "",
			designUpjangCode : "",
			designUpjangName : "",
			muCd : "",
			tmCd : "",
			roleSetId : "StUpjang",
			sosokUpjang : "",

			init : function() {
				SCPopup.RoleSet.StUpjang.designTitle = "사업장검색";
				SCPopup.RoleSet.StUpjang.designUpjangCode = "사업장코드";
				SCPopup.RoleSet.StUpjang.designUpjangName = "사업장명";
			},
			
			//팝업창의 타이틀을 설정한다.
			setTitle : function(val) {
				SCPopup.RoleSet.StUpjang.designTitle =  val;
			},
			
			//팝업창의 업장코드에 대한 명칭을 설정한다.
			setUpjangCodeTitle : function(val) {
				SCPopup.RoleSet.StUpjang.designUpjangCode = val;
			},
			
			//팝업창의 업장명에 대한 명칭을 설정한다.
			setUpjangNameTitle : function(val) {
				SCPopup.RoleSet.StUpjang.designUpjangName = val;
			},
			
			setMuCd : function(val) {
				SCPopup.RoleSet.StUpjang.muCd = val;
			},
			
			setTmCd : function(val) {
				SCPopup.RoleSet.StUpjang.tmCd = val;
			},
			
			setRoleSetId : function(val) {
				SCPopup.RoleSet.StUpjang.roleSetId = val;
			},
			
			setSosokUpjang : function(val) {
				SCPopup.RoleSet.StUpjang.sosokUpjang = val;
			},
		
			setIncludeVirtureUpjang : function(val) {
				if (val) {
					dataSet.addColumn("virtureUpjang", "STRING", "100");
					dataSet.setColumn(dataSet.rowposition, "virtureUpjang", "Y");
				}
			}
		}
	},
	
	CustOption : {
		qid : "",
		custGubun : "",
		upjang : "",
		title : "거래처 검색",
		labelCode : "거래처 코드",
		labelName : "거래처 명",
		
		//초기화 처리
		init : function() {
		},
		
		setQid : function(val) {
			SCPopup.CustOption.qid = val;
		},
		
		setCustGubun : function(val) {
			SCPopup.CustOption.custGubun = val;
		},
		
		setTitle : function(val) {
			SCPopup.CustOption.title = val;
		},
		
		setLabelCode : function(val) {
			SCPopup.CustOption.labelCode = val;
		},

		setLabelName : function(val) {
			SCPopup.CustOption.labelName = val;
		},
		
		setUpjang : function(val) {
			SCPopup.CustOption.upjang = val;
		}
	},
	
	/**
	 * @class 주어진 조건에 의해 Combo에 Data를 Binding한다.
	 * @param thisForm - 현재 Form Object
	 * @param qid - 조회하고자 하는 대상의 고유 KEY
	 * @param edtId - Edit Object ID (문자열)
	 * @param btnId - 찾기Button Object ID (문자열)
	 * @param outDs - 조회된 결과를 Binding할 Dataset Object로 null인 경우에는 내부적으로 생성한다.
	 * @param option - qid를 조회할 시 필요한 조건(JSON 형태)
	 * @param [옵션] event - 팝업을 호출하기 전.후에 대한 trigger Event명을 기술한다.(JSON형태)
	 *                 before : Popup 호출 전에 대한 Event명
	 *                 after  : Popup에서 Data를 선택한 이후에 대한 Event명
	 *                 isExpandUp : 화면에서 ExpandUp Event가 존재시에는 false로 설정한다.
	 *                              false인 경우에는 SCPopup.doProcessGridPopupEvent(obj, e);을 각 화면에서 호출해 준다.
	 * @return 
	 */
	bind : function(thisForm, qid, edtId, btnId, outDs, option) {
		SCPopup.form = thisForm;
		//Output Dataset이 없는경우에는 내부적으로 Dataset을 생성한다.
		if (outDs == null || outDs == "") {
			var outDsId = ""; // = "ds_hwfsBindingPopup_"+edtId.split(".").join("_")+btnId.split(".").join("_");
			
			if (btnId.indexOf("GRID:") > -1)
			{
				outDsId = "ds_hwfsBindingPopup_"+edtId.split(".").join("_");
			}
			else
			{
				outDsId = "ds_hwfsBindingPopup_"+edtId.split(".").join("_")+btnId.split(".").join("_");
			}
			
			thisForm.removeChild(outDsId);
			outDs = new Dataset();
			outDs.id = outDsId;
			outDs.name = outDsId;
			thisForm.addChild(outDsId, outDs);
		}
		
		//옵션에 대하여 선언되지 않는 경우에는 초기화 한다.
		if (option == undefined || option == null || option == "") option = {};
		
		//event에 대하여 선언한다.
		var event = {};
		if (arguments.length > 6) {
			event = arguments[6];
			
			if (event.before == undefined) event.before = "NVL";
			if (event.after == undefined) event.after = "NVL";
			if (event.isExpandUp == undefined) event.isExpandUp = true;
			if (event.isValueChanged == undefined) event.isValueChanged = true;
		}
		else {
			event = {before:"NVL", after:"NVL", isExpandUp:true, isValueChanged:true};
		}
		
		if (option.isReadonly == undefined) option.isReadonly = false;
		if (option.isEtcAddrRead == undefined) option.isEtcAddrRead = false;
		if (option.setExpr == undefined) option.setExpr = [];
		
		//Controller로 전송할 Parameter를 설정한다.
		var parameter = {
			qid : qid,
			edtId : edtId,
			btnId : btnId,
			outDs : outDs.name,
			option : option,
			event : event
		};
		
		//[[Grid의 팝업을 처리한다.
		if (btnId.indexOf("GRID:") > -1)
		{
			var grid = eval(edtId.substring(0, edtId.lastIndexOf(".")));
			var columnId = edtId.substr(edtId.lastIndexOf(".")+1);
			var etcAddr = "NVL";

			for (var i=0, len=grid.getCellCount("body"); i<len; i++) {
				if (grid.getCellProperty("body", i, "text") == "bind:"+columnId) {
					
					if (!option.isReadonly) {
						grid.setCellProperty("body", i, "edittype", "expand");
						grid.setCellProperty("body", i, "expandshow", "show");
						grid.setCellProperty("body", i, "expandsize", "21");
					}
					
					for (var exprCnt=0, exprLen=option.setExpr.length; exprCnt<exprLen ; exprCnt++)
					{
						grid.setCellProperty("body", i, option.setExpr[exprCnt].property, "EXPR(" + option.setExpr[exprCnt].expr + ")");
					}
					
// 					if (option.setExpr != "NVL") {
// 						grid.setCellProperty("body", i, "edittype", "EXPR(" + option.setExpr + "?'none':'expand')");
// 						grid.setCellProperty("body", i, "expandshow", "EXPR(" + option.setExpr + "?'hide':'show')");
// 						grid.setCellProperty("body", i, "expandsize", "EXPR(" + option.setExpr + "?'0':'21')");
// 					}
					
					if (qid == SCPopup.AddrSearch) {
						grid.setCellProperty("body", i, "expr", 'eval("("+'+option.addrInfo+'+")").addrClass==""?"":eval("("+'+option.addrInfo+'+")").addrClass=="1"?eval("("+'+option.addrInfo+'+")").zipCode1:eval("("+'+option.addrInfo+'+")").zipCode2');
					}
				}
				
				if (qid == SCPopup.AddrSearch) {
					if (grid.getCellProperty("body", i, "text") == "bind:"+option.addrClass) {
						grid.setCellProperty("body", i, "expr", 'eval("("+'+option.addrInfo+'+")").addrClass==""?"":eval("("+'+option.addrInfo+'+")").addrClass=="1"?"지번주소":"도로명주소"');
					}
					
					if (grid.getCellProperty("body", i, "text") == "bind:"+option.baseAddr) {
						grid.setCellProperty("body", i, "expr", 'eval("("+'+option.addrInfo+'+")").addrClass==""?"":eval("("+'+option.addrInfo+'+")").addrClass=="1"?eval("("+'+option.addrInfo+'+")").baseAddr1:eval("("+'+option.addrInfo+'+")").baseAddr2');
					}
					
					if (grid.getCellProperty("body", i, "text") == "bind:"+option.detailAddr) {
						grid.setCellProperty("body", i, "expr", 'eval("("+'+option.addrInfo+'+")").addrClass==""?"":eval("("+'+option.addrInfo+'+")").addrClass=="1"?eval("("+'+option.addrInfo+'+")").detailAddr1:eval("("+'+option.addrInfo+'+")").detailAddr2');
					}

					if (grid.getCellProperty("body", i, "text") == "bind:"+option.etcAddr) {
						if (option.isReadonly == false  && option.isEtcAddrRead == false) {
							
							grid.setCellProperty("body", i, "edittype", "expand");
							grid.setCellProperty("body", i, "expandshow", "show");
							grid.setCellProperty("body", i, "expandsize", "21");
						}
						
						grid.setCellProperty("body", i, "expr", 'eval("("+'+option.addrInfo+'+")").addrClass==""?"":eval("("+'+option.addrInfo+'+")").etcAddr');
						etcAddr = option.etcAddr;
					}
				}
			}
			
			grid[columnId] = gfn_jsonObjectToString(parameter);
			grid["etcAddr"] = etcAddr;
			
			if (qid == SCPopup.AddrSearch)
			{
				SCPopup.Address.init(eval(grid.binddataset), option.addrKey, option.addrInfo, option.etcAddr);
			}
			
			grid.autoenter = "select";
			
			if (event.isExpandUp) {
				grid.onexpandup.setHandler(0, function(obj, e) {
					var column = gfn_replace(obj.getCellProperty("body", e.cell, "text"), "bind:", "");

					if (column == obj["etcAddr"]) {
						SCPopup.Address.modifyEtcAddress(obj, e, columnId);
					}
					else {
						SCPopup.doProcessGridPopupEvent(obj, e);
					}
				});
			}
			
		}
		//Grid의 팝업을 처리한다.]]
		//[[폼의 팝업을 처리한다.
		else
		{
			//[[Button에 대하여 Event를 등록한다.
			var btn = eval(btnId);
			btn.userdata_form_name = thisForm.name;
			btn.userdata_oid_name = edtId + "_" + btnId;
			btn.userdata_variable_name = gfn_jsonObjectToString(parameter); 
			btn.onclick.addHandler(function(obj, e) {
				if (gfn_isNull(obj.userdata))
				{
					SCPopup.doProcessPopupEvent(obj);
				}
			});
			//Button에 대하여 Event를 등록한다.]]
			
			//[[Edit에 대하여 Event를 등록한다.
			var edt = eval(edtId);
			edt.readonly = true;
			edt.userdata_form_name = thisForm.name;
			edt.userdata_oid_name = edtId + "_" + btnId;
			edt.userdata_variable_name = gfn_jsonObjectToString(parameter); 
			edt.onkeydown.addHandler(function(obj, e) {
				if (gfn_isNull(obj)) return "";
				if (gfn_isNull(e))   return "";

				// Enter 키
				if(e.keycode == 13) 
				{		
					if (gfn_isNull(obj.userdata))
					{
						SCPopup.doProcessPopupEvent(obj);
					}
				}
				// Del 키
				else if(e.keycode == 46) 
				{		
					obj.value    = "";
					obj.userdata = "";
				}
			});
			//Edit에 대하여 Event를 등록한다.]]
		}
		//폼의 팝업을 처리한다.]]
	},
	
	/**
	 * @class 내부 Event Function으로 Grid의 Expand Up Event에서 호출한다.
	 */
	doProcessGridPopupEvent : function(obj, e) {
		var columnId = gfn_replace(obj.getCellProperty("body", e.cell, "text"), "bind:", "");
		var json = gfn_jsonStringToObject(obj[columnId]);
		var userdata_oid_name = json.edtId;
		var bindDataset = eval(obj.binddataset);

		if (json.event.before != "NVL") {
			var before = eval(json.event.before);
			var beforeParameter = {
				oid : userdata_oid_name,
				option : json.option
			};
			
			if (json.qid == SCPopup.StUpjang) {
				if (!before(beforeParameter, SCPopup.RoleSet.StUpjang)) return;
			}
			else if (json.qid == SCPopup.CustSearch) {
				if (!before(beforeParameter, SCPopup.CustOption)) return;
			}
			else {
				if (!before(beforeParameter)) return;
			}
		}

		json.option.value = "";
		
		var strId;
		var strURL;
		var objArgument;
		var nWidth;
		var nHeight;
		var strStyle;
		var nLeft;
		var nTop;
		var isModeless;
		var bShowTitle;
		var strAlign;
		
		//[[팀검색
		if (json.qid == SCPopup.TmSearch) {
			strId       = "TmSearch";
			strURL      = "cmn::TmSearchPop.xfdl";
			objArgument = {
				P_BU_CD : json.option.qoBuCd,
				P_MU_CD : json.option.qoMuCd,
				P_TM_CD : (json.option.qoTmCd == undefined?g_Tm_Cd:json.option.qoTmCd),
				P_USE_YN: json.option.qoUseYn
			};
			nWidth      = 513;
			nHeight     = 495;
			strStyle    = "";
			nLeft       = -1;
			nTop        = -1;
			isModeless  = false;
			bShowTitle  = true;
			strAlign    = "-1";

		}
		//팀검색]]
		//[[사용자검색
		else if (json.qid == SCPopup.UserSearch) {
			strId       = "UserSearch";
			strURL      = "cmn::UserSearchPop.xfdl";
			objArgument = {
				P_SOSOK_CODE      : json.option.qoSosokCode,
				P_SOSOK_NAME      : json.option.qoSosokName,
				P_USER_GROUP      : json.option.qoUserGroup,
				P_USE_YN          : json.option.qoUseYn,
			    P_IS_MULTI_CHOICE : "false",
			    P_USER_NAME       : "",
			    P_APPLY_SYSTEM_MST: "N"
			};
			nWidth      = 700;
			nHeight     = 495;
			strStyle    = "";
			nLeft       = -1;
			nTop        = -1;
			isModeless  = false;
			bShowTitle  = true;
			strAlign    = "-1";
		}
		//사용자검색]]
		//[[사원검색
		else if (json.qid == SCPopup.PersonalSearch) {
			strId       = "PersonalSearch";
			strURL      = "cmn::PersonalSearchPop.xfdl";
			objArgument = {
				P_MU_CD : json.option.qoMuCd,
				P_TM_CD : json.option.qoTmCd,
				P_TM_NM : json.option.qoTmNm,
				P_CC_CD : json.option.ccCd,
				P_CC_NM : json.option.ccNm
			};
			nWidth      = 726;
			nHeight     = 495;
			strStyle    = "";
			nLeft       = -1;
			nTop        = -1;
			isModeless  = false;
			bShowTitle  = true;
			strAlign    = "-1";
		}
		//사원검색]]
		//[[우편번호검색
		else if (json.qid == SCPopup.ZipSearch) {
			strId       = "ZipSearchPop";
			strURL      = "cmn::ZipSearchPop.xfdl";
			objArgument = null;
			nWidth      = 614;
			nHeight     = 525;
			strStyle    = "";
			nLeft       = -1;
			nTop        = -1;
			isModeless  = false;
			bShowTitle  = true;
			strAlign    = "-1";
		}
		//우편번호검색]]
		
		else if (json.qid == SCPopup.AddrSearch) {
			strId       = "AddrSearch";
			strURL      = "cmn::AddrSearchPop.xfdl";
			objArgument = {P_ETC_ADDR : SCPopup.Address.toJson(bindDataset.getColumn(bindDataset.rowposition, json.option.addrInfo)).etcAddr};
			nWidth      = -1;
			nHeight     = -1;
			strStyle    = "";
			nLeft       = -1;
			nTop        = -1;
			isModeless  = false;
			bShowTitle  = true;
			strAlign    = "-1";
		}
		
		//[[StUpjang 검색
		else if (json.qid == SCPopup.StUpjang) {
			SCPopup.RoleSet.StUpjang.init();
			
			var dataSet = new Dataset();
			dataSet.addRow();
			dataSet.addColumn("roleSetId", "STRING", "4000");
			dataSet.addColumn("designTitle", "STRING", "4000"); //팝업디자인정보 : 타이틀명
			dataSet.addColumn("designUpjangCode", "STRING", "4000"); //팝업디자인정보 : 업장코드명
			dataSet.addColumn("designUpjangName", "STRING", "4000"); //팝업디자인정보 : 업장명
			dataSet.addColumn("muCd", "STRING", "100"); //팀코드
			dataSet.addColumn("tmCd", "STRING", "100"); //팀코드
			dataSet.addColumn("sosokUpjang", "STRING", "100");

			if (json.option.includeVirtureUpjang != undefined) {
				dataSet.addColumn("virtureUpjang", "STRING", "1");
				dataSet.setColumn(dataSet.rowposition, "virtureUpjang", "Y");
			}

			dataSet.setColumn(dataSet.rowposition, "roleSetId", SCPopup.RoleSet.StUpjang.roleSetId);
			dataSet.setColumn(dataSet.rowposition, "designTitle", SCPopup.RoleSet.StUpjang.designTitle);
			dataSet.setColumn(dataSet.rowposition, "designUpjangCode", SCPopup.RoleSet.StUpjang.designUpjangCode);
			dataSet.setColumn(dataSet.rowposition, "designUpjangName", SCPopup.RoleSet.StUpjang.designUpjangName);
			dataSet.setColumn(dataSet.rowposition, "muCd", (gfn_length(SCPopup.RoleSet.StUpjang.muCd)==0?"":SCPopup.RoleSet.StUpjang.muCd));
			dataSet.setColumn(dataSet.rowposition, "tmCd", (gfn_length(SCPopup.RoleSet.StUpjang.tmCd)==0?"":SCPopup.RoleSet.StUpjang.tmCd));
			dataSet.setColumn(dataSet.rowposition, "sosokUpjang", (gfn_length(SCPopup.RoleSet.StUpjang.sosokUpjang)==0?"":SCPopup.RoleSet.StUpjang.sosokUpjang));

			strId       = "UpjangSearch";
			strURL      = "cmn::UpjangSearchPop.xfdl";
			objArgument = {
				P_DATASET : dataSet
			};
			nWidth      = 513;
			nHeight     = 495;
			strStyle    = "";
			nLeft       = -1;
			nTop        = -1;
			isModeless  = false;
			bShowTitle  = true;
			strAlign    = "-1";
		}
		//StUpjang 검색]]
		//[[StCust 검색
		else if (json.qid == SCPopup.CustSearch) {
			SCPopup.CustOption.init();

			if (SCPopup.CustOption.qid == "") {
				SCPopup.CustOption.qid = "StCust";
				SCPopup.CustOption.custGubun = "002,003";
			}
			
			var dataSet = new Dataset();
			dataSet.addRow();
			dataSet.addColumn("qid", "STRING", "4000");
			dataSet.addColumn("custGubun", "STRING", "4000");
			dataSet.addColumn("upjang", "STRING", "10");
			dataSet.setColumn(dataSet.rowposition, "qid", SCPopup.CustOption.qid);
			dataSet.setColumn(dataSet.rowposition, "custGubun", SCPopup.CustOption.custGubun);
			dataSet.setColumn(dataSet.rowposition, "upjang", SCPopup.CustOption.upjang);

			strId       = "CustSearch";
			strURL      = "cmn::CustSearchPop.xfdl";
			objArgument = {
				P_DATASET    : dataSet,
				P_TITLE      : SCPopup.CustOption.title,
				P_LABEL_CODE : SCPopup.CustOption.labelCode,
				P_LABEL_NAME : SCPopup.CustOption.labelName
			};
			nWidth      = 513;
			nHeight     = 495;
			strStyle    = "";
			nLeft       = -1;
			nTop        = -1;
			isModeless  = false;
			bShowTitle  = true;
			strAlign    = "-1";
		}
		//StCust 검색]]
		else {
			//[[팝업의 기본디자인을 설정한다.
			var newVariableName = "gs_hwfsBindingPopup_"+json.edtId.split(".").join("_");
			setVariable(newVariableName, "");
			
			var strSvcID    = "hwfsBindingPopup,"+newVariableName;
			var strURL      = "/sc/cmn/binding/popupDesign.xdo";
			var strInDs     = "";
			var strOutDs    = "";
			var strArg      = "qid="+json.qid+" variableName="+newVariableName;
			var strCallback = "";
			var bAsync      = false;
			gfn_transaction(SCPopup.form, strSvcID, strURL, strInDs, strOutDs, strArg, strCallback, bAsync);

			var retVariableValue = eval(newVariableName);
			var retJson = gfn_jsonStringToObject(retVariableValue);
			//팝업의 기본디자인을 설정한다.]]

			strId       = userdata_oid_name;
			strURL      = "cmn::CommonPopup.xfdl";
			objArgument = {SEND_DESIGN_PARAMETER:retVariableValue, SEND_PARAMETER:gfn_jsonObjectToString(json)};
			nWidth      = parseInt(retJson.width);
			nHeight     = parseInt(retJson.height);
			strStyle    = "";
			nLeft       = -1;
			nTop        = -1;
			isModeless  = false;
			bShowTitle  = true;
			strAlign    = "-1";
		}

		//[[팝업창을 호출한다.
		var arrRtn = gfn_dialog(strId, strURL, objArgument, nWidth, nHeight, strStyle, nLeft, nTop, isModeless, bShowTitle, strAlign);
		
		if (arrRtn instanceof Object)
		{
			var bindingCodeColumn;
			var bindingNameColumn;
			
			//[[팀검색
			if (json.qid == SCPopup.TmSearch) {
				bindingCodeColumn = "tmCd";
				bindingNameColumn = "tmNm";
			}
			//팀검색]]
			//[[사용자검색
			else if (json.qid == SCPopup.UserSearch) {
				bindingCodeColumn = "sabun";
				bindingNameColumn = "nmKor";
			}
			//사용자검색]]
			//[[사원선택
			else if (json.qid == SCPopup.PersonalSearch) {
				bindingCodeColumn = "sabun";
				bindingNameColumn = "nmKor";
			}
			//사원선택]]
			//[[우편번호검색
			else if (json.qid == SCPopup.ZipSearch) {
				bindingCodeColumn = "zip";
				bindingNameColumn = "addr";
			}
			//우편번호검색]]
			
			
			else if (json.qid == SCPopup.AddrSearch) {
				var addrJson = SCPopup.Address.toJson(bindDataset.getColumn(bindDataset.rowposition, json.option.addrInfo));
				addrJson.addrKey = arrRtn.addrKey;
				addrJson.addrClass = arrRtn.addrClass;
				addrJson.confirmYn = arrRtn.confirmYn;
				addrJson.zipCode1 = arrRtn.zipCode1;
				addrJson.baseAddr1 = arrRtn.baseAddr1;
				addrJson.detailAddr1 = arrRtn.detailAddr1;
				addrJson.lat1 = gfn_isNull(arrRtn.lat1)?"":arrRtn.lat1;
				addrJson.lon1 = gfn_isNull(arrRtn.lon1)?"":arrRtn.lon1;
				addrJson.zipCode2 = arrRtn.zipCode2;
				addrJson.baseAddr2 = arrRtn.baseAddr2;
				addrJson.detailAddr2 = arrRtn.detailAddr2;
				addrJson.lat2 = gfn_isNull(arrRtn.lat2)?"":arrRtn.lat2;
				addrJson.lon2 = gfn_isNull(arrRtn.lon2)?"":arrRtn.lon2;
				addrJson.buildingMgmtNum = gfn_isNull(arrRtn.buildingMgmtNum)?"":arrRtn.buildingMgmtNum;
				addrJson.etcAddr = gfn_isNull(arrRtn.etcAddr)?"":arrRtn.etcAddr;
				
				bindDataset.setColumn(bindDataset.rowposition, json.option.addrInfo, SCPopup.Address.toString(addrJson));
				bindDataset.setColumn(bindDataset.rowposition, json.option.addrKey, arrRtn.addrKey);
			}
			
			//[[StUpjang 검색
			else if (json.qid == SCPopup.StUpjang) {
				bindingCodeColumn = "upjangCode";
				bindingNameColumn = "upjangName";
			}
			//StUpjang 검색]]
			//[[StCust 검색
			else if (json.qid == SCPopup.CustSearch) {
				bindingCodeColumn = "custCode";
				bindingNameColumn = "custName";
			}
			//StCust 검색]]
			else {
				bindingCodeColumn = retJson.bindingCode;
				bindingNameColumn = retJson.bindingName;
			}
		
			if (json.qid != SCPopup.AddrSearch) {
				bindDataset.setColumn(bindDataset.rowposition, columnId, arrRtn[bindingNameColumn]);
				bindDataset.setColumn(bindDataset.rowposition, gfn_replace(json.btnId, "GRID:", ""), arrRtn[bindingCodeColumn]);
			}

			if (json.event.after != "NVL") {
				var after = eval(json.event.after);
				var afterParameter = {
					oid : userdata_oid_name,
					option : json.option,
					datasetName : json.outDs
				};
				
				after(afterParameter, arrRtn);
			}
		}
		//팝업창을 호출한다.]]
	},
	
	/**
	 * @class 내부 Event Function으로 Button click Event와 Edit KeyDown Event에서 호출한다.
	 */
	doProcessPopupEvent : function(obj) {
		var json = gfn_jsonStringToObject(obj.userdata_variable_name);
		
		if (json.event.before != "NVL") {
			var before = eval(json.event.before);
			var beforeParameter = {
				oid : obj.userdata_oid_name,
				option : json.option
			};
			
			if (!before(beforeParameter)) return;
		}

		json.option.value = "";
		
		//[[팝업의 기본디자인을 설정한다.
		var newVariableName = "gs_hwfsBindingPopup_"+json.edtId.split(".").join("_")+json.btnId.split(".").join("_");
		setVariable(newVariableName, "");
		
		var strSvcID    = "hwfsBindingPopup,"+newVariableName;
		var strURL      = "/sc/cmn/binding/popupDesign.xdo";
		var strInDs     = "";
		var strOutDs    = "";
		var strArg      = "qid="+json.qid+" variableName="+newVariableName;
		var strCallback = "";
		var bAsync      = false;
		gfn_transaction(SCPopup.form, strSvcID, strURL, strInDs, strOutDs, strArg, strCallback, bAsync);

		var retVariableValue = eval(newVariableName);
		var retJson = gfn_jsonStringToObject(retVariableValue);
		//팝업의 기본디자인을 설정한다.]]

		//[[팝업창을 호출한다.
		var strId       = obj.userdata_oid_name;
		var strURL      = "cmn::CommonPopup.xfdl";
		var objArgument = {SEND_DESIGN_PARAMETER:retVariableValue, SEND_PARAMETER:gfn_jsonObjectToString(json)};
		var nWidth      = parseInt(retJson.width);
		var nHeight     = parseInt(retJson.height);
		var strStyle    = "";
		var nLeft       = -1;
		var nTop        = -1;
		var isModeless  = false;
		var bShowTitle  = true;
		var strAlign    = "-1";

		// 리턴값을 배열로 받을 경우	
		var arrRtn = gfn_dialog(strId, strURL, objArgument, nWidth, nHeight, strStyle, nLeft, nTop, isModeless, bShowTitle, strAlign);
		
		if (arrRtn instanceof Object)
		{
			var edit = eval(json.edtId);
			edit.value = arrRtn[retJson.bindingName];
			edit.userdata = arrRtn[retJson.bindingCode];
			
			if (json.event.after != "NVL") {
				var after = eval(json.event.after);
				var afterParameter = {
					oid : obj.userdata_oid_name,
					option : json.option,
					datasetName : json.outDs
				};
				
				after(afterParameter, arrRtn);
			}
		}
		//팝업창을 호출한다.]]
	}
};

]]></Script>
