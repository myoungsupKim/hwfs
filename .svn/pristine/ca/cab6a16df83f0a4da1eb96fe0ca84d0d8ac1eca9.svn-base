<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/**
 * @fileOverview
 * GRID 관련 함수 모음
 */

/**
 * @class 그리드에 해당하는 cell의 bind되어 있는 colid를 리턴
 * @param obj - Dataset Object
 * @param nCellIdx - 그리드 해당cell index
 * @return String - cell의 bind되어 있는 colid
 */
function gfn_getCellColId(obj:Grid, nCellIdx, sBand)
{	
	if(gfn_isNull(sBand)) sBand = "Body";
	//trace("gfn_getCellColId : " + nCellIdx);
	if(gfn_isNull(obj.getCellProperty(sBand, nCellIdx, "text"))) return "";	
	if(obj.getCellProperty(sBand, nCellIdx, "text").indexOf("bind:") == -1 ) return "";	

    return gfn_trim(gfn_trim(gfn_replace(obj.getCellProperty(sBand, nCellIdx, "text"),"bind:","")));
}

/**
 * @class cell에 해당 되는 그리드Title을 리턴
 * @param obj - Grid Object
 * @param nCellIdx - 그리드 해당cell index
 * @param strGubn - 그리드 타이틀에서 가져오고자 하는 속성(text, class 등)
 * @return String - 그리드 타이틀에서 가져오고자 하는 속성값
 */
function gfn_getTitle(objGrid, nCell, strGubn)
{
	var nColSpan    = 1;
	var nColSpanCnt = 0;
	var strColTitle = "";
	
	var cntCol = objGrid.getFormatColCount();
	for (var i=0; i<cntCol; i++)
	{
		if(i >= nCell-nColSpanCnt) break;		
		nColSpan = objGrid.getCellProperty("head", i, "colspan");
		if(nColSpan != 1) 
		{
			nColSpanCnt++;
		}
	}
	var nRealCell  = nCell-nColSpanCnt;
	strColTitle = objGrid.getCellProperty("Head", nRealCell, strGubn);
	//if(strGubn == "text") trace("nColSpanCnt : " + nColSpanCnt + " / nRealCell : " + nRealCell + " / strColTitle : " + strColTitle);
// 	if(strGubn == "text" && gfn_isNull(strColTitle))
// 	{
// 		strColTitle = "" + nCell-nColSpanCnt + "번째 칼럼";
// 	}	
	return strColTitle;
}

/**
 * @class 그리드에서 바인드된 컬럼명으로 컬럼 index를 리턴
 * @param obj - Grid Object
 * @param strColID - Column ID
 * @param sBand - Band 위치
 * @return Integer - Column Index, 없으면 -1
 */
function gfn_getColumnCellIdx(obj:Grid, sCol, sBand) 
{
	if (gfn_isNull(sBand)) sBand = "Body";
	//return obj.getBindCellIndex(sBand,sCol);
	
	var nCnt = obj.getCellCount(sBand);

	for ( var i = 0; i < nCnt; i++ ) {
		if (sCol == gfn_getCellColId(obj, i, sBand))
			return i ;
	}
	return -1;	
}


/**
 * @class 지정한 Column ID에 해당하는 Dataset의 Column Index를 가지고 오는 Method 
 * @param objDs - Dataset Object
 * @param strColID - Column ID
 * @return Integer - Column Index, 없으면 -1
 */
function gfn_getColIndex(objDs, strColID)
{
	for ( var i = 0; i <objDs.getColCount(); i++ ) 
	{
		if (strColID == objDs.getColID(i))
			return i ;
	}
	return -1;
}

/**
 * @class 그리드의 Sort를 처리한다.
 * @param obj - Grid Object
 * @param e   - GridClickEventInfo
 * @return 없음
 */
var CONST_ASC_MARK  = "▲";
var CONST_DESC_MARK = "▼";

function gfn_gridSort(obj:Grid, e:GridClickEventInfo)
{
	//trace("gfn_gridSort : " + obj.name);
	// 그리드 멀티소트 초기화
	obj.dsMultiSort = "";

    var bindDs = eval(obj.binddataset);
    if (bindDs.rowcount == 0) return false;
		
    var CONST_SORT_MARK = "";

    var strHeadText  = obj.getCellProperty("body", e.col,"text");
    strHeadText = gfn_nvl(strHeadText);
    
    // 엑셀 아이콘시에 엑셀 다운로드
    var strHeadClass = obj.getCellProperty("head", e.col,"class");
    if(strHeadClass == "head_Excel")
    {
		gfn_exportExcel(obj);
		return;
    }
    
    var BodyColId = (strHeadText).toString().split(":");    // e.col : 바인드된 컬럼.
    if (BodyColId[0] != "bind") 
    {
        return false;
    }

    // 체크박스일때 check All
    var strEditType = obj.getCellProperty("head", e.col,"displaytype");
    if(strEditType == "checkbox")
    {
		gfn_setGridCheckAll(obj, e);
		//항상 첫번째 행을 선택하도록 한다.
		bindDs.selectRow(0);
		return;
    }

    for (var i = 0; i < obj.getCellCount("head"); i++) 
    {
        if(obj.getCellText(-1, i) == "undefined") continue;
        
        var strHeadText = obj.getCellText(-1, i);
        
        if(i == e.cell) 
        {
            if (strHeadText.substr(strHeadText.length - 1) == CONST_ASC_MARK) {
                obj.setCellProperty( "head", i, "text", strHeadText.substr(0, strHeadText.length - 2) + " " + CONST_DESC_MARK);
                bindDs.keystring = "S:-" + BodyColId[1];
            } else if (strHeadText.substr(strHeadText.length - 1) == CONST_DESC_MARK) {
                obj.setCellProperty( "head", i, "text", strHeadText.substr(0, strHeadText.length - 2));
                bindDs.keystring = bindDs.keystring.default;
            } else {
                obj.setCellProperty( "head", i, "text", strHeadText + " " + CONST_ASC_MARK);
                bindDs.keystring = "S:+" + BodyColId[1];
            }
        } else {    // 정렬표시 삭제
            if (strHeadText.substr(strHeadText.length - 1) == CONST_ASC_MARK || strHeadText.substr(strHeadText.length - 1) == CONST_DESC_MARK) {
                obj.setCellProperty( "head", i, "text", strHeadText.substr(0, strHeadText.length - 2));
            }
        }
    }
    
	//항상 첫번째 행을 선택하도록 한다.
    bindDs.selectRow(0);
}

/**
 * @class 그리드의 Sort Mark를 없앤다.
 * @param obj - Grid Object
 * @return 없음
 */
function gfn_clearSortMark(obj:Grid) 
{
    var bindDs = eval(obj.binddataset);
    bindDs.keystring = "";
    
    for (var i = 0; i < obj.getCellCount("head"); i++) {
        if(obj.getCellText(-1, i) == "undefined") continue;
        
        var strHeadText = obj.getCellText(-1, i);
        
        if (strHeadText.substr(strHeadText.length - 1) == CONST_ASC_MARK || strHeadText.substr(strHeadText.length - 1) == CONST_DESC_MARK) {
            obj.setCellProperty("head", i, "text", strHeadText.substr(0, strHeadText.length - 2));
        }
    }
}

/**
 * @class 그리드의 Summary의 색상 및 Align 정의
 * @param nRowLevel   - 현재 row의 row level - getRowLevel(currow)
 * @param sGubn       - BG : background color, AL : align, LV : level
 * @param nTotalLevel - Dataset의 Group Total Level
 * @param nRow        - Tree를 펼칠 Group Level 
 * @param oGrid       - Grid Object
 * @return String     - 색상 및 Align 값
 */
function gfn_sumStyle(nRowLevel, sGubn, nTotalLevel, nRow, oGrid)
{
	if(gfn_isNull(sGubn))       sGubn = "BG";
	if(gfn_isNull(nTotalLevel)) nTotalLevel = 0;
	
	var sRtn;

	// background color
	if(sGubn == "BG")
	{	
		switch(nRowLevel)
		{
			case 4 :
				sRtn = "#daeaf5ff";
				break;
						
			case 3 :
				sRtn = "#e0fcd4ff";
				break;
						
			case 2 :
				sRtn = "#cef6e5ff";
				break;
						
			case 1 :
				sRtn = "#fddcc9ff";
				break;
			
			default :
				sRtn = "";
				break;        
		}
    }
	// background Image
	if(sGubn == "IMG")
	{
		var nTreeRow    = oGrid.getTreeRow(nRow);
		var nTreeStatus = oGrid.getTreeStatus(nTreeRow);

		switch(nRowLevel)
		{
			case 0 :
				sRtn = "";
				break; 
			
			case 4 :
			case 3 :
			case 2 :
			case 1 :
				if(nTreeStatus == 0)
				{
					sRtn = "theme://images/new/grd_WF_Plusbtn.png";
				}
				else {
					sRtn = "theme://images/new/grd_WF_Minusbtn.png";
				}
				break;        

			default :
				break;        				
		}		
    }    
    // align
    else if (sGubn == "AL")
    {
		switch(nRowLevel)
		{
			case 4 :
				sRtn = "right middle";
				break;
						
			case 3 :
				sRtn = "right middle";
				break;
						
			case 2 :
				sRtn = "right middle";
				break;
						
			case 1 :
				sRtn = "right middle";
				break;
			
			default :
				sRtn = "";
				break;        
		}
    }
    // Tree Level
    else if (sGubn == "LV")
    {
		sRtn = nTotalLevel - nRowLevel;
    }

    return sRtn;
}

 /**
 * @class Tree Grid Level값으로 펼치기
 * @param strGrid        - Grid 명(String)
 * @param nLevel         - Tree를 펼칠 Group Level
 * @return 없음
 */ 
function gfn_setTreeStatus(strGrid, nLevel, bTreeStatus)
{
	var objGrid = eval(strGrid);
	var objDs   = eval(objGrid.binddataset);
	if(gfn_isNull(bTreeStatus)) bTreeStatus = true;
	
	objGrid.enableredraw = false;
	objGrid.treeinitstatus = "expand,all";
	for(var i=objDs.rowcount-1; i >= 0; i--)
	{
		nRow = objGrid.getTreeRow(i);
		
		// 펼칠때
		if(bTreeStatus)
		{
			if(nLevel >= objDs.getRowLevel(i)) 
			{
				objGrid.setTreeStatus(i, !bTreeStatus);
			}
			else {
				objGrid.setTreeStatus(i, bTreeStatus);
			}
		}
		// 닫힐때
		else {
			if(nLevel >= objDs.getRowLevel(i)) objGrid.setTreeStatus(i, bTreeStatus);
		}
	}
	objGrid.enableredraw = true;
}

 /**
 * @class Grid 메뉴 Open
 * @param obj - obj
 * @param e - event 객체
 * @return 없음
 */  
function gfn_openGridMenu(obj:Grid, e:GridMouseEventInfo)
{
	gds_gridMenu.filter("");
	
	// 권한 제어시 사용 예정
// 	if (!gfn_isNull(type))
// 	{
// 		var arrType = type.split(":");
// 		var cnt = gds_gridMenu.rowcount;
// 		
// 		for (var i=0; i<cnt; i++)
// 		{
// 			if (!gfn_isNull(arrType[i]))
// 			{
// 				gds_gridMenu.setColumn(i, "bUse", arrType[i]);
// 			}
// 			else
// 			{
// 				gds_gridMenu.setColumn(i, "bUse", "Y");
// 			}
// 		}
// 		
// 		gds_gridMenu.filter("bUse == 'Y' || bUse== 'y'");
// 	}

	var pmenu = this.components["grdMenu"];
	if (gfn_isNull(pmenu))
	{
		pmenu = new PopupMenu;
		pmenu.init("grdMenu", 0,0,0,0);
		this.addChild("grdMenu", pmenu);
		pmenu.innerdataset = gds_gridMenu;
		pmenu.levelcolumn = "menuLvl";
		pmenu.idcolumn = "menuId";
		pmenu.captioncolumn = "menuNm";
		pmenu.hotkeycolumn  = "hotKey";
		pmenu.enablecolumn = "bEnbleColumn";
		pmenu.show();
		
		grdMenu.onmenuclick.addHandler(gfn_grdMenu_onmenuclick);
	}
	
	pmenu.grid = obj;
	pmenu.col = e.col;
	if (gfn_isNull(pmenu.gridFormat))
	{
		pmenu.gridFormat = "<Formats>\r\n" + obj.getCurFormatString() + "</Formats>";
	}
	
	var pdv = this.components["pdv_GridMenu"];	
	if (gfn_isNull(pdv))
	{
		pdv = new PopupDiv;
		pdv.init("pdv_GridMenu", 0,0,10,10);
		this.addChild("pdv_GridMenu", pdv);
		pdv.asyncmode = false;
		pdv.show();
	}
	
 	pmenu.pdv = pdv;
	
	pmenu.trackPopup(e.screenX, e.screenY, "", false);
}

 /**
 * @class Grid 메뉴에서 메뉴를 눌렀을 때 발생하는 이벤트
 * @param obj - obj
 * @param e - event 객체
 * @return 없음
 */  
function gfn_grdMenu_onmenuclick(obj:PopupMenu, e:MenuClickEventInfo)
{
	switch (e.id)
	{
		case "200":		// 인쇄
			//인쇄 모듈 연결 by kksoo
			SCReport.viewGridReport(this, obj.grid);
			//application.alert("준비중입니다.");
			break;
			
		case "210":		// 다중정렬
			gfn_gridMultiSort(obj.grid);
			break;
			
		case "220":		// 다중필터
			gfn_gridFilter(this, obj.grid);
			break;
			
		case "230":		// 검색
			gfn_gridFind(this, obj.grid);
			break;
			
		case "300":		// 정렬제거(전체)
			gfn_clearSortMark(obj.grid);
			break;
			
		case "310":		// 필터제거(전체)
			eval(obj.grid.binddataset).filter("");
			break;
			
		case "400":		// Excel 내보내기(저장)
			gfn_exportExcel(obj.grid, "", "", "", false);
			break;
			
		case "410":		// Excel 내보내기
			gfn_exportExcel(obj.grid, "", "", "", true);
			break;
			
		case "420":		// Excel 가져오기
			var dsName = obj.grid.binddataset;
			gfn_importExcel("", dsName, 2, true);
			break;
			
		case "900":		// 칼럼숨기기
			obj.grid.deleteContentsCol("body",obj.col, false);
			break;
			
		case "910":		// 컬럼보이기(전체)
			obj.grid.formats = obj.gridFormat;
			break;

		case "991" :
			
			var sClip = "";
			var sSpr  = "	";
			var ds = eval(obj.grid.binddataset);
			
			if (ds.getRowCount() == 0) {
				gfn_alert("조회된 자료가 없습니다.");
				return;
			}
			
			var i = ds.rowposition;
			
			for (var j = 1; j < obj.grid.getCellCount("Body"); j++) 
			{
				if (j < obj.grid.getCellCount("Body")) 
				{
					if (obj.grid.getCellValue(i, j) != undefined) {
						sClip += obj.grid.getCellText(i, j) + sSpr;
					}
					
				} 
				else 
				{
					if (obj.grid.getCellValue(i, j) != undefined) {
						sClip = sClip + obj.grid.getCellText(i, j) +  "\r\n";
					}
				}
			}

			system.clearClipboard();
			system.setClipboard("CF_TEXT", sClip.substr(0, sClip.length-2));
			break;
	}
}

/**
 * @class 그리드 Multi Sort 
 * @param objGrid - Grid Object
 * @return 없음
 */
function gfn_gridMultiSort(objGrid)
{
	var strId       = "GridMultiSort";
	var strURL      = "cmn::GridMultiSort.xfdl";
	var objArgument = {poGrid : objGrid};
	var nWidth      = -1;
	var nHeight     = -1;
	var strStyle    = "";	
	var nLeft       = -1;
	var nTop        = -1;
	var isModeless  = false;
	var bShowTitle  = true;
	var strAlign    = "-1";

	var vRtn = gfn_dialog(strId, strURL, objArgument, nWidth, nHeight, strStyle, nLeft, nTop, isModeless, bShowTitle, strAlign);
	
	if(vRtn instanceof Object) 
	{
		// Grid Head Text 초기화
		gfn_clearSortMark(objGrid);

		// Keystirng 처리
		var objDs = eval(objGrid.binddataset);
		objDs.keystring.current = vRtn["KeyString"];
		
		// Grid Head Text 처리
		var arrSortList = String(vRtn["SortString"]).split(",");
		for(var i=0;i<arrSortList.length;i++) 
		{		
			var arrSort = String(arrSortList[i]).split(":");
			if (arrSort[0] == "+") {
				objGrid.setCellProperty( "head", arrSort[1], "text", objGrid.getCellProperty("head", arrSort[1], "text")+" "+CONST_ASC_MARK);
			} else if (arrSort[0] == "-") {
				objGrid.setCellProperty( "head", arrSort[1], "text", objGrid.getCellProperty("head", arrSort[1], "text")+" "+CONST_DESC_MARK);
			} 
		}
		// Memory
		if ( !gfn_isNull(vRtn["SortDs"]) )	objGrid.dsMultiSort = vRtn["SortDs"];
	}
	else {
		// Memory 초기화
		objGrid.dsMultiSort = "";
	}
}

/**
 * @class 그리드 검색
 * @param objParent - form
 * @param objGrid - Grid Object
 * @return 없음
 */
function gfn_gridFind(objParent, objGrid)
{
	var strId       = "GridFind";
	var strURL      = "cmn::GridFind.xfdl";
	var objArgument = {arg1:objParent, arg2:objGrid, arg3:"2"};
	var nWidth      = -1;
	var nHeight     = -1;
	var strStyle    = "";	
	var nLeft       = -1;
	var nTop        = -1;
	var isModeless  = false;
	var bShowTitle  = true;
	var strAlign    = "-1";

	var vRtn = gfn_dialog(strId, strURL, objArgument, nWidth, nHeight, strStyle, nLeft, nTop, isModeless, bShowTitle, strAlign);
}

/**
 * @class 그리드 Filter
 * @param objParent - form
 * @param objGrid - Grid Object
 * @return 없음
 */
function gfn_gridFilter(objParent, objGrid)
{
	var strId       = "GridFind";
	var strURL      = "cmn::GridFilter.xfdl";
	var objArgument = {arg1:objParent, arg2:objGrid};
	var nWidth      = -1;
	var nHeight     = -1;
	var strStyle    = "";	
	var nLeft       = -1;
	var nTop        = -1;
	var isModeless  = false;
	var bShowTitle  = true;
	var strAlign    = "-1";

	var vRtn = gfn_dialog(strId, strURL, objArgument, nWidth, nHeight, strStyle, nLeft, nTop, isModeless, bShowTitle, strAlign);

	if(vRtn instanceof Object) 
	{
		// Memory
		if ( !gfn_isNull(vRtn["FilterDs"]) )	objGrid.dsMultiFilter = vRtn["FilterDs"];
	}
	else {
		// Memory 초기화
		objGrid.dsMultiFilter = "";
	}
}

/**
 * @class 그리드 헤드 클릭시 전체체크
 *            그리드 헤드 예) <Cell displaytype="checkbox" edittype="checkbox" text="expr:0"/> 로 해야함.
 *            스크립트 예)  gfn_setGridCheckAll(obj,e);
 * @param obj - Grid Object
 * @param e   - GridClickEventInfo
 * @return 없음
 */
function gfn_setGridCheckAll(obj:Grid, e:GridClickEventInfo) 
{
    if(obj.readonly == true) return;
    
    var strType;
    var vl_chk;
    var strChkVal;
    var objDS = eval(obj.binddataset);
    var nCell = e.cell;    
    
    var strVal;    
    strChkVal = gfn_transNullToEmpty(obj.getCellProperty("body", nCell, "text"));
    strChkVal = strChkVal.replace("bind:", "");
    
    var nSubCnt = obj.getSubCellCount("head", nCell);
    // Merge한 셀이 있는 경우
    if (nSubCnt > 0) 
    {
        var nChkIdx = -1;
        for ( var i = 0; i < nSubCnt; i++) 
        {
            strType = obj.getSubCellProperty("head", e.cell, i, "displaytype");
            
            if(strType == "checkbox") 
            {
                nChkIdx =  i;
                break;
            }
        }        
        if (nChkIdx == -1) return;
        
        // Head셋팅
        strVal = obj.getSubCellProperty("head", e.cell, nChkIdx, "text");
        if (gfn_isNull(strVal)) strVal = "0";
        
        if (strVal == "0") 
        {
            obj.setSubCellProperty("head", nCell, nChkIdx, "text", '1');
            vl_chk="1";
        } 
        else {
            obj.setSubCellProperty("head", nCell, nChkIdx, "text", '0');
            vl_chk="0";
        }
    } 
    // Merge한 셀이 없는 경우
    else {
        strType = obj.getCellProperty("head", nCell, "displaytype");
        if(strType != "checkbox") return;
        
        // Head셋팅
        strVal = obj.getCellProperty("head", e.cell, "text");
        if (gfn_isNull(strVal)) strVal = "0";
        
        if (strVal == "0") 
        {
            obj.setCellProperty("head", nCell, "text", '1');
            vl_chk = "1";
        } 
        else {
            obj.setCellProperty("head", nCell, "text", '0');
            vl_chk = "0";
        }
    }
    
    // Body셋팅
    for(var i=0 ; i<objDS.rowcount; i++) 
    {
        objDS.setColumn(i, strChkVal, vl_chk);
    }
}

/**
 * @class Grid의 내용을 Excel로 Export 한다.
 * @param objGrid      - 출력 대상 그리드 오브젝트
 * @param strSheetName - Sheet 명
 * @param strFileName  - 파일명 (경로 포함)
 * @param strColName   - 엑셀 Export시 제외할 칼럼명 목록( ,로 구분)
 * @param bDirectSave  - 폴더선택여부
 * @param strExportHead  - ExportItemType이 Grid인 경우 Head,Summay를 출력할지 여부
 * @param strAcceptStyle  - 추가하고자 하는 cell Style
 * @return 없음
 */
function gfn_exportExcel(objGrid, strSheetName, strFileName, strColName, bDirectSave, strExportHead, strAcceptStyle) 
{
	if (!gfn_isExcelInstall()) {
		if (!gfn_confirm("컴퓨터에 Excel이 설치된 경우에는 [확인]버튼을 클릭해 주세요.")) return;
	}
	// 엑셀 File명을 지정하여 저장할지 여부는 true
	if(gfn_isNull(bDirectSave)) bDirectSave = true;

	if(gfn_isNull(strFileName)) strFileName = gfn_replace(gfn_getFormName(),"/","");
	if(gfn_isNull(strSheetName)) strSheetName = gfn_replace(gfn_getFormName(),"/","");
		
    // 엑셀 다운로드시 objGrid에 Dataset등 다른 컴포넌트때문에 오류 발생시 리턴.
    if(objGrid.toString() != '[object Grid]') {
        return application.alert('Grid Component가 없습니다.');
    }
	
	var nRowTotal = objGrid.rowcount;	
	if (nRowTotal == 0) 
	{
        gfn_alert("msg.err.grid.nodata");	// 데이타가 없습니다.
        return;
	}
    
    //-------------------------------------------
    // 개인정보유무에 따라 처리 by kksoo
    // 개인정보가 있는 화면인 경우 마스크 정보와 개인정보처리레벨(9=관리자)에 따라 Export가 가능 
    //-------------------------------------------
    if (gfn_isNull(objGrid.persinfo) || objGrid.persinfo.toUpperCase() <> "N") {	//개인정보 포함여부 검사
		try {
			//g_PersInfoProcLevel = 1; g_PersInfoMask = "N" + g_PersInfoMask; //테스트용
			//처리레벨이 CPO가 아니고 Mask가 안된 것이 있는 경우
			//alert (g_PersInfoProcLevel + "," + g_PersInfoMask.indexOf("N"));
			if (g_PersInfoProcLevel != 9 && g_PersInfoMask.indexOf("N") != -1 && g_PersInfoMask.indexOf("N") < 11) {	//성명 이후는 무시
				if (this.isValidObject("ds_cmnAuth")) {	//권한 데이터셋이 있는 경우만
					var persInfoYn = this.ds_cmnAuth.getColumn(0,"persInfoYn");
					if (!gfn_isNull(persInfoYn) && (persInfoYn == "1" || persInfoYn == "Y")) {
						gfn_alert("msg.pers.no.mask.not.export.excel"); //마스크 처리되지 않은 개인정보가 있는 경우는 엑셀로 받을 수 없습니다.
						return;
					}
				}
			}
		}catch(e){
			gfn_alert(gfn_getMessage("msg.pers.proc.grade.not.set") + e.message); //개인정보처리등급 또는 권한정보가 설정되어 있지 않습니다. 관리자에게 연락하여 확인하십시요!
			return;
		}
	}

	// FileDialog 후 파일명 입력
	if(!bDirectSave) 
    {
		var fd = new FileDialog();		
		fd.defaultextention = true;
		fd.filter = "Excel 통합문서 (*.xlsx)|*.xlsx|Excel 97 - 2003 통합문서 (*.xls)|*.xls";
		
		var vFile = fd.open("Excel Save", FileDialog.SAVE, "%MyDocument%", strFileName);  
		if (gfn_isNull(vFile)) {
			strFileName = "";
			return;
		} else {
			strFileName = vFile.fullpath;
		}
		vFile.close();
    }
    
    this.setWaitCursor(true, true);

	// cell,area,multiarea,treecell 등 엑셀 export시 내용 삭제되어 추가
	var orgSelecttype  = objGrid.selecttype;
	objGrid.selecttype = "row";
	    	
    var objExport = new ExportObject();
    objExport.exporttype     = ExportTypes.EXCEL;
    objExport.activepagename = strSheetName;
    objExport.exportfilename = strFileName;

	// 엑셀 열기
	if(bDirectSave) 
	{
		objExport.exportopenmode  = "existopen";    	// 엑셀 다운로드 기능시 파일을 생성하지 않고 띄움		
		
// 		// 체크박스 칼럼 확인_컨버팅 요건에 의해 주석처리
//         var nIndex_check = objGrid.getBindCellIndex("body","chk");        
//         if(nIndex_check == -1)
//         {
// 			nIndex_check = objGrid.getBindCellIndex("body","CHK");
//         }
        
		//제외칼럼이 있을 경우 엑셀 export시 칼럼을 제외시킴
		if(!gfn_isNull(strColName))	//nIndex_check > -1 || 
		{
			//1. 탬프그리드 생성.
			var objGridTemp = new Grid("grd_temp", 0, 0, 1, 1);
			this.addChild("grd_temp", objGridTemp);
			
			//2. 원본 그리드 포맷 카피.
			objGridTemp.formats 	= objGrid.getFormatString();
			objGridTemp.formatid    = objGrid.formatid;
			//trace("objGridTemp.formats0 : " + objGridTemp.formats);
			
			var sBand;
			var nIndex;
			var nCol;
			
			//3-1. 특정 칼럼 제거
			if(!gfn_isNull(strColName)) 
			{
				var arrCol = gfn_split(strColName, ",");
				for(x in arrCol)
				{
					//trace("arrCol " + x + " : " + arrCol[x]);
					nIndex = gfn_getColumnCellIdx(objGridTemp, arrCol[x]);
					sBand = objGridTemp.getFormatColProperty(nIndex, "band");
					nCol = objGridTemp.deleteContentsCol(sBand, nIndex, false);
					//trace(arrCol[x] + " - nIndex : " + nIndex + " - sBand : " + sBand + " - nCol : " + nCol);
				}
			}
			
			//3-2. 체크박스 칼럼 제거
			if(nIndex_check > -1) 
			{
				sBand = objGridTemp.getFormatColProperty(nIndex_check, "band");
				objGridTemp.deleteContentsCol(sBand, nIndex_check);
            }
			
			//4. Dataset동적 바인딩.
			objGridTemp.binddataset = objGrid.binddataset;
			//trace("objGridTemp.formats2 : " + objGridTemp.formats);
			
			//5. 그리드 visible: false, show()
			objGridTemp.visible = false;
			objGridTemp.show();
			objExport.addExportItem(ExportItemTypes.GRID, objGridTemp, strSheetName + "!A1", strExportHead,"","","","","","",strAcceptStyle,"");
			
			objExport.export();
			objExport = null;
			
			//6. temp그리드 삭제.
			this.removeChild("grd_temp");
			objGridTemp.destroy();
			objGridTemp = null;			
		} 
		// Grid원본 export
		else { 
			objExport.addExportItem(ExportItemTypes.GRID, objGrid, strSheetName + "!A1",strExportHead,"","","","","","",strAcceptStyle,"");
			//objExport.addExportItem(ExportItemTypes.GRID, objGrid, strSheetName + "!A1");
			objExport.export();
			objExport = null;
		}

		// 원래 selecttype으로 변경
		objGrid.selecttype = orgSelecttype;
		
		this.setWaitCursor(false, true);
    }
    // 엑셀 File 생성
    else {
		objExport.exportactivemode 	= "noactive";		// 엑셀 익스포트 후 엑셀을 띄울지
		objExport.exportopenmode    = "overwrite";   	// File이 존재여부에 따른 구분
		objExport.exportsavemode    = "save";			// Export시 지정된 File로 Save 할지 여부, exportopenmode를 'overwirte'로 지정해야함.

		objExport.addExportItem(ExportItemTypes.GRID, objGrid, strSheetName + "!A1");
		objExport.export();
	
		// 원래 selecttype으로 변경
		objGrid.selecttype = orgSelecttype;
		
		this.setWaitCursor(false, true);		
		objExport = null;
		
		gfn_alert("msg.filesave.success", strFileName);	// $1 파일로 저장되었습니다.
    }
}


function gfn_isExcelInstall()
{
	var objExt = new ExtCommon();
	var strRegValue = objExt.regGetValue("HKEY_CLASSES_ROOT", 'Excel.Application\\CurVer', "", "S");

	if (strRegValue == 0) {
		gfn_alert("Excel이 설치되지 않습니다.");
		return false;
	} 
	
	return true;
}
/**
 * @class 여러개의 Grid 내용을 Excel의 하나의 시트에 Export 한다.
 * @param arrGridList  - 출력 대상 그리드 오브젝트 Array
 * @param strFileName  - 파일명 (경로 포함)
 * @param strSheetName - Sheet 명
 * @return 없음
 */
function gfn_exportExcelMulti(arrGridList, strFileName, strSheetName) 
{
	if (!gfn_isExcelInstall()) {
		if (!gfn_confirm("컴퓨터에 Excel이 설치된 경우에는 [확인]버튼을 클릭해 주세요.")) return;
	}
	if(gfn_isNull(strFileName)) strFileName = gfn_getFormName();
	if(gfn_isNull(strSheetName)) strSheetName = gfn_getFormName();
	
    if (lv_VirtualFile != null) 
    {
        // 기 존재하는 파일 삭제
        if (lv_VirtualFile.open(VirtualFile.openRead)) {
            VirtualFile.delete(lv_VirtualFile);
            lv_VirtualFile.close();
            lv_VirtualFile = null;
        }
    }
    
    // Excel File명에 시간정보를 추가하여 중복되지 않게 한다.
    var to_day = new Date();
    strFileName = strFileName + "_" + to_day.getTime();
    
    var objExport = new ExportObject();
    objExport.exporttype = ExportTypes.EXCEL;
    objExport.activepagename = strSheetName;
    
    objExport.exportopenmode = "overwrite";    // 엑셀 다운로드 기능시 파일을 생성하지 않고 띄움
    objExport.exportfilename = strFileName;
    
    var i, j, count, tmp;
    var bandType;           // band 타입
    var headCnt = 0;        // band:head 갯수
    var bodyCnt = 0;        // band:body 갯수
    var summCnt = 0;        // band:summ 갯수
    var index   = 1;        // 엑셀에 저장될 Index
    var gap     = 1;        // 저장될 그리드와 그리드 사이 간격 ROW
    var objGrid, objDs;
    
    // 여러개의 그리드를 하나씩 addExportItem 한다.
    for(i=0;i<arrGridList.length;i++) {
        // 엑셀 다운로드시 objGrid에 Dataset등 다른 컴포넌트때문에 오류 발생시 리턴.
        if(arrGridList[i].toString() != '[object Grid]') {
            return application.alert('Grid Component가 없습니다.');
        }
        
        objGrid = arrGridList[i];
        objDs = eval(objGrid.binddataset);
        
        // 그리드의 Rows 갯수(head, body, summ)
        tmp = objGrid.getFormatRowCount();
        headCnt = 0;
        bodyCnt = 0;
        summCnt = 0;
        
        // 각각의 band 타입에 따른 갯수를 산출한다.
        for(j=0;j<tmp;j++) {
            bandType = objGrid.getFormatRowProperty(j, "band");
            
            if(bandType=="head") {
                headCnt++;
            } else if(bandType=="body") {
                bodyCnt++;
            } else if(bandType=="summ") {
                summCnt++;
            }
        }
        
        objExport.addExportItem(ExportItemTypes.GRID, objGrid, strSheetName + "!A"+index);
        
        // 등록한 Grid의 row 갯수(head, body, summ 총합) 갯수를 index에 추가하여
        // 다음에 등록할 Grid의 엑셀 Index를 저장한다.
        // head 갯수 + (body 갯수 * 연결된 Dataset의 rowcount) + summ 갯수
        count = headCnt+(bodyCnt*objDs.rowcount)+summCnt;
        index = index + count + gap;
    }
    
    objExport.export();
    objExport = null;
}

/**
 * @class 화면 전체의Grid를 찾아 내용을 Excel로 Sheet별로 Export 한다.
 * @param strFileName  - 파일명
 * @return 없음
 */
function gfn_exportExcelAll(strFileName) 
{
	if (!gfn_isExcelInstall()) {
		if (!gfn_confirm("컴퓨터에 Excel이 설치된 경우에는 [확인]버튼을 클릭해 주세요.")) return;
	}

	if(gfn_isNull(strFileName)) strFileName = gfn_getFormName();
	
    this.setWaitCursor(true);
    
    if (lv_VirtualFile != null) 
    {
        if (lv_VirtualFile.open(VirtualFile.openRead)) {
            VirtualFile.delete(lv_VirtualFile);
            lv_VirtualFile.close();
            lv_VirtualFile = null;
        }
    }
    
    var to_day = new Date();
    strFileName = strFileName + "_" + to_day.getTime();
    
    // Global Export Object
    var objExport = new ExportObject();
    objExport.exporttype = ExportTypes.EXCEL;
    objExport.exportopenmode = "overwrite";
    objExport.exportfilename = strFileName;
    
    var nSheetCnt = 1;
    var componetlist = this.components;
    
    for(var i=0; i<componetlist.length; i++) {
        if(componetlist[i] == "[object Grid]") {
            objExport.activepagename = "Sheet" + nSheetCnt;
            objExport.addExportItem(ExportItemTypes.GRID, componetlist[i], "Sheet" + nSheetCnt + "!A1");
            nSheetCnt++;
        }
    }
    
    objExport.export();
    objExport = null;
    
    this.setWaitCursor(false);
}

/**
 * @class Grid의 내용을 조회 조건을 포함하여 Excel로 Export 한다.
 * @param objGrid    - 출력 대상 그리드 오브젝트
 * @param nAllCnt    - 총건수
 * @param arrCond    - 조회 조건
 * @param sFileName  - 파일명
 * @param sSheetName - 시트명
 * @param nRangeGap  - 조회조건과 데이타 간격
 * @return 없음
 */
function gfn_exportExcelCond(objGrid, nAllCnt, arrCond, sFileName, sSheetName, nRangeGap) 
{
	if (!gfn_isExcelInstall()) {
		if (!gfn_confirm("컴퓨터에 Excel이 설치된 경우에는 [확인]버튼을 클릭해 주세요.")) return;
	}
	if(gfn_isNull(sFileName)) sFileName = gfn_getFormName();
	if(gfn_isNull(sSheetName)) sSheetName = gfn_getFormName();
	
    if (nRangeGap == undefined) nRangeGap = 2;
    
    //출력시간
    var sTodayTime = gfn_trim(gfn_todayTime());
    var sTodayTimeMark = "";
    sTodayTimeMark += sTodayTime.substr(0,4) + ".";
    sTodayTimeMark += sTodayTime.substr(4,2) + ".";
    sTodayTimeMark += sTodayTime.substr(6,2) + "  ";
    sTodayTimeMark += sTodayTime.substr(8,2) + ":";
    sTodayTimeMark += sTodayTime.substr(10,2);
    
    //조회조건그리드 export시 그리드에 데이타셋이 바인딩되어야지만 나옴으로 임시ds만 생성
    var objTmpDS = new Dataset();
    objTmpDS.name = "_ds_CondTmp";
    this.addChild("_ds_CondTmp", objTmpDS);
    objTmpDS.addColumn("tmp1","string");
    objTmpDS.addRow();
    
    //Grid 동적생성 script
    var objGridCond = new Grid("_grd_Cond", 0, 0, 0, 0);
    
    // Add Object to Parent Form
    this.addChild("_grd_Cond", objGridCond);
    
    //출력을 위해 데이타셋바인딩
    objGridCond.binddataset = "_ds_CondTmp";
    
    //head/body/summ 영역구성
    //타이틀영역
    objGridCond.appendContentsRow("head");
    
    //조회조건수를 4개씩 보여주기위한 body를 생성
    var nRowCnt = Math.ceil(arrCond.length / 3);
    for (var i = 0 ; i < nRowCnt  ; i++) {
        objGridCond.appendContentsRow("body");
    }
    
    //export 되는 데이타영역만큼 col갯수 맞춰서 늘리기
    for (var i = 0 ; i < objGrid.getFormatColCount() -1 ; i++) {
        objGridCond.insertContentsCol(i);
    }
    
    //타이틀 셋팅
    var nHeadCellCnt = objGridCond.getCellCount("Head");
    objGridCond.mergeContentsCell("head", 0, 0, 0, nHeadCellCnt-1, 0, false);
    objGridCond.setCellProperty("head", 0, "text", sSheetName);
    objGridCond.setCellProperty("head", 0, "font", "돋움,13,bold");
    
    //조회조건영역 구성하기(merge)
    var nMergeCnt =  Math.floor(objGrid.getFormatColCount()/3);    //merge col수
    for (var i = 0 ; i < nRowCnt ; i ++) {
        var j = 0;
        while(j < objGrid.getFormatColCount()) {
            if (j+nMergeCnt > objGrid.getFormatColCount()) {
                break;
            }
            //마지막merge할때는 남은col포함하여 더하기
            if (j + nMergeCnt*2 > objGrid.getFormatColCount()) {
                objGridCond.mergeContentsCell("body",i,j,i,objGrid.getFormatColCount(),0,false)
            } else {
                objGridCond.mergeContentsCell("body",i,j,i,j + nMergeCnt -1,0,false)
            }
            j = j + nMergeCnt;
        }
    }
    
    //조회조건영역 데이타 넣기
    for (var ii = 0 ; ii < arrCond.length  ; ii++) {
        objGridCond.setCellProperty( "body", ii, "align", "left middle");
        objGridCond.setCellProperty( "body", ii, "text", arrCond[ii]);
    }
    
    // 총건수 넣기
    objGridCond.appendContentsRow("summ");
    var nSummCellCnt = objGridCond.getCellCount("summ");
    objGridCond.mergeContentsCell("summ", 0, 0, 0, nSummCellCnt-1, 0, false);
    objGridCond.setCellProperty("summ", 0, "text", sTodayTimeMark + "         총"+nAllCnt+"건");
    objGridCond.setCellProperty("summ", 0, "align", "right middle");
    objGridCond.show();
    
    //EXCEL EXPORT
    var objExport = new ExportObject();
    objExport.exporttype = ExportTypes.EXCEL;
    objExport.activepagename = sSheetName;
    objExport.exportfilename = sFileName;
    
    objExport.addExportItem(ExportItemTypes.GRID, objGridCond, sSheetName + "!A1");
    objExport.addExportItem(ExportItemTypes.GRID, objGrid, sSheetName + "!A"+(objGridCond.getFormatRowCount() + nRangeGap + 1));
    
    objExport.export();
    objExport = null;
    
    // Destroy Object
    this.removeChild("_grd_Cond");
    this.removeChild(objTmpDS.name);
    objGridCond.destroy();
    objGridCond = null;
    objTmpDS = null;
}

/**
 * @class 시스템 기본 FileDialog를 호출한다.
 * @param strOpenMode   - Dialog 종류  : LOAD, SAVE, MULTILOAD
 * @param strFilterFlag - 파일형식필터 : EXCEL, IMAGE
 * @return String 파일 전체 경로
 */
var lv_VirtualFile  = new VirtualFile();    // 엑셀 파일 저장시 삭제용 VirtualFile Object
function gfn_excelFileDialog(strOpenMode, strFilterFlag) 
{
	if (!gfn_isExcelInstall()) {
		if (!gfn_confirm("컴퓨터에 Excel이 설치된 경우에는 [확인]버튼을 클릭해 주세요.")) return;
	}
    // 엑셀 다운로드 기능시 파일을 생성하지 않고 띄움
    if (strOpenMode == "SAVE" && strFilterFlag == "EXCEL") 
    {
        return "SAVE_EXCEL";
    }
    
    lv_VirtualFile = null;
    
    var v_Title = "";
    var v_ConstMode = null;
    
    if (strOpenMode == "SAVE") {
        v_Title = "Save";
        v_ConstMode = FileDialog.SAVE;
    } else if (strOpenMode == "LOAD") {
        v_Title = "Open";
        v_ConstMode = FileDialog.LOAD;
    } else if (strOpenMode == "MULTILOAD") {
        v_Title = "Open";
        v_ConstMode = FileDialog.MULTILOAD;
    }
    
    var v_Filter = "";
    if (strFilterFlag == "EXCEL") {
        v_Filter = "Excel 통합문서 (*.xlsx)|*.xlsx|Excel 97 - 2003 통합문서 (*.xls)|*.xls";
    } else if (strFilterFlag == "IMAGE") {
        v_Filter = "image files (*.bmp;*.jpg;*.jpeg;*.gif;*.png)|*.bmp;*.jpg;*.jpeg;*.gif;*.png";
    } else {
        v_Filter = "All (*.*)|*.*";
    }
    
    var fd = new FileDialog();
    
    fd.defaultextention = true;
    fd.filter = v_Filter;
    
    var vFile = fd.open(v_Title, v_ConstMode, "%MyDocument%");
    var filePath = "";
    
    if (vFile == undefined || vFile == null) {
        filePath = "";
    } else {
        filePath = vFile.fullpath;
        vFile.close();
    }
    
    if (strOpenMode == "SAVE" && strFilterFlag == "EXCEL") {
        lv_VirtualFile = vFile;
    }
    
    fd = null;
    
    return filePath;
}

/**
 * @class Excel 내용을 Dataset에 Import 한다.
 * @param strFileName  - 파일명 (경로 포함)
 * @param strDsName    - Import 대상 Dataset Name
 * @param nStartRow    - Import 시작 행(사용된 Range 기준, 1 base)
 * @param bKeepColInfo - Dataset의 컬럼 정보를 유지할지 여부
 * @return boolean 성공여부
 */
function gfn_importExcel(strFileName, strDsName, nStartRow, bKeepColInfo) 
{
    if (gfn_isNull(strFileName)) 
    {
		strFileName = gfn_excelFileDialog("LOAD", "EXCEL");
    }

    var objDsImport = eval(strDsName);
    if (objDsImport == null || objDsImport == undefined) return false;
    if (nStartRow == null || nStartRow == 0) nStartRow = 1;
    if (bKeepColInfo == null || bKeepColInfo == undefined) bKeepColInfo = 1;
    
    var objExt = new ExtCommon();
    var v_Ret = objExt.excelImportByIndex(strFileName, 0, strDsName, bKeepColInfo, 1, 0, nStartRow);
    objExt = null;
    
    return v_Ret;
}

/**
 * @class 그리드의 Data 복사
 * @param obj  - Grid Object
 * @param e    - KeyEventInfo
 * @return 없음
 */
function gfn_gridCopy(obj, e) 
{
	//Grid Binddataset
	var strGrdDsNm = obj.binddataset;
	var v_clip = "";
	var strSeperate = "	";
	for (var i=obj.selectstartrow;i<=obj.selectendrow;i++) {
		for (var j=obj.selectstartcol;j<=obj.selectendcol;j++) {
			if (j < obj.selectendcol) {
				v_clip += obj.getCellValue(i,j) + strSeperate;
			} else {
				v_clip += obj.getCellValue(i,j);
			}
		}
		if (i < obj.selectendrow) {
			v_clip += "\r\n";
		}
	}
	v_clip += "\r\n";
	system.clearClipboard();
	system.setClipboard("CF_TEXT",v_clip);
}

/**
 * @class 그리드에 Data 붙여넣기
 * @param obj  - Grid Object
 * @param e    - KeyEventInfo
 * @return 없음
 */
function gfn_gridPaste(obj, e) 
{
	var bAddrow = true;
	if (!gfn_isNull(gfn_gridPaste.arguments[2])) {
		bAddrow = gfn_gridPaste.arguments[2];
	}
	
	//Grid Binddataset
	var strGrdDsNm = obj.binddataset;
	//cell count
	var nGrdCellCnt = obj.getCellCount("body");
	//cell position
	var nGrdCellPos = obj.getCellPos();            
	//row position
	var nRowPos = eval(strGrdDsNm).rowposition;
	//arrText2 index
	var k = 0;
	//Dataset rowcount
	var nDsRowCnt = eval(strGrdDsNm).getRowCount();        

	var t_clip = system.getClipboard("CF_UNICODETEXT");
	var strText = new String(t_clip);
	var arrText = new Array();
	var arrText2 = new Array();
	arrText = strText.split("\r\n");
	if (nDsRowCnt < (arrText.length + nRowPos -1)) {
		if (bAddrow) {
			
		} else {
			return false;
		}            
	}
	     
	//복사한 Row만큼
	for (var i=0;i<arrText.length;i++) 
	{
		if (gfn_isNull(arrText[i])) return;
		
		arrText2 = arrText[i].split("	");
		
		//기존 dataset갯수보다 많은 경우
		if ( nDsRowCnt <= nRowPos) {
			var nAddrow = eval(strGrdDsNm).addRow();
		}
		
		var nLoopCnt = (nGrdCellPos + arrText2.length);
		if (nLoopCnt > nGrdCellCnt) {
			nLoopCnt = nGrdCellCnt;
		}
		//Dataset setcolumn
		for (var j=nGrdCellPos;j<nLoopCnt;j++) {
			obj.setCellPos(j);
			obj.showEditor(true);
			obj.setEditText(arrText2[k]);
			k++;
			obj.showEditor(false);
		}
		nRowPos++;
		eval(strGrdDsNm).rowposition = nRowPos;
		k = 0;
	}
	return true;
}

/**
 * @class 페이징 초기값 및 조회 건수 설정
 * @param objSchDs - 조회 Dataset
 * @param objPagingDs - 페이징 DataSet
 * @return true / false - 갱신여부
 */
function gfn_pagingInitValue(objPagingDs, intialVolumePerPage)
{ 	
	var nCntPerPage = objPagingDs.getColumn(0, "volumePerPage");
	
	// 페이징 초기 설정
	if (gfn_isNull(nCntPerPage))
	{		
		objPagingDs.setColumn(0, "currentPage",   1);
		objPagingDs.setColumn(0, "volumePerPage", intialVolumePerPage);
	}

// 	// 페이징 콤포넌트가 아닌(조회버튼 클릭or Dataset의 onrowposchanged) 이벤트 발생시에는 항상 1 페이지로 이동
// 	if (!gfn_isNull(objButton))
// 	{		
// 		objPagingDs.setColumn(0, "currentPage",   1);
// 	}	
}

/**
 * @class 페이징일때 Grid의 No값 가져오기
 * @param objPagingDs - 페이징 DataSet
 * @return number - 순번 
 */
function gfn_gridGetNo(objPagingDs)
{ 	
	var nNowPageNum = objPagingDs.getColumn(0, "currentPage"); 	
	var nPageRowCnt = objPagingDs.getColumn(0, "volumePerPage");
	
	//trace("nNowPageNum : " + nNowPageNum);
	//trace("nPageRowCnt : " + nPageRowCnt);
	
	var nNo = ( gfn_parseInt(nNowPageNum - 1) * gfn_parseInt(nPageRowCnt) ) + currow + 1;
	return nNo;	
}

/**
 * @class 조회후 카운트 표시
 * @param objCount - 조회건수 표시 obj
 * @param nCount   - 조회건수
 * @param bStatus  - 상태창에 메시지 표시여부
 * @return 없음
 */
function gfn_setListCount(objCount, nCount)
{	
	if (objCount == undefined) return true;
	objCount.text = "[총건수 : <fc v='#1d7c72'>"+ nCount +"건</fc>]";
}]]></Script>
