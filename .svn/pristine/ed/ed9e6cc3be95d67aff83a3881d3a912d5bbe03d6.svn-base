<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml" name="sc.sca.authByMenuMgmtDAO">
	<desc>권한별 메뉴 HQML Query</desc>

	<!-- 특정 시스템에서 사용하는 권한 목록을 조회한다. -->
	<statement name="selectRoleList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthByMenuMgmtDAO.selectRoleList */
		<![CDATA[
SELECT A.ROLE,
       '(' || B.CODE_NAME || ') ' || ROLE_NAME AS ROLE_NAME
  FROM SCC_ROLE A
     , SCC_COMMON_CODE B
 WHERE B.GROUP_CODE = 'USE_CD'
   AND B.CODE = A.USE_CD
   AND A.SYS_TYPE = :sysType
   AND A.ROLE_TYPE = '본부'
   AND A.USE_YN = 'Y'
 ORDER BY B.SORT_SEQ, A.ROLE_NAME
		]]>
	</statement>

	<!-- 메뉴목록(미등록)을 조회한다. -->
	<statement name="selectMenuList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthByMenuMgmtDAO.selectMenuList */
		<![CDATA[
SELECT A.SYS_ID,
       (SELECT SYS_NAME FROM SCC_SYSTEM WHERE SYS_ID = A.SYS_ID) AS SYS_NAME,
       A.MENU_ID,
       A.MENU_NAME,
       A.PARENT_MENU_ID,
       (SELECT MENU_NAME FROM SCC_MENU WHERE MENU_ID = A.PARENT_MENU_ID) AS PARENT_MENU_NAME,
       D.SYS_TYPE,
       DECODE(B.SRC_YN, 'Y', '1', '0') AS SRC_YN,
       DECODE(B.INS_YN, 'Y', '1', '0') AS INS_YN,
       DECODE(B.DEL_YN, 'Y', '1', '0') AS DEL_YN,
       DECODE(B.SAV_YN, 'Y', '1', '0') AS SAV_YN,
       DECODE(B.PRT_YN, 'Y', '1', '0') AS PRT_YN,
       DECODE(B.EXL_YN, 'Y', '1', '0') AS EXL_YN,
       NVL((SELECT MENU_ID FROM SCC_ROLE_MENU WHERE SYS_TYPE = :sysType AND ROLE = :role AND MENU_ID = A.MENU_ID), 0) AS IS_ROLE_MENU_ID,
       LPAD(TO_CHAR(A.ROW_SORT_SEQ), 5, '0') AS ROW_POS
FROM   (SELECT A.*,
               ROWNUM AS ROW_SORT_SEQ
        FROM   (SELECT *
                FROM   (SELECT SYS_ID AS MENU_ID,
                               SYS_ID,
                               SYS_NAME AS MENU_NAME,
                               NULL AS PARENT_MENU_ID,
                               SYS_TYPE,
                               SORT_SEQ,
                               USE_YN,
                               '' AS PRG_ID
                        FROM   SCC_SYSTEM
                        WHERE  USE_YN = 'Y'
                        --AND    SYS_TYPE = :sysType
                        UNION
                        SELECT MENU_ID,
                               SYS_ID,
                               MENU_NAME,
                               CASE WHEN PARENT_MENU_ID IS NULL THEN SYS_ID ELSE PARENT_MENU_ID END AS PARENT_MENU_ID,
                               SYS_TYPE,
                               SORT_SEQ,
                               USE_YN,
                               PRG_ID
                        FROM   SCC_MENU
                        WHERE  USE_YN = 'Y') A
                START WITH PARENT_MENU_ID IS NULL
                CONNECT BY PRIOR MENU_ID = PARENT_MENU_ID
                ORDER SIBLINGS BY SORT_SEQ) A
        --WHERE SYS_TYPE = :sysType
        --AND   PARENT_MENU_ID IS NOT NULL
        WHERE  PARENT_MENU_ID IS NOT NULL
        ) A,
       SCC_PRG  B,
       SCC_SYSTEM D
WHERE  B.SYS_TYPE = A.SYS_TYPE
AND    B.PRG_ID = A.PRG_ID
AND    D.SYS_ID = A.SYS_ID
AND    A.USE_YN = 'Y'
AND    B.USE_YN = 'Y'
AND    D.USE_YN = 'Y'
AND    D.SYS_TYPE = :sysType
<#if sysId?has_content>
AND    A.SYS_ID = :sysId
</#if>
AND    A.MENU_ID NOT IN (SELECT MENU_ID
                         FROM   SCC_ROLE_MENU
                         WHERE  SYS_TYPE = :sysType
                         AND    ROLE = :role)
ORDER BY A.ROW_SORT_SEQ
		]]>
	</statement>

	<!-- 메뉴목록(등록)을 조회한다. -->
	<statement name="selectRoleMenuList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthByMenuMgmtDAO.selectRoleMenuList */
		<![CDATA[
SELECT E.ROLE,
       A.SYS_ID,
       (SELECT SYS_NAME FROM SCC_SYSTEM WHERE SYS_ID = A.SYS_ID) AS SYS_NAME,
       A.MENU_ID,
       A.MENU_NAME,
       A.PARENT_MENU_ID,
       (SELECT MENU_NAME FROM SCC_MENU WHERE MENU_ID = A.PARENT_MENU_ID) AS PARENT_MENU_NAME,
       D.SYS_TYPE,
       DECODE(B.SRC_YN, 'Y', '1', '0') AS PRG_SRC_YN,
       DECODE(B.INS_YN, 'Y', '1', '0') AS PRG_INS_YN,
       DECODE(B.DEL_YN, 'Y', '1', '0') AS PRG_DEL_YN,
       DECODE(B.SAV_YN, 'Y', '1', '0') AS PRG_SAV_YN,
       DECODE(B.PRT_YN, 'Y', '1', '0') AS PRG_PRT_YN,
       DECODE(B.EXL_YN, 'Y', '1', '0') AS PRG_EXL_YN,
       CASE WHEN B.SRC_YN = 'N' THEN '' ELSE DECODE(E.SRC_YN, 'Y', '1', '') END AS SRC_YN,
       CASE WHEN B.INS_YN = 'N' THEN '' ELSE DECODE(E.INS_YN, 'Y', '1', '') END AS INS_YN,
       CASE WHEN B.DEL_YN = 'N' THEN '' ELSE DECODE(E.DEL_YN, 'Y', '1', '') END AS DEL_YN,
       CASE WHEN B.SAV_YN = 'N' THEN '' ELSE DECODE(E.SAV_YN, 'Y', '1', '') END AS SAV_YN,
       CASE WHEN B.PRT_YN = 'N' THEN '' ELSE DECODE(E.PRT_YN, 'Y', '1', '') END AS PRT_YN,
       CASE WHEN B.EXL_YN = 'N' THEN '' ELSE DECODE(E.EXL_YN, 'Y', '1', '') END AS EXL_YN,
       CASE WHEN B.USE_YN = 'N' THEN '' ELSE DECODE(E.USE_YN, 'Y', '1', '') END AS USE_YN,
       E.REMARK,
       E.ATTR01,
       E.ATTR02,
       E.ATTR03,
       E.ATTR04,
       E.ATTR05,
       E.ATTR06,
       E.ATTR07,
       E.ATTR08,
       E.ATTR09,
       E.ATTR10,
       LPAD(TO_CHAR(A.ROW_SORT_SEQ), 5, '0') AS ROW_POS
FROM   (SELECT A.*,
               ROWNUM AS ROW_SORT_SEQ
        FROM   (SELECT *
                FROM   (SELECT SYS_ID AS MENU_ID,
                               SYS_ID,
                               SYS_NAME AS MENU_NAME,
                               NULL AS PARENT_MENU_ID,
                               SYS_TYPE,
                               SORT_SEQ,
                               USE_YN,
                               '' AS PRG_ID
                        FROM   SCC_SYSTEM
                        WHERE  USE_YN = 'Y'
                        --AND    SYS_TYPE = :sysType
                        UNION
                        SELECT MENU_ID,
                               SYS_ID,
                               MENU_NAME,
                               CASE WHEN PARENT_MENU_ID IS NULL THEN SYS_ID ELSE PARENT_MENU_ID END AS PARENT_MENU_ID,
                               SYS_TYPE,
                               SORT_SEQ,
                               USE_YN,
                               PRG_ID
                        FROM   SCC_MENU
                        WHERE  USE_YN = 'Y') A
                START WITH PARENT_MENU_ID IS NULL
                CONNECT BY PRIOR MENU_ID = PARENT_MENU_ID
                ORDER SIBLINGS BY SORT_SEQ) A
        --WHERE SYS_TYPE = :sysType
        --AND   PARENT_MENU_ID IS NOT NULL) A,
        WHERE PARENT_MENU_ID IS NOT NULL) A,
       SCC_PRG  B,
       SCC_SYSTEM D,
       SCC_ROLE_MENU E
WHERE  B.SYS_TYPE = A.SYS_TYPE
AND    B.PRG_ID = A.PRG_ID
AND    D.SYS_ID = A.SYS_ID
AND    D.SYS_TYPE = :sysType
AND    E.MENU_ID = A.MENU_ID
AND    B.USE_YN = 'Y'
AND    D.USE_YN = 'Y'
<#if sysId?has_content>
AND    A.SYS_ID = :sysId
</#if>
AND    E.SYS_TYPE = :sysType
AND    E.ROLE = :role
ORDER BY A.ROW_SORT_SEQ
		]]>
	</statement>

	<!-- 권한별 메뉴(을)를 등록한다. -->
	<statement name="insert" type="insert">
		/*+ com.hwfs.sc.sca.dao.AuthByMenuMgmtDAO.insert */
		<![CDATA[
INSERT INTO SCC_ROLE_MENU
(
 SYS_TYPE,
 ROLE,
 MENU_ID,
 SRC_YN,
 PRT_YN,
 EXL_YN,
 INS_YN,
 DEL_YN,
 SAV_YN,
 REMARK,
 USE_YN,
 ATTR01,
 ATTR02,
 ATTR03,
 ATTR04,
 ATTR05,
 ATTR06,
 ATTR07,
 ATTR08,
 ATTR09,
 ATTR10,
 CUSER,
 CDATE,
 UUSER,
 UDATE
) VALUES (
 :sysType,
 :role,
 :menuId,
<#if srcYn?exists> DECODE(:srcYn, '1', 'Y', 'N'), <#else> 'N', </#if>
<#if prtYn?exists> DECODE(:prtYn, '1', 'Y', 'N'), <#else> 'N', </#if>
<#if exlYn?exists> DECODE(:exlYn, '1', 'Y', 'N'), <#else> 'N', </#if>
<#if insYn?exists> DECODE(:insYn, '1', 'Y', 'N'), <#else> 'N', </#if>
<#if delYn?exists> DECODE(:delYn, '1', 'Y', 'N'), <#else> 'N', </#if>
<#if savYn?exists> DECODE(:savYn, '1', 'Y', 'N'), <#else> 'N', </#if>
<#if remark?exists> :remark, <#else> null, </#if>
<#if useYn?exists> DECODE(:useYn, '1', 'Y', 'N'), <#else> 'N', </#if>
<#if attr01?exists> :attr01, <#else> null, </#if>
<#if attr02?exists> :attr02, <#else> null, </#if>
<#if attr03?exists> :attr03, <#else> null, </#if>
<#if attr04?exists> :attr04, <#else> null, </#if>
<#if attr05?exists> :attr05, <#else> null, </#if>
<#if attr06?exists> :attr06, <#else> null, </#if>
<#if attr07?exists> :attr07, <#else> null, </#if>
<#if attr08?exists> :attr08, <#else> null, </#if>
<#if attr09?exists> :attr09, <#else> null, </#if>
<#if attr10?exists> :attr10, <#else> null, </#if>
 :loginSabun,
 SYSDATE,
 :loginSabun,
 SYSDATE
)
		]]>
	</statement>

	<!-- 권한별 메뉴(을)를 수정한다. -->
	<statement name="update" type="update">
		/*+ com.hwfs.sc.sca.dao.AuthByMenuMgmtDAO.update */
		<![CDATA[
UPDATE SCC_ROLE_MENU SET
<#if srcYn?exists> SRC_YN = DECODE(:srcYn, '1', 'Y', 'N'), </#if>
<#if prtYn?exists> PRT_YN = DECODE(:prtYn, '1', 'Y', 'N'), </#if>
<#if exlYn?exists> EXL_YN = DECODE(:exlYn, '1', 'Y', 'N'), </#if>
<#if insYn?exists> INS_YN = DECODE(:insYn, '1', 'Y', 'N'), </#if>
<#if delYn?exists> DEL_YN = DECODE(:delYn, '1', 'Y', 'N'), </#if>
<#if savYn?exists> SAV_YN = DECODE(:savYn, '1', 'Y', 'N'), </#if>
<#if remark?exists> REMARK = :remark, </#if>
<#if useYn?exists> USE_YN = DECODE(:useYn, '1', 'Y', 'N'), </#if>
<#if attr01?exists> ATTR01 = :attr01, </#if>
<#if attr02?exists> ATTR02 = :attr02, </#if>
<#if attr03?exists> ATTR03 = :attr03, </#if>
<#if attr04?exists> ATTR04 = :attr04, </#if>
<#if attr05?exists> ATTR05 = :attr05, </#if>
<#if attr06?exists> ATTR06 = :attr06, </#if>
<#if attr07?exists> ATTR07 = :attr07, </#if>
<#if attr08?exists> ATTR08 = :attr08, </#if>
<#if attr09?exists> ATTR09 = :attr09, </#if>
<#if attr10?exists> ATTR10 = :attr10, </#if>
       UUSER = :loginSabun,
       UDATE = SYSDATE
WHERE  SYS_TYPE = :sysType
AND    ROLE = :role
AND    MENU_ID = :menuId
		]]>
	</statement>

	<!-- 권한별 메뉴(을)를 삭제한다. -->
	<statement name="delete" type="delete">
		/*+ com.hwfs.sc.sca.dao.AuthByMenuMgmtDAO.delete */
		<![CDATA[
DELETE
FROM   SCC_ROLE_MENU
WHERE  SYS_TYPE = :sysType
AND    ROLE = :role
AND    MENU_ID = :menuId
		]]>
	</statement>

	<!-- 기 등록된 메뉴를 가져온다. -->
	<statement name="selectGetMenuList" type="select">
		/*+ com.hwfs.sc.sca.dao.AuthByMenuMgmtDAO.selectGetMenuList */
		<![CDATA[
SELECT E.ROLE,
       A.SYS_ID,
       (SELECT SYS_NAME FROM SCC_SYSTEM WHERE SYS_ID = A.SYS_ID) AS SYS_NAME,
       A.MENU_ID,
       A.MENU_NAME,
       A.PARENT_MENU_ID,
       (SELECT MENU_NAME FROM SCC_MENU WHERE MENU_ID = A.PARENT_MENU_ID) AS PARENT_MENU_NAME,
       D.SYS_TYPE,
       DECODE(B.SRC_YN, 'Y', '1', '0') AS PRG_SRC_YN,
       DECODE(B.INS_YN, 'Y', '1', '0') AS PRG_INS_YN,
       DECODE(B.DEL_YN, 'Y', '1', '0') AS PRG_DEL_YN,
       DECODE(B.SAV_YN, 'Y', '1', '0') AS PRG_SAV_YN,
       DECODE(B.PRT_YN, 'Y', '1', '0') AS PRG_PRT_YN,
       DECODE(B.EXL_YN, 'Y', '1', '0') AS PRG_EXL_YN,
       DECODE(E.SRC_YN, 'Y', '1', '') AS SRC_YN,
       DECODE(E.INS_YN, 'Y', '1', '') AS INS_YN,
       DECODE(E.DEL_YN, 'Y', '1', '') AS DEL_YN,
       DECODE(E.SAV_YN, 'Y', '1', '') AS SAV_YN,
       DECODE(E.PRT_YN, 'Y', '1', '') AS PRT_YN,
       DECODE(E.EXL_YN, 'Y', '1', '') AS EXL_YN,
       DECODE(E.USE_YN, 'Y', '1', '') AS USE_YN,
       E.REMARK,
       E.ATTR01,
       E.ATTR02,
       E.ATTR03,
       E.ATTR04,
       E.ATTR05,
       E.ATTR06,
       E.ATTR07,
       E.ATTR08,
       E.ATTR09,
       E.ATTR10,
       LPAD(TO_CHAR(A.ROW_SORT_SEQ), 5, '0') AS ROW_POS
FROM   (SELECT A.*,
               ROWNUM AS ROW_SORT_SEQ
        FROM   (SELECT *
                FROM   (SELECT SYS_ID AS MENU_ID,
                               SYS_ID,
                               SYS_NAME AS MENU_NAME,
                               NULL AS PARENT_MENU_ID,
                               SYS_TYPE,
                               SORT_SEQ,
                               USE_YN,
                               '' AS PRG_ID
                        FROM   SCC_SYSTEM
                        WHERE  USE_YN = 'Y'
                        AND    SYS_TYPE = :sysType
                        UNION
                        SELECT MENU_ID,
                               SYS_ID,
                               MENU_NAME,
                               CASE WHEN PARENT_MENU_ID IS NULL THEN SYS_ID ELSE PARENT_MENU_ID END AS PARENT_MENU_ID,
                               SYS_TYPE,
                               SORT_SEQ,
                               USE_YN,
                               PRG_ID
                        FROM   SCC_MENU
                        WHERE  USE_YN = 'Y') A
                START WITH PARENT_MENU_ID IS NULL
                CONNECT BY PRIOR MENU_ID = PARENT_MENU_ID
                ORDER SIBLINGS BY SORT_SEQ) A
        WHERE SYS_TYPE = :sysType
        AND   PARENT_MENU_ID IS NOT NULL) A,
       SCC_PRG  B,
       SCC_SYSTEM D,
       SCC_ROLE_MENU E
WHERE  B.SYS_TYPE = A.SYS_TYPE
AND    B.PRG_ID = A.PRG_ID
AND    D.SYS_ID = A.SYS_ID
AND    B.USE_YN = 'Y'
AND    D.USE_YN = 'Y'
AND    D.SYS_TYPE = :sysType
AND    E.MENU_ID = A.MENU_ID
<#if sysId?has_content>
AND    A.SYS_ID = :sysId
</#if>
AND    E.SYS_TYPE = :sysType
AND    E.ROLE = :role
ORDER BY A.ROW_SORT_SEQ
		]]>
	</statement>

</hqml>
