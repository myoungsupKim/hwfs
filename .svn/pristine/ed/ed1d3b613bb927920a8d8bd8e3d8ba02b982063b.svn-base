<?xml version="1.0" encoding="UTF-8"?>
<hqml xmlns="http://hone.hanwha.co.kr/schema/hqml"
	name="sc.app.recipeDAO">
	<desc>FC POS 마스터 외부 인터페이스 HQML</desc>









	<statement name="selectTest"><![CDATA[SELECT '1' AS CHECK_NUM
  FROM DUAL]]></statement>
	<statement name="logInsert"><![CDATA[INSERT INTO APP_INTERFACE_LOG(
INSDT,
TXID,
TXDIV,
TXHEADER,
TXDATA,
TXRESULT)
VALUES(
TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'),
<#if txId?has_content >:txId,<#else>null,</#if> 
<#if txDiv?has_content >:txDiv,<#else>null,</#if> 
<#if tHeader?has_content >:tHeader,<#else>null,</#if> 
<#if tData?has_content >:tData,<#else>null,</#if> 
<#if tResult?has_content >:tResult<#else>null</#if> 
)]]></statement>
	<statement name="selectNewRecipeInfo"><![CDATA[
SELECT PR_NUM,
       PR_ID,
       ITEM_CODE,
       FEATURE_NAME,
       KG_QTY,
       ONHAND_QTY,
       CANCEL_PR_QTY, 
       G_ITEM_PRICE,
       CENTER_FLAG,
       REMARK,
       SUBINV_CODE, 
       NEED_DATE, 
       UPJANG, 
       DEPT_ID,
       ACCTCD, 
       BUD_CLS, 
       MU_CD, 
       MIN_ORD_QTY,
       MAX_ORD_QTY, 
       CENTER_CODE, 
       MULTIPLIER_QTY, 
       BUDDEPT_ID, 
       MARGIN_PRICE, 
       UNIT_PRICE,
       KG_CONVERT_RATE, 
       MARGIN_RATE, 
       AP_UNITPRICE_UPJANG, 
       RESTRICT_PERIOD, 
       RESTRICT_REASON, 
       DUTY_END_DATE, 
       MIN_DUTY_QTY, 
       DUTY_QTY, 
       REAL_USE_QTY,
       DUP_YN, 
       SHP_MAP, 
       MTG_UNS,
       MTG_STP, 
       REQ_WKD,
       SCH, 
       D_DAY, 
       D_DAY_TXT, 
       D_DAYS, 
       D_TIMES,
       MOBILE_GUBUN,
       AGG_QTY,
       IS_ENF,
       IS_REC,
       CHEAP_YN,
       LINE_STATUS, 
       CASE WHEN SHP_MAP = 'N' THEN '단가계약 안됨'
            WHEN MTG_UNS = 'N' THEN '불용자재'
            WHEN MTG_STP = 'N' THEN '중지자재'
            WHEN REQ_WKD = 'N' THEN '요일제한'
            WHEN LENGTH(RESTRICT_PERIOD)>0 THEN '금지자재('||RESTRICT_PERIOD||','||RESTRICT_REASON||')'
            WHEN SCH = 'N' THEN '수발주제한'
            ELSE PR_REMARK END AS PR_REMARK,
       CASE WHEN SHP_MAP = 'N' OR REQ_WKD = 'N' OR SCH = 'N' THEN 'A'
            WHEN MTG_UNS = 'N' OR MTG_STP = 'N' THEN 'B'
            WHEN LENGTH(NVL(RESTRICT_PERIOD,0))>0 THEN 'C'
            ELSE 'Y' END AS PR_YN,
       CASE WHEN SHP_MAP = 'N' OR REQ_WKD = 'N' OR SCH = 'N' OR MTG_UNS = 'N' OR MTG_STP = 'N' OR LENGTH(NVL(RESTRICT_PERIOD,0))>0 THEN 0
            ELSE PR_QTY END AS PR_QTY,
       TT.MARGIN_PRICE * TT.PR_QTY AS TOT_AMT
FROM (
            SELECT
                   '' AS PR_NUM
                 , '' AS PR_ID
                 , A.ITEM_CODE
                 , A.ITEM_NAME
                 , A.ITEM_CLASS4
                 , FN_ITEM_FEATURE_ICON(A.DUTY_YN, A.PB_YN, A.ECO_ITEM, A.MANUF_CD) AS FEATURE_NAME
                 , A.ITEM_SIZE
                 , A.PO_UOM
                 , ROUND(NVL(A.EXPECT_GRAM_QTY / 1000 / A.KG_CONVERT_RATE, 2), 2) KG_QTY
                 , FSP_TRANS_QTY_FUN(:prDate, A.SUBINV_CODE, A.ITEM_CODE) AS ONHAND_QTY
                 , 0 AS CANCEL_PR_QTY
                 , NVL(LEAST(
                         DECODE(NVL(A.MAX_ORD_QTY, 0), 0, 9999999999999, A.MAX_ORD_QTY),
                         DECODE(SIGN(SCC_CEIL(A.EXPECT_GRAM_QTY / 1000 / A.KG_CONVERT_RATE, -1) - A.MIN_ORD_QTY), -1,
                         DECODE(A.POINT_FLAG, 'N', CEIL(A.MIN_ORD_QTY), A.MIN_ORD_QTY),
                         DECODE(A.POINT_FLAG, 'N', CEIL(A.EXPECT_GRAM_QTY / 1000 / A.KG_CONVERT_RATE),
                         DECODE(A.MULTIPLIER_QTY, 0, SCC_CEIL(A.EXPECT_GRAM_QTY / 1000 / A.KG_CONVERT_RATE,-1),
                                CASE WHEN MOD(SCC_CEIL(A.EXPECT_GRAM_QTY / 1000 / A.KG_CONVERT_RATE, -1), A.MULTIPLIER_QTY) > 0 THEN
                                          (TRUNC(SCC_CEIL(A.EXPECT_GRAM_QTY / 1000 / A.KG_CONVERT_RATE,-1) / A.MULTIPLIER_QTY) * A.MULTIPLIER_QTY) + A.MULTIPLIER_QTY
                                     ELSE
                                          SCC_CEIL(A.EXPECT_GRAM_QTY / 1000 / A.KG_CONVERT_RATE, -1)
                                END) ) ) ), 0) AS PR_QTY
                 , 0 AS TOT_AMT       /* TOT_AMT = MARGIN_PRICE * PR_QTY (화면에서 계산) */
                 , NVL(A.G_ITEM_PRICE, 0) AS G_ITEM_PRICE /* g당 단가 = 출하율적용단가 / Kg 환산율 / 1000 */
                 , A.TAX_CODE
                 , A.CENTER_FLAG
                 , A.PR_REMARK
                 , A.REMARK
                 , A.POINT_FLAG
                 , A.SUBINV_CODE
                 , A.NEED_DATE
                 , A.UPJANG
                 , B.DEPT_ID
                 , A.ACCTCD         /* 입고 계정 코드(대표) : MATERIAL_ACCTCD */
                 , A.BUD_CLS        /* 예산 조직 cc 코드 : BUDCC_CD */
                 , B.MU_CD
                 , A.INVAT_FLAG
                 , A.OUTVAT_FLAG
                 , A.MIN_ORD_QTY AS MIN_ORD_QTY
                 , A.MAX_ORD_QTY AS MAX_ORD_QTY
                 , A.CENTER_CODE      /* 센터코드 */
                 , A.STOCK_FLAG
                 , A.BARCODE
                 , NVL(A.MULTIPLIER_QTY, 0) AS MULTIPLIER_QTY
                 , A.BUD_CLS AS BUDDEPT_ID  /* 예산 조직 cc 코드 : BUDCC_CD - 고도화에서 부서코드가 CC로 대체됨 */
                 , A.USE_YN
                 , NVL(TO_NUMBER(DECODE(A.MARGIN_RATE, 0, A.UNIT_PRICE, (ROUND((A.UNIT_PRICE + (A.UNIT_PRICE * A.MARGIN_RATE / 100)) / 10) * 10))), 0)  AS MARGIN_PRICE /* 출하율적용단가 */
                 , NVL(A.UNIT_PRICE, 0) AS UNIT_PRICE       /* 구매(매입)단가 */
                 , A.CUSTCD           /* 매입거래처코드 */
                 , NVL(A.KG_CONVERT_RATE, 0) AS KG_CONVERT_RATE
                 , NVL(A.MARGIN_RATE, 0) AS MARGIN_RATE
                 , A.AP_UNITPRICE_UPJANG
                 , D.RESTRICT_PERIOD
                 , D.RESTRICT_REASON
                 , NULL DUTY_END_DATE
                 , 0 MIN_DUTY_QTY
                 , 0 DUTY_QTY
                 , 0 REAL_USE_QTY
                 , 'N' DUP_YN
                 , CASE WHEN EPROCUSR.FN_ITEM_PROCURE_SHP_MAP('100', 'HFC', F.OPER_ORG_SN_PURC, A.UPJANG_GRP, A.ITEM_CODE, A.NEED_DATE)    = 'CK' THEN 'Y' ELSE 'N' END
                                                                AS SHP_MAP  /* 자재 업장군 맵핑 유효성 체크 CE : 맵핑안되어있음(사용불가), CK : 맵핑되어있음(사용가능) */
                 , CASE WHEN EPROCUSR.FN_ITEM_PROCURE_MTG_UNS('100', A.ITEM_CODE) = 'UP' THEN 'Y' ELSE 'N' END
                                                                AS MTG_UNS      /* 자재불용체크 UK: 불용, UP:불용아님, NN: DATA NOT FOUND */
                 , CASE WHEN EPROCUSR.FN_ITEM_PROCURE_MTG_STP('100', A.ITEM_CODE, '01') = 'TP' THEN 'Y' ELSE 'N' END
                                                                AS MTG_STP      /* 자재 중지체크 TK : 중지(사용불가), TP : 중지아님(사용가능), NN: DATA NOT FOUND */
                 , CASE WHEN EPROCUSR.FN_ITEM_PROCURE_REQ_WKD('100', 'HFC', F.OPER_ORG_SN_PURC, A.ITEM_CODE, A.VD_SN, '01', A.NEED_DATE) = 'XR' THEN 'Y' ELSE 'N' END
                                                                AS REQ_WKD      /* 요일별 신청불가 체크 XE : 신청불가(사용불가), XR : 신청가능(사용가능), NN : DATA NOT FOUND */
                 , CASE WHEN EPROCUSR.FN_ITEM_PROCURE_SCH('100', 'HFC', F.OPER_ORG_SN_PURC, A.ITEM_CODE, A.VD_SN, '01', NVL(C.D_DAY, 0), NVL(C.D_TIMES, 0), :prDate, A.NEED_DATE) = 'HK' THEN 'Y' ELSE 'N' END
                                                                AS SCH          /* 수발주 스케쥴에 따른 유효성 체크 HE : 신청불가(사용불가), HK : 신청가능(사용가능), NN : DATA NOT FOUND */
                 , NVL(C.D_DAYS, 0) AS D_DAY
            	  ,	''	AS D_DAY_TXT
                 , DECODE(C.D_DAYS,NULL,   0, DECODE(SIGN(TO_DATE(A.NEED_DATE, 'YYYYMMDD') - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD') - NVL(C.D_DAYS,0) ) , 0,
                                              DECODE(SIGN(DECODE(C.D_TIMES, '', 24, 0, 24, C.D_TIMES) - TO_NUMBER(TO_CHAR(SYSDATE, 'HH24'))), 1, 0, 1), 0) + NVL(C.D_DAYS, 0) ) AS D_DAYS
                 , DECODE(C.D_DAYS,NULL,   0, DECODE(C.D_TIMES, '', 24, 0, 24, C.D_TIMES)) AS D_TIMES
                 , A.SPICE_YN
                 , A.CORN_YN
                 , A.IMG_PATH
                 , A.ORIGIN_NAT
                 , A.ORIGIN_TYPE
                 , A.VD_SN
                 , A.APPLY_SD
                 , 'M' AS MOBILE_GUBUN
                 , SCC_SOPR_AGG_FUN(A.SUBINV_CODE, A.ITEM_CODE, 1) AS AGG_QTY
                 , A.UPJANG_GRP
                 , NVL(A.IS_ENF, 0) AS IS_ENF
                 , NVL(A.IS_REC, 0) AS IS_REC
                 , CASE WHEN G.G_PRICE < A.G_ITEM_PRICE THEN 'Y' ELSE 'N' END AS CHEAP_YN
                 , '001' AS LINE_STATUS
                , (SELECT UR.USR_NM FROM EPROCUSR.ESMVDOG OG, EPROCUSR.ESAUSER UR WHERE OG.SYS_ID = UR.SYS_ID AND OG.COMP_CD = UR.COMP_CD AND OG.OPER_ORG_SN = '414' AND OG.VD_SN = A.VD_SN AND OG.HFC_CHR_ID = UR.USR_ID) AS MD_NAME	/*담당MD*/
              FROM (
                    SELECT /*+ USE_HASH(A C) */ A.ITEM_CODE                        AS ITEM_CODE
                         , A.UPJANG
                         , A.UPJANG                           AS AP_UNITPRICE_UPJANG
                         , A.IS_ENF
                         , A.IS_REC
                         , A.NEED_DATE
                         , A.CAFE_YN
                         , A.SUBINV_CODE
                         , A.EXPECT_GRAM_QTY
                         , C.PROC_TYP_CD                      AS CENTER_FLAG
                         , C.CENTER_CODE                      AS CENTER_CODE      /* 센터코드 */
                         , C.CONTRACT_PRICE                   AS UNIT_PRICE        /* 구매(매입)단가 */
                         , ROUND(NVL(DECODE(C.MARGIN_RATE, 0, C.CONTRACT_PRICE, ROUND((C.CONTRACT_PRICE + (C.CONTRACT_PRICE * C.MARGIN_RATE / 100)) / 10) * 10) / NVL(D.KG_CONVERT_RATE, 1) / 1000, 0), 2) AS G_ITEM_PRICE
                         , C.CUSTCD
                         , C.MARGIN_RATE
                         , C.DUTY_YN
                         , C.PB_YN
                         , C.VD_SN
                         , C.APPLY_SD
                         , C.UPJANG_GRP
                         , D.ITEM_CLASS4
                         , D.ITEM_NAME
                         , D.ITEM_SIZE
                         , D.PO_UOM
                         , D.POINT_FLAG
                         , D.TAX_CODE
                         , NVL(D.MIN_ORD_QTY, 0) AS MIN_ORD_QTY
                         , NVL(D.MAX_ORD_QTY, 0) AS MAX_ORD_QTY
                         , D.BARCODE
                         , D.MULTIPLIER_QTY
                         , D.USE_YN
                         , NVL(D.KG_CONVERT_RATE, 1)          AS KG_CONVERT_RATE
                         , D.SPICE_YN
                         , D.CORN_YN
                         , D.IMG_PATH
                         , D.ORIGIN_NAT
                         , D.ORIGIN_TYPE
                         , D.MANUF_CD
                         , D.ECO_ITEM
                         , ''                                 AS PR_REMARK
                         , ''                                 AS REMARK
                         , E.INVAT_FLAG
                         , E.OUTVAT_FLAG
                         , E.STOCK_FLAG
                         , E.MATERIAL_ACCTCD                  AS ACCTCD
                         , E.BUDCC_CD                         AS BUD_CLS
                    FROM
                         (
                          SELECT /*+ ORDERED INDEX(ID FSM_REAL_RECIPE_ITEM_IDX01) */
                                 ID.ITEM_CODE
                               , ID.UPJANG
                               , MAX(ID.ATTR10)  AS IS_ENF  /* 그룹레시피 필수자재 여부 */
                               , MAX(ID.ATTR02)  AS IS_REC  /* 권장메뉴 대표자재 여부 */
                               , ID.NEED_DATE
                               , MAX(IB.CAFE_YN) AS CAFE_YN
                               , IB.SUBINV_CODE
                               , SUM(DECODE(IB.CATER_YN, 'Y', IC.EXPECT_SALE_QTY, DECODE(IB.CAFE_YN, 'Y', IC.EXPECT_SALE_QTY, IA.EXPECT_MEAL_QTY)) * ID.NEED_QTY)
                                                 AS EXPECT_GRAM_QTY
                            FROM FSM_REAL_RECIPE_ITEM ID
                               , FSM_REAL_RECIPE_MST  IC
                               , FSM_REAL_MENU_MST    IA
                               , FSA_HALL_MST         IB
                           WHERE IA.UPJANG      = IB.UPJANG
                             AND IA.HALL_CD     = IB.HALL_CD
                             AND IA.SUBINV_CODE = IB.SUBINV_CODE
                             AND IA.SUBINV_CODE = :subinvCd
                             AND IA.UPJANG      = IC.UPJANG
                             AND IA.MENU_CD     = IC.MENU_CD
                             AND ID.UPJANG      = IC.UPJANG
                             AND ID.MENU_CD     = IC.MENU_CD
                             AND ID.RECIPE_CD   = IC.RECIPE_CD
                             AND ID.NEED_DATE   = :needDate
                             AND ID.UPJANG      = :upjangCd
                             AND ID.ORDER_YN    = 'N'
                           GROUP BY ID.ITEM_CODE
                                  , ID.UPJANG
                                  , ID.NEED_DATE
                                  , IB.SUBINV_CODE
                         ) A
                       , (
                          SELECT ITEM_CODE
                               , PROC_TYP_CD
                               , CENTER_CODE
                               , CONTRACT_PRICE
                               , CUSTCD
                               , MARGIN_RATE
                               , DUTY_YN
                               , PB_YN
                               , VD_SN
                               , APPLY_SD
                               , UPJANG_GRP
                            FROM HLDC_PO_CONTRACT_F
                           WHERE CENTER_CODE = :centerCd
                             AND UPJANG = :upjangCd
                             AND :needDate BETWEEN CONTRACT_START AND CONTRACT_END
                             AND USE_YN = 'Y'
                             AND USE_TYPE = '01'
                         ) C
                       , HLDC_PO_ITEM_MST     D
                       , HLDC_PO_SUBINVENTORY E
                   WHERE A.ITEM_CODE   = C.ITEM_CODE (+)
                     AND A.ITEM_CODE   = D.ITEM_CODE
                     AND A.UPJANG      = E.UPJANG
                     AND A.SUBINV_CODE = E.SUBINV_CODE
<#if orgPrNum?has_content>
                     AND NOT EXISTS (SELECT 1 FROM SO_PR_MENU_LOG Z WHERE Z.PR_NUM = :orgPrNum AND Z.ITEM_CODE = A.ITEM_CODE)
</#if>
                   ) A
                 , SCO_UPJANG_MST_V B
                 ,(SELECT A.CENTER_CODE
                        , A.ITEM_CODE
                        ,(SELECT TO_DATE(:needDate,'YYYYMMDD') - TO_DATE(Z.NONHOLI_DATE,'YYYYMMDD')
                            FROM (SELECT ROW_NUMBER() OVER(ORDER BY Z.CD_SY||Z.CD_SM||Z.CD_SD DESC) AS SEQ
                                       , Z.CD_SY||Z.CD_SM||Z.CD_SD AS NONHOLI_DATE
                                    FROM SCC_CALENDA_DATA Z
                                   WHERE Z.CD_SY||Z.CD_SM||Z.CD_SD < :needDate
                                     AND Z.CD_SY BETWEEN TO_NUMBER(SUBSTR(:needDate, 1, 4)) - 1 AND TO_NUMBER(SUBSTR(:needDate, 1, 4))
                                  -- AND Z.HOLIDAY NOT IN (1,2) --일요일 제외한 국가 공휴일 (일요일만 체크, 그 외 공유일은 상관없음(김진희))
                                     AND Z.CD_WEEK NOT IN ('일')) Z
                           WHERE Z.SEQ = A.D_DAYS ) AS D_DAYS
                         , A.D_DAYS  AS D_DAY
                         , A.D_TIMES
                      FROM HLDC_PO_PREORDER_LIST A
                     WHERE A.CENTER_CODE = :centerCd
                   ) C                      /* 선발주 제한 */
                 , (
                    SELECT UPJANG
                         , ITEM_CODE
                         , TO_CHAR(TO_DATE(RESTRICT_START, 'YYYYMMDD'), 'YYYY.MM.DD') || '~' || TO_CHAR(TO_DATE(RESTRICT_END, 'YYYYMMDD'), 'YYYY.MM.DD') AS RESTRICT_PERIOD
                         , RESTRICT_REASON
                      FROM FSI_RESTRICT_SET
                     WHERE UPJANG = :upjangCd
                       AND (RESTRICT_START <=:needDate AND RESTRICT_END >=:needDate)
                       AND NOT (CNL_START IS NOT NULL AND CNL_START  <=:needDate AND CNL_END      >=:needDate)
                       AND USE_YN = 'Y'
                   ) D                      /* 금지자재 */
                , VO_CENTER F
                , (
                   SELECT ITEM_CLASS4, MIN(G_PRICE) AS G_PRICE
                     FROM (
                           SELECT C.ITEM_CLASS4
                                , ROUND(DECODE(B.MARGIN_RATE, 0, B.CONTRACT_PRICE, (ROUND((B.CONTRACT_PRICE + (B.CONTRACT_PRICE * B.MARGIN_RATE / 100)) / 10) * 10)) / DECODE(C.KG_CONVERT_RATE, 0, 1, C.KG_CONVERT_RATE) / 1000, 2) G_PRICE
                             FROM ST_UPJANG A
                                , HLDC_PO_CONTRACT_F B
                                , HLDC_PO_ITEM_MST C
                            WHERE B.ITEM_CODE = C.ITEM_CODE
                              AND B.USE_YN    = 'Y'
                              AND B.CONTRACT_PRICE > 0
                              AND B.UPJANG    = A.AP_UNITPRICE_UPJANG
                              AND A.UPJANG    = :upjangCd
                              AND :needDate BETWEEN B.CONTRACT_START AND B.CONTRACT_END
                           )
                    GROUP BY ITEM_CLASS4
                  ) G
             WHERE 1=1
               AND A.UPJANG      = :upjangCd
               AND A.UPJANG      = B.UPJANG
               AND A.CENTER_CODE = C.CENTER_CODE(+)
               AND A.ITEM_CODE   = C.ITEM_CODE  (+)
               AND A.ITEM_CODE   = D.ITEM_CODE  (+)
               AND A.UPJANG      = D.UPJANG     (+)
               AND A.CENTER_CODE = F.CENTER_CODE(+)
               AND A.ITEM_CLASS4 = G.ITEM_CLASS4(+)
               AND A.ITEM_CODE NOT IN (
               	     SELECT ITEM_CODE
               	       FROM SO_PR
               	      WHERE ORG_PR_NUM  = :orgPrNum
               	        AND LINE_STATUS NOT IN('999', '003', 'PD')
               	   )
             ORDER BY A.ITEM_CLASS4, A.ITEM_NAME, A.ITEM_CODE
) TT
		]]></statement>
	<statement name="selectDuplRecipeItem"><![CDATA[
SELECT A.ITEM_CODE
     , A.UPJANG
     , A.IS_ENF
     , A.NEED_DATE
     , A.SUBINV_CODE
     , ROUND(NVL(A.EXPECT_GRAM_QTY / 1000 / C.KG_CONVERT_RATE, 2), 2) AS KG_QTY
  FROM (
        SELECT /*+ ORDERED INDEX(ID FSM_REAL_RECIPE_ITEM_IDX01) */
               ID.ITEM_CODE
             , ID.UPJANG
             , MAX(ID.ATTR10)  AS IS_ENF  /* 그룹레시피 필수자재 여부 */
             , ID.NEED_DATE
             , MAX(IB.CAFE_YN) AS CAFE_YN
             , IB.SUBINV_CODE
             , SUM(DECODE(IB.CATER_YN, 'Y', IC.EXPECT_SALE_QTY, DECODE(IB.CAFE_YN, 'Y', IC.EXPECT_SALE_QTY, IA.EXPECT_MEAL_QTY)) * ID.NEED_QTY)
                               AS EXPECT_GRAM_QTY
          FROM FSM_REAL_RECIPE_ITEM ID
             , FSM_REAL_RECIPE_MST  IC
             , FSM_REAL_MENU_MST    IA
             , FSA_HALL_MST         IB
         WHERE IA.UPJANG      = IB.UPJANG
           AND IA.HALL_CD     = IB.HALL_CD
           AND IA.SUBINV_CODE = IB.SUBINV_CODE
           AND IA.SUBINV_CODE = :subinvCd
           AND IA.UPJANG      = IC.UPJANG
           AND IA.MENU_CD     = IC.MENU_CD
           AND ID.UPJANG      = IC.UPJANG
           AND ID.MENU_CD     = IC.MENU_CD
           AND ID.RECIPE_CD   = IC.RECIPE_CD
           AND ID.NEED_DATE   = :needDate
           AND ID.UPJANG      = :upjangCd
           AND ID.ORDER_YN    = 'N'
         GROUP BY ID.ITEM_CODE
                , ID.UPJANG
                , ID.NEED_DATE
                , IB.SUBINV_CODE
       ) A
     , (
           SELECT ITEM_CODE
            FROM SO_PR
           WHERE ORG_PR_NUM  = :orgPrNum
             AND LINE_STATUS NOT IN('999', '003', 'PD')
       ) B
     , HLDC_PO_ITEM_MST C
 WHERE A.ITEM_CODE = B.ITEM_CODE
   AND A.ITEM_CODE = C.ITEM_CODE
		]]></statement>
	<statement name="selectPrRecipeInfo"><![CDATA[
SELECT	A.PR_NUM					       AS PR_NUM
      , A.ORG_PR_NUM					   AS ORG_PR_NUM
	  ,	A.PR_ID							   AS PR_ID
      , A.ITEM_CODE                        AS ITEM_CODE
	  ,	A.MENU_QTY						   AS MENU_QTY		   /* 식단필요갯수 */
	  ,	A.PR_REMARK						   AS PR_REMARK
	  ,	A.REMARK						   AS REMARK
	  ,	A.RC_UPJANG						   AS UPJANG		   /* 업장코드 */
	  ,	A.PR_QTY						   AS PR_QTY
	  ,	A.RC_UPJANG						   AS AP_UNITPRICE_UPJANG
	  ,	A.VD_SN							   AS VD_SN
	  ,	A.APPLY_SD						   AS APPLY_SD
	  ,	A.UPJANG_GRP					   AS UPJANG_GRP
	  ,	A.IS_ENF					       AS IS_ENF
	  ,	(SELECT MAX(Z.ATTR02) FROM FSM_REAL_RECIPE_ITEM Z WHERE Z.UPJANG = A.RC_UPJANG AND Z.ITEM_CODE = A.ITEM_CODE AND Z.NEED_DATE = A.NEED_DATE) AS IS_REC
           , A.LINE_STATUS
   FROM	SO_PR A
  WHERE	1=1
	AND	A.SUBINV_CODE =	:subinvCd
	AND	A.RC_UPJANG	  = :upjangCd
	AND	A.NEED_DATE	  =	:needDate
	AND	A.ORG_PR_NUM  =	:orgPrNum
<#if cancleUpdate?has_content>
	AND A.LINE_STATUS NOT IN('999', 'PD')
<#else> 
    AND A.LINE_STATUS NOT IN('999', '003', 'PD')
</#if>
  ORDER BY A.ITEM_NAME, A.ITEM_CODE
		]]></statement>
	<statement name="selectPrDelRecipeInfo"><![CDATA[
SELECT A.PR_NUM                     AS PR_NUM
      , A.ORG_PR_NUM					   AS ORG_PR_NUM
      ,	A.PR_ID							   AS PR_ID
      , A.ITEM_CODE                        AS ITEM_CODE
      , A.ITEM_NAME                        AS ITEM_NAME
      ,	A.MENU_QTY						   AS MENU_QTY		   /* 식단필요갯수 */
      ,	A.PR_REMARK						   AS PR_REMARK
      ,	A.REMARK						   AS REMARK
      ,	A.PR_DEPT_ID					   AS DEPT_ID		   /* 업장코드 */
      ,	A.RC_UPJANG						   AS UPJANG		   /* 업장코드 */
      ,	A.CENTER_CODE					   AS CENTER_CODE	   /* 센터코드 */
      ,	A.PR_QTY						   AS PR_QTY
      ,	A.RC_UPJANG						   AS AP_UNITPRICE_UPJANG
      ,	A.VD_SN							   AS VD_SN
      ,	A.APPLY_SD						   AS APPLY_SD
      ,	A.UPJANG_GRP					   AS UPJANG_GRP
   FROM	SO_PR_MENU_LOG A
  WHERE	1=1
    AND	A.SUBINV_CODE =	:subinvCd
    AND	A.RC_UPJANG	  =	:upjangCd
    AND	A.NEED_DATE	  =	:needDate
    AND	A.ORG_PR_NUM  =	:orgPrNum
    ORDER BY A.ITEM_NAME, A.ITEM_CODE
		]]></statement>

<statement name="selectPrSeq"><![CDATA[
SELECT TO_CHAR(SYSDATE,'YYYYMMDD')||'-'||LPAD(SO_PR_NUM_S.NEXTVAL,5,'0') AS PR_NUM
     , TO_CHAR(SYSDATE,'YYYYMMDD')||'-'||LPAD(SO_PR_APV_NUM_S.NEXTVAL,4,'0') APPROVE_NUM
  FROM DUAL
]]></statement>

<statement name="selectPrIdSeq"><![CDATA[
SELECT SO_PR_S.NEXTVAL AS PR_ID
  FROM DUAL
]]></statement>

<statement name="selectPrMenuLogIdSeq"><![CDATA[
SELECT SO_PR_MENU_LOG_S.NEXTVAL AS PR_ID
  FROM DUAL
]]></statement>

<statement name="saveRecipeOrderInfo"><![CDATA[
INSERT INTO SO_PR(
  PR_ID
, PR_NUM
, PR_DATE
, PR_DEPT_ID
, PR_UPJANG
, PR_SABUN
, APPROVER
, APPROVE_TIME
, APPROVE_NUM
, PO_TYPE
, DOCU_SOURCE
, CUSTCD
, SUBINV_CODE
, RC_MU_CD
, RC_DEPT_ID
, RC_UPJANG
, CENTER_CODE
, ITEM_CODE
, ITEM_NAME
, ITEM_SIZE
, PO_UOM
, TAX_CODE
, BUDDEPT_ID
, ACCTCD
, BUD_CLS
, CENTER_FLAG
, UNIT_PRICE
, MARGIN_PRICE
, SALE_PRICE
, PR_QTY
, PO_QTY
, NEED_DATE
, INVAT_FLAG
, OUTVAT_FLAG
, MENU_QTY
, PR_REMARK
, LINE_STATUS
, CREATE_BY
, UPDATE_BY
, VD_SN
, APPLY_SD
, MOBILE_GUBUN
, ORG_PR_NUM
, UPJANG_GRP
, IS_ENF)
VALUES(
:prId,
:prNum,
:prDate,
(SELECT DEPT_ID FROM HLDC_ST_UPJANG WHERE UPJANG = :prUpjangCd),
:prUpjangCd,
:sabun,
:sabun,
TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'),
:prApprNum,
:poType,
:docuGb,
:custcd,
:subinvCd,
:muCd,
:deptId,
:rcUpjangCd,
:centerCd,
:itemCd,
:itemNm,
:itemSize,
:poUom,
:taxCode,
:buddeptId,
:acctcd,
:budCls,
:centerFlag,
:unitPrice,
:marginPrice,
0,
ROUND(:prQty,1),
ROUND(:prQty,1),
:needDate,
:invatFlag,
:outvatFlag,
:kgQty,
:prRemark,
:lineStatus,
:sabun,
:sabun,
:vdSn,
:applySd,
:mobileGubun,
:orgPrNum,
:upjangGrp,
:isEnf)
]]></statement>
<statement name="updateRecipeItem"><![CDATA[
UPDATE /*+ NO_QUERY_TRANSFORMATION */ FSM_REAL_RECIPE_ITEM A
   SET A.ORDER_YN = 'Y'
     , A.PR_NUM = :orgPrNum
     , A.PR_ID = :prId
     , A.PR_QTY = ROUND(:prQty,1)
     , A.UNIT_PRICE = :unitPrice
     , A.MARGIN_PRICE = :marginPrice
     , A.MARGIN_RATE = :marginRate
     , A.UDATE = SYSDATE
     , A.UUSER = :sabun
 WHERE A.ORDER_YN = 'N'
   AND A.NEED_DATE = :needDate
   AND A.ITEM_CODE = :itemCd
   AND EXISTS
        (
        SELECT 1
          FROM FSM_REAL_MENU_MST B
              ,FSM_REAL_RECIPE_ITEM C
              ,FSA_HALL_MST D
         WHERE B.UPJANG = C.UPJANG
           AND B.MENU_CD = C.MENU_CD
           AND B.UPJANG = D.UPJANG
           AND B.HALL_CD = D.HALL_CD
           AND A.UPJANG = B.UPJANG
           AND A.MENU_CD = B.MENU_CD
           AND D.SUBINV_CODE = :subinvCd
           AND C.ITEM_CODE = :itemCd
           AND C.NEED_DATE = :needDate
        )
]]></statement>
<statement name="updateExistRecipeItem"><![CDATA[
UPDATE FSM_REAL_RECIPE_ITEM A
   SET A.ORDER_YN = :orderYn
     , A.PR_NUM = :prNum
     , A.PR_ID = :modPrId
     , A.PR_QTY = :prQty
     , A.UDATE = SYSDATE
     , A.UUSER = :sabun
 WHERE A.ORDER_YN = 'Y'
   AND A.PR_ID = :prId
]]></statement>
<statement name="updateRecipeOrderInfo"><![CDATA[
UPDATE	SO_PR
   SET PR_QTY = :prQty
     , PR_REMARK = :prRemark
     , REMARK = ''
     , UPDATE_BY = :sabun
     , UPDATE_DATE = SYSDATE
     , MOBILE_GUBUN = :mobileGubun
     , LINE_STATUS = :lineStatus
 WHERE ORG_PR_NUM = :orgPrNum
   AND PR_ID = :prId
   AND LINE_STATUS  NOT IN ('003','999','PD')
]]></statement>
<statement name="deleteRecipeOrderInfo"><![CDATA[
UPDATE	SO_PR
   SET PR_QTY = 0
     , PR_REMARK = :prRemark
     , REMARK = :remark
     , UPDATE_BY = :sabun
     , UPDATE_DATE = SYSDATE
     , MOBILE_GUBUN = :mobileGubun
     , LINE_STATUS = '999'
 WHERE ORG_PR_NUM = :orgPrNum
   AND PR_ID = :prId
]]></statement>
<statement name="deleteRecipeMenuLog"><![CDATA[
DELETE SO_PR_MENU_LOG
 WHERE ORG_PR_NUM = :orgPrNum
]]></statement>
<statement name="saveRecipeMenuLog"><![CDATA[
INSERT INTO SO_PR_MENU_LOG(
  PR_ID
, PR_NUM
, PR_DATE
, PR_DEPT_ID
, PR_UPJANG
, PR_SABUN
, APPROVER
, APPROVE_TIME
, APPROVE_NUM
, PO_TYPE
, DOCU_SOURCE
, CUSTCD
, SUBINV_CODE
, RC_MU_CD
, RC_DEPT_ID
, RC_UPJANG
, CENTER_CODE
, ITEM_CODE
, ITEM_NAME
, ITEM_SIZE
, PO_UOM
, TAX_CODE
, BUDDEPT_ID
, ACCTCD
, BUD_CLS
, CENTER_FLAG
, UNIT_PRICE
, MARGIN_PRICE
, SALE_PRICE
, PR_QTY
, PO_QTY
, NEED_DATE
, INVAT_FLAG
, OUTVAT_FLAG
, MENU_QTY
, PR_REMARK
, LINE_STATUS
, CREATE_BY
, UPDATE_BY
, VD_SN
, APPLY_SD
, ORG_PR_NUM
, UPJANG_GRP
, REMARK)
VALUES(
:prId,
:orgPrNum,
:prDate,
(SELECT DEPT_ID FROM HLDC_ST_UPJANG WHERE UPJANG = :prUpjangCd),
:prUpjangCd,
:sabun,
:sabun,
TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'),
:prApprNum,
:poType,
:docuGb,
:custcd,
:subinvCd,
:muCd,
:deptId,
:rcUpjangCd,
:centerCd,
:itemCd,
:itemNm,
:itemSize,
:poUom,
:taxCode,
:buddeptId,
:acctcd,
:budCls,
:centerFlag,
:unitPrice,
:marginPrice,
0,
ROUND(:prQty,1),
ROUND(:prQty,1),
:needDate,
:invatFlag,
:outvatFlag,
:kgQty,
:prRemark,
:lineStatus,
:sabun,
:sabun,
:vdSn,
:applySd,
:orgPrNum,
:upjangGrp,
:remark)
]]></statement>
<statement name="saveRecipeOrderReason"><![CDATA[
INSERT INTO SO_PR_REASON(
   PR_NUM
 , PR_DATE
 , PR_UPJANG
 , PR_SABUN
 , REASON_CD
 , PR_REASON
 , CREATE_DATE
 , CREATE_BY
 , UPDATE_DATE
 , UPDATE_BY
 ) VALUES (
:prNum
 , :prDate
 , :prUpjangCd
 , :sabun
 , :reasonCd
 , :prReason
 , SYSDATE
 , :sabun
 , SYSDATE
 , :sabun
)
]]></statement>
<statement name="selectResolveChk"><![CDATA[
SELECT	/*+	PUSH_PRED(A) */	B.ITEM_CODE	|| ' ' || B.ITEM_NAME AS ITEM_NAME
  FROM	HLDC_PO_PO A
	  ,	SO_PR B
 WHERE	A.PO_ID	 = B.PR_ID
	AND	A.PO_NUM = B.PR_NUM
	AND	A.LINE_STATUS IN ('GC','IV')
	AND	B.ORG_PR_NUM  =	:orgPrNum
	AND	ROWNUM <= 1
]]></statement>
<statement name="selectRecipeValidChk1"><![CDATA[
SELECT A.D_DAYS
     , A.D_TIMES
     , A.TYPE_NAME
     , CASE WHEN A.D_DAYS = 0 AND A.D_TIMES = 0 THEN CASE WHEN TO_CHAR(TO_DATE(:needDate) - A.D_DAYS + (A.D_TIMES/24), 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD') THEN 'N'
     													   WHEN TO_CHAR(TO_DATE(:needDate) - A.D_DAYS + (A.D_TIMES/24), 'YYYYMMDD') > TO_CHAR(SYSDATE, 'YYYYMMDD') THEN 'N' ELSE 'Y'	END
        ELSE
            CASE WHEN TO_CHAR(TO_DATE(:needDate) - A.D_DAYS + (A.D_TIMES/24), 'YYYYMMDDHH24') <= TO_CHAR(SYSDATE, 'YYYYMMDDHH24') THEN 'Y'
                                     ELSE 'N'
                                 END
                                END CLOSE_YN
  FROM HLDC_PO_TYPE_FS A
 WHERE A.PO_TYPE = :poType
   AND ROWNUM <= 1
]]></statement>
<statement name="selectRecipeValidChk2"><![CDATA[
SELECT A.ITEM_CODE||' '||A.ITEM_NAME AS ITEM_NAME
  FROM SO_PR A
 WHERE A.NEED_DATE = :needDate
   AND A.SUBINV_CODE = :subinvCd
   AND A.LINE_STATUS = '002'
   AND EXISTS
      (SELECT 1 FROM SO_PR Z
        WHERE Z.NEED_DATE   = A.NEED_DATE
          AND Z.SUBINV_CODE = A.SUBINV_CODE
          AND Z.ITEM_CODE   = A.ITEM_CODE
          AND Z.LINE_STATUS = A.LINE_STATUS
          AND Z.PR_QTY = A.PR_QTY
          AND Z.ROWID <> A.ROWID
          AND ABS(Z.CREATE_DATE - A.CREATE_DATE) < 0.003)       --5분 이내
   AND ROWNUM <= 1
]]></statement>
<statement name="selectRecipeValidChk3"><![CDATA[
SELECT T.*
  FROM (
  SELECT A.ITEM_CODE
       , A.ITEM_NAME
       , A.CENTER_CODE
       , A.RC_UPJANG
       , A.CENTER_FLAG
       , (SELECT CASE WHEN VAL_SHP_CNT IN ('CE', 'NN') THEN '자재 업장군 맵핑 유효성 체크 오류'
                      WHEN VAL_UNS_CNT IN ('UK', 'NN') THEN '자재 불용체크 오류'
                      WHEN VAL_STP_CNT IN ('TK', 'NN') THEN '자재 중지체크 오류'
                      WHEN VAL_EVT_CNT IN ('VE', 'NN') THEN '기획자재 한정수량체크 오류'
                      WHEN VAL_CTR_CNT IN ('SE', 'NN') THEN 'SPOT계약 발주횟수체크 오류'
                      WHEN VAL_REQ_CNT IN ('XE', 'NN') THEN '요일별 신청불가 체크 오류'
                      WHEN VAL_SCH_CNT IN ('HE', 'NN') THEN '수발주 스케쥴에 따른 유효성 체크 오류'
                      WHEN A.CENTER_FLAG = 'DC'
                          AND EPROCUSR.FC_GET_CENTER_IVT_YN('100', 'HFC', A.CENTER_CODE, A.ITEM_CODE, A.PR_QTY) = 'N' THEN 'DC자재 수량체크 오류'
                 ELSE 'OK' END
            FROM TABLE(EPROCUSR.FN_ITEM_PROCURE_VALIDATE('100', 'HFC', (SELECT OPER_ORG_SN_PURC FROM HLDC_PO_CENTER WHERE CENTER_CODE = A.CENTER_CODE)
                                                         , A.ITEM_CODE, A.VD_SN, A.APPLY_SD, A.PR_QTY, A.UPJANG_GRP, '01'
                                                         , FMS_PREORDER_FUN(A.CENTER_CODE,A.ITEM_CODE,'D_DAYS')
                                                         , FMS_PREORDER_FUN(A.CENTER_CODE,A.ITEM_CODE,'D_TIMES'), :prDate, :needDate))
         ) AS ITEM_VAL
    FROM SO_PR A
   WHERE A.ORG_PR_NUM  = :orgPrNum
     AND TO_CHAR(A.PR_ID) in (:validPrId)
     AND A.LINE_STATUS in ('002', '999')) T
 WHERE T.ITEM_VAL <> 'OK'
 ]]></statement>
 <statement name="selectRecipeValidChk4"><![CDATA[
SELECT PO_NUM AS PR_NUM
  FROM HLDC_PO_PO
 WHERE PO_NUM = :prNum
   AND PO_TYPE = :poType
 ]]></statement>
</hqml>
