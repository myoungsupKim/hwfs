<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

	<import resource="../abstractBase/batchBase.xml" />
	<!--*****************************************************************************
			Job에 대한 상세한 설명을 여기에 표현한다. (주요 처리 내용)
		*****************************************************************************-->

	<job id="fixedLengthToFixedLengthAnsiJob" parent="batchBaseJob"
		xmlns="http://www.springframework.org/schema/batch">
		<description>한글이 포함된 ANSI 인코딩 파일로 부터 고정 길이의 데이터를 읽어 고정 길이의 Output 파일을 생성한다.</description>
		<step id="fixedLengthToFixedLengthAnsiStep" parent="batchBaseStep">
			<tasklet>
				<chunk reader="fixedLengthToFixedLengthAnsiJob.fixedLengthToFixedLengthAnsiStep.fixedLengthItemReader"
					   writer="fixedLengthToFixedLengthAnsiJob.fixedLengthToFixedLengthAnsiStep.formatItemWriter"
					   commit-interval="10" />
			</tasklet>
		</step>
	</job>

	<bean id="fixedLengthToFixedLengthAnsiJob.fixedLengthToFixedLengthAnsiStep.fixedLengthItemReader"
		class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="resource" value="#{jobParameters[inputFile]}" />
		<property name="encoding" value="MS949" />
		<property name="lineMapper">
			<bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="com.hwfs.batch.item.file.transform.FixedByteLengthTokenizer">
						<property name="byteEncoding" value="MS949" />
						<property name="names" value="item1,item2,item3,item4" />
						<property name="columns" value="1-14,15-27,28-87,88-153" />
					</bean>
				</property>
				<property name="fieldSetMapper">
				    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
				    	<property name="targetType"  value="com.hwfs.batch.guide.sample.dto.GtpaIdDTO"/>
				    </bean>
				</property>
			</bean>
		</property>
	</bean>

	<!-- ANSI 형태의 byte단위 처리를 위해 ItemWriter DTO에서 Byte 처리 기능을 구현 함 -->
	<bean id="fixedLengthToFixedLengthAnsiJob.fixedLengthToFixedLengthAnsiStep.formatItemWriter"
		class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
		<property name="resource" value="#{jobParameters[outputFile]}" />
		<property name="encoding" value="MS949" />
		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.FormatterLineAggregator">
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="allItems" />
					</bean>
				</property>
				<property name="format" value="%s" />	<!-- 각 항목별로 포맷설정 가능. 여기서는 하나의 항목으로 처리하는 예 -->
				<!-- <property name="maximumLength" value="153" /> 이 프로퍼티는 생략가능-->
			</bean>
		</property>
	</bean>

</beans>
